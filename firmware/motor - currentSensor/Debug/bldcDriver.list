
bldcDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057a0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005978  08005978  00015978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059b8  080059b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080059b8  080059b8  000159b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059c0  080059c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059c0  080059c0  000159c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059c4  080059c4  000159c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080059c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  2000000c  080059d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  080059d4  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a958  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d69  00000000  00000000  0003a9d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018b0  00000000  00000000  0003d740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000136c  00000000  00000000  0003eff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000206f9  00000000  00000000  0004035c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c9ec  00000000  00000000  00060a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc796  00000000  00000000  0007d441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c60  00000000  00000000  00159bd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00160838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005960 	.word	0x08005960

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005960 	.word	0x08005960

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 ff1b 	bl	8001352 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f811 	bl	8000542 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fb8e 	bl	8000c40 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000524:	f000 f90e 	bl	8000744 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000528:	f000 f94a 	bl	80007c0 <MX_TIM1_Init>
  MX_TIM8_Init();
 800052c:	f000 fa1c 	bl	8000968 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8000530:	f000 faee 	bl	8000b10 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000534:	f000 f84e 	bl	80005d4 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000538:	f000 fb36 	bl	8000ba8 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800053c:	f000 f8c2 	bl	80006c4 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000540:	e7fe      	b.n	8000540 <main+0x2c>

08000542 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b094      	sub	sp, #80	; 0x50
 8000546:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000548:	f107 0318 	add.w	r3, r7, #24
 800054c:	2238      	movs	r2, #56	; 0x38
 800054e:	2100      	movs	r1, #0
 8000550:	4618      	mov	r0, r3
 8000552:	f005 f9d9 	bl	8005908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000564:	2000      	movs	r0, #0
 8000566:	f002 fb11 	bl	8002b8c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056a:	2301      	movs	r3, #1
 800056c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000572:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000574:	2302      	movs	r3, #2
 8000576:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000578:	2303      	movs	r3, #3
 800057a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV5;
 800057c:	2305      	movs	r3, #5
 800057e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000580:	2340      	movs	r3, #64	; 0x40
 8000582:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000584:	2302      	movs	r3, #2
 8000586:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800058c:	2302      	movs	r3, #2
 800058e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 0318 	add.w	r3, r7, #24
 8000594:	4618      	mov	r0, r3
 8000596:	f002 fbad 	bl	8002cf4 <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80005a0:	f000 fb8a 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	230f      	movs	r3, #15
 80005a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a8:	2303      	movs	r3, #3
 80005aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2104      	movs	r1, #4
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 feab 	bl	8003318 <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005c8:	f000 fb76 	bl	8000cb8 <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3750      	adds	r7, #80	; 0x50
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08c      	sub	sp, #48	; 0x30
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2220      	movs	r2, #32
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f005 f98b 	bl	8005908 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005f2:	4b32      	ldr	r3, [pc, #200]	; (80006bc <MX_ADC1_Init+0xe8>)
 80005f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005fa:	4b30      	ldr	r3, [pc, #192]	; (80006bc <MX_ADC1_Init+0xe8>)
 80005fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000600:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000602:	4b2e      	ldr	r3, [pc, #184]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000608:	4b2c      	ldr	r3, [pc, #176]	; (80006bc <MX_ADC1_Init+0xe8>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800060e:	4b2b      	ldr	r3, [pc, #172]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000614:	4b29      	ldr	r3, [pc, #164]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800061a:	4b28      	ldr	r3, [pc, #160]	; (80006bc <MX_ADC1_Init+0xe8>)
 800061c:	2204      	movs	r2, #4
 800061e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000620:	4b26      	ldr	r3, [pc, #152]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000626:	4b25      	ldr	r3, [pc, #148]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000628:	2200      	movs	r2, #0
 800062a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800062c:	4b23      	ldr	r3, [pc, #140]	; (80006bc <MX_ADC1_Init+0xe8>)
 800062e:	2201      	movs	r2, #1
 8000630:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000632:	4b22      	ldr	r3, [pc, #136]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000634:	2200      	movs	r2, #0
 8000636:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800063a:	4b20      	ldr	r3, [pc, #128]	; (80006bc <MX_ADC1_Init+0xe8>)
 800063c:	2200      	movs	r2, #0
 800063e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000640:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000642:	2200      	movs	r2, #0
 8000644:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000646:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000648:	2200      	movs	r2, #0
 800064a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800064e:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000650:	2200      	movs	r2, #0
 8000652:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000654:	4b19      	ldr	r3, [pc, #100]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000656:	2200      	movs	r2, #0
 8000658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800065c:	4817      	ldr	r0, [pc, #92]	; (80006bc <MX_ADC1_Init+0xe8>)
 800065e:	f001 f8bf 	bl	80017e0 <HAL_ADC_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000668:	f000 fb26 	bl	8000cb8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800066c:	2300      	movs	r3, #0
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000674:	4619      	mov	r1, r3
 8000676:	4811      	ldr	r0, [pc, #68]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000678:	f001 fe4c 	bl	8002314 <HAL_ADCEx_MultiModeConfigChannel>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000682:	f000 fb19 	bl	8000cb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_ADC1_Init+0xec>)
 8000688:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800068a:	2306      	movs	r3, #6
 800068c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000692:	237f      	movs	r3, #127	; 0x7f
 8000694:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000696:	2304      	movs	r3, #4
 8000698:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	4619      	mov	r1, r3
 80006a2:	4806      	ldr	r0, [pc, #24]	; (80006bc <MX_ADC1_Init+0xe8>)
 80006a4:	f001 fa20 	bl	8001ae8 <HAL_ADC_ConfigChannel>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ae:	f000 fb03 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	3730      	adds	r7, #48	; 0x30
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000028 	.word	0x20000028
 80006c0:	04300002 	.word	0x04300002

080006c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <MX_I2C1_Init+0x74>)
 80006ca:	4a1c      	ldr	r2, [pc, #112]	; (800073c <MX_I2C1_Init+0x78>)
 80006cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 80006ce:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <MX_I2C1_Init+0x74>)
 80006d0:	4a1b      	ldr	r2, [pc, #108]	; (8000740 <MX_I2C1_Init+0x7c>)
 80006d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006d4:	4b18      	ldr	r3, [pc, #96]	; (8000738 <MX_I2C1_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006da:	4b17      	ldr	r3, [pc, #92]	; (8000738 <MX_I2C1_Init+0x74>)
 80006dc:	2201      	movs	r2, #1
 80006de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e0:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_I2C1_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_I2C1_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_I2C1_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_I2C1_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_I2C1_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006fe:	480e      	ldr	r0, [pc, #56]	; (8000738 <MX_I2C1_Init+0x74>)
 8000700:	f002 f912 	bl	8002928 <HAL_I2C_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800070a:	f000 fad5 	bl	8000cb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800070e:	2100      	movs	r1, #0
 8000710:	4809      	ldr	r0, [pc, #36]	; (8000738 <MX_I2C1_Init+0x74>)
 8000712:	f002 f9a4 	bl	8002a5e <HAL_I2CEx_ConfigAnalogFilter>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800071c:	f000 facc 	bl	8000cb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000720:	2100      	movs	r1, #0
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_I2C1_Init+0x74>)
 8000724:	f002 f9e6 	bl	8002af4 <HAL_I2CEx_ConfigDigitalFilter>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800072e:	f000 fac3 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000094 	.word	0x20000094
 800073c:	40005400 	.word	0x40005400
 8000740:	30909dec 	.word	0x30909dec

08000744 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_SPI1_Init+0x74>)
 800074a:	4a1c      	ldr	r2, [pc, #112]	; (80007bc <MX_SPI1_Init+0x78>)
 800074c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_SPI1_Init+0x74>)
 8000750:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000754:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000756:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_SPI1_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800075c:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MX_SPI1_Init+0x74>)
 800075e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000762:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_SPI1_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <MX_SPI1_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_SPI1_Init+0x74>)
 8000772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000776:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_SPI1_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_SPI1_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_SPI1_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <MX_SPI1_Init+0x74>)
 800078c:	2200      	movs	r2, #0
 800078e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_SPI1_Init+0x74>)
 8000792:	2207      	movs	r2, #7
 8000794:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <MX_SPI1_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_SPI1_Init+0x74>)
 800079e:	2208      	movs	r2, #8
 80007a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_SPI1_Init+0x74>)
 80007a4:	f003 f9c4 	bl	8003b30 <HAL_SPI_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007ae:	f000 fa83 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200000e8 	.word	0x200000e8
 80007bc:	40013000 	.word	0x40013000

080007c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b09c      	sub	sp, #112	; 0x70
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
 80007f0:	615a      	str	r2, [r3, #20]
 80007f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2234      	movs	r2, #52	; 0x34
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f005 f884 	bl	8005908 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000800:	4b57      	ldr	r3, [pc, #348]	; (8000960 <MX_TIM1_Init+0x1a0>)
 8000802:	4a58      	ldr	r2, [pc, #352]	; (8000964 <MX_TIM1_Init+0x1a4>)
 8000804:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000806:	4b56      	ldr	r3, [pc, #344]	; (8000960 <MX_TIM1_Init+0x1a0>)
 8000808:	2200      	movs	r2, #0
 800080a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080c:	4b54      	ldr	r3, [pc, #336]	; (8000960 <MX_TIM1_Init+0x1a0>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000812:	4b53      	ldr	r3, [pc, #332]	; (8000960 <MX_TIM1_Init+0x1a0>)
 8000814:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000818:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081a:	4b51      	ldr	r3, [pc, #324]	; (8000960 <MX_TIM1_Init+0x1a0>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000820:	4b4f      	ldr	r3, [pc, #316]	; (8000960 <MX_TIM1_Init+0x1a0>)
 8000822:	2200      	movs	r2, #0
 8000824:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000826:	4b4e      	ldr	r3, [pc, #312]	; (8000960 <MX_TIM1_Init+0x1a0>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800082c:	484c      	ldr	r0, [pc, #304]	; (8000960 <MX_TIM1_Init+0x1a0>)
 800082e:	f003 fa2a 	bl	8003c86 <HAL_TIM_Base_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000838:	f000 fa3e 	bl	8000cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000840:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000842:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000846:	4619      	mov	r1, r3
 8000848:	4845      	ldr	r0, [pc, #276]	; (8000960 <MX_TIM1_Init+0x1a0>)
 800084a:	f003 fbe9 	bl	8004020 <HAL_TIM_ConfigClockSource>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000854:	f000 fa30 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000858:	4841      	ldr	r0, [pc, #260]	; (8000960 <MX_TIM1_Init+0x1a0>)
 800085a:	f003 fa6b 	bl	8003d34 <HAL_TIM_PWM_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000864:	f000 fa28 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000868:	2300      	movs	r3, #0
 800086a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800086c:	2300      	movs	r3, #0
 800086e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000874:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000878:	4619      	mov	r1, r3
 800087a:	4839      	ldr	r0, [pc, #228]	; (8000960 <MX_TIM1_Init+0x1a0>)
 800087c:	f004 f8f8 	bl	8004a70 <HAL_TIMEx_MasterConfigSynchronization>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000886:	f000 fa17 	bl	8000cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800088a:	2360      	movs	r3, #96	; 0x60
 800088c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000892:	2300      	movs	r3, #0
 8000894:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000896:	2300      	movs	r3, #0
 8000898:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800089e:	2300      	movs	r3, #0
 80008a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008a2:	2300      	movs	r3, #0
 80008a4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008aa:	2200      	movs	r2, #0
 80008ac:	4619      	mov	r1, r3
 80008ae:	482c      	ldr	r0, [pc, #176]	; (8000960 <MX_TIM1_Init+0x1a0>)
 80008b0:	f003 faa2 	bl	8003df8 <HAL_TIM_PWM_ConfigChannel>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80008ba:	f000 f9fd 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008c2:	2204      	movs	r2, #4
 80008c4:	4619      	mov	r1, r3
 80008c6:	4826      	ldr	r0, [pc, #152]	; (8000960 <MX_TIM1_Init+0x1a0>)
 80008c8:	f003 fa96 	bl	8003df8 <HAL_TIM_PWM_ConfigChannel>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80008d2:	f000 f9f1 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008da:	2208      	movs	r2, #8
 80008dc:	4619      	mov	r1, r3
 80008de:	4820      	ldr	r0, [pc, #128]	; (8000960 <MX_TIM1_Init+0x1a0>)
 80008e0:	f003 fa8a 	bl	8003df8 <HAL_TIM_PWM_ConfigChannel>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80008ea:	f000 f9e5 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008f2:	220c      	movs	r2, #12
 80008f4:	4619      	mov	r1, r3
 80008f6:	481a      	ldr	r0, [pc, #104]	; (8000960 <MX_TIM1_Init+0x1a0>)
 80008f8:	f003 fa7e 	bl	8003df8 <HAL_TIM_PWM_ConfigChannel>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000902:	f000 f9d9 	bl	8000cb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800091a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800091e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800092c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000936:	2300      	movs	r3, #0
 8000938:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	4619      	mov	r1, r3
 8000942:	4807      	ldr	r0, [pc, #28]	; (8000960 <MX_TIM1_Init+0x1a0>)
 8000944:	f004 f916 	bl	8004b74 <HAL_TIMEx_ConfigBreakDeadTime>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 800094e:	f000 f9b3 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000952:	4803      	ldr	r0, [pc, #12]	; (8000960 <MX_TIM1_Init+0x1a0>)
 8000954:	f000 fb1c 	bl	8000f90 <HAL_TIM_MspPostInit>

}
 8000958:	bf00      	nop
 800095a:	3770      	adds	r7, #112	; 0x70
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000014c 	.word	0x2000014c
 8000964:	40012c00 	.word	0x40012c00

08000968 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b09c      	sub	sp, #112	; 0x70
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000988:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
 8000998:	615a      	str	r2, [r3, #20]
 800099a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2234      	movs	r2, #52	; 0x34
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f004 ffb0 	bl	8005908 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80009a8:	4b57      	ldr	r3, [pc, #348]	; (8000b08 <MX_TIM8_Init+0x1a0>)
 80009aa:	4a58      	ldr	r2, [pc, #352]	; (8000b0c <MX_TIM8_Init+0x1a4>)
 80009ac:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80009ae:	4b56      	ldr	r3, [pc, #344]	; (8000b08 <MX_TIM8_Init+0x1a0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b4:	4b54      	ldr	r3, [pc, #336]	; (8000b08 <MX_TIM8_Init+0x1a0>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80009ba:	4b53      	ldr	r3, [pc, #332]	; (8000b08 <MX_TIM8_Init+0x1a0>)
 80009bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009c0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c2:	4b51      	ldr	r3, [pc, #324]	; (8000b08 <MX_TIM8_Init+0x1a0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80009c8:	4b4f      	ldr	r3, [pc, #316]	; (8000b08 <MX_TIM8_Init+0x1a0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ce:	4b4e      	ldr	r3, [pc, #312]	; (8000b08 <MX_TIM8_Init+0x1a0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80009d4:	484c      	ldr	r0, [pc, #304]	; (8000b08 <MX_TIM8_Init+0x1a0>)
 80009d6:	f003 f956 	bl	8003c86 <HAL_TIM_Base_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80009e0:	f000 f96a 	bl	8000cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80009ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80009ee:	4619      	mov	r1, r3
 80009f0:	4845      	ldr	r0, [pc, #276]	; (8000b08 <MX_TIM8_Init+0x1a0>)
 80009f2:	f003 fb15 	bl	8004020 <HAL_TIM_ConfigClockSource>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80009fc:	f000 f95c 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000a00:	4841      	ldr	r0, [pc, #260]	; (8000b08 <MX_TIM8_Init+0x1a0>)
 8000a02:	f003 f997 	bl	8003d34 <HAL_TIM_PWM_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000a0c:	f000 f954 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a10:	2300      	movs	r3, #0
 8000a12:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a14:	2300      	movs	r3, #0
 8000a16:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a20:	4619      	mov	r1, r3
 8000a22:	4839      	ldr	r0, [pc, #228]	; (8000b08 <MX_TIM8_Init+0x1a0>)
 8000a24:	f004 f824 	bl	8004a70 <HAL_TIMEx_MasterConfigSynchronization>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000a2e:	f000 f943 	bl	8000cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a32:	2360      	movs	r3, #96	; 0x60
 8000a34:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a52:	2200      	movs	r2, #0
 8000a54:	4619      	mov	r1, r3
 8000a56:	482c      	ldr	r0, [pc, #176]	; (8000b08 <MX_TIM8_Init+0x1a0>)
 8000a58:	f003 f9ce 	bl	8003df8 <HAL_TIM_PWM_ConfigChannel>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8000a62:	f000 f929 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a6a:	2204      	movs	r2, #4
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4826      	ldr	r0, [pc, #152]	; (8000b08 <MX_TIM8_Init+0x1a0>)
 8000a70:	f003 f9c2 	bl	8003df8 <HAL_TIM_PWM_ConfigChannel>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8000a7a:	f000 f91d 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a82:	2208      	movs	r2, #8
 8000a84:	4619      	mov	r1, r3
 8000a86:	4820      	ldr	r0, [pc, #128]	; (8000b08 <MX_TIM8_Init+0x1a0>)
 8000a88:	f003 f9b6 	bl	8003df8 <HAL_TIM_PWM_ConfigChannel>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8000a92:	f000 f911 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	481a      	ldr	r0, [pc, #104]	; (8000b08 <MX_TIM8_Init+0x1a0>)
 8000aa0:	f003 f9aa 	bl	8003df8 <HAL_TIM_PWM_ConfigChannel>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 8000aaa:	f000 f905 	bl	8000cb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ac2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ad4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4807      	ldr	r0, [pc, #28]	; (8000b08 <MX_TIM8_Init+0x1a0>)
 8000aec:	f004 f842 	bl	8004b74 <HAL_TIMEx_ConfigBreakDeadTime>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM8_Init+0x192>
  {
    Error_Handler();
 8000af6:	f000 f8df 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000afa:	4803      	ldr	r0, [pc, #12]	; (8000b08 <MX_TIM8_Init+0x1a0>)
 8000afc:	f000 fa48 	bl	8000f90 <HAL_TIM_MspPostInit>

}
 8000b00:	bf00      	nop
 8000b02:	3770      	adds	r7, #112	; 0x70
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000198 	.word	0x20000198
 8000b0c:	40013400 	.word	0x40013400

08000b10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b14:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <MX_USART2_UART_Init+0x90>)
 8000b16:	4a23      	ldr	r2, [pc, #140]	; (8000ba4 <MX_USART2_UART_Init+0x94>)
 8000b18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b1a:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <MX_USART2_UART_Init+0x90>)
 8000b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <MX_USART2_UART_Init+0x90>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <MX_USART2_UART_Init+0x90>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <MX_USART2_UART_Init+0x90>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <MX_USART2_UART_Init+0x90>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <MX_USART2_UART_Init+0x90>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <MX_USART2_UART_Init+0x90>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b46:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <MX_USART2_UART_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <MX_USART2_UART_Init+0x90>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b52:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <MX_USART2_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b58:	4811      	ldr	r0, [pc, #68]	; (8000ba0 <MX_USART2_UART_Init+0x90>)
 8000b5a:	f004 f897 	bl	8004c8c <HAL_UART_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b64:	f000 f8a8 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b68:	2100      	movs	r1, #0
 8000b6a:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <MX_USART2_UART_Init+0x90>)
 8000b6c:	f004 fe02 	bl	8005774 <HAL_UARTEx_SetTxFifoThreshold>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b76:	f000 f89f 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4808      	ldr	r0, [pc, #32]	; (8000ba0 <MX_USART2_UART_Init+0x90>)
 8000b7e:	f004 fe37 	bl	80057f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b88:	f000 f896 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_USART2_UART_Init+0x90>)
 8000b8e:	f004 fdb8 	bl	8005702 <HAL_UARTEx_DisableFifoMode>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b98:	f000 f88e 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200001e4 	.word	0x200001e4
 8000ba4:	40004400 	.word	0x40004400

08000ba8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bac:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bae:	4a23      	ldr	r2, [pc, #140]	; (8000c3c <MX_USART3_UART_Init+0x94>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bb2:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd8:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bde:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bea:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bf0:	4811      	ldr	r0, [pc, #68]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bf2:	f004 f84b 	bl	8004c8c <HAL_UART_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bfc:	f000 f85c 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c00:	2100      	movs	r1, #0
 8000c02:	480d      	ldr	r0, [pc, #52]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000c04:	f004 fdb6 	bl	8005774 <HAL_UARTEx_SetTxFifoThreshold>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c0e:	f000 f853 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c12:	2100      	movs	r1, #0
 8000c14:	4808      	ldr	r0, [pc, #32]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000c16:	f004 fdeb 	bl	80057f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c20:	f000 f84a 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c24:	4804      	ldr	r0, [pc, #16]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000c26:	f004 fd6c 	bl	8005702 <HAL_UARTEx_DisableFifoMode>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c30:	f000 f842 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000278 	.word	0x20000278
 8000c3c:	40004800 	.word	0x40004800

08000c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c46:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <MX_GPIO_Init+0x74>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4a:	4a1a      	ldr	r2, [pc, #104]	; (8000cb4 <MX_GPIO_Init+0x74>)
 8000c4c:	f043 0304 	orr.w	r3, r3, #4
 8000c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <MX_GPIO_Init+0x74>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c56:	f003 0304 	and.w	r3, r3, #4
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <MX_GPIO_Init+0x74>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	4a14      	ldr	r2, [pc, #80]	; (8000cb4 <MX_GPIO_Init+0x74>)
 8000c64:	f043 0320 	orr.w	r3, r3, #32
 8000c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <MX_GPIO_Init+0x74>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	f003 0320 	and.w	r3, r3, #32
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_GPIO_Init+0x74>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <MX_GPIO_Init+0x74>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_GPIO_Init+0x74>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_GPIO_Init+0x74>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	4a08      	ldr	r2, [pc, #32]	; (8000cb4 <MX_GPIO_Init+0x74>)
 8000c94:	f043 0302 	orr.w	r3, r3, #2
 8000c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_GPIO_Init+0x74>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ca6:	bf00      	nop
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40021000 	.word	0x40021000

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <Error_Handler+0x8>
	...

08000cc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <HAL_MspInit+0x44>)
 8000ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cce:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <HAL_MspInit+0x44>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <HAL_MspInit+0x44>)
 8000cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_MspInit+0x44>)
 8000ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce6:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <HAL_MspInit+0x44>)
 8000ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cec:	6593      	str	r3, [r2, #88]	; 0x58
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_MspInit+0x44>)
 8000cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cfa:	f001 ffeb 	bl	8002cd4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40021000 	.word	0x40021000

08000d0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b09a      	sub	sp, #104	; 0x68
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	2244      	movs	r2, #68	; 0x44
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f004 fdeb 	bl	8005908 <memset>
  if(hadc->Instance==ADC1)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d3a:	d134      	bne.n	8000da6 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000d3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d40:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000d42:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d46:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f002 fcff 	bl	8003750 <HAL_RCCEx_PeriphCLKConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000d58:	f7ff ffae 	bl	8000cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <HAL_ADC_MspInit+0xa4>)
 8000d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d60:	4a13      	ldr	r2, [pc, #76]	; (8000db0 <HAL_ADC_MspInit+0xa4>)
 8000d62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_ADC_MspInit+0xa4>)
 8000d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <HAL_ADC_MspInit+0xa4>)
 8000d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d78:	4a0d      	ldr	r2, [pc, #52]	; (8000db0 <HAL_ADC_MspInit+0xa4>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d80:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <HAL_ADC_MspInit+0xa4>)
 8000d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d90:	2303      	movs	r3, #3
 8000d92:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da2:	f001 fc3f 	bl	8002624 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000da6:	bf00      	nop
 8000da8:	3768      	adds	r7, #104	; 0x68
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000

08000db4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b09a      	sub	sp, #104	; 0x68
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	2244      	movs	r2, #68	; 0x44
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f004 fd97 	bl	8005908 <memset>
  if(hi2c->Instance==I2C1)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a1f      	ldr	r2, [pc, #124]	; (8000e5c <HAL_I2C_MspInit+0xa8>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d136      	bne.n	8000e52 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000de4:	2340      	movs	r3, #64	; 0x40
 8000de6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	4618      	mov	r0, r3
 8000df2:	f002 fcad 	bl	8003750 <HAL_RCCEx_PeriphCLKConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000dfc:	f7ff ff5c 	bl	8000cb8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e00:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <HAL_I2C_MspInit+0xac>)
 8000e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e04:	4a16      	ldr	r2, [pc, #88]	; (8000e60 <HAL_I2C_MspInit+0xac>)
 8000e06:	f043 0302 	orr.w	r3, r3, #2
 8000e0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0c:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <HAL_I2C_MspInit+0xac>)
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000e18:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e1c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e1e:	2312      	movs	r3, #18
 8000e20:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e32:	4619      	mov	r1, r3
 8000e34:	480b      	ldr	r0, [pc, #44]	; (8000e64 <HAL_I2C_MspInit+0xb0>)
 8000e36:	f001 fbf5 	bl	8002624 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <HAL_I2C_MspInit+0xac>)
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3e:	4a08      	ldr	r2, [pc, #32]	; (8000e60 <HAL_I2C_MspInit+0xac>)
 8000e40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e44:	6593      	str	r3, [r2, #88]	; 0x58
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_I2C_MspInit+0xac>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e52:	bf00      	nop
 8000e54:	3768      	adds	r7, #104	; 0x68
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40005400 	.word	0x40005400
 8000e60:	40021000 	.word	0x40021000
 8000e64:	48000400 	.word	0x48000400

08000e68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a25      	ldr	r2, [pc, #148]	; (8000f1c <HAL_SPI_MspInit+0xb4>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d144      	bne.n	8000f14 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e8a:	4b25      	ldr	r3, [pc, #148]	; (8000f20 <HAL_SPI_MspInit+0xb8>)
 8000e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e8e:	4a24      	ldr	r2, [pc, #144]	; (8000f20 <HAL_SPI_MspInit+0xb8>)
 8000e90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e94:	6613      	str	r3, [r2, #96]	; 0x60
 8000e96:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <HAL_SPI_MspInit+0xb8>)
 8000e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <HAL_SPI_MspInit+0xb8>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	4a1e      	ldr	r2, [pc, #120]	; (8000f20 <HAL_SPI_MspInit+0xb8>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <HAL_SPI_MspInit+0xb8>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <HAL_SPI_MspInit+0xb8>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	4a18      	ldr	r2, [pc, #96]	; (8000f20 <HAL_SPI_MspInit+0xb8>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <HAL_SPI_MspInit+0xb8>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ed2:	2320      	movs	r3, #32
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef0:	f001 fb98 	bl	8002624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ef4:	2330      	movs	r3, #48	; 0x30
 8000ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f04:	2305      	movs	r3, #5
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <HAL_SPI_MspInit+0xbc>)
 8000f10:	f001 fb88 	bl	8002624 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f14:	bf00      	nop
 8000f16:	3728      	adds	r7, #40	; 0x28
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40013000 	.word	0x40013000
 8000f20:	40021000 	.word	0x40021000
 8000f24:	48000400 	.word	0x48000400

08000f28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a13      	ldr	r2, [pc, #76]	; (8000f84 <HAL_TIM_Base_MspInit+0x5c>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d10c      	bne.n	8000f54 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <HAL_TIM_Base_MspInit+0x60>)
 8000f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3e:	4a12      	ldr	r2, [pc, #72]	; (8000f88 <HAL_TIM_Base_MspInit+0x60>)
 8000f40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f44:	6613      	str	r3, [r2, #96]	; 0x60
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <HAL_TIM_Base_MspInit+0x60>)
 8000f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000f52:	e010      	b.n	8000f76 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM8)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0c      	ldr	r2, [pc, #48]	; (8000f8c <HAL_TIM_Base_MspInit+0x64>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d10b      	bne.n	8000f76 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_TIM_Base_MspInit+0x60>)
 8000f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f62:	4a09      	ldr	r2, [pc, #36]	; (8000f88 <HAL_TIM_Base_MspInit+0x60>)
 8000f64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f68:	6613      	str	r3, [r2, #96]	; 0x60
 8000f6a:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <HAL_TIM_Base_MspInit+0x60>)
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
}
 8000f76:	bf00      	nop
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40012c00 	.word	0x40012c00
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40013400 	.word	0x40013400

08000f90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08c      	sub	sp, #48	; 0x30
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a56      	ldr	r2, [pc, #344]	; (8001108 <HAL_TIM_MspPostInit+0x178>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d168      	bne.n	8001084 <HAL_TIM_MspPostInit+0xf4>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb2:	4b56      	ldr	r3, [pc, #344]	; (800110c <HAL_TIM_MspPostInit+0x17c>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	4a55      	ldr	r2, [pc, #340]	; (800110c <HAL_TIM_MspPostInit+0x17c>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbe:	4b53      	ldr	r3, [pc, #332]	; (800110c <HAL_TIM_MspPostInit+0x17c>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	61bb      	str	r3, [r7, #24]
 8000fc8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fca:	4b50      	ldr	r3, [pc, #320]	; (800110c <HAL_TIM_MspPostInit+0x17c>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	4a4f      	ldr	r2, [pc, #316]	; (800110c <HAL_TIM_MspPostInit+0x17c>)
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd6:	4b4d      	ldr	r3, [pc, #308]	; (800110c <HAL_TIM_MspPostInit+0x17c>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	4b4a      	ldr	r3, [pc, #296]	; (800110c <HAL_TIM_MspPostInit+0x17c>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	4a49      	ldr	r2, [pc, #292]	; (800110c <HAL_TIM_MspPostInit+0x17c>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fee:	4b47      	ldr	r3, [pc, #284]	; (800110c <HAL_TIM_MspPostInit+0x17c>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PB15     ------> TIM1_CH3N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ffa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800100c:	2304      	movs	r3, #4
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	4619      	mov	r1, r3
 8001016:	483e      	ldr	r0, [pc, #248]	; (8001110 <HAL_TIM_MspPostInit+0x180>)
 8001018:	f001 fb04 	bl	8002624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800101c:	2307      	movs	r3, #7
 800101e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800102c:	2302      	movs	r3, #2
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	4619      	mov	r1, r3
 8001036:	4836      	ldr	r0, [pc, #216]	; (8001110 <HAL_TIM_MspPostInit+0x180>)
 8001038:	f001 faf4 	bl	8002624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800103c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800104e:	2304      	movs	r3, #4
 8001050:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001052:	f107 031c 	add.w	r3, r7, #28
 8001056:	4619      	mov	r1, r3
 8001058:	482e      	ldr	r0, [pc, #184]	; (8001114 <HAL_TIM_MspPostInit+0x184>)
 800105a:	f001 fae3 	bl	8002624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800105e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001070:	2306      	movs	r3, #6
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107e:	f001 fad1 	bl	8002624 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001082:	e03d      	b.n	8001100 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a23      	ldr	r2, [pc, #140]	; (8001118 <HAL_TIM_MspPostInit+0x188>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d138      	bne.n	8001100 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108e:	4b1f      	ldr	r3, [pc, #124]	; (800110c <HAL_TIM_MspPostInit+0x17c>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	4a1e      	ldr	r2, [pc, #120]	; (800110c <HAL_TIM_MspPostInit+0x17c>)
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109a:	4b1c      	ldr	r3, [pc, #112]	; (800110c <HAL_TIM_MspPostInit+0x17c>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	4b19      	ldr	r3, [pc, #100]	; (800110c <HAL_TIM_MspPostInit+0x17c>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	4a18      	ldr	r2, [pc, #96]	; (800110c <HAL_TIM_MspPostInit+0x17c>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b2:	4b16      	ldr	r3, [pc, #88]	; (800110c <HAL_TIM_MspPostInit+0x17c>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010be:	2301      	movs	r3, #1
 80010c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80010ce:	2304      	movs	r3, #4
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4619      	mov	r1, r3
 80010d8:	480e      	ldr	r0, [pc, #56]	; (8001114 <HAL_TIM_MspPostInit+0x184>)
 80010da:	f001 faa3 	bl	8002624 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 80010de:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 80010e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80010f0:	2304      	movs	r3, #4
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	4619      	mov	r1, r3
 80010fa:	4805      	ldr	r0, [pc, #20]	; (8001110 <HAL_TIM_MspPostInit+0x180>)
 80010fc:	f001 fa92 	bl	8002624 <HAL_GPIO_Init>
}
 8001100:	bf00      	nop
 8001102:	3730      	adds	r7, #48	; 0x30
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40012c00 	.word	0x40012c00
 800110c:	40021000 	.word	0x40021000
 8001110:	48000800 	.word	0x48000800
 8001114:	48000400 	.word	0x48000400
 8001118:	40013400 	.word	0x40013400

0800111c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b09e      	sub	sp, #120	; 0x78
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001134:	f107 0320 	add.w	r3, r7, #32
 8001138:	2244      	movs	r2, #68	; 0x44
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f004 fbe3 	bl	8005908 <memset>
  if(huart->Instance==USART2)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a4c      	ldr	r2, [pc, #304]	; (8001278 <HAL_UART_MspInit+0x15c>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d154      	bne.n	80011f6 <HAL_UART_MspInit+0xda>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800114c:	2302      	movs	r3, #2
 800114e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001150:	2300      	movs	r3, #0
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001154:	f107 0320 	add.w	r3, r7, #32
 8001158:	4618      	mov	r0, r3
 800115a:	f002 faf9 	bl	8003750 <HAL_RCCEx_PeriphCLKConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001164:	f7ff fda8 	bl	8000cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001168:	4b44      	ldr	r3, [pc, #272]	; (800127c <HAL_UART_MspInit+0x160>)
 800116a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116c:	4a43      	ldr	r2, [pc, #268]	; (800127c <HAL_UART_MspInit+0x160>)
 800116e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001172:	6593      	str	r3, [r2, #88]	; 0x58
 8001174:	4b41      	ldr	r3, [pc, #260]	; (800127c <HAL_UART_MspInit+0x160>)
 8001176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117c:	61fb      	str	r3, [r7, #28]
 800117e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001180:	4b3e      	ldr	r3, [pc, #248]	; (800127c <HAL_UART_MspInit+0x160>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001184:	4a3d      	ldr	r2, [pc, #244]	; (800127c <HAL_UART_MspInit+0x160>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118c:	4b3b      	ldr	r3, [pc, #236]	; (800127c <HAL_UART_MspInit+0x160>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	61bb      	str	r3, [r7, #24]
 8001196:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001198:	4b38      	ldr	r3, [pc, #224]	; (800127c <HAL_UART_MspInit+0x160>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119c:	4a37      	ldr	r2, [pc, #220]	; (800127c <HAL_UART_MspInit+0x160>)
 800119e:	f043 0302 	orr.w	r3, r3, #2
 80011a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a4:	4b35      	ldr	r3, [pc, #212]	; (800127c <HAL_UART_MspInit+0x160>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PB3     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011b4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011c2:	2307      	movs	r3, #7
 80011c4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011ca:	4619      	mov	r1, r3
 80011cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d0:	f001 fa28 	bl	8002624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011d4:	2308      	movs	r3, #8
 80011d6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011e4:	2307      	movs	r3, #7
 80011e6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011ec:	4619      	mov	r1, r3
 80011ee:	4824      	ldr	r0, [pc, #144]	; (8001280 <HAL_UART_MspInit+0x164>)
 80011f0:	f001 fa18 	bl	8002624 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011f4:	e03b      	b.n	800126e <HAL_UART_MspInit+0x152>
  else if(huart->Instance==USART3)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a22      	ldr	r2, [pc, #136]	; (8001284 <HAL_UART_MspInit+0x168>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d136      	bne.n	800126e <HAL_UART_MspInit+0x152>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001200:	2304      	movs	r3, #4
 8001202:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001204:	2300      	movs	r3, #0
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001208:	f107 0320 	add.w	r3, r7, #32
 800120c:	4618      	mov	r0, r3
 800120e:	f002 fa9f 	bl	8003750 <HAL_RCCEx_PeriphCLKConfig>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <HAL_UART_MspInit+0x100>
      Error_Handler();
 8001218:	f7ff fd4e 	bl	8000cb8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800121c:	4b17      	ldr	r3, [pc, #92]	; (800127c <HAL_UART_MspInit+0x160>)
 800121e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001220:	4a16      	ldr	r2, [pc, #88]	; (800127c <HAL_UART_MspInit+0x160>)
 8001222:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001226:	6593      	str	r3, [r2, #88]	; 0x58
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <HAL_UART_MspInit+0x160>)
 800122a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <HAL_UART_MspInit+0x160>)
 8001236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001238:	4a10      	ldr	r2, [pc, #64]	; (800127c <HAL_UART_MspInit+0x160>)
 800123a:	f043 0302 	orr.w	r3, r3, #2
 800123e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <HAL_UART_MspInit+0x160>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800124c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001250:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800125e:	2307      	movs	r3, #7
 8001260:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001262:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001266:	4619      	mov	r1, r3
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <HAL_UART_MspInit+0x164>)
 800126a:	f001 f9db 	bl	8002624 <HAL_GPIO_Init>
}
 800126e:	bf00      	nop
 8001270:	3778      	adds	r7, #120	; 0x78
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40004400 	.word	0x40004400
 800127c:	40021000 	.word	0x40021000
 8001280:	48000400 	.word	0x48000400
 8001284:	40004800 	.word	0x40004800

08001288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800128c:	e7fe      	b.n	800128c <NMI_Handler+0x4>

0800128e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <HardFault_Handler+0x4>

08001294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <MemManage_Handler+0x4>

0800129a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <BusFault_Handler+0x4>

080012a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <UsageFault_Handler+0x4>

080012a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d4:	f000 f890 	bl	80013f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}

080012dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <SystemInit+0x20>)
 80012e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012e6:	4a05      	ldr	r2, [pc, #20]	; (80012fc <SystemInit+0x20>)
 80012e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001300:	480d      	ldr	r0, [pc, #52]	; (8001338 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001302:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001304:	f7ff ffea 	bl	80012dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001308:	480c      	ldr	r0, [pc, #48]	; (800133c <LoopForever+0x6>)
  ldr r1, =_edata
 800130a:	490d      	ldr	r1, [pc, #52]	; (8001340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800130c:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <LoopForever+0xe>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001310:	e002      	b.n	8001318 <LoopCopyDataInit>

08001312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001316:	3304      	adds	r3, #4

08001318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800131c:	d3f9      	bcc.n	8001312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001320:	4c0a      	ldr	r4, [pc, #40]	; (800134c <LoopForever+0x16>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001324:	e001      	b.n	800132a <LoopFillZerobss>

08001326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001328:	3204      	adds	r2, #4

0800132a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800132c:	d3fb      	bcc.n	8001326 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800132e:	f004 faf3 	bl	8005918 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001332:	f7ff f8ef 	bl	8000514 <main>

08001336 <LoopForever>:

LoopForever:
    b LoopForever
 8001336:	e7fe      	b.n	8001336 <LoopForever>
  ldr   r0, =_estack
 8001338:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800133c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001340:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001344:	080059c8 	.word	0x080059c8
  ldr r2, =_sbss
 8001348:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800134c:	20000310 	.word	0x20000310

08001350 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001350:	e7fe      	b.n	8001350 <ADC1_2_IRQHandler>

08001352 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135c:	2003      	movs	r0, #3
 800135e:	f001 f92f 	bl	80025c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001362:	2000      	movs	r0, #0
 8001364:	f000 f80e 	bl	8001384 <HAL_InitTick>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d002      	beq.n	8001374 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	71fb      	strb	r3, [r7, #7]
 8001372:	e001      	b.n	8001378 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001374:	f7ff fca6 	bl	8000cc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001378:	79fb      	ldrb	r3, [r7, #7]

}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <HAL_InitTick+0x68>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d022      	beq.n	80013de <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_InitTick+0x6c>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b13      	ldr	r3, [pc, #76]	; (80013ec <HAL_InitTick+0x68>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80013a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ac:	4618      	mov	r0, r3
 80013ae:	f001 f92c 	bl	800260a <HAL_SYSTICK_Config>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d10f      	bne.n	80013d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b0f      	cmp	r3, #15
 80013bc:	d809      	bhi.n	80013d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013be:	2200      	movs	r2, #0
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	f04f 30ff 	mov.w	r0, #4294967295
 80013c6:	f001 f906 	bl	80025d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <HAL_InitTick+0x70>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	e007      	b.n	80013e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
 80013d6:	e004      	b.n	80013e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	73fb      	strb	r3, [r7, #15]
 80013dc:	e001      	b.n	80013e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000008 	.word	0x20000008
 80013f0:	20000000 	.word	0x20000000
 80013f4:	20000004 	.word	0x20000004

080013f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_IncTick+0x1c>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <HAL_IncTick+0x20>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4413      	add	r3, r2
 8001406:	4a03      	ldr	r2, [pc, #12]	; (8001414 <HAL_IncTick+0x1c>)
 8001408:	6013      	str	r3, [r2, #0]
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	2000030c 	.word	0x2000030c
 8001418:	20000008 	.word	0x20000008

0800141c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return uwTick;
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <HAL_GetTick+0x14>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	2000030c 	.word	0x2000030c

08001434 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	431a      	orrs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	609a      	str	r2, [r3, #8]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	609a      	str	r2, [r3, #8]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800149c:	b480      	push	{r7}
 800149e:	b087      	sub	sp, #28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
 80014a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3360      	adds	r3, #96	; 0x60
 80014ae:	461a      	mov	r2, r3
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <LL_ADC_SetOffset+0x44>)
 80014be:	4013      	ands	r3, r2
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	4313      	orrs	r3, r2
 80014cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80014d4:	bf00      	nop
 80014d6:	371c      	adds	r7, #28
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	03fff000 	.word	0x03fff000

080014e4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3360      	adds	r3, #96	; 0x60
 80014f2:	461a      	mov	r2, r3
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001504:	4618      	mov	r0, r3
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001510:	b480      	push	{r7}
 8001512:	b087      	sub	sp, #28
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	3360      	adds	r3, #96	; 0x60
 8001520:	461a      	mov	r2, r3
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	431a      	orrs	r2, r3
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800153a:	bf00      	nop
 800153c:	371c      	adds	r7, #28
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001546:	b480      	push	{r7}
 8001548:	b087      	sub	sp, #28
 800154a:	af00      	add	r7, sp, #0
 800154c:	60f8      	str	r0, [r7, #12]
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3360      	adds	r3, #96	; 0x60
 8001556:	461a      	mov	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	431a      	orrs	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001570:	bf00      	nop
 8001572:	371c      	adds	r7, #28
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800157c:	b480      	push	{r7}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	3360      	adds	r3, #96	; 0x60
 800158c:	461a      	mov	r2, r3
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	431a      	orrs	r2, r3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80015a6:	bf00      	nop
 80015a8:	371c      	adds	r7, #28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	615a      	str	r2, [r3, #20]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015d8:	b480      	push	{r7}
 80015da:	b087      	sub	sp, #28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	3330      	adds	r3, #48	; 0x30
 80015e8:	461a      	mov	r2, r3
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	f003 030c 	and.w	r3, r3, #12
 80015f4:	4413      	add	r3, r2
 80015f6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f003 031f 	and.w	r3, r3, #31
 8001602:	211f      	movs	r1, #31
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	401a      	ands	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	0e9b      	lsrs	r3, r3, #26
 8001610:	f003 011f 	and.w	r1, r3, #31
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	f003 031f 	and.w	r3, r3, #31
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	431a      	orrs	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001624:	bf00      	nop
 8001626:	371c      	adds	r7, #28
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001630:	b480      	push	{r7}
 8001632:	b087      	sub	sp, #28
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	3314      	adds	r3, #20
 8001640:	461a      	mov	r2, r3
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	0e5b      	lsrs	r3, r3, #25
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	4413      	add	r3, r2
 800164e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	0d1b      	lsrs	r3, r3, #20
 8001658:	f003 031f 	and.w	r3, r3, #31
 800165c:	2107      	movs	r1, #7
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	401a      	ands	r2, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	0d1b      	lsrs	r3, r3, #20
 800166a:	f003 031f 	and.w	r3, r3, #31
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	431a      	orrs	r2, r3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800167a:	bf00      	nop
 800167c:	371c      	adds	r7, #28
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016a0:	43db      	mvns	r3, r3
 80016a2:	401a      	ands	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f003 0318 	and.w	r3, r3, #24
 80016aa:	4908      	ldr	r1, [pc, #32]	; (80016cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80016ac:	40d9      	lsrs	r1, r3
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	400b      	ands	r3, r1
 80016b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016b6:	431a      	orrs	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80016be:	bf00      	nop
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	0007ffff 	.word	0x0007ffff

080016d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80016e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6093      	str	r3, [r2, #8]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001708:	d101      	bne.n	800170e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800172c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001730:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001754:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001758:	d101      	bne.n	800175e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b01      	cmp	r3, #1
 800177e:	d101      	bne.n	8001784 <LL_ADC_IsEnabled+0x18>
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <LL_ADC_IsEnabled+0x1a>
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d101      	bne.n	80017aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 0308 	and.w	r3, r3, #8
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d101      	bne.n	80017d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b089      	sub	sp, #36	; 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e167      	b.n	8001aca <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001804:	2b00      	cmp	r3, #0
 8001806:	d109      	bne.n	800181c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff fa7f 	bl	8000d0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff67 	bl	80016f4 <LL_ADC_IsDeepPowerDownEnabled>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d004      	beq.n	8001836 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff4d 	bl	80016d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ff82 	bl	8001744 <LL_ADC_IsInternalRegulatorEnabled>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d115      	bne.n	8001872 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff ff66 	bl	800171c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001850:	4ba0      	ldr	r3, [pc, #640]	; (8001ad4 <HAL_ADC_Init+0x2f4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	099b      	lsrs	r3, r3, #6
 8001856:	4aa0      	ldr	r2, [pc, #640]	; (8001ad8 <HAL_ADC_Init+0x2f8>)
 8001858:	fba2 2303 	umull	r2, r3, r2, r3
 800185c:	099b      	lsrs	r3, r3, #6
 800185e:	3301      	adds	r3, #1
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001864:	e002      	b.n	800186c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	3b01      	subs	r3, #1
 800186a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f9      	bne.n	8001866 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ff64 	bl	8001744 <LL_ADC_IsInternalRegulatorEnabled>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10d      	bne.n	800189e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001886:	f043 0210 	orr.w	r2, r3, #16
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001892:	f043 0201 	orr.w	r2, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff ff75 	bl	8001792 <LL_ADC_REG_IsConversionOngoing>
 80018a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ae:	f003 0310 	and.w	r3, r3, #16
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f040 8100 	bne.w	8001ab8 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f040 80fc 	bne.w	8001ab8 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80018c8:	f043 0202 	orr.w	r2, r3, #2
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff49 	bl	800176c <LL_ADC_IsEnabled>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d111      	bne.n	8001904 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018e0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80018e4:	f7ff ff42 	bl	800176c <LL_ADC_IsEnabled>
 80018e8:	4604      	mov	r4, r0
 80018ea:	487c      	ldr	r0, [pc, #496]	; (8001adc <HAL_ADC_Init+0x2fc>)
 80018ec:	f7ff ff3e 	bl	800176c <LL_ADC_IsEnabled>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4323      	orrs	r3, r4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d105      	bne.n	8001904 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	4619      	mov	r1, r3
 80018fe:	4878      	ldr	r0, [pc, #480]	; (8001ae0 <HAL_ADC_Init+0x300>)
 8001900:	f7ff fd98 	bl	8001434 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	7f5b      	ldrb	r3, [r3, #29]
 8001908:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800190e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001914:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800191a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001922:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800192e:	2b01      	cmp	r3, #1
 8001930:	d106      	bne.n	8001940 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001936:	3b01      	subs	r3, #1
 8001938:	045b      	lsls	r3, r3, #17
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001944:	2b00      	cmp	r3, #0
 8001946:	d009      	beq.n	800195c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001954:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68da      	ldr	r2, [r3, #12]
 8001962:	4b60      	ldr	r3, [pc, #384]	; (8001ae4 <HAL_ADC_Init+0x304>)
 8001964:	4013      	ands	r3, r2
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	69b9      	ldr	r1, [r7, #24]
 800196c:	430b      	orrs	r3, r1
 800196e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	430a      	orrs	r2, r1
 8001984:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ff14 	bl	80017b8 <LL_ADC_INJ_IsConversionOngoing>
 8001990:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d16d      	bne.n	8001a74 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d16a      	bne.n	8001a74 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019a2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019aa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019ba:	f023 0302 	bic.w	r3, r3, #2
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	69b9      	ldr	r1, [r7, #24]
 80019c4:	430b      	orrs	r3, r1
 80019c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d017      	beq.n	8001a00 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	691a      	ldr	r2, [r3, #16]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80019de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80019e8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80019ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6911      	ldr	r1, [r2, #16]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6812      	ldr	r2, [r2, #0]
 80019f8:	430b      	orrs	r3, r1
 80019fa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80019fe:	e013      	b.n	8001a28 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	691a      	ldr	r2, [r3, #16]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a0e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a24:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d118      	bne.n	8001a64 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a3c:	f023 0304 	bic.w	r3, r3, #4
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a48:	4311      	orrs	r1, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a4e:	4311      	orrs	r1, r2
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a54:	430a      	orrs	r2, r1
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f042 0201 	orr.w	r2, r2, #1
 8001a60:	611a      	str	r2, [r3, #16]
 8001a62:	e007      	b.n	8001a74 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	691a      	ldr	r2, [r3, #16]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0201 	bic.w	r2, r2, #1
 8001a72:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d10c      	bne.n	8001a96 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f023 010f 	bic.w	r1, r3, #15
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	1e5a      	subs	r2, r3, #1
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	631a      	str	r2, [r3, #48]	; 0x30
 8001a94:	e007      	b.n	8001aa6 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 020f 	bic.w	r2, r2, #15
 8001aa4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aaa:	f023 0303 	bic.w	r3, r3, #3
 8001aae:	f043 0201 	orr.w	r2, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ab6:	e007      	b.n	8001ac8 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001abc:	f043 0210 	orr.w	r2, r3, #16
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ac8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3724      	adds	r7, #36	; 0x24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd90      	pop	{r4, r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	053e2d63 	.word	0x053e2d63
 8001adc:	50000100 	.word	0x50000100
 8001ae0:	50000300 	.word	0x50000300
 8001ae4:	fff04007 	.word	0xfff04007

08001ae8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b0b6      	sub	sp, #216	; 0xd8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x22>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e3c8      	b.n	800229c <HAL_ADC_ConfigChannel+0x7b4>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fe3b 	bl	8001792 <LL_ADC_REG_IsConversionOngoing>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f040 83ad 	bne.w	800227e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6818      	ldr	r0, [r3, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	6859      	ldr	r1, [r3, #4]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	f7ff fd51 	bl	80015d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fe29 	bl	8001792 <LL_ADC_REG_IsConversionOngoing>
 8001b40:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fe35 	bl	80017b8 <LL_ADC_INJ_IsConversionOngoing>
 8001b4e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b52:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f040 81d9 	bne.w	8001f0e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f040 81d4 	bne.w	8001f0e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b6e:	d10f      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7ff fd58 	bl	8001630 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fd12 	bl	80015b2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001b8e:	e00e      	b.n	8001bae <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	6819      	ldr	r1, [r3, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	f7ff fd47 	bl	8001630 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fd02 	bl	80015b2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	695a      	ldr	r2, [r3, #20]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	08db      	lsrs	r3, r3, #3
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d022      	beq.n	8001c16 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6818      	ldr	r0, [r3, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	6919      	ldr	r1, [r3, #16]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001be0:	f7ff fc5c 	bl	800149c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	6919      	ldr	r1, [r3, #16]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	f7ff fca8 	bl	8001546 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d102      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x124>
 8001c06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c0a:	e000      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x126>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f7ff fcb4 	bl	800157c <LL_ADC_SetOffsetSaturation>
 8001c14:	e17b      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fc61 	bl	80014e4 <LL_ADC_GetOffsetChannel>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10a      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x15a>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2100      	movs	r1, #0
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fc56 	bl	80014e4 <LL_ADC_GetOffsetChannel>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	0e9b      	lsrs	r3, r3, #26
 8001c3c:	f003 021f 	and.w	r2, r3, #31
 8001c40:	e01e      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x198>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fc4b 	bl	80014e4 <LL_ADC_GetOffsetChannel>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001c70:	2320      	movs	r3, #32
 8001c72:	e004      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001c74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c78:	fab3 f383 	clz	r3, r3
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d105      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x1b0>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	0e9b      	lsrs	r3, r3, #26
 8001c92:	f003 031f 	and.w	r3, r3, #31
 8001c96:	e018      	b.n	8001cca <HAL_ADC_ConfigChannel+0x1e2>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ca4:	fa93 f3a3 	rbit	r3, r3
 8001ca8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001cac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001cb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001cbc:	2320      	movs	r3, #32
 8001cbe:	e004      	b.n	8001cca <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001cc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001cc4:	fab3 f383 	clz	r3, r3
 8001cc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d106      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fc1a 	bl	8001510 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fbfe 	bl	80014e4 <LL_ADC_GetOffsetChannel>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10a      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x220>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fbf3 	bl	80014e4 <LL_ADC_GetOffsetChannel>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	0e9b      	lsrs	r3, r3, #26
 8001d02:	f003 021f 	and.w	r2, r3, #31
 8001d06:	e01e      	b.n	8001d46 <HAL_ADC_ConfigChannel+0x25e>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fbe8 	bl	80014e4 <LL_ADC_GetOffsetChannel>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001d26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001d2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001d36:	2320      	movs	r3, #32
 8001d38:	e004      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001d3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d3e:	fab3 f383 	clz	r3, r3
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d105      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x276>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	0e9b      	lsrs	r3, r3, #26
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	e018      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x2a8>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d6a:	fa93 f3a3 	rbit	r3, r3
 8001d6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001d72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001d7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001d82:	2320      	movs	r3, #32
 8001d84:	e004      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001d86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d8a:	fab3 f383 	clz	r3, r3
 8001d8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d106      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fbb7 	bl	8001510 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2102      	movs	r1, #2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fb9b 	bl	80014e4 <LL_ADC_GetOffsetChannel>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10a      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x2e6>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2102      	movs	r1, #2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fb90 	bl	80014e4 <LL_ADC_GetOffsetChannel>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	0e9b      	lsrs	r3, r3, #26
 8001dc8:	f003 021f 	and.w	r2, r3, #31
 8001dcc:	e01e      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x324>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2102      	movs	r1, #2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fb85 	bl	80014e4 <LL_ADC_GetOffsetChannel>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001de4:	fa93 f3a3 	rbit	r3, r3
 8001de8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001dec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001df0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001df4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001dfc:	2320      	movs	r3, #32
 8001dfe:	e004      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001e00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e04:	fab3 f383 	clz	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d105      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x33c>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	0e9b      	lsrs	r3, r3, #26
 8001e1e:	f003 031f 	and.w	r3, r3, #31
 8001e22:	e016      	b.n	8001e52 <HAL_ADC_ConfigChannel+0x36a>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e30:	fa93 f3a3 	rbit	r3, r3
 8001e34:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001e36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001e3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001e44:	2320      	movs	r3, #32
 8001e46:	e004      	b.n	8001e52 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001e48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e4c:	fab3 f383 	clz	r3, r3
 8001e50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d106      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2102      	movs	r1, #2
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fb56 	bl	8001510 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2103      	movs	r1, #3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fb3a 	bl	80014e4 <LL_ADC_GetOffsetChannel>
 8001e70:	4603      	mov	r3, r0
 8001e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10a      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x3a8>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2103      	movs	r1, #3
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff fb2f 	bl	80014e4 <LL_ADC_GetOffsetChannel>
 8001e86:	4603      	mov	r3, r0
 8001e88:	0e9b      	lsrs	r3, r3, #26
 8001e8a:	f003 021f 	and.w	r2, r3, #31
 8001e8e:	e017      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x3d8>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2103      	movs	r1, #3
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fb24 	bl	80014e4 <LL_ADC_GetOffsetChannel>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ea2:	fa93 f3a3 	rbit	r3, r3
 8001ea6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001ea8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001eaa:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001eac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001eb2:	2320      	movs	r3, #32
 8001eb4:	e003      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001eb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eb8:	fab3 f383 	clz	r3, r3
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d105      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x3f0>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0e9b      	lsrs	r3, r3, #26
 8001ed2:	f003 031f 	and.w	r3, r3, #31
 8001ed6:	e011      	b.n	8001efc <HAL_ADC_ConfigChannel+0x414>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ee0:	fa93 f3a3 	rbit	r3, r3
 8001ee4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001ee6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ee8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001ef0:	2320      	movs	r3, #32
 8001ef2:	e003      	b.n	8001efc <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d106      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2200      	movs	r2, #0
 8001f06:	2103      	movs	r1, #3
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fb01 	bl	8001510 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fc2a 	bl	800176c <LL_ADC_IsEnabled>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f040 8140 	bne.w	80021a0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	6819      	ldr	r1, [r3, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	f7ff fbab 	bl	8001688 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	4a8f      	ldr	r2, [pc, #572]	; (8002174 <HAL_ADC_ConfigChannel+0x68c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	f040 8131 	bne.w	80021a0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10b      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x47e>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	0e9b      	lsrs	r3, r3, #26
 8001f54:	3301      	adds	r3, #1
 8001f56:	f003 031f 	and.w	r3, r3, #31
 8001f5a:	2b09      	cmp	r3, #9
 8001f5c:	bf94      	ite	ls
 8001f5e:	2301      	movls	r3, #1
 8001f60:	2300      	movhi	r3, #0
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	e019      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x4b2>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001f74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f76:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001f78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001f7e:	2320      	movs	r3, #32
 8001f80:	e003      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001f82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f84:	fab3 f383 	clz	r3, r3
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	f003 031f 	and.w	r3, r3, #31
 8001f90:	2b09      	cmp	r3, #9
 8001f92:	bf94      	ite	ls
 8001f94:	2301      	movls	r3, #1
 8001f96:	2300      	movhi	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d079      	beq.n	8002092 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d107      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x4d2>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	0e9b      	lsrs	r3, r3, #26
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	069b      	lsls	r3, r3, #26
 8001fb4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fb8:	e015      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x4fe>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fca:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001fd2:	2320      	movs	r3, #32
 8001fd4:	e003      	b.n	8001fde <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd8:	fab3 f383 	clz	r3, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	069b      	lsls	r3, r3, #26
 8001fe2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x51e>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	0e9b      	lsrs	r3, r3, #26
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	f003 031f 	and.w	r3, r3, #31
 8001ffe:	2101      	movs	r1, #1
 8002000:	fa01 f303 	lsl.w	r3, r1, r3
 8002004:	e017      	b.n	8002036 <HAL_ADC_ConfigChannel+0x54e>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002016:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800201e:	2320      	movs	r3, #32
 8002020:	e003      	b.n	800202a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002024:	fab3 f383 	clz	r3, r3
 8002028:	b2db      	uxtb	r3, r3
 800202a:	3301      	adds	r3, #1
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	2101      	movs	r1, #1
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	ea42 0103 	orr.w	r1, r2, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10a      	bne.n	800205c <HAL_ADC_ConfigChannel+0x574>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	0e9b      	lsrs	r3, r3, #26
 800204c:	3301      	adds	r3, #1
 800204e:	f003 021f 	and.w	r2, r3, #31
 8002052:	4613      	mov	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4413      	add	r3, r2
 8002058:	051b      	lsls	r3, r3, #20
 800205a:	e018      	b.n	800208e <HAL_ADC_ConfigChannel+0x5a6>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002064:	fa93 f3a3 	rbit	r3, r3
 8002068:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800206a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800206c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800206e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002074:	2320      	movs	r3, #32
 8002076:	e003      	b.n	8002080 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800207a:	fab3 f383 	clz	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	3301      	adds	r3, #1
 8002082:	f003 021f 	and.w	r2, r3, #31
 8002086:	4613      	mov	r3, r2
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4413      	add	r3, r2
 800208c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800208e:	430b      	orrs	r3, r1
 8002090:	e081      	b.n	8002196 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800209a:	2b00      	cmp	r3, #0
 800209c:	d107      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x5c6>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	0e9b      	lsrs	r3, r3, #26
 80020a4:	3301      	adds	r3, #1
 80020a6:	069b      	lsls	r3, r3, #26
 80020a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020ac:	e015      	b.n	80020da <HAL_ADC_ConfigChannel+0x5f2>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b6:	fa93 f3a3 	rbit	r3, r3
 80020ba:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80020bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020be:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80020c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80020c6:	2320      	movs	r3, #32
 80020c8:	e003      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80020ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020cc:	fab3 f383 	clz	r3, r3
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	3301      	adds	r3, #1
 80020d4:	069b      	lsls	r3, r3, #26
 80020d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d109      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x612>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	0e9b      	lsrs	r3, r3, #26
 80020ec:	3301      	adds	r3, #1
 80020ee:	f003 031f 	and.w	r3, r3, #31
 80020f2:	2101      	movs	r1, #1
 80020f4:	fa01 f303 	lsl.w	r3, r1, r3
 80020f8:	e017      	b.n	800212a <HAL_ADC_ConfigChannel+0x642>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	61fb      	str	r3, [r7, #28]
  return result;
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002112:	2320      	movs	r3, #32
 8002114:	e003      	b.n	800211e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	fab3 f383 	clz	r3, r3
 800211c:	b2db      	uxtb	r3, r3
 800211e:	3301      	adds	r3, #1
 8002120:	f003 031f 	and.w	r3, r3, #31
 8002124:	2101      	movs	r1, #1
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	ea42 0103 	orr.w	r1, r2, r3
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10d      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x66e>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	0e9b      	lsrs	r3, r3, #26
 8002140:	3301      	adds	r3, #1
 8002142:	f003 021f 	and.w	r2, r3, #31
 8002146:	4613      	mov	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4413      	add	r3, r2
 800214c:	3b1e      	subs	r3, #30
 800214e:	051b      	lsls	r3, r3, #20
 8002150:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002154:	e01e      	b.n	8002194 <HAL_ADC_ConfigChannel+0x6ac>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	613b      	str	r3, [r7, #16]
  return result;
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d104      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800216e:	2320      	movs	r3, #32
 8002170:	e006      	b.n	8002180 <HAL_ADC_ConfigChannel+0x698>
 8002172:	bf00      	nop
 8002174:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	fab3 f383 	clz	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	3301      	adds	r3, #1
 8002182:	f003 021f 	and.w	r2, r3, #31
 8002186:	4613      	mov	r3, r2
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	4413      	add	r3, r2
 800218c:	3b1e      	subs	r3, #30
 800218e:	051b      	lsls	r3, r3, #20
 8002190:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002194:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800219a:	4619      	mov	r1, r3
 800219c:	f7ff fa48 	bl	8001630 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b3f      	ldr	r3, [pc, #252]	; (80022a4 <HAL_ADC_ConfigChannel+0x7bc>)
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d071      	beq.n	8002290 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021ac:	483e      	ldr	r0, [pc, #248]	; (80022a8 <HAL_ADC_ConfigChannel+0x7c0>)
 80021ae:	f7ff f967 	bl	8001480 <LL_ADC_GetCommonPathInternalCh>
 80021b2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a3c      	ldr	r2, [pc, #240]	; (80022ac <HAL_ADC_ConfigChannel+0x7c4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d004      	beq.n	80021ca <HAL_ADC_ConfigChannel+0x6e2>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a3a      	ldr	r2, [pc, #232]	; (80022b0 <HAL_ADC_ConfigChannel+0x7c8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d127      	bne.n	800221a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d121      	bne.n	800221a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021de:	d157      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021e8:	4619      	mov	r1, r3
 80021ea:	482f      	ldr	r0, [pc, #188]	; (80022a8 <HAL_ADC_ConfigChannel+0x7c0>)
 80021ec:	f7ff f935 	bl	800145a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021f0:	4b30      	ldr	r3, [pc, #192]	; (80022b4 <HAL_ADC_ConfigChannel+0x7cc>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	099b      	lsrs	r3, r3, #6
 80021f6:	4a30      	ldr	r2, [pc, #192]	; (80022b8 <HAL_ADC_ConfigChannel+0x7d0>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	099b      	lsrs	r3, r3, #6
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800220a:	e002      	b.n	8002212 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3b01      	subs	r3, #1
 8002210:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1f9      	bne.n	800220c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002218:	e03a      	b.n	8002290 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a27      	ldr	r2, [pc, #156]	; (80022bc <HAL_ADC_ConfigChannel+0x7d4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d113      	bne.n	800224c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002224:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002228:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10d      	bne.n	800224c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a22      	ldr	r2, [pc, #136]	; (80022c0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d02a      	beq.n	8002290 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800223a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800223e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002242:	4619      	mov	r1, r3
 8002244:	4818      	ldr	r0, [pc, #96]	; (80022a8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002246:	f7ff f908 	bl	800145a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800224a:	e021      	b.n	8002290 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1c      	ldr	r2, [pc, #112]	; (80022c4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d11c      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002256:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800225a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d116      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a16      	ldr	r2, [pc, #88]	; (80022c0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d011      	beq.n	8002290 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800226c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002270:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002274:	4619      	mov	r1, r3
 8002276:	480c      	ldr	r0, [pc, #48]	; (80022a8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002278:	f7ff f8ef 	bl	800145a <LL_ADC_SetCommonPathInternalCh>
 800227c:	e008      	b.n	8002290 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002282:	f043 0220 	orr.w	r2, r3, #32
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002298:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800229c:	4618      	mov	r0, r3
 800229e:	37d8      	adds	r7, #216	; 0xd8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	80080000 	.word	0x80080000
 80022a8:	50000300 	.word	0x50000300
 80022ac:	c3210000 	.word	0xc3210000
 80022b0:	90c00010 	.word	0x90c00010
 80022b4:	20000000 	.word	0x20000000
 80022b8:	053e2d63 	.word	0x053e2d63
 80022bc:	c7520000 	.word	0xc7520000
 80022c0:	50000100 	.word	0x50000100
 80022c4:	cb840000 	.word	0xcb840000

080022c8 <LL_ADC_IsEnabled>:
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <LL_ADC_IsEnabled+0x18>
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <LL_ADC_IsEnabled+0x1a>
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <LL_ADC_REG_IsConversionOngoing>:
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d101      	bne.n	8002306 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002314:	b590      	push	{r4, r7, lr}
 8002316:	b0a1      	sub	sp, #132	; 0x84
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800232a:	2b01      	cmp	r3, #1
 800232c:	d101      	bne.n	8002332 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800232e:	2302      	movs	r3, #2
 8002330:	e08b      	b.n	800244a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800233a:	2300      	movs	r3, #0
 800233c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800233e:	2300      	movs	r3, #0
 8002340:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800234a:	d102      	bne.n	8002352 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800234c:	4b41      	ldr	r3, [pc, #260]	; (8002454 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	e001      	b.n	8002356 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10b      	bne.n	8002374 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002360:	f043 0220 	orr.w	r2, r3, #32
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e06a      	b.n	800244a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff ffb9 	bl	80022ee <LL_ADC_REG_IsConversionOngoing>
 800237c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ffb3 	bl	80022ee <LL_ADC_REG_IsConversionOngoing>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d14c      	bne.n	8002428 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800238e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002390:	2b00      	cmp	r3, #0
 8002392:	d149      	bne.n	8002428 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002394:	4b30      	ldr	r3, [pc, #192]	; (8002458 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002396:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d028      	beq.n	80023f2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80023a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	6859      	ldr	r1, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023b2:	035b      	lsls	r3, r3, #13
 80023b4:	430b      	orrs	r3, r1
 80023b6:	431a      	orrs	r2, r3
 80023b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023ba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80023c0:	f7ff ff82 	bl	80022c8 <LL_ADC_IsEnabled>
 80023c4:	4604      	mov	r4, r0
 80023c6:	4823      	ldr	r0, [pc, #140]	; (8002454 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80023c8:	f7ff ff7e 	bl	80022c8 <LL_ADC_IsEnabled>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4323      	orrs	r3, r4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d133      	bne.n	800243c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80023d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023dc:	f023 030f 	bic.w	r3, r3, #15
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	6811      	ldr	r1, [r2, #0]
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	6892      	ldr	r2, [r2, #8]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	431a      	orrs	r2, r3
 80023ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023ee:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80023f0:	e024      	b.n	800243c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80023f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023fc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023fe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002402:	f7ff ff61 	bl	80022c8 <LL_ADC_IsEnabled>
 8002406:	4604      	mov	r4, r0
 8002408:	4812      	ldr	r0, [pc, #72]	; (8002454 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800240a:	f7ff ff5d 	bl	80022c8 <LL_ADC_IsEnabled>
 800240e:	4603      	mov	r3, r0
 8002410:	4323      	orrs	r3, r4
 8002412:	2b00      	cmp	r3, #0
 8002414:	d112      	bne.n	800243c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002416:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800241e:	f023 030f 	bic.w	r3, r3, #15
 8002422:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002424:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002426:	e009      	b.n	800243c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242c:	f043 0220 	orr.w	r2, r3, #32
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800243a:	e000      	b.n	800243e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800243c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002446:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800244a:	4618      	mov	r0, r3
 800244c:	3784      	adds	r7, #132	; 0x84
 800244e:	46bd      	mov	sp, r7
 8002450:	bd90      	pop	{r4, r7, pc}
 8002452:	bf00      	nop
 8002454:	50000100 	.word	0x50000100
 8002458:	50000300 	.word	0x50000300

0800245c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800246c:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <__NVIC_SetPriorityGrouping+0x44>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002478:	4013      	ands	r3, r2
 800247a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800248c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800248e:	4a04      	ldr	r2, [pc, #16]	; (80024a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	60d3      	str	r3, [r2, #12]
}
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a8:	4b04      	ldr	r3, [pc, #16]	; (80024bc <__NVIC_GetPriorityGrouping+0x18>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	0a1b      	lsrs	r3, r3, #8
 80024ae:	f003 0307 	and.w	r3, r3, #7
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	6039      	str	r1, [r7, #0]
 80024ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	db0a      	blt.n	80024ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	490c      	ldr	r1, [pc, #48]	; (800250c <__NVIC_SetPriority+0x4c>)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	0112      	lsls	r2, r2, #4
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	440b      	add	r3, r1
 80024e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e8:	e00a      	b.n	8002500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4908      	ldr	r1, [pc, #32]	; (8002510 <__NVIC_SetPriority+0x50>)
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	3b04      	subs	r3, #4
 80024f8:	0112      	lsls	r2, r2, #4
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	440b      	add	r3, r1
 80024fe:	761a      	strb	r2, [r3, #24]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000e100 	.word	0xe000e100
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002514:	b480      	push	{r7}
 8002516:	b089      	sub	sp, #36	; 0x24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f1c3 0307 	rsb	r3, r3, #7
 800252e:	2b04      	cmp	r3, #4
 8002530:	bf28      	it	cs
 8002532:	2304      	movcs	r3, #4
 8002534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3304      	adds	r3, #4
 800253a:	2b06      	cmp	r3, #6
 800253c:	d902      	bls.n	8002544 <NVIC_EncodePriority+0x30>
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3b03      	subs	r3, #3
 8002542:	e000      	b.n	8002546 <NVIC_EncodePriority+0x32>
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	f04f 32ff 	mov.w	r2, #4294967295
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43da      	mvns	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	401a      	ands	r2, r3
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800255c:	f04f 31ff 	mov.w	r1, #4294967295
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	fa01 f303 	lsl.w	r3, r1, r3
 8002566:	43d9      	mvns	r1, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800256c:	4313      	orrs	r3, r2
         );
}
 800256e:	4618      	mov	r0, r3
 8002570:	3724      	adds	r7, #36	; 0x24
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3b01      	subs	r3, #1
 8002588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800258c:	d301      	bcc.n	8002592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800258e:	2301      	movs	r3, #1
 8002590:	e00f      	b.n	80025b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002592:	4a0a      	ldr	r2, [pc, #40]	; (80025bc <SysTick_Config+0x40>)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3b01      	subs	r3, #1
 8002598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800259a:	210f      	movs	r1, #15
 800259c:	f04f 30ff 	mov.w	r0, #4294967295
 80025a0:	f7ff ff8e 	bl	80024c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <SysTick_Config+0x40>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025aa:	4b04      	ldr	r3, [pc, #16]	; (80025bc <SysTick_Config+0x40>)
 80025ac:	2207      	movs	r2, #7
 80025ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	e000e010 	.word	0xe000e010

080025c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff ff47 	bl	800245c <__NVIC_SetPriorityGrouping>
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b086      	sub	sp, #24
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4603      	mov	r3, r0
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
 80025e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025e4:	f7ff ff5e 	bl	80024a4 <__NVIC_GetPriorityGrouping>
 80025e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	6978      	ldr	r0, [r7, #20]
 80025f0:	f7ff ff90 	bl	8002514 <NVIC_EncodePriority>
 80025f4:	4602      	mov	r2, r0
 80025f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025fa:	4611      	mov	r1, r2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff ff5f 	bl	80024c0 <__NVIC_SetPriority>
}
 8002602:	bf00      	nop
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff ffb2 	bl	800257c <SysTick_Config>
 8002618:	4603      	mov	r3, r0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002632:	e15a      	b.n	80028ea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	2101      	movs	r1, #1
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	fa01 f303 	lsl.w	r3, r1, r3
 8002640:	4013      	ands	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 814c 	beq.w	80028e4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	2b01      	cmp	r3, #1
 8002656:	d005      	beq.n	8002664 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002660:	2b02      	cmp	r3, #2
 8002662:	d130      	bne.n	80026c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	2203      	movs	r2, #3
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800269a:	2201      	movs	r2, #1
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4013      	ands	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	091b      	lsrs	r3, r3, #4
 80026b0:	f003 0201 	and.w	r2, r3, #1
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	d017      	beq.n	8002702 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	2203      	movs	r2, #3
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43db      	mvns	r3, r3
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4013      	ands	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d123      	bne.n	8002756 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	08da      	lsrs	r2, r3, #3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3208      	adds	r2, #8
 8002716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800271a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	220f      	movs	r2, #15
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4013      	ands	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	08da      	lsrs	r2, r3, #3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3208      	adds	r2, #8
 8002750:	6939      	ldr	r1, [r7, #16]
 8002752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	2203      	movs	r2, #3
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43db      	mvns	r3, r3
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4013      	ands	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 0203 	and.w	r2, r3, #3
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 80a6 	beq.w	80028e4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002798:	4b5b      	ldr	r3, [pc, #364]	; (8002908 <HAL_GPIO_Init+0x2e4>)
 800279a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800279c:	4a5a      	ldr	r2, [pc, #360]	; (8002908 <HAL_GPIO_Init+0x2e4>)
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	6613      	str	r3, [r2, #96]	; 0x60
 80027a4:	4b58      	ldr	r3, [pc, #352]	; (8002908 <HAL_GPIO_Init+0x2e4>)
 80027a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027b0:	4a56      	ldr	r2, [pc, #344]	; (800290c <HAL_GPIO_Init+0x2e8>)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	089b      	lsrs	r3, r3, #2
 80027b6:	3302      	adds	r3, #2
 80027b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	220f      	movs	r2, #15
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027da:	d01f      	beq.n	800281c <HAL_GPIO_Init+0x1f8>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a4c      	ldr	r2, [pc, #304]	; (8002910 <HAL_GPIO_Init+0x2ec>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d019      	beq.n	8002818 <HAL_GPIO_Init+0x1f4>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a4b      	ldr	r2, [pc, #300]	; (8002914 <HAL_GPIO_Init+0x2f0>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d013      	beq.n	8002814 <HAL_GPIO_Init+0x1f0>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a4a      	ldr	r2, [pc, #296]	; (8002918 <HAL_GPIO_Init+0x2f4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d00d      	beq.n	8002810 <HAL_GPIO_Init+0x1ec>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a49      	ldr	r2, [pc, #292]	; (800291c <HAL_GPIO_Init+0x2f8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d007      	beq.n	800280c <HAL_GPIO_Init+0x1e8>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a48      	ldr	r2, [pc, #288]	; (8002920 <HAL_GPIO_Init+0x2fc>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d101      	bne.n	8002808 <HAL_GPIO_Init+0x1e4>
 8002804:	2305      	movs	r3, #5
 8002806:	e00a      	b.n	800281e <HAL_GPIO_Init+0x1fa>
 8002808:	2306      	movs	r3, #6
 800280a:	e008      	b.n	800281e <HAL_GPIO_Init+0x1fa>
 800280c:	2304      	movs	r3, #4
 800280e:	e006      	b.n	800281e <HAL_GPIO_Init+0x1fa>
 8002810:	2303      	movs	r3, #3
 8002812:	e004      	b.n	800281e <HAL_GPIO_Init+0x1fa>
 8002814:	2302      	movs	r3, #2
 8002816:	e002      	b.n	800281e <HAL_GPIO_Init+0x1fa>
 8002818:	2301      	movs	r3, #1
 800281a:	e000      	b.n	800281e <HAL_GPIO_Init+0x1fa>
 800281c:	2300      	movs	r3, #0
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	f002 0203 	and.w	r2, r2, #3
 8002824:	0092      	lsls	r2, r2, #2
 8002826:	4093      	lsls	r3, r2
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800282e:	4937      	ldr	r1, [pc, #220]	; (800290c <HAL_GPIO_Init+0x2e8>)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	089b      	lsrs	r3, r3, #2
 8002834:	3302      	adds	r3, #2
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800283c:	4b39      	ldr	r3, [pc, #228]	; (8002924 <HAL_GPIO_Init+0x300>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	43db      	mvns	r3, r3
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002860:	4a30      	ldr	r2, [pc, #192]	; (8002924 <HAL_GPIO_Init+0x300>)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002866:	4b2f      	ldr	r3, [pc, #188]	; (8002924 <HAL_GPIO_Init+0x300>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	43db      	mvns	r3, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800288a:	4a26      	ldr	r2, [pc, #152]	; (8002924 <HAL_GPIO_Init+0x300>)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002890:	4b24      	ldr	r3, [pc, #144]	; (8002924 <HAL_GPIO_Init+0x300>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	43db      	mvns	r3, r3
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028b4:	4a1b      	ldr	r2, [pc, #108]	; (8002924 <HAL_GPIO_Init+0x300>)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80028ba:	4b1a      	ldr	r3, [pc, #104]	; (8002924 <HAL_GPIO_Init+0x300>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028de:	4a11      	ldr	r2, [pc, #68]	; (8002924 <HAL_GPIO_Init+0x300>)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	3301      	adds	r3, #1
 80028e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	fa22 f303 	lsr.w	r3, r2, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f47f ae9d 	bne.w	8002634 <HAL_GPIO_Init+0x10>
  }
}
 80028fa:	bf00      	nop
 80028fc:	bf00      	nop
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	40021000 	.word	0x40021000
 800290c:	40010000 	.word	0x40010000
 8002910:	48000400 	.word	0x48000400
 8002914:	48000800 	.word	0x48000800
 8002918:	48000c00 	.word	0x48000c00
 800291c:	48001000 	.word	0x48001000
 8002920:	48001400 	.word	0x48001400
 8002924:	40010400 	.word	0x40010400

08002928 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e08d      	b.n	8002a56 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d106      	bne.n	8002954 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7fe fa30 	bl	8000db4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2224      	movs	r2, #36	; 0x24
 8002958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0201 	bic.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002978:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002988:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d107      	bne.n	80029a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	e006      	b.n	80029b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80029ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d108      	bne.n	80029ca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029c6:	605a      	str	r2, [r3, #4]
 80029c8:	e007      	b.n	80029da <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6812      	ldr	r2, [r2, #0]
 80029e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691a      	ldr	r2, [r3, #16]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69d9      	ldr	r1, [r3, #28]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a1a      	ldr	r2, [r3, #32]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2220      	movs	r2, #32
 8002a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b20      	cmp	r3, #32
 8002a72:	d138      	bne.n	8002ae6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e032      	b.n	8002ae8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2224      	movs	r2, #36	; 0x24
 8002a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0201 	bic.w	r2, r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ab0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6819      	ldr	r1, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f042 0201 	orr.w	r2, r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e000      	b.n	8002ae8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ae6:	2302      	movs	r3, #2
  }
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b20      	cmp	r3, #32
 8002b08:	d139      	bne.n	8002b7e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d101      	bne.n	8002b18 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b14:	2302      	movs	r3, #2
 8002b16:	e033      	b.n	8002b80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2224      	movs	r2, #36	; 0x24
 8002b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0201 	bic.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b46:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	021b      	lsls	r3, r3, #8
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0201 	orr.w	r2, r2, #1
 8002b68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e000      	b.n	8002b80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b7e:	2302      	movs	r3, #2
  }
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d141      	bne.n	8002c1e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b9a:	4b4b      	ldr	r3, [pc, #300]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba6:	d131      	bne.n	8002c0c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ba8:	4b47      	ldr	r3, [pc, #284]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bae:	4a46      	ldr	r2, [pc, #280]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bb8:	4b43      	ldr	r3, [pc, #268]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bc0:	4a41      	ldr	r2, [pc, #260]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bc8:	4b40      	ldr	r3, [pc, #256]	; (8002ccc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2232      	movs	r2, #50	; 0x32
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	4a3f      	ldr	r2, [pc, #252]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd8:	0c9b      	lsrs	r3, r3, #18
 8002bda:	3301      	adds	r3, #1
 8002bdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bde:	e002      	b.n	8002be6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002be6:	4b38      	ldr	r3, [pc, #224]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf2:	d102      	bne.n	8002bfa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f2      	bne.n	8002be0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bfa:	4b33      	ldr	r3, [pc, #204]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c06:	d158      	bne.n	8002cba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e057      	b.n	8002cbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c0c:	4b2e      	ldr	r3, [pc, #184]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c12:	4a2d      	ldr	r2, [pc, #180]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c1c:	e04d      	b.n	8002cba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c24:	d141      	bne.n	8002caa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c26:	4b28      	ldr	r3, [pc, #160]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c32:	d131      	bne.n	8002c98 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c34:	4b24      	ldr	r3, [pc, #144]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c3a:	4a23      	ldr	r2, [pc, #140]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c44:	4b20      	ldr	r3, [pc, #128]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c4c:	4a1e      	ldr	r2, [pc, #120]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c54:	4b1d      	ldr	r3, [pc, #116]	; (8002ccc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2232      	movs	r2, #50	; 0x32
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
 8002c5e:	4a1c      	ldr	r2, [pc, #112]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c60:	fba2 2303 	umull	r2, r3, r2, r3
 8002c64:	0c9b      	lsrs	r3, r3, #18
 8002c66:	3301      	adds	r3, #1
 8002c68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c6a:	e002      	b.n	8002c72 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c72:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7e:	d102      	bne.n	8002c86 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f2      	bne.n	8002c6c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c86:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c92:	d112      	bne.n	8002cba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e011      	b.n	8002cbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ca8:	e007      	b.n	8002cba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002caa:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cb2:	4a05      	ldr	r2, [pc, #20]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cb8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	40007000 	.word	0x40007000
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	431bde83 	.word	0x431bde83

08002cd4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002cd8:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	4a04      	ldr	r2, [pc, #16]	; (8002cf0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002cde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ce2:	6093      	str	r3, [r2, #8]
}
 8002ce4:	bf00      	nop
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40007000 	.word	0x40007000

08002cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e2fe      	b.n	8003304 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d075      	beq.n	8002dfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d12:	4b97      	ldr	r3, [pc, #604]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
 8002d1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d1c:	4b94      	ldr	r3, [pc, #592]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	2b0c      	cmp	r3, #12
 8002d2a:	d102      	bne.n	8002d32 <HAL_RCC_OscConfig+0x3e>
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d002      	beq.n	8002d38 <HAL_RCC_OscConfig+0x44>
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d10b      	bne.n	8002d50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d38:	4b8d      	ldr	r3, [pc, #564]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d05b      	beq.n	8002dfc <HAL_RCC_OscConfig+0x108>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d157      	bne.n	8002dfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e2d9      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d58:	d106      	bne.n	8002d68 <HAL_RCC_OscConfig+0x74>
 8002d5a:	4b85      	ldr	r3, [pc, #532]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a84      	ldr	r2, [pc, #528]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	e01d      	b.n	8002da4 <HAL_RCC_OscConfig+0xb0>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d70:	d10c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x98>
 8002d72:	4b7f      	ldr	r3, [pc, #508]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a7e      	ldr	r2, [pc, #504]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	4b7c      	ldr	r3, [pc, #496]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a7b      	ldr	r2, [pc, #492]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	e00b      	b.n	8002da4 <HAL_RCC_OscConfig+0xb0>
 8002d8c:	4b78      	ldr	r3, [pc, #480]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a77      	ldr	r2, [pc, #476]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	4b75      	ldr	r3, [pc, #468]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a74      	ldr	r2, [pc, #464]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d013      	beq.n	8002dd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dac:	f7fe fb36 	bl	800141c <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db4:	f7fe fb32 	bl	800141c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b64      	cmp	r3, #100	; 0x64
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e29e      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dc6:	4b6a      	ldr	r3, [pc, #424]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f0      	beq.n	8002db4 <HAL_RCC_OscConfig+0xc0>
 8002dd2:	e014      	b.n	8002dfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd4:	f7fe fb22 	bl	800141c <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ddc:	f7fe fb1e 	bl	800141c <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b64      	cmp	r3, #100	; 0x64
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e28a      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dee:	4b60      	ldr	r3, [pc, #384]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0xe8>
 8002dfa:	e000      	b.n	8002dfe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d075      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e0a:	4b59      	ldr	r3, [pc, #356]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e14:	4b56      	ldr	r3, [pc, #344]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	2b0c      	cmp	r3, #12
 8002e22:	d102      	bne.n	8002e2a <HAL_RCC_OscConfig+0x136>
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d002      	beq.n	8002e30 <HAL_RCC_OscConfig+0x13c>
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d11f      	bne.n	8002e70 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e30:	4b4f      	ldr	r3, [pc, #316]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_RCC_OscConfig+0x154>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e25d      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e48:	4b49      	ldr	r3, [pc, #292]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	061b      	lsls	r3, r3, #24
 8002e56:	4946      	ldr	r1, [pc, #280]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e5c:	4b45      	ldr	r3, [pc, #276]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fe fa8f 	bl	8001384 <HAL_InitTick>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d043      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e249      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d023      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e78:	4b3d      	ldr	r3, [pc, #244]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a3c      	ldr	r2, [pc, #240]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e84:	f7fe faca 	bl	800141c <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e8c:	f7fe fac6 	bl	800141c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e232      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e9e:	4b34      	ldr	r3, [pc, #208]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eaa:	4b31      	ldr	r3, [pc, #196]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	061b      	lsls	r3, r3, #24
 8002eb8:	492d      	ldr	r1, [pc, #180]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	604b      	str	r3, [r1, #4]
 8002ebe:	e01a      	b.n	8002ef6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec0:	4b2b      	ldr	r3, [pc, #172]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a2a      	ldr	r2, [pc, #168]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002ec6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7fe faa6 	bl	800141c <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed4:	f7fe faa2 	bl	800141c <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e20e      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ee6:	4b22      	ldr	r3, [pc, #136]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x1e0>
 8002ef2:	e000      	b.n	8002ef6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ef4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d041      	beq.n	8002f86 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d01c      	beq.n	8002f44 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f0a:	4b19      	ldr	r3, [pc, #100]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f10:	4a17      	ldr	r2, [pc, #92]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1a:	f7fe fa7f 	bl	800141c <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f22:	f7fe fa7b 	bl	800141c <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e1e7      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f34:	4b0e      	ldr	r3, [pc, #56]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0ef      	beq.n	8002f22 <HAL_RCC_OscConfig+0x22e>
 8002f42:	e020      	b.n	8002f86 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f44:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f4a:	4a09      	ldr	r2, [pc, #36]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002f4c:	f023 0301 	bic.w	r3, r3, #1
 8002f50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f54:	f7fe fa62 	bl	800141c <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f5a:	e00d      	b.n	8002f78 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f5c:	f7fe fa5e 	bl	800141c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d906      	bls.n	8002f78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e1ca      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
 8002f6e:	bf00      	nop
 8002f70:	40021000 	.word	0x40021000
 8002f74:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f78:	4b8c      	ldr	r3, [pc, #560]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8002f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1ea      	bne.n	8002f5c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 80a6 	beq.w	80030e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f94:	2300      	movs	r3, #0
 8002f96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f98:	4b84      	ldr	r3, [pc, #528]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x2b4>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <HAL_RCC_OscConfig+0x2b6>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00d      	beq.n	8002fca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fae:	4b7f      	ldr	r3, [pc, #508]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb2:	4a7e      	ldr	r2, [pc, #504]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8002fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb8:	6593      	str	r3, [r2, #88]	; 0x58
 8002fba:	4b7c      	ldr	r3, [pc, #496]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8002fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fca:	4b79      	ldr	r3, [pc, #484]	; (80031b0 <HAL_RCC_OscConfig+0x4bc>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d118      	bne.n	8003008 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fd6:	4b76      	ldr	r3, [pc, #472]	; (80031b0 <HAL_RCC_OscConfig+0x4bc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a75      	ldr	r2, [pc, #468]	; (80031b0 <HAL_RCC_OscConfig+0x4bc>)
 8002fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fe2:	f7fe fa1b 	bl	800141c <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fea:	f7fe fa17 	bl	800141c <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e183      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ffc:	4b6c      	ldr	r3, [pc, #432]	; (80031b0 <HAL_RCC_OscConfig+0x4bc>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f0      	beq.n	8002fea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d108      	bne.n	8003022 <HAL_RCC_OscConfig+0x32e>
 8003010:	4b66      	ldr	r3, [pc, #408]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8003012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003016:	4a65      	ldr	r2, [pc, #404]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003020:	e024      	b.n	800306c <HAL_RCC_OscConfig+0x378>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	2b05      	cmp	r3, #5
 8003028:	d110      	bne.n	800304c <HAL_RCC_OscConfig+0x358>
 800302a:	4b60      	ldr	r3, [pc, #384]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 800302c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003030:	4a5e      	ldr	r2, [pc, #376]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8003032:	f043 0304 	orr.w	r3, r3, #4
 8003036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800303a:	4b5c      	ldr	r3, [pc, #368]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 800303c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003040:	4a5a      	ldr	r2, [pc, #360]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800304a:	e00f      	b.n	800306c <HAL_RCC_OscConfig+0x378>
 800304c:	4b57      	ldr	r3, [pc, #348]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	4a56      	ldr	r2, [pc, #344]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8003054:	f023 0301 	bic.w	r3, r3, #1
 8003058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800305c:	4b53      	ldr	r3, [pc, #332]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 800305e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003062:	4a52      	ldr	r2, [pc, #328]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8003064:	f023 0304 	bic.w	r3, r3, #4
 8003068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d016      	beq.n	80030a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003074:	f7fe f9d2 	bl	800141c <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800307a:	e00a      	b.n	8003092 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307c:	f7fe f9ce 	bl	800141c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	f241 3288 	movw	r2, #5000	; 0x1388
 800308a:	4293      	cmp	r3, r2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e138      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003092:	4b46      	ldr	r3, [pc, #280]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8003094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0ed      	beq.n	800307c <HAL_RCC_OscConfig+0x388>
 80030a0:	e015      	b.n	80030ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a2:	f7fe f9bb 	bl	800141c <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030a8:	e00a      	b.n	80030c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030aa:	f7fe f9b7 	bl	800141c <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e121      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030c0:	4b3a      	ldr	r3, [pc, #232]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 80030c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1ed      	bne.n	80030aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030ce:	7ffb      	ldrb	r3, [r7, #31]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d105      	bne.n	80030e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030d4:	4b35      	ldr	r3, [pc, #212]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 80030d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d8:	4a34      	ldr	r2, [pc, #208]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 80030da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d03c      	beq.n	8003166 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d01c      	beq.n	800312e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030f4:	4b2d      	ldr	r3, [pc, #180]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 80030f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030fa:	4a2c      	ldr	r2, [pc, #176]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003104:	f7fe f98a 	bl	800141c <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800310c:	f7fe f986 	bl	800141c <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e0f2      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800311e:	4b23      	ldr	r3, [pc, #140]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8003120:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0ef      	beq.n	800310c <HAL_RCC_OscConfig+0x418>
 800312c:	e01b      	b.n	8003166 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800312e:	4b1f      	ldr	r3, [pc, #124]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8003130:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003134:	4a1d      	ldr	r2, [pc, #116]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8003136:	f023 0301 	bic.w	r3, r3, #1
 800313a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313e:	f7fe f96d 	bl	800141c <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003146:	f7fe f969 	bl	800141c <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e0d5      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003158:	4b14      	ldr	r3, [pc, #80]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 800315a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1ef      	bne.n	8003146 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 80c9 	beq.w	8003302 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003170:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 030c 	and.w	r3, r3, #12
 8003178:	2b0c      	cmp	r3, #12
 800317a:	f000 8083 	beq.w	8003284 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d15e      	bne.n	8003244 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003186:	4b09      	ldr	r3, [pc, #36]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a08      	ldr	r2, [pc, #32]	; (80031ac <HAL_RCC_OscConfig+0x4b8>)
 800318c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003192:	f7fe f943 	bl	800141c <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003198:	e00c      	b.n	80031b4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800319a:	f7fe f93f 	bl	800141c <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d905      	bls.n	80031b4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e0ab      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031b4:	4b55      	ldr	r3, [pc, #340]	; (800330c <HAL_RCC_OscConfig+0x618>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1ec      	bne.n	800319a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031c0:	4b52      	ldr	r3, [pc, #328]	; (800330c <HAL_RCC_OscConfig+0x618>)
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	4b52      	ldr	r3, [pc, #328]	; (8003310 <HAL_RCC_OscConfig+0x61c>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6a11      	ldr	r1, [r2, #32]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031d0:	3a01      	subs	r2, #1
 80031d2:	0112      	lsls	r2, r2, #4
 80031d4:	4311      	orrs	r1, r2
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80031da:	0212      	lsls	r2, r2, #8
 80031dc:	4311      	orrs	r1, r2
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031e2:	0852      	lsrs	r2, r2, #1
 80031e4:	3a01      	subs	r2, #1
 80031e6:	0552      	lsls	r2, r2, #21
 80031e8:	4311      	orrs	r1, r2
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031ee:	0852      	lsrs	r2, r2, #1
 80031f0:	3a01      	subs	r2, #1
 80031f2:	0652      	lsls	r2, r2, #25
 80031f4:	4311      	orrs	r1, r2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80031fa:	06d2      	lsls	r2, r2, #27
 80031fc:	430a      	orrs	r2, r1
 80031fe:	4943      	ldr	r1, [pc, #268]	; (800330c <HAL_RCC_OscConfig+0x618>)
 8003200:	4313      	orrs	r3, r2
 8003202:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003204:	4b41      	ldr	r3, [pc, #260]	; (800330c <HAL_RCC_OscConfig+0x618>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a40      	ldr	r2, [pc, #256]	; (800330c <HAL_RCC_OscConfig+0x618>)
 800320a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800320e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003210:	4b3e      	ldr	r3, [pc, #248]	; (800330c <HAL_RCC_OscConfig+0x618>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	4a3d      	ldr	r2, [pc, #244]	; (800330c <HAL_RCC_OscConfig+0x618>)
 8003216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800321a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7fe f8fe 	bl	800141c <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003224:	f7fe f8fa 	bl	800141c <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e066      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003236:	4b35      	ldr	r3, [pc, #212]	; (800330c <HAL_RCC_OscConfig+0x618>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0x530>
 8003242:	e05e      	b.n	8003302 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003244:	4b31      	ldr	r3, [pc, #196]	; (800330c <HAL_RCC_OscConfig+0x618>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a30      	ldr	r2, [pc, #192]	; (800330c <HAL_RCC_OscConfig+0x618>)
 800324a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800324e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7fe f8e4 	bl	800141c <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003258:	f7fe f8e0 	bl	800141c <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e04c      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800326a:	4b28      	ldr	r3, [pc, #160]	; (800330c <HAL_RCC_OscConfig+0x618>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003276:	4b25      	ldr	r3, [pc, #148]	; (800330c <HAL_RCC_OscConfig+0x618>)
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	4924      	ldr	r1, [pc, #144]	; (800330c <HAL_RCC_OscConfig+0x618>)
 800327c:	4b25      	ldr	r3, [pc, #148]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 800327e:	4013      	ands	r3, r2
 8003280:	60cb      	str	r3, [r1, #12]
 8003282:	e03e      	b.n	8003302 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e039      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003290:	4b1e      	ldr	r3, [pc, #120]	; (800330c <HAL_RCC_OscConfig+0x618>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f003 0203 	and.w	r2, r3, #3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d12c      	bne.n	80032fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	3b01      	subs	r3, #1
 80032b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d123      	bne.n	80032fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d11b      	bne.n	80032fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d113      	bne.n	80032fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	085b      	lsrs	r3, r3, #1
 80032e2:	3b01      	subs	r3, #1
 80032e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d109      	bne.n	80032fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f4:	085b      	lsrs	r3, r3, #1
 80032f6:	3b01      	subs	r3, #1
 80032f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d001      	beq.n	8003302 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3720      	adds	r7, #32
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40021000 	.word	0x40021000
 8003310:	019f800c 	.word	0x019f800c
 8003314:	feeefffc 	.word	0xfeeefffc

08003318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003322:	2300      	movs	r3, #0
 8003324:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e11e      	b.n	800356e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003330:	4b91      	ldr	r3, [pc, #580]	; (8003578 <HAL_RCC_ClockConfig+0x260>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 030f 	and.w	r3, r3, #15
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d910      	bls.n	8003360 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333e:	4b8e      	ldr	r3, [pc, #568]	; (8003578 <HAL_RCC_ClockConfig+0x260>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f023 020f 	bic.w	r2, r3, #15
 8003346:	498c      	ldr	r1, [pc, #560]	; (8003578 <HAL_RCC_ClockConfig+0x260>)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	4313      	orrs	r3, r2
 800334c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800334e:	4b8a      	ldr	r3, [pc, #552]	; (8003578 <HAL_RCC_ClockConfig+0x260>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d001      	beq.n	8003360 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e106      	b.n	800356e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d073      	beq.n	8003454 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b03      	cmp	r3, #3
 8003372:	d129      	bne.n	80033c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003374:	4b81      	ldr	r3, [pc, #516]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0f4      	b.n	800356e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003384:	f000 f99e 	bl	80036c4 <RCC_GetSysClockFreqFromPLLSource>
 8003388:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4a7c      	ldr	r2, [pc, #496]	; (8003580 <HAL_RCC_ClockConfig+0x268>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d93f      	bls.n	8003412 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003392:	4b7a      	ldr	r3, [pc, #488]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d009      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d033      	beq.n	8003412 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d12f      	bne.n	8003412 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033b2:	4b72      	ldr	r3, [pc, #456]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033ba:	4a70      	ldr	r2, [pc, #448]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 80033bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80033c2:	2380      	movs	r3, #128	; 0x80
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	e024      	b.n	8003412 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d107      	bne.n	80033e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033d0:	4b6a      	ldr	r3, [pc, #424]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d109      	bne.n	80033f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0c6      	b.n	800356e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033e0:	4b66      	ldr	r3, [pc, #408]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e0be      	b.n	800356e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80033f0:	f000 f8ce 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 80033f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4a61      	ldr	r2, [pc, #388]	; (8003580 <HAL_RCC_ClockConfig+0x268>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d909      	bls.n	8003412 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033fe:	4b5f      	ldr	r3, [pc, #380]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003406:	4a5d      	ldr	r2, [pc, #372]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 8003408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800340c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800340e:	2380      	movs	r3, #128	; 0x80
 8003410:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003412:	4b5a      	ldr	r3, [pc, #360]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f023 0203 	bic.w	r2, r3, #3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	4957      	ldr	r1, [pc, #348]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 8003420:	4313      	orrs	r3, r2
 8003422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003424:	f7fd fffa 	bl	800141c <HAL_GetTick>
 8003428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342a:	e00a      	b.n	8003442 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800342c:	f7fd fff6 	bl	800141c <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	f241 3288 	movw	r2, #5000	; 0x1388
 800343a:	4293      	cmp	r3, r2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e095      	b.n	800356e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003442:	4b4e      	ldr	r3, [pc, #312]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 020c 	and.w	r2, r3, #12
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	429a      	cmp	r2, r3
 8003452:	d1eb      	bne.n	800342c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d023      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800346c:	4b43      	ldr	r3, [pc, #268]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	4a42      	ldr	r2, [pc, #264]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 8003472:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003476:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0308 	and.w	r3, r3, #8
 8003480:	2b00      	cmp	r3, #0
 8003482:	d007      	beq.n	8003494 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003484:	4b3d      	ldr	r3, [pc, #244]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800348c:	4a3b      	ldr	r2, [pc, #236]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 800348e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003492:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003494:	4b39      	ldr	r3, [pc, #228]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	4936      	ldr	r1, [pc, #216]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	608b      	str	r3, [r1, #8]
 80034a6:	e008      	b.n	80034ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2b80      	cmp	r3, #128	; 0x80
 80034ac:	d105      	bne.n	80034ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80034ae:	4b33      	ldr	r3, [pc, #204]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	4a32      	ldr	r2, [pc, #200]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 80034b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034ba:	4b2f      	ldr	r3, [pc, #188]	; (8003578 <HAL_RCC_ClockConfig+0x260>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d21d      	bcs.n	8003504 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c8:	4b2b      	ldr	r3, [pc, #172]	; (8003578 <HAL_RCC_ClockConfig+0x260>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f023 020f 	bic.w	r2, r3, #15
 80034d0:	4929      	ldr	r1, [pc, #164]	; (8003578 <HAL_RCC_ClockConfig+0x260>)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034d8:	f7fd ffa0 	bl	800141c <HAL_GetTick>
 80034dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034de:	e00a      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e0:	f7fd ff9c 	bl	800141c <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e03b      	b.n	800356e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f6:	4b20      	ldr	r3, [pc, #128]	; (8003578 <HAL_RCC_ClockConfig+0x260>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d1ed      	bne.n	80034e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003510:	4b1a      	ldr	r3, [pc, #104]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4917      	ldr	r1, [pc, #92]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 800351e:	4313      	orrs	r3, r2
 8003520:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d009      	beq.n	8003542 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800352e:	4b13      	ldr	r3, [pc, #76]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	490f      	ldr	r1, [pc, #60]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 800353e:	4313      	orrs	r3, r2
 8003540:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003542:	f000 f825 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 8003546:	4602      	mov	r2, r0
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	091b      	lsrs	r3, r3, #4
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	490c      	ldr	r1, [pc, #48]	; (8003584 <HAL_RCC_ClockConfig+0x26c>)
 8003554:	5ccb      	ldrb	r3, [r1, r3]
 8003556:	f003 031f 	and.w	r3, r3, #31
 800355a:	fa22 f303 	lsr.w	r3, r2, r3
 800355e:	4a0a      	ldr	r2, [pc, #40]	; (8003588 <HAL_RCC_ClockConfig+0x270>)
 8003560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003562:	4b0a      	ldr	r3, [pc, #40]	; (800358c <HAL_RCC_ClockConfig+0x274>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7fd ff0c 	bl	8001384 <HAL_InitTick>
 800356c:	4603      	mov	r3, r0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40022000 	.word	0x40022000
 800357c:	40021000 	.word	0x40021000
 8003580:	04c4b400 	.word	0x04c4b400
 8003584:	08005978 	.word	0x08005978
 8003588:	20000000 	.word	0x20000000
 800358c:	20000004 	.word	0x20000004

08003590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003596:	4b2c      	ldr	r3, [pc, #176]	; (8003648 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 030c 	and.w	r3, r3, #12
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d102      	bne.n	80035a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035a2:	4b2a      	ldr	r3, [pc, #168]	; (800364c <HAL_RCC_GetSysClockFreq+0xbc>)
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	e047      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80035a8:	4b27      	ldr	r3, [pc, #156]	; (8003648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 030c 	and.w	r3, r3, #12
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d102      	bne.n	80035ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035b4:	4b26      	ldr	r3, [pc, #152]	; (8003650 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	e03e      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80035ba:	4b23      	ldr	r3, [pc, #140]	; (8003648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 030c 	and.w	r3, r3, #12
 80035c2:	2b0c      	cmp	r3, #12
 80035c4:	d136      	bne.n	8003634 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035c6:	4b20      	ldr	r3, [pc, #128]	; (8003648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035d0:	4b1d      	ldr	r3, [pc, #116]	; (8003648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	091b      	lsrs	r3, r3, #4
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	3301      	adds	r3, #1
 80035dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d10c      	bne.n	80035fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035e4:	4a1a      	ldr	r2, [pc, #104]	; (8003650 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ec:	4a16      	ldr	r2, [pc, #88]	; (8003648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035ee:	68d2      	ldr	r2, [r2, #12]
 80035f0:	0a12      	lsrs	r2, r2, #8
 80035f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035f6:	fb02 f303 	mul.w	r3, r2, r3
 80035fa:	617b      	str	r3, [r7, #20]
      break;
 80035fc:	e00c      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035fe:	4a13      	ldr	r2, [pc, #76]	; (800364c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	fbb2 f3f3 	udiv	r3, r2, r3
 8003606:	4a10      	ldr	r2, [pc, #64]	; (8003648 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003608:	68d2      	ldr	r2, [r2, #12]
 800360a:	0a12      	lsrs	r2, r2, #8
 800360c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003610:	fb02 f303 	mul.w	r3, r2, r3
 8003614:	617b      	str	r3, [r7, #20]
      break;
 8003616:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <HAL_RCC_GetSysClockFreq+0xb8>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	0e5b      	lsrs	r3, r3, #25
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	3301      	adds	r3, #1
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	e001      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003638:	693b      	ldr	r3, [r7, #16]
}
 800363a:	4618      	mov	r0, r3
 800363c:	371c      	adds	r7, #28
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40021000 	.word	0x40021000
 800364c:	00f42400 	.word	0x00f42400
 8003650:	017d7840 	.word	0x017d7840

08003654 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003658:	4b03      	ldr	r3, [pc, #12]	; (8003668 <HAL_RCC_GetHCLKFreq+0x14>)
 800365a:	681b      	ldr	r3, [r3, #0]
}
 800365c:	4618      	mov	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	20000000 	.word	0x20000000

0800366c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003670:	f7ff fff0 	bl	8003654 <HAL_RCC_GetHCLKFreq>
 8003674:	4602      	mov	r2, r0
 8003676:	4b06      	ldr	r3, [pc, #24]	; (8003690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	0a1b      	lsrs	r3, r3, #8
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	4904      	ldr	r1, [pc, #16]	; (8003694 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003682:	5ccb      	ldrb	r3, [r1, r3]
 8003684:	f003 031f 	and.w	r3, r3, #31
 8003688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800368c:	4618      	mov	r0, r3
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40021000 	.word	0x40021000
 8003694:	08005988 	.word	0x08005988

08003698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800369c:	f7ff ffda 	bl	8003654 <HAL_RCC_GetHCLKFreq>
 80036a0:	4602      	mov	r2, r0
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	0adb      	lsrs	r3, r3, #11
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	4904      	ldr	r1, [pc, #16]	; (80036c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036ae:	5ccb      	ldrb	r3, [r1, r3]
 80036b0:	f003 031f 	and.w	r3, r3, #31
 80036b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40021000 	.word	0x40021000
 80036c0:	08005988 	.word	0x08005988

080036c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036ca:	4b1e      	ldr	r3, [pc, #120]	; (8003744 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036d4:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	091b      	lsrs	r3, r3, #4
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	3301      	adds	r3, #1
 80036e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	2b03      	cmp	r3, #3
 80036e6:	d10c      	bne.n	8003702 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036e8:	4a17      	ldr	r2, [pc, #92]	; (8003748 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f0:	4a14      	ldr	r2, [pc, #80]	; (8003744 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036f2:	68d2      	ldr	r2, [r2, #12]
 80036f4:	0a12      	lsrs	r2, r2, #8
 80036f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036fa:	fb02 f303 	mul.w	r3, r2, r3
 80036fe:	617b      	str	r3, [r7, #20]
    break;
 8003700:	e00c      	b.n	800371c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003702:	4a12      	ldr	r2, [pc, #72]	; (800374c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	fbb2 f3f3 	udiv	r3, r2, r3
 800370a:	4a0e      	ldr	r2, [pc, #56]	; (8003744 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800370c:	68d2      	ldr	r2, [r2, #12]
 800370e:	0a12      	lsrs	r2, r2, #8
 8003710:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003714:	fb02 f303 	mul.w	r3, r2, r3
 8003718:	617b      	str	r3, [r7, #20]
    break;
 800371a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800371c:	4b09      	ldr	r3, [pc, #36]	; (8003744 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	0e5b      	lsrs	r3, r3, #25
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	3301      	adds	r3, #1
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	fbb2 f3f3 	udiv	r3, r2, r3
 8003734:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003736:	687b      	ldr	r3, [r7, #4]
}
 8003738:	4618      	mov	r0, r3
 800373a:	371c      	adds	r7, #28
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	40021000 	.word	0x40021000
 8003748:	017d7840 	.word	0x017d7840
 800374c:	00f42400 	.word	0x00f42400

08003750 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003758:	2300      	movs	r3, #0
 800375a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800375c:	2300      	movs	r3, #0
 800375e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 8098 	beq.w	800389e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800376e:	2300      	movs	r3, #0
 8003770:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003772:	4b43      	ldr	r3, [pc, #268]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10d      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800377e:	4b40      	ldr	r3, [pc, #256]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003782:	4a3f      	ldr	r2, [pc, #252]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003788:	6593      	str	r3, [r2, #88]	; 0x58
 800378a:	4b3d      	ldr	r3, [pc, #244]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800378c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003792:	60bb      	str	r3, [r7, #8]
 8003794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003796:	2301      	movs	r3, #1
 8003798:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800379a:	4b3a      	ldr	r3, [pc, #232]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a39      	ldr	r2, [pc, #228]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037a6:	f7fd fe39 	bl	800141c <HAL_GetTick>
 80037aa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037ac:	e009      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ae:	f7fd fe35 	bl	800141c <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d902      	bls.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	74fb      	strb	r3, [r7, #19]
        break;
 80037c0:	e005      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037c2:	4b30      	ldr	r3, [pc, #192]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0ef      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80037ce:	7cfb      	ldrb	r3, [r7, #19]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d159      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037d4:	4b2a      	ldr	r3, [pc, #168]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037de:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d01e      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d019      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037f0:	4b23      	ldr	r3, [pc, #140]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037fc:	4b20      	ldr	r3, [pc, #128]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003802:	4a1f      	ldr	r2, [pc, #124]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800380c:	4b1c      	ldr	r3, [pc, #112]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003812:	4a1b      	ldr	r2, [pc, #108]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800381c:	4a18      	ldr	r2, [pc, #96]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d016      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382e:	f7fd fdf5 	bl	800141c <HAL_GetTick>
 8003832:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003834:	e00b      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003836:	f7fd fdf1 	bl	800141c <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	f241 3288 	movw	r2, #5000	; 0x1388
 8003844:	4293      	cmp	r3, r2
 8003846:	d902      	bls.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	74fb      	strb	r3, [r7, #19]
            break;
 800384c:	e006      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800384e:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0ec      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800385c:	7cfb      	ldrb	r3, [r7, #19]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10b      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003862:	4b07      	ldr	r3, [pc, #28]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003868:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	4903      	ldr	r1, [pc, #12]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003878:	e008      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800387a:	7cfb      	ldrb	r3, [r7, #19]
 800387c:	74bb      	strb	r3, [r7, #18]
 800387e:	e005      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003880:	40021000 	.word	0x40021000
 8003884:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003888:	7cfb      	ldrb	r3, [r7, #19]
 800388a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800388c:	7c7b      	ldrb	r3, [r7, #17]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d105      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003892:	4ba6      	ldr	r3, [pc, #664]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003896:	4aa5      	ldr	r2, [pc, #660]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800389c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038aa:	4ba0      	ldr	r3, [pc, #640]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b0:	f023 0203 	bic.w	r2, r3, #3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	499c      	ldr	r1, [pc, #624]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038cc:	4b97      	ldr	r3, [pc, #604]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d2:	f023 020c 	bic.w	r2, r3, #12
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	4994      	ldr	r1, [pc, #592]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0304 	and.w	r3, r3, #4
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038ee:	4b8f      	ldr	r3, [pc, #572]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	498b      	ldr	r1, [pc, #556]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003910:	4b86      	ldr	r3, [pc, #536]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003916:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	4983      	ldr	r1, [pc, #524]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003932:	4b7e      	ldr	r3, [pc, #504]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003938:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	497a      	ldr	r1, [pc, #488]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003954:	4b75      	ldr	r3, [pc, #468]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	4972      	ldr	r1, [pc, #456]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003976:	4b6d      	ldr	r3, [pc, #436]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	4969      	ldr	r1, [pc, #420]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003998:	4b64      	ldr	r3, [pc, #400]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	4961      	ldr	r1, [pc, #388]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039ba:	4b5c      	ldr	r3, [pc, #368]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	4958      	ldr	r1, [pc, #352]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d015      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039dc:	4b53      	ldr	r3, [pc, #332]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ea:	4950      	ldr	r1, [pc, #320]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039fa:	d105      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039fc:	4b4b      	ldr	r3, [pc, #300]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	4a4a      	ldr	r2, [pc, #296]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a06:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d015      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a14:	4b45      	ldr	r3, [pc, #276]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a22:	4942      	ldr	r1, [pc, #264]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a32:	d105      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a34:	4b3d      	ldr	r3, [pc, #244]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4a3c      	ldr	r2, [pc, #240]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a3e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d015      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a4c:	4b37      	ldr	r3, [pc, #220]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	4934      	ldr	r1, [pc, #208]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a6a:	d105      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a6c:	4b2f      	ldr	r3, [pc, #188]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4a2e      	ldr	r2, [pc, #184]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a76:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d015      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a84:	4b29      	ldr	r3, [pc, #164]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a92:	4926      	ldr	r1, [pc, #152]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aa2:	d105      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aa4:	4b21      	ldr	r3, [pc, #132]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	4a20      	ldr	r2, [pc, #128]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d015      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003abc:	4b1b      	ldr	r3, [pc, #108]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	4918      	ldr	r1, [pc, #96]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ada:	d105      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003adc:	4b13      	ldr	r3, [pc, #76]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	4a12      	ldr	r2, [pc, #72]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ae2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ae6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d015      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003af4:	4b0d      	ldr	r3, [pc, #52]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b02:	490a      	ldr	r1, [pc, #40]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b12:	d105      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b14:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4a04      	ldr	r2, [pc, #16]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003b20:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40021000 	.word	0x40021000

08003b30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e09d      	b.n	8003c7e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d108      	bne.n	8003b5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b52:	d009      	beq.n	8003b68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	61da      	str	r2, [r3, #28]
 8003b5a:	e005      	b.n	8003b68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7fd f970 	bl	8000e68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ba8:	d902      	bls.n	8003bb0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003baa:	2300      	movs	r3, #0
 8003bac:	60fb      	str	r3, [r7, #12]
 8003bae:	e002      	b.n	8003bb6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bb4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003bbe:	d007      	beq.n	8003bd0 <HAL_SPI_Init+0xa0>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bc8:	d002      	beq.n	8003bd0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003be0:	431a      	orrs	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c12:	ea42 0103 	orr.w	r1, r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	0c1b      	lsrs	r3, r3, #16
 8003c2c:	f003 0204 	and.w	r2, r3, #4
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c4c:	ea42 0103 	orr.w	r1, r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69da      	ldr	r2, [r3, #28]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b082      	sub	sp, #8
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e049      	b.n	8003d2c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d106      	bne.n	8003cb2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7fd f93b 	bl	8000f28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	f000 faa5 	bl	8004214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e049      	b.n	8003dda <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d106      	bne.n	8003d60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f841 	bl	8003de2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3304      	adds	r3, #4
 8003d70:	4619      	mov	r1, r3
 8003d72:	4610      	mov	r0, r2
 8003d74:	f000 fa4e 	bl	8004214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
	...

08003df8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d101      	bne.n	8003e16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e12:	2302      	movs	r3, #2
 8003e14:	e0ff      	b.n	8004016 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b14      	cmp	r3, #20
 8003e22:	f200 80f0 	bhi.w	8004006 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003e26:	a201      	add	r2, pc, #4	; (adr r2, 8003e2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2c:	08003e81 	.word	0x08003e81
 8003e30:	08004007 	.word	0x08004007
 8003e34:	08004007 	.word	0x08004007
 8003e38:	08004007 	.word	0x08004007
 8003e3c:	08003ec1 	.word	0x08003ec1
 8003e40:	08004007 	.word	0x08004007
 8003e44:	08004007 	.word	0x08004007
 8003e48:	08004007 	.word	0x08004007
 8003e4c:	08003f03 	.word	0x08003f03
 8003e50:	08004007 	.word	0x08004007
 8003e54:	08004007 	.word	0x08004007
 8003e58:	08004007 	.word	0x08004007
 8003e5c:	08003f43 	.word	0x08003f43
 8003e60:	08004007 	.word	0x08004007
 8003e64:	08004007 	.word	0x08004007
 8003e68:	08004007 	.word	0x08004007
 8003e6c:	08003f85 	.word	0x08003f85
 8003e70:	08004007 	.word	0x08004007
 8003e74:	08004007 	.word	0x08004007
 8003e78:	08004007 	.word	0x08004007
 8003e7c:	08003fc5 	.word	0x08003fc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68b9      	ldr	r1, [r7, #8]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fa60 	bl	800434c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0208 	orr.w	r2, r2, #8
 8003e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0204 	bic.w	r2, r2, #4
 8003eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6999      	ldr	r1, [r3, #24]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	691a      	ldr	r2, [r3, #16]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	619a      	str	r2, [r3, #24]
      break;
 8003ebe:	e0a5      	b.n	800400c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fad0 	bl	800446c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6999      	ldr	r1, [r3, #24]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	021a      	lsls	r2, r3, #8
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	619a      	str	r2, [r3, #24]
      break;
 8003f00:	e084      	b.n	800400c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68b9      	ldr	r1, [r7, #8]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fb39 	bl	8004580 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69da      	ldr	r2, [r3, #28]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0208 	orr.w	r2, r2, #8
 8003f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0204 	bic.w	r2, r2, #4
 8003f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69d9      	ldr	r1, [r3, #28]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	61da      	str	r2, [r3, #28]
      break;
 8003f40:	e064      	b.n	800400c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68b9      	ldr	r1, [r7, #8]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fba1 	bl	8004690 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69da      	ldr	r2, [r3, #28]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	69da      	ldr	r2, [r3, #28]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	69d9      	ldr	r1, [r3, #28]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	021a      	lsls	r2, r3, #8
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	61da      	str	r2, [r3, #28]
      break;
 8003f82:	e043      	b.n	800400c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68b9      	ldr	r1, [r7, #8]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fc0a 	bl	80047a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0208 	orr.w	r2, r2, #8
 8003f9e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0204 	bic.w	r2, r2, #4
 8003fae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003fc2:	e023      	b.n	800400c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68b9      	ldr	r1, [r7, #8]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fc4e 	bl	800486c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fde:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	021a      	lsls	r2, r3, #8
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004004:	e002      	b.n	800400c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	75fb      	strb	r3, [r7, #23]
      break;
 800400a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004014:	7dfb      	ldrb	r3, [r7, #23]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop

08004020 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_TIM_ConfigClockSource+0x1c>
 8004038:	2302      	movs	r3, #2
 800403a:	e0de      	b.n	80041fa <HAL_TIM_ConfigClockSource+0x1da>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800405a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800405e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004066:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a63      	ldr	r2, [pc, #396]	; (8004204 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	f000 80a9 	beq.w	80041ce <HAL_TIM_ConfigClockSource+0x1ae>
 800407c:	4a61      	ldr	r2, [pc, #388]	; (8004204 <HAL_TIM_ConfigClockSource+0x1e4>)
 800407e:	4293      	cmp	r3, r2
 8004080:	f200 80ae 	bhi.w	80041e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004084:	4a60      	ldr	r2, [pc, #384]	; (8004208 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	f000 80a1 	beq.w	80041ce <HAL_TIM_ConfigClockSource+0x1ae>
 800408c:	4a5e      	ldr	r2, [pc, #376]	; (8004208 <HAL_TIM_ConfigClockSource+0x1e8>)
 800408e:	4293      	cmp	r3, r2
 8004090:	f200 80a6 	bhi.w	80041e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004094:	4a5d      	ldr	r2, [pc, #372]	; (800420c <HAL_TIM_ConfigClockSource+0x1ec>)
 8004096:	4293      	cmp	r3, r2
 8004098:	f000 8099 	beq.w	80041ce <HAL_TIM_ConfigClockSource+0x1ae>
 800409c:	4a5b      	ldr	r2, [pc, #364]	; (800420c <HAL_TIM_ConfigClockSource+0x1ec>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	f200 809e 	bhi.w	80041e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80040a4:	4a5a      	ldr	r2, [pc, #360]	; (8004210 <HAL_TIM_ConfigClockSource+0x1f0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	f000 8091 	beq.w	80041ce <HAL_TIM_ConfigClockSource+0x1ae>
 80040ac:	4a58      	ldr	r2, [pc, #352]	; (8004210 <HAL_TIM_ConfigClockSource+0x1f0>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	f200 8096 	bhi.w	80041e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80040b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80040b8:	f000 8089 	beq.w	80041ce <HAL_TIM_ConfigClockSource+0x1ae>
 80040bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80040c0:	f200 808e 	bhi.w	80041e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80040c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c8:	d03e      	beq.n	8004148 <HAL_TIM_ConfigClockSource+0x128>
 80040ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ce:	f200 8087 	bhi.w	80041e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80040d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d6:	f000 8086 	beq.w	80041e6 <HAL_TIM_ConfigClockSource+0x1c6>
 80040da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040de:	d87f      	bhi.n	80041e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80040e0:	2b70      	cmp	r3, #112	; 0x70
 80040e2:	d01a      	beq.n	800411a <HAL_TIM_ConfigClockSource+0xfa>
 80040e4:	2b70      	cmp	r3, #112	; 0x70
 80040e6:	d87b      	bhi.n	80041e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80040e8:	2b60      	cmp	r3, #96	; 0x60
 80040ea:	d050      	beq.n	800418e <HAL_TIM_ConfigClockSource+0x16e>
 80040ec:	2b60      	cmp	r3, #96	; 0x60
 80040ee:	d877      	bhi.n	80041e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80040f0:	2b50      	cmp	r3, #80	; 0x50
 80040f2:	d03c      	beq.n	800416e <HAL_TIM_ConfigClockSource+0x14e>
 80040f4:	2b50      	cmp	r3, #80	; 0x50
 80040f6:	d873      	bhi.n	80041e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80040f8:	2b40      	cmp	r3, #64	; 0x40
 80040fa:	d058      	beq.n	80041ae <HAL_TIM_ConfigClockSource+0x18e>
 80040fc:	2b40      	cmp	r3, #64	; 0x40
 80040fe:	d86f      	bhi.n	80041e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004100:	2b30      	cmp	r3, #48	; 0x30
 8004102:	d064      	beq.n	80041ce <HAL_TIM_ConfigClockSource+0x1ae>
 8004104:	2b30      	cmp	r3, #48	; 0x30
 8004106:	d86b      	bhi.n	80041e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004108:	2b20      	cmp	r3, #32
 800410a:	d060      	beq.n	80041ce <HAL_TIM_ConfigClockSource+0x1ae>
 800410c:	2b20      	cmp	r3, #32
 800410e:	d867      	bhi.n	80041e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004110:	2b00      	cmp	r3, #0
 8004112:	d05c      	beq.n	80041ce <HAL_TIM_ConfigClockSource+0x1ae>
 8004114:	2b10      	cmp	r3, #16
 8004116:	d05a      	beq.n	80041ce <HAL_TIM_ConfigClockSource+0x1ae>
 8004118:	e062      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800412a:	f000 fc81 	bl	8004a30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800413c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	609a      	str	r2, [r3, #8]
      break;
 8004146:	e04f      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004158:	f000 fc6a 	bl	8004a30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800416a:	609a      	str	r2, [r3, #8]
      break;
 800416c:	e03c      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800417a:	461a      	mov	r2, r3
 800417c:	f000 fbdc 	bl	8004938 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2150      	movs	r1, #80	; 0x50
 8004186:	4618      	mov	r0, r3
 8004188:	f000 fc35 	bl	80049f6 <TIM_ITRx_SetConfig>
      break;
 800418c:	e02c      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800419a:	461a      	mov	r2, r3
 800419c:	f000 fbfb 	bl	8004996 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2160      	movs	r1, #96	; 0x60
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 fc25 	bl	80049f6 <TIM_ITRx_SetConfig>
      break;
 80041ac:	e01c      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ba:	461a      	mov	r2, r3
 80041bc:	f000 fbbc 	bl	8004938 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2140      	movs	r1, #64	; 0x40
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fc15 	bl	80049f6 <TIM_ITRx_SetConfig>
      break;
 80041cc:	e00c      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4619      	mov	r1, r3
 80041d8:	4610      	mov	r0, r2
 80041da:	f000 fc0c 	bl	80049f6 <TIM_ITRx_SetConfig>
      break;
 80041de:	e003      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	73fb      	strb	r3, [r7, #15]
      break;
 80041e4:	e000      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80041e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	00100070 	.word	0x00100070
 8004208:	00100040 	.word	0x00100040
 800420c:	00100030 	.word	0x00100030
 8004210:	00100020 	.word	0x00100020

08004214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a42      	ldr	r2, [pc, #264]	; (8004330 <TIM_Base_SetConfig+0x11c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00f      	beq.n	800424c <TIM_Base_SetConfig+0x38>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004232:	d00b      	beq.n	800424c <TIM_Base_SetConfig+0x38>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a3f      	ldr	r2, [pc, #252]	; (8004334 <TIM_Base_SetConfig+0x120>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d007      	beq.n	800424c <TIM_Base_SetConfig+0x38>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a3e      	ldr	r2, [pc, #248]	; (8004338 <TIM_Base_SetConfig+0x124>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d003      	beq.n	800424c <TIM_Base_SetConfig+0x38>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a3d      	ldr	r2, [pc, #244]	; (800433c <TIM_Base_SetConfig+0x128>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d108      	bne.n	800425e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a33      	ldr	r2, [pc, #204]	; (8004330 <TIM_Base_SetConfig+0x11c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d01b      	beq.n	800429e <TIM_Base_SetConfig+0x8a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426c:	d017      	beq.n	800429e <TIM_Base_SetConfig+0x8a>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a30      	ldr	r2, [pc, #192]	; (8004334 <TIM_Base_SetConfig+0x120>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d013      	beq.n	800429e <TIM_Base_SetConfig+0x8a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a2f      	ldr	r2, [pc, #188]	; (8004338 <TIM_Base_SetConfig+0x124>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00f      	beq.n	800429e <TIM_Base_SetConfig+0x8a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a2e      	ldr	r2, [pc, #184]	; (800433c <TIM_Base_SetConfig+0x128>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00b      	beq.n	800429e <TIM_Base_SetConfig+0x8a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a2d      	ldr	r2, [pc, #180]	; (8004340 <TIM_Base_SetConfig+0x12c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d007      	beq.n	800429e <TIM_Base_SetConfig+0x8a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a2c      	ldr	r2, [pc, #176]	; (8004344 <TIM_Base_SetConfig+0x130>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d003      	beq.n	800429e <TIM_Base_SetConfig+0x8a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a2b      	ldr	r2, [pc, #172]	; (8004348 <TIM_Base_SetConfig+0x134>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d108      	bne.n	80042b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a16      	ldr	r2, [pc, #88]	; (8004330 <TIM_Base_SetConfig+0x11c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00f      	beq.n	80042fc <TIM_Base_SetConfig+0xe8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a17      	ldr	r2, [pc, #92]	; (800433c <TIM_Base_SetConfig+0x128>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d00b      	beq.n	80042fc <TIM_Base_SetConfig+0xe8>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a16      	ldr	r2, [pc, #88]	; (8004340 <TIM_Base_SetConfig+0x12c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d007      	beq.n	80042fc <TIM_Base_SetConfig+0xe8>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a15      	ldr	r2, [pc, #84]	; (8004344 <TIM_Base_SetConfig+0x130>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d003      	beq.n	80042fc <TIM_Base_SetConfig+0xe8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a14      	ldr	r2, [pc, #80]	; (8004348 <TIM_Base_SetConfig+0x134>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d103      	bne.n	8004304 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b01      	cmp	r3, #1
 8004314:	d105      	bne.n	8004322 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f023 0201 	bic.w	r2, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	611a      	str	r2, [r3, #16]
  }
}
 8004322:	bf00      	nop
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40012c00 	.word	0x40012c00
 8004334:	40000400 	.word	0x40000400
 8004338:	40000800 	.word	0x40000800
 800433c:	40013400 	.word	0x40013400
 8004340:	40014000 	.word	0x40014000
 8004344:	40014400 	.word	0x40014400
 8004348:	40014800 	.word	0x40014800

0800434c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	f023 0201 	bic.w	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800437a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 0303 	bic.w	r3, r3, #3
 8004386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f023 0302 	bic.w	r3, r3, #2
 8004398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a2c      	ldr	r2, [pc, #176]	; (8004458 <TIM_OC1_SetConfig+0x10c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d00f      	beq.n	80043cc <TIM_OC1_SetConfig+0x80>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a2b      	ldr	r2, [pc, #172]	; (800445c <TIM_OC1_SetConfig+0x110>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d00b      	beq.n	80043cc <TIM_OC1_SetConfig+0x80>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a2a      	ldr	r2, [pc, #168]	; (8004460 <TIM_OC1_SetConfig+0x114>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d007      	beq.n	80043cc <TIM_OC1_SetConfig+0x80>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a29      	ldr	r2, [pc, #164]	; (8004464 <TIM_OC1_SetConfig+0x118>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d003      	beq.n	80043cc <TIM_OC1_SetConfig+0x80>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a28      	ldr	r2, [pc, #160]	; (8004468 <TIM_OC1_SetConfig+0x11c>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d10c      	bne.n	80043e6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f023 0308 	bic.w	r3, r3, #8
 80043d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	4313      	orrs	r3, r2
 80043dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f023 0304 	bic.w	r3, r3, #4
 80043e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a1b      	ldr	r2, [pc, #108]	; (8004458 <TIM_OC1_SetConfig+0x10c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d00f      	beq.n	800440e <TIM_OC1_SetConfig+0xc2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a1a      	ldr	r2, [pc, #104]	; (800445c <TIM_OC1_SetConfig+0x110>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00b      	beq.n	800440e <TIM_OC1_SetConfig+0xc2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a19      	ldr	r2, [pc, #100]	; (8004460 <TIM_OC1_SetConfig+0x114>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d007      	beq.n	800440e <TIM_OC1_SetConfig+0xc2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a18      	ldr	r2, [pc, #96]	; (8004464 <TIM_OC1_SetConfig+0x118>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d003      	beq.n	800440e <TIM_OC1_SetConfig+0xc2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a17      	ldr	r2, [pc, #92]	; (8004468 <TIM_OC1_SetConfig+0x11c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d111      	bne.n	8004432 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004414:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800441c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4313      	orrs	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	621a      	str	r2, [r3, #32]
}
 800444c:	bf00      	nop
 800444e:	371c      	adds	r7, #28
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	40012c00 	.word	0x40012c00
 800445c:	40013400 	.word	0x40013400
 8004460:	40014000 	.word	0x40014000
 8004464:	40014400 	.word	0x40014400
 8004468:	40014800 	.word	0x40014800

0800446c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	f023 0210 	bic.w	r2, r3, #16
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800449a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800449e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	021b      	lsls	r3, r3, #8
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f023 0320 	bic.w	r3, r3, #32
 80044ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	011b      	lsls	r3, r3, #4
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a28      	ldr	r2, [pc, #160]	; (800456c <TIM_OC2_SetConfig+0x100>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d003      	beq.n	80044d8 <TIM_OC2_SetConfig+0x6c>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a27      	ldr	r2, [pc, #156]	; (8004570 <TIM_OC2_SetConfig+0x104>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d10d      	bne.n	80044f4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a1d      	ldr	r2, [pc, #116]	; (800456c <TIM_OC2_SetConfig+0x100>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d00f      	beq.n	800451c <TIM_OC2_SetConfig+0xb0>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a1c      	ldr	r2, [pc, #112]	; (8004570 <TIM_OC2_SetConfig+0x104>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00b      	beq.n	800451c <TIM_OC2_SetConfig+0xb0>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a1b      	ldr	r2, [pc, #108]	; (8004574 <TIM_OC2_SetConfig+0x108>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d007      	beq.n	800451c <TIM_OC2_SetConfig+0xb0>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a1a      	ldr	r2, [pc, #104]	; (8004578 <TIM_OC2_SetConfig+0x10c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d003      	beq.n	800451c <TIM_OC2_SetConfig+0xb0>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a19      	ldr	r2, [pc, #100]	; (800457c <TIM_OC2_SetConfig+0x110>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d113      	bne.n	8004544 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004522:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800452a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	4313      	orrs	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	621a      	str	r2, [r3, #32]
}
 800455e:	bf00      	nop
 8004560:	371c      	adds	r7, #28
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40012c00 	.word	0x40012c00
 8004570:	40013400 	.word	0x40013400
 8004574:	40014000 	.word	0x40014000
 8004578:	40014400 	.word	0x40014400
 800457c:	40014800 	.word	0x40014800

08004580 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0303 	bic.w	r3, r3, #3
 80045ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	021b      	lsls	r3, r3, #8
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a27      	ldr	r2, [pc, #156]	; (800467c <TIM_OC3_SetConfig+0xfc>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d003      	beq.n	80045ea <TIM_OC3_SetConfig+0x6a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a26      	ldr	r2, [pc, #152]	; (8004680 <TIM_OC3_SetConfig+0x100>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d10d      	bne.n	8004606 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	021b      	lsls	r3, r3, #8
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a1c      	ldr	r2, [pc, #112]	; (800467c <TIM_OC3_SetConfig+0xfc>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00f      	beq.n	800462e <TIM_OC3_SetConfig+0xae>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a1b      	ldr	r2, [pc, #108]	; (8004680 <TIM_OC3_SetConfig+0x100>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d00b      	beq.n	800462e <TIM_OC3_SetConfig+0xae>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a1a      	ldr	r2, [pc, #104]	; (8004684 <TIM_OC3_SetConfig+0x104>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d007      	beq.n	800462e <TIM_OC3_SetConfig+0xae>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a19      	ldr	r2, [pc, #100]	; (8004688 <TIM_OC3_SetConfig+0x108>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d003      	beq.n	800462e <TIM_OC3_SetConfig+0xae>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a18      	ldr	r2, [pc, #96]	; (800468c <TIM_OC3_SetConfig+0x10c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d113      	bne.n	8004656 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800463c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	011b      	lsls	r3, r3, #4
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4313      	orrs	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	621a      	str	r2, [r3, #32]
}
 8004670:	bf00      	nop
 8004672:	371c      	adds	r7, #28
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	40012c00 	.word	0x40012c00
 8004680:	40013400 	.word	0x40013400
 8004684:	40014000 	.word	0x40014000
 8004688:	40014400 	.word	0x40014400
 800468c:	40014800 	.word	0x40014800

08004690 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	021b      	lsls	r3, r3, #8
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	031b      	lsls	r3, r3, #12
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a28      	ldr	r2, [pc, #160]	; (8004790 <TIM_OC4_SetConfig+0x100>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d003      	beq.n	80046fc <TIM_OC4_SetConfig+0x6c>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a27      	ldr	r2, [pc, #156]	; (8004794 <TIM_OC4_SetConfig+0x104>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d10d      	bne.n	8004718 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004702:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	031b      	lsls	r3, r3, #12
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	4313      	orrs	r3, r2
 800470e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004716:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a1d      	ldr	r2, [pc, #116]	; (8004790 <TIM_OC4_SetConfig+0x100>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d00f      	beq.n	8004740 <TIM_OC4_SetConfig+0xb0>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a1c      	ldr	r2, [pc, #112]	; (8004794 <TIM_OC4_SetConfig+0x104>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00b      	beq.n	8004740 <TIM_OC4_SetConfig+0xb0>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a1b      	ldr	r2, [pc, #108]	; (8004798 <TIM_OC4_SetConfig+0x108>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d007      	beq.n	8004740 <TIM_OC4_SetConfig+0xb0>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a1a      	ldr	r2, [pc, #104]	; (800479c <TIM_OC4_SetConfig+0x10c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d003      	beq.n	8004740 <TIM_OC4_SetConfig+0xb0>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a19      	ldr	r2, [pc, #100]	; (80047a0 <TIM_OC4_SetConfig+0x110>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d113      	bne.n	8004768 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004746:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800474e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	019b      	lsls	r3, r3, #6
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	4313      	orrs	r3, r2
 800475a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	019b      	lsls	r3, r3, #6
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	4313      	orrs	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	621a      	str	r2, [r3, #32]
}
 8004782:	bf00      	nop
 8004784:	371c      	adds	r7, #28
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	40012c00 	.word	0x40012c00
 8004794:	40013400 	.word	0x40013400
 8004798:	40014000 	.word	0x40014000
 800479c:	40014400 	.word	0x40014400
 80047a0:	40014800 	.word	0x40014800

080047a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	4313      	orrs	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80047e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	041b      	lsls	r3, r3, #16
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a17      	ldr	r2, [pc, #92]	; (8004858 <TIM_OC5_SetConfig+0xb4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00f      	beq.n	800481e <TIM_OC5_SetConfig+0x7a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a16      	ldr	r2, [pc, #88]	; (800485c <TIM_OC5_SetConfig+0xb8>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d00b      	beq.n	800481e <TIM_OC5_SetConfig+0x7a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a15      	ldr	r2, [pc, #84]	; (8004860 <TIM_OC5_SetConfig+0xbc>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d007      	beq.n	800481e <TIM_OC5_SetConfig+0x7a>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a14      	ldr	r2, [pc, #80]	; (8004864 <TIM_OC5_SetConfig+0xc0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d003      	beq.n	800481e <TIM_OC5_SetConfig+0x7a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a13      	ldr	r2, [pc, #76]	; (8004868 <TIM_OC5_SetConfig+0xc4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d109      	bne.n	8004832 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004824:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	021b      	lsls	r3, r3, #8
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	4313      	orrs	r3, r2
 8004830:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	621a      	str	r2, [r3, #32]
}
 800484c:	bf00      	nop
 800484e:	371c      	adds	r7, #28
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	40012c00 	.word	0x40012c00
 800485c:	40013400 	.word	0x40013400
 8004860:	40014000 	.word	0x40014000
 8004864:	40014400 	.word	0x40014400
 8004868:	40014800 	.word	0x40014800

0800486c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800489a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800489e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	021b      	lsls	r3, r3, #8
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	051b      	lsls	r3, r3, #20
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	4313      	orrs	r3, r2
 80048be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a18      	ldr	r2, [pc, #96]	; (8004924 <TIM_OC6_SetConfig+0xb8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d00f      	beq.n	80048e8 <TIM_OC6_SetConfig+0x7c>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a17      	ldr	r2, [pc, #92]	; (8004928 <TIM_OC6_SetConfig+0xbc>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d00b      	beq.n	80048e8 <TIM_OC6_SetConfig+0x7c>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a16      	ldr	r2, [pc, #88]	; (800492c <TIM_OC6_SetConfig+0xc0>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d007      	beq.n	80048e8 <TIM_OC6_SetConfig+0x7c>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a15      	ldr	r2, [pc, #84]	; (8004930 <TIM_OC6_SetConfig+0xc4>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d003      	beq.n	80048e8 <TIM_OC6_SetConfig+0x7c>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a14      	ldr	r2, [pc, #80]	; (8004934 <TIM_OC6_SetConfig+0xc8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d109      	bne.n	80048fc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	029b      	lsls	r3, r3, #10
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	621a      	str	r2, [r3, #32]
}
 8004916:	bf00      	nop
 8004918:	371c      	adds	r7, #28
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	40012c00 	.word	0x40012c00
 8004928:	40013400 	.word	0x40013400
 800492c:	40014000 	.word	0x40014000
 8004930:	40014400 	.word	0x40014400
 8004934:	40014800 	.word	0x40014800

08004938 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	f023 0201 	bic.w	r2, r3, #1
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f023 030a 	bic.w	r3, r3, #10
 8004974:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4313      	orrs	r3, r2
 800497c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	621a      	str	r2, [r3, #32]
}
 800498a:	bf00      	nop
 800498c:	371c      	adds	r7, #28
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004996:	b480      	push	{r7}
 8004998:	b087      	sub	sp, #28
 800499a:	af00      	add	r7, sp, #0
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	f023 0210 	bic.w	r2, r3, #16
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	031b      	lsls	r3, r3, #12
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	011b      	lsls	r3, r3, #4
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	4313      	orrs	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	621a      	str	r2, [r3, #32]
}
 80049ea:	bf00      	nop
 80049ec:	371c      	adds	r7, #28
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b085      	sub	sp, #20
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
 80049fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f043 0307 	orr.w	r3, r3, #7
 8004a1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	609a      	str	r2, [r3, #8]
}
 8004a24:	bf00      	nop
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	021a      	lsls	r2, r3, #8
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	431a      	orrs	r2, r3
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	609a      	str	r2, [r3, #8]
}
 8004a64:	bf00      	nop
 8004a66:	371c      	adds	r7, #28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e065      	b.n	8004b54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a2c      	ldr	r2, [pc, #176]	; (8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d004      	beq.n	8004abc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a2b      	ldr	r2, [pc, #172]	; (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d108      	bne.n	8004ace <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ac2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a1b      	ldr	r2, [pc, #108]	; (8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d018      	beq.n	8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004afe:	d013      	beq.n	8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a18      	ldr	r2, [pc, #96]	; (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d00e      	beq.n	8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a17      	ldr	r2, [pc, #92]	; (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d009      	beq.n	8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a12      	ldr	r2, [pc, #72]	; (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d004      	beq.n	8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a13      	ldr	r2, [pc, #76]	; (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d10c      	bne.n	8004b42 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	40012c00 	.word	0x40012c00
 8004b64:	40013400 	.word	0x40013400
 8004b68:	40000400 	.word	0x40000400
 8004b6c:	40000800 	.word	0x40000800
 8004b70:	40014000 	.word	0x40014000

08004b74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e073      	b.n	8004c78 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	041b      	lsls	r3, r3, #16
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a19      	ldr	r2, [pc, #100]	; (8004c84 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d004      	beq.n	8004c2c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a18      	ldr	r2, [pc, #96]	; (8004c88 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d11c      	bne.n	8004c66 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c36:	051b      	lsls	r3, r3, #20
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	4313      	orrs	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	40012c00 	.word	0x40012c00
 8004c88:	40013400 	.word	0x40013400

08004c8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e042      	b.n	8004d24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d106      	bne.n	8004cb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f7fc fa33 	bl	800111c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2224      	movs	r2, #36	; 0x24
 8004cba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0201 	bic.w	r2, r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 faf4 	bl	80052c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f825 	bl	8004d2c <UART_SetConfig>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d101      	bne.n	8004cec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e01b      	b.n	8004d24 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0201 	orr.w	r2, r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 fb73 	bl	8005408 <UART_CheckIdleState>
 8004d22:	4603      	mov	r3, r0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d30:	b08c      	sub	sp, #48	; 0x30
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	431a      	orrs	r2, r3
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4bab      	ldr	r3, [pc, #684]	; (8005008 <UART_SetConfig+0x2dc>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	6812      	ldr	r2, [r2, #0]
 8004d62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d64:	430b      	orrs	r3, r1
 8004d66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4aa0      	ldr	r2, [pc, #640]	; (800500c <UART_SetConfig+0x2e0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d004      	beq.n	8004d98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d94:	4313      	orrs	r3, r2
 8004d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004da2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	6812      	ldr	r2, [r2, #0]
 8004daa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dac:	430b      	orrs	r3, r1
 8004dae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db6:	f023 010f 	bic.w	r1, r3, #15
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a91      	ldr	r2, [pc, #580]	; (8005010 <UART_SetConfig+0x2e4>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d125      	bne.n	8004e1c <UART_SetConfig+0xf0>
 8004dd0:	4b90      	ldr	r3, [pc, #576]	; (8005014 <UART_SetConfig+0x2e8>)
 8004dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	2b03      	cmp	r3, #3
 8004ddc:	d81a      	bhi.n	8004e14 <UART_SetConfig+0xe8>
 8004dde:	a201      	add	r2, pc, #4	; (adr r2, 8004de4 <UART_SetConfig+0xb8>)
 8004de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de4:	08004df5 	.word	0x08004df5
 8004de8:	08004e05 	.word	0x08004e05
 8004dec:	08004dfd 	.word	0x08004dfd
 8004df0:	08004e0d 	.word	0x08004e0d
 8004df4:	2301      	movs	r3, #1
 8004df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dfa:	e0d6      	b.n	8004faa <UART_SetConfig+0x27e>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e02:	e0d2      	b.n	8004faa <UART_SetConfig+0x27e>
 8004e04:	2304      	movs	r3, #4
 8004e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e0a:	e0ce      	b.n	8004faa <UART_SetConfig+0x27e>
 8004e0c:	2308      	movs	r3, #8
 8004e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e12:	e0ca      	b.n	8004faa <UART_SetConfig+0x27e>
 8004e14:	2310      	movs	r3, #16
 8004e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e1a:	e0c6      	b.n	8004faa <UART_SetConfig+0x27e>
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a7d      	ldr	r2, [pc, #500]	; (8005018 <UART_SetConfig+0x2ec>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d138      	bne.n	8004e98 <UART_SetConfig+0x16c>
 8004e26:	4b7b      	ldr	r3, [pc, #492]	; (8005014 <UART_SetConfig+0x2e8>)
 8004e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2c:	f003 030c 	and.w	r3, r3, #12
 8004e30:	2b0c      	cmp	r3, #12
 8004e32:	d82d      	bhi.n	8004e90 <UART_SetConfig+0x164>
 8004e34:	a201      	add	r2, pc, #4	; (adr r2, 8004e3c <UART_SetConfig+0x110>)
 8004e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3a:	bf00      	nop
 8004e3c:	08004e71 	.word	0x08004e71
 8004e40:	08004e91 	.word	0x08004e91
 8004e44:	08004e91 	.word	0x08004e91
 8004e48:	08004e91 	.word	0x08004e91
 8004e4c:	08004e81 	.word	0x08004e81
 8004e50:	08004e91 	.word	0x08004e91
 8004e54:	08004e91 	.word	0x08004e91
 8004e58:	08004e91 	.word	0x08004e91
 8004e5c:	08004e79 	.word	0x08004e79
 8004e60:	08004e91 	.word	0x08004e91
 8004e64:	08004e91 	.word	0x08004e91
 8004e68:	08004e91 	.word	0x08004e91
 8004e6c:	08004e89 	.word	0x08004e89
 8004e70:	2300      	movs	r3, #0
 8004e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e76:	e098      	b.n	8004faa <UART_SetConfig+0x27e>
 8004e78:	2302      	movs	r3, #2
 8004e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e7e:	e094      	b.n	8004faa <UART_SetConfig+0x27e>
 8004e80:	2304      	movs	r3, #4
 8004e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e86:	e090      	b.n	8004faa <UART_SetConfig+0x27e>
 8004e88:	2308      	movs	r3, #8
 8004e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e8e:	e08c      	b.n	8004faa <UART_SetConfig+0x27e>
 8004e90:	2310      	movs	r3, #16
 8004e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e96:	e088      	b.n	8004faa <UART_SetConfig+0x27e>
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a5f      	ldr	r2, [pc, #380]	; (800501c <UART_SetConfig+0x2f0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d125      	bne.n	8004eee <UART_SetConfig+0x1c2>
 8004ea2:	4b5c      	ldr	r3, [pc, #368]	; (8005014 <UART_SetConfig+0x2e8>)
 8004ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004eac:	2b30      	cmp	r3, #48	; 0x30
 8004eae:	d016      	beq.n	8004ede <UART_SetConfig+0x1b2>
 8004eb0:	2b30      	cmp	r3, #48	; 0x30
 8004eb2:	d818      	bhi.n	8004ee6 <UART_SetConfig+0x1ba>
 8004eb4:	2b20      	cmp	r3, #32
 8004eb6:	d00a      	beq.n	8004ece <UART_SetConfig+0x1a2>
 8004eb8:	2b20      	cmp	r3, #32
 8004eba:	d814      	bhi.n	8004ee6 <UART_SetConfig+0x1ba>
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d002      	beq.n	8004ec6 <UART_SetConfig+0x19a>
 8004ec0:	2b10      	cmp	r3, #16
 8004ec2:	d008      	beq.n	8004ed6 <UART_SetConfig+0x1aa>
 8004ec4:	e00f      	b.n	8004ee6 <UART_SetConfig+0x1ba>
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ecc:	e06d      	b.n	8004faa <UART_SetConfig+0x27e>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ed4:	e069      	b.n	8004faa <UART_SetConfig+0x27e>
 8004ed6:	2304      	movs	r3, #4
 8004ed8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004edc:	e065      	b.n	8004faa <UART_SetConfig+0x27e>
 8004ede:	2308      	movs	r3, #8
 8004ee0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ee4:	e061      	b.n	8004faa <UART_SetConfig+0x27e>
 8004ee6:	2310      	movs	r3, #16
 8004ee8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eec:	e05d      	b.n	8004faa <UART_SetConfig+0x27e>
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a4b      	ldr	r2, [pc, #300]	; (8005020 <UART_SetConfig+0x2f4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d125      	bne.n	8004f44 <UART_SetConfig+0x218>
 8004ef8:	4b46      	ldr	r3, [pc, #280]	; (8005014 <UART_SetConfig+0x2e8>)
 8004efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f02:	2bc0      	cmp	r3, #192	; 0xc0
 8004f04:	d016      	beq.n	8004f34 <UART_SetConfig+0x208>
 8004f06:	2bc0      	cmp	r3, #192	; 0xc0
 8004f08:	d818      	bhi.n	8004f3c <UART_SetConfig+0x210>
 8004f0a:	2b80      	cmp	r3, #128	; 0x80
 8004f0c:	d00a      	beq.n	8004f24 <UART_SetConfig+0x1f8>
 8004f0e:	2b80      	cmp	r3, #128	; 0x80
 8004f10:	d814      	bhi.n	8004f3c <UART_SetConfig+0x210>
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d002      	beq.n	8004f1c <UART_SetConfig+0x1f0>
 8004f16:	2b40      	cmp	r3, #64	; 0x40
 8004f18:	d008      	beq.n	8004f2c <UART_SetConfig+0x200>
 8004f1a:	e00f      	b.n	8004f3c <UART_SetConfig+0x210>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f22:	e042      	b.n	8004faa <UART_SetConfig+0x27e>
 8004f24:	2302      	movs	r3, #2
 8004f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f2a:	e03e      	b.n	8004faa <UART_SetConfig+0x27e>
 8004f2c:	2304      	movs	r3, #4
 8004f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f32:	e03a      	b.n	8004faa <UART_SetConfig+0x27e>
 8004f34:	2308      	movs	r3, #8
 8004f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f3a:	e036      	b.n	8004faa <UART_SetConfig+0x27e>
 8004f3c:	2310      	movs	r3, #16
 8004f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f42:	e032      	b.n	8004faa <UART_SetConfig+0x27e>
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a30      	ldr	r2, [pc, #192]	; (800500c <UART_SetConfig+0x2e0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d12a      	bne.n	8004fa4 <UART_SetConfig+0x278>
 8004f4e:	4b31      	ldr	r3, [pc, #196]	; (8005014 <UART_SetConfig+0x2e8>)
 8004f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f5c:	d01a      	beq.n	8004f94 <UART_SetConfig+0x268>
 8004f5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f62:	d81b      	bhi.n	8004f9c <UART_SetConfig+0x270>
 8004f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f68:	d00c      	beq.n	8004f84 <UART_SetConfig+0x258>
 8004f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f6e:	d815      	bhi.n	8004f9c <UART_SetConfig+0x270>
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <UART_SetConfig+0x250>
 8004f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f78:	d008      	beq.n	8004f8c <UART_SetConfig+0x260>
 8004f7a:	e00f      	b.n	8004f9c <UART_SetConfig+0x270>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f82:	e012      	b.n	8004faa <UART_SetConfig+0x27e>
 8004f84:	2302      	movs	r3, #2
 8004f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f8a:	e00e      	b.n	8004faa <UART_SetConfig+0x27e>
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f92:	e00a      	b.n	8004faa <UART_SetConfig+0x27e>
 8004f94:	2308      	movs	r3, #8
 8004f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f9a:	e006      	b.n	8004faa <UART_SetConfig+0x27e>
 8004f9c:	2310      	movs	r3, #16
 8004f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fa2:	e002      	b.n	8004faa <UART_SetConfig+0x27e>
 8004fa4:	2310      	movs	r3, #16
 8004fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a17      	ldr	r2, [pc, #92]	; (800500c <UART_SetConfig+0x2e0>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	f040 80a8 	bne.w	8005106 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004fb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fba:	2b08      	cmp	r3, #8
 8004fbc:	d834      	bhi.n	8005028 <UART_SetConfig+0x2fc>
 8004fbe:	a201      	add	r2, pc, #4	; (adr r2, 8004fc4 <UART_SetConfig+0x298>)
 8004fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc4:	08004fe9 	.word	0x08004fe9
 8004fc8:	08005029 	.word	0x08005029
 8004fcc:	08004ff1 	.word	0x08004ff1
 8004fd0:	08005029 	.word	0x08005029
 8004fd4:	08004ff7 	.word	0x08004ff7
 8004fd8:	08005029 	.word	0x08005029
 8004fdc:	08005029 	.word	0x08005029
 8004fe0:	08005029 	.word	0x08005029
 8004fe4:	08004fff 	.word	0x08004fff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fe8:	f7fe fb40 	bl	800366c <HAL_RCC_GetPCLK1Freq>
 8004fec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fee:	e021      	b.n	8005034 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ff0:	4b0c      	ldr	r3, [pc, #48]	; (8005024 <UART_SetConfig+0x2f8>)
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ff4:	e01e      	b.n	8005034 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ff6:	f7fe facb 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 8004ffa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ffc:	e01a      	b.n	8005034 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005002:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005004:	e016      	b.n	8005034 <UART_SetConfig+0x308>
 8005006:	bf00      	nop
 8005008:	cfff69f3 	.word	0xcfff69f3
 800500c:	40008000 	.word	0x40008000
 8005010:	40013800 	.word	0x40013800
 8005014:	40021000 	.word	0x40021000
 8005018:	40004400 	.word	0x40004400
 800501c:	40004800 	.word	0x40004800
 8005020:	40004c00 	.word	0x40004c00
 8005024:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005028:	2300      	movs	r3, #0
 800502a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005032:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	2b00      	cmp	r3, #0
 8005038:	f000 812a 	beq.w	8005290 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	4a9e      	ldr	r2, [pc, #632]	; (80052bc <UART_SetConfig+0x590>)
 8005042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005046:	461a      	mov	r2, r3
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	fbb3 f3f2 	udiv	r3, r3, r2
 800504e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	4613      	mov	r3, r2
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	4413      	add	r3, r2
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	429a      	cmp	r2, r3
 800505e:	d305      	bcc.n	800506c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	429a      	cmp	r2, r3
 800506a:	d903      	bls.n	8005074 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005072:	e10d      	b.n	8005290 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	2200      	movs	r2, #0
 8005078:	60bb      	str	r3, [r7, #8]
 800507a:	60fa      	str	r2, [r7, #12]
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	4a8e      	ldr	r2, [pc, #568]	; (80052bc <UART_SetConfig+0x590>)
 8005082:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005086:	b29b      	uxth	r3, r3
 8005088:	2200      	movs	r2, #0
 800508a:	603b      	str	r3, [r7, #0]
 800508c:	607a      	str	r2, [r7, #4]
 800508e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005092:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005096:	f7fb f8bf 	bl	8000218 <__aeabi_uldivmod>
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	4610      	mov	r0, r2
 80050a0:	4619      	mov	r1, r3
 80050a2:	f04f 0200 	mov.w	r2, #0
 80050a6:	f04f 0300 	mov.w	r3, #0
 80050aa:	020b      	lsls	r3, r1, #8
 80050ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80050b0:	0202      	lsls	r2, r0, #8
 80050b2:	6979      	ldr	r1, [r7, #20]
 80050b4:	6849      	ldr	r1, [r1, #4]
 80050b6:	0849      	lsrs	r1, r1, #1
 80050b8:	2000      	movs	r0, #0
 80050ba:	460c      	mov	r4, r1
 80050bc:	4605      	mov	r5, r0
 80050be:	eb12 0804 	adds.w	r8, r2, r4
 80050c2:	eb43 0905 	adc.w	r9, r3, r5
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	469a      	mov	sl, r3
 80050ce:	4693      	mov	fp, r2
 80050d0:	4652      	mov	r2, sl
 80050d2:	465b      	mov	r3, fp
 80050d4:	4640      	mov	r0, r8
 80050d6:	4649      	mov	r1, r9
 80050d8:	f7fb f89e 	bl	8000218 <__aeabi_uldivmod>
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	4613      	mov	r3, r2
 80050e2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ea:	d308      	bcc.n	80050fe <UART_SetConfig+0x3d2>
 80050ec:	6a3b      	ldr	r3, [r7, #32]
 80050ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050f2:	d204      	bcs.n	80050fe <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6a3a      	ldr	r2, [r7, #32]
 80050fa:	60da      	str	r2, [r3, #12]
 80050fc:	e0c8      	b.n	8005290 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005104:	e0c4      	b.n	8005290 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800510e:	d167      	bne.n	80051e0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005110:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005114:	2b08      	cmp	r3, #8
 8005116:	d828      	bhi.n	800516a <UART_SetConfig+0x43e>
 8005118:	a201      	add	r2, pc, #4	; (adr r2, 8005120 <UART_SetConfig+0x3f4>)
 800511a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511e:	bf00      	nop
 8005120:	08005145 	.word	0x08005145
 8005124:	0800514d 	.word	0x0800514d
 8005128:	08005155 	.word	0x08005155
 800512c:	0800516b 	.word	0x0800516b
 8005130:	0800515b 	.word	0x0800515b
 8005134:	0800516b 	.word	0x0800516b
 8005138:	0800516b 	.word	0x0800516b
 800513c:	0800516b 	.word	0x0800516b
 8005140:	08005163 	.word	0x08005163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005144:	f7fe fa92 	bl	800366c <HAL_RCC_GetPCLK1Freq>
 8005148:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800514a:	e014      	b.n	8005176 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800514c:	f7fe faa4 	bl	8003698 <HAL_RCC_GetPCLK2Freq>
 8005150:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005152:	e010      	b.n	8005176 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005154:	4b5a      	ldr	r3, [pc, #360]	; (80052c0 <UART_SetConfig+0x594>)
 8005156:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005158:	e00d      	b.n	8005176 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800515a:	f7fe fa19 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 800515e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005160:	e009      	b.n	8005176 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005166:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005168:	e005      	b.n	8005176 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005174:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 8089 	beq.w	8005290 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	4a4e      	ldr	r2, [pc, #312]	; (80052bc <UART_SetConfig+0x590>)
 8005184:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005188:	461a      	mov	r2, r3
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005190:	005a      	lsls	r2, r3, #1
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	085b      	lsrs	r3, r3, #1
 8005198:	441a      	add	r2, r3
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	2b0f      	cmp	r3, #15
 80051a8:	d916      	bls.n	80051d8 <UART_SetConfig+0x4ac>
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051b0:	d212      	bcs.n	80051d8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	f023 030f 	bic.w	r3, r3, #15
 80051ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	085b      	lsrs	r3, r3, #1
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	8bfb      	ldrh	r3, [r7, #30]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	8bfa      	ldrh	r2, [r7, #30]
 80051d4:	60da      	str	r2, [r3, #12]
 80051d6:	e05b      	b.n	8005290 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80051de:	e057      	b.n	8005290 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d828      	bhi.n	800523a <UART_SetConfig+0x50e>
 80051e8:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <UART_SetConfig+0x4c4>)
 80051ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ee:	bf00      	nop
 80051f0:	08005215 	.word	0x08005215
 80051f4:	0800521d 	.word	0x0800521d
 80051f8:	08005225 	.word	0x08005225
 80051fc:	0800523b 	.word	0x0800523b
 8005200:	0800522b 	.word	0x0800522b
 8005204:	0800523b 	.word	0x0800523b
 8005208:	0800523b 	.word	0x0800523b
 800520c:	0800523b 	.word	0x0800523b
 8005210:	08005233 	.word	0x08005233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005214:	f7fe fa2a 	bl	800366c <HAL_RCC_GetPCLK1Freq>
 8005218:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800521a:	e014      	b.n	8005246 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800521c:	f7fe fa3c 	bl	8003698 <HAL_RCC_GetPCLK2Freq>
 8005220:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005222:	e010      	b.n	8005246 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005224:	4b26      	ldr	r3, [pc, #152]	; (80052c0 <UART_SetConfig+0x594>)
 8005226:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005228:	e00d      	b.n	8005246 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800522a:	f7fe f9b1 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 800522e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005230:	e009      	b.n	8005246 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005236:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005238:	e005      	b.n	8005246 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005244:	bf00      	nop
    }

    if (pclk != 0U)
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	2b00      	cmp	r3, #0
 800524a:	d021      	beq.n	8005290 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	4a1a      	ldr	r2, [pc, #104]	; (80052bc <UART_SetConfig+0x590>)
 8005252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005256:	461a      	mov	r2, r3
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	fbb3 f2f2 	udiv	r2, r3, r2
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	085b      	lsrs	r3, r3, #1
 8005264:	441a      	add	r2, r3
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	fbb2 f3f3 	udiv	r3, r2, r3
 800526e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	2b0f      	cmp	r3, #15
 8005274:	d909      	bls.n	800528a <UART_SetConfig+0x55e>
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800527c:	d205      	bcs.n	800528a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	b29a      	uxth	r2, r3
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	60da      	str	r2, [r3, #12]
 8005288:	e002      	b.n	8005290 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2201      	movs	r2, #1
 8005294:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2201      	movs	r2, #1
 800529c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	2200      	movs	r2, #0
 80052a4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2200      	movs	r2, #0
 80052aa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80052ac:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3730      	adds	r7, #48	; 0x30
 80052b4:	46bd      	mov	sp, r7
 80052b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052ba:	bf00      	nop
 80052bc:	08005990 	.word	0x08005990
 80052c0:	00f42400 	.word	0x00f42400

080052c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d0:	f003 0308 	and.w	r3, r3, #8
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00a      	beq.n	80052ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005336:	f003 0304 	and.w	r3, r3, #4
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005358:	f003 0310 	and.w	r3, r3, #16
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00a      	beq.n	8005376 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d01a      	beq.n	80053da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053c2:	d10a      	bne.n	80053da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	605a      	str	r2, [r3, #4]
  }
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b098      	sub	sp, #96	; 0x60
 800540c:	af02      	add	r7, sp, #8
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005418:	f7fc f800 	bl	800141c <HAL_GetTick>
 800541c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0308 	and.w	r3, r3, #8
 8005428:	2b08      	cmp	r3, #8
 800542a:	d12f      	bne.n	800548c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800542c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005434:	2200      	movs	r2, #0
 8005436:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f88e 	bl	800555c <UART_WaitOnFlagUntilTimeout>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d022      	beq.n	800548c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544e:	e853 3f00 	ldrex	r3, [r3]
 8005452:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005456:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800545a:	653b      	str	r3, [r7, #80]	; 0x50
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	461a      	mov	r2, r3
 8005462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005464:	647b      	str	r3, [r7, #68]	; 0x44
 8005466:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005468:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800546a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800546c:	e841 2300 	strex	r3, r2, [r1]
 8005470:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1e6      	bne.n	8005446 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2220      	movs	r2, #32
 800547c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e063      	b.n	8005554 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0304 	and.w	r3, r3, #4
 8005496:	2b04      	cmp	r3, #4
 8005498:	d149      	bne.n	800552e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800549a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054a2:	2200      	movs	r2, #0
 80054a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f857 	bl	800555c <UART_WaitOnFlagUntilTimeout>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d03c      	beq.n	800552e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	e853 3f00 	ldrex	r3, [r3]
 80054c0:	623b      	str	r3, [r7, #32]
   return(result);
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	461a      	mov	r2, r3
 80054d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054d2:	633b      	str	r3, [r7, #48]	; 0x30
 80054d4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054da:	e841 2300 	strex	r3, r2, [r1]
 80054de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1e6      	bne.n	80054b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3308      	adds	r3, #8
 80054ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	e853 3f00 	ldrex	r3, [r3]
 80054f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f023 0301 	bic.w	r3, r3, #1
 80054fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	3308      	adds	r3, #8
 8005504:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005506:	61fa      	str	r2, [r7, #28]
 8005508:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550a:	69b9      	ldr	r1, [r7, #24]
 800550c:	69fa      	ldr	r2, [r7, #28]
 800550e:	e841 2300 	strex	r3, r2, [r1]
 8005512:	617b      	str	r3, [r7, #20]
   return(result);
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1e5      	bne.n	80054e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2220      	movs	r2, #32
 800551e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e012      	b.n	8005554 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2220      	movs	r2, #32
 8005532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2220      	movs	r2, #32
 800553a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3758      	adds	r7, #88	; 0x58
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	4613      	mov	r3, r2
 800556a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800556c:	e04f      	b.n	800560e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005574:	d04b      	beq.n	800560e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005576:	f7fb ff51 	bl	800141c <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	429a      	cmp	r2, r3
 8005584:	d302      	bcc.n	800558c <UART_WaitOnFlagUntilTimeout+0x30>
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e04e      	b.n	800562e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b00      	cmp	r3, #0
 800559c:	d037      	beq.n	800560e <UART_WaitOnFlagUntilTimeout+0xb2>
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2b80      	cmp	r3, #128	; 0x80
 80055a2:	d034      	beq.n	800560e <UART_WaitOnFlagUntilTimeout+0xb2>
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b40      	cmp	r3, #64	; 0x40
 80055a8:	d031      	beq.n	800560e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d110      	bne.n	80055da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2208      	movs	r2, #8
 80055be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 f838 	bl	8005636 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2208      	movs	r2, #8
 80055ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e029      	b.n	800562e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055e8:	d111      	bne.n	800560e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 f81e 	bl	8005636 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2220      	movs	r2, #32
 80055fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e00f      	b.n	800562e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	69da      	ldr	r2, [r3, #28]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	4013      	ands	r3, r2
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	429a      	cmp	r2, r3
 800561c:	bf0c      	ite	eq
 800561e:	2301      	moveq	r3, #1
 8005620:	2300      	movne	r3, #0
 8005622:	b2db      	uxtb	r3, r3
 8005624:	461a      	mov	r2, r3
 8005626:	79fb      	ldrb	r3, [r7, #7]
 8005628:	429a      	cmp	r2, r3
 800562a:	d0a0      	beq.n	800556e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005636:	b480      	push	{r7}
 8005638:	b095      	sub	sp, #84	; 0x54
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005646:	e853 3f00 	ldrex	r3, [r3]
 800564a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005652:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	461a      	mov	r2, r3
 800565a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800565c:	643b      	str	r3, [r7, #64]	; 0x40
 800565e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005660:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005662:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005664:	e841 2300 	strex	r3, r2, [r1]
 8005668:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800566a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1e6      	bne.n	800563e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	3308      	adds	r3, #8
 8005676:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	e853 3f00 	ldrex	r3, [r3]
 800567e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005686:	f023 0301 	bic.w	r3, r3, #1
 800568a:	64bb      	str	r3, [r7, #72]	; 0x48
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3308      	adds	r3, #8
 8005692:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005694:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005696:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005698:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800569a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800569c:	e841 2300 	strex	r3, r2, [r1]
 80056a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1e3      	bne.n	8005670 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d118      	bne.n	80056e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	f023 0310 	bic.w	r3, r3, #16
 80056c4:	647b      	str	r3, [r7, #68]	; 0x44
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ce:	61bb      	str	r3, [r7, #24]
 80056d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	6979      	ldr	r1, [r7, #20]
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	613b      	str	r3, [r7, #16]
   return(result);
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e6      	bne.n	80056b0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80056f6:	bf00      	nop
 80056f8:	3754      	adds	r7, #84	; 0x54
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005702:	b480      	push	{r7}
 8005704:	b085      	sub	sp, #20
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005710:	2b01      	cmp	r3, #1
 8005712:	d101      	bne.n	8005718 <HAL_UARTEx_DisableFifoMode+0x16>
 8005714:	2302      	movs	r3, #2
 8005716:	e027      	b.n	8005768 <HAL_UARTEx_DisableFifoMode+0x66>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2224      	movs	r2, #36	; 0x24
 8005724:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 0201 	bic.w	r2, r2, #1
 800573e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005746:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2220      	movs	r2, #32
 800575a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3714      	adds	r7, #20
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005784:	2b01      	cmp	r3, #1
 8005786:	d101      	bne.n	800578c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005788:	2302      	movs	r3, #2
 800578a:	e02d      	b.n	80057e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2224      	movs	r2, #36	; 0x24
 8005798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 0201 	bic.w	r2, r2, #1
 80057b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f84f 	bl	800586c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2220      	movs	r2, #32
 80057da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005804:	2302      	movs	r3, #2
 8005806:	e02d      	b.n	8005864 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2224      	movs	r2, #36	; 0x24
 8005814:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0201 	bic.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	430a      	orrs	r2, r1
 8005842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f811 	bl	800586c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2220      	movs	r2, #32
 8005856:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005878:	2b00      	cmp	r3, #0
 800587a:	d108      	bne.n	800588e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800588c:	e031      	b.n	80058f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800588e:	2308      	movs	r3, #8
 8005890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005892:	2308      	movs	r3, #8
 8005894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	0e5b      	lsrs	r3, r3, #25
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	0f5b      	lsrs	r3, r3, #29
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	f003 0307 	and.w	r3, r3, #7
 80058b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058b6:	7bbb      	ldrb	r3, [r7, #14]
 80058b8:	7b3a      	ldrb	r2, [r7, #12]
 80058ba:	4911      	ldr	r1, [pc, #68]	; (8005900 <UARTEx_SetNbDataToProcess+0x94>)
 80058bc:	5c8a      	ldrb	r2, [r1, r2]
 80058be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80058c2:	7b3a      	ldrb	r2, [r7, #12]
 80058c4:	490f      	ldr	r1, [pc, #60]	; (8005904 <UARTEx_SetNbDataToProcess+0x98>)
 80058c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
 80058d6:	7b7a      	ldrb	r2, [r7, #13]
 80058d8:	4909      	ldr	r1, [pc, #36]	; (8005900 <UARTEx_SetNbDataToProcess+0x94>)
 80058da:	5c8a      	ldrb	r2, [r1, r2]
 80058dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80058e0:	7b7a      	ldrb	r2, [r7, #13]
 80058e2:	4908      	ldr	r1, [pc, #32]	; (8005904 <UARTEx_SetNbDataToProcess+0x98>)
 80058e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80058f2:	bf00      	nop
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	080059a8 	.word	0x080059a8
 8005904:	080059b0 	.word	0x080059b0

08005908 <memset>:
 8005908:	4402      	add	r2, r0
 800590a:	4603      	mov	r3, r0
 800590c:	4293      	cmp	r3, r2
 800590e:	d100      	bne.n	8005912 <memset+0xa>
 8005910:	4770      	bx	lr
 8005912:	f803 1b01 	strb.w	r1, [r3], #1
 8005916:	e7f9      	b.n	800590c <memset+0x4>

08005918 <__libc_init_array>:
 8005918:	b570      	push	{r4, r5, r6, lr}
 800591a:	4d0d      	ldr	r5, [pc, #52]	; (8005950 <__libc_init_array+0x38>)
 800591c:	4c0d      	ldr	r4, [pc, #52]	; (8005954 <__libc_init_array+0x3c>)
 800591e:	1b64      	subs	r4, r4, r5
 8005920:	10a4      	asrs	r4, r4, #2
 8005922:	2600      	movs	r6, #0
 8005924:	42a6      	cmp	r6, r4
 8005926:	d109      	bne.n	800593c <__libc_init_array+0x24>
 8005928:	4d0b      	ldr	r5, [pc, #44]	; (8005958 <__libc_init_array+0x40>)
 800592a:	4c0c      	ldr	r4, [pc, #48]	; (800595c <__libc_init_array+0x44>)
 800592c:	f000 f818 	bl	8005960 <_init>
 8005930:	1b64      	subs	r4, r4, r5
 8005932:	10a4      	asrs	r4, r4, #2
 8005934:	2600      	movs	r6, #0
 8005936:	42a6      	cmp	r6, r4
 8005938:	d105      	bne.n	8005946 <__libc_init_array+0x2e>
 800593a:	bd70      	pop	{r4, r5, r6, pc}
 800593c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005940:	4798      	blx	r3
 8005942:	3601      	adds	r6, #1
 8005944:	e7ee      	b.n	8005924 <__libc_init_array+0xc>
 8005946:	f855 3b04 	ldr.w	r3, [r5], #4
 800594a:	4798      	blx	r3
 800594c:	3601      	adds	r6, #1
 800594e:	e7f2      	b.n	8005936 <__libc_init_array+0x1e>
 8005950:	080059c0 	.word	0x080059c0
 8005954:	080059c0 	.word	0x080059c0
 8005958:	080059c0 	.word	0x080059c0
 800595c:	080059c4 	.word	0x080059c4

08005960 <_init>:
 8005960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005962:	bf00      	nop
 8005964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005966:	bc08      	pop	{r3}
 8005968:	469e      	mov	lr, r3
 800596a:	4770      	bx	lr

0800596c <_fini>:
 800596c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596e:	bf00      	nop
 8005970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005972:	bc08      	pop	{r3}
 8005974:	469e      	mov	lr, r3
 8005976:	4770      	bx	lr
