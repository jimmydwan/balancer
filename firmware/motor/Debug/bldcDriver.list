
bldcDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bc0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006d98  08006d98  00007d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dd8  08006dd8  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006dd8  08006dd8  00007dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006de0  08006de0  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006de0  08006de0  00007de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006de4  08006de4  00007de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006de8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  2000000c  08006df4  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08006df4  00008500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc3f  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a58  00000000  00000000  00024c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a18  00000000  00000000  000286d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001461  00000000  00000000  0002a0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021966  00000000  00000000  0002b551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000214ee  00000000  00000000  0004ceb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dcd8c  00000000  00000000  0006e3a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014b131  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fd0  00000000  00000000  0014b174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00152144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006d80 	.word	0x08006d80

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006d80 	.word	0x08006d80

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b092      	sub	sp, #72	@ 0x48
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800050e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800051a:	463b      	mov	r3, r7
 800051c:	223c      	movs	r2, #60	@ 0x3c
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f006 fc01 	bl	8006d28 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000526:	4b3f      	ldr	r3, [pc, #252]	@ (8000624 <MX_ADC1_Init+0x11c>)
 8000528:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800052c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800052e:	4b3d      	ldr	r3, [pc, #244]	@ (8000624 <MX_ADC1_Init+0x11c>)
 8000530:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000534:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000536:	4b3b      	ldr	r3, [pc, #236]	@ (8000624 <MX_ADC1_Init+0x11c>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800053c:	4b39      	ldr	r3, [pc, #228]	@ (8000624 <MX_ADC1_Init+0x11c>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000542:	4b38      	ldr	r3, [pc, #224]	@ (8000624 <MX_ADC1_Init+0x11c>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000548:	4b36      	ldr	r3, [pc, #216]	@ (8000624 <MX_ADC1_Init+0x11c>)
 800054a:	2201      	movs	r2, #1
 800054c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800054e:	4b35      	ldr	r3, [pc, #212]	@ (8000624 <MX_ADC1_Init+0x11c>)
 8000550:	2204      	movs	r2, #4
 8000552:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000554:	4b33      	ldr	r3, [pc, #204]	@ (8000624 <MX_ADC1_Init+0x11c>)
 8000556:	2200      	movs	r2, #0
 8000558:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800055a:	4b32      	ldr	r3, [pc, #200]	@ (8000624 <MX_ADC1_Init+0x11c>)
 800055c:	2200      	movs	r2, #0
 800055e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000560:	4b30      	ldr	r3, [pc, #192]	@ (8000624 <MX_ADC1_Init+0x11c>)
 8000562:	2201      	movs	r2, #1
 8000564:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000566:	4b2f      	ldr	r3, [pc, #188]	@ (8000624 <MX_ADC1_Init+0x11c>)
 8000568:	2200      	movs	r2, #0
 800056a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800056e:	4b2d      	ldr	r3, [pc, #180]	@ (8000624 <MX_ADC1_Init+0x11c>)
 8000570:	2200      	movs	r2, #0
 8000572:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000576:	4b2b      	ldr	r3, [pc, #172]	@ (8000624 <MX_ADC1_Init+0x11c>)
 8000578:	2200      	movs	r2, #0
 800057a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800057c:	4b29      	ldr	r3, [pc, #164]	@ (8000624 <MX_ADC1_Init+0x11c>)
 800057e:	2200      	movs	r2, #0
 8000580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000584:	4827      	ldr	r0, [pc, #156]	@ (8000624 <MX_ADC1_Init+0x11c>)
 8000586:	f001 fb39 	bl	8001bfc <HAL_ADC_Init>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000590:	f000 fb71 	bl	8000c76 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000594:	2300      	movs	r3, #0
 8000596:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000598:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800059c:	4619      	mov	r1, r3
 800059e:	4821      	ldr	r0, [pc, #132]	@ (8000624 <MX_ADC1_Init+0x11c>)
 80005a0:	f002 feca 	bl	8003338 <HAL_ADCEx_MultiModeConfigChannel>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80005aa:	f000 fb64 	bl	8000c76 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 80005ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000628 <MX_ADC1_Init+0x120>)
 80005b0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80005b2:	2309      	movs	r3, #9
 80005b4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80005b6:	2301      	movs	r3, #1
 80005b8:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80005ba:	237f      	movs	r3, #127	@ 0x7f
 80005bc:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80005be:	2304      	movs	r3, #4
 80005c0:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80005ca:	2300      	movs	r3, #0
 80005cc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 80005d0:	2300      	movs	r3, #0
 80005d2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 80005d6:	2300      	movs	r3, #0
 80005d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T8_CC4;
 80005dc:	239c      	movs	r3, #156	@ 0x9c
 80005de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80005e0:	2380      	movs	r3, #128	@ 0x80
 80005e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80005e4:	2300      	movs	r3, #0
 80005e6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80005ea:	463b      	mov	r3, r7
 80005ec:	4619      	mov	r1, r3
 80005ee:	480d      	ldr	r0, [pc, #52]	@ (8000624 <MX_ADC1_Init+0x11c>)
 80005f0:	f002 f9c2 	bl	8002978 <HAL_ADCEx_InjectedConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80005fa:	f000 fb3c 	bl	8000c76 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 80005fe:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <MX_ADC1_Init+0x124>)
 8000600:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000602:	f240 130f 	movw	r3, #271	@ 0x10f
 8000606:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000608:	463b      	mov	r3, r7
 800060a:	4619      	mov	r1, r3
 800060c:	4805      	ldr	r0, [pc, #20]	@ (8000624 <MX_ADC1_Init+0x11c>)
 800060e:	f002 f9b3 	bl	8002978 <HAL_ADCEx_InjectedConfigChannel>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8000618:	f000 fb2d 	bl	8000c76 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800061c:	bf00      	nop
 800061e:	3748      	adds	r7, #72	@ 0x48
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000028 	.word	0x20000028
 8000628:	14f00020 	.word	0x14f00020
 800062c:	2e300800 	.word	0x2e300800

08000630 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b098      	sub	sp, #96	@ 0x60
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000636:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800063a:	2220      	movs	r2, #32
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f006 fb72 	bl	8006d28 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	223c      	movs	r2, #60	@ 0x3c
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f006 fb6c 	bl	8006d28 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000650:	4b46      	ldr	r3, [pc, #280]	@ (800076c <MX_ADC2_Init+0x13c>)
 8000652:	4a47      	ldr	r2, [pc, #284]	@ (8000770 <MX_ADC2_Init+0x140>)
 8000654:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000656:	4b45      	ldr	r3, [pc, #276]	@ (800076c <MX_ADC2_Init+0x13c>)
 8000658:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800065c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800065e:	4b43      	ldr	r3, [pc, #268]	@ (800076c <MX_ADC2_Init+0x13c>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000664:	4b41      	ldr	r3, [pc, #260]	@ (800076c <MX_ADC2_Init+0x13c>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800066a:	4b40      	ldr	r3, [pc, #256]	@ (800076c <MX_ADC2_Init+0x13c>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000670:	4b3e      	ldr	r3, [pc, #248]	@ (800076c <MX_ADC2_Init+0x13c>)
 8000672:	2201      	movs	r2, #1
 8000674:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000676:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <MX_ADC2_Init+0x13c>)
 8000678:	2204      	movs	r2, #4
 800067a:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800067c:	4b3b      	ldr	r3, [pc, #236]	@ (800076c <MX_ADC2_Init+0x13c>)
 800067e:	2200      	movs	r2, #0
 8000680:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000682:	4b3a      	ldr	r3, [pc, #232]	@ (800076c <MX_ADC2_Init+0x13c>)
 8000684:	2200      	movs	r2, #0
 8000686:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000688:	4b38      	ldr	r3, [pc, #224]	@ (800076c <MX_ADC2_Init+0x13c>)
 800068a:	2201      	movs	r2, #1
 800068c:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800068e:	4b37      	ldr	r3, [pc, #220]	@ (800076c <MX_ADC2_Init+0x13c>)
 8000690:	2200      	movs	r2, #0
 8000692:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000696:	4b35      	ldr	r3, [pc, #212]	@ (800076c <MX_ADC2_Init+0x13c>)
 8000698:	2200      	movs	r2, #0
 800069a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800069c:	4b33      	ldr	r3, [pc, #204]	@ (800076c <MX_ADC2_Init+0x13c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006a2:	4b32      	ldr	r3, [pc, #200]	@ (800076c <MX_ADC2_Init+0x13c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006aa:	4b30      	ldr	r3, [pc, #192]	@ (800076c <MX_ADC2_Init+0x13c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80006b0:	4b2e      	ldr	r3, [pc, #184]	@ (800076c <MX_ADC2_Init+0x13c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006b8:	482c      	ldr	r0, [pc, #176]	@ (800076c <MX_ADC2_Init+0x13c>)
 80006ba:	f001 fa9f 	bl	8001bfc <HAL_ADC_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ADC2_Init+0x98>
  {
    Error_Handler();
 80006c4:	f000 fad7 	bl	8000c76 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80006c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000774 <MX_ADC2_Init+0x144>)
 80006ca:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006cc:	2306      	movs	r3, #6
 80006ce:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006d0:	2300      	movs	r3, #0
 80006d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006d4:	237f      	movs	r3, #127	@ 0x7f
 80006d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006d8:	2304      	movs	r3, #4
 80006da:	653b      	str	r3, [r7, #80]	@ 0x50
  sConfig.Offset = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006e4:	4619      	mov	r1, r3
 80006e6:	4821      	ldr	r0, [pc, #132]	@ (800076c <MX_ADC2_Init+0x13c>)
 80006e8:	f001 fc0c 	bl	8001f04 <HAL_ADC_ConfigChannel>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 80006f2:	f000 fac0 	bl	8000c76 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 80006f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000774 <MX_ADC2_Init+0x144>)
 80006f8:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80006fa:	2309      	movs	r3, #9
 80006fc:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80006fe:	2301      	movs	r3, #1
 8000700:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000702:	237f      	movs	r3, #127	@ 0x7f
 8000704:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000706:	2304      	movs	r3, #4
 8000708:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800070e:	2302      	movs	r3, #2
 8000710:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000712:	2300      	movs	r3, #0
 8000714:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000718:	2300      	movs	r3, #0
 800071a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 800071e:	2300      	movs	r3, #0
 8000720:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000724:	2384      	movs	r3, #132	@ 0x84
 8000726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000728:	2380      	movs	r3, #128	@ 0x80
 800072a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	4619      	mov	r1, r3
 8000736:	480d      	ldr	r0, [pc, #52]	@ (800076c <MX_ADC2_Init+0x13c>)
 8000738:	f002 f91e 	bl	8002978 <HAL_ADCEx_InjectedConfigChannel>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_ADC2_Init+0x116>
  {
    Error_Handler();
 8000742:	f000 fa98 	bl	8000c76 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000746:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_ADC2_Init+0x148>)
 8000748:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800074a:	f240 130f 	movw	r3, #271	@ 0x10f
 800074e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	4619      	mov	r1, r3
 8000754:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_ADC2_Init+0x13c>)
 8000756:	f002 f90f 	bl	8002978 <HAL_ADCEx_InjectedConfigChannel>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC2_Init+0x134>
  {
    Error_Handler();
 8000760:	f000 fa89 	bl	8000c76 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	3760      	adds	r7, #96	@ 0x60
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000094 	.word	0x20000094
 8000770:	50000100 	.word	0x50000100
 8000774:	3ef08000 	.word	0x3ef08000
 8000778:	32601000 	.word	0x32601000

0800077c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b09c      	sub	sp, #112	@ 0x70
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000794:	f107 0318 	add.w	r3, r7, #24
 8000798:	2244      	movs	r2, #68	@ 0x44
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f006 fac3 	bl	8006d28 <memset>
  if(adcHandle->Instance==ADC1)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80007aa:	d13e      	bne.n	800082a <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007b2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007b6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007b8:	f107 0318 	add.w	r3, r7, #24
 80007bc:	4618      	mov	r0, r3
 80007be:	f004 f9d7 	bl	8004b70 <HAL_RCCEx_PeriphCLKConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007c8:	f000 fa55 	bl	8000c76 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007cc:	4b3a      	ldr	r3, [pc, #232]	@ (80008b8 <HAL_ADC_MspInit+0x13c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	3301      	adds	r3, #1
 80007d2:	4a39      	ldr	r2, [pc, #228]	@ (80008b8 <HAL_ADC_MspInit+0x13c>)
 80007d4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007d6:	4b38      	ldr	r3, [pc, #224]	@ (80008b8 <HAL_ADC_MspInit+0x13c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d10b      	bne.n	80007f6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007de:	4b37      	ldr	r3, [pc, #220]	@ (80008bc <HAL_ADC_MspInit+0x140>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e2:	4a36      	ldr	r2, [pc, #216]	@ (80008bc <HAL_ADC_MspInit+0x140>)
 80007e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ea:	4b34      	ldr	r3, [pc, #208]	@ (80008bc <HAL_ADC_MspInit+0x140>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	4b31      	ldr	r3, [pc, #196]	@ (80008bc <HAL_ADC_MspInit+0x140>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fa:	4a30      	ldr	r2, [pc, #192]	@ (80008bc <HAL_ADC_MspInit+0x140>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000802:	4b2e      	ldr	r3, [pc, #184]	@ (80008bc <HAL_ADC_MspInit+0x140>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = M2_CS_B_Pin|M1_CS_A_Pin;
 800080e:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000812:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000814:	2303      	movs	r3, #3
 8000816:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000820:	4619      	mov	r1, r3
 8000822:	4827      	ldr	r0, [pc, #156]	@ (80008c0 <HAL_ADC_MspInit+0x144>)
 8000824:	f003 f8f6 	bl	8003a14 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000828:	e042      	b.n	80008b0 <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC2)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a25      	ldr	r2, [pc, #148]	@ (80008c4 <HAL_ADC_MspInit+0x148>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d13d      	bne.n	80008b0 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000834:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000838:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800083a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800083e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000840:	f107 0318 	add.w	r3, r7, #24
 8000844:	4618      	mov	r0, r3
 8000846:	f004 f993 	bl	8004b70 <HAL_RCCEx_PeriphCLKConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8000850:	f000 fa11 	bl	8000c76 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000854:	4b18      	ldr	r3, [pc, #96]	@ (80008b8 <HAL_ADC_MspInit+0x13c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	3301      	adds	r3, #1
 800085a:	4a17      	ldr	r2, [pc, #92]	@ (80008b8 <HAL_ADC_MspInit+0x13c>)
 800085c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800085e:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <HAL_ADC_MspInit+0x13c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d10b      	bne.n	800087e <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <HAL_ADC_MspInit+0x140>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086a:	4a14      	ldr	r2, [pc, #80]	@ (80008bc <HAL_ADC_MspInit+0x140>)
 800086c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000872:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <HAL_ADC_MspInit+0x140>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000876:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <HAL_ADC_MspInit+0x140>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	4a0e      	ldr	r2, [pc, #56]	@ (80008bc <HAL_ADC_MspInit+0x140>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088a:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <HAL_ADC_MspInit+0x140>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M2_CS_A_Pin|M1_CS_B_Pin;
 8000896:	f248 0304 	movw	r3, #32772	@ 0x8004
 800089a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800089c:	2303      	movs	r3, #3
 800089e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80008a8:	4619      	mov	r1, r3
 80008aa:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <HAL_ADC_MspInit+0x144>)
 80008ac:	f003 f8b2 	bl	8003a14 <HAL_GPIO_Init>
}
 80008b0:	bf00      	nop
 80008b2:	3770      	adds	r7, #112	@ 0x70
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000100 	.word	0x20000100
 80008bc:	40021000 	.word	0x40021000
 80008c0:	48000400 	.word	0x48000400
 80008c4:	50000100 	.word	0x50000100

080008c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000948 <MX_DMA_Init+0x80>)
 80008d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008d2:	4a1d      	ldr	r2, [pc, #116]	@ (8000948 <MX_DMA_Init+0x80>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80008da:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <MX_DMA_Init+0x80>)
 80008dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008e6:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <MX_DMA_Init+0x80>)
 80008e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008ea:	4a17      	ldr	r2, [pc, #92]	@ (8000948 <MX_DMA_Init+0x80>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6493      	str	r3, [r2, #72]	@ 0x48
 80008f2:	4b15      	ldr	r3, [pc, #84]	@ (8000948 <MX_DMA_Init+0x80>)
 80008f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	200b      	movs	r0, #11
 8000904:	f002 fe97 	bl	8003636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000908:	200b      	movs	r0, #11
 800090a:	f002 feae 	bl	800366a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2100      	movs	r1, #0
 8000912:	200c      	movs	r0, #12
 8000914:	f002 fe8f 	bl	8003636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000918:	200c      	movs	r0, #12
 800091a:	f002 fea6 	bl	800366a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	200d      	movs	r0, #13
 8000924:	f002 fe87 	bl	8003636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000928:	200d      	movs	r0, #13
 800092a:	f002 fe9e 	bl	800366a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	200e      	movs	r0, #14
 8000934:	f002 fe7f 	bl	8003636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000938:	200e      	movs	r0, #14
 800093a:	f002 fe96 	bl	800366a <HAL_NVIC_EnableIRQ>

}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40021000 	.word	0x40021000

0800094c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	@ 0x28
 8000950:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000962:	4b34      	ldr	r3, [pc, #208]	@ (8000a34 <MX_GPIO_Init+0xe8>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000966:	4a33      	ldr	r2, [pc, #204]	@ (8000a34 <MX_GPIO_Init+0xe8>)
 8000968:	f043 0320 	orr.w	r3, r3, #32
 800096c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800096e:	4b31      	ldr	r3, [pc, #196]	@ (8000a34 <MX_GPIO_Init+0xe8>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000972:	f003 0320 	and.w	r3, r3, #32
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b2e      	ldr	r3, [pc, #184]	@ (8000a34 <MX_GPIO_Init+0xe8>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097e:	4a2d      	ldr	r2, [pc, #180]	@ (8000a34 <MX_GPIO_Init+0xe8>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000986:	4b2b      	ldr	r3, [pc, #172]	@ (8000a34 <MX_GPIO_Init+0xe8>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000992:	4b28      	ldr	r3, [pc, #160]	@ (8000a34 <MX_GPIO_Init+0xe8>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000996:	4a27      	ldr	r2, [pc, #156]	@ (8000a34 <MX_GPIO_Init+0xe8>)
 8000998:	f043 0304 	orr.w	r3, r3, #4
 800099c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800099e:	4b25      	ldr	r3, [pc, #148]	@ (8000a34 <MX_GPIO_Init+0xe8>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a2:	f003 0304 	and.w	r3, r3, #4
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	4b22      	ldr	r3, [pc, #136]	@ (8000a34 <MX_GPIO_Init+0xe8>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ae:	4a21      	ldr	r2, [pc, #132]	@ (8000a34 <MX_GPIO_Init+0xe8>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a34 <MX_GPIO_Init+0xe8>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS2_GPIO_Port, NSS2_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2110      	movs	r1, #16
 80009c6:	481c      	ldr	r0, [pc, #112]	@ (8000a38 <MX_GPIO_Init+0xec>)
 80009c8:	f003 f9a6 	bl	8003d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS1_GPIO_Port, NSS1_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2108      	movs	r1, #8
 80009d0:	481a      	ldr	r0, [pc, #104]	@ (8000a3c <MX_GPIO_Init+0xf0>)
 80009d2:	f003 f9a1 	bl	8003d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009d6:	2310      	movs	r3, #16
 80009d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ee:	f003 f811 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS2_Pin;
 80009f2:	2310      	movs	r3, #16
 80009f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS2_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	480b      	ldr	r0, [pc, #44]	@ (8000a38 <MX_GPIO_Init+0xec>)
 8000a0a:	f003 f803 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS1_Pin;
 8000a0e:	2308      	movs	r3, #8
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS1_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	@ (8000a3c <MX_GPIO_Init+0xf0>)
 8000a26:	f002 fff5 	bl	8003a14 <HAL_GPIO_Init>

}
 8000a2a:	bf00      	nop
 8000a2c:	3728      	adds	r7, #40	@ 0x28
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40021000 	.word	0x40021000
 8000a38:	48000800 	.word	0x48000800
 8000a3c:	48000400 	.word	0x48000400

08000a40 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a46:	4a1c      	ldr	r2, [pc, #112]	@ (8000ab8 <MX_I2C1_Init+0x78>)
 8000a48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000abc <MX_I2C1_Init+0x7c>)
 8000a4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a50:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a56:	4b17      	ldr	r3, [pc, #92]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a62:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a68:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a7a:	480e      	ldr	r0, [pc, #56]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a7c:	f003 f964 	bl	8003d48 <HAL_I2C_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a86:	f000 f8f6 	bl	8000c76 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4809      	ldr	r0, [pc, #36]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a8e:	f003 f9f6 	bl	8003e7e <HAL_I2CEx_ConfigAnalogFilter>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a98:	f000 f8ed 	bl	8000c76 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4805      	ldr	r0, [pc, #20]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000aa0:	f003 fa38 	bl	8003f14 <HAL_I2CEx_ConfigDigitalFilter>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000aaa:	f000 f8e4 	bl	8000c76 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000104 	.word	0x20000104
 8000ab8:	40005400 	.word	0x40005400
 8000abc:	30909dec 	.word	0x30909dec

08000ac0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b09c      	sub	sp, #112	@ 0x70
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad8:	f107 0318 	add.w	r3, r7, #24
 8000adc:	2244      	movs	r2, #68	@ 0x44
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f006 f921 	bl	8006d28 <memset>
  if(i2cHandle->Instance==I2C1)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a2d      	ldr	r2, [pc, #180]	@ (8000ba0 <HAL_I2C_MspInit+0xe0>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d153      	bne.n	8000b98 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000af0:	2340      	movs	r3, #64	@ 0x40
 8000af2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af8:	f107 0318 	add.w	r3, r7, #24
 8000afc:	4618      	mov	r0, r3
 8000afe:	f004 f837 	bl	8004b70 <HAL_RCCEx_PeriphCLKConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b08:	f000 f8b5 	bl	8000c76 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0c:	4b25      	ldr	r3, [pc, #148]	@ (8000ba4 <HAL_I2C_MspInit+0xe4>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b10:	4a24      	ldr	r2, [pc, #144]	@ (8000ba4 <HAL_I2C_MspInit+0xe4>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b18:	4b22      	ldr	r3, [pc, #136]	@ (8000ba4 <HAL_I2C_MspInit+0xe4>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba4 <HAL_I2C_MspInit+0xe4>)
 8000b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b28:	4a1e      	ldr	r2, [pc, #120]	@ (8000ba4 <HAL_I2C_MspInit+0xe4>)
 8000b2a:	f043 0302 	orr.w	r3, r3, #2
 8000b2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b30:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba4 <HAL_I2C_MspInit+0xe4>)
 8000b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b40:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b42:	2312      	movs	r3, #18
 8000b44:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b4e:	2304      	movs	r3, #4
 8000b50:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b56:	4619      	mov	r1, r3
 8000b58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b5c:	f002 ff5a 	bl	8003a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b60:	2380      	movs	r3, #128	@ 0x80
 8000b62:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b64:	2312      	movs	r3, #18
 8000b66:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b70:	2304      	movs	r3, #4
 8000b72:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b74:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b78:	4619      	mov	r1, r3
 8000b7a:	480b      	ldr	r0, [pc, #44]	@ (8000ba8 <HAL_I2C_MspInit+0xe8>)
 8000b7c:	f002 ff4a 	bl	8003a14 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b80:	4b08      	ldr	r3, [pc, #32]	@ (8000ba4 <HAL_I2C_MspInit+0xe4>)
 8000b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b84:	4a07      	ldr	r2, [pc, #28]	@ (8000ba4 <HAL_I2C_MspInit+0xe4>)
 8000b86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ba4 <HAL_I2C_MspInit+0xe4>)
 8000b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b98:	bf00      	nop
 8000b9a:	3770      	adds	r7, #112	@ 0x70
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40005400 	.word	0x40005400
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	48000400 	.word	0x48000400

08000bac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb0:	f000 fddd 	bl	800176e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb4:	f000 f816 	bl	8000be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb8:	f7ff fec8 	bl	800094c <MX_GPIO_Init>
  MX_DMA_Init();
 8000bbc:	f7ff fe84 	bl	80008c8 <MX_DMA_Init>
  MX_I2C1_Init();
 8000bc0:	f7ff ff3e 	bl	8000a40 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000bc4:	f000 f85e 	bl	8000c84 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000bc8:	f000 f96a 	bl	8000ea0 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000bcc:	f000 fa42 	bl	8001054 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8000bd0:	f000 fbbc 	bl	800134c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000bd4:	f000 fc06 	bl	80013e4 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000bd8:	f7ff fc96 	bl	8000508 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000bdc:	f7ff fd28 	bl	8000630 <MX_ADC2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <main+0x34>

08000be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b094      	sub	sp, #80	@ 0x50
 8000be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bea:	f107 0318 	add.w	r3, r7, #24
 8000bee:	2238      	movs	r2, #56	@ 0x38
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f006 f898 	bl	8006d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c06:	2000      	movs	r0, #0
 8000c08:	f003 f9d0 	bl	8003fac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c14:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c16:	2302      	movs	r3, #2
 8000c18:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000c1e:	2306      	movs	r3, #6
 8000c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000c22:	2350      	movs	r3, #80	@ 0x50
 8000c24:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c26:	2302      	movs	r3, #2
 8000c28:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c32:	f107 0318 	add.w	r3, r7, #24
 8000c36:	4618      	mov	r0, r3
 8000c38:	f003 fa6c 	bl	8004114 <HAL_RCC_OscConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000c42:	f000 f818 	bl	8000c76 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c46:	230f      	movs	r3, #15
 8000c48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2104      	movs	r1, #4
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f003 fd6a 	bl	8004738 <HAL_RCC_ClockConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000c6a:	f000 f804 	bl	8000c76 <Error_Handler>
  }
}
 8000c6e:	bf00      	nop
 8000c70:	3750      	adds	r7, #80	@ 0x50
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7a:	b672      	cpsid	i
}
 8000c7c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c7e:	bf00      	nop
 8000c80:	e7fd      	b.n	8000c7e <Error_Handler+0x8>
	...

08000c84 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf8 <MX_SPI1_Init+0x74>)
 8000c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cfc <MX_SPI1_Init+0x78>)
 8000c8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf8 <MX_SPI1_Init+0x74>)
 8000c90:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c96:	4b18      	ldr	r3, [pc, #96]	@ (8000cf8 <MX_SPI1_Init+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000c9c:	4b16      	ldr	r3, [pc, #88]	@ (8000cf8 <MX_SPI1_Init+0x74>)
 8000c9e:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000ca2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <MX_SPI1_Init+0x74>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000caa:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <MX_SPI1_Init+0x74>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <MX_SPI1_Init+0x74>)
 8000cb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cb6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf8 <MX_SPI1_Init+0x74>)
 8000cba:	2218      	movs	r2, #24
 8000cbc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <MX_SPI1_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <MX_SPI1_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf8 <MX_SPI1_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	@ (8000cf8 <MX_SPI1_Init+0x74>)
 8000cd2:	2207      	movs	r2, #7
 8000cd4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <MX_SPI1_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <MX_SPI1_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ce2:	4805      	ldr	r0, [pc, #20]	@ (8000cf8 <MX_SPI1_Init+0x74>)
 8000ce4:	f004 f934 	bl	8004f50 <HAL_SPI_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cee:	f7ff ffc2 	bl	8000c76 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000158 	.word	0x20000158
 8000cfc:	40013000 	.word	0x40013000

08000d00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	@ 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a17      	ldr	r2, [pc, #92]	@ (8000d7c <HAL_SPI_MspInit+0x7c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d128      	bne.n	8000d74 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d22:	4b17      	ldr	r3, [pc, #92]	@ (8000d80 <HAL_SPI_MspInit+0x80>)
 8000d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d26:	4a16      	ldr	r2, [pc, #88]	@ (8000d80 <HAL_SPI_MspInit+0x80>)
 8000d28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d2e:	4b14      	ldr	r3, [pc, #80]	@ (8000d80 <HAL_SPI_MspInit+0x80>)
 8000d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <HAL_SPI_MspInit+0x80>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3e:	4a10      	ldr	r2, [pc, #64]	@ (8000d80 <HAL_SPI_MspInit+0x80>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d46:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <HAL_SPI_MspInit+0x80>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d52:	23e0      	movs	r3, #224	@ 0xe0
 8000d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d62:	2305      	movs	r3, #5
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d70:	f002 fe50 	bl	8003a14 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d74:	bf00      	nop
 8000d76:	3728      	adds	r7, #40	@ 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40013000 	.word	0x40013000
 8000d80:	40021000 	.word	0x40021000

08000d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc8 <HAL_MspInit+0x44>)
 8000d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc8 <HAL_MspInit+0x44>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d96:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc8 <HAL_MspInit+0x44>)
 8000d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da2:	4b09      	ldr	r3, [pc, #36]	@ (8000dc8 <HAL_MspInit+0x44>)
 8000da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da6:	4a08      	ldr	r2, [pc, #32]	@ (8000dc8 <HAL_MspInit+0x44>)
 8000da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dac:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dae:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <HAL_MspInit+0x44>)
 8000db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000dba:	f003 f99b 	bl	80040f4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40021000 	.word	0x40021000

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <HardFault_Handler+0x4>

08000ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <MemManage_Handler+0x4>

08000de4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <BusFault_Handler+0x4>

08000dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <UsageFault_Handler+0x4>

08000df4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e22:	f000 fcf7 	bl	8001814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000e30:	4802      	ldr	r0, [pc, #8]	@ (8000e3c <DMA1_Channel1_IRQHandler+0x10>)
 8000e32:	f002 fcdd 	bl	80037f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	2000043c 	.word	0x2000043c

08000e40 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000e44:	4802      	ldr	r0, [pc, #8]	@ (8000e50 <DMA1_Channel2_IRQHandler+0x10>)
 8000e46:	f002 fcd3 	bl	80037f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2000049c 	.word	0x2000049c

08000e54 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e58:	4802      	ldr	r0, [pc, #8]	@ (8000e64 <DMA1_Channel3_IRQHandler+0x10>)
 8000e5a:	f002 fcc9 	bl	80037f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	2000037c 	.word	0x2000037c

08000e68 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000e6c:	4802      	ldr	r0, [pc, #8]	@ (8000e78 <DMA1_Channel4_IRQHandler+0x10>)
 8000e6e:	f002 fcbf 	bl	80037f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200003dc 	.word	0x200003dc

08000e7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e80:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <SystemInit+0x20>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e86:	4a05      	ldr	r2, [pc, #20]	@ (8000e9c <SystemInit+0x20>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b09c      	sub	sp, #112	@ 0x70
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
 8000ed0:	615a      	str	r2, [r3, #20]
 8000ed2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2234      	movs	r2, #52	@ 0x34
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f005 ff24 	bl	8006d28 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ee0:	4b5a      	ldr	r3, [pc, #360]	@ (800104c <MX_TIM1_Init+0x1ac>)
 8000ee2:	4a5b      	ldr	r2, [pc, #364]	@ (8001050 <MX_TIM1_Init+0x1b0>)
 8000ee4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ee6:	4b59      	ldr	r3, [pc, #356]	@ (800104c <MX_TIM1_Init+0x1ac>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000eec:	4b57      	ldr	r3, [pc, #348]	@ (800104c <MX_TIM1_Init+0x1ac>)
 8000eee:	2220      	movs	r2, #32
 8000ef0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 8000ef2:	4b56      	ldr	r3, [pc, #344]	@ (800104c <MX_TIM1_Init+0x1ac>)
 8000ef4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000ef8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000efa:	4b54      	ldr	r3, [pc, #336]	@ (800104c <MX_TIM1_Init+0x1ac>)
 8000efc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f00:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8000f02:	4b52      	ldr	r3, [pc, #328]	@ (800104c <MX_TIM1_Init+0x1ac>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f08:	4b50      	ldr	r3, [pc, #320]	@ (800104c <MX_TIM1_Init+0x1ac>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f0e:	484f      	ldr	r0, [pc, #316]	@ (800104c <MX_TIM1_Init+0x1ac>)
 8000f10:	f004 f8c9 	bl	80050a6 <HAL_TIM_Base_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000f1a:	f7ff feac 	bl	8000c76 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f22:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f24:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4848      	ldr	r0, [pc, #288]	@ (800104c <MX_TIM1_Init+0x1ac>)
 8000f2c:	f004 fa88 	bl	8005440 <HAL_TIM_ConfigClockSource>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000f36:	f7ff fe9e 	bl	8000c76 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f3a:	4844      	ldr	r0, [pc, #272]	@ (800104c <MX_TIM1_Init+0x1ac>)
 8000f3c:	f004 f90a 	bl	8005154 <HAL_TIM_PWM_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000f46:	f7ff fe96 	bl	8000c76 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000f4a:	2370      	movs	r3, #112	@ 0x70
 8000f4c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f56:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	483b      	ldr	r0, [pc, #236]	@ (800104c <MX_TIM1_Init+0x1ac>)
 8000f5e:	f004 ff97 	bl	8005e90 <HAL_TIMEx_MasterConfigSynchronization>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000f68:	f7ff fe85 	bl	8000c76 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f6c:	2360      	movs	r3, #96	@ 0x60
 8000f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f74:	2300      	movs	r3, #0
 8000f76:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f80:	2300      	movs	r3, #0
 8000f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f84:	2300      	movs	r3, #0
 8000f86:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f88:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	4619      	mov	r1, r3
 8000f90:	482e      	ldr	r0, [pc, #184]	@ (800104c <MX_TIM1_Init+0x1ac>)
 8000f92:	f004 f941 	bl	8005218 <HAL_TIM_PWM_ConfigChannel>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000f9c:	f7ff fe6b 	bl	8000c76 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fa0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4828      	ldr	r0, [pc, #160]	@ (800104c <MX_TIM1_Init+0x1ac>)
 8000faa:	f004 f935 	bl	8005218 <HAL_TIM_PWM_ConfigChannel>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000fb4:	f7ff fe5f 	bl	8000c76 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fb8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fbc:	2208      	movs	r2, #8
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4822      	ldr	r0, [pc, #136]	@ (800104c <MX_TIM1_Init+0x1ac>)
 8000fc2:	f004 f929 	bl	8005218 <HAL_TIM_PWM_ConfigChannel>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8000fcc:	f7ff fe53 	bl	8000c76 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000fd0:	2370      	movs	r3, #112	@ 0x70
 8000fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 7998;
 8000fd4:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 8000fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fda:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fde:	220c      	movs	r2, #12
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	481a      	ldr	r0, [pc, #104]	@ (800104c <MX_TIM1_Init+0x1ac>)
 8000fe4:	f004 f918 	bl	8005218 <HAL_TIM_PWM_ConfigChannel>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8000fee:	f7ff fe42 	bl	8000c76 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001006:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800100a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001010:	2300      	movs	r3, #0
 8001012:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001018:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800101c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001022:	2300      	movs	r3, #0
 8001024:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	4619      	mov	r1, r3
 800102e:	4807      	ldr	r0, [pc, #28]	@ (800104c <MX_TIM1_Init+0x1ac>)
 8001030:	f004 ffb0 	bl	8005f94 <HAL_TIMEx_ConfigBreakDeadTime>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM1_Init+0x19e>
  {
    Error_Handler();
 800103a:	f7ff fe1c 	bl	8000c76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800103e:	4803      	ldr	r0, [pc, #12]	@ (800104c <MX_TIM1_Init+0x1ac>)
 8001040:	f000 f916 	bl	8001270 <HAL_TIM_MspPostInit>

}
 8001044:	bf00      	nop
 8001046:	3770      	adds	r7, #112	@ 0x70
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	200001bc 	.word	0x200001bc
 8001050:	40012c00 	.word	0x40012c00

08001054 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b09c      	sub	sp, #112	@ 0x70
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001068:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001074:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
 8001084:	615a      	str	r2, [r3, #20]
 8001086:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2234      	movs	r2, #52	@ 0x34
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f005 fe4a 	bl	8006d28 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001094:	4b5a      	ldr	r3, [pc, #360]	@ (8001200 <MX_TIM8_Init+0x1ac>)
 8001096:	4a5b      	ldr	r2, [pc, #364]	@ (8001204 <MX_TIM8_Init+0x1b0>)
 8001098:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800109a:	4b59      	ldr	r3, [pc, #356]	@ (8001200 <MX_TIM8_Init+0x1ac>)
 800109c:	2200      	movs	r2, #0
 800109e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80010a0:	4b57      	ldr	r3, [pc, #348]	@ (8001200 <MX_TIM8_Init+0x1ac>)
 80010a2:	2220      	movs	r2, #32
 80010a4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7999;
 80010a6:	4b56      	ldr	r3, [pc, #344]	@ (8001200 <MX_TIM8_Init+0x1ac>)
 80010a8:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80010ac:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80010ae:	4b54      	ldr	r3, [pc, #336]	@ (8001200 <MX_TIM8_Init+0x1ac>)
 80010b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010b4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 1;
 80010b6:	4b52      	ldr	r3, [pc, #328]	@ (8001200 <MX_TIM8_Init+0x1ac>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010bc:	4b50      	ldr	r3, [pc, #320]	@ (8001200 <MX_TIM8_Init+0x1ac>)
 80010be:	2200      	movs	r2, #0
 80010c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80010c2:	484f      	ldr	r0, [pc, #316]	@ (8001200 <MX_TIM8_Init+0x1ac>)
 80010c4:	f003 ffef 	bl	80050a6 <HAL_TIM_Base_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 80010ce:	f7ff fdd2 	bl	8000c76 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010d6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80010d8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80010dc:	4619      	mov	r1, r3
 80010de:	4848      	ldr	r0, [pc, #288]	@ (8001200 <MX_TIM8_Init+0x1ac>)
 80010e0:	f004 f9ae 	bl	8005440 <HAL_TIM_ConfigClockSource>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 80010ea:	f7ff fdc4 	bl	8000c76 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80010ee:	4844      	ldr	r0, [pc, #272]	@ (8001200 <MX_TIM8_Init+0x1ac>)
 80010f0:	f004 f830 	bl	8005154 <HAL_TIM_PWM_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 80010fa:	f7ff fdbc 	bl	8000c76 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80010fe:	2370      	movs	r3, #112	@ 0x70
 8001100:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800110a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800110e:	4619      	mov	r1, r3
 8001110:	483b      	ldr	r0, [pc, #236]	@ (8001200 <MX_TIM8_Init+0x1ac>)
 8001112:	f004 febd 	bl	8005e90 <HAL_TIMEx_MasterConfigSynchronization>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 800111c:	f7ff fdab 	bl	8000c76 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001120:	2360      	movs	r3, #96	@ 0x60
 8001122:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001128:	2300      	movs	r3, #0
 800112a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800112c:	2300      	movs	r3, #0
 800112e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001134:	2300      	movs	r3, #0
 8001136:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001138:	2300      	movs	r3, #0
 800113a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001140:	2200      	movs	r2, #0
 8001142:	4619      	mov	r1, r3
 8001144:	482e      	ldr	r0, [pc, #184]	@ (8001200 <MX_TIM8_Init+0x1ac>)
 8001146:	f004 f867 	bl	8005218 <HAL_TIM_PWM_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001150:	f7ff fd91 	bl	8000c76 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001154:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001158:	2204      	movs	r2, #4
 800115a:	4619      	mov	r1, r3
 800115c:	4828      	ldr	r0, [pc, #160]	@ (8001200 <MX_TIM8_Init+0x1ac>)
 800115e:	f004 f85b 	bl	8005218 <HAL_TIM_PWM_ConfigChannel>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8001168:	f7ff fd85 	bl	8000c76 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800116c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001170:	2208      	movs	r2, #8
 8001172:	4619      	mov	r1, r3
 8001174:	4822      	ldr	r0, [pc, #136]	@ (8001200 <MX_TIM8_Init+0x1ac>)
 8001176:	f004 f84f 	bl	8005218 <HAL_TIM_PWM_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001180:	f7ff fd79 	bl	8000c76 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001184:	2370      	movs	r3, #112	@ 0x70
 8001186:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 7998;
 8001188:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 800118c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800118e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001192:	220c      	movs	r2, #12
 8001194:	4619      	mov	r1, r3
 8001196:	481a      	ldr	r0, [pc, #104]	@ (8001200 <MX_TIM8_Init+0x1ac>)
 8001198:	f004 f83e 	bl	8005218 <HAL_TIM_PWM_ConfigChannel>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM8_Init+0x152>
  {
    Error_Handler();
 80011a2:	f7ff fd68 	bl	8000c76 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80011c4:	2300      	movs	r3, #0
 80011c6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80011d6:	2300      	movs	r3, #0
 80011d8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	4619      	mov	r1, r3
 80011e2:	4807      	ldr	r0, [pc, #28]	@ (8001200 <MX_TIM8_Init+0x1ac>)
 80011e4:	f004 fed6 	bl	8005f94 <HAL_TIMEx_ConfigBreakDeadTime>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM8_Init+0x19e>
  {
    Error_Handler();
 80011ee:	f7ff fd42 	bl	8000c76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80011f2:	4803      	ldr	r0, [pc, #12]	@ (8001200 <MX_TIM8_Init+0x1ac>)
 80011f4:	f000 f83c 	bl	8001270 <HAL_TIM_MspPostInit>

}
 80011f8:	bf00      	nop
 80011fa:	3770      	adds	r7, #112	@ 0x70
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000208 	.word	0x20000208
 8001204:	40013400 	.word	0x40013400

08001208 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a13      	ldr	r2, [pc, #76]	@ (8001264 <HAL_TIM_Base_MspInit+0x5c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d10c      	bne.n	8001234 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800121a:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <HAL_TIM_Base_MspInit+0x60>)
 800121c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800121e:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <HAL_TIM_Base_MspInit+0x60>)
 8001220:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001224:	6613      	str	r3, [r2, #96]	@ 0x60
 8001226:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <HAL_TIM_Base_MspInit+0x60>)
 8001228:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800122a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001232:	e010      	b.n	8001256 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM8)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0c      	ldr	r2, [pc, #48]	@ (800126c <HAL_TIM_Base_MspInit+0x64>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d10b      	bne.n	8001256 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800123e:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <HAL_TIM_Base_MspInit+0x60>)
 8001240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001242:	4a09      	ldr	r2, [pc, #36]	@ (8001268 <HAL_TIM_Base_MspInit+0x60>)
 8001244:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001248:	6613      	str	r3, [r2, #96]	@ 0x60
 800124a:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <HAL_TIM_Base_MspInit+0x60>)
 800124c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800124e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40012c00 	.word	0x40012c00
 8001268:	40021000 	.word	0x40021000
 800126c:	40013400 	.word	0x40013400

08001270 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	@ 0x28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a2b      	ldr	r2, [pc, #172]	@ (800133c <HAL_TIM_MspPostInit+0xcc>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d11e      	bne.n	80012d0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	4b2b      	ldr	r3, [pc, #172]	@ (8001340 <HAL_TIM_MspPostInit+0xd0>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001296:	4a2a      	ldr	r2, [pc, #168]	@ (8001340 <HAL_TIM_MspPostInit+0xd0>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129e:	4b28      	ldr	r3, [pc, #160]	@ (8001340 <HAL_TIM_MspPostInit+0xd0>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80012aa:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80012bc:	2306      	movs	r3, #6
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ca:	f002 fba3 	bl	8003a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80012ce:	e031      	b.n	8001334 <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM8)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001344 <HAL_TIM_MspPostInit+0xd4>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d12c      	bne.n	8001334 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <HAL_TIM_MspPostInit+0xd0>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012de:	4a18      	ldr	r2, [pc, #96]	@ (8001340 <HAL_TIM_MspPostInit+0xd0>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e6:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <HAL_TIM_MspPostInit+0xd0>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012f2:	2340      	movs	r3, #64	@ 0x40
 80012f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8001302:	2305      	movs	r3, #5
 8001304:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	480e      	ldr	r0, [pc, #56]	@ (8001348 <HAL_TIM_MspPostInit+0xd8>)
 800130e:	f002 fb81 	bl	8003a14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001312:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2300      	movs	r3, #0
 8001322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8001324:	230a      	movs	r3, #10
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	4806      	ldr	r0, [pc, #24]	@ (8001348 <HAL_TIM_MspPostInit+0xd8>)
 8001330:	f002 fb70 	bl	8003a14 <HAL_GPIO_Init>
}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	@ 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40012c00 	.word	0x40012c00
 8001340:	40021000 	.word	0x40021000
 8001344:	40013400 	.word	0x40013400
 8001348:	48000400 	.word	0x48000400

0800134c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001350:	4b22      	ldr	r3, [pc, #136]	@ (80013dc <MX_USART2_UART_Init+0x90>)
 8001352:	4a23      	ldr	r2, [pc, #140]	@ (80013e0 <MX_USART2_UART_Init+0x94>)
 8001354:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001356:	4b21      	ldr	r3, [pc, #132]	@ (80013dc <MX_USART2_UART_Init+0x90>)
 8001358:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800135c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800135e:	4b1f      	ldr	r3, [pc, #124]	@ (80013dc <MX_USART2_UART_Init+0x90>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001364:	4b1d      	ldr	r3, [pc, #116]	@ (80013dc <MX_USART2_UART_Init+0x90>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800136a:	4b1c      	ldr	r3, [pc, #112]	@ (80013dc <MX_USART2_UART_Init+0x90>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001370:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <MX_USART2_UART_Init+0x90>)
 8001372:	220c      	movs	r2, #12
 8001374:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001376:	4b19      	ldr	r3, [pc, #100]	@ (80013dc <MX_USART2_UART_Init+0x90>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800137c:	4b17      	ldr	r3, [pc, #92]	@ (80013dc <MX_USART2_UART_Init+0x90>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001382:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <MX_USART2_UART_Init+0x90>)
 8001384:	2200      	movs	r2, #0
 8001386:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001388:	4b14      	ldr	r3, [pc, #80]	@ (80013dc <MX_USART2_UART_Init+0x90>)
 800138a:	2200      	movs	r2, #0
 800138c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800138e:	4b13      	ldr	r3, [pc, #76]	@ (80013dc <MX_USART2_UART_Init+0x90>)
 8001390:	2200      	movs	r2, #0
 8001392:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001394:	4811      	ldr	r0, [pc, #68]	@ (80013dc <MX_USART2_UART_Init+0x90>)
 8001396:	f004 fe89 	bl	80060ac <HAL_UART_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013a0:	f7ff fc69 	bl	8000c76 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a4:	2100      	movs	r1, #0
 80013a6:	480d      	ldr	r0, [pc, #52]	@ (80013dc <MX_USART2_UART_Init+0x90>)
 80013a8:	f005 fbf4 	bl	8006b94 <HAL_UARTEx_SetTxFifoThreshold>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80013b2:	f7ff fc60 	bl	8000c76 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b6:	2100      	movs	r1, #0
 80013b8:	4808      	ldr	r0, [pc, #32]	@ (80013dc <MX_USART2_UART_Init+0x90>)
 80013ba:	f005 fc29 	bl	8006c10 <HAL_UARTEx_SetRxFifoThreshold>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80013c4:	f7ff fc57 	bl	8000c76 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80013c8:	4804      	ldr	r0, [pc, #16]	@ (80013dc <MX_USART2_UART_Init+0x90>)
 80013ca:	f005 fbaa 	bl	8006b22 <HAL_UARTEx_DisableFifoMode>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80013d4:	f7ff fc4f 	bl	8000c76 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000254 	.word	0x20000254
 80013e0:	40004400 	.word	0x40004400

080013e4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013e8:	4b22      	ldr	r3, [pc, #136]	@ (8001474 <MX_USART3_UART_Init+0x90>)
 80013ea:	4a23      	ldr	r2, [pc, #140]	@ (8001478 <MX_USART3_UART_Init+0x94>)
 80013ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013ee:	4b21      	ldr	r3, [pc, #132]	@ (8001474 <MX_USART3_UART_Init+0x90>)
 80013f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001474 <MX_USART3_UART_Init+0x90>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001474 <MX_USART3_UART_Init+0x90>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001402:	4b1c      	ldr	r3, [pc, #112]	@ (8001474 <MX_USART3_UART_Init+0x90>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001408:	4b1a      	ldr	r3, [pc, #104]	@ (8001474 <MX_USART3_UART_Init+0x90>)
 800140a:	220c      	movs	r2, #12
 800140c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140e:	4b19      	ldr	r3, [pc, #100]	@ (8001474 <MX_USART3_UART_Init+0x90>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001414:	4b17      	ldr	r3, [pc, #92]	@ (8001474 <MX_USART3_UART_Init+0x90>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800141a:	4b16      	ldr	r3, [pc, #88]	@ (8001474 <MX_USART3_UART_Init+0x90>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001420:	4b14      	ldr	r3, [pc, #80]	@ (8001474 <MX_USART3_UART_Init+0x90>)
 8001422:	2200      	movs	r2, #0
 8001424:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001426:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <MX_USART3_UART_Init+0x90>)
 8001428:	2200      	movs	r2, #0
 800142a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800142c:	4811      	ldr	r0, [pc, #68]	@ (8001474 <MX_USART3_UART_Init+0x90>)
 800142e:	f004 fe3d 	bl	80060ac <HAL_UART_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001438:	f7ff fc1d 	bl	8000c76 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800143c:	2100      	movs	r1, #0
 800143e:	480d      	ldr	r0, [pc, #52]	@ (8001474 <MX_USART3_UART_Init+0x90>)
 8001440:	f005 fba8 	bl	8006b94 <HAL_UARTEx_SetTxFifoThreshold>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800144a:	f7ff fc14 	bl	8000c76 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800144e:	2100      	movs	r1, #0
 8001450:	4808      	ldr	r0, [pc, #32]	@ (8001474 <MX_USART3_UART_Init+0x90>)
 8001452:	f005 fbdd 	bl	8006c10 <HAL_UARTEx_SetRxFifoThreshold>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800145c:	f7ff fc0b 	bl	8000c76 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001460:	4804      	ldr	r0, [pc, #16]	@ (8001474 <MX_USART3_UART_Init+0x90>)
 8001462:	f005 fb5e 	bl	8006b22 <HAL_UARTEx_DisableFifoMode>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800146c:	f7ff fc03 	bl	8000c76 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	200002e8 	.word	0x200002e8
 8001478:	40004800 	.word	0x40004800

0800147c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b09c      	sub	sp, #112	@ 0x70
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001494:	f107 0318 	add.w	r3, r7, #24
 8001498:	2244      	movs	r2, #68	@ 0x44
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f005 fc43 	bl	8006d28 <memset>
  if(uartHandle->Instance==USART2)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a91      	ldr	r2, [pc, #580]	@ (80016ec <HAL_UART_MspInit+0x270>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	f040 808b 	bne.w	80015c4 <HAL_UART_MspInit+0x148>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014ae:	2302      	movs	r3, #2
 80014b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b6:	f107 0318 	add.w	r3, r7, #24
 80014ba:	4618      	mov	r0, r3
 80014bc:	f003 fb58 	bl	8004b70 <HAL_RCCEx_PeriphCLKConfig>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80014c6:	f7ff fbd6 	bl	8000c76 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ca:	4b89      	ldr	r3, [pc, #548]	@ (80016f0 <HAL_UART_MspInit+0x274>)
 80014cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ce:	4a88      	ldr	r2, [pc, #544]	@ (80016f0 <HAL_UART_MspInit+0x274>)
 80014d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80014d6:	4b86      	ldr	r3, [pc, #536]	@ (80016f0 <HAL_UART_MspInit+0x274>)
 80014d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	4b83      	ldr	r3, [pc, #524]	@ (80016f0 <HAL_UART_MspInit+0x274>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e6:	4a82      	ldr	r2, [pc, #520]	@ (80016f0 <HAL_UART_MspInit+0x274>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ee:	4b80      	ldr	r3, [pc, #512]	@ (80016f0 <HAL_UART_MspInit+0x274>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014fa:	230c      	movs	r3, #12
 80014fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800150a:	2307      	movs	r3, #7
 800150c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001512:	4619      	mov	r1, r3
 8001514:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001518:	f002 fa7c 	bl	8003a14 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel3;
 800151c:	4b75      	ldr	r3, [pc, #468]	@ (80016f4 <HAL_UART_MspInit+0x278>)
 800151e:	4a76      	ldr	r2, [pc, #472]	@ (80016f8 <HAL_UART_MspInit+0x27c>)
 8001520:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001522:	4b74      	ldr	r3, [pc, #464]	@ (80016f4 <HAL_UART_MspInit+0x278>)
 8001524:	221a      	movs	r2, #26
 8001526:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001528:	4b72      	ldr	r3, [pc, #456]	@ (80016f4 <HAL_UART_MspInit+0x278>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800152e:	4b71      	ldr	r3, [pc, #452]	@ (80016f4 <HAL_UART_MspInit+0x278>)
 8001530:	2200      	movs	r2, #0
 8001532:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001534:	4b6f      	ldr	r3, [pc, #444]	@ (80016f4 <HAL_UART_MspInit+0x278>)
 8001536:	2280      	movs	r2, #128	@ 0x80
 8001538:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800153a:	4b6e      	ldr	r3, [pc, #440]	@ (80016f4 <HAL_UART_MspInit+0x278>)
 800153c:	2200      	movs	r2, #0
 800153e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001540:	4b6c      	ldr	r3, [pc, #432]	@ (80016f4 <HAL_UART_MspInit+0x278>)
 8001542:	2200      	movs	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001546:	4b6b      	ldr	r3, [pc, #428]	@ (80016f4 <HAL_UART_MspInit+0x278>)
 8001548:	2200      	movs	r2, #0
 800154a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800154c:	4b69      	ldr	r3, [pc, #420]	@ (80016f4 <HAL_UART_MspInit+0x278>)
 800154e:	2200      	movs	r2, #0
 8001550:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001552:	4868      	ldr	r0, [pc, #416]	@ (80016f4 <HAL_UART_MspInit+0x278>)
 8001554:	f002 f8a4 	bl	80036a0 <HAL_DMA_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800155e:	f7ff fb8a 	bl	8000c76 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a63      	ldr	r2, [pc, #396]	@ (80016f4 <HAL_UART_MspInit+0x278>)
 8001566:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800156a:	4a62      	ldr	r2, [pc, #392]	@ (80016f4 <HAL_UART_MspInit+0x278>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8001570:	4b62      	ldr	r3, [pc, #392]	@ (80016fc <HAL_UART_MspInit+0x280>)
 8001572:	4a63      	ldr	r2, [pc, #396]	@ (8001700 <HAL_UART_MspInit+0x284>)
 8001574:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001576:	4b61      	ldr	r3, [pc, #388]	@ (80016fc <HAL_UART_MspInit+0x280>)
 8001578:	221b      	movs	r2, #27
 800157a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800157c:	4b5f      	ldr	r3, [pc, #380]	@ (80016fc <HAL_UART_MspInit+0x280>)
 800157e:	2210      	movs	r2, #16
 8001580:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001582:	4b5e      	ldr	r3, [pc, #376]	@ (80016fc <HAL_UART_MspInit+0x280>)
 8001584:	2200      	movs	r2, #0
 8001586:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001588:	4b5c      	ldr	r3, [pc, #368]	@ (80016fc <HAL_UART_MspInit+0x280>)
 800158a:	2280      	movs	r2, #128	@ 0x80
 800158c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800158e:	4b5b      	ldr	r3, [pc, #364]	@ (80016fc <HAL_UART_MspInit+0x280>)
 8001590:	2200      	movs	r2, #0
 8001592:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001594:	4b59      	ldr	r3, [pc, #356]	@ (80016fc <HAL_UART_MspInit+0x280>)
 8001596:	2200      	movs	r2, #0
 8001598:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800159a:	4b58      	ldr	r3, [pc, #352]	@ (80016fc <HAL_UART_MspInit+0x280>)
 800159c:	2200      	movs	r2, #0
 800159e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015a0:	4b56      	ldr	r3, [pc, #344]	@ (80016fc <HAL_UART_MspInit+0x280>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80015a6:	4855      	ldr	r0, [pc, #340]	@ (80016fc <HAL_UART_MspInit+0x280>)
 80015a8:	f002 f87a 	bl	80036a0 <HAL_DMA_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80015b2:	f7ff fb60 	bl	8000c76 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a50      	ldr	r2, [pc, #320]	@ (80016fc <HAL_UART_MspInit+0x280>)
 80015ba:	67da      	str	r2, [r3, #124]	@ 0x7c
 80015bc:	4a4f      	ldr	r2, [pc, #316]	@ (80016fc <HAL_UART_MspInit+0x280>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015c2:	e08f      	b.n	80016e4 <HAL_UART_MspInit+0x268>
  else if(uartHandle->Instance==USART3)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a4e      	ldr	r2, [pc, #312]	@ (8001704 <HAL_UART_MspInit+0x288>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	f040 808a 	bne.w	80016e4 <HAL_UART_MspInit+0x268>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015d0:	2304      	movs	r3, #4
 80015d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d8:	f107 0318 	add.w	r3, r7, #24
 80015dc:	4618      	mov	r0, r3
 80015de:	f003 fac7 	bl	8004b70 <HAL_RCCEx_PeriphCLKConfig>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <HAL_UART_MspInit+0x170>
      Error_Handler();
 80015e8:	f7ff fb45 	bl	8000c76 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015ec:	4b40      	ldr	r3, [pc, #256]	@ (80016f0 <HAL_UART_MspInit+0x274>)
 80015ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f0:	4a3f      	ldr	r2, [pc, #252]	@ (80016f0 <HAL_UART_MspInit+0x274>)
 80015f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80015f8:	4b3d      	ldr	r3, [pc, #244]	@ (80016f0 <HAL_UART_MspInit+0x274>)
 80015fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001604:	4b3a      	ldr	r3, [pc, #232]	@ (80016f0 <HAL_UART_MspInit+0x274>)
 8001606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001608:	4a39      	ldr	r2, [pc, #228]	@ (80016f0 <HAL_UART_MspInit+0x274>)
 800160a:	f043 0302 	orr.w	r3, r3, #2
 800160e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001610:	4b37      	ldr	r3, [pc, #220]	@ (80016f0 <HAL_UART_MspInit+0x274>)
 8001612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800161c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001620:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800162e:	2307      	movs	r3, #7
 8001630:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001632:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001636:	4619      	mov	r1, r3
 8001638:	4833      	ldr	r0, [pc, #204]	@ (8001708 <HAL_UART_MspInit+0x28c>)
 800163a:	f002 f9eb 	bl	8003a14 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel1;
 800163e:	4b33      	ldr	r3, [pc, #204]	@ (800170c <HAL_UART_MspInit+0x290>)
 8001640:	4a33      	ldr	r2, [pc, #204]	@ (8001710 <HAL_UART_MspInit+0x294>)
 8001642:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001644:	4b31      	ldr	r3, [pc, #196]	@ (800170c <HAL_UART_MspInit+0x290>)
 8001646:	221c      	movs	r2, #28
 8001648:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800164a:	4b30      	ldr	r3, [pc, #192]	@ (800170c <HAL_UART_MspInit+0x290>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001650:	4b2e      	ldr	r3, [pc, #184]	@ (800170c <HAL_UART_MspInit+0x290>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001656:	4b2d      	ldr	r3, [pc, #180]	@ (800170c <HAL_UART_MspInit+0x290>)
 8001658:	2280      	movs	r2, #128	@ 0x80
 800165a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800165c:	4b2b      	ldr	r3, [pc, #172]	@ (800170c <HAL_UART_MspInit+0x290>)
 800165e:	2200      	movs	r2, #0
 8001660:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001662:	4b2a      	ldr	r3, [pc, #168]	@ (800170c <HAL_UART_MspInit+0x290>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001668:	4b28      	ldr	r3, [pc, #160]	@ (800170c <HAL_UART_MspInit+0x290>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800166e:	4b27      	ldr	r3, [pc, #156]	@ (800170c <HAL_UART_MspInit+0x290>)
 8001670:	2200      	movs	r2, #0
 8001672:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001674:	4825      	ldr	r0, [pc, #148]	@ (800170c <HAL_UART_MspInit+0x290>)
 8001676:	f002 f813 	bl	80036a0 <HAL_DMA_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <HAL_UART_MspInit+0x208>
      Error_Handler();
 8001680:	f7ff faf9 	bl	8000c76 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a21      	ldr	r2, [pc, #132]	@ (800170c <HAL_UART_MspInit+0x290>)
 8001688:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800168c:	4a1f      	ldr	r2, [pc, #124]	@ (800170c <HAL_UART_MspInit+0x290>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001692:	4b20      	ldr	r3, [pc, #128]	@ (8001714 <HAL_UART_MspInit+0x298>)
 8001694:	4a20      	ldr	r2, [pc, #128]	@ (8001718 <HAL_UART_MspInit+0x29c>)
 8001696:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001698:	4b1e      	ldr	r3, [pc, #120]	@ (8001714 <HAL_UART_MspInit+0x298>)
 800169a:	221d      	movs	r2, #29
 800169c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800169e:	4b1d      	ldr	r3, [pc, #116]	@ (8001714 <HAL_UART_MspInit+0x298>)
 80016a0:	2210      	movs	r2, #16
 80016a2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <HAL_UART_MspInit+0x298>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001714 <HAL_UART_MspInit+0x298>)
 80016ac:	2280      	movs	r2, #128	@ 0x80
 80016ae:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016b0:	4b18      	ldr	r3, [pc, #96]	@ (8001714 <HAL_UART_MspInit+0x298>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016b6:	4b17      	ldr	r3, [pc, #92]	@ (8001714 <HAL_UART_MspInit+0x298>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80016bc:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <HAL_UART_MspInit+0x298>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016c2:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <HAL_UART_MspInit+0x298>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80016c8:	4812      	ldr	r0, [pc, #72]	@ (8001714 <HAL_UART_MspInit+0x298>)
 80016ca:	f001 ffe9 	bl	80036a0 <HAL_DMA_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 80016d4:	f7ff facf 	bl	8000c76 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a0e      	ldr	r2, [pc, #56]	@ (8001714 <HAL_UART_MspInit+0x298>)
 80016dc:	67da      	str	r2, [r3, #124]	@ 0x7c
 80016de:	4a0d      	ldr	r2, [pc, #52]	@ (8001714 <HAL_UART_MspInit+0x298>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80016e4:	bf00      	nop
 80016e6:	3770      	adds	r7, #112	@ 0x70
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40004400 	.word	0x40004400
 80016f0:	40021000 	.word	0x40021000
 80016f4:	2000037c 	.word	0x2000037c
 80016f8:	40020030 	.word	0x40020030
 80016fc:	200003dc 	.word	0x200003dc
 8001700:	40020044 	.word	0x40020044
 8001704:	40004800 	.word	0x40004800
 8001708:	48000400 	.word	0x48000400
 800170c:	2000043c 	.word	0x2000043c
 8001710:	40020008 	.word	0x40020008
 8001714:	2000049c 	.word	0x2000049c
 8001718:	4002001c 	.word	0x4002001c

0800171c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800171c:	480d      	ldr	r0, [pc, #52]	@ (8001754 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800171e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001720:	f7ff fbac 	bl	8000e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001724:	480c      	ldr	r0, [pc, #48]	@ (8001758 <LoopForever+0x6>)
  ldr r1, =_edata
 8001726:	490d      	ldr	r1, [pc, #52]	@ (800175c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001728:	4a0d      	ldr	r2, [pc, #52]	@ (8001760 <LoopForever+0xe>)
  movs r3, #0
 800172a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800172c:	e002      	b.n	8001734 <LoopCopyDataInit>

0800172e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001732:	3304      	adds	r3, #4

08001734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001738:	d3f9      	bcc.n	800172e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173a:	4a0a      	ldr	r2, [pc, #40]	@ (8001764 <LoopForever+0x12>)
  ldr r4, =_ebss
 800173c:	4c0a      	ldr	r4, [pc, #40]	@ (8001768 <LoopForever+0x16>)
  movs r3, #0
 800173e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001740:	e001      	b.n	8001746 <LoopFillZerobss>

08001742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001744:	3204      	adds	r2, #4

08001746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001748:	d3fb      	bcc.n	8001742 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800174a:	f005 faf5 	bl	8006d38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800174e:	f7ff fa2d 	bl	8000bac <main>

08001752 <LoopForever>:

LoopForever:
    b LoopForever
 8001752:	e7fe      	b.n	8001752 <LoopForever>
  ldr   r0, =_estack
 8001754:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800175c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001760:	08006de8 	.word	0x08006de8
  ldr r2, =_sbss
 8001764:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001768:	20000500 	.word	0x20000500

0800176c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800176c:	e7fe      	b.n	800176c <ADC1_2_IRQHandler>

0800176e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001778:	2003      	movs	r0, #3
 800177a:	f001 ff51 	bl	8003620 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800177e:	200f      	movs	r0, #15
 8001780:	f000 f80e 	bl	80017a0 <HAL_InitTick>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d002      	beq.n	8001790 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	71fb      	strb	r3, [r7, #7]
 800178e:	e001      	b.n	8001794 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001790:	f7ff faf8 	bl	8000d84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001794:	79fb      	ldrb	r3, [r7, #7]

}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80017ac:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <HAL_InitTick+0x68>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d022      	beq.n	80017fa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80017b4:	4b15      	ldr	r3, [pc, #84]	@ (800180c <HAL_InitTick+0x6c>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <HAL_InitTick+0x68>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80017c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80017c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c8:	4618      	mov	r0, r3
 80017ca:	f001 ff5c 	bl	8003686 <HAL_SYSTICK_Config>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d10f      	bne.n	80017f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b0f      	cmp	r3, #15
 80017d8:	d809      	bhi.n	80017ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017da:	2200      	movs	r2, #0
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	f04f 30ff 	mov.w	r0, #4294967295
 80017e2:	f001 ff28 	bl	8003636 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001810 <HAL_InitTick+0x70>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	e007      	b.n	80017fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	73fb      	strb	r3, [r7, #15]
 80017f2:	e004      	b.n	80017fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	73fb      	strb	r3, [r7, #15]
 80017f8:	e001      	b.n	80017fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000008 	.word	0x20000008
 800180c:	20000000 	.word	0x20000000
 8001810:	20000004 	.word	0x20000004

08001814 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001818:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <HAL_IncTick+0x1c>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b05      	ldr	r3, [pc, #20]	@ (8001834 <HAL_IncTick+0x20>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4413      	add	r3, r2
 8001822:	4a03      	ldr	r2, [pc, #12]	@ (8001830 <HAL_IncTick+0x1c>)
 8001824:	6013      	str	r3, [r2, #0]
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	200004fc 	.word	0x200004fc
 8001834:	20000008 	.word	0x20000008

08001838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return uwTick;
 800183c:	4b03      	ldr	r3, [pc, #12]	@ (800184c <HAL_GetTick+0x14>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	200004fc 	.word	0x200004fc

08001850 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	431a      	orrs	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	609a      	str	r2, [r3, #8]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	609a      	str	r2, [r3, #8]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b087      	sub	sp, #28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
 80018c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	3360      	adds	r3, #96	@ 0x60
 80018ca:	461a      	mov	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <LL_ADC_SetOffset+0x44>)
 80018da:	4013      	ands	r3, r2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	4313      	orrs	r3, r2
 80018e8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018f0:	bf00      	nop
 80018f2:	371c      	adds	r7, #28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	03fff000 	.word	0x03fff000

08001900 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3360      	adds	r3, #96	@ 0x60
 800190e:	461a      	mov	r2, r3
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001920:	4618      	mov	r0, r3
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800192c:	b480      	push	{r7}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	3360      	adds	r3, #96	@ 0x60
 800193c:	461a      	mov	r2, r3
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	431a      	orrs	r2, r3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001956:	bf00      	nop
 8001958:	371c      	adds	r7, #28
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001962:	b480      	push	{r7}
 8001964:	b087      	sub	sp, #28
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	3360      	adds	r3, #96	@ 0x60
 8001972:	461a      	mov	r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	431a      	orrs	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800198c:	bf00      	nop
 800198e:	371c      	adds	r7, #28
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	3360      	adds	r3, #96	@ 0x60
 80019a8:	461a      	mov	r2, r3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	431a      	orrs	r2, r3
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80019c2:	bf00      	nop
 80019c4:	371c      	adds	r7, #28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	615a      	str	r2, [r3, #20]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	3330      	adds	r3, #48	@ 0x30
 8001a04:	461a      	mov	r2, r3
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	f003 030c 	and.w	r3, r3, #12
 8001a10:	4413      	add	r3, r2
 8001a12:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	f003 031f 	and.w	r3, r3, #31
 8001a1e:	211f      	movs	r1, #31
 8001a20:	fa01 f303 	lsl.w	r3, r1, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	401a      	ands	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	0e9b      	lsrs	r3, r3, #26
 8001a2c:	f003 011f 	and.w	r1, r3, #31
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a40:	bf00      	nop
 8001a42:	371c      	adds	r7, #28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	3314      	adds	r3, #20
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	0e5b      	lsrs	r3, r3, #25
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	4413      	add	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	0d1b      	lsrs	r3, r3, #20
 8001a74:	f003 031f 	and.w	r3, r3, #31
 8001a78:	2107      	movs	r1, #7
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	401a      	ands	r2, r3
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	0d1b      	lsrs	r3, r3, #20
 8001a86:	f003 031f 	and.w	r3, r3, #31
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a90:	431a      	orrs	r2, r3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a96:	bf00      	nop
 8001a98:	371c      	adds	r7, #28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001abc:	43db      	mvns	r3, r3
 8001abe:	401a      	ands	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f003 0318 	and.w	r3, r3, #24
 8001ac6:	4908      	ldr	r1, [pc, #32]	@ (8001ae8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ac8:	40d9      	lsrs	r1, r3
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	400b      	ands	r3, r1
 8001ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ada:	bf00      	nop
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	0007ffff 	.word	0x0007ffff

08001aec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001afc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6093      	str	r3, [r2, #8]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b24:	d101      	bne.n	8001b2a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001b48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b4c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b74:	d101      	bne.n	8001b7a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d101      	bne.n	8001ba0 <LL_ADC_IsEnabled+0x18>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <LL_ADC_IsEnabled+0x1a>
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d101      	bne.n	8001bc6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d101      	bne.n	8001bec <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b089      	sub	sp, #36	@ 0x24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e167      	b.n	8001ee6 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d109      	bne.n	8001c38 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7fe fda9 	bl	800077c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff67 	bl	8001b10 <LL_ADC_IsDeepPowerDownEnabled>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d004      	beq.n	8001c52 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff4d 	bl	8001aec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff ff82 	bl	8001b60 <LL_ADC_IsInternalRegulatorEnabled>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d115      	bne.n	8001c8e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff ff66 	bl	8001b38 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c6c:	4ba0      	ldr	r3, [pc, #640]	@ (8001ef0 <HAL_ADC_Init+0x2f4>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	099b      	lsrs	r3, r3, #6
 8001c72:	4aa0      	ldr	r2, [pc, #640]	@ (8001ef4 <HAL_ADC_Init+0x2f8>)
 8001c74:	fba2 2303 	umull	r2, r3, r2, r3
 8001c78:	099b      	lsrs	r3, r3, #6
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c80:	e002      	b.n	8001c88 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f9      	bne.n	8001c82 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff ff64 	bl	8001b60 <LL_ADC_IsInternalRegulatorEnabled>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10d      	bne.n	8001cba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ca2:	f043 0210 	orr.w	r2, r3, #16
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cae:	f043 0201 	orr.w	r2, r3, #1
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ff75 	bl	8001bae <LL_ADC_REG_IsConversionOngoing>
 8001cc4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f040 8100 	bne.w	8001ed4 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f040 80fc 	bne.w	8001ed4 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ce4:	f043 0202 	orr.w	r2, r3, #2
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff49 	bl	8001b88 <LL_ADC_IsEnabled>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d111      	bne.n	8001d20 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cfc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001d00:	f7ff ff42 	bl	8001b88 <LL_ADC_IsEnabled>
 8001d04:	4604      	mov	r4, r0
 8001d06:	487c      	ldr	r0, [pc, #496]	@ (8001ef8 <HAL_ADC_Init+0x2fc>)
 8001d08:	f7ff ff3e 	bl	8001b88 <LL_ADC_IsEnabled>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	4323      	orrs	r3, r4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d105      	bne.n	8001d20 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4878      	ldr	r0, [pc, #480]	@ (8001efc <HAL_ADC_Init+0x300>)
 8001d1c:	f7ff fd98 	bl	8001850 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	7f5b      	ldrb	r3, [r3, #29]
 8001d24:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d2a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d30:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d36:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d3e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d106      	bne.n	8001d5c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d52:	3b01      	subs	r3, #1
 8001d54:	045b      	lsls	r3, r3, #17
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d009      	beq.n	8001d78 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d68:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d70:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	4b60      	ldr	r3, [pc, #384]	@ (8001f00 <HAL_ADC_Init+0x304>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	69b9      	ldr	r1, [r7, #24]
 8001d88:	430b      	orrs	r3, r1
 8001d8a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff ff14 	bl	8001bd4 <LL_ADC_INJ_IsConversionOngoing>
 8001dac:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d16d      	bne.n	8001e90 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d16a      	bne.n	8001e90 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dbe:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001dc6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001dd6:	f023 0302 	bic.w	r3, r3, #2
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	69b9      	ldr	r1, [r7, #24]
 8001de0:	430b      	orrs	r3, r1
 8001de2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d017      	beq.n	8001e1c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691a      	ldr	r2, [r3, #16]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001dfa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001e04:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001e08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6911      	ldr	r1, [r2, #16]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	430b      	orrs	r3, r1
 8001e16:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001e1a:	e013      	b.n	8001e44 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691a      	ldr	r2, [r3, #16]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001e2a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001e3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e40:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d118      	bne.n	8001e80 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001e58:	f023 0304 	bic.w	r3, r3, #4
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e64:	4311      	orrs	r1, r2
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001e6a:	4311      	orrs	r1, r2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e70:	430a      	orrs	r2, r1
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 0201 	orr.w	r2, r2, #1
 8001e7c:	611a      	str	r2, [r3, #16]
 8001e7e:	e007      	b.n	8001e90 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691a      	ldr	r2, [r3, #16]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0201 	bic.w	r2, r2, #1
 8001e8e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d10c      	bne.n	8001eb2 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	f023 010f 	bic.w	r1, r3, #15
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	1e5a      	subs	r2, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	631a      	str	r2, [r3, #48]	@ 0x30
 8001eb0:	e007      	b.n	8001ec2 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 020f 	bic.w	r2, r2, #15
 8001ec0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ec6:	f023 0303 	bic.w	r3, r3, #3
 8001eca:	f043 0201 	orr.w	r2, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ed2:	e007      	b.n	8001ee4 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed8:	f043 0210 	orr.w	r2, r3, #16
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ee4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3724      	adds	r7, #36	@ 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd90      	pop	{r4, r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	053e2d63 	.word	0x053e2d63
 8001ef8:	50000100 	.word	0x50000100
 8001efc:	50000300 	.word	0x50000300
 8001f00:	fff04007 	.word	0xfff04007

08001f04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b0b6      	sub	sp, #216	@ 0xd8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x22>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e3c8      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x7b4>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fe3b 	bl	8001bae <LL_ADC_REG_IsConversionOngoing>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f040 83ad 	bne.w	800269a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6818      	ldr	r0, [r3, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	6859      	ldr	r1, [r3, #4]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	f7ff fd51 	bl	80019f4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fe29 	bl	8001bae <LL_ADC_REG_IsConversionOngoing>
 8001f5c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fe35 	bl	8001bd4 <LL_ADC_INJ_IsConversionOngoing>
 8001f6a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f040 81d9 	bne.w	800232a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f040 81d4 	bne.w	800232a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f8a:	d10f      	bne.n	8001fac <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2200      	movs	r2, #0
 8001f96:	4619      	mov	r1, r3
 8001f98:	f7ff fd58 	bl	8001a4c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff fd12 	bl	80019ce <LL_ADC_SetSamplingTimeCommonConfig>
 8001faa:	e00e      	b.n	8001fca <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	6819      	ldr	r1, [r3, #0]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	f7ff fd47 	bl	8001a4c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fd02 	bl	80019ce <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	695a      	ldr	r2, [r3, #20]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	08db      	lsrs	r3, r3, #3
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d022      	beq.n	8002032 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	6919      	ldr	r1, [r3, #16]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001ffc:	f7ff fc5c 	bl	80018b8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6818      	ldr	r0, [r3, #0]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	6919      	ldr	r1, [r3, #16]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	461a      	mov	r2, r3
 800200e:	f7ff fca8 	bl	8001962 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800201e:	2b01      	cmp	r3, #1
 8002020:	d102      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x124>
 8002022:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002026:	e000      	b.n	800202a <HAL_ADC_ConfigChannel+0x126>
 8002028:	2300      	movs	r3, #0
 800202a:	461a      	mov	r2, r3
 800202c:	f7ff fcb4 	bl	8001998 <LL_ADC_SetOffsetSaturation>
 8002030:	e17b      	b.n	800232a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2100      	movs	r1, #0
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fc61 	bl	8001900 <LL_ADC_GetOffsetChannel>
 800203e:	4603      	mov	r3, r0
 8002040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10a      	bne.n	800205e <HAL_ADC_ConfigChannel+0x15a>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2100      	movs	r1, #0
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fc56 	bl	8001900 <LL_ADC_GetOffsetChannel>
 8002054:	4603      	mov	r3, r0
 8002056:	0e9b      	lsrs	r3, r3, #26
 8002058:	f003 021f 	and.w	r2, r3, #31
 800205c:	e01e      	b.n	800209c <HAL_ADC_ConfigChannel+0x198>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2100      	movs	r1, #0
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fc4b 	bl	8001900 <LL_ADC_GetOffsetChannel>
 800206a:	4603      	mov	r3, r0
 800206c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800207c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002080:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002084:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800208c:	2320      	movs	r3, #32
 800208e:	e004      	b.n	800209a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002090:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002094:	fab3 f383 	clz	r3, r3
 8002098:	b2db      	uxtb	r3, r3
 800209a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d105      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x1b0>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	0e9b      	lsrs	r3, r3, #26
 80020ae:	f003 031f 	and.w	r3, r3, #31
 80020b2:	e018      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x1e2>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80020c0:	fa93 f3a3 	rbit	r3, r3
 80020c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80020c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80020d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80020d8:	2320      	movs	r3, #32
 80020da:	e004      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80020dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020e0:	fab3 f383 	clz	r3, r3
 80020e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d106      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2200      	movs	r2, #0
 80020f0:	2100      	movs	r1, #0
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fc1a 	bl	800192c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2101      	movs	r1, #1
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff fbfe 	bl	8001900 <LL_ADC_GetOffsetChannel>
 8002104:	4603      	mov	r3, r0
 8002106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10a      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x220>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2101      	movs	r1, #1
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fbf3 	bl	8001900 <LL_ADC_GetOffsetChannel>
 800211a:	4603      	mov	r3, r0
 800211c:	0e9b      	lsrs	r3, r3, #26
 800211e:	f003 021f 	and.w	r2, r3, #31
 8002122:	e01e      	b.n	8002162 <HAL_ADC_ConfigChannel+0x25e>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2101      	movs	r1, #1
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fbe8 	bl	8001900 <LL_ADC_GetOffsetChannel>
 8002130:	4603      	mov	r3, r0
 8002132:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002136:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800213a:	fa93 f3a3 	rbit	r3, r3
 800213e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002146:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800214a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002152:	2320      	movs	r3, #32
 8002154:	e004      	b.n	8002160 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002156:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800216a:	2b00      	cmp	r3, #0
 800216c:	d105      	bne.n	800217a <HAL_ADC_ConfigChannel+0x276>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	0e9b      	lsrs	r3, r3, #26
 8002174:	f003 031f 	and.w	r3, r3, #31
 8002178:	e018      	b.n	80021ac <HAL_ADC_ConfigChannel+0x2a8>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002186:	fa93 f3a3 	rbit	r3, r3
 800218a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800218e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002192:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002196:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800219e:	2320      	movs	r3, #32
 80021a0:	e004      	b.n	80021ac <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80021a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80021a6:	fab3 f383 	clz	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d106      	bne.n	80021be <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2200      	movs	r2, #0
 80021b6:	2101      	movs	r1, #1
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff fbb7 	bl	800192c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2102      	movs	r1, #2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fb9b 	bl	8001900 <LL_ADC_GetOffsetChannel>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10a      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x2e6>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2102      	movs	r1, #2
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fb90 	bl	8001900 <LL_ADC_GetOffsetChannel>
 80021e0:	4603      	mov	r3, r0
 80021e2:	0e9b      	lsrs	r3, r3, #26
 80021e4:	f003 021f 	and.w	r2, r3, #31
 80021e8:	e01e      	b.n	8002228 <HAL_ADC_ConfigChannel+0x324>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2102      	movs	r1, #2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fb85 	bl	8001900 <LL_ADC_GetOffsetChannel>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002208:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800220c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002210:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002218:	2320      	movs	r3, #32
 800221a:	e004      	b.n	8002226 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800221c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002220:	fab3 f383 	clz	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002230:	2b00      	cmp	r3, #0
 8002232:	d105      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x33c>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	0e9b      	lsrs	r3, r3, #26
 800223a:	f003 031f 	and.w	r3, r3, #31
 800223e:	e016      	b.n	800226e <HAL_ADC_ConfigChannel+0x36a>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002248:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800224c:	fa93 f3a3 	rbit	r3, r3
 8002250:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002252:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002254:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002258:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002260:	2320      	movs	r3, #32
 8002262:	e004      	b.n	800226e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002264:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002268:	fab3 f383 	clz	r3, r3
 800226c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800226e:	429a      	cmp	r2, r3
 8002270:	d106      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2200      	movs	r2, #0
 8002278:	2102      	movs	r1, #2
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fb56 	bl	800192c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2103      	movs	r1, #3
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff fb3a 	bl	8001900 <LL_ADC_GetOffsetChannel>
 800228c:	4603      	mov	r3, r0
 800228e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10a      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x3a8>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2103      	movs	r1, #3
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fb2f 	bl	8001900 <LL_ADC_GetOffsetChannel>
 80022a2:	4603      	mov	r3, r0
 80022a4:	0e9b      	lsrs	r3, r3, #26
 80022a6:	f003 021f 	and.w	r2, r3, #31
 80022aa:	e017      	b.n	80022dc <HAL_ADC_ConfigChannel+0x3d8>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2103      	movs	r1, #3
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fb24 	bl	8001900 <LL_ADC_GetOffsetChannel>
 80022b8:	4603      	mov	r3, r0
 80022ba:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022be:	fa93 f3a3 	rbit	r3, r3
 80022c2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80022c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022c6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80022c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80022ce:	2320      	movs	r3, #32
 80022d0:	e003      	b.n	80022da <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80022d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022d4:	fab3 f383 	clz	r3, r3
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d105      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x3f0>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	0e9b      	lsrs	r3, r3, #26
 80022ee:	f003 031f 	and.w	r3, r3, #31
 80022f2:	e011      	b.n	8002318 <HAL_ADC_ConfigChannel+0x414>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022fc:	fa93 f3a3 	rbit	r3, r3
 8002300:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002302:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002304:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002306:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800230c:	2320      	movs	r3, #32
 800230e:	e003      	b.n	8002318 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002310:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002318:	429a      	cmp	r2, r3
 800231a:	d106      	bne.n	800232a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2200      	movs	r2, #0
 8002322:	2103      	movs	r1, #3
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fb01 	bl	800192c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff fc2a 	bl	8001b88 <LL_ADC_IsEnabled>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	f040 8140 	bne.w	80025bc <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6818      	ldr	r0, [r3, #0]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	6819      	ldr	r1, [r3, #0]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	461a      	mov	r2, r3
 800234a:	f7ff fbab 	bl	8001aa4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	4a8f      	ldr	r2, [pc, #572]	@ (8002590 <HAL_ADC_ConfigChannel+0x68c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	f040 8131 	bne.w	80025bc <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10b      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x47e>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	0e9b      	lsrs	r3, r3, #26
 8002370:	3301      	adds	r3, #1
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	2b09      	cmp	r3, #9
 8002378:	bf94      	ite	ls
 800237a:	2301      	movls	r3, #1
 800237c:	2300      	movhi	r3, #0
 800237e:	b2db      	uxtb	r3, r3
 8002380:	e019      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x4b2>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002388:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800238a:	fa93 f3a3 	rbit	r3, r3
 800238e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002390:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002392:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002394:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800239a:	2320      	movs	r3, #32
 800239c:	e003      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800239e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023a0:	fab3 f383 	clz	r3, r3
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	3301      	adds	r3, #1
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	2b09      	cmp	r3, #9
 80023ae:	bf94      	ite	ls
 80023b0:	2301      	movls	r3, #1
 80023b2:	2300      	movhi	r3, #0
 80023b4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d079      	beq.n	80024ae <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d107      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x4d2>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	0e9b      	lsrs	r3, r3, #26
 80023cc:	3301      	adds	r3, #1
 80023ce:	069b      	lsls	r3, r3, #26
 80023d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023d4:	e015      	b.n	8002402 <HAL_ADC_ConfigChannel+0x4fe>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023de:	fa93 f3a3 	rbit	r3, r3
 80023e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80023e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023e6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80023e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80023ee:	2320      	movs	r3, #32
 80023f0:	e003      	b.n	80023fa <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80023f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023f4:	fab3 f383 	clz	r3, r3
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	3301      	adds	r3, #1
 80023fc:	069b      	lsls	r3, r3, #26
 80023fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x51e>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	0e9b      	lsrs	r3, r3, #26
 8002414:	3301      	adds	r3, #1
 8002416:	f003 031f 	and.w	r3, r3, #31
 800241a:	2101      	movs	r1, #1
 800241c:	fa01 f303 	lsl.w	r3, r1, r3
 8002420:	e017      	b.n	8002452 <HAL_ADC_ConfigChannel+0x54e>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002428:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800242a:	fa93 f3a3 	rbit	r3, r3
 800242e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002430:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002432:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002434:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800243a:	2320      	movs	r3, #32
 800243c:	e003      	b.n	8002446 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800243e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002440:	fab3 f383 	clz	r3, r3
 8002444:	b2db      	uxtb	r3, r3
 8002446:	3301      	adds	r3, #1
 8002448:	f003 031f 	and.w	r3, r3, #31
 800244c:	2101      	movs	r1, #1
 800244e:	fa01 f303 	lsl.w	r3, r1, r3
 8002452:	ea42 0103 	orr.w	r1, r2, r3
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10a      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x574>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	0e9b      	lsrs	r3, r3, #26
 8002468:	3301      	adds	r3, #1
 800246a:	f003 021f 	and.w	r2, r3, #31
 800246e:	4613      	mov	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	4413      	add	r3, r2
 8002474:	051b      	lsls	r3, r3, #20
 8002476:	e018      	b.n	80024aa <HAL_ADC_ConfigChannel+0x5a6>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002480:	fa93 f3a3 	rbit	r3, r3
 8002484:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002488:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800248a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002490:	2320      	movs	r3, #32
 8002492:	e003      	b.n	800249c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002496:	fab3 f383 	clz	r3, r3
 800249a:	b2db      	uxtb	r3, r3
 800249c:	3301      	adds	r3, #1
 800249e:	f003 021f 	and.w	r2, r3, #31
 80024a2:	4613      	mov	r3, r2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	4413      	add	r3, r2
 80024a8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024aa:	430b      	orrs	r3, r1
 80024ac:	e081      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d107      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x5c6>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	0e9b      	lsrs	r3, r3, #26
 80024c0:	3301      	adds	r3, #1
 80024c2:	069b      	lsls	r3, r3, #26
 80024c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024c8:	e015      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x5f2>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d2:	fa93 f3a3 	rbit	r3, r3
 80024d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80024d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024da:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80024dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80024e2:	2320      	movs	r3, #32
 80024e4:	e003      	b.n	80024ee <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80024e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e8:	fab3 f383 	clz	r3, r3
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	3301      	adds	r3, #1
 80024f0:	069b      	lsls	r3, r3, #26
 80024f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d109      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x612>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	0e9b      	lsrs	r3, r3, #26
 8002508:	3301      	adds	r3, #1
 800250a:	f003 031f 	and.w	r3, r3, #31
 800250e:	2101      	movs	r1, #1
 8002510:	fa01 f303 	lsl.w	r3, r1, r3
 8002514:	e017      	b.n	8002546 <HAL_ADC_ConfigChannel+0x642>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	fa93 f3a3 	rbit	r3, r3
 8002522:	61fb      	str	r3, [r7, #28]
  return result;
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800252e:	2320      	movs	r3, #32
 8002530:	e003      	b.n	800253a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002534:	fab3 f383 	clz	r3, r3
 8002538:	b2db      	uxtb	r3, r3
 800253a:	3301      	adds	r3, #1
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	2101      	movs	r1, #1
 8002542:	fa01 f303 	lsl.w	r3, r1, r3
 8002546:	ea42 0103 	orr.w	r1, r2, r3
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10d      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x66e>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	0e9b      	lsrs	r3, r3, #26
 800255c:	3301      	adds	r3, #1
 800255e:	f003 021f 	and.w	r2, r3, #31
 8002562:	4613      	mov	r3, r2
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	4413      	add	r3, r2
 8002568:	3b1e      	subs	r3, #30
 800256a:	051b      	lsls	r3, r3, #20
 800256c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002570:	e01e      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x6ac>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	fa93 f3a3 	rbit	r3, r3
 800257e:	613b      	str	r3, [r7, #16]
  return result;
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d104      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800258a:	2320      	movs	r3, #32
 800258c:	e006      	b.n	800259c <HAL_ADC_ConfigChannel+0x698>
 800258e:	bf00      	nop
 8002590:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	fab3 f383 	clz	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	3301      	adds	r3, #1
 800259e:	f003 021f 	and.w	r2, r3, #31
 80025a2:	4613      	mov	r3, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	3b1e      	subs	r3, #30
 80025aa:	051b      	lsls	r3, r3, #20
 80025ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025b0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025b6:	4619      	mov	r1, r3
 80025b8:	f7ff fa48 	bl	8001a4c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4b3f      	ldr	r3, [pc, #252]	@ (80026c0 <HAL_ADC_ConfigChannel+0x7bc>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d071      	beq.n	80026ac <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025c8:	483e      	ldr	r0, [pc, #248]	@ (80026c4 <HAL_ADC_ConfigChannel+0x7c0>)
 80025ca:	f7ff f967 	bl	800189c <LL_ADC_GetCommonPathInternalCh>
 80025ce:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a3c      	ldr	r2, [pc, #240]	@ (80026c8 <HAL_ADC_ConfigChannel+0x7c4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d004      	beq.n	80025e6 <HAL_ADC_ConfigChannel+0x6e2>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a3a      	ldr	r2, [pc, #232]	@ (80026cc <HAL_ADC_ConfigChannel+0x7c8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d127      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d121      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025fa:	d157      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002600:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002604:	4619      	mov	r1, r3
 8002606:	482f      	ldr	r0, [pc, #188]	@ (80026c4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002608:	f7ff f935 	bl	8001876 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800260c:	4b30      	ldr	r3, [pc, #192]	@ (80026d0 <HAL_ADC_ConfigChannel+0x7cc>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	099b      	lsrs	r3, r3, #6
 8002612:	4a30      	ldr	r2, [pc, #192]	@ (80026d4 <HAL_ADC_ConfigChannel+0x7d0>)
 8002614:	fba2 2303 	umull	r2, r3, r2, r3
 8002618:	099b      	lsrs	r3, r3, #6
 800261a:	1c5a      	adds	r2, r3, #1
 800261c:	4613      	mov	r3, r2
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002626:	e002      	b.n	800262e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	3b01      	subs	r3, #1
 800262c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f9      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002634:	e03a      	b.n	80026ac <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a27      	ldr	r2, [pc, #156]	@ (80026d8 <HAL_ADC_ConfigChannel+0x7d4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d113      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002640:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002644:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10d      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a22      	ldr	r2, [pc, #136]	@ (80026dc <HAL_ADC_ConfigChannel+0x7d8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d02a      	beq.n	80026ac <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002656:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800265a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800265e:	4619      	mov	r1, r3
 8002660:	4818      	ldr	r0, [pc, #96]	@ (80026c4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002662:	f7ff f908 	bl	8001876 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002666:	e021      	b.n	80026ac <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a1c      	ldr	r2, [pc, #112]	@ (80026e0 <HAL_ADC_ConfigChannel+0x7dc>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d11c      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002672:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002676:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d116      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a16      	ldr	r2, [pc, #88]	@ (80026dc <HAL_ADC_ConfigChannel+0x7d8>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d011      	beq.n	80026ac <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002688:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800268c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002690:	4619      	mov	r1, r3
 8002692:	480c      	ldr	r0, [pc, #48]	@ (80026c4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002694:	f7ff f8ef 	bl	8001876 <LL_ADC_SetCommonPathInternalCh>
 8002698:	e008      	b.n	80026ac <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269e:	f043 0220 	orr.w	r2, r3, #32
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80026b4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	37d8      	adds	r7, #216	@ 0xd8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	80080000 	.word	0x80080000
 80026c4:	50000300 	.word	0x50000300
 80026c8:	c3210000 	.word	0xc3210000
 80026cc:	90c00010 	.word	0x90c00010
 80026d0:	20000000 	.word	0x20000000
 80026d4:	053e2d63 	.word	0x053e2d63
 80026d8:	c7520000 	.word	0xc7520000
 80026dc:	50000100 	.word	0x50000100
 80026e0:	cb840000 	.word	0xcb840000

080026e4 <LL_ADC_SetCommonPathInternalCh>:
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	609a      	str	r2, [r3, #8]
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <LL_ADC_GetCommonPathInternalCh>:
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <LL_ADC_SetOffset>:
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	3360      	adds	r3, #96	@ 0x60
 800273a:	461a      	mov	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4b08      	ldr	r3, [pc, #32]	@ (800276c <LL_ADC_SetOffset+0x44>)
 800274a:	4013      	ands	r3, r2
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	4313      	orrs	r3, r2
 8002758:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	601a      	str	r2, [r3, #0]
}
 8002760:	bf00      	nop
 8002762:	371c      	adds	r7, #28
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	03fff000 	.word	0x03fff000

08002770 <LL_ADC_GetOffsetChannel>:
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3360      	adds	r3, #96	@ 0x60
 800277e:	461a      	mov	r2, r3
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002790:	4618      	mov	r0, r3
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <LL_ADC_SetOffsetState>:
{
 800279c:	b480      	push	{r7}
 800279e:	b087      	sub	sp, #28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3360      	adds	r3, #96	@ 0x60
 80027ac:	461a      	mov	r2, r3
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	431a      	orrs	r2, r3
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	601a      	str	r2, [r3, #0]
}
 80027c6:	bf00      	nop
 80027c8:	371c      	adds	r7, #28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <LL_ADC_SetOffsetSign>:
{
 80027d2:	b480      	push	{r7}
 80027d4:	b087      	sub	sp, #28
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	3360      	adds	r3, #96	@ 0x60
 80027e2:	461a      	mov	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	431a      	orrs	r2, r3
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	601a      	str	r2, [r3, #0]
}
 80027fc:	bf00      	nop
 80027fe:	371c      	adds	r7, #28
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <LL_ADC_SetOffsetSaturation>:
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	3360      	adds	r3, #96	@ 0x60
 8002818:	461a      	mov	r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	431a      	orrs	r2, r3
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	601a      	str	r2, [r3, #0]
}
 8002832:	bf00      	nop
 8002834:	371c      	adds	r7, #28
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <LL_ADC_SetSamplingTimeCommonConfig>:
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	615a      	str	r2, [r3, #20]
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <LL_ADC_SetChannelSamplingTime>:
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	3314      	adds	r3, #20
 8002874:	461a      	mov	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	0e5b      	lsrs	r3, r3, #25
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	4413      	add	r3, r2
 8002882:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	0d1b      	lsrs	r3, r3, #20
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	2107      	movs	r1, #7
 8002892:	fa01 f303 	lsl.w	r3, r1, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	401a      	ands	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	0d1b      	lsrs	r3, r3, #20
 800289e:	f003 031f 	and.w	r3, r3, #31
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	fa01 f303 	lsl.w	r3, r1, r3
 80028a8:	431a      	orrs	r2, r3
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	601a      	str	r2, [r3, #0]
}
 80028ae:	bf00      	nop
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <LL_ADC_SetChannelSingleDiff>:
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d4:	43db      	mvns	r3, r3
 80028d6:	401a      	ands	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f003 0318 	and.w	r3, r3, #24
 80028de:	4908      	ldr	r1, [pc, #32]	@ (8002900 <LL_ADC_SetChannelSingleDiff+0x44>)
 80028e0:	40d9      	lsrs	r1, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	400b      	ands	r3, r1
 80028e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ea:	431a      	orrs	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 80028f2:	bf00      	nop
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	0007ffff 	.word	0x0007ffff

08002904 <LL_ADC_IsEnabled>:
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <LL_ADC_IsEnabled+0x18>
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <LL_ADC_IsEnabled+0x1a>
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <LL_ADC_REG_IsConversionOngoing>:
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	2b04      	cmp	r3, #4
 800293c:	d101      	bne.n	8002942 <LL_ADC_REG_IsConversionOngoing+0x18>
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <LL_ADC_INJ_IsConversionOngoing>:
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b08      	cmp	r3, #8
 8002962:	d101      	bne.n	8002968 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b0b6      	sub	sp, #216	@ 0xd8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8002988:	2300      	movs	r3, #0
 800298a:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002998:	2b01      	cmp	r3, #1
 800299a:	d102      	bne.n	80029a2 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 800299c:	2302      	movs	r3, #2
 800299e:	f000 bcb5 	b.w	800330c <HAL_ADCEx_InjectedConfigChannel+0x994>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d130      	bne.n	8002a1c <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b09      	cmp	r3, #9
 80029c0:	d179      	bne.n	8002ab6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d010      	beq.n	80029ec <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	0e9b      	lsrs	r3, r3, #26
 80029d0:	025b      	lsls	r3, r3, #9
 80029d2:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029da:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80029de:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029ea:	e007      	b.n	80029fc <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	0e9b      	lsrs	r3, r3, #26
 80029f2:	025b      	lsls	r3, r3, #9
 80029f4:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 80029f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a02:	4b84      	ldr	r3, [pc, #528]	@ (8002c14 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6812      	ldr	r2, [r2, #0]
 8002a0a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002a0e:	430b      	orrs	r3, r1
 8002a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002a18:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002a1a:	e04c      	b.n	8002ab6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d11d      	bne.n	8002a60 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	6a1a      	ldr	r2, [r3, #32]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00d      	beq.n	8002a56 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a44:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8002a48:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a54:	e004      	b.n	8002a60 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	0e9b      	lsrs	r3, r3, #26
 8002a66:	f003 021f 	and.w	r2, r3, #31
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 031f 	and.w	r3, r3, #31
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a84:	1e5a      	subs	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002a8e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10a      	bne.n	8002ab6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002aa6:	4b5b      	ldr	r3, [pc, #364]	@ (8002c14 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6812      	ldr	r2, [r2, #0]
 8002ab2:	430b      	orrs	r3, r1
 8002ab4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff ff48 	bl	8002950 <LL_ADC_INJ_IsConversionOngoing>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d124      	bne.n	8002b10 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d112      	bne.n	8002af6 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002ae0:	055a      	lsls	r2, r3, #21
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ae8:	051b      	lsls	r3, r3, #20
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	60da      	str	r2, [r3, #12]
 8002af4:	e00c      	b.n	8002b10 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002b06:	055a      	lsls	r2, r3, #21
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ff08 	bl	800292a <LL_ADC_REG_IsConversionOngoing>
 8002b1a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff ff14 	bl	8002950 <LL_ADC_INJ_IsConversionOngoing>
 8002b28:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f040 822e 	bne.w	8002f92 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f040 8229 	bne.w	8002f92 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d116      	bne.n	8002b7e <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d108      	bne.n	8002b6c <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8002b68:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8002b6a:	e01f      	b.n	8002bac <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8002b7a:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8002b7c:	e016      	b.n	8002bac <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d109      	bne.n	8002b9c <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b8c:	f043 0220 	orr.w	r2, r3, #32
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002b9a:	e007      	b.n	8002bac <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8002baa:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d110      	bne.n	8002bd8 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 0202 	orr.w	r2, r2, #2
 8002bd4:	611a      	str	r2, [r3, #16]
 8002bd6:	e007      	b.n	8002be8 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691a      	ldr	r2, [r3, #16]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0202 	bic.w	r2, r2, #2
 8002be6:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002bf0:	d112      	bne.n	8002c18 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6818      	ldr	r0, [r3, #0]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f7ff fe31 	bl	8002864 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff fe17 	bl	800283e <LL_ADC_SetSamplingTimeCommonConfig>
 8002c10:	e011      	b.n	8002c36 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8002c12:	bf00      	nop
 8002c14:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8002c24:	461a      	mov	r2, r3
 8002c26:	f7ff fe1d 	bl	8002864 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff fe04 	bl	800283e <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	08db      	lsrs	r3, r3, #3
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d022      	beq.n	8002c9e <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	6919      	ldr	r1, [r3, #16]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c68:	f7ff fd5e 	bl	8002728 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	6919      	ldr	r1, [r3, #16]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	f7ff fdaa 	bl	80027d2 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d102      	bne.n	8002c94 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8002c8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c92:	e000      	b.n	8002c96 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8002c94:	2300      	movs	r3, #0
 8002c96:	461a      	mov	r2, r3
 8002c98:	f7ff fdb6 	bl	8002808 <LL_ADC_SetOffsetSaturation>
 8002c9c:	e179      	b.n	8002f92 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fd63 	bl	8002770 <LL_ADC_GetOffsetChannel>
 8002caa:	4603      	mov	r3, r0
 8002cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10a      	bne.n	8002cca <HAL_ADCEx_InjectedConfigChannel+0x352>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2100      	movs	r1, #0
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff fd58 	bl	8002770 <LL_ADC_GetOffsetChannel>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	0e9b      	lsrs	r3, r3, #26
 8002cc4:	f003 021f 	and.w	r2, r3, #31
 8002cc8:	e01e      	b.n	8002d08 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2100      	movs	r1, #0
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff fd4d 	bl	8002770 <LL_ADC_GetOffsetChannel>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ce0:	fa93 f3a3 	rbit	r3, r3
 8002ce4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8002ce8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002cec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8002cf0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8002cf8:	2320      	movs	r3, #32
 8002cfa:	e004      	b.n	8002d06 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8002cfc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d00:	fab3 f383 	clz	r3, r3
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d105      	bne.n	8002d20 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	0e9b      	lsrs	r3, r3, #26
 8002d1a:	f003 031f 	and.w	r3, r3, #31
 8002d1e:	e018      	b.n	8002d52 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d2c:	fa93 f3a3 	rbit	r3, r3
 8002d30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002d34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002d3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8002d44:	2320      	movs	r3, #32
 8002d46:	e004      	b.n	8002d52 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8002d48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d4c:	fab3 f383 	clz	r3, r3
 8002d50:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d106      	bne.n	8002d64 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fd1c 	bl	800279c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2101      	movs	r1, #1
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fd00 	bl	8002770 <LL_ADC_GetOffsetChannel>
 8002d70:	4603      	mov	r3, r0
 8002d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10a      	bne.n	8002d90 <HAL_ADCEx_InjectedConfigChannel+0x418>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2101      	movs	r1, #1
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff fcf5 	bl	8002770 <LL_ADC_GetOffsetChannel>
 8002d86:	4603      	mov	r3, r0
 8002d88:	0e9b      	lsrs	r3, r3, #26
 8002d8a:	f003 021f 	and.w	r2, r3, #31
 8002d8e:	e01e      	b.n	8002dce <HAL_ADCEx_InjectedConfigChannel+0x456>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2101      	movs	r1, #1
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff fcea 	bl	8002770 <LL_ADC_GetOffsetChannel>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002dae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002db2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002db6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8002dbe:	2320      	movs	r3, #32
 8002dc0:	e004      	b.n	8002dcc <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8002dc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002dc6:	fab3 f383 	clz	r3, r3
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d105      	bne.n	8002de6 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	0e9b      	lsrs	r3, r3, #26
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	e018      	b.n	8002e18 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002df2:	fa93 f3a3 	rbit	r3, r3
 8002df6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002dfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002dfe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002e02:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8002e0a:	2320      	movs	r3, #32
 8002e0c:	e004      	b.n	8002e18 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8002e0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d106      	bne.n	8002e2a <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2200      	movs	r2, #0
 8002e22:	2101      	movs	r1, #1
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff fcb9 	bl	800279c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2102      	movs	r1, #2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff fc9d 	bl	8002770 <LL_ADC_GetOffsetChannel>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10a      	bne.n	8002e56 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2102      	movs	r1, #2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff fc92 	bl	8002770 <LL_ADC_GetOffsetChannel>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	0e9b      	lsrs	r3, r3, #26
 8002e50:	f003 021f 	and.w	r2, r3, #31
 8002e54:	e01e      	b.n	8002e94 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2102      	movs	r1, #2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fc87 	bl	8002770 <LL_ADC_GetOffsetChannel>
 8002e62:	4603      	mov	r3, r0
 8002e64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e6c:	fa93 f3a3 	rbit	r3, r3
 8002e70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002e74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002e7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8002e84:	2320      	movs	r3, #32
 8002e86:	e004      	b.n	8002e92 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8002e88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e8c:	fab3 f383 	clz	r3, r3
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d105      	bne.n	8002eac <HAL_ADCEx_InjectedConfigChannel+0x534>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	0e9b      	lsrs	r3, r3, #26
 8002ea6:	f003 031f 	and.w	r3, r3, #31
 8002eaa:	e014      	b.n	8002ed6 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002eb4:	fa93 f3a3 	rbit	r3, r3
 8002eb8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002eba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ebc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002ec0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8002ec8:	2320      	movs	r3, #32
 8002eca:	e004      	b.n	8002ed6 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8002ecc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ed0:	fab3 f383 	clz	r3, r3
 8002ed4:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d106      	bne.n	8002ee8 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2102      	movs	r1, #2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff fc5a 	bl	800279c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2103      	movs	r1, #3
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff fc3e 	bl	8002770 <LL_ADC_GetOffsetChannel>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10a      	bne.n	8002f14 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2103      	movs	r1, #3
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fc33 	bl	8002770 <LL_ADC_GetOffsetChannel>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	0e9b      	lsrs	r3, r3, #26
 8002f0e:	f003 021f 	and.w	r2, r3, #31
 8002f12:	e017      	b.n	8002f44 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2103      	movs	r1, #3
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fc28 	bl	8002770 <LL_ADC_GetOffsetChannel>
 8002f20:	4603      	mov	r3, r0
 8002f22:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f26:	fa93 f3a3 	rbit	r3, r3
 8002f2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002f2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f2e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002f30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8002f36:	2320      	movs	r3, #32
 8002f38:	e003      	b.n	8002f42 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8002f3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f3c:	fab3 f383 	clz	r3, r3
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d105      	bne.n	8002f5c <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	0e9b      	lsrs	r3, r3, #26
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	e011      	b.n	8002f80 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f64:	fa93 f3a3 	rbit	r3, r3
 8002f68:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002f6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f6c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002f6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8002f74:	2320      	movs	r3, #32
 8002f76:	e003      	b.n	8002f80 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8002f78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f7a:	fab3 f383 	clz	r3, r3
 8002f7e:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d106      	bne.n	8002f92 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2103      	movs	r1, #3
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fc05 	bl	800279c <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fcb4 	bl	8002904 <LL_ADC_IsEnabled>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f040 8140 	bne.w	8003224 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6819      	ldr	r1, [r3, #0]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	f7ff fc83 	bl	80028bc <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	4a8f      	ldr	r2, [pc, #572]	@ (80031f8 <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	f040 8131 	bne.w	8003224 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10b      	bne.n	8002fea <HAL_ADCEx_InjectedConfigChannel+0x672>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	0e9b      	lsrs	r3, r3, #26
 8002fd8:	3301      	adds	r3, #1
 8002fda:	f003 031f 	and.w	r3, r3, #31
 8002fde:	2b09      	cmp	r3, #9
 8002fe0:	bf94      	ite	ls
 8002fe2:	2301      	movls	r3, #1
 8002fe4:	2300      	movhi	r3, #0
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	e019      	b.n	800301e <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ff2:	fa93 f3a3 	rbit	r3, r3
 8002ff6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ffa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002ffc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8003002:	2320      	movs	r3, #32
 8003004:	e003      	b.n	800300e <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8003006:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003008:	fab3 f383 	clz	r3, r3
 800300c:	b2db      	uxtb	r3, r3
 800300e:	3301      	adds	r3, #1
 8003010:	f003 031f 	and.w	r3, r3, #31
 8003014:	2b09      	cmp	r3, #9
 8003016:	bf94      	ite	ls
 8003018:	2301      	movls	r3, #1
 800301a:	2300      	movhi	r3, #0
 800301c:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800301e:	2b00      	cmp	r3, #0
 8003020:	d079      	beq.n	8003116 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800302a:	2b00      	cmp	r3, #0
 800302c:	d107      	bne.n	800303e <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	0e9b      	lsrs	r3, r3, #26
 8003034:	3301      	adds	r3, #1
 8003036:	069b      	lsls	r3, r3, #26
 8003038:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800303c:	e015      	b.n	800306a <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800304c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800304e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003050:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8003056:	2320      	movs	r3, #32
 8003058:	e003      	b.n	8003062 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 800305a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800305c:	fab3 f383 	clz	r3, r3
 8003060:	b2db      	uxtb	r3, r3
 8003062:	3301      	adds	r3, #1
 8003064:	069b      	lsls	r3, r3, #26
 8003066:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <HAL_ADCEx_InjectedConfigChannel+0x712>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	0e9b      	lsrs	r3, r3, #26
 800307c:	3301      	adds	r3, #1
 800307e:	f003 031f 	and.w	r3, r3, #31
 8003082:	2101      	movs	r1, #1
 8003084:	fa01 f303 	lsl.w	r3, r1, r3
 8003088:	e017      	b.n	80030ba <HAL_ADCEx_InjectedConfigChannel+0x742>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003092:	fa93 f3a3 	rbit	r3, r3
 8003096:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800309a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800309c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 80030a2:	2320      	movs	r3, #32
 80030a4:	e003      	b.n	80030ae <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 80030a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030a8:	fab3 f383 	clz	r3, r3
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	3301      	adds	r3, #1
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	2101      	movs	r1, #1
 80030b6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ba:	ea42 0103 	orr.w	r1, r2, r3
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10a      	bne.n	80030e0 <HAL_ADCEx_InjectedConfigChannel+0x768>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	0e9b      	lsrs	r3, r3, #26
 80030d0:	3301      	adds	r3, #1
 80030d2:	f003 021f 	and.w	r2, r3, #31
 80030d6:	4613      	mov	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4413      	add	r3, r2
 80030dc:	051b      	lsls	r3, r3, #20
 80030de:	e018      	b.n	8003112 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030e8:	fa93 f3a3 	rbit	r3, r3
 80030ec:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80030ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80030f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 80030f8:	2320      	movs	r3, #32
 80030fa:	e003      	b.n	8003104 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 80030fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030fe:	fab3 f383 	clz	r3, r3
 8003102:	b2db      	uxtb	r3, r3
 8003104:	3301      	adds	r3, #1
 8003106:	f003 021f 	and.w	r2, r3, #31
 800310a:	4613      	mov	r3, r2
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	4413      	add	r3, r2
 8003110:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003112:	430b      	orrs	r3, r1
 8003114:	e081      	b.n	800321a <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800311e:	2b00      	cmp	r3, #0
 8003120:	d107      	bne.n	8003132 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	0e9b      	lsrs	r3, r3, #26
 8003128:	3301      	adds	r3, #1
 800312a:	069b      	lsls	r3, r3, #26
 800312c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003130:	e015      	b.n	800315e <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800313a:	fa93 f3a3 	rbit	r3, r3
 800313e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 800314a:	2320      	movs	r3, #32
 800314c:	e003      	b.n	8003156 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 800314e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003150:	fab3 f383 	clz	r3, r3
 8003154:	b2db      	uxtb	r3, r3
 8003156:	3301      	adds	r3, #1
 8003158:	069b      	lsls	r3, r3, #26
 800315a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003166:	2b00      	cmp	r3, #0
 8003168:	d109      	bne.n	800317e <HAL_ADCEx_InjectedConfigChannel+0x806>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	0e9b      	lsrs	r3, r3, #26
 8003170:	3301      	adds	r3, #1
 8003172:	f003 031f 	and.w	r3, r3, #31
 8003176:	2101      	movs	r1, #1
 8003178:	fa01 f303 	lsl.w	r3, r1, r3
 800317c:	e017      	b.n	80031ae <HAL_ADCEx_InjectedConfigChannel+0x836>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	fa93 f3a3 	rbit	r3, r3
 800318a:	61bb      	str	r3, [r7, #24]
  return result;
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8003196:	2320      	movs	r3, #32
 8003198:	e003      	b.n	80031a2 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	fab3 f383 	clz	r3, r3
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	3301      	adds	r3, #1
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	2101      	movs	r1, #1
 80031aa:	fa01 f303 	lsl.w	r3, r1, r3
 80031ae:	ea42 0103 	orr.w	r1, r2, r3
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10d      	bne.n	80031da <HAL_ADCEx_InjectedConfigChannel+0x862>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	0e9b      	lsrs	r3, r3, #26
 80031c4:	3301      	adds	r3, #1
 80031c6:	f003 021f 	and.w	r2, r3, #31
 80031ca:	4613      	mov	r3, r2
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	4413      	add	r3, r2
 80031d0:	3b1e      	subs	r3, #30
 80031d2:	051b      	lsls	r3, r3, #20
 80031d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031d8:	e01e      	b.n	8003218 <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	fa93 f3a3 	rbit	r3, r3
 80031e6:	60fb      	str	r3, [r7, #12]
  return result;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d104      	bne.n	80031fc <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 80031f2:	2320      	movs	r3, #32
 80031f4:	e006      	b.n	8003204 <HAL_ADCEx_InjectedConfigChannel+0x88c>
 80031f6:	bf00      	nop
 80031f8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	fab3 f383 	clz	r3, r3
 8003202:	b2db      	uxtb	r3, r3
 8003204:	3301      	adds	r3, #1
 8003206:	f003 021f 	and.w	r2, r3, #31
 800320a:	4613      	mov	r3, r2
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	4413      	add	r3, r2
 8003210:	3b1e      	subs	r3, #30
 8003212:	051b      	lsls	r3, r3, #20
 8003214:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003218:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800321e:	4619      	mov	r1, r3
 8003220:	f7ff fb20 	bl	8002864 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4b3a      	ldr	r3, [pc, #232]	@ (8003314 <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 800322a:	4013      	ands	r3, r2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d067      	beq.n	8003300 <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003230:	4839      	ldr	r0, [pc, #228]	@ (8003318 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8003232:	f7ff fa6a 	bl	800270a <LL_ADC_GetCommonPathInternalCh>
 8003236:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a37      	ldr	r2, [pc, #220]	@ (800331c <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d004      	beq.n	800324e <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a35      	ldr	r2, [pc, #212]	@ (8003320 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d127      	bne.n	800329e <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800324e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003252:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d121      	bne.n	800329e <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003262:	d14d      	bne.n	8003300 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003264:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003268:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800326c:	4619      	mov	r1, r3
 800326e:	482a      	ldr	r0, [pc, #168]	@ (8003318 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8003270:	f7ff fa38 	bl	80026e4 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8003274:	4b2b      	ldr	r3, [pc, #172]	@ (8003324 <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	099b      	lsrs	r3, r3, #6
 800327a:	4a2b      	ldr	r2, [pc, #172]	@ (8003328 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 800327c:	fba2 2303 	umull	r2, r3, r2, r3
 8003280:	099a      	lsrs	r2, r3, #6
 8003282:	4613      	mov	r3, r2
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800328c:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 800328e:	e002      	b.n	8003296 <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	3b01      	subs	r3, #1
 8003294:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1f9      	bne.n	8003290 <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800329c:	e030      	b.n	8003300 <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a22      	ldr	r2, [pc, #136]	@ (800332c <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d113      	bne.n	80032d0 <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10d      	bne.n	80032d0 <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003330 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d020      	beq.n	8003300 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032c6:	4619      	mov	r1, r3
 80032c8:	4813      	ldr	r0, [pc, #76]	@ (8003318 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80032ca:	f7ff fa0b 	bl	80026e4 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032ce:	e017      	b.n	8003300 <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a17      	ldr	r2, [pc, #92]	@ (8003334 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d112      	bne.n	8003300 <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10c      	bne.n	8003300 <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a11      	ldr	r2, [pc, #68]	@ (8003330 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d007      	beq.n	8003300 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80032f8:	4619      	mov	r1, r3
 80032fa:	4807      	ldr	r0, [pc, #28]	@ (8003318 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80032fc:	f7ff f9f2 	bl	80026e4 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003308:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800330c:	4618      	mov	r0, r3
 800330e:	37d8      	adds	r7, #216	@ 0xd8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	80080000 	.word	0x80080000
 8003318:	50000300 	.word	0x50000300
 800331c:	c3210000 	.word	0xc3210000
 8003320:	90c00010 	.word	0x90c00010
 8003324:	20000000 	.word	0x20000000
 8003328:	053e2d63 	.word	0x053e2d63
 800332c:	c7520000 	.word	0xc7520000
 8003330:	50000100 	.word	0x50000100
 8003334:	cb840000 	.word	0xcb840000

08003338 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003338:	b590      	push	{r4, r7, lr}
 800333a:	b0a1      	sub	sp, #132	@ 0x84
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003352:	2302      	movs	r3, #2
 8003354:	e08b      	b.n	800346e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800335e:	2300      	movs	r3, #0
 8003360:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003362:	2300      	movs	r3, #0
 8003364:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800336e:	d102      	bne.n	8003376 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003370:	4b41      	ldr	r3, [pc, #260]	@ (8003478 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003372:	60bb      	str	r3, [r7, #8]
 8003374:	e001      	b.n	800337a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003376:	2300      	movs	r3, #0
 8003378:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10b      	bne.n	8003398 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003384:	f043 0220 	orr.w	r2, r3, #32
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e06a      	b.n	800346e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff fac5 	bl	800292a <LL_ADC_REG_IsConversionOngoing>
 80033a0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff fabf 	bl	800292a <LL_ADC_REG_IsConversionOngoing>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d14c      	bne.n	800344c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80033b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d149      	bne.n	800344c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033b8:	4b30      	ldr	r3, [pc, #192]	@ (800347c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80033ba:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d028      	beq.n	8003416 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80033c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	6859      	ldr	r1, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80033d6:	035b      	lsls	r3, r3, #13
 80033d8:	430b      	orrs	r3, r1
 80033da:	431a      	orrs	r2, r3
 80033dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033de:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033e0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80033e4:	f7ff fa8e 	bl	8002904 <LL_ADC_IsEnabled>
 80033e8:	4604      	mov	r4, r0
 80033ea:	4823      	ldr	r0, [pc, #140]	@ (8003478 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80033ec:	f7ff fa8a 	bl	8002904 <LL_ADC_IsEnabled>
 80033f0:	4603      	mov	r3, r0
 80033f2:	4323      	orrs	r3, r4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d133      	bne.n	8003460 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003400:	f023 030f 	bic.w	r3, r3, #15
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	6811      	ldr	r1, [r2, #0]
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	6892      	ldr	r2, [r2, #8]
 800340c:	430a      	orrs	r2, r1
 800340e:	431a      	orrs	r2, r3
 8003410:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003412:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003414:	e024      	b.n	8003460 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003416:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800341e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003420:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003422:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003426:	f7ff fa6d 	bl	8002904 <LL_ADC_IsEnabled>
 800342a:	4604      	mov	r4, r0
 800342c:	4812      	ldr	r0, [pc, #72]	@ (8003478 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800342e:	f7ff fa69 	bl	8002904 <LL_ADC_IsEnabled>
 8003432:	4603      	mov	r3, r0
 8003434:	4323      	orrs	r3, r4
 8003436:	2b00      	cmp	r3, #0
 8003438:	d112      	bne.n	8003460 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800343a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003442:	f023 030f 	bic.w	r3, r3, #15
 8003446:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003448:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800344a:	e009      	b.n	8003460 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003450:	f043 0220 	orr.w	r2, r3, #32
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800345e:	e000      	b.n	8003462 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003460:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800346a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800346e:	4618      	mov	r0, r3
 8003470:	3784      	adds	r7, #132	@ 0x84
 8003472:	46bd      	mov	sp, r7
 8003474:	bd90      	pop	{r4, r7, pc}
 8003476:	bf00      	nop
 8003478:	50000100 	.word	0x50000100
 800347c:	50000300 	.word	0x50000300

08003480 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003490:	4b0c      	ldr	r3, [pc, #48]	@ (80034c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800349c:	4013      	ands	r3, r2
 800349e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034b2:	4a04      	ldr	r2, [pc, #16]	@ (80034c4 <__NVIC_SetPriorityGrouping+0x44>)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	60d3      	str	r3, [r2, #12]
}
 80034b8:	bf00      	nop
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	e000ed00 	.word	0xe000ed00

080034c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034cc:	4b04      	ldr	r3, [pc, #16]	@ (80034e0 <__NVIC_GetPriorityGrouping+0x18>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	0a1b      	lsrs	r3, r3, #8
 80034d2:	f003 0307 	and.w	r3, r3, #7
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	e000ed00 	.word	0xe000ed00

080034e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	db0b      	blt.n	800350e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	f003 021f 	and.w	r2, r3, #31
 80034fc:	4907      	ldr	r1, [pc, #28]	@ (800351c <__NVIC_EnableIRQ+0x38>)
 80034fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	2001      	movs	r0, #1
 8003506:	fa00 f202 	lsl.w	r2, r0, r2
 800350a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	e000e100 	.word	0xe000e100

08003520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	6039      	str	r1, [r7, #0]
 800352a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800352c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003530:	2b00      	cmp	r3, #0
 8003532:	db0a      	blt.n	800354a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	b2da      	uxtb	r2, r3
 8003538:	490c      	ldr	r1, [pc, #48]	@ (800356c <__NVIC_SetPriority+0x4c>)
 800353a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353e:	0112      	lsls	r2, r2, #4
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	440b      	add	r3, r1
 8003544:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003548:	e00a      	b.n	8003560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	b2da      	uxtb	r2, r3
 800354e:	4908      	ldr	r1, [pc, #32]	@ (8003570 <__NVIC_SetPriority+0x50>)
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	3b04      	subs	r3, #4
 8003558:	0112      	lsls	r2, r2, #4
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	440b      	add	r3, r1
 800355e:	761a      	strb	r2, [r3, #24]
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	e000e100 	.word	0xe000e100
 8003570:	e000ed00 	.word	0xe000ed00

08003574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003574:	b480      	push	{r7}
 8003576:	b089      	sub	sp, #36	@ 0x24
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	f1c3 0307 	rsb	r3, r3, #7
 800358e:	2b04      	cmp	r3, #4
 8003590:	bf28      	it	cs
 8003592:	2304      	movcs	r3, #4
 8003594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	3304      	adds	r3, #4
 800359a:	2b06      	cmp	r3, #6
 800359c:	d902      	bls.n	80035a4 <NVIC_EncodePriority+0x30>
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	3b03      	subs	r3, #3
 80035a2:	e000      	b.n	80035a6 <NVIC_EncodePriority+0x32>
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a8:	f04f 32ff 	mov.w	r2, #4294967295
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43da      	mvns	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	401a      	ands	r2, r3
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035bc:	f04f 31ff 	mov.w	r1, #4294967295
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	fa01 f303 	lsl.w	r3, r1, r3
 80035c6:	43d9      	mvns	r1, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035cc:	4313      	orrs	r3, r2
         );
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3724      	adds	r7, #36	@ 0x24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
	...

080035dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035ec:	d301      	bcc.n	80035f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035ee:	2301      	movs	r3, #1
 80035f0:	e00f      	b.n	8003612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035f2:	4a0a      	ldr	r2, [pc, #40]	@ (800361c <SysTick_Config+0x40>)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035fa:	210f      	movs	r1, #15
 80035fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003600:	f7ff ff8e 	bl	8003520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003604:	4b05      	ldr	r3, [pc, #20]	@ (800361c <SysTick_Config+0x40>)
 8003606:	2200      	movs	r2, #0
 8003608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800360a:	4b04      	ldr	r3, [pc, #16]	@ (800361c <SysTick_Config+0x40>)
 800360c:	2207      	movs	r2, #7
 800360e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	e000e010 	.word	0xe000e010

08003620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7ff ff29 	bl	8003480 <__NVIC_SetPriorityGrouping>
}
 800362e:	bf00      	nop
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b086      	sub	sp, #24
 800363a:	af00      	add	r7, sp, #0
 800363c:	4603      	mov	r3, r0
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	607a      	str	r2, [r7, #4]
 8003642:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003644:	f7ff ff40 	bl	80034c8 <__NVIC_GetPriorityGrouping>
 8003648:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	68b9      	ldr	r1, [r7, #8]
 800364e:	6978      	ldr	r0, [r7, #20]
 8003650:	f7ff ff90 	bl	8003574 <NVIC_EncodePriority>
 8003654:	4602      	mov	r2, r0
 8003656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800365a:	4611      	mov	r1, r2
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff ff5f 	bl	8003520 <__NVIC_SetPriority>
}
 8003662:	bf00      	nop
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b082      	sub	sp, #8
 800366e:	af00      	add	r7, sp, #0
 8003670:	4603      	mov	r3, r0
 8003672:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff ff33 	bl	80034e4 <__NVIC_EnableIRQ>
}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff ffa4 	bl	80035dc <SysTick_Config>
 8003694:	4603      	mov	r3, r0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e08d      	b.n	80037ce <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	4b47      	ldr	r3, [pc, #284]	@ (80037d8 <HAL_DMA_Init+0x138>)
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d80f      	bhi.n	80036de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	4b45      	ldr	r3, [pc, #276]	@ (80037dc <HAL_DMA_Init+0x13c>)
 80036c6:	4413      	add	r3, r2
 80036c8:	4a45      	ldr	r2, [pc, #276]	@ (80037e0 <HAL_DMA_Init+0x140>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	091b      	lsrs	r3, r3, #4
 80036d0:	009a      	lsls	r2, r3, #2
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a42      	ldr	r2, [pc, #264]	@ (80037e4 <HAL_DMA_Init+0x144>)
 80036da:	641a      	str	r2, [r3, #64]	@ 0x40
 80036dc:	e00e      	b.n	80036fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	461a      	mov	r2, r3
 80036e4:	4b40      	ldr	r3, [pc, #256]	@ (80037e8 <HAL_DMA_Init+0x148>)
 80036e6:	4413      	add	r3, r2
 80036e8:	4a3d      	ldr	r2, [pc, #244]	@ (80037e0 <HAL_DMA_Init+0x140>)
 80036ea:	fba2 2303 	umull	r2, r3, r2, r3
 80036ee:	091b      	lsrs	r3, r3, #4
 80036f0:	009a      	lsls	r2, r3, #2
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a3c      	ldr	r2, [pc, #240]	@ (80037ec <HAL_DMA_Init+0x14c>)
 80036fa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003716:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003720:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800372c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003738:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f8fe 	bl	8003950 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800375c:	d102      	bne.n	8003764 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003778:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d010      	beq.n	80037a4 <HAL_DMA_Init+0x104>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b04      	cmp	r3, #4
 8003788:	d80c      	bhi.n	80037a4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f91e 	bl	80039cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037a0:	605a      	str	r2, [r3, #4]
 80037a2:	e008      	b.n	80037b6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40020407 	.word	0x40020407
 80037dc:	bffdfff8 	.word	0xbffdfff8
 80037e0:	cccccccd 	.word	0xcccccccd
 80037e4:	40020000 	.word	0x40020000
 80037e8:	bffdfbf8 	.word	0xbffdfbf8
 80037ec:	40020400 	.word	0x40020400

080037f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	2204      	movs	r2, #4
 8003812:	409a      	lsls	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4013      	ands	r3, r2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d026      	beq.n	800386a <HAL_DMA_IRQHandler+0x7a>
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b00      	cmp	r3, #0
 8003824:	d021      	beq.n	800386a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b00      	cmp	r3, #0
 8003832:	d107      	bne.n	8003844 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0204 	bic.w	r2, r2, #4
 8003842:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003848:	f003 021f 	and.w	r2, r3, #31
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003850:	2104      	movs	r1, #4
 8003852:	fa01 f202 	lsl.w	r2, r1, r2
 8003856:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385c:	2b00      	cmp	r3, #0
 800385e:	d071      	beq.n	8003944 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003868:	e06c      	b.n	8003944 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386e:	f003 031f 	and.w	r3, r3, #31
 8003872:	2202      	movs	r2, #2
 8003874:	409a      	lsls	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4013      	ands	r3, r2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d02e      	beq.n	80038dc <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d029      	beq.n	80038dc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0320 	and.w	r3, r3, #32
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10b      	bne.n	80038ae <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 020a 	bic.w	r2, r2, #10
 80038a4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b2:	f003 021f 	and.w	r2, r3, #31
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ba:	2102      	movs	r1, #2
 80038bc:	fa01 f202 	lsl.w	r2, r1, r2
 80038c0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d038      	beq.n	8003944 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80038da:	e033      	b.n	8003944 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e0:	f003 031f 	and.w	r3, r3, #31
 80038e4:	2208      	movs	r2, #8
 80038e6:	409a      	lsls	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4013      	ands	r3, r2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d02a      	beq.n	8003946 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d025      	beq.n	8003946 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 020e 	bic.w	r2, r2, #14
 8003908:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390e:	f003 021f 	and.w	r2, r3, #31
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003916:	2101      	movs	r1, #1
 8003918:	fa01 f202 	lsl.w	r2, r1, r2
 800391c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003938:	2b00      	cmp	r3, #0
 800393a:	d004      	beq.n	8003946 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003944:	bf00      	nop
 8003946:	bf00      	nop
}
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	4b16      	ldr	r3, [pc, #88]	@ (80039b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003960:	429a      	cmp	r2, r3
 8003962:	d802      	bhi.n	800396a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003964:	4b15      	ldr	r3, [pc, #84]	@ (80039bc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	e001      	b.n	800396e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800396a:	4b15      	ldr	r3, [pc, #84]	@ (80039c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800396c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	b2db      	uxtb	r3, r3
 8003978:	3b08      	subs	r3, #8
 800397a:	4a12      	ldr	r2, [pc, #72]	@ (80039c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800397c:	fba2 2303 	umull	r2, r3, r2, r3
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003988:	089b      	lsrs	r3, r3, #2
 800398a:	009a      	lsls	r2, r3, #2
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4413      	add	r3, r2
 8003990:	461a      	mov	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a0b      	ldr	r2, [pc, #44]	@ (80039c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800399a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f003 031f 	and.w	r3, r3, #31
 80039a2:	2201      	movs	r2, #1
 80039a4:	409a      	lsls	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80039aa:	bf00      	nop
 80039ac:	371c      	adds	r7, #28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40020407 	.word	0x40020407
 80039bc:	40020800 	.word	0x40020800
 80039c0:	40020820 	.word	0x40020820
 80039c4:	cccccccd 	.word	0xcccccccd
 80039c8:	40020880 	.word	0x40020880

080039cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4b0b      	ldr	r3, [pc, #44]	@ (8003a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80039e0:	4413      	add	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	461a      	mov	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a08      	ldr	r2, [pc, #32]	@ (8003a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80039ee:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	f003 031f 	and.w	r3, r3, #31
 80039f8:	2201      	movs	r2, #1
 80039fa:	409a      	lsls	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003a00:	bf00      	nop
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	1000823f 	.word	0x1000823f
 8003a10:	40020940 	.word	0x40020940

08003a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a22:	e15a      	b.n	8003cda <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	2101      	movs	r1, #1
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a30:	4013      	ands	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 814c 	beq.w	8003cd4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f003 0303 	and.w	r3, r3, #3
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d005      	beq.n	8003a54 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d130      	bne.n	8003ab6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	2203      	movs	r2, #3
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	43db      	mvns	r3, r3
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	43db      	mvns	r3, r3
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4013      	ands	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	091b      	lsrs	r3, r3, #4
 8003aa0:	f003 0201 	and.w	r2, r3, #1
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	d017      	beq.n	8003af2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	2203      	movs	r2, #3
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d123      	bne.n	8003b46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	08da      	lsrs	r2, r3, #3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3208      	adds	r2, #8
 8003b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	220f      	movs	r2, #15
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	691a      	ldr	r2, [r3, #16]
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	08da      	lsrs	r2, r3, #3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3208      	adds	r2, #8
 8003b40:	6939      	ldr	r1, [r7, #16]
 8003b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	2203      	movs	r2, #3
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43db      	mvns	r3, r3
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f003 0203 	and.w	r2, r3, #3
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 80a6 	beq.w	8003cd4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b88:	4b5b      	ldr	r3, [pc, #364]	@ (8003cf8 <HAL_GPIO_Init+0x2e4>)
 8003b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b8c:	4a5a      	ldr	r2, [pc, #360]	@ (8003cf8 <HAL_GPIO_Init+0x2e4>)
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b94:	4b58      	ldr	r3, [pc, #352]	@ (8003cf8 <HAL_GPIO_Init+0x2e4>)
 8003b96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	60bb      	str	r3, [r7, #8]
 8003b9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ba0:	4a56      	ldr	r2, [pc, #344]	@ (8003cfc <HAL_GPIO_Init+0x2e8>)
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	089b      	lsrs	r3, r3, #2
 8003ba6:	3302      	adds	r3, #2
 8003ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	220f      	movs	r2, #15
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003bca:	d01f      	beq.n	8003c0c <HAL_GPIO_Init+0x1f8>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a4c      	ldr	r2, [pc, #304]	@ (8003d00 <HAL_GPIO_Init+0x2ec>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d019      	beq.n	8003c08 <HAL_GPIO_Init+0x1f4>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a4b      	ldr	r2, [pc, #300]	@ (8003d04 <HAL_GPIO_Init+0x2f0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d013      	beq.n	8003c04 <HAL_GPIO_Init+0x1f0>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a4a      	ldr	r2, [pc, #296]	@ (8003d08 <HAL_GPIO_Init+0x2f4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00d      	beq.n	8003c00 <HAL_GPIO_Init+0x1ec>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a49      	ldr	r2, [pc, #292]	@ (8003d0c <HAL_GPIO_Init+0x2f8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d007      	beq.n	8003bfc <HAL_GPIO_Init+0x1e8>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a48      	ldr	r2, [pc, #288]	@ (8003d10 <HAL_GPIO_Init+0x2fc>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d101      	bne.n	8003bf8 <HAL_GPIO_Init+0x1e4>
 8003bf4:	2305      	movs	r3, #5
 8003bf6:	e00a      	b.n	8003c0e <HAL_GPIO_Init+0x1fa>
 8003bf8:	2306      	movs	r3, #6
 8003bfa:	e008      	b.n	8003c0e <HAL_GPIO_Init+0x1fa>
 8003bfc:	2304      	movs	r3, #4
 8003bfe:	e006      	b.n	8003c0e <HAL_GPIO_Init+0x1fa>
 8003c00:	2303      	movs	r3, #3
 8003c02:	e004      	b.n	8003c0e <HAL_GPIO_Init+0x1fa>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e002      	b.n	8003c0e <HAL_GPIO_Init+0x1fa>
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <HAL_GPIO_Init+0x1fa>
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	f002 0203 	and.w	r2, r2, #3
 8003c14:	0092      	lsls	r2, r2, #2
 8003c16:	4093      	lsls	r3, r2
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c1e:	4937      	ldr	r1, [pc, #220]	@ (8003cfc <HAL_GPIO_Init+0x2e8>)
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	089b      	lsrs	r3, r3, #2
 8003c24:	3302      	adds	r3, #2
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c2c:	4b39      	ldr	r3, [pc, #228]	@ (8003d14 <HAL_GPIO_Init+0x300>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	43db      	mvns	r3, r3
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c50:	4a30      	ldr	r2, [pc, #192]	@ (8003d14 <HAL_GPIO_Init+0x300>)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c56:	4b2f      	ldr	r3, [pc, #188]	@ (8003d14 <HAL_GPIO_Init+0x300>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	4013      	ands	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c7a:	4a26      	ldr	r2, [pc, #152]	@ (8003d14 <HAL_GPIO_Init+0x300>)
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003c80:	4b24      	ldr	r3, [pc, #144]	@ (8003d14 <HAL_GPIO_Init+0x300>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8003d14 <HAL_GPIO_Init+0x300>)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003caa:	4b1a      	ldr	r3, [pc, #104]	@ (8003d14 <HAL_GPIO_Init+0x300>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cce:	4a11      	ldr	r2, [pc, #68]	@ (8003d14 <HAL_GPIO_Init+0x300>)
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f47f ae9d 	bne.w	8003a24 <HAL_GPIO_Init+0x10>
  }
}
 8003cea:	bf00      	nop
 8003cec:	bf00      	nop
 8003cee:	371c      	adds	r7, #28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	40010000 	.word	0x40010000
 8003d00:	48000400 	.word	0x48000400
 8003d04:	48000800 	.word	0x48000800
 8003d08:	48000c00 	.word	0x48000c00
 8003d0c:	48001000 	.word	0x48001000
 8003d10:	48001400 	.word	0x48001400
 8003d14:	40010400 	.word	0x40010400

08003d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	807b      	strh	r3, [r7, #2]
 8003d24:	4613      	mov	r3, r2
 8003d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d28:	787b      	ldrb	r3, [r7, #1]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d2e:	887a      	ldrh	r2, [r7, #2]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d34:	e002      	b.n	8003d3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d36:	887a      	ldrh	r2, [r7, #2]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e08d      	b.n	8003e76 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fc fea6 	bl	8000ac0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2224      	movs	r2, #36	@ 0x24
 8003d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0201 	bic.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003da8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d107      	bne.n	8003dc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003dbe:	609a      	str	r2, [r3, #8]
 8003dc0:	e006      	b.n	8003dd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003dce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d108      	bne.n	8003dea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003de6:	605a      	str	r2, [r3, #4]
 8003de8:	e007      	b.n	8003dfa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003df8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6812      	ldr	r2, [r2, #0]
 8003e04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691a      	ldr	r2, [r3, #16]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	69d9      	ldr	r1, [r3, #28]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1a      	ldr	r2, [r3, #32]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	d138      	bne.n	8003f06 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e032      	b.n	8003f08 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2224      	movs	r2, #36	@ 0x24
 8003eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0201 	bic.w	r2, r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ed0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6819      	ldr	r1, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f042 0201 	orr.w	r2, r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	e000      	b.n	8003f08 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f06:	2302      	movs	r3, #2
  }
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b20      	cmp	r3, #32
 8003f28:	d139      	bne.n	8003f9e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e033      	b.n	8003fa0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2224      	movs	r2, #36	@ 0x24
 8003f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0201 	bic.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f66:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	021b      	lsls	r3, r3, #8
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f042 0201 	orr.w	r2, r2, #1
 8003f88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	e000      	b.n	8003fa0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f9e:	2302      	movs	r3, #2
  }
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d141      	bne.n	800403e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fba:	4b4b      	ldr	r3, [pc, #300]	@ (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fc6:	d131      	bne.n	800402c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fc8:	4b47      	ldr	r3, [pc, #284]	@ (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fce:	4a46      	ldr	r2, [pc, #280]	@ (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fd8:	4b43      	ldr	r3, [pc, #268]	@ (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fe0:	4a41      	ldr	r2, [pc, #260]	@ (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fe6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fe8:	4b40      	ldr	r3, [pc, #256]	@ (80040ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2232      	movs	r2, #50	@ 0x32
 8003fee:	fb02 f303 	mul.w	r3, r2, r3
 8003ff2:	4a3f      	ldr	r2, [pc, #252]	@ (80040f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff8:	0c9b      	lsrs	r3, r3, #18
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ffe:	e002      	b.n	8004006 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	3b01      	subs	r3, #1
 8004004:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004006:	4b38      	ldr	r3, [pc, #224]	@ (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800400e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004012:	d102      	bne.n	800401a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f2      	bne.n	8004000 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800401a:	4b33      	ldr	r3, [pc, #204]	@ (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004026:	d158      	bne.n	80040da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e057      	b.n	80040dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800402c:	4b2e      	ldr	r3, [pc, #184]	@ (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800402e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004032:	4a2d      	ldr	r2, [pc, #180]	@ (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004038:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800403c:	e04d      	b.n	80040da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004044:	d141      	bne.n	80040ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004046:	4b28      	ldr	r3, [pc, #160]	@ (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800404e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004052:	d131      	bne.n	80040b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004054:	4b24      	ldr	r3, [pc, #144]	@ (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004056:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800405a:	4a23      	ldr	r2, [pc, #140]	@ (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800405c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004060:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004064:	4b20      	ldr	r3, [pc, #128]	@ (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800406c:	4a1e      	ldr	r2, [pc, #120]	@ (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800406e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004072:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004074:	4b1d      	ldr	r3, [pc, #116]	@ (80040ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2232      	movs	r2, #50	@ 0x32
 800407a:	fb02 f303 	mul.w	r3, r2, r3
 800407e:	4a1c      	ldr	r2, [pc, #112]	@ (80040f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004080:	fba2 2303 	umull	r2, r3, r2, r3
 8004084:	0c9b      	lsrs	r3, r3, #18
 8004086:	3301      	adds	r3, #1
 8004088:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800408a:	e002      	b.n	8004092 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	3b01      	subs	r3, #1
 8004090:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004092:	4b15      	ldr	r3, [pc, #84]	@ (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800409a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800409e:	d102      	bne.n	80040a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1f2      	bne.n	800408c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040a6:	4b10      	ldr	r3, [pc, #64]	@ (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040b2:	d112      	bne.n	80040da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e011      	b.n	80040dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040b8:	4b0b      	ldr	r3, [pc, #44]	@ (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040be:	4a0a      	ldr	r2, [pc, #40]	@ (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80040c8:	e007      	b.n	80040da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040ca:	4b07      	ldr	r3, [pc, #28]	@ (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040d2:	4a05      	ldr	r2, [pc, #20]	@ (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	40007000 	.word	0x40007000
 80040ec:	20000000 	.word	0x20000000
 80040f0:	431bde83 	.word	0x431bde83

080040f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80040f8:	4b05      	ldr	r3, [pc, #20]	@ (8004110 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	4a04      	ldr	r2, [pc, #16]	@ (8004110 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004102:	6093      	str	r3, [r2, #8]
}
 8004104:	bf00      	nop
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40007000 	.word	0x40007000

08004114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b088      	sub	sp, #32
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e2fe      	b.n	8004724 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d075      	beq.n	800421e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004132:	4b97      	ldr	r3, [pc, #604]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 030c 	and.w	r3, r3, #12
 800413a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800413c:	4b94      	ldr	r3, [pc, #592]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f003 0303 	and.w	r3, r3, #3
 8004144:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	2b0c      	cmp	r3, #12
 800414a:	d102      	bne.n	8004152 <HAL_RCC_OscConfig+0x3e>
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	2b03      	cmp	r3, #3
 8004150:	d002      	beq.n	8004158 <HAL_RCC_OscConfig+0x44>
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	2b08      	cmp	r3, #8
 8004156:	d10b      	bne.n	8004170 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004158:	4b8d      	ldr	r3, [pc, #564]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d05b      	beq.n	800421c <HAL_RCC_OscConfig+0x108>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d157      	bne.n	800421c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e2d9      	b.n	8004724 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004178:	d106      	bne.n	8004188 <HAL_RCC_OscConfig+0x74>
 800417a:	4b85      	ldr	r3, [pc, #532]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a84      	ldr	r2, [pc, #528]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 8004180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	e01d      	b.n	80041c4 <HAL_RCC_OscConfig+0xb0>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004190:	d10c      	bne.n	80041ac <HAL_RCC_OscConfig+0x98>
 8004192:	4b7f      	ldr	r3, [pc, #508]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a7e      	ldr	r2, [pc, #504]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 8004198:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	4b7c      	ldr	r3, [pc, #496]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a7b      	ldr	r2, [pc, #492]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 80041a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	e00b      	b.n	80041c4 <HAL_RCC_OscConfig+0xb0>
 80041ac:	4b78      	ldr	r3, [pc, #480]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a77      	ldr	r2, [pc, #476]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 80041b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	4b75      	ldr	r3, [pc, #468]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a74      	ldr	r2, [pc, #464]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 80041be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d013      	beq.n	80041f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041cc:	f7fd fb34 	bl	8001838 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041d4:	f7fd fb30 	bl	8001838 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b64      	cmp	r3, #100	@ 0x64
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e29e      	b.n	8004724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041e6:	4b6a      	ldr	r3, [pc, #424]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCC_OscConfig+0xc0>
 80041f2:	e014      	b.n	800421e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f4:	f7fd fb20 	bl	8001838 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041fc:	f7fd fb1c 	bl	8001838 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b64      	cmp	r3, #100	@ 0x64
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e28a      	b.n	8004724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800420e:	4b60      	ldr	r3, [pc, #384]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f0      	bne.n	80041fc <HAL_RCC_OscConfig+0xe8>
 800421a:	e000      	b.n	800421e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800421c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d075      	beq.n	8004316 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800422a:	4b59      	ldr	r3, [pc, #356]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 030c 	and.w	r3, r3, #12
 8004232:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004234:	4b56      	ldr	r3, [pc, #344]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f003 0303 	and.w	r3, r3, #3
 800423c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	2b0c      	cmp	r3, #12
 8004242:	d102      	bne.n	800424a <HAL_RCC_OscConfig+0x136>
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d002      	beq.n	8004250 <HAL_RCC_OscConfig+0x13c>
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	2b04      	cmp	r3, #4
 800424e:	d11f      	bne.n	8004290 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004250:	4b4f      	ldr	r3, [pc, #316]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004258:	2b00      	cmp	r3, #0
 800425a:	d005      	beq.n	8004268 <HAL_RCC_OscConfig+0x154>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e25d      	b.n	8004724 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004268:	4b49      	ldr	r3, [pc, #292]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	061b      	lsls	r3, r3, #24
 8004276:	4946      	ldr	r1, [pc, #280]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 8004278:	4313      	orrs	r3, r2
 800427a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800427c:	4b45      	ldr	r3, [pc, #276]	@ (8004394 <HAL_RCC_OscConfig+0x280>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4618      	mov	r0, r3
 8004282:	f7fd fa8d 	bl	80017a0 <HAL_InitTick>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d043      	beq.n	8004314 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e249      	b.n	8004724 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d023      	beq.n	80042e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004298:	4b3d      	ldr	r3, [pc, #244]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a3c      	ldr	r2, [pc, #240]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 800429e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a4:	f7fd fac8 	bl	8001838 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ac:	f7fd fac4 	bl	8001838 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e232      	b.n	8004724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042be:	4b34      	ldr	r3, [pc, #208]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0f0      	beq.n	80042ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ca:	4b31      	ldr	r3, [pc, #196]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	061b      	lsls	r3, r3, #24
 80042d8:	492d      	ldr	r1, [pc, #180]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	604b      	str	r3, [r1, #4]
 80042de:	e01a      	b.n	8004316 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 80042e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ec:	f7fd faa4 	bl	8001838 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042f4:	f7fd faa0 	bl	8001838 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e20e      	b.n	8004724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004306:	4b22      	ldr	r3, [pc, #136]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f0      	bne.n	80042f4 <HAL_RCC_OscConfig+0x1e0>
 8004312:	e000      	b.n	8004316 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004314:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b00      	cmp	r3, #0
 8004320:	d041      	beq.n	80043a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d01c      	beq.n	8004364 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800432a:	4b19      	ldr	r3, [pc, #100]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 800432c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004330:	4a17      	ldr	r2, [pc, #92]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 8004332:	f043 0301 	orr.w	r3, r3, #1
 8004336:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433a:	f7fd fa7d 	bl	8001838 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004342:	f7fd fa79 	bl	8001838 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e1e7      	b.n	8004724 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004354:	4b0e      	ldr	r3, [pc, #56]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 8004356:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0ef      	beq.n	8004342 <HAL_RCC_OscConfig+0x22e>
 8004362:	e020      	b.n	80043a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004364:	4b0a      	ldr	r3, [pc, #40]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 8004366:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800436a:	4a09      	ldr	r2, [pc, #36]	@ (8004390 <HAL_RCC_OscConfig+0x27c>)
 800436c:	f023 0301 	bic.w	r3, r3, #1
 8004370:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004374:	f7fd fa60 	bl	8001838 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800437a:	e00d      	b.n	8004398 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800437c:	f7fd fa5c 	bl	8001838 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d906      	bls.n	8004398 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e1ca      	b.n	8004724 <HAL_RCC_OscConfig+0x610>
 800438e:	bf00      	nop
 8004390:	40021000 	.word	0x40021000
 8004394:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004398:	4b8c      	ldr	r3, [pc, #560]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 800439a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1ea      	bne.n	800437c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 80a6 	beq.w	8004500 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043b4:	2300      	movs	r3, #0
 80043b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043b8:	4b84      	ldr	r3, [pc, #528]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 80043ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <HAL_RCC_OscConfig+0x2b4>
 80043c4:	2301      	movs	r3, #1
 80043c6:	e000      	b.n	80043ca <HAL_RCC_OscConfig+0x2b6>
 80043c8:	2300      	movs	r3, #0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00d      	beq.n	80043ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ce:	4b7f      	ldr	r3, [pc, #508]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 80043d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d2:	4a7e      	ldr	r2, [pc, #504]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 80043d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80043da:	4b7c      	ldr	r3, [pc, #496]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 80043dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80043e6:	2301      	movs	r3, #1
 80043e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ea:	4b79      	ldr	r3, [pc, #484]	@ (80045d0 <HAL_RCC_OscConfig+0x4bc>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d118      	bne.n	8004428 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043f6:	4b76      	ldr	r3, [pc, #472]	@ (80045d0 <HAL_RCC_OscConfig+0x4bc>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a75      	ldr	r2, [pc, #468]	@ (80045d0 <HAL_RCC_OscConfig+0x4bc>)
 80043fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004402:	f7fd fa19 	bl	8001838 <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800440a:	f7fd fa15 	bl	8001838 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e183      	b.n	8004724 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800441c:	4b6c      	ldr	r3, [pc, #432]	@ (80045d0 <HAL_RCC_OscConfig+0x4bc>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0f0      	beq.n	800440a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d108      	bne.n	8004442 <HAL_RCC_OscConfig+0x32e>
 8004430:	4b66      	ldr	r3, [pc, #408]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 8004432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004436:	4a65      	ldr	r2, [pc, #404]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004440:	e024      	b.n	800448c <HAL_RCC_OscConfig+0x378>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b05      	cmp	r3, #5
 8004448:	d110      	bne.n	800446c <HAL_RCC_OscConfig+0x358>
 800444a:	4b60      	ldr	r3, [pc, #384]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 800444c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004450:	4a5e      	ldr	r2, [pc, #376]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 8004452:	f043 0304 	orr.w	r3, r3, #4
 8004456:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800445a:	4b5c      	ldr	r3, [pc, #368]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 800445c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004460:	4a5a      	ldr	r2, [pc, #360]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 8004462:	f043 0301 	orr.w	r3, r3, #1
 8004466:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800446a:	e00f      	b.n	800448c <HAL_RCC_OscConfig+0x378>
 800446c:	4b57      	ldr	r3, [pc, #348]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004472:	4a56      	ldr	r2, [pc, #344]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 8004474:	f023 0301 	bic.w	r3, r3, #1
 8004478:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800447c:	4b53      	ldr	r3, [pc, #332]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004482:	4a52      	ldr	r2, [pc, #328]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 8004484:	f023 0304 	bic.w	r3, r3, #4
 8004488:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d016      	beq.n	80044c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004494:	f7fd f9d0 	bl	8001838 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800449a:	e00a      	b.n	80044b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800449c:	f7fd f9cc 	bl	8001838 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e138      	b.n	8004724 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044b2:	4b46      	ldr	r3, [pc, #280]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 80044b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0ed      	beq.n	800449c <HAL_RCC_OscConfig+0x388>
 80044c0:	e015      	b.n	80044ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c2:	f7fd f9b9 	bl	8001838 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044c8:	e00a      	b.n	80044e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ca:	f7fd f9b5 	bl	8001838 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044d8:	4293      	cmp	r3, r2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e121      	b.n	8004724 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044e0:	4b3a      	ldr	r3, [pc, #232]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 80044e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1ed      	bne.n	80044ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044ee:	7ffb      	ldrb	r3, [r7, #31]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d105      	bne.n	8004500 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f4:	4b35      	ldr	r3, [pc, #212]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 80044f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f8:	4a34      	ldr	r2, [pc, #208]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 80044fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044fe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0320 	and.w	r3, r3, #32
 8004508:	2b00      	cmp	r3, #0
 800450a:	d03c      	beq.n	8004586 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d01c      	beq.n	800454e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004514:	4b2d      	ldr	r3, [pc, #180]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 8004516:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800451a:	4a2c      	ldr	r2, [pc, #176]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 800451c:	f043 0301 	orr.w	r3, r3, #1
 8004520:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004524:	f7fd f988 	bl	8001838 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800452c:	f7fd f984 	bl	8001838 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e0f2      	b.n	8004724 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800453e:	4b23      	ldr	r3, [pc, #140]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 8004540:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0ef      	beq.n	800452c <HAL_RCC_OscConfig+0x418>
 800454c:	e01b      	b.n	8004586 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800454e:	4b1f      	ldr	r3, [pc, #124]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 8004550:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004554:	4a1d      	ldr	r2, [pc, #116]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 8004556:	f023 0301 	bic.w	r3, r3, #1
 800455a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455e:	f7fd f96b 	bl	8001838 <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004566:	f7fd f967 	bl	8001838 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e0d5      	b.n	8004724 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004578:	4b14      	ldr	r3, [pc, #80]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 800457a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1ef      	bne.n	8004566 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 80c9 	beq.w	8004722 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004590:	4b0e      	ldr	r3, [pc, #56]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 030c 	and.w	r3, r3, #12
 8004598:	2b0c      	cmp	r3, #12
 800459a:	f000 8083 	beq.w	80046a4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d15e      	bne.n	8004664 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a6:	4b09      	ldr	r3, [pc, #36]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a08      	ldr	r2, [pc, #32]	@ (80045cc <HAL_RCC_OscConfig+0x4b8>)
 80045ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b2:	f7fd f941 	bl	8001838 <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045b8:	e00c      	b.n	80045d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ba:	f7fd f93d 	bl	8001838 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d905      	bls.n	80045d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e0ab      	b.n	8004724 <HAL_RCC_OscConfig+0x610>
 80045cc:	40021000 	.word	0x40021000
 80045d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045d4:	4b55      	ldr	r3, [pc, #340]	@ (800472c <HAL_RCC_OscConfig+0x618>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1ec      	bne.n	80045ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045e0:	4b52      	ldr	r3, [pc, #328]	@ (800472c <HAL_RCC_OscConfig+0x618>)
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	4b52      	ldr	r3, [pc, #328]	@ (8004730 <HAL_RCC_OscConfig+0x61c>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6a11      	ldr	r1, [r2, #32]
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045f0:	3a01      	subs	r2, #1
 80045f2:	0112      	lsls	r2, r2, #4
 80045f4:	4311      	orrs	r1, r2
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80045fa:	0212      	lsls	r2, r2, #8
 80045fc:	4311      	orrs	r1, r2
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004602:	0852      	lsrs	r2, r2, #1
 8004604:	3a01      	subs	r2, #1
 8004606:	0552      	lsls	r2, r2, #21
 8004608:	4311      	orrs	r1, r2
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800460e:	0852      	lsrs	r2, r2, #1
 8004610:	3a01      	subs	r2, #1
 8004612:	0652      	lsls	r2, r2, #25
 8004614:	4311      	orrs	r1, r2
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800461a:	06d2      	lsls	r2, r2, #27
 800461c:	430a      	orrs	r2, r1
 800461e:	4943      	ldr	r1, [pc, #268]	@ (800472c <HAL_RCC_OscConfig+0x618>)
 8004620:	4313      	orrs	r3, r2
 8004622:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004624:	4b41      	ldr	r3, [pc, #260]	@ (800472c <HAL_RCC_OscConfig+0x618>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a40      	ldr	r2, [pc, #256]	@ (800472c <HAL_RCC_OscConfig+0x618>)
 800462a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800462e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004630:	4b3e      	ldr	r3, [pc, #248]	@ (800472c <HAL_RCC_OscConfig+0x618>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	4a3d      	ldr	r2, [pc, #244]	@ (800472c <HAL_RCC_OscConfig+0x618>)
 8004636:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800463a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463c:	f7fd f8fc 	bl	8001838 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004644:	f7fd f8f8 	bl	8001838 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e066      	b.n	8004724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004656:	4b35      	ldr	r3, [pc, #212]	@ (800472c <HAL_RCC_OscConfig+0x618>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0f0      	beq.n	8004644 <HAL_RCC_OscConfig+0x530>
 8004662:	e05e      	b.n	8004722 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004664:	4b31      	ldr	r3, [pc, #196]	@ (800472c <HAL_RCC_OscConfig+0x618>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a30      	ldr	r2, [pc, #192]	@ (800472c <HAL_RCC_OscConfig+0x618>)
 800466a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800466e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004670:	f7fd f8e2 	bl	8001838 <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004678:	f7fd f8de 	bl	8001838 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e04c      	b.n	8004724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800468a:	4b28      	ldr	r3, [pc, #160]	@ (800472c <HAL_RCC_OscConfig+0x618>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f0      	bne.n	8004678 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004696:	4b25      	ldr	r3, [pc, #148]	@ (800472c <HAL_RCC_OscConfig+0x618>)
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	4924      	ldr	r1, [pc, #144]	@ (800472c <HAL_RCC_OscConfig+0x618>)
 800469c:	4b25      	ldr	r3, [pc, #148]	@ (8004734 <HAL_RCC_OscConfig+0x620>)
 800469e:	4013      	ands	r3, r2
 80046a0:	60cb      	str	r3, [r1, #12]
 80046a2:	e03e      	b.n	8004722 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e039      	b.n	8004724 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80046b0:	4b1e      	ldr	r3, [pc, #120]	@ (800472c <HAL_RCC_OscConfig+0x618>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f003 0203 	and.w	r2, r3, #3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d12c      	bne.n	800471e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ce:	3b01      	subs	r3, #1
 80046d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d123      	bne.n	800471e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d11b      	bne.n	800471e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d113      	bne.n	800471e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004700:	085b      	lsrs	r3, r3, #1
 8004702:	3b01      	subs	r3, #1
 8004704:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004706:	429a      	cmp	r2, r3
 8004708:	d109      	bne.n	800471e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004714:	085b      	lsrs	r3, r3, #1
 8004716:	3b01      	subs	r3, #1
 8004718:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800471a:	429a      	cmp	r2, r3
 800471c:	d001      	beq.n	8004722 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3720      	adds	r7, #32
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40021000 	.word	0x40021000
 8004730:	019f800c 	.word	0x019f800c
 8004734:	feeefffc 	.word	0xfeeefffc

08004738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d101      	bne.n	8004750 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e11e      	b.n	800498e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004750:	4b91      	ldr	r3, [pc, #580]	@ (8004998 <HAL_RCC_ClockConfig+0x260>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 030f 	and.w	r3, r3, #15
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	429a      	cmp	r2, r3
 800475c:	d910      	bls.n	8004780 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800475e:	4b8e      	ldr	r3, [pc, #568]	@ (8004998 <HAL_RCC_ClockConfig+0x260>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f023 020f 	bic.w	r2, r3, #15
 8004766:	498c      	ldr	r1, [pc, #560]	@ (8004998 <HAL_RCC_ClockConfig+0x260>)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	4313      	orrs	r3, r2
 800476c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800476e:	4b8a      	ldr	r3, [pc, #552]	@ (8004998 <HAL_RCC_ClockConfig+0x260>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	429a      	cmp	r2, r3
 800477a:	d001      	beq.n	8004780 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e106      	b.n	800498e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d073      	beq.n	8004874 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b03      	cmp	r3, #3
 8004792:	d129      	bne.n	80047e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004794:	4b81      	ldr	r3, [pc, #516]	@ (800499c <HAL_RCC_ClockConfig+0x264>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e0f4      	b.n	800498e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80047a4:	f000 f99e 	bl	8004ae4 <RCC_GetSysClockFreqFromPLLSource>
 80047a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	4a7c      	ldr	r2, [pc, #496]	@ (80049a0 <HAL_RCC_ClockConfig+0x268>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d93f      	bls.n	8004832 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047b2:	4b7a      	ldr	r3, [pc, #488]	@ (800499c <HAL_RCC_ClockConfig+0x264>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d009      	beq.n	80047d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d033      	beq.n	8004832 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d12f      	bne.n	8004832 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047d2:	4b72      	ldr	r3, [pc, #456]	@ (800499c <HAL_RCC_ClockConfig+0x264>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047da:	4a70      	ldr	r2, [pc, #448]	@ (800499c <HAL_RCC_ClockConfig+0x264>)
 80047dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80047e2:	2380      	movs	r3, #128	@ 0x80
 80047e4:	617b      	str	r3, [r7, #20]
 80047e6:	e024      	b.n	8004832 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d107      	bne.n	8004800 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047f0:	4b6a      	ldr	r3, [pc, #424]	@ (800499c <HAL_RCC_ClockConfig+0x264>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d109      	bne.n	8004810 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e0c6      	b.n	800498e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004800:	4b66      	ldr	r3, [pc, #408]	@ (800499c <HAL_RCC_ClockConfig+0x264>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e0be      	b.n	800498e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004810:	f000 f8ce 	bl	80049b0 <HAL_RCC_GetSysClockFreq>
 8004814:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	4a61      	ldr	r2, [pc, #388]	@ (80049a0 <HAL_RCC_ClockConfig+0x268>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d909      	bls.n	8004832 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800481e:	4b5f      	ldr	r3, [pc, #380]	@ (800499c <HAL_RCC_ClockConfig+0x264>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004826:	4a5d      	ldr	r2, [pc, #372]	@ (800499c <HAL_RCC_ClockConfig+0x264>)
 8004828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800482c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800482e:	2380      	movs	r3, #128	@ 0x80
 8004830:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004832:	4b5a      	ldr	r3, [pc, #360]	@ (800499c <HAL_RCC_ClockConfig+0x264>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f023 0203 	bic.w	r2, r3, #3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	4957      	ldr	r1, [pc, #348]	@ (800499c <HAL_RCC_ClockConfig+0x264>)
 8004840:	4313      	orrs	r3, r2
 8004842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004844:	f7fc fff8 	bl	8001838 <HAL_GetTick>
 8004848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800484a:	e00a      	b.n	8004862 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800484c:	f7fc fff4 	bl	8001838 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800485a:	4293      	cmp	r3, r2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e095      	b.n	800498e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004862:	4b4e      	ldr	r3, [pc, #312]	@ (800499c <HAL_RCC_ClockConfig+0x264>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 020c 	and.w	r2, r3, #12
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	429a      	cmp	r2, r3
 8004872:	d1eb      	bne.n	800484c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d023      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d005      	beq.n	8004898 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800488c:	4b43      	ldr	r3, [pc, #268]	@ (800499c <HAL_RCC_ClockConfig+0x264>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	4a42      	ldr	r2, [pc, #264]	@ (800499c <HAL_RCC_ClockConfig+0x264>)
 8004892:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004896:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d007      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80048a4:	4b3d      	ldr	r3, [pc, #244]	@ (800499c <HAL_RCC_ClockConfig+0x264>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80048ac:	4a3b      	ldr	r2, [pc, #236]	@ (800499c <HAL_RCC_ClockConfig+0x264>)
 80048ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80048b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048b4:	4b39      	ldr	r3, [pc, #228]	@ (800499c <HAL_RCC_ClockConfig+0x264>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	4936      	ldr	r1, [pc, #216]	@ (800499c <HAL_RCC_ClockConfig+0x264>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	608b      	str	r3, [r1, #8]
 80048c6:	e008      	b.n	80048da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	2b80      	cmp	r3, #128	@ 0x80
 80048cc:	d105      	bne.n	80048da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80048ce:	4b33      	ldr	r3, [pc, #204]	@ (800499c <HAL_RCC_ClockConfig+0x264>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	4a32      	ldr	r2, [pc, #200]	@ (800499c <HAL_RCC_ClockConfig+0x264>)
 80048d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048da:	4b2f      	ldr	r3, [pc, #188]	@ (8004998 <HAL_RCC_ClockConfig+0x260>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d21d      	bcs.n	8004924 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004998 <HAL_RCC_ClockConfig+0x260>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f023 020f 	bic.w	r2, r3, #15
 80048f0:	4929      	ldr	r1, [pc, #164]	@ (8004998 <HAL_RCC_ClockConfig+0x260>)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048f8:	f7fc ff9e 	bl	8001838 <HAL_GetTick>
 80048fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fe:	e00a      	b.n	8004916 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004900:	f7fc ff9a 	bl	8001838 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800490e:	4293      	cmp	r3, r2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e03b      	b.n	800498e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004916:	4b20      	ldr	r3, [pc, #128]	@ (8004998 <HAL_RCC_ClockConfig+0x260>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	429a      	cmp	r2, r3
 8004922:	d1ed      	bne.n	8004900 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	d008      	beq.n	8004942 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004930:	4b1a      	ldr	r3, [pc, #104]	@ (800499c <HAL_RCC_ClockConfig+0x264>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	4917      	ldr	r1, [pc, #92]	@ (800499c <HAL_RCC_ClockConfig+0x264>)
 800493e:	4313      	orrs	r3, r2
 8004940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0308 	and.w	r3, r3, #8
 800494a:	2b00      	cmp	r3, #0
 800494c:	d009      	beq.n	8004962 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800494e:	4b13      	ldr	r3, [pc, #76]	@ (800499c <HAL_RCC_ClockConfig+0x264>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	490f      	ldr	r1, [pc, #60]	@ (800499c <HAL_RCC_ClockConfig+0x264>)
 800495e:	4313      	orrs	r3, r2
 8004960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004962:	f000 f825 	bl	80049b0 <HAL_RCC_GetSysClockFreq>
 8004966:	4602      	mov	r2, r0
 8004968:	4b0c      	ldr	r3, [pc, #48]	@ (800499c <HAL_RCC_ClockConfig+0x264>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	091b      	lsrs	r3, r3, #4
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	490c      	ldr	r1, [pc, #48]	@ (80049a4 <HAL_RCC_ClockConfig+0x26c>)
 8004974:	5ccb      	ldrb	r3, [r1, r3]
 8004976:	f003 031f 	and.w	r3, r3, #31
 800497a:	fa22 f303 	lsr.w	r3, r2, r3
 800497e:	4a0a      	ldr	r2, [pc, #40]	@ (80049a8 <HAL_RCC_ClockConfig+0x270>)
 8004980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004982:	4b0a      	ldr	r3, [pc, #40]	@ (80049ac <HAL_RCC_ClockConfig+0x274>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f7fc ff0a 	bl	80017a0 <HAL_InitTick>
 800498c:	4603      	mov	r3, r0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3718      	adds	r7, #24
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	40022000 	.word	0x40022000
 800499c:	40021000 	.word	0x40021000
 80049a0:	04c4b400 	.word	0x04c4b400
 80049a4:	08006d98 	.word	0x08006d98
 80049a8:	20000000 	.word	0x20000000
 80049ac:	20000004 	.word	0x20000004

080049b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80049b6:	4b2c      	ldr	r3, [pc, #176]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 030c 	and.w	r3, r3, #12
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d102      	bne.n	80049c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049c2:	4b2a      	ldr	r3, [pc, #168]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0xbc>)
 80049c4:	613b      	str	r3, [r7, #16]
 80049c6:	e047      	b.n	8004a58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80049c8:	4b27      	ldr	r3, [pc, #156]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f003 030c 	and.w	r3, r3, #12
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d102      	bne.n	80049da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049d4:	4b26      	ldr	r3, [pc, #152]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0xc0>)
 80049d6:	613b      	str	r3, [r7, #16]
 80049d8:	e03e      	b.n	8004a58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80049da:	4b23      	ldr	r3, [pc, #140]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f003 030c 	and.w	r3, r3, #12
 80049e2:	2b0c      	cmp	r3, #12
 80049e4:	d136      	bne.n	8004a54 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049e6:	4b20      	ldr	r3, [pc, #128]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	091b      	lsrs	r3, r3, #4
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	3301      	adds	r3, #1
 80049fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	d10c      	bne.n	8004a1e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a04:	4a1a      	ldr	r2, [pc, #104]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0c:	4a16      	ldr	r2, [pc, #88]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a0e:	68d2      	ldr	r2, [r2, #12]
 8004a10:	0a12      	lsrs	r2, r2, #8
 8004a12:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a16:	fb02 f303 	mul.w	r3, r2, r3
 8004a1a:	617b      	str	r3, [r7, #20]
      break;
 8004a1c:	e00c      	b.n	8004a38 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a1e:	4a13      	ldr	r2, [pc, #76]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a26:	4a10      	ldr	r2, [pc, #64]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a28:	68d2      	ldr	r2, [r2, #12]
 8004a2a:	0a12      	lsrs	r2, r2, #8
 8004a2c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a30:	fb02 f303 	mul.w	r3, r2, r3
 8004a34:	617b      	str	r3, [r7, #20]
      break;
 8004a36:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a38:	4b0b      	ldr	r3, [pc, #44]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	0e5b      	lsrs	r3, r3, #25
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	3301      	adds	r3, #1
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a50:	613b      	str	r3, [r7, #16]
 8004a52:	e001      	b.n	8004a58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a58:	693b      	ldr	r3, [r7, #16]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	371c      	adds	r7, #28
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	00f42400 	.word	0x00f42400
 8004a70:	016e3600 	.word	0x016e3600

08004a74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a78:	4b03      	ldr	r3, [pc, #12]	@ (8004a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	20000000 	.word	0x20000000

08004a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a90:	f7ff fff0 	bl	8004a74 <HAL_RCC_GetHCLKFreq>
 8004a94:	4602      	mov	r2, r0
 8004a96:	4b06      	ldr	r3, [pc, #24]	@ (8004ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	0a1b      	lsrs	r3, r3, #8
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	4904      	ldr	r1, [pc, #16]	@ (8004ab4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004aa2:	5ccb      	ldrb	r3, [r1, r3]
 8004aa4:	f003 031f 	and.w	r3, r3, #31
 8004aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	08006da8 	.word	0x08006da8

08004ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004abc:	f7ff ffda 	bl	8004a74 <HAL_RCC_GetHCLKFreq>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	4b06      	ldr	r3, [pc, #24]	@ (8004adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	0adb      	lsrs	r3, r3, #11
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	4904      	ldr	r1, [pc, #16]	@ (8004ae0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ace:	5ccb      	ldrb	r3, [r1, r3]
 8004ad0:	f003 031f 	and.w	r3, r3, #31
 8004ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	08006da8 	.word	0x08006da8

08004ae4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004aea:	4b1e      	ldr	r3, [pc, #120]	@ (8004b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004af4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	091b      	lsrs	r3, r3, #4
 8004afa:	f003 030f 	and.w	r3, r3, #15
 8004afe:	3301      	adds	r3, #1
 8004b00:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	d10c      	bne.n	8004b22 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b08:	4a17      	ldr	r2, [pc, #92]	@ (8004b68 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b10:	4a14      	ldr	r2, [pc, #80]	@ (8004b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b12:	68d2      	ldr	r2, [r2, #12]
 8004b14:	0a12      	lsrs	r2, r2, #8
 8004b16:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b1a:	fb02 f303 	mul.w	r3, r2, r3
 8004b1e:	617b      	str	r3, [r7, #20]
    break;
 8004b20:	e00c      	b.n	8004b3c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b22:	4a12      	ldr	r2, [pc, #72]	@ (8004b6c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2a:	4a0e      	ldr	r2, [pc, #56]	@ (8004b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b2c:	68d2      	ldr	r2, [r2, #12]
 8004b2e:	0a12      	lsrs	r2, r2, #8
 8004b30:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b34:	fb02 f303 	mul.w	r3, r2, r3
 8004b38:	617b      	str	r3, [r7, #20]
    break;
 8004b3a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b3c:	4b09      	ldr	r3, [pc, #36]	@ (8004b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	0e5b      	lsrs	r3, r3, #25
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	3301      	adds	r3, #1
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b54:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004b56:	687b      	ldr	r3, [r7, #4]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	371c      	adds	r7, #28
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	40021000 	.word	0x40021000
 8004b68:	016e3600 	.word	0x016e3600
 8004b6c:	00f42400 	.word	0x00f42400

08004b70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b78:	2300      	movs	r3, #0
 8004b7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 8098 	beq.w	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b92:	4b43      	ldr	r3, [pc, #268]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10d      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b9e:	4b40      	ldr	r3, [pc, #256]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba2:	4a3f      	ldr	r2, [pc, #252]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ba8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004baa:	4b3d      	ldr	r3, [pc, #244]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bb2:	60bb      	str	r3, [r7, #8]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bba:	4b3a      	ldr	r3, [pc, #232]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a39      	ldr	r2, [pc, #228]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bc6:	f7fc fe37 	bl	8001838 <HAL_GetTick>
 8004bca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bcc:	e009      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bce:	f7fc fe33 	bl	8001838 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d902      	bls.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	74fb      	strb	r3, [r7, #19]
        break;
 8004be0:	e005      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004be2:	4b30      	ldr	r3, [pc, #192]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0ef      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004bee:	7cfb      	ldrb	r3, [r7, #19]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d159      	bne.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bf4:	4b2a      	ldr	r3, [pc, #168]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bfe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d01e      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d019      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c10:	4b23      	ldr	r3, [pc, #140]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c1a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c1c:	4b20      	ldr	r3, [pc, #128]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c22:	4a1f      	ldr	r2, [pc, #124]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c2c:	4b1c      	ldr	r3, [pc, #112]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c32:	4a1b      	ldr	r2, [pc, #108]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c3c:	4a18      	ldr	r2, [pc, #96]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d016      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4e:	f7fc fdf3 	bl	8001838 <HAL_GetTick>
 8004c52:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c54:	e00b      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c56:	f7fc fdef 	bl	8001838 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d902      	bls.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	74fb      	strb	r3, [r7, #19]
            break;
 8004c6c:	e006      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0ec      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004c7c:	7cfb      	ldrb	r3, [r7, #19]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10b      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c82:	4b07      	ldr	r3, [pc, #28]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c90:	4903      	ldr	r1, [pc, #12]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004c98:	e008      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c9a:	7cfb      	ldrb	r3, [r7, #19]
 8004c9c:	74bb      	strb	r3, [r7, #18]
 8004c9e:	e005      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca8:	7cfb      	ldrb	r3, [r7, #19]
 8004caa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cac:	7c7b      	ldrb	r3, [r7, #17]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d105      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cb2:	4ba6      	ldr	r3, [pc, #664]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb6:	4aa5      	ldr	r2, [pc, #660]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cbc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cca:	4ba0      	ldr	r3, [pc, #640]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd0:	f023 0203 	bic.w	r2, r3, #3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	499c      	ldr	r1, [pc, #624]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00a      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cec:	4b97      	ldr	r3, [pc, #604]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf2:	f023 020c 	bic.w	r2, r3, #12
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	4994      	ldr	r1, [pc, #592]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d0e:	4b8f      	ldr	r3, [pc, #572]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d14:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	498b      	ldr	r1, [pc, #556]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0308 	and.w	r3, r3, #8
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00a      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d30:	4b86      	ldr	r3, [pc, #536]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d36:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	4983      	ldr	r1, [pc, #524]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0320 	and.w	r3, r3, #32
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d52:	4b7e      	ldr	r3, [pc, #504]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d58:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	497a      	ldr	r1, [pc, #488]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00a      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d74:	4b75      	ldr	r3, [pc, #468]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d7a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	4972      	ldr	r1, [pc, #456]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d96:	4b6d      	ldr	r3, [pc, #436]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d9c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	4969      	ldr	r1, [pc, #420]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00a      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004db8:	4b64      	ldr	r3, [pc, #400]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dbe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	4961      	ldr	r1, [pc, #388]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dda:	4b5c      	ldr	r3, [pc, #368]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de8:	4958      	ldr	r1, [pc, #352]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d015      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dfc:	4b53      	ldr	r3, [pc, #332]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e0a:	4950      	ldr	r1, [pc, #320]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e1a:	d105      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e1c:	4b4b      	ldr	r3, [pc, #300]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	4a4a      	ldr	r2, [pc, #296]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e26:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d015      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e34:	4b45      	ldr	r3, [pc, #276]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e3a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e42:	4942      	ldr	r1, [pc, #264]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e52:	d105      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e54:	4b3d      	ldr	r3, [pc, #244]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	4a3c      	ldr	r2, [pc, #240]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e5e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d015      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e6c:	4b37      	ldr	r3, [pc, #220]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e72:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7a:	4934      	ldr	r1, [pc, #208]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e8a:	d105      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e8c:	4b2f      	ldr	r3, [pc, #188]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	4a2e      	ldr	r2, [pc, #184]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e96:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d015      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ea4:	4b29      	ldr	r3, [pc, #164]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eaa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eb2:	4926      	ldr	r1, [pc, #152]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ebe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ec2:	d105      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ec4:	4b21      	ldr	r3, [pc, #132]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	4a20      	ldr	r2, [pc, #128]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ece:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d015      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004edc:	4b1b      	ldr	r3, [pc, #108]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eea:	4918      	ldr	r1, [pc, #96]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004efa:	d105      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004efc:	4b13      	ldr	r3, [pc, #76]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	4a12      	ldr	r2, [pc, #72]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f06:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d015      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f14:	4b0d      	ldr	r3, [pc, #52]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f1a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f22:	490a      	ldr	r1, [pc, #40]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f32:	d105      	bne.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f34:	4b05      	ldr	r3, [pc, #20]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	4a04      	ldr	r2, [pc, #16]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f3e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004f40:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	40021000 	.word	0x40021000

08004f50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e09d      	b.n	800509e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d108      	bne.n	8004f7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f72:	d009      	beq.n	8004f88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	61da      	str	r2, [r3, #28]
 8004f7a:	e005      	b.n	8004f88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fb feac 	bl	8000d00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004fc8:	d902      	bls.n	8004fd0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	e002      	b.n	8004fd6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004fd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004fd4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004fde:	d007      	beq.n	8004ff0 <HAL_SPI_Init+0xa0>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004fe8:	d002      	beq.n	8004ff0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005000:	431a      	orrs	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	431a      	orrs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005028:	431a      	orrs	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005032:	ea42 0103 	orr.w	r1, r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	0c1b      	lsrs	r3, r3, #16
 800504c:	f003 0204 	and.w	r2, r3, #4
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005054:	f003 0310 	and.w	r3, r3, #16
 8005058:	431a      	orrs	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800506c:	ea42 0103 	orr.w	r1, r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69da      	ldr	r2, [r3, #28]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800508c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e049      	b.n	800514c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d106      	bne.n	80050d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7fc f89b 	bl	8001208 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2202      	movs	r2, #2
 80050d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3304      	adds	r3, #4
 80050e2:	4619      	mov	r1, r3
 80050e4:	4610      	mov	r0, r2
 80050e6:	f000 faa5 	bl	8005634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e049      	b.n	80051fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f841 	bl	8005202 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3304      	adds	r3, #4
 8005190:	4619      	mov	r1, r3
 8005192:	4610      	mov	r0, r2
 8005194:	f000 fa4e 	bl	8005634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
	...

08005218 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005224:	2300      	movs	r3, #0
 8005226:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800522e:	2b01      	cmp	r3, #1
 8005230:	d101      	bne.n	8005236 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005232:	2302      	movs	r3, #2
 8005234:	e0ff      	b.n	8005436 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b14      	cmp	r3, #20
 8005242:	f200 80f0 	bhi.w	8005426 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005246:	a201      	add	r2, pc, #4	@ (adr r2, 800524c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524c:	080052a1 	.word	0x080052a1
 8005250:	08005427 	.word	0x08005427
 8005254:	08005427 	.word	0x08005427
 8005258:	08005427 	.word	0x08005427
 800525c:	080052e1 	.word	0x080052e1
 8005260:	08005427 	.word	0x08005427
 8005264:	08005427 	.word	0x08005427
 8005268:	08005427 	.word	0x08005427
 800526c:	08005323 	.word	0x08005323
 8005270:	08005427 	.word	0x08005427
 8005274:	08005427 	.word	0x08005427
 8005278:	08005427 	.word	0x08005427
 800527c:	08005363 	.word	0x08005363
 8005280:	08005427 	.word	0x08005427
 8005284:	08005427 	.word	0x08005427
 8005288:	08005427 	.word	0x08005427
 800528c:	080053a5 	.word	0x080053a5
 8005290:	08005427 	.word	0x08005427
 8005294:	08005427 	.word	0x08005427
 8005298:	08005427 	.word	0x08005427
 800529c:	080053e5 	.word	0x080053e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 fa60 	bl	800576c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699a      	ldr	r2, [r3, #24]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0208 	orr.w	r2, r2, #8
 80052ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699a      	ldr	r2, [r3, #24]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0204 	bic.w	r2, r2, #4
 80052ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6999      	ldr	r1, [r3, #24]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	619a      	str	r2, [r3, #24]
      break;
 80052de:	e0a5      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68b9      	ldr	r1, [r7, #8]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 fad0 	bl	800588c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699a      	ldr	r2, [r3, #24]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800530a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6999      	ldr	r1, [r3, #24]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	021a      	lsls	r2, r3, #8
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	619a      	str	r2, [r3, #24]
      break;
 8005320:	e084      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68b9      	ldr	r1, [r7, #8]
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fb39 	bl	80059a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0208 	orr.w	r2, r2, #8
 800533c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	69da      	ldr	r2, [r3, #28]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0204 	bic.w	r2, r2, #4
 800534c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69d9      	ldr	r1, [r3, #28]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	61da      	str	r2, [r3, #28]
      break;
 8005360:	e064      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68b9      	ldr	r1, [r7, #8]
 8005368:	4618      	mov	r0, r3
 800536a:	f000 fba1 	bl	8005ab0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800537c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69da      	ldr	r2, [r3, #28]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800538c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69d9      	ldr	r1, [r3, #28]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	021a      	lsls	r2, r3, #8
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	61da      	str	r2, [r3, #28]
      break;
 80053a2:	e043      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68b9      	ldr	r1, [r7, #8]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fc0a 	bl	8005bc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0208 	orr.w	r2, r2, #8
 80053be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0204 	bic.w	r2, r2, #4
 80053ce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	691a      	ldr	r2, [r3, #16]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80053e2:	e023      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68b9      	ldr	r1, [r7, #8]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 fc4e 	bl	8005c8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053fe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800540e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	021a      	lsls	r2, r3, #8
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005424:	e002      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	75fb      	strb	r3, [r7, #23]
      break;
 800542a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005434:	7dfb      	ldrb	r3, [r7, #23]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3718      	adds	r7, #24
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop

08005440 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800544a:	2300      	movs	r3, #0
 800544c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005454:	2b01      	cmp	r3, #1
 8005456:	d101      	bne.n	800545c <HAL_TIM_ConfigClockSource+0x1c>
 8005458:	2302      	movs	r3, #2
 800545a:	e0de      	b.n	800561a <HAL_TIM_ConfigClockSource+0x1da>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800547a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800547e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005486:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a63      	ldr	r2, [pc, #396]	@ (8005624 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	f000 80a9 	beq.w	80055ee <HAL_TIM_ConfigClockSource+0x1ae>
 800549c:	4a61      	ldr	r2, [pc, #388]	@ (8005624 <HAL_TIM_ConfigClockSource+0x1e4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	f200 80ae 	bhi.w	8005600 <HAL_TIM_ConfigClockSource+0x1c0>
 80054a4:	4a60      	ldr	r2, [pc, #384]	@ (8005628 <HAL_TIM_ConfigClockSource+0x1e8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	f000 80a1 	beq.w	80055ee <HAL_TIM_ConfigClockSource+0x1ae>
 80054ac:	4a5e      	ldr	r2, [pc, #376]	@ (8005628 <HAL_TIM_ConfigClockSource+0x1e8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	f200 80a6 	bhi.w	8005600 <HAL_TIM_ConfigClockSource+0x1c0>
 80054b4:	4a5d      	ldr	r2, [pc, #372]	@ (800562c <HAL_TIM_ConfigClockSource+0x1ec>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	f000 8099 	beq.w	80055ee <HAL_TIM_ConfigClockSource+0x1ae>
 80054bc:	4a5b      	ldr	r2, [pc, #364]	@ (800562c <HAL_TIM_ConfigClockSource+0x1ec>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	f200 809e 	bhi.w	8005600 <HAL_TIM_ConfigClockSource+0x1c0>
 80054c4:	4a5a      	ldr	r2, [pc, #360]	@ (8005630 <HAL_TIM_ConfigClockSource+0x1f0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	f000 8091 	beq.w	80055ee <HAL_TIM_ConfigClockSource+0x1ae>
 80054cc:	4a58      	ldr	r2, [pc, #352]	@ (8005630 <HAL_TIM_ConfigClockSource+0x1f0>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	f200 8096 	bhi.w	8005600 <HAL_TIM_ConfigClockSource+0x1c0>
 80054d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80054d8:	f000 8089 	beq.w	80055ee <HAL_TIM_ConfigClockSource+0x1ae>
 80054dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80054e0:	f200 808e 	bhi.w	8005600 <HAL_TIM_ConfigClockSource+0x1c0>
 80054e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054e8:	d03e      	beq.n	8005568 <HAL_TIM_ConfigClockSource+0x128>
 80054ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054ee:	f200 8087 	bhi.w	8005600 <HAL_TIM_ConfigClockSource+0x1c0>
 80054f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054f6:	f000 8086 	beq.w	8005606 <HAL_TIM_ConfigClockSource+0x1c6>
 80054fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054fe:	d87f      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x1c0>
 8005500:	2b70      	cmp	r3, #112	@ 0x70
 8005502:	d01a      	beq.n	800553a <HAL_TIM_ConfigClockSource+0xfa>
 8005504:	2b70      	cmp	r3, #112	@ 0x70
 8005506:	d87b      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x1c0>
 8005508:	2b60      	cmp	r3, #96	@ 0x60
 800550a:	d050      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0x16e>
 800550c:	2b60      	cmp	r3, #96	@ 0x60
 800550e:	d877      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x1c0>
 8005510:	2b50      	cmp	r3, #80	@ 0x50
 8005512:	d03c      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x14e>
 8005514:	2b50      	cmp	r3, #80	@ 0x50
 8005516:	d873      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x1c0>
 8005518:	2b40      	cmp	r3, #64	@ 0x40
 800551a:	d058      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0x18e>
 800551c:	2b40      	cmp	r3, #64	@ 0x40
 800551e:	d86f      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x1c0>
 8005520:	2b30      	cmp	r3, #48	@ 0x30
 8005522:	d064      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x1ae>
 8005524:	2b30      	cmp	r3, #48	@ 0x30
 8005526:	d86b      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x1c0>
 8005528:	2b20      	cmp	r3, #32
 800552a:	d060      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x1ae>
 800552c:	2b20      	cmp	r3, #32
 800552e:	d867      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x1c0>
 8005530:	2b00      	cmp	r3, #0
 8005532:	d05c      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x1ae>
 8005534:	2b10      	cmp	r3, #16
 8005536:	d05a      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x1ae>
 8005538:	e062      	b.n	8005600 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800554a:	f000 fc81 	bl	8005e50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800555c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	609a      	str	r2, [r3, #8]
      break;
 8005566:	e04f      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005578:	f000 fc6a 	bl	8005e50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800558a:	609a      	str	r2, [r3, #8]
      break;
 800558c:	e03c      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800559a:	461a      	mov	r2, r3
 800559c:	f000 fbdc 	bl	8005d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2150      	movs	r1, #80	@ 0x50
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 fc35 	bl	8005e16 <TIM_ITRx_SetConfig>
      break;
 80055ac:	e02c      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ba:	461a      	mov	r2, r3
 80055bc:	f000 fbfb 	bl	8005db6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2160      	movs	r1, #96	@ 0x60
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fc25 	bl	8005e16 <TIM_ITRx_SetConfig>
      break;
 80055cc:	e01c      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055da:	461a      	mov	r2, r3
 80055dc:	f000 fbbc 	bl	8005d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2140      	movs	r1, #64	@ 0x40
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fc15 	bl	8005e16 <TIM_ITRx_SetConfig>
      break;
 80055ec:	e00c      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4619      	mov	r1, r3
 80055f8:	4610      	mov	r0, r2
 80055fa:	f000 fc0c 	bl	8005e16 <TIM_ITRx_SetConfig>
      break;
 80055fe:	e003      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	73fb      	strb	r3, [r7, #15]
      break;
 8005604:	e000      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005606:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005618:	7bfb      	ldrb	r3, [r7, #15]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	00100070 	.word	0x00100070
 8005628:	00100040 	.word	0x00100040
 800562c:	00100030 	.word	0x00100030
 8005630:	00100020 	.word	0x00100020

08005634 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a42      	ldr	r2, [pc, #264]	@ (8005750 <TIM_Base_SetConfig+0x11c>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d00f      	beq.n	800566c <TIM_Base_SetConfig+0x38>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005652:	d00b      	beq.n	800566c <TIM_Base_SetConfig+0x38>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a3f      	ldr	r2, [pc, #252]	@ (8005754 <TIM_Base_SetConfig+0x120>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d007      	beq.n	800566c <TIM_Base_SetConfig+0x38>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a3e      	ldr	r2, [pc, #248]	@ (8005758 <TIM_Base_SetConfig+0x124>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d003      	beq.n	800566c <TIM_Base_SetConfig+0x38>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a3d      	ldr	r2, [pc, #244]	@ (800575c <TIM_Base_SetConfig+0x128>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d108      	bne.n	800567e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005672:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	4313      	orrs	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a33      	ldr	r2, [pc, #204]	@ (8005750 <TIM_Base_SetConfig+0x11c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d01b      	beq.n	80056be <TIM_Base_SetConfig+0x8a>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800568c:	d017      	beq.n	80056be <TIM_Base_SetConfig+0x8a>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a30      	ldr	r2, [pc, #192]	@ (8005754 <TIM_Base_SetConfig+0x120>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d013      	beq.n	80056be <TIM_Base_SetConfig+0x8a>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a2f      	ldr	r2, [pc, #188]	@ (8005758 <TIM_Base_SetConfig+0x124>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d00f      	beq.n	80056be <TIM_Base_SetConfig+0x8a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a2e      	ldr	r2, [pc, #184]	@ (800575c <TIM_Base_SetConfig+0x128>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d00b      	beq.n	80056be <TIM_Base_SetConfig+0x8a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a2d      	ldr	r2, [pc, #180]	@ (8005760 <TIM_Base_SetConfig+0x12c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d007      	beq.n	80056be <TIM_Base_SetConfig+0x8a>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a2c      	ldr	r2, [pc, #176]	@ (8005764 <TIM_Base_SetConfig+0x130>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d003      	beq.n	80056be <TIM_Base_SetConfig+0x8a>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a2b      	ldr	r2, [pc, #172]	@ (8005768 <TIM_Base_SetConfig+0x134>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d108      	bne.n	80056d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	689a      	ldr	r2, [r3, #8]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a16      	ldr	r2, [pc, #88]	@ (8005750 <TIM_Base_SetConfig+0x11c>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00f      	beq.n	800571c <TIM_Base_SetConfig+0xe8>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a17      	ldr	r2, [pc, #92]	@ (800575c <TIM_Base_SetConfig+0x128>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00b      	beq.n	800571c <TIM_Base_SetConfig+0xe8>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a16      	ldr	r2, [pc, #88]	@ (8005760 <TIM_Base_SetConfig+0x12c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d007      	beq.n	800571c <TIM_Base_SetConfig+0xe8>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a15      	ldr	r2, [pc, #84]	@ (8005764 <TIM_Base_SetConfig+0x130>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d003      	beq.n	800571c <TIM_Base_SetConfig+0xe8>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a14      	ldr	r2, [pc, #80]	@ (8005768 <TIM_Base_SetConfig+0x134>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d103      	bne.n	8005724 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b01      	cmp	r3, #1
 8005734:	d105      	bne.n	8005742 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f023 0201 	bic.w	r2, r3, #1
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	611a      	str	r2, [r3, #16]
  }
}
 8005742:	bf00      	nop
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	40012c00 	.word	0x40012c00
 8005754:	40000400 	.word	0x40000400
 8005758:	40000800 	.word	0x40000800
 800575c:	40013400 	.word	0x40013400
 8005760:	40014000 	.word	0x40014000
 8005764:	40014400 	.word	0x40014400
 8005768:	40014800 	.word	0x40014800

0800576c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	f023 0201 	bic.w	r2, r3, #1
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800579a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800579e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0303 	bic.w	r3, r3, #3
 80057a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f023 0302 	bic.w	r3, r3, #2
 80057b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a2c      	ldr	r2, [pc, #176]	@ (8005878 <TIM_OC1_SetConfig+0x10c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d00f      	beq.n	80057ec <TIM_OC1_SetConfig+0x80>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a2b      	ldr	r2, [pc, #172]	@ (800587c <TIM_OC1_SetConfig+0x110>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00b      	beq.n	80057ec <TIM_OC1_SetConfig+0x80>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a2a      	ldr	r2, [pc, #168]	@ (8005880 <TIM_OC1_SetConfig+0x114>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d007      	beq.n	80057ec <TIM_OC1_SetConfig+0x80>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a29      	ldr	r2, [pc, #164]	@ (8005884 <TIM_OC1_SetConfig+0x118>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d003      	beq.n	80057ec <TIM_OC1_SetConfig+0x80>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a28      	ldr	r2, [pc, #160]	@ (8005888 <TIM_OC1_SetConfig+0x11c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d10c      	bne.n	8005806 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f023 0308 	bic.w	r3, r3, #8
 80057f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f023 0304 	bic.w	r3, r3, #4
 8005804:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a1b      	ldr	r2, [pc, #108]	@ (8005878 <TIM_OC1_SetConfig+0x10c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d00f      	beq.n	800582e <TIM_OC1_SetConfig+0xc2>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a1a      	ldr	r2, [pc, #104]	@ (800587c <TIM_OC1_SetConfig+0x110>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d00b      	beq.n	800582e <TIM_OC1_SetConfig+0xc2>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a19      	ldr	r2, [pc, #100]	@ (8005880 <TIM_OC1_SetConfig+0x114>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d007      	beq.n	800582e <TIM_OC1_SetConfig+0xc2>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a18      	ldr	r2, [pc, #96]	@ (8005884 <TIM_OC1_SetConfig+0x118>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d003      	beq.n	800582e <TIM_OC1_SetConfig+0xc2>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a17      	ldr	r2, [pc, #92]	@ (8005888 <TIM_OC1_SetConfig+0x11c>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d111      	bne.n	8005852 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800583c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	4313      	orrs	r3, r2
 8005846:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	4313      	orrs	r3, r2
 8005850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	621a      	str	r2, [r3, #32]
}
 800586c:	bf00      	nop
 800586e:	371c      	adds	r7, #28
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	40012c00 	.word	0x40012c00
 800587c:	40013400 	.word	0x40013400
 8005880:	40014000 	.word	0x40014000
 8005884:	40014400 	.word	0x40014400
 8005888:	40014800 	.word	0x40014800

0800588c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	f023 0210 	bic.w	r2, r3, #16
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	021b      	lsls	r3, r3, #8
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f023 0320 	bic.w	r3, r3, #32
 80058da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	011b      	lsls	r3, r3, #4
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a28      	ldr	r2, [pc, #160]	@ (800598c <TIM_OC2_SetConfig+0x100>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <TIM_OC2_SetConfig+0x6c>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a27      	ldr	r2, [pc, #156]	@ (8005990 <TIM_OC2_SetConfig+0x104>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d10d      	bne.n	8005914 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	011b      	lsls	r3, r3, #4
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005912:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a1d      	ldr	r2, [pc, #116]	@ (800598c <TIM_OC2_SetConfig+0x100>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00f      	beq.n	800593c <TIM_OC2_SetConfig+0xb0>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a1c      	ldr	r2, [pc, #112]	@ (8005990 <TIM_OC2_SetConfig+0x104>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d00b      	beq.n	800593c <TIM_OC2_SetConfig+0xb0>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a1b      	ldr	r2, [pc, #108]	@ (8005994 <TIM_OC2_SetConfig+0x108>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d007      	beq.n	800593c <TIM_OC2_SetConfig+0xb0>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a1a      	ldr	r2, [pc, #104]	@ (8005998 <TIM_OC2_SetConfig+0x10c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d003      	beq.n	800593c <TIM_OC2_SetConfig+0xb0>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a19      	ldr	r2, [pc, #100]	@ (800599c <TIM_OC2_SetConfig+0x110>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d113      	bne.n	8005964 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005942:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800594a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	4313      	orrs	r3, r2
 8005956:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	4313      	orrs	r3, r2
 8005962:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	621a      	str	r2, [r3, #32]
}
 800597e:	bf00      	nop
 8005980:	371c      	adds	r7, #28
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	40012c00 	.word	0x40012c00
 8005990:	40013400 	.word	0x40013400
 8005994:	40014000 	.word	0x40014000
 8005998:	40014400 	.word	0x40014400
 800599c:	40014800 	.word	0x40014800

080059a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f023 0303 	bic.w	r3, r3, #3
 80059da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	021b      	lsls	r3, r3, #8
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a27      	ldr	r2, [pc, #156]	@ (8005a9c <TIM_OC3_SetConfig+0xfc>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d003      	beq.n	8005a0a <TIM_OC3_SetConfig+0x6a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a26      	ldr	r2, [pc, #152]	@ (8005aa0 <TIM_OC3_SetConfig+0x100>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d10d      	bne.n	8005a26 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	021b      	lsls	r3, r3, #8
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a1c      	ldr	r2, [pc, #112]	@ (8005a9c <TIM_OC3_SetConfig+0xfc>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d00f      	beq.n	8005a4e <TIM_OC3_SetConfig+0xae>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a1b      	ldr	r2, [pc, #108]	@ (8005aa0 <TIM_OC3_SetConfig+0x100>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00b      	beq.n	8005a4e <TIM_OC3_SetConfig+0xae>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a1a      	ldr	r2, [pc, #104]	@ (8005aa4 <TIM_OC3_SetConfig+0x104>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d007      	beq.n	8005a4e <TIM_OC3_SetConfig+0xae>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a19      	ldr	r2, [pc, #100]	@ (8005aa8 <TIM_OC3_SetConfig+0x108>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d003      	beq.n	8005a4e <TIM_OC3_SetConfig+0xae>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a18      	ldr	r2, [pc, #96]	@ (8005aac <TIM_OC3_SetConfig+0x10c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d113      	bne.n	8005a76 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	011b      	lsls	r3, r3, #4
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	011b      	lsls	r3, r3, #4
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	621a      	str	r2, [r3, #32]
}
 8005a90:	bf00      	nop
 8005a92:	371c      	adds	r7, #28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	40012c00 	.word	0x40012c00
 8005aa0:	40013400 	.word	0x40013400
 8005aa4:	40014000 	.word	0x40014000
 8005aa8:	40014400 	.word	0x40014400
 8005aac:	40014800 	.word	0x40014800

08005ab0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ade:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	021b      	lsls	r3, r3, #8
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005afe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	031b      	lsls	r3, r3, #12
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a28      	ldr	r2, [pc, #160]	@ (8005bb0 <TIM_OC4_SetConfig+0x100>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d003      	beq.n	8005b1c <TIM_OC4_SetConfig+0x6c>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a27      	ldr	r2, [pc, #156]	@ (8005bb4 <TIM_OC4_SetConfig+0x104>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d10d      	bne.n	8005b38 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	031b      	lsls	r3, r3, #12
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8005bb0 <TIM_OC4_SetConfig+0x100>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d00f      	beq.n	8005b60 <TIM_OC4_SetConfig+0xb0>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a1c      	ldr	r2, [pc, #112]	@ (8005bb4 <TIM_OC4_SetConfig+0x104>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d00b      	beq.n	8005b60 <TIM_OC4_SetConfig+0xb0>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a1b      	ldr	r2, [pc, #108]	@ (8005bb8 <TIM_OC4_SetConfig+0x108>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d007      	beq.n	8005b60 <TIM_OC4_SetConfig+0xb0>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a1a      	ldr	r2, [pc, #104]	@ (8005bbc <TIM_OC4_SetConfig+0x10c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d003      	beq.n	8005b60 <TIM_OC4_SetConfig+0xb0>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a19      	ldr	r2, [pc, #100]	@ (8005bc0 <TIM_OC4_SetConfig+0x110>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d113      	bne.n	8005b88 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b66:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005b6e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	019b      	lsls	r3, r3, #6
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	019b      	lsls	r3, r3, #6
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	621a      	str	r2, [r3, #32]
}
 8005ba2:	bf00      	nop
 8005ba4:	371c      	adds	r7, #28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	40012c00 	.word	0x40012c00
 8005bb4:	40013400 	.word	0x40013400
 8005bb8:	40014000 	.word	0x40014000
 8005bbc:	40014400 	.word	0x40014400
 8005bc0:	40014800 	.word	0x40014800

08005bc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005c08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	041b      	lsls	r3, r3, #16
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a17      	ldr	r2, [pc, #92]	@ (8005c78 <TIM_OC5_SetConfig+0xb4>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d00f      	beq.n	8005c3e <TIM_OC5_SetConfig+0x7a>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a16      	ldr	r2, [pc, #88]	@ (8005c7c <TIM_OC5_SetConfig+0xb8>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d00b      	beq.n	8005c3e <TIM_OC5_SetConfig+0x7a>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a15      	ldr	r2, [pc, #84]	@ (8005c80 <TIM_OC5_SetConfig+0xbc>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d007      	beq.n	8005c3e <TIM_OC5_SetConfig+0x7a>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a14      	ldr	r2, [pc, #80]	@ (8005c84 <TIM_OC5_SetConfig+0xc0>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d003      	beq.n	8005c3e <TIM_OC5_SetConfig+0x7a>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a13      	ldr	r2, [pc, #76]	@ (8005c88 <TIM_OC5_SetConfig+0xc4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d109      	bne.n	8005c52 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	021b      	lsls	r3, r3, #8
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	621a      	str	r2, [r3, #32]
}
 8005c6c:	bf00      	nop
 8005c6e:	371c      	adds	r7, #28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	40012c00 	.word	0x40012c00
 8005c7c:	40013400 	.word	0x40013400
 8005c80:	40014000 	.word	0x40014000
 8005c84:	40014400 	.word	0x40014400
 8005c88:	40014800 	.word	0x40014800

08005c8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	021b      	lsls	r3, r3, #8
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005cd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	051b      	lsls	r3, r3, #20
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a18      	ldr	r2, [pc, #96]	@ (8005d44 <TIM_OC6_SetConfig+0xb8>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d00f      	beq.n	8005d08 <TIM_OC6_SetConfig+0x7c>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a17      	ldr	r2, [pc, #92]	@ (8005d48 <TIM_OC6_SetConfig+0xbc>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d00b      	beq.n	8005d08 <TIM_OC6_SetConfig+0x7c>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a16      	ldr	r2, [pc, #88]	@ (8005d4c <TIM_OC6_SetConfig+0xc0>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d007      	beq.n	8005d08 <TIM_OC6_SetConfig+0x7c>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a15      	ldr	r2, [pc, #84]	@ (8005d50 <TIM_OC6_SetConfig+0xc4>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d003      	beq.n	8005d08 <TIM_OC6_SetConfig+0x7c>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a14      	ldr	r2, [pc, #80]	@ (8005d54 <TIM_OC6_SetConfig+0xc8>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d109      	bne.n	8005d1c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	029b      	lsls	r3, r3, #10
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	621a      	str	r2, [r3, #32]
}
 8005d36:	bf00      	nop
 8005d38:	371c      	adds	r7, #28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	40012c00 	.word	0x40012c00
 8005d48:	40013400 	.word	0x40013400
 8005d4c:	40014000 	.word	0x40014000
 8005d50:	40014400 	.word	0x40014400
 8005d54:	40014800 	.word	0x40014800

08005d58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	f023 0201 	bic.w	r2, r3, #1
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	011b      	lsls	r3, r3, #4
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f023 030a 	bic.w	r3, r3, #10
 8005d94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	621a      	str	r2, [r3, #32]
}
 8005daa:	bf00      	nop
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b087      	sub	sp, #28
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	f023 0210 	bic.w	r2, r3, #16
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005de0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	031b      	lsls	r3, r3, #12
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005df2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	011b      	lsls	r3, r3, #4
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	621a      	str	r2, [r3, #32]
}
 8005e0a:	bf00      	nop
 8005e0c:	371c      	adds	r7, #28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b085      	sub	sp, #20
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005e2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e32:	683a      	ldr	r2, [r7, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	f043 0307 	orr.w	r3, r3, #7
 8005e3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	609a      	str	r2, [r3, #8]
}
 8005e44:	bf00      	nop
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
 8005e5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	021a      	lsls	r2, r3, #8
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	431a      	orrs	r2, r3
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	609a      	str	r2, [r3, #8]
}
 8005e84:	bf00      	nop
 8005e86:	371c      	adds	r7, #28
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e065      	b.n	8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a2c      	ldr	r2, [pc, #176]	@ (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d004      	beq.n	8005edc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a2b      	ldr	r2, [pc, #172]	@ (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d108      	bne.n	8005eee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005ee2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005ef4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ef8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a1b      	ldr	r2, [pc, #108]	@ (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d018      	beq.n	8005f48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f1e:	d013      	beq.n	8005f48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a18      	ldr	r2, [pc, #96]	@ (8005f88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d00e      	beq.n	8005f48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a17      	ldr	r2, [pc, #92]	@ (8005f8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d009      	beq.n	8005f48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a12      	ldr	r2, [pc, #72]	@ (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d004      	beq.n	8005f48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a13      	ldr	r2, [pc, #76]	@ (8005f90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d10c      	bne.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	40012c00 	.word	0x40012c00
 8005f84:	40013400 	.word	0x40013400
 8005f88:	40000400 	.word	0x40000400
 8005f8c:	40000800 	.word	0x40000800
 8005f90:	40014000 	.word	0x40014000

08005f94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d101      	bne.n	8005fb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005fac:	2302      	movs	r3, #2
 8005fae:	e073      	b.n	8006098 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	4313      	orrs	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006016:	4313      	orrs	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	041b      	lsls	r3, r3, #16
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	69db      	ldr	r3, [r3, #28]
 8006034:	4313      	orrs	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a19      	ldr	r2, [pc, #100]	@ (80060a4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d004      	beq.n	800604c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a18      	ldr	r2, [pc, #96]	@ (80060a8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d11c      	bne.n	8006086 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006056:	051b      	lsls	r3, r3, #20
 8006058:	4313      	orrs	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	4313      	orrs	r3, r2
 8006068:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006074:	4313      	orrs	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	40012c00 	.word	0x40012c00
 80060a8:	40013400 	.word	0x40013400

080060ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e042      	b.n	8006144 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d106      	bne.n	80060d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7fb f9d3 	bl	800147c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2224      	movs	r2, #36	@ 0x24
 80060da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 0201 	bic.w	r2, r2, #1
 80060ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 faf4 	bl	80066e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f825 	bl	800614c <UART_SetConfig>
 8006102:	4603      	mov	r3, r0
 8006104:	2b01      	cmp	r3, #1
 8006106:	d101      	bne.n	800610c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e01b      	b.n	8006144 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800611a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689a      	ldr	r2, [r3, #8]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800612a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0201 	orr.w	r2, r2, #1
 800613a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 fb73 	bl	8006828 <UART_CheckIdleState>
 8006142:	4603      	mov	r3, r0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800614c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006150:	b08c      	sub	sp, #48	@ 0x30
 8006152:	af00      	add	r7, sp, #0
 8006154:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	689a      	ldr	r2, [r3, #8]
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	431a      	orrs	r2, r3
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	431a      	orrs	r2, r3
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	4313      	orrs	r3, r2
 8006172:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	4bab      	ldr	r3, [pc, #684]	@ (8006428 <UART_SetConfig+0x2dc>)
 800617c:	4013      	ands	r3, r2
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	6812      	ldr	r2, [r2, #0]
 8006182:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006184:	430b      	orrs	r3, r1
 8006186:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	68da      	ldr	r2, [r3, #12]
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4aa0      	ldr	r2, [pc, #640]	@ (800642c <UART_SetConfig+0x2e0>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d004      	beq.n	80061b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061b4:	4313      	orrs	r3, r2
 80061b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80061c2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	6812      	ldr	r2, [r2, #0]
 80061ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061cc:	430b      	orrs	r3, r1
 80061ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d6:	f023 010f 	bic.w	r1, r3, #15
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a91      	ldr	r2, [pc, #580]	@ (8006430 <UART_SetConfig+0x2e4>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d125      	bne.n	800623c <UART_SetConfig+0xf0>
 80061f0:	4b90      	ldr	r3, [pc, #576]	@ (8006434 <UART_SetConfig+0x2e8>)
 80061f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061f6:	f003 0303 	and.w	r3, r3, #3
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	d81a      	bhi.n	8006234 <UART_SetConfig+0xe8>
 80061fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006204 <UART_SetConfig+0xb8>)
 8006200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006204:	08006215 	.word	0x08006215
 8006208:	08006225 	.word	0x08006225
 800620c:	0800621d 	.word	0x0800621d
 8006210:	0800622d 	.word	0x0800622d
 8006214:	2301      	movs	r3, #1
 8006216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800621a:	e0d6      	b.n	80063ca <UART_SetConfig+0x27e>
 800621c:	2302      	movs	r3, #2
 800621e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006222:	e0d2      	b.n	80063ca <UART_SetConfig+0x27e>
 8006224:	2304      	movs	r3, #4
 8006226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800622a:	e0ce      	b.n	80063ca <UART_SetConfig+0x27e>
 800622c:	2308      	movs	r3, #8
 800622e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006232:	e0ca      	b.n	80063ca <UART_SetConfig+0x27e>
 8006234:	2310      	movs	r3, #16
 8006236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800623a:	e0c6      	b.n	80063ca <UART_SetConfig+0x27e>
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a7d      	ldr	r2, [pc, #500]	@ (8006438 <UART_SetConfig+0x2ec>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d138      	bne.n	80062b8 <UART_SetConfig+0x16c>
 8006246:	4b7b      	ldr	r3, [pc, #492]	@ (8006434 <UART_SetConfig+0x2e8>)
 8006248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800624c:	f003 030c 	and.w	r3, r3, #12
 8006250:	2b0c      	cmp	r3, #12
 8006252:	d82d      	bhi.n	80062b0 <UART_SetConfig+0x164>
 8006254:	a201      	add	r2, pc, #4	@ (adr r2, 800625c <UART_SetConfig+0x110>)
 8006256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625a:	bf00      	nop
 800625c:	08006291 	.word	0x08006291
 8006260:	080062b1 	.word	0x080062b1
 8006264:	080062b1 	.word	0x080062b1
 8006268:	080062b1 	.word	0x080062b1
 800626c:	080062a1 	.word	0x080062a1
 8006270:	080062b1 	.word	0x080062b1
 8006274:	080062b1 	.word	0x080062b1
 8006278:	080062b1 	.word	0x080062b1
 800627c:	08006299 	.word	0x08006299
 8006280:	080062b1 	.word	0x080062b1
 8006284:	080062b1 	.word	0x080062b1
 8006288:	080062b1 	.word	0x080062b1
 800628c:	080062a9 	.word	0x080062a9
 8006290:	2300      	movs	r3, #0
 8006292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006296:	e098      	b.n	80063ca <UART_SetConfig+0x27e>
 8006298:	2302      	movs	r3, #2
 800629a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800629e:	e094      	b.n	80063ca <UART_SetConfig+0x27e>
 80062a0:	2304      	movs	r3, #4
 80062a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062a6:	e090      	b.n	80063ca <UART_SetConfig+0x27e>
 80062a8:	2308      	movs	r3, #8
 80062aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062ae:	e08c      	b.n	80063ca <UART_SetConfig+0x27e>
 80062b0:	2310      	movs	r3, #16
 80062b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062b6:	e088      	b.n	80063ca <UART_SetConfig+0x27e>
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a5f      	ldr	r2, [pc, #380]	@ (800643c <UART_SetConfig+0x2f0>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d125      	bne.n	800630e <UART_SetConfig+0x1c2>
 80062c2:	4b5c      	ldr	r3, [pc, #368]	@ (8006434 <UART_SetConfig+0x2e8>)
 80062c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80062cc:	2b30      	cmp	r3, #48	@ 0x30
 80062ce:	d016      	beq.n	80062fe <UART_SetConfig+0x1b2>
 80062d0:	2b30      	cmp	r3, #48	@ 0x30
 80062d2:	d818      	bhi.n	8006306 <UART_SetConfig+0x1ba>
 80062d4:	2b20      	cmp	r3, #32
 80062d6:	d00a      	beq.n	80062ee <UART_SetConfig+0x1a2>
 80062d8:	2b20      	cmp	r3, #32
 80062da:	d814      	bhi.n	8006306 <UART_SetConfig+0x1ba>
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d002      	beq.n	80062e6 <UART_SetConfig+0x19a>
 80062e0:	2b10      	cmp	r3, #16
 80062e2:	d008      	beq.n	80062f6 <UART_SetConfig+0x1aa>
 80062e4:	e00f      	b.n	8006306 <UART_SetConfig+0x1ba>
 80062e6:	2300      	movs	r3, #0
 80062e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062ec:	e06d      	b.n	80063ca <UART_SetConfig+0x27e>
 80062ee:	2302      	movs	r3, #2
 80062f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062f4:	e069      	b.n	80063ca <UART_SetConfig+0x27e>
 80062f6:	2304      	movs	r3, #4
 80062f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062fc:	e065      	b.n	80063ca <UART_SetConfig+0x27e>
 80062fe:	2308      	movs	r3, #8
 8006300:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006304:	e061      	b.n	80063ca <UART_SetConfig+0x27e>
 8006306:	2310      	movs	r3, #16
 8006308:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800630c:	e05d      	b.n	80063ca <UART_SetConfig+0x27e>
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a4b      	ldr	r2, [pc, #300]	@ (8006440 <UART_SetConfig+0x2f4>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d125      	bne.n	8006364 <UART_SetConfig+0x218>
 8006318:	4b46      	ldr	r3, [pc, #280]	@ (8006434 <UART_SetConfig+0x2e8>)
 800631a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800631e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006322:	2bc0      	cmp	r3, #192	@ 0xc0
 8006324:	d016      	beq.n	8006354 <UART_SetConfig+0x208>
 8006326:	2bc0      	cmp	r3, #192	@ 0xc0
 8006328:	d818      	bhi.n	800635c <UART_SetConfig+0x210>
 800632a:	2b80      	cmp	r3, #128	@ 0x80
 800632c:	d00a      	beq.n	8006344 <UART_SetConfig+0x1f8>
 800632e:	2b80      	cmp	r3, #128	@ 0x80
 8006330:	d814      	bhi.n	800635c <UART_SetConfig+0x210>
 8006332:	2b00      	cmp	r3, #0
 8006334:	d002      	beq.n	800633c <UART_SetConfig+0x1f0>
 8006336:	2b40      	cmp	r3, #64	@ 0x40
 8006338:	d008      	beq.n	800634c <UART_SetConfig+0x200>
 800633a:	e00f      	b.n	800635c <UART_SetConfig+0x210>
 800633c:	2300      	movs	r3, #0
 800633e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006342:	e042      	b.n	80063ca <UART_SetConfig+0x27e>
 8006344:	2302      	movs	r3, #2
 8006346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800634a:	e03e      	b.n	80063ca <UART_SetConfig+0x27e>
 800634c:	2304      	movs	r3, #4
 800634e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006352:	e03a      	b.n	80063ca <UART_SetConfig+0x27e>
 8006354:	2308      	movs	r3, #8
 8006356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800635a:	e036      	b.n	80063ca <UART_SetConfig+0x27e>
 800635c:	2310      	movs	r3, #16
 800635e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006362:	e032      	b.n	80063ca <UART_SetConfig+0x27e>
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a30      	ldr	r2, [pc, #192]	@ (800642c <UART_SetConfig+0x2e0>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d12a      	bne.n	80063c4 <UART_SetConfig+0x278>
 800636e:	4b31      	ldr	r3, [pc, #196]	@ (8006434 <UART_SetConfig+0x2e8>)
 8006370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006374:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006378:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800637c:	d01a      	beq.n	80063b4 <UART_SetConfig+0x268>
 800637e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006382:	d81b      	bhi.n	80063bc <UART_SetConfig+0x270>
 8006384:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006388:	d00c      	beq.n	80063a4 <UART_SetConfig+0x258>
 800638a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800638e:	d815      	bhi.n	80063bc <UART_SetConfig+0x270>
 8006390:	2b00      	cmp	r3, #0
 8006392:	d003      	beq.n	800639c <UART_SetConfig+0x250>
 8006394:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006398:	d008      	beq.n	80063ac <UART_SetConfig+0x260>
 800639a:	e00f      	b.n	80063bc <UART_SetConfig+0x270>
 800639c:	2300      	movs	r3, #0
 800639e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063a2:	e012      	b.n	80063ca <UART_SetConfig+0x27e>
 80063a4:	2302      	movs	r3, #2
 80063a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063aa:	e00e      	b.n	80063ca <UART_SetConfig+0x27e>
 80063ac:	2304      	movs	r3, #4
 80063ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063b2:	e00a      	b.n	80063ca <UART_SetConfig+0x27e>
 80063b4:	2308      	movs	r3, #8
 80063b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ba:	e006      	b.n	80063ca <UART_SetConfig+0x27e>
 80063bc:	2310      	movs	r3, #16
 80063be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063c2:	e002      	b.n	80063ca <UART_SetConfig+0x27e>
 80063c4:	2310      	movs	r3, #16
 80063c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a17      	ldr	r2, [pc, #92]	@ (800642c <UART_SetConfig+0x2e0>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	f040 80a8 	bne.w	8006526 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80063da:	2b08      	cmp	r3, #8
 80063dc:	d834      	bhi.n	8006448 <UART_SetConfig+0x2fc>
 80063de:	a201      	add	r2, pc, #4	@ (adr r2, 80063e4 <UART_SetConfig+0x298>)
 80063e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e4:	08006409 	.word	0x08006409
 80063e8:	08006449 	.word	0x08006449
 80063ec:	08006411 	.word	0x08006411
 80063f0:	08006449 	.word	0x08006449
 80063f4:	08006417 	.word	0x08006417
 80063f8:	08006449 	.word	0x08006449
 80063fc:	08006449 	.word	0x08006449
 8006400:	08006449 	.word	0x08006449
 8006404:	0800641f 	.word	0x0800641f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006408:	f7fe fb40 	bl	8004a8c <HAL_RCC_GetPCLK1Freq>
 800640c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800640e:	e021      	b.n	8006454 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006410:	4b0c      	ldr	r3, [pc, #48]	@ (8006444 <UART_SetConfig+0x2f8>)
 8006412:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006414:	e01e      	b.n	8006454 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006416:	f7fe facb 	bl	80049b0 <HAL_RCC_GetSysClockFreq>
 800641a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800641c:	e01a      	b.n	8006454 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800641e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006422:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006424:	e016      	b.n	8006454 <UART_SetConfig+0x308>
 8006426:	bf00      	nop
 8006428:	cfff69f3 	.word	0xcfff69f3
 800642c:	40008000 	.word	0x40008000
 8006430:	40013800 	.word	0x40013800
 8006434:	40021000 	.word	0x40021000
 8006438:	40004400 	.word	0x40004400
 800643c:	40004800 	.word	0x40004800
 8006440:	40004c00 	.word	0x40004c00
 8006444:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006452:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 812a 	beq.w	80066b0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006460:	4a9e      	ldr	r2, [pc, #632]	@ (80066dc <UART_SetConfig+0x590>)
 8006462:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006466:	461a      	mov	r2, r3
 8006468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646a:	fbb3 f3f2 	udiv	r3, r3, r2
 800646e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	4613      	mov	r3, r2
 8006476:	005b      	lsls	r3, r3, #1
 8006478:	4413      	add	r3, r2
 800647a:	69ba      	ldr	r2, [r7, #24]
 800647c:	429a      	cmp	r2, r3
 800647e:	d305      	bcc.n	800648c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006486:	69ba      	ldr	r2, [r7, #24]
 8006488:	429a      	cmp	r2, r3
 800648a:	d903      	bls.n	8006494 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006492:	e10d      	b.n	80066b0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006496:	2200      	movs	r2, #0
 8006498:	60bb      	str	r3, [r7, #8]
 800649a:	60fa      	str	r2, [r7, #12]
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a0:	4a8e      	ldr	r2, [pc, #568]	@ (80066dc <UART_SetConfig+0x590>)
 80064a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	2200      	movs	r2, #0
 80064aa:	603b      	str	r3, [r7, #0]
 80064ac:	607a      	str	r2, [r7, #4]
 80064ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064b6:	f7f9 feaf 	bl	8000218 <__aeabi_uldivmod>
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	4610      	mov	r0, r2
 80064c0:	4619      	mov	r1, r3
 80064c2:	f04f 0200 	mov.w	r2, #0
 80064c6:	f04f 0300 	mov.w	r3, #0
 80064ca:	020b      	lsls	r3, r1, #8
 80064cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064d0:	0202      	lsls	r2, r0, #8
 80064d2:	6979      	ldr	r1, [r7, #20]
 80064d4:	6849      	ldr	r1, [r1, #4]
 80064d6:	0849      	lsrs	r1, r1, #1
 80064d8:	2000      	movs	r0, #0
 80064da:	460c      	mov	r4, r1
 80064dc:	4605      	mov	r5, r0
 80064de:	eb12 0804 	adds.w	r8, r2, r4
 80064e2:	eb43 0905 	adc.w	r9, r3, r5
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	469a      	mov	sl, r3
 80064ee:	4693      	mov	fp, r2
 80064f0:	4652      	mov	r2, sl
 80064f2:	465b      	mov	r3, fp
 80064f4:	4640      	mov	r0, r8
 80064f6:	4649      	mov	r1, r9
 80064f8:	f7f9 fe8e 	bl	8000218 <__aeabi_uldivmod>
 80064fc:	4602      	mov	r2, r0
 80064fe:	460b      	mov	r3, r1
 8006500:	4613      	mov	r3, r2
 8006502:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800650a:	d308      	bcc.n	800651e <UART_SetConfig+0x3d2>
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006512:	d204      	bcs.n	800651e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6a3a      	ldr	r2, [r7, #32]
 800651a:	60da      	str	r2, [r3, #12]
 800651c:	e0c8      	b.n	80066b0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006524:	e0c4      	b.n	80066b0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800652e:	d167      	bne.n	8006600 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006530:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006534:	2b08      	cmp	r3, #8
 8006536:	d828      	bhi.n	800658a <UART_SetConfig+0x43e>
 8006538:	a201      	add	r2, pc, #4	@ (adr r2, 8006540 <UART_SetConfig+0x3f4>)
 800653a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653e:	bf00      	nop
 8006540:	08006565 	.word	0x08006565
 8006544:	0800656d 	.word	0x0800656d
 8006548:	08006575 	.word	0x08006575
 800654c:	0800658b 	.word	0x0800658b
 8006550:	0800657b 	.word	0x0800657b
 8006554:	0800658b 	.word	0x0800658b
 8006558:	0800658b 	.word	0x0800658b
 800655c:	0800658b 	.word	0x0800658b
 8006560:	08006583 	.word	0x08006583
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006564:	f7fe fa92 	bl	8004a8c <HAL_RCC_GetPCLK1Freq>
 8006568:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800656a:	e014      	b.n	8006596 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800656c:	f7fe faa4 	bl	8004ab8 <HAL_RCC_GetPCLK2Freq>
 8006570:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006572:	e010      	b.n	8006596 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006574:	4b5a      	ldr	r3, [pc, #360]	@ (80066e0 <UART_SetConfig+0x594>)
 8006576:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006578:	e00d      	b.n	8006596 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800657a:	f7fe fa19 	bl	80049b0 <HAL_RCC_GetSysClockFreq>
 800657e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006580:	e009      	b.n	8006596 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006582:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006586:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006588:	e005      	b.n	8006596 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800658a:	2300      	movs	r3, #0
 800658c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006594:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 8089 	beq.w	80066b0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a2:	4a4e      	ldr	r2, [pc, #312]	@ (80066dc <UART_SetConfig+0x590>)
 80065a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065a8:	461a      	mov	r2, r3
 80065aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80065b0:	005a      	lsls	r2, r3, #1
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	085b      	lsrs	r3, r3, #1
 80065b8:	441a      	add	r2, r3
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	2b0f      	cmp	r3, #15
 80065c8:	d916      	bls.n	80065f8 <UART_SetConfig+0x4ac>
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065d0:	d212      	bcs.n	80065f8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	f023 030f 	bic.w	r3, r3, #15
 80065da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	085b      	lsrs	r3, r3, #1
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	f003 0307 	and.w	r3, r3, #7
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	8bfb      	ldrh	r3, [r7, #30]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	8bfa      	ldrh	r2, [r7, #30]
 80065f4:	60da      	str	r2, [r3, #12]
 80065f6:	e05b      	b.n	80066b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80065fe:	e057      	b.n	80066b0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006600:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006604:	2b08      	cmp	r3, #8
 8006606:	d828      	bhi.n	800665a <UART_SetConfig+0x50e>
 8006608:	a201      	add	r2, pc, #4	@ (adr r2, 8006610 <UART_SetConfig+0x4c4>)
 800660a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660e:	bf00      	nop
 8006610:	08006635 	.word	0x08006635
 8006614:	0800663d 	.word	0x0800663d
 8006618:	08006645 	.word	0x08006645
 800661c:	0800665b 	.word	0x0800665b
 8006620:	0800664b 	.word	0x0800664b
 8006624:	0800665b 	.word	0x0800665b
 8006628:	0800665b 	.word	0x0800665b
 800662c:	0800665b 	.word	0x0800665b
 8006630:	08006653 	.word	0x08006653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006634:	f7fe fa2a 	bl	8004a8c <HAL_RCC_GetPCLK1Freq>
 8006638:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800663a:	e014      	b.n	8006666 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800663c:	f7fe fa3c 	bl	8004ab8 <HAL_RCC_GetPCLK2Freq>
 8006640:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006642:	e010      	b.n	8006666 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006644:	4b26      	ldr	r3, [pc, #152]	@ (80066e0 <UART_SetConfig+0x594>)
 8006646:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006648:	e00d      	b.n	8006666 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800664a:	f7fe f9b1 	bl	80049b0 <HAL_RCC_GetSysClockFreq>
 800664e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006650:	e009      	b.n	8006666 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006652:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006656:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006658:	e005      	b.n	8006666 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800665a:	2300      	movs	r3, #0
 800665c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006664:	bf00      	nop
    }

    if (pclk != 0U)
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	2b00      	cmp	r3, #0
 800666a:	d021      	beq.n	80066b0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006670:	4a1a      	ldr	r2, [pc, #104]	@ (80066dc <UART_SetConfig+0x590>)
 8006672:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006676:	461a      	mov	r2, r3
 8006678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667a:	fbb3 f2f2 	udiv	r2, r3, r2
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	085b      	lsrs	r3, r3, #1
 8006684:	441a      	add	r2, r3
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	fbb2 f3f3 	udiv	r3, r2, r3
 800668e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006690:	6a3b      	ldr	r3, [r7, #32]
 8006692:	2b0f      	cmp	r3, #15
 8006694:	d909      	bls.n	80066aa <UART_SetConfig+0x55e>
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800669c:	d205      	bcs.n	80066aa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	60da      	str	r2, [r3, #12]
 80066a8:	e002      	b.n	80066b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	2200      	movs	r2, #0
 80066c4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	2200      	movs	r2, #0
 80066ca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80066cc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3730      	adds	r7, #48	@ 0x30
 80066d4:	46bd      	mov	sp, r7
 80066d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066da:	bf00      	nop
 80066dc:	08006db0 	.word	0x08006db0
 80066e0:	00f42400 	.word	0x00f42400

080066e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f0:	f003 0308 	and.w	r3, r3, #8
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00a      	beq.n	800670e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00a      	beq.n	8006730 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	430a      	orrs	r2, r1
 800672e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00a      	beq.n	8006752 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	430a      	orrs	r2, r1
 8006750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006756:	f003 0304 	and.w	r3, r3, #4
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00a      	beq.n	8006774 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	430a      	orrs	r2, r1
 8006772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006778:	f003 0310 	and.w	r3, r3, #16
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00a      	beq.n	8006796 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800679a:	f003 0320 	and.w	r3, r3, #32
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00a      	beq.n	80067b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	430a      	orrs	r2, r1
 80067b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d01a      	beq.n	80067fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067e2:	d10a      	bne.n	80067fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	605a      	str	r2, [r3, #4]
  }
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b098      	sub	sp, #96	@ 0x60
 800682c:	af02      	add	r7, sp, #8
 800682e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006838:	f7fa fffe 	bl	8001838 <HAL_GetTick>
 800683c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0308 	and.w	r3, r3, #8
 8006848:	2b08      	cmp	r3, #8
 800684a:	d12f      	bne.n	80068ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800684c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006854:	2200      	movs	r2, #0
 8006856:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f88e 	bl	800697c <UART_WaitOnFlagUntilTimeout>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d022      	beq.n	80068ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800686e:	e853 3f00 	ldrex	r3, [r3]
 8006872:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006876:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800687a:	653b      	str	r3, [r7, #80]	@ 0x50
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	461a      	mov	r2, r3
 8006882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006884:	647b      	str	r3, [r7, #68]	@ 0x44
 8006886:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006888:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800688a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800688c:	e841 2300 	strex	r3, r2, [r1]
 8006890:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1e6      	bne.n	8006866 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2220      	movs	r2, #32
 800689c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e063      	b.n	8006974 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0304 	and.w	r3, r3, #4
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d149      	bne.n	800694e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068c2:	2200      	movs	r2, #0
 80068c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f857 	bl	800697c <UART_WaitOnFlagUntilTimeout>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d03c      	beq.n	800694e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	623b      	str	r3, [r7, #32]
   return(result);
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	461a      	mov	r2, r3
 80068f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80068f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068fa:	e841 2300 	strex	r3, r2, [r1]
 80068fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1e6      	bne.n	80068d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	3308      	adds	r3, #8
 800690c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	e853 3f00 	ldrex	r3, [r3]
 8006914:	60fb      	str	r3, [r7, #12]
   return(result);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f023 0301 	bic.w	r3, r3, #1
 800691c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	3308      	adds	r3, #8
 8006924:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006926:	61fa      	str	r2, [r7, #28]
 8006928:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692a:	69b9      	ldr	r1, [r7, #24]
 800692c:	69fa      	ldr	r2, [r7, #28]
 800692e:	e841 2300 	strex	r3, r2, [r1]
 8006932:	617b      	str	r3, [r7, #20]
   return(result);
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1e5      	bne.n	8006906 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2220      	movs	r2, #32
 800693e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e012      	b.n	8006974 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2220      	movs	r2, #32
 8006952:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2220      	movs	r2, #32
 800695a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3758      	adds	r7, #88	@ 0x58
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	603b      	str	r3, [r7, #0]
 8006988:	4613      	mov	r3, r2
 800698a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800698c:	e04f      	b.n	8006a2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006994:	d04b      	beq.n	8006a2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006996:	f7fa ff4f 	bl	8001838 <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	69ba      	ldr	r2, [r7, #24]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d302      	bcc.n	80069ac <UART_WaitOnFlagUntilTimeout+0x30>
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e04e      	b.n	8006a4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0304 	and.w	r3, r3, #4
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d037      	beq.n	8006a2e <UART_WaitOnFlagUntilTimeout+0xb2>
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	2b80      	cmp	r3, #128	@ 0x80
 80069c2:	d034      	beq.n	8006a2e <UART_WaitOnFlagUntilTimeout+0xb2>
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	2b40      	cmp	r3, #64	@ 0x40
 80069c8:	d031      	beq.n	8006a2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	69db      	ldr	r3, [r3, #28]
 80069d0:	f003 0308 	and.w	r3, r3, #8
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	d110      	bne.n	80069fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2208      	movs	r2, #8
 80069de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 f838 	bl	8006a56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2208      	movs	r2, #8
 80069ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e029      	b.n	8006a4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a08:	d111      	bne.n	8006a2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 f81e 	bl	8006a56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2220      	movs	r2, #32
 8006a1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e00f      	b.n	8006a4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	69da      	ldr	r2, [r3, #28]
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	4013      	ands	r3, r2
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	bf0c      	ite	eq
 8006a3e:	2301      	moveq	r3, #1
 8006a40:	2300      	movne	r3, #0
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	461a      	mov	r2, r3
 8006a46:	79fb      	ldrb	r3, [r7, #7]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d0a0      	beq.n	800698e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b095      	sub	sp, #84	@ 0x54
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a66:	e853 3f00 	ldrex	r3, [r3]
 8006a6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	461a      	mov	r2, r3
 8006a7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a84:	e841 2300 	strex	r3, r2, [r1]
 8006a88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1e6      	bne.n	8006a5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3308      	adds	r3, #8
 8006a96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	e853 3f00 	ldrex	r3, [r3]
 8006a9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006aa6:	f023 0301 	bic.w	r3, r3, #1
 8006aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	3308      	adds	r3, #8
 8006ab2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ab4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006aba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e3      	bne.n	8006a90 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d118      	bne.n	8006b02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	e853 3f00 	ldrex	r3, [r3]
 8006adc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	f023 0310 	bic.w	r3, r3, #16
 8006ae4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	461a      	mov	r2, r3
 8006aec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006aee:	61bb      	str	r3, [r7, #24]
 8006af0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af2:	6979      	ldr	r1, [r7, #20]
 8006af4:	69ba      	ldr	r2, [r7, #24]
 8006af6:	e841 2300 	strex	r3, r2, [r1]
 8006afa:	613b      	str	r3, [r7, #16]
   return(result);
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1e6      	bne.n	8006ad0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2220      	movs	r2, #32
 8006b06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006b16:	bf00      	nop
 8006b18:	3754      	adds	r7, #84	@ 0x54
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b085      	sub	sp, #20
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d101      	bne.n	8006b38 <HAL_UARTEx_DisableFifoMode+0x16>
 8006b34:	2302      	movs	r3, #2
 8006b36:	e027      	b.n	8006b88 <HAL_UARTEx_DisableFifoMode+0x66>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2224      	movs	r2, #36	@ 0x24
 8006b44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 0201 	bic.w	r2, r2, #1
 8006b5e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006b66:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2220      	movs	r2, #32
 8006b7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d101      	bne.n	8006bac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006ba8:	2302      	movs	r3, #2
 8006baa:	e02d      	b.n	8006c08 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2224      	movs	r2, #36	@ 0x24
 8006bb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f022 0201 	bic.w	r2, r2, #1
 8006bd2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	430a      	orrs	r2, r1
 8006be6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f84f 	bl	8006c8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d101      	bne.n	8006c28 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c24:	2302      	movs	r3, #2
 8006c26:	e02d      	b.n	8006c84 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2224      	movs	r2, #36	@ 0x24
 8006c34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f022 0201 	bic.w	r2, r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	430a      	orrs	r2, r1
 8006c62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f811 	bl	8006c8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2220      	movs	r2, #32
 8006c76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d108      	bne.n	8006cae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006cac:	e031      	b.n	8006d12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006cae:	2308      	movs	r3, #8
 8006cb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006cb2:	2308      	movs	r3, #8
 8006cb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	0e5b      	lsrs	r3, r3, #25
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	f003 0307 	and.w	r3, r3, #7
 8006cc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	0f5b      	lsrs	r3, r3, #29
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	f003 0307 	and.w	r3, r3, #7
 8006cd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cd6:	7bbb      	ldrb	r3, [r7, #14]
 8006cd8:	7b3a      	ldrb	r2, [r7, #12]
 8006cda:	4911      	ldr	r1, [pc, #68]	@ (8006d20 <UARTEx_SetNbDataToProcess+0x94>)
 8006cdc:	5c8a      	ldrb	r2, [r1, r2]
 8006cde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006ce2:	7b3a      	ldrb	r2, [r7, #12]
 8006ce4:	490f      	ldr	r1, [pc, #60]	@ (8006d24 <UARTEx_SetNbDataToProcess+0x98>)
 8006ce6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ce8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
 8006cf6:	7b7a      	ldrb	r2, [r7, #13]
 8006cf8:	4909      	ldr	r1, [pc, #36]	@ (8006d20 <UARTEx_SetNbDataToProcess+0x94>)
 8006cfa:	5c8a      	ldrb	r2, [r1, r2]
 8006cfc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d00:	7b7a      	ldrb	r2, [r7, #13]
 8006d02:	4908      	ldr	r1, [pc, #32]	@ (8006d24 <UARTEx_SetNbDataToProcess+0x98>)
 8006d04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d06:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006d12:	bf00      	nop
 8006d14:	3714      	adds	r7, #20
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	08006dc8 	.word	0x08006dc8
 8006d24:	08006dd0 	.word	0x08006dd0

08006d28 <memset>:
 8006d28:	4402      	add	r2, r0
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d100      	bne.n	8006d32 <memset+0xa>
 8006d30:	4770      	bx	lr
 8006d32:	f803 1b01 	strb.w	r1, [r3], #1
 8006d36:	e7f9      	b.n	8006d2c <memset+0x4>

08006d38 <__libc_init_array>:
 8006d38:	b570      	push	{r4, r5, r6, lr}
 8006d3a:	4d0d      	ldr	r5, [pc, #52]	@ (8006d70 <__libc_init_array+0x38>)
 8006d3c:	4c0d      	ldr	r4, [pc, #52]	@ (8006d74 <__libc_init_array+0x3c>)
 8006d3e:	1b64      	subs	r4, r4, r5
 8006d40:	10a4      	asrs	r4, r4, #2
 8006d42:	2600      	movs	r6, #0
 8006d44:	42a6      	cmp	r6, r4
 8006d46:	d109      	bne.n	8006d5c <__libc_init_array+0x24>
 8006d48:	4d0b      	ldr	r5, [pc, #44]	@ (8006d78 <__libc_init_array+0x40>)
 8006d4a:	4c0c      	ldr	r4, [pc, #48]	@ (8006d7c <__libc_init_array+0x44>)
 8006d4c:	f000 f818 	bl	8006d80 <_init>
 8006d50:	1b64      	subs	r4, r4, r5
 8006d52:	10a4      	asrs	r4, r4, #2
 8006d54:	2600      	movs	r6, #0
 8006d56:	42a6      	cmp	r6, r4
 8006d58:	d105      	bne.n	8006d66 <__libc_init_array+0x2e>
 8006d5a:	bd70      	pop	{r4, r5, r6, pc}
 8006d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d60:	4798      	blx	r3
 8006d62:	3601      	adds	r6, #1
 8006d64:	e7ee      	b.n	8006d44 <__libc_init_array+0xc>
 8006d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d6a:	4798      	blx	r3
 8006d6c:	3601      	adds	r6, #1
 8006d6e:	e7f2      	b.n	8006d56 <__libc_init_array+0x1e>
 8006d70:	08006de0 	.word	0x08006de0
 8006d74:	08006de0 	.word	0x08006de0
 8006d78:	08006de0 	.word	0x08006de0
 8006d7c:	08006de4 	.word	0x08006de4

08006d80 <_init>:
 8006d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d82:	bf00      	nop
 8006d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d86:	bc08      	pop	{r3}
 8006d88:	469e      	mov	lr, r3
 8006d8a:	4770      	bx	lr

08006d8c <_fini>:
 8006d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8e:	bf00      	nop
 8006d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d92:	bc08      	pop	{r3}
 8006d94:	469e      	mov	lr, r3
 8006d96:	4770      	bx	lr
