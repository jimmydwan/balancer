
bldcDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056e4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080058bc  080058bc  000068bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058fc  080058fc  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080058fc  080058fc  000068fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005904  08005904  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005904  08005904  00006904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005908  08005908  00006908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800590c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  2000000c  08005918  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08005918  00007310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa0f  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d77  00000000  00000000  00021a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b0  00000000  00000000  000247c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000136d  00000000  00000000  00026078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002071a  00000000  00000000  000273e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cb33  00000000  00000000  00047aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc825  00000000  00000000  00064632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00140e57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c58  00000000  00000000  00140e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00147af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080058a4 	.word	0x080058a4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080058a4 	.word	0x080058a4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fec3 	bl	8001296 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f812 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 fb90 	bl	8000c38 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000518:	f000 f8d0 	bl	80006bc <MX_I2C1_Init>
  MX_SPI1_Init();
 800051c:	f000 f90e 	bl	800073c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000520:	f000 f94a 	bl	80007b8 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000524:	f000 fa1c 	bl	8000960 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8000528:	f000 faee 	bl	8000b08 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800052c:	f000 fb38 	bl	8000ba0 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000530:	f000 f84c 	bl	80005cc <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <main+0x2c>

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	@ 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0318 	add.w	r3, r7, #24
 8000542:	2238      	movs	r2, #56	@ 0x38
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f005 f980 	bl	800584c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800055a:	2000      	movs	r0, #0
 800055c:	f002 fab8 	bl	8002ad0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000560:	2301      	movs	r3, #1
 8000562:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000564:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000568:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056a:	2302      	movs	r3, #2
 800056c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056e:	2303      	movs	r3, #3
 8000570:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000572:	2306      	movs	r3, #6
 8000574:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000576:	2350      	movs	r3, #80	@ 0x50
 8000578:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800057a:	2302      	movs	r3, #2
 800057c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800057e:	2302      	movs	r3, #2
 8000580:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000586:	f107 0318 	add.w	r3, r7, #24
 800058a:	4618      	mov	r0, r3
 800058c:	f002 fb54 	bl	8002c38 <HAL_RCC_OscConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000596:	f000 fba1 	bl	8000cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059a:	230f      	movs	r3, #15
 800059c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059e:	2303      	movs	r3, #3
 80005a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2104      	movs	r1, #4
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 fe52 	bl	800325c <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005be:	f000 fb8d 	bl	8000cdc <Error_Handler>
  }
}
 80005c2:	bf00      	nop
 80005c4:	3750      	adds	r7, #80	@ 0x50
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08c      	sub	sp, #48	@ 0x30
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2220      	movs	r2, #32
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f005 f931 	bl	800584c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005ea:	4b32      	ldr	r3, [pc, #200]	@ (80006b4 <MX_ADC1_Init+0xe8>)
 80005ec:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f2:	4b30      	ldr	r3, [pc, #192]	@ (80006b4 <MX_ADC1_Init+0xe8>)
 80005f4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80005f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fa:	4b2e      	ldr	r3, [pc, #184]	@ (80006b4 <MX_ADC1_Init+0xe8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000600:	4b2c      	ldr	r3, [pc, #176]	@ (80006b4 <MX_ADC1_Init+0xe8>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000606:	4b2b      	ldr	r3, [pc, #172]	@ (80006b4 <MX_ADC1_Init+0xe8>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060c:	4b29      	ldr	r3, [pc, #164]	@ (80006b4 <MX_ADC1_Init+0xe8>)
 800060e:	2200      	movs	r2, #0
 8000610:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000612:	4b28      	ldr	r3, [pc, #160]	@ (80006b4 <MX_ADC1_Init+0xe8>)
 8000614:	2204      	movs	r2, #4
 8000616:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000618:	4b26      	ldr	r3, [pc, #152]	@ (80006b4 <MX_ADC1_Init+0xe8>)
 800061a:	2200      	movs	r2, #0
 800061c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800061e:	4b25      	ldr	r3, [pc, #148]	@ (80006b4 <MX_ADC1_Init+0xe8>)
 8000620:	2200      	movs	r2, #0
 8000622:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000624:	4b23      	ldr	r3, [pc, #140]	@ (80006b4 <MX_ADC1_Init+0xe8>)
 8000626:	2201      	movs	r2, #1
 8000628:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800062a:	4b22      	ldr	r3, [pc, #136]	@ (80006b4 <MX_ADC1_Init+0xe8>)
 800062c:	2200      	movs	r2, #0
 800062e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000632:	4b20      	ldr	r3, [pc, #128]	@ (80006b4 <MX_ADC1_Init+0xe8>)
 8000634:	2200      	movs	r2, #0
 8000636:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000638:	4b1e      	ldr	r3, [pc, #120]	@ (80006b4 <MX_ADC1_Init+0xe8>)
 800063a:	2200      	movs	r2, #0
 800063c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800063e:	4b1d      	ldr	r3, [pc, #116]	@ (80006b4 <MX_ADC1_Init+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000646:	4b1b      	ldr	r3, [pc, #108]	@ (80006b4 <MX_ADC1_Init+0xe8>)
 8000648:	2200      	movs	r2, #0
 800064a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800064c:	4b19      	ldr	r3, [pc, #100]	@ (80006b4 <MX_ADC1_Init+0xe8>)
 800064e:	2200      	movs	r2, #0
 8000650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000654:	4817      	ldr	r0, [pc, #92]	@ (80006b4 <MX_ADC1_Init+0xe8>)
 8000656:	f001 f865 	bl	8001724 <HAL_ADC_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000660:	f000 fb3c 	bl	8000cdc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000664:	2300      	movs	r3, #0
 8000666:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000668:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800066c:	4619      	mov	r1, r3
 800066e:	4811      	ldr	r0, [pc, #68]	@ (80006b4 <MX_ADC1_Init+0xe8>)
 8000670:	f001 fdf2 	bl	8002258 <HAL_ADCEx_MultiModeConfigChannel>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800067a:	f000 fb2f 	bl	8000cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800067e:	4b0e      	ldr	r3, [pc, #56]	@ (80006b8 <MX_ADC1_Init+0xec>)
 8000680:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000682:	2306      	movs	r3, #6
 8000684:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800068a:	237f      	movs	r3, #127	@ 0x7f
 800068c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800068e:	2304      	movs	r3, #4
 8000690:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	4619      	mov	r1, r3
 800069a:	4806      	ldr	r0, [pc, #24]	@ (80006b4 <MX_ADC1_Init+0xe8>)
 800069c:	f001 f9c6 	bl	8001a2c <HAL_ADC_ConfigChannel>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006a6:	f000 fb19 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	3730      	adds	r7, #48	@ 0x30
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000028 	.word	0x20000028
 80006b8:	2e300800 	.word	0x2e300800

080006bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000734 <MX_I2C1_Init+0x78>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000738 <MX_I2C1_Init+0x7c>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006cc:	4b18      	ldr	r3, [pc, #96]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d2:	4b17      	ldr	r3, [pc, #92]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b15      	ldr	r3, [pc, #84]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006de:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ea:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f6:	480e      	ldr	r0, [pc, #56]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006f8:	f002 f8b8 	bl	800286c <HAL_I2C_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000702:	f000 faeb 	bl	8000cdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000706:	2100      	movs	r1, #0
 8000708:	4809      	ldr	r0, [pc, #36]	@ (8000730 <MX_I2C1_Init+0x74>)
 800070a:	f002 f94a 	bl	80029a2 <HAL_I2CEx_ConfigAnalogFilter>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000714:	f000 fae2 	bl	8000cdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000718:	2100      	movs	r1, #0
 800071a:	4805      	ldr	r0, [pc, #20]	@ (8000730 <MX_I2C1_Init+0x74>)
 800071c:	f002 f98c 	bl	8002a38 <HAL_I2CEx_ConfigDigitalFilter>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000726:	f000 fad9 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000094 	.word	0x20000094
 8000734:	40005400 	.word	0x40005400
 8000738:	30909dec 	.word	0x30909dec

0800073c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000740:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <MX_SPI1_Init+0x74>)
 8000742:	4a1c      	ldr	r2, [pc, #112]	@ (80007b4 <MX_SPI1_Init+0x78>)
 8000744:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000746:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <MX_SPI1_Init+0x74>)
 8000748:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800074c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800074e:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <MX_SPI1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000754:	4b16      	ldr	r3, [pc, #88]	@ (80007b0 <MX_SPI1_Init+0x74>)
 8000756:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800075a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800075c:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_SPI1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000762:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <MX_SPI1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000768:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_SPI1_Init+0x74>)
 800076a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800076e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_SPI1_Init+0x74>)
 8000772:	2218      	movs	r2, #24
 8000774:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_SPI1_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_SPI1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	@ (80007b0 <MX_SPI1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000788:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_SPI1_Init+0x74>)
 800078a:	2207      	movs	r2, #7
 800078c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800078e:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <MX_SPI1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_SPI1_Init+0x74>)
 8000796:	2208      	movs	r2, #8
 8000798:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_SPI1_Init+0x74>)
 800079c:	f003 f96a 	bl	8003a74 <HAL_SPI_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007a6:	f000 fa99 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000e8 	.word	0x200000e8
 80007b4:	40013000 	.word	0x40013000

080007b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b09c      	sub	sp, #112	@ 0x70
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007be:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
 80007e8:	615a      	str	r2, [r3, #20]
 80007ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2234      	movs	r2, #52	@ 0x34
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f005 f82a 	bl	800584c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007f8:	4b57      	ldr	r3, [pc, #348]	@ (8000958 <MX_TIM1_Init+0x1a0>)
 80007fa:	4a58      	ldr	r2, [pc, #352]	@ (800095c <MX_TIM1_Init+0x1a4>)
 80007fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007fe:	4b56      	ldr	r3, [pc, #344]	@ (8000958 <MX_TIM1_Init+0x1a0>)
 8000800:	2200      	movs	r2, #0
 8000802:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000804:	4b54      	ldr	r3, [pc, #336]	@ (8000958 <MX_TIM1_Init+0x1a0>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800080a:	4b53      	ldr	r3, [pc, #332]	@ (8000958 <MX_TIM1_Init+0x1a0>)
 800080c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000810:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000812:	4b51      	ldr	r3, [pc, #324]	@ (8000958 <MX_TIM1_Init+0x1a0>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000818:	4b4f      	ldr	r3, [pc, #316]	@ (8000958 <MX_TIM1_Init+0x1a0>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081e:	4b4e      	ldr	r3, [pc, #312]	@ (8000958 <MX_TIM1_Init+0x1a0>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000824:	484c      	ldr	r0, [pc, #304]	@ (8000958 <MX_TIM1_Init+0x1a0>)
 8000826:	f003 f9d0 	bl	8003bca <HAL_TIM_Base_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000830:	f000 fa54 	bl	8000cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000834:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000838:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800083a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800083e:	4619      	mov	r1, r3
 8000840:	4845      	ldr	r0, [pc, #276]	@ (8000958 <MX_TIM1_Init+0x1a0>)
 8000842:	f003 fb8f 	bl	8003f64 <HAL_TIM_ConfigClockSource>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800084c:	f000 fa46 	bl	8000cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000850:	4841      	ldr	r0, [pc, #260]	@ (8000958 <MX_TIM1_Init+0x1a0>)
 8000852:	f003 fa11 	bl	8003c78 <HAL_TIM_PWM_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800085c:	f000 fa3e 	bl	8000cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000860:	2300      	movs	r3, #0
 8000862:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000864:	2300      	movs	r3, #0
 8000866:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800086c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000870:	4619      	mov	r1, r3
 8000872:	4839      	ldr	r0, [pc, #228]	@ (8000958 <MX_TIM1_Init+0x1a0>)
 8000874:	f004 f89e 	bl	80049b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800087e:	f000 fa2d 	bl	8000cdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000882:	2360      	movs	r3, #96	@ 0x60
 8000884:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800088a:	2300      	movs	r3, #0
 800088c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800088e:	2300      	movs	r3, #0
 8000890:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000892:	2300      	movs	r3, #0
 8000894:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000896:	2300      	movs	r3, #0
 8000898:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800089a:	2300      	movs	r3, #0
 800089c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800089e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008a2:	2200      	movs	r2, #0
 80008a4:	4619      	mov	r1, r3
 80008a6:	482c      	ldr	r0, [pc, #176]	@ (8000958 <MX_TIM1_Init+0x1a0>)
 80008a8:	f003 fa48 	bl	8003d3c <HAL_TIM_PWM_ConfigChannel>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80008b2:	f000 fa13 	bl	8000cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008b6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008ba:	2204      	movs	r2, #4
 80008bc:	4619      	mov	r1, r3
 80008be:	4826      	ldr	r0, [pc, #152]	@ (8000958 <MX_TIM1_Init+0x1a0>)
 80008c0:	f003 fa3c 	bl	8003d3c <HAL_TIM_PWM_ConfigChannel>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80008ca:	f000 fa07 	bl	8000cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008d2:	2208      	movs	r2, #8
 80008d4:	4619      	mov	r1, r3
 80008d6:	4820      	ldr	r0, [pc, #128]	@ (8000958 <MX_TIM1_Init+0x1a0>)
 80008d8:	f003 fa30 	bl	8003d3c <HAL_TIM_PWM_ConfigChannel>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80008e2:	f000 f9fb 	bl	8000cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008ea:	220c      	movs	r2, #12
 80008ec:	4619      	mov	r1, r3
 80008ee:	481a      	ldr	r0, [pc, #104]	@ (8000958 <MX_TIM1_Init+0x1a0>)
 80008f0:	f003 fa24 	bl	8003d3c <HAL_TIM_PWM_ConfigChannel>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80008fa:	f000 f9ef 	bl	8000cdc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000912:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000916:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000924:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000928:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800092e:	2300      	movs	r3, #0
 8000930:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000932:	2300      	movs	r3, #0
 8000934:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	4619      	mov	r1, r3
 800093a:	4807      	ldr	r0, [pc, #28]	@ (8000958 <MX_TIM1_Init+0x1a0>)
 800093c:	f004 f8bc 	bl	8004ab8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 8000946:	f000 f9c9 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800094a:	4803      	ldr	r0, [pc, #12]	@ (8000958 <MX_TIM1_Init+0x1a0>)
 800094c:	f000 fb32 	bl	8000fb4 <HAL_TIM_MspPostInit>

}
 8000950:	bf00      	nop
 8000952:	3770      	adds	r7, #112	@ 0x70
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	2000014c 	.word	0x2000014c
 800095c:	40012c00 	.word	0x40012c00

08000960 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b09c      	sub	sp, #112	@ 0x70
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000966:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000974:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000980:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
 8000990:	615a      	str	r2, [r3, #20]
 8000992:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2234      	movs	r2, #52	@ 0x34
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f004 ff56 	bl	800584c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80009a0:	4b57      	ldr	r3, [pc, #348]	@ (8000b00 <MX_TIM8_Init+0x1a0>)
 80009a2:	4a58      	ldr	r2, [pc, #352]	@ (8000b04 <MX_TIM8_Init+0x1a4>)
 80009a4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80009a6:	4b56      	ldr	r3, [pc, #344]	@ (8000b00 <MX_TIM8_Init+0x1a0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ac:	4b54      	ldr	r3, [pc, #336]	@ (8000b00 <MX_TIM8_Init+0x1a0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80009b2:	4b53      	ldr	r3, [pc, #332]	@ (8000b00 <MX_TIM8_Init+0x1a0>)
 80009b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009b8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ba:	4b51      	ldr	r3, [pc, #324]	@ (8000b00 <MX_TIM8_Init+0x1a0>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80009c0:	4b4f      	ldr	r3, [pc, #316]	@ (8000b00 <MX_TIM8_Init+0x1a0>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c6:	4b4e      	ldr	r3, [pc, #312]	@ (8000b00 <MX_TIM8_Init+0x1a0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80009cc:	484c      	ldr	r0, [pc, #304]	@ (8000b00 <MX_TIM8_Init+0x1a0>)
 80009ce:	f003 f8fc 	bl	8003bca <HAL_TIM_Base_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80009d8:	f000 f980 	bl	8000cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009e0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80009e2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80009e6:	4619      	mov	r1, r3
 80009e8:	4845      	ldr	r0, [pc, #276]	@ (8000b00 <MX_TIM8_Init+0x1a0>)
 80009ea:	f003 fabb 	bl	8003f64 <HAL_TIM_ConfigClockSource>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80009f4:	f000 f972 	bl	8000cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80009f8:	4841      	ldr	r0, [pc, #260]	@ (8000b00 <MX_TIM8_Init+0x1a0>)
 80009fa:	f003 f93d 	bl	8003c78 <HAL_TIM_PWM_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000a04:	f000 f96a 	bl	8000cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a14:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4839      	ldr	r0, [pc, #228]	@ (8000b00 <MX_TIM8_Init+0x1a0>)
 8000a1c:	f003 ffca 	bl	80049b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000a26:	f000 f959 	bl	8000cdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a2a:	2360      	movs	r3, #96	@ 0x60
 8000a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a32:	2300      	movs	r3, #0
 8000a34:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a36:	2300      	movs	r3, #0
 8000a38:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a42:	2300      	movs	r3, #0
 8000a44:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a46:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	482c      	ldr	r0, [pc, #176]	@ (8000b00 <MX_TIM8_Init+0x1a0>)
 8000a50:	f003 f974 	bl	8003d3c <HAL_TIM_PWM_ConfigChannel>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8000a5a:	f000 f93f 	bl	8000cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a5e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a62:	2204      	movs	r2, #4
 8000a64:	4619      	mov	r1, r3
 8000a66:	4826      	ldr	r0, [pc, #152]	@ (8000b00 <MX_TIM8_Init+0x1a0>)
 8000a68:	f003 f968 	bl	8003d3c <HAL_TIM_PWM_ConfigChannel>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8000a72:	f000 f933 	bl	8000cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a76:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a7a:	2208      	movs	r2, #8
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4820      	ldr	r0, [pc, #128]	@ (8000b00 <MX_TIM8_Init+0x1a0>)
 8000a80:	f003 f95c 	bl	8003d3c <HAL_TIM_PWM_ConfigChannel>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8000a8a:	f000 f927 	bl	8000cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a8e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a92:	220c      	movs	r2, #12
 8000a94:	4619      	mov	r1, r3
 8000a96:	481a      	ldr	r0, [pc, #104]	@ (8000b00 <MX_TIM8_Init+0x1a0>)
 8000a98:	f003 f950 	bl	8003d3c <HAL_TIM_PWM_ConfigChannel>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 8000aa2:	f000 f91b 	bl	8000cdc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000abe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000acc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4807      	ldr	r0, [pc, #28]	@ (8000b00 <MX_TIM8_Init+0x1a0>)
 8000ae4:	f003 ffe8 	bl	8004ab8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM8_Init+0x192>
  {
    Error_Handler();
 8000aee:	f000 f8f5 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000af2:	4803      	ldr	r0, [pc, #12]	@ (8000b00 <MX_TIM8_Init+0x1a0>)
 8000af4:	f000 fa5e 	bl	8000fb4 <HAL_TIM_MspPostInit>

}
 8000af8:	bf00      	nop
 8000afa:	3770      	adds	r7, #112	@ 0x70
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000198 	.word	0x20000198
 8000b04:	40013400 	.word	0x40013400

08000b08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b0c:	4b22      	ldr	r3, [pc, #136]	@ (8000b98 <MX_USART2_UART_Init+0x90>)
 8000b0e:	4a23      	ldr	r2, [pc, #140]	@ (8000b9c <MX_USART2_UART_Init+0x94>)
 8000b10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b12:	4b21      	ldr	r3, [pc, #132]	@ (8000b98 <MX_USART2_UART_Init+0x90>)
 8000b14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000b98 <MX_USART2_UART_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b20:	4b1d      	ldr	r3, [pc, #116]	@ (8000b98 <MX_USART2_UART_Init+0x90>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b26:	4b1c      	ldr	r3, [pc, #112]	@ (8000b98 <MX_USART2_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b98 <MX_USART2_UART_Init+0x90>)
 8000b2e:	220c      	movs	r2, #12
 8000b30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b32:	4b19      	ldr	r3, [pc, #100]	@ (8000b98 <MX_USART2_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b38:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <MX_USART2_UART_Init+0x90>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b3e:	4b16      	ldr	r3, [pc, #88]	@ (8000b98 <MX_USART2_UART_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b44:	4b14      	ldr	r3, [pc, #80]	@ (8000b98 <MX_USART2_UART_Init+0x90>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b4a:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <MX_USART2_UART_Init+0x90>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b50:	4811      	ldr	r0, [pc, #68]	@ (8000b98 <MX_USART2_UART_Init+0x90>)
 8000b52:	f004 f83d 	bl	8004bd0 <HAL_UART_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b5c:	f000 f8be 	bl	8000cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b60:	2100      	movs	r1, #0
 8000b62:	480d      	ldr	r0, [pc, #52]	@ (8000b98 <MX_USART2_UART_Init+0x90>)
 8000b64:	f004 fda8 	bl	80056b8 <HAL_UARTEx_SetTxFifoThreshold>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b6e:	f000 f8b5 	bl	8000cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b72:	2100      	movs	r1, #0
 8000b74:	4808      	ldr	r0, [pc, #32]	@ (8000b98 <MX_USART2_UART_Init+0x90>)
 8000b76:	f004 fddd 	bl	8005734 <HAL_UARTEx_SetRxFifoThreshold>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b80:	f000 f8ac 	bl	8000cdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b84:	4804      	ldr	r0, [pc, #16]	@ (8000b98 <MX_USART2_UART_Init+0x90>)
 8000b86:	f004 fd5e 	bl	8005646 <HAL_UARTEx_DisableFifoMode>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b90:	f000 f8a4 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200001e4 	.word	0x200001e4
 8000b9c:	40004400 	.word	0x40004400

08000ba0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ba4:	4b22      	ldr	r3, [pc, #136]	@ (8000c30 <MX_USART3_UART_Init+0x90>)
 8000ba6:	4a23      	ldr	r2, [pc, #140]	@ (8000c34 <MX_USART3_UART_Init+0x94>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000baa:	4b21      	ldr	r3, [pc, #132]	@ (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bca:	4b19      	ldr	r3, [pc, #100]	@ (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd0:	4b17      	ldr	r3, [pc, #92]	@ (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd6:	4b16      	ldr	r3, [pc, #88]	@ (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bdc:	4b14      	ldr	r3, [pc, #80]	@ (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be2:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <MX_USART3_UART_Init+0x90>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000be8:	4811      	ldr	r0, [pc, #68]	@ (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bea:	f003 fff1 	bl	8004bd0 <HAL_UART_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bf4:	f000 f872 	bl	8000cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	480d      	ldr	r0, [pc, #52]	@ (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bfc:	f004 fd5c 	bl	80056b8 <HAL_UARTEx_SetTxFifoThreshold>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c06:	f000 f869 	bl	8000cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4808      	ldr	r0, [pc, #32]	@ (8000c30 <MX_USART3_UART_Init+0x90>)
 8000c0e:	f004 fd91 	bl	8005734 <HAL_UARTEx_SetRxFifoThreshold>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c18:	f000 f860 	bl	8000cdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c1c:	4804      	ldr	r0, [pc, #16]	@ (8000c30 <MX_USART3_UART_Init+0x90>)
 8000c1e:	f004 fd12 	bl	8005646 <HAL_UARTEx_DisableFifoMode>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c28:	f000 f858 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000278 	.word	0x20000278
 8000c34:	40004800 	.word	0x40004800

08000c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c4e:	4b21      	ldr	r3, [pc, #132]	@ (8000cd4 <MX_GPIO_Init+0x9c>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c52:	4a20      	ldr	r2, [pc, #128]	@ (8000cd4 <MX_GPIO_Init+0x9c>)
 8000c54:	f043 0320 	orr.w	r3, r3, #32
 8000c58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd4 <MX_GPIO_Init+0x9c>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5e:	f003 0320 	and.w	r3, r3, #32
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd4 <MX_GPIO_Init+0x9c>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6a:	4a1a      	ldr	r2, [pc, #104]	@ (8000cd4 <MX_GPIO_Init+0x9c>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c72:	4b18      	ldr	r3, [pc, #96]	@ (8000cd4 <MX_GPIO_Init+0x9c>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <MX_GPIO_Init+0x9c>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c82:	4a14      	ldr	r2, [pc, #80]	@ (8000cd4 <MX_GPIO_Init+0x9c>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c8a:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <MX_GPIO_Init+0x9c>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c96:	2310      	movs	r3, #16
 8000c98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c9a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca4:	f107 030c 	add.w	r3, r7, #12
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cae:	f001 fc5b 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000cb2:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000cb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4804      	ldr	r0, [pc, #16]	@ (8000cd8 <MX_GPIO_Init+0xa0>)
 8000cc8:	f001 fc4e 	bl	8002568 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ccc:	bf00      	nop
 8000cce:	3720      	adds	r7, #32
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	48000400 	.word	0x48000400

08000cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce0:	b672      	cpsid	i
}
 8000ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <Error_Handler+0x8>

08000ce8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <HAL_MspInit+0x44>)
 8000cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cf2:	4a0e      	ldr	r2, [pc, #56]	@ (8000d2c <HAL_MspInit+0x44>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <HAL_MspInit+0x44>)
 8000cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	4b09      	ldr	r3, [pc, #36]	@ (8000d2c <HAL_MspInit+0x44>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d0a:	4a08      	ldr	r2, [pc, #32]	@ (8000d2c <HAL_MspInit+0x44>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d10:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d12:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <HAL_MspInit+0x44>)
 8000d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d1e:	f001 ff7b 	bl	8002c18 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000

08000d30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b09a      	sub	sp, #104	@ 0x68
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	2244      	movs	r2, #68	@ 0x44
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f004 fd7b 	bl	800584c <memset>
  if(hadc->Instance==ADC1)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d5e:	d134      	bne.n	8000dca <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000d60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d64:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000d66:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	4618      	mov	r0, r3
 8000d72:	f002 fc8f 	bl	8003694 <HAL_RCCEx_PeriphCLKConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000d7c:	f7ff ffae 	bl	8000cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d80:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <HAL_ADC_MspInit+0xa4>)
 8000d82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d84:	4a13      	ldr	r2, [pc, #76]	@ (8000dd4 <HAL_ADC_MspInit+0xa4>)
 8000d86:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d8c:	4b11      	ldr	r3, [pc, #68]	@ (8000dd4 <HAL_ADC_MspInit+0xa4>)
 8000d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d98:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd4 <HAL_ADC_MspInit+0xa4>)
 8000d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd4 <HAL_ADC_MspInit+0xa4>)
 8000d9e:	f043 0302 	orr.w	r3, r3, #2
 8000da2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000da4:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd4 <HAL_ADC_MspInit+0xa4>)
 8000da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000db0:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000db4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db6:	2303      	movs	r3, #3
 8000db8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4804      	ldr	r0, [pc, #16]	@ (8000dd8 <HAL_ADC_MspInit+0xa8>)
 8000dc6:	f001 fbcf 	bl	8002568 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dca:	bf00      	nop
 8000dcc:	3768      	adds	r7, #104	@ 0x68
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	48000400 	.word	0x48000400

08000ddc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b09c      	sub	sp, #112	@ 0x70
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df4:	f107 0318 	add.w	r3, r7, #24
 8000df8:	2244      	movs	r2, #68	@ 0x44
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f004 fd25 	bl	800584c <memset>
  if(hi2c->Instance==I2C1)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a2d      	ldr	r2, [pc, #180]	@ (8000ebc <HAL_I2C_MspInit+0xe0>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d153      	bne.n	8000eb4 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e0c:	2340      	movs	r3, #64	@ 0x40
 8000e0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e14:	f107 0318 	add.w	r3, r7, #24
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 fc3b 	bl	8003694 <HAL_RCCEx_PeriphCLKConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e24:	f7ff ff5a 	bl	8000cdc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e28:	4b25      	ldr	r3, [pc, #148]	@ (8000ec0 <HAL_I2C_MspInit+0xe4>)
 8000e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2c:	4a24      	ldr	r2, [pc, #144]	@ (8000ec0 <HAL_I2C_MspInit+0xe4>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e34:	4b22      	ldr	r3, [pc, #136]	@ (8000ec0 <HAL_I2C_MspInit+0xe4>)
 8000e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	617b      	str	r3, [r7, #20]
 8000e3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e40:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec0 <HAL_I2C_MspInit+0xe4>)
 8000e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e44:	4a1e      	ldr	r2, [pc, #120]	@ (8000ec0 <HAL_I2C_MspInit+0xe4>)
 8000e46:	f043 0302 	orr.w	r3, r3, #2
 8000e4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec0 <HAL_I2C_MspInit+0xe4>)
 8000e4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e50:	f003 0302 	and.w	r3, r3, #2
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e5e:	2312      	movs	r3, #18
 8000e60:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e72:	4619      	mov	r1, r3
 8000e74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e78:	f001 fb76 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e7c:	2380      	movs	r3, #128	@ 0x80
 8000e7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e80:	2312      	movs	r3, #18
 8000e82:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e90:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e94:	4619      	mov	r1, r3
 8000e96:	480b      	ldr	r0, [pc, #44]	@ (8000ec4 <HAL_I2C_MspInit+0xe8>)
 8000e98:	f001 fb66 	bl	8002568 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <HAL_I2C_MspInit+0xe4>)
 8000e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ea0:	4a07      	ldr	r2, [pc, #28]	@ (8000ec0 <HAL_I2C_MspInit+0xe4>)
 8000ea2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ea6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ea8:	4b05      	ldr	r3, [pc, #20]	@ (8000ec0 <HAL_I2C_MspInit+0xe4>)
 8000eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000eb4:	bf00      	nop
 8000eb6:	3770      	adds	r7, #112	@ 0x70
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40005400 	.word	0x40005400
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	48000400 	.word	0x48000400

08000ec8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	@ 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a17      	ldr	r2, [pc, #92]	@ (8000f44 <HAL_SPI_MspInit+0x7c>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d128      	bne.n	8000f3c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eea:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <HAL_SPI_MspInit+0x80>)
 8000eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eee:	4a16      	ldr	r2, [pc, #88]	@ (8000f48 <HAL_SPI_MspInit+0x80>)
 8000ef0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ef4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ef6:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <HAL_SPI_MspInit+0x80>)
 8000ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000efa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <HAL_SPI_MspInit+0x80>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f06:	4a10      	ldr	r2, [pc, #64]	@ (8000f48 <HAL_SPI_MspInit+0x80>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <HAL_SPI_MspInit+0x80>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f1a:	23e0      	movs	r3, #224	@ 0xe0
 8000f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f2a:	2305      	movs	r3, #5
 8000f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f38:	f001 fb16 	bl	8002568 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f3c:	bf00      	nop
 8000f3e:	3728      	adds	r7, #40	@ 0x28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40013000 	.word	0x40013000
 8000f48:	40021000 	.word	0x40021000

08000f4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a13      	ldr	r2, [pc, #76]	@ (8000fa8 <HAL_TIM_Base_MspInit+0x5c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d10c      	bne.n	8000f78 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f5e:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <HAL_TIM_Base_MspInit+0x60>)
 8000f60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f62:	4a12      	ldr	r2, [pc, #72]	@ (8000fac <HAL_TIM_Base_MspInit+0x60>)
 8000f64:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f68:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f6a:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <HAL_TIM_Base_MspInit+0x60>)
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000f76:	e010      	b.n	8000f9a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM8)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0c      	ldr	r2, [pc, #48]	@ (8000fb0 <HAL_TIM_Base_MspInit+0x64>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d10b      	bne.n	8000f9a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000f82:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <HAL_TIM_Base_MspInit+0x60>)
 8000f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f86:	4a09      	ldr	r2, [pc, #36]	@ (8000fac <HAL_TIM_Base_MspInit+0x60>)
 8000f88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f8e:	4b07      	ldr	r3, [pc, #28]	@ (8000fac <HAL_TIM_Base_MspInit+0x60>)
 8000f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40012c00 	.word	0x40012c00
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40013400 	.word	0x40013400

08000fb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	@ 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a2b      	ldr	r2, [pc, #172]	@ (8001080 <HAL_TIM_MspPostInit+0xcc>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d11e      	bne.n	8001014 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	4b2b      	ldr	r3, [pc, #172]	@ (8001084 <HAL_TIM_MspPostInit+0xd0>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fda:	4a2a      	ldr	r2, [pc, #168]	@ (8001084 <HAL_TIM_MspPostInit+0xd0>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fe2:	4b28      	ldr	r3, [pc, #160]	@ (8001084 <HAL_TIM_MspPostInit+0xd0>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000fee:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001000:	2306      	movs	r3, #6
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100e:	f001 faab 	bl	8002568 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001012:	e031      	b.n	8001078 <HAL_TIM_MspPostInit+0xc4>
  else if(htim->Instance==TIM8)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a1b      	ldr	r2, [pc, #108]	@ (8001088 <HAL_TIM_MspPostInit+0xd4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d12c      	bne.n	8001078 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	4b19      	ldr	r3, [pc, #100]	@ (8001084 <HAL_TIM_MspPostInit+0xd0>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001022:	4a18      	ldr	r2, [pc, #96]	@ (8001084 <HAL_TIM_MspPostInit+0xd0>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800102a:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <HAL_TIM_MspPostInit+0xd0>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001036:	2340      	movs	r3, #64	@ 0x40
 8001038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8001046:	2305      	movs	r3, #5
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	480e      	ldr	r0, [pc, #56]	@ (800108c <HAL_TIM_MspPostInit+0xd8>)
 8001052:	f001 fa89 	bl	8002568 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001056:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800105a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8001068:	230a      	movs	r3, #10
 800106a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	4806      	ldr	r0, [pc, #24]	@ (800108c <HAL_TIM_MspPostInit+0xd8>)
 8001074:	f001 fa78 	bl	8002568 <HAL_GPIO_Init>
}
 8001078:	bf00      	nop
 800107a:	3728      	adds	r7, #40	@ 0x28
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40012c00 	.word	0x40012c00
 8001084:	40021000 	.word	0x40021000
 8001088:	40013400 	.word	0x40013400
 800108c:	48000400 	.word	0x48000400

08001090 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b09c      	sub	sp, #112	@ 0x70
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a8:	f107 0318 	add.w	r3, r7, #24
 80010ac:	2244      	movs	r2, #68	@ 0x44
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f004 fbcb 	bl	800584c <memset>
  if(huart->Instance==USART2)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a3d      	ldr	r2, [pc, #244]	@ (80011b0 <HAL_UART_MspInit+0x120>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d137      	bne.n	8001130 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010c0:	2302      	movs	r3, #2
 80010c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c8:	f107 0318 	add.w	r3, r7, #24
 80010cc:	4618      	mov	r0, r3
 80010ce:	f002 fae1 	bl	8003694 <HAL_RCCEx_PeriphCLKConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010d8:	f7ff fe00 	bl	8000cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010dc:	4b35      	ldr	r3, [pc, #212]	@ (80011b4 <HAL_UART_MspInit+0x124>)
 80010de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e0:	4a34      	ldr	r2, [pc, #208]	@ (80011b4 <HAL_UART_MspInit+0x124>)
 80010e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80010e8:	4b32      	ldr	r3, [pc, #200]	@ (80011b4 <HAL_UART_MspInit+0x124>)
 80010ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	4b2f      	ldr	r3, [pc, #188]	@ (80011b4 <HAL_UART_MspInit+0x124>)
 80010f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f8:	4a2e      	ldr	r2, [pc, #184]	@ (80011b4 <HAL_UART_MspInit+0x124>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001100:	4b2c      	ldr	r3, [pc, #176]	@ (80011b4 <HAL_UART_MspInit+0x124>)
 8001102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800110c:	230c      	movs	r3, #12
 800110e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800111c:	2307      	movs	r3, #7
 800111e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001124:	4619      	mov	r1, r3
 8001126:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800112a:	f001 fa1d 	bl	8002568 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800112e:	e03b      	b.n	80011a8 <HAL_UART_MspInit+0x118>
  else if(huart->Instance==USART3)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a20      	ldr	r2, [pc, #128]	@ (80011b8 <HAL_UART_MspInit+0x128>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d136      	bne.n	80011a8 <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800113a:	2304      	movs	r3, #4
 800113c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800113e:	2300      	movs	r3, #0
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001142:	f107 0318 	add.w	r3, r7, #24
 8001146:	4618      	mov	r0, r3
 8001148:	f002 faa4 	bl	8003694 <HAL_RCCEx_PeriphCLKConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001152:	f7ff fdc3 	bl	8000cdc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001156:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <HAL_UART_MspInit+0x124>)
 8001158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115a:	4a16      	ldr	r2, [pc, #88]	@ (80011b4 <HAL_UART_MspInit+0x124>)
 800115c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001160:	6593      	str	r3, [r2, #88]	@ 0x58
 8001162:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <HAL_UART_MspInit+0x124>)
 8001164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001166:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116e:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <HAL_UART_MspInit+0x124>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	4a10      	ldr	r2, [pc, #64]	@ (80011b4 <HAL_UART_MspInit+0x124>)
 8001174:	f043 0302 	orr.w	r3, r3, #2
 8001178:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800117a:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <HAL_UART_MspInit+0x124>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001186:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800118a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2300      	movs	r3, #0
 8001196:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001198:	2307      	movs	r3, #7
 800119a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80011a0:	4619      	mov	r1, r3
 80011a2:	4806      	ldr	r0, [pc, #24]	@ (80011bc <HAL_UART_MspInit+0x12c>)
 80011a4:	f001 f9e0 	bl	8002568 <HAL_GPIO_Init>
}
 80011a8:	bf00      	nop
 80011aa:	3770      	adds	r7, #112	@ 0x70
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40004400 	.word	0x40004400
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40004800 	.word	0x40004800
 80011bc:	48000400 	.word	0x48000400

080011c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <NMI_Handler+0x4>

080011c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <HardFault_Handler+0x4>

080011d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <MemManage_Handler+0x4>

080011d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <BusFault_Handler+0x4>

080011e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <UsageFault_Handler+0x4>

080011e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001216:	f000 f891 	bl	800133c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001224:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <SystemInit+0x20>)
 8001226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800122a:	4a05      	ldr	r2, [pc, #20]	@ (8001240 <SystemInit+0x20>)
 800122c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001230:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001244:	480d      	ldr	r0, [pc, #52]	@ (800127c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001246:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001248:	f7ff ffea 	bl	8001220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800124c:	480c      	ldr	r0, [pc, #48]	@ (8001280 <LoopForever+0x6>)
  ldr r1, =_edata
 800124e:	490d      	ldr	r1, [pc, #52]	@ (8001284 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001250:	4a0d      	ldr	r2, [pc, #52]	@ (8001288 <LoopForever+0xe>)
  movs r3, #0
 8001252:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001254:	e002      	b.n	800125c <LoopCopyDataInit>

08001256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125a:	3304      	adds	r3, #4

0800125c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800125c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001260:	d3f9      	bcc.n	8001256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001262:	4a0a      	ldr	r2, [pc, #40]	@ (800128c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001264:	4c0a      	ldr	r4, [pc, #40]	@ (8001290 <LoopForever+0x16>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001268:	e001      	b.n	800126e <LoopFillZerobss>

0800126a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800126c:	3204      	adds	r2, #4

0800126e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001270:	d3fb      	bcc.n	800126a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001272:	f004 faf3 	bl	800585c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001276:	f7ff f947 	bl	8000508 <main>

0800127a <LoopForever>:

LoopForever:
    b LoopForever
 800127a:	e7fe      	b.n	800127a <LoopForever>
  ldr   r0, =_estack
 800127c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001284:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001288:	0800590c 	.word	0x0800590c
  ldr r2, =_sbss
 800128c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001290:	20000310 	.word	0x20000310

08001294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001294:	e7fe      	b.n	8001294 <ADC1_2_IRQHandler>

08001296 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800129c:	2300      	movs	r3, #0
 800129e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a0:	2003      	movs	r0, #3
 80012a2:	f001 f92f 	bl	8002504 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012a6:	200f      	movs	r0, #15
 80012a8:	f000 f80e 	bl	80012c8 <HAL_InitTick>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d002      	beq.n	80012b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	71fb      	strb	r3, [r7, #7]
 80012b6:	e001      	b.n	80012bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012b8:	f7ff fd16 	bl	8000ce8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012bc:	79fb      	ldrb	r3, [r7, #7]

}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012d4:	4b16      	ldr	r3, [pc, #88]	@ (8001330 <HAL_InitTick+0x68>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d022      	beq.n	8001322 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012dc:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <HAL_InitTick+0x6c>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b13      	ldr	r3, [pc, #76]	@ (8001330 <HAL_InitTick+0x68>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80012ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	f001 f92c 	bl	800254e <HAL_SYSTICK_Config>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10f      	bne.n	800131c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b0f      	cmp	r3, #15
 8001300:	d809      	bhi.n	8001316 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001302:	2200      	movs	r2, #0
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	f04f 30ff 	mov.w	r0, #4294967295
 800130a:	f001 f906 	bl	800251a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800130e:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <HAL_InitTick+0x70>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	e007      	b.n	8001326 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	73fb      	strb	r3, [r7, #15]
 800131a:	e004      	b.n	8001326 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e001      	b.n	8001326 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001326:	7bfb      	ldrb	r3, [r7, #15]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000008 	.word	0x20000008
 8001334:	20000000 	.word	0x20000000
 8001338:	20000004 	.word	0x20000004

0800133c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001340:	4b05      	ldr	r3, [pc, #20]	@ (8001358 <HAL_IncTick+0x1c>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b05      	ldr	r3, [pc, #20]	@ (800135c <HAL_IncTick+0x20>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4413      	add	r3, r2
 800134a:	4a03      	ldr	r2, [pc, #12]	@ (8001358 <HAL_IncTick+0x1c>)
 800134c:	6013      	str	r3, [r2, #0]
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	2000030c 	.word	0x2000030c
 800135c:	20000008 	.word	0x20000008

08001360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return uwTick;
 8001364:	4b03      	ldr	r3, [pc, #12]	@ (8001374 <HAL_GetTick+0x14>)
 8001366:	681b      	ldr	r3, [r3, #0]
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	2000030c 	.word	0x2000030c

08001378 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	431a      	orrs	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	609a      	str	r2, [r3, #8]
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	431a      	orrs	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	609a      	str	r2, [r3, #8]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b087      	sub	sp, #28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	3360      	adds	r3, #96	@ 0x60
 80013f2:	461a      	mov	r2, r3
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <LL_ADC_SetOffset+0x44>)
 8001402:	4013      	ands	r3, r2
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	430a      	orrs	r2, r1
 800140e:	4313      	orrs	r3, r2
 8001410:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001418:	bf00      	nop
 800141a:	371c      	adds	r7, #28
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	03fff000 	.word	0x03fff000

08001428 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3360      	adds	r3, #96	@ 0x60
 8001436:	461a      	mov	r2, r3
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001448:	4618      	mov	r0, r3
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001454:	b480      	push	{r7}
 8001456:	b087      	sub	sp, #28
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3360      	adds	r3, #96	@ 0x60
 8001464:	461a      	mov	r2, r3
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	431a      	orrs	r2, r3
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800147e:	bf00      	nop
 8001480:	371c      	adds	r7, #28
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800148a:	b480      	push	{r7}
 800148c:	b087      	sub	sp, #28
 800148e:	af00      	add	r7, sp, #0
 8001490:	60f8      	str	r0, [r7, #12]
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	3360      	adds	r3, #96	@ 0x60
 800149a:	461a      	mov	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	431a      	orrs	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80014b4:	bf00      	nop
 80014b6:	371c      	adds	r7, #28
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b087      	sub	sp, #28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3360      	adds	r3, #96	@ 0x60
 80014d0:	461a      	mov	r2, r3
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	431a      	orrs	r2, r3
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80014ea:	bf00      	nop
 80014ec:	371c      	adds	r7, #28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	615a      	str	r2, [r3, #20]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800151c:	b480      	push	{r7}
 800151e:	b087      	sub	sp, #28
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	3330      	adds	r3, #48	@ 0x30
 800152c:	461a      	mov	r2, r3
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	f003 030c 	and.w	r3, r3, #12
 8001538:	4413      	add	r3, r2
 800153a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	f003 031f 	and.w	r3, r3, #31
 8001546:	211f      	movs	r1, #31
 8001548:	fa01 f303 	lsl.w	r3, r1, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	401a      	ands	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	0e9b      	lsrs	r3, r3, #26
 8001554:	f003 011f 	and.w	r1, r3, #31
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	f003 031f 	and.w	r3, r3, #31
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	431a      	orrs	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001568:	bf00      	nop
 800156a:	371c      	adds	r7, #28
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001574:	b480      	push	{r7}
 8001576:	b087      	sub	sp, #28
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3314      	adds	r3, #20
 8001584:	461a      	mov	r2, r3
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	0e5b      	lsrs	r3, r3, #25
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	4413      	add	r3, r2
 8001592:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	0d1b      	lsrs	r3, r3, #20
 800159c:	f003 031f 	and.w	r3, r3, #31
 80015a0:	2107      	movs	r1, #7
 80015a2:	fa01 f303 	lsl.w	r3, r1, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	401a      	ands	r2, r3
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	0d1b      	lsrs	r3, r3, #20
 80015ae:	f003 031f 	and.w	r3, r3, #31
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	fa01 f303 	lsl.w	r3, r1, r3
 80015b8:	431a      	orrs	r2, r3
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015be:	bf00      	nop
 80015c0:	371c      	adds	r7, #28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015e4:	43db      	mvns	r3, r3
 80015e6:	401a      	ands	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f003 0318 	and.w	r3, r3, #24
 80015ee:	4908      	ldr	r1, [pc, #32]	@ (8001610 <LL_ADC_SetChannelSingleDiff+0x44>)
 80015f0:	40d9      	lsrs	r1, r3
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	400b      	ands	r3, r1
 80015f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015fa:	431a      	orrs	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	0007ffff 	.word	0x0007ffff

08001614 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001624:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6093      	str	r3, [r2, #8]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001648:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800164c:	d101      	bne.n	8001652 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001670:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001674:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001698:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800169c:	d101      	bne.n	80016a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800169e:	2301      	movs	r3, #1
 80016a0:	e000      	b.n	80016a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d101      	bne.n	80016c8 <LL_ADC_IsEnabled+0x18>
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <LL_ADC_IsEnabled+0x1a>
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d101      	bne.n	80016ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	2b08      	cmp	r3, #8
 800170e:	d101      	bne.n	8001714 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001710:	2301      	movs	r3, #1
 8001712:	e000      	b.n	8001716 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b089      	sub	sp, #36	@ 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800172c:	2300      	movs	r3, #0
 800172e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e167      	b.n	8001a0e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001748:	2b00      	cmp	r3, #0
 800174a:	d109      	bne.n	8001760 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff faef 	bl	8000d30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff67 	bl	8001638 <LL_ADC_IsDeepPowerDownEnabled>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d004      	beq.n	800177a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff4d 	bl	8001614 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff82 	bl	8001688 <LL_ADC_IsInternalRegulatorEnabled>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d115      	bne.n	80017b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff ff66 	bl	8001660 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001794:	4ba0      	ldr	r3, [pc, #640]	@ (8001a18 <HAL_ADC_Init+0x2f4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	099b      	lsrs	r3, r3, #6
 800179a:	4aa0      	ldr	r2, [pc, #640]	@ (8001a1c <HAL_ADC_Init+0x2f8>)
 800179c:	fba2 2303 	umull	r2, r3, r2, r3
 80017a0:	099b      	lsrs	r3, r3, #6
 80017a2:	3301      	adds	r3, #1
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017a8:	e002      	b.n	80017b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f9      	bne.n	80017aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ff64 	bl	8001688 <LL_ADC_IsInternalRegulatorEnabled>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10d      	bne.n	80017e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ca:	f043 0210 	orr.w	r2, r3, #16
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017d6:	f043 0201 	orr.w	r2, r3, #1
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff ff75 	bl	80016d6 <LL_ADC_REG_IsConversionOngoing>
 80017ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f2:	f003 0310 	and.w	r3, r3, #16
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f040 8100 	bne.w	80019fc <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f040 80fc 	bne.w	80019fc <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001808:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800180c:	f043 0202 	orr.w	r2, r3, #2
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff49 	bl	80016b0 <LL_ADC_IsEnabled>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d111      	bne.n	8001848 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001824:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001828:	f7ff ff42 	bl	80016b0 <LL_ADC_IsEnabled>
 800182c:	4604      	mov	r4, r0
 800182e:	487c      	ldr	r0, [pc, #496]	@ (8001a20 <HAL_ADC_Init+0x2fc>)
 8001830:	f7ff ff3e 	bl	80016b0 <LL_ADC_IsEnabled>
 8001834:	4603      	mov	r3, r0
 8001836:	4323      	orrs	r3, r4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d105      	bne.n	8001848 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	4619      	mov	r1, r3
 8001842:	4878      	ldr	r0, [pc, #480]	@ (8001a24 <HAL_ADC_Init+0x300>)
 8001844:	f7ff fd98 	bl	8001378 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	7f5b      	ldrb	r3, [r3, #29]
 800184c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001852:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001858:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800185e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001866:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001872:	2b01      	cmp	r3, #1
 8001874:	d106      	bne.n	8001884 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800187a:	3b01      	subs	r3, #1
 800187c:	045b      	lsls	r3, r3, #17
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001888:	2b00      	cmp	r3, #0
 800188a:	d009      	beq.n	80018a0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001890:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001898:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	4b60      	ldr	r3, [pc, #384]	@ (8001a28 <HAL_ADC_Init+0x304>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6812      	ldr	r2, [r2, #0]
 80018ae:	69b9      	ldr	r1, [r7, #24]
 80018b0:	430b      	orrs	r3, r1
 80018b2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff ff14 	bl	80016fc <LL_ADC_INJ_IsConversionOngoing>
 80018d4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d16d      	bne.n	80019b8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d16a      	bne.n	80019b8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018e6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80018ee:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80018fe:	f023 0302 	bic.w	r3, r3, #2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	69b9      	ldr	r1, [r7, #24]
 8001908:	430b      	orrs	r3, r1
 800190a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d017      	beq.n	8001944 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	691a      	ldr	r2, [r3, #16]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001922:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800192c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001930:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6911      	ldr	r1, [r2, #16]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	430b      	orrs	r3, r1
 800193e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001942:	e013      	b.n	800196c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	691a      	ldr	r2, [r3, #16]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001952:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001964:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001968:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001972:	2b01      	cmp	r3, #1
 8001974:	d118      	bne.n	80019a8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001980:	f023 0304 	bic.w	r3, r3, #4
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800198c:	4311      	orrs	r1, r2
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001992:	4311      	orrs	r1, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001998:	430a      	orrs	r2, r1
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f042 0201 	orr.w	r2, r2, #1
 80019a4:	611a      	str	r2, [r3, #16]
 80019a6:	e007      	b.n	80019b8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	691a      	ldr	r2, [r3, #16]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 0201 	bic.w	r2, r2, #1
 80019b6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d10c      	bne.n	80019da <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	f023 010f 	bic.w	r1, r3, #15
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	1e5a      	subs	r2, r3, #1
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80019d8:	e007      	b.n	80019ea <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 020f 	bic.w	r2, r2, #15
 80019e8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ee:	f023 0303 	bic.w	r3, r3, #3
 80019f2:	f043 0201 	orr.w	r2, r3, #1
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80019fa:	e007      	b.n	8001a0c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a00:	f043 0210 	orr.w	r2, r3, #16
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3724      	adds	r7, #36	@ 0x24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd90      	pop	{r4, r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	053e2d63 	.word	0x053e2d63
 8001a20:	50000100 	.word	0x50000100
 8001a24:	50000300 	.word	0x50000300
 8001a28:	fff04007 	.word	0xfff04007

08001a2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b0b6      	sub	sp, #216	@ 0xd8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x22>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e3c8      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x7b4>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fe3b 	bl	80016d6 <LL_ADC_REG_IsConversionOngoing>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f040 83ad 	bne.w	80021c2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	6859      	ldr	r1, [r3, #4]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	f7ff fd51 	bl	800151c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fe29 	bl	80016d6 <LL_ADC_REG_IsConversionOngoing>
 8001a84:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fe35 	bl	80016fc <LL_ADC_INJ_IsConversionOngoing>
 8001a92:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f040 81d9 	bne.w	8001e52 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001aa0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f040 81d4 	bne.w	8001e52 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001ab2:	d10f      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2200      	movs	r2, #0
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f7ff fd58 	bl	8001574 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fd12 	bl	80014f6 <LL_ADC_SetSamplingTimeCommonConfig>
 8001ad2:	e00e      	b.n	8001af2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	6819      	ldr	r1, [r3, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	f7ff fd47 	bl	8001574 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2100      	movs	r1, #0
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fd02 	bl	80014f6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	695a      	ldr	r2, [r3, #20]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	08db      	lsrs	r3, r3, #3
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d022      	beq.n	8001b5a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6818      	ldr	r0, [r3, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	6919      	ldr	r1, [r3, #16]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001b24:	f7ff fc5c 	bl	80013e0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6818      	ldr	r0, [r3, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	6919      	ldr	r1, [r3, #16]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	461a      	mov	r2, r3
 8001b36:	f7ff fca8 	bl	800148a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d102      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x124>
 8001b4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b4e:	e000      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x126>
 8001b50:	2300      	movs	r3, #0
 8001b52:	461a      	mov	r2, r3
 8001b54:	f7ff fcb4 	bl	80014c0 <LL_ADC_SetOffsetSaturation>
 8001b58:	e17b      	b.n	8001e52 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fc61 	bl	8001428 <LL_ADC_GetOffsetChannel>
 8001b66:	4603      	mov	r3, r0
 8001b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10a      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x15a>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fc56 	bl	8001428 <LL_ADC_GetOffsetChannel>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	0e9b      	lsrs	r3, r3, #26
 8001b80:	f003 021f 	and.w	r2, r3, #31
 8001b84:	e01e      	b.n	8001bc4 <HAL_ADC_ConfigChannel+0x198>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fc4b 	bl	8001428 <LL_ADC_GetOffsetChannel>
 8001b92:	4603      	mov	r3, r0
 8001b94:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001b9c:	fa93 f3a3 	rbit	r3, r3
 8001ba0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ba4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ba8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001bac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001bb4:	2320      	movs	r3, #32
 8001bb6:	e004      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001bb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001bbc:	fab3 f383 	clz	r3, r3
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d105      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x1b0>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	0e9b      	lsrs	r3, r3, #26
 8001bd6:	f003 031f 	and.w	r3, r3, #31
 8001bda:	e018      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x1e2>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001be8:	fa93 f3a3 	rbit	r3, r3
 8001bec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001bf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001bf4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001bf8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001c00:	2320      	movs	r3, #32
 8001c02:	e004      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001c04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c08:	fab3 f383 	clz	r3, r3
 8001c0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d106      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2200      	movs	r2, #0
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fc1a 	bl	8001454 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2101      	movs	r1, #1
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fbfe 	bl	8001428 <LL_ADC_GetOffsetChannel>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10a      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x220>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff fbf3 	bl	8001428 <LL_ADC_GetOffsetChannel>
 8001c42:	4603      	mov	r3, r0
 8001c44:	0e9b      	lsrs	r3, r3, #26
 8001c46:	f003 021f 	and.w	r2, r3, #31
 8001c4a:	e01e      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x25e>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2101      	movs	r1, #1
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fbe8 	bl	8001428 <LL_ADC_GetOffsetChannel>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001c62:	fa93 f3a3 	rbit	r3, r3
 8001c66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001c6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001c72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001c7a:	2320      	movs	r3, #32
 8001c7c:	e004      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001c7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c82:	fab3 f383 	clz	r3, r3
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d105      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x276>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	0e9b      	lsrs	r3, r3, #26
 8001c9c:	f003 031f 	and.w	r3, r3, #31
 8001ca0:	e018      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x2a8>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001caa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001cae:	fa93 f3a3 	rbit	r3, r3
 8001cb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001cb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001cba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001cbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001cc6:	2320      	movs	r3, #32
 8001cc8:	e004      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001cca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001cce:	fab3 f383 	clz	r3, r3
 8001cd2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d106      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2101      	movs	r1, #1
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff fbb7 	bl	8001454 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2102      	movs	r1, #2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fb9b 	bl	8001428 <LL_ADC_GetOffsetChannel>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10a      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x2e6>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2102      	movs	r1, #2
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fb90 	bl	8001428 <LL_ADC_GetOffsetChannel>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	0e9b      	lsrs	r3, r3, #26
 8001d0c:	f003 021f 	and.w	r2, r3, #31
 8001d10:	e01e      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x324>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2102      	movs	r1, #2
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fb85 	bl	8001428 <LL_ADC_GetOffsetChannel>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d28:	fa93 f3a3 	rbit	r3, r3
 8001d2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001d30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001d38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001d40:	2320      	movs	r3, #32
 8001d42:	e004      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001d44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d48:	fab3 f383 	clz	r3, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d105      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x33c>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	0e9b      	lsrs	r3, r3, #26
 8001d62:	f003 031f 	and.w	r3, r3, #31
 8001d66:	e016      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x36a>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d74:	fa93 f3a3 	rbit	r3, r3
 8001d78:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001d7a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001d80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001d88:	2320      	movs	r3, #32
 8001d8a:	e004      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001d8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d90:	fab3 f383 	clz	r3, r3
 8001d94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d106      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2102      	movs	r1, #2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fb56 	bl	8001454 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2103      	movs	r1, #3
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fb3a 	bl	8001428 <LL_ADC_GetOffsetChannel>
 8001db4:	4603      	mov	r3, r0
 8001db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10a      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x3a8>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2103      	movs	r1, #3
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fb2f 	bl	8001428 <LL_ADC_GetOffsetChannel>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	0e9b      	lsrs	r3, r3, #26
 8001dce:	f003 021f 	and.w	r2, r3, #31
 8001dd2:	e017      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x3d8>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2103      	movs	r1, #3
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fb24 	bl	8001428 <LL_ADC_GetOffsetChannel>
 8001de0:	4603      	mov	r3, r0
 8001de2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001de6:	fa93 f3a3 	rbit	r3, r3
 8001dea:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001dec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001dee:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001df0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001df6:	2320      	movs	r3, #32
 8001df8:	e003      	b.n	8001e02 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001dfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001dfc:	fab3 f383 	clz	r3, r3
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d105      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x3f0>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	0e9b      	lsrs	r3, r3, #26
 8001e16:	f003 031f 	and.w	r3, r3, #31
 8001e1a:	e011      	b.n	8001e40 <HAL_ADC_ConfigChannel+0x414>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e24:	fa93 f3a3 	rbit	r3, r3
 8001e28:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001e2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001e2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001e34:	2320      	movs	r3, #32
 8001e36:	e003      	b.n	8001e40 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001e38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e3a:	fab3 f383 	clz	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d106      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2103      	movs	r1, #3
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fb01 	bl	8001454 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fc2a 	bl	80016b0 <LL_ADC_IsEnabled>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f040 8140 	bne.w	80020e4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6818      	ldr	r0, [r3, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	6819      	ldr	r1, [r3, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	461a      	mov	r2, r3
 8001e72:	f7ff fbab 	bl	80015cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	4a8f      	ldr	r2, [pc, #572]	@ (80020b8 <HAL_ADC_ConfigChannel+0x68c>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	f040 8131 	bne.w	80020e4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10b      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x47e>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	0e9b      	lsrs	r3, r3, #26
 8001e98:	3301      	adds	r3, #1
 8001e9a:	f003 031f 	and.w	r3, r3, #31
 8001e9e:	2b09      	cmp	r3, #9
 8001ea0:	bf94      	ite	ls
 8001ea2:	2301      	movls	r3, #1
 8001ea4:	2300      	movhi	r3, #0
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	e019      	b.n	8001ede <HAL_ADC_ConfigChannel+0x4b2>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001eb2:	fa93 f3a3 	rbit	r3, r3
 8001eb6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001eb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001eba:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001ebc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001ec2:	2320      	movs	r3, #32
 8001ec4:	e003      	b.n	8001ece <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001ec6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ec8:	fab3 f383 	clz	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	3301      	adds	r3, #1
 8001ed0:	f003 031f 	and.w	r3, r3, #31
 8001ed4:	2b09      	cmp	r3, #9
 8001ed6:	bf94      	ite	ls
 8001ed8:	2301      	movls	r3, #1
 8001eda:	2300      	movhi	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d079      	beq.n	8001fd6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d107      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x4d2>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	0e9b      	lsrs	r3, r3, #26
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	069b      	lsls	r3, r3, #26
 8001ef8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001efc:	e015      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x4fe>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001f0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f0e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001f10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001f16:	2320      	movs	r3, #32
 8001f18:	e003      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f1c:	fab3 f383 	clz	r3, r3
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	3301      	adds	r3, #1
 8001f24:	069b      	lsls	r3, r3, #26
 8001f26:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d109      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x51e>
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	0e9b      	lsrs	r3, r3, #26
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	f003 031f 	and.w	r3, r3, #31
 8001f42:	2101      	movs	r1, #1
 8001f44:	fa01 f303 	lsl.w	r3, r1, r3
 8001f48:	e017      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x54e>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f52:	fa93 f3a3 	rbit	r3, r3
 8001f56:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001f58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001f5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001f62:	2320      	movs	r3, #32
 8001f64:	e003      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001f66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f68:	fab3 f383 	clz	r3, r3
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	3301      	adds	r3, #1
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	2101      	movs	r1, #1
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	ea42 0103 	orr.w	r1, r2, r3
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10a      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x574>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	0e9b      	lsrs	r3, r3, #26
 8001f90:	3301      	adds	r3, #1
 8001f92:	f003 021f 	and.w	r2, r3, #31
 8001f96:	4613      	mov	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	051b      	lsls	r3, r3, #20
 8001f9e:	e018      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x5a6>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fa8:	fa93 f3a3 	rbit	r3, r3
 8001fac:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001fb8:	2320      	movs	r3, #32
 8001fba:	e003      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fbe:	fab3 f383 	clz	r3, r3
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	f003 021f 	and.w	r2, r3, #31
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fd2:	430b      	orrs	r3, r1
 8001fd4:	e081      	b.n	80020da <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d107      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x5c6>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	0e9b      	lsrs	r3, r3, #26
 8001fe8:	3301      	adds	r3, #1
 8001fea:	069b      	lsls	r3, r3, #26
 8001fec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ff0:	e015      	b.n	800201e <HAL_ADC_ConfigChannel+0x5f2>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002002:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800200a:	2320      	movs	r3, #32
 800200c:	e003      	b.n	8002016 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800200e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002010:	fab3 f383 	clz	r3, r3
 8002014:	b2db      	uxtb	r3, r3
 8002016:	3301      	adds	r3, #1
 8002018:	069b      	lsls	r3, r3, #26
 800201a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002026:	2b00      	cmp	r3, #0
 8002028:	d109      	bne.n	800203e <HAL_ADC_ConfigChannel+0x612>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	0e9b      	lsrs	r3, r3, #26
 8002030:	3301      	adds	r3, #1
 8002032:	f003 031f 	and.w	r3, r3, #31
 8002036:	2101      	movs	r1, #1
 8002038:	fa01 f303 	lsl.w	r3, r1, r3
 800203c:	e017      	b.n	800206e <HAL_ADC_ConfigChannel+0x642>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	61fb      	str	r3, [r7, #28]
  return result;
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002056:	2320      	movs	r3, #32
 8002058:	e003      	b.n	8002062 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800205a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205c:	fab3 f383 	clz	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	3301      	adds	r3, #1
 8002064:	f003 031f 	and.w	r3, r3, #31
 8002068:	2101      	movs	r1, #1
 800206a:	fa01 f303 	lsl.w	r3, r1, r3
 800206e:	ea42 0103 	orr.w	r1, r2, r3
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10d      	bne.n	800209a <HAL_ADC_ConfigChannel+0x66e>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	0e9b      	lsrs	r3, r3, #26
 8002084:	3301      	adds	r3, #1
 8002086:	f003 021f 	and.w	r2, r3, #31
 800208a:	4613      	mov	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4413      	add	r3, r2
 8002090:	3b1e      	subs	r3, #30
 8002092:	051b      	lsls	r3, r3, #20
 8002094:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002098:	e01e      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x6ac>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	fa93 f3a3 	rbit	r3, r3
 80020a6:	613b      	str	r3, [r7, #16]
  return result;
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d104      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80020b2:	2320      	movs	r3, #32
 80020b4:	e006      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x698>
 80020b6:	bf00      	nop
 80020b8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	fab3 f383 	clz	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	3301      	adds	r3, #1
 80020c6:	f003 021f 	and.w	r2, r3, #31
 80020ca:	4613      	mov	r3, r2
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4413      	add	r3, r2
 80020d0:	3b1e      	subs	r3, #30
 80020d2:	051b      	lsls	r3, r3, #20
 80020d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020d8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020de:	4619      	mov	r1, r3
 80020e0:	f7ff fa48 	bl	8001574 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4b3f      	ldr	r3, [pc, #252]	@ (80021e8 <HAL_ADC_ConfigChannel+0x7bc>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d071      	beq.n	80021d4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020f0:	483e      	ldr	r0, [pc, #248]	@ (80021ec <HAL_ADC_ConfigChannel+0x7c0>)
 80020f2:	f7ff f967 	bl	80013c4 <LL_ADC_GetCommonPathInternalCh>
 80020f6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a3c      	ldr	r2, [pc, #240]	@ (80021f0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d004      	beq.n	800210e <HAL_ADC_ConfigChannel+0x6e2>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a3a      	ldr	r2, [pc, #232]	@ (80021f4 <HAL_ADC_ConfigChannel+0x7c8>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d127      	bne.n	800215e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800210e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002112:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d121      	bne.n	800215e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002122:	d157      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002124:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002128:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800212c:	4619      	mov	r1, r3
 800212e:	482f      	ldr	r0, [pc, #188]	@ (80021ec <HAL_ADC_ConfigChannel+0x7c0>)
 8002130:	f7ff f935 	bl	800139e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002134:	4b30      	ldr	r3, [pc, #192]	@ (80021f8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	099b      	lsrs	r3, r3, #6
 800213a:	4a30      	ldr	r2, [pc, #192]	@ (80021fc <HAL_ADC_ConfigChannel+0x7d0>)
 800213c:	fba2 2303 	umull	r2, r3, r2, r3
 8002140:	099b      	lsrs	r3, r3, #6
 8002142:	1c5a      	adds	r2, r3, #1
 8002144:	4613      	mov	r3, r2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800214e:	e002      	b.n	8002156 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	3b01      	subs	r3, #1
 8002154:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1f9      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800215c:	e03a      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a27      	ldr	r2, [pc, #156]	@ (8002200 <HAL_ADC_ConfigChannel+0x7d4>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d113      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002168:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800216c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10d      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a22      	ldr	r2, [pc, #136]	@ (8002204 <HAL_ADC_ConfigChannel+0x7d8>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d02a      	beq.n	80021d4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800217e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002182:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002186:	4619      	mov	r1, r3
 8002188:	4818      	ldr	r0, [pc, #96]	@ (80021ec <HAL_ADC_ConfigChannel+0x7c0>)
 800218a:	f7ff f908 	bl	800139e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800218e:	e021      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a1c      	ldr	r2, [pc, #112]	@ (8002208 <HAL_ADC_ConfigChannel+0x7dc>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d11c      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800219a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800219e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d116      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a16      	ldr	r2, [pc, #88]	@ (8002204 <HAL_ADC_ConfigChannel+0x7d8>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d011      	beq.n	80021d4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021b8:	4619      	mov	r1, r3
 80021ba:	480c      	ldr	r0, [pc, #48]	@ (80021ec <HAL_ADC_ConfigChannel+0x7c0>)
 80021bc:	f7ff f8ef 	bl	800139e <LL_ADC_SetCommonPathInternalCh>
 80021c0:	e008      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c6:	f043 0220 	orr.w	r2, r3, #32
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80021dc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	37d8      	adds	r7, #216	@ 0xd8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	80080000 	.word	0x80080000
 80021ec:	50000300 	.word	0x50000300
 80021f0:	c3210000 	.word	0xc3210000
 80021f4:	90c00010 	.word	0x90c00010
 80021f8:	20000000 	.word	0x20000000
 80021fc:	053e2d63 	.word	0x053e2d63
 8002200:	c7520000 	.word	0xc7520000
 8002204:	50000100 	.word	0x50000100
 8002208:	cb840000 	.word	0xcb840000

0800220c <LL_ADC_IsEnabled>:
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <LL_ADC_IsEnabled+0x18>
 8002220:	2301      	movs	r3, #1
 8002222:	e000      	b.n	8002226 <LL_ADC_IsEnabled+0x1a>
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <LL_ADC_REG_IsConversionOngoing>:
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	2b04      	cmp	r3, #4
 8002244:	d101      	bne.n	800224a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b0a1      	sub	sp, #132	@ 0x84
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800226e:	2b01      	cmp	r3, #1
 8002270:	d101      	bne.n	8002276 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002272:	2302      	movs	r3, #2
 8002274:	e08b      	b.n	800238e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800227e:	2300      	movs	r3, #0
 8002280:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002282:	2300      	movs	r3, #0
 8002284:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800228e:	d102      	bne.n	8002296 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002290:	4b41      	ldr	r3, [pc, #260]	@ (8002398 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	e001      	b.n	800229a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10b      	bne.n	80022b8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a4:	f043 0220 	orr.w	r2, r3, #32
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e06a      	b.n	800238e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff ffb9 	bl	8002232 <LL_ADC_REG_IsConversionOngoing>
 80022c0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff ffb3 	bl	8002232 <LL_ADC_REG_IsConversionOngoing>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d14c      	bne.n	800236c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80022d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d149      	bne.n	800236c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80022d8:	4b30      	ldr	r3, [pc, #192]	@ (800239c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80022da:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d028      	beq.n	8002336 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80022e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022f6:	035b      	lsls	r3, r3, #13
 80022f8:	430b      	orrs	r3, r1
 80022fa:	431a      	orrs	r2, r3
 80022fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002300:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002304:	f7ff ff82 	bl	800220c <LL_ADC_IsEnabled>
 8002308:	4604      	mov	r4, r0
 800230a:	4823      	ldr	r0, [pc, #140]	@ (8002398 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800230c:	f7ff ff7e 	bl	800220c <LL_ADC_IsEnabled>
 8002310:	4603      	mov	r3, r0
 8002312:	4323      	orrs	r3, r4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d133      	bne.n	8002380 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002318:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002320:	f023 030f 	bic.w	r3, r3, #15
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	6811      	ldr	r1, [r2, #0]
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	6892      	ldr	r2, [r2, #8]
 800232c:	430a      	orrs	r2, r1
 800232e:	431a      	orrs	r2, r3
 8002330:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002332:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002334:	e024      	b.n	8002380 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002336:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800233e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002340:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002342:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002346:	f7ff ff61 	bl	800220c <LL_ADC_IsEnabled>
 800234a:	4604      	mov	r4, r0
 800234c:	4812      	ldr	r0, [pc, #72]	@ (8002398 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800234e:	f7ff ff5d 	bl	800220c <LL_ADC_IsEnabled>
 8002352:	4603      	mov	r3, r0
 8002354:	4323      	orrs	r3, r4
 8002356:	2b00      	cmp	r3, #0
 8002358:	d112      	bne.n	8002380 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800235a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002362:	f023 030f 	bic.w	r3, r3, #15
 8002366:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002368:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800236a:	e009      	b.n	8002380 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002370:	f043 0220 	orr.w	r2, r3, #32
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800237e:	e000      	b.n	8002382 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002380:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800238a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800238e:	4618      	mov	r0, r3
 8002390:	3784      	adds	r7, #132	@ 0x84
 8002392:	46bd      	mov	sp, r7
 8002394:	bd90      	pop	{r4, r7, pc}
 8002396:	bf00      	nop
 8002398:	50000100 	.word	0x50000100
 800239c:	50000300 	.word	0x50000300

080023a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b0:	4b0c      	ldr	r3, [pc, #48]	@ (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023bc:	4013      	ands	r3, r2
 80023be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023d2:	4a04      	ldr	r2, [pc, #16]	@ (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	60d3      	str	r3, [r2, #12]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ec:	4b04      	ldr	r3, [pc, #16]	@ (8002400 <__NVIC_GetPriorityGrouping+0x18>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	0a1b      	lsrs	r3, r3, #8
 80023f2:	f003 0307 	and.w	r3, r3, #7
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	6039      	str	r1, [r7, #0]
 800240e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002414:	2b00      	cmp	r3, #0
 8002416:	db0a      	blt.n	800242e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	490c      	ldr	r1, [pc, #48]	@ (8002450 <__NVIC_SetPriority+0x4c>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	0112      	lsls	r2, r2, #4
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	440b      	add	r3, r1
 8002428:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800242c:	e00a      	b.n	8002444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4908      	ldr	r1, [pc, #32]	@ (8002454 <__NVIC_SetPriority+0x50>)
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	3b04      	subs	r3, #4
 800243c:	0112      	lsls	r2, r2, #4
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	440b      	add	r3, r1
 8002442:	761a      	strb	r2, [r3, #24]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000e100 	.word	0xe000e100
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002458:	b480      	push	{r7}
 800245a:	b089      	sub	sp, #36	@ 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f1c3 0307 	rsb	r3, r3, #7
 8002472:	2b04      	cmp	r3, #4
 8002474:	bf28      	it	cs
 8002476:	2304      	movcs	r3, #4
 8002478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3304      	adds	r3, #4
 800247e:	2b06      	cmp	r3, #6
 8002480:	d902      	bls.n	8002488 <NVIC_EncodePriority+0x30>
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3b03      	subs	r3, #3
 8002486:	e000      	b.n	800248a <NVIC_EncodePriority+0x32>
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800248c:	f04f 32ff 	mov.w	r2, #4294967295
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43da      	mvns	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	401a      	ands	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a0:	f04f 31ff 	mov.w	r1, #4294967295
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	43d9      	mvns	r1, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	4313      	orrs	r3, r2
         );
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3724      	adds	r7, #36	@ 0x24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024d0:	d301      	bcc.n	80024d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024d2:	2301      	movs	r3, #1
 80024d4:	e00f      	b.n	80024f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002500 <SysTick_Config+0x40>)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024de:	210f      	movs	r1, #15
 80024e0:	f04f 30ff 	mov.w	r0, #4294967295
 80024e4:	f7ff ff8e 	bl	8002404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e8:	4b05      	ldr	r3, [pc, #20]	@ (8002500 <SysTick_Config+0x40>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ee:	4b04      	ldr	r3, [pc, #16]	@ (8002500 <SysTick_Config+0x40>)
 80024f0:	2207      	movs	r2, #7
 80024f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	e000e010 	.word	0xe000e010

08002504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ff47 	bl	80023a0 <__NVIC_SetPriorityGrouping>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b086      	sub	sp, #24
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
 8002526:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002528:	f7ff ff5e 	bl	80023e8 <__NVIC_GetPriorityGrouping>
 800252c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	6978      	ldr	r0, [r7, #20]
 8002534:	f7ff ff90 	bl	8002458 <NVIC_EncodePriority>
 8002538:	4602      	mov	r2, r0
 800253a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff5f 	bl	8002404 <__NVIC_SetPriority>
}
 8002546:	bf00      	nop
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff ffb2 	bl	80024c0 <SysTick_Config>
 800255c:	4603      	mov	r3, r0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002576:	e15a      	b.n	800282e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	2101      	movs	r1, #1
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	fa01 f303 	lsl.w	r3, r1, r3
 8002584:	4013      	ands	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 814c 	beq.w	8002828 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b01      	cmp	r3, #1
 800259a:	d005      	beq.n	80025a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d130      	bne.n	800260a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025de:	2201      	movs	r2, #1
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4013      	ands	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	091b      	lsrs	r3, r3, #4
 80025f4:	f003 0201 	and.w	r2, r3, #1
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	2b03      	cmp	r3, #3
 8002614:	d017      	beq.n	8002646 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	2203      	movs	r2, #3
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4013      	ands	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d123      	bne.n	800269a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	08da      	lsrs	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3208      	adds	r2, #8
 800265a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800265e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	220f      	movs	r2, #15
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4013      	ands	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	08da      	lsrs	r2, r3, #3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3208      	adds	r2, #8
 8002694:	6939      	ldr	r1, [r7, #16]
 8002696:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	2203      	movs	r2, #3
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4013      	ands	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 0203 	and.w	r2, r3, #3
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 80a6 	beq.w	8002828 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026dc:	4b5b      	ldr	r3, [pc, #364]	@ (800284c <HAL_GPIO_Init+0x2e4>)
 80026de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026e0:	4a5a      	ldr	r2, [pc, #360]	@ (800284c <HAL_GPIO_Init+0x2e4>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80026e8:	4b58      	ldr	r3, [pc, #352]	@ (800284c <HAL_GPIO_Init+0x2e4>)
 80026ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026f4:	4a56      	ldr	r2, [pc, #344]	@ (8002850 <HAL_GPIO_Init+0x2e8>)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	089b      	lsrs	r3, r3, #2
 80026fa:	3302      	adds	r3, #2
 80026fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002700:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	220f      	movs	r2, #15
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4013      	ands	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800271e:	d01f      	beq.n	8002760 <HAL_GPIO_Init+0x1f8>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a4c      	ldr	r2, [pc, #304]	@ (8002854 <HAL_GPIO_Init+0x2ec>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d019      	beq.n	800275c <HAL_GPIO_Init+0x1f4>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a4b      	ldr	r2, [pc, #300]	@ (8002858 <HAL_GPIO_Init+0x2f0>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d013      	beq.n	8002758 <HAL_GPIO_Init+0x1f0>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a4a      	ldr	r2, [pc, #296]	@ (800285c <HAL_GPIO_Init+0x2f4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d00d      	beq.n	8002754 <HAL_GPIO_Init+0x1ec>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a49      	ldr	r2, [pc, #292]	@ (8002860 <HAL_GPIO_Init+0x2f8>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d007      	beq.n	8002750 <HAL_GPIO_Init+0x1e8>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a48      	ldr	r2, [pc, #288]	@ (8002864 <HAL_GPIO_Init+0x2fc>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d101      	bne.n	800274c <HAL_GPIO_Init+0x1e4>
 8002748:	2305      	movs	r3, #5
 800274a:	e00a      	b.n	8002762 <HAL_GPIO_Init+0x1fa>
 800274c:	2306      	movs	r3, #6
 800274e:	e008      	b.n	8002762 <HAL_GPIO_Init+0x1fa>
 8002750:	2304      	movs	r3, #4
 8002752:	e006      	b.n	8002762 <HAL_GPIO_Init+0x1fa>
 8002754:	2303      	movs	r3, #3
 8002756:	e004      	b.n	8002762 <HAL_GPIO_Init+0x1fa>
 8002758:	2302      	movs	r3, #2
 800275a:	e002      	b.n	8002762 <HAL_GPIO_Init+0x1fa>
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <HAL_GPIO_Init+0x1fa>
 8002760:	2300      	movs	r3, #0
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	f002 0203 	and.w	r2, r2, #3
 8002768:	0092      	lsls	r2, r2, #2
 800276a:	4093      	lsls	r3, r2
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002772:	4937      	ldr	r1, [pc, #220]	@ (8002850 <HAL_GPIO_Init+0x2e8>)
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	089b      	lsrs	r3, r3, #2
 8002778:	3302      	adds	r3, #2
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002780:	4b39      	ldr	r3, [pc, #228]	@ (8002868 <HAL_GPIO_Init+0x300>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	43db      	mvns	r3, r3
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4013      	ands	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027a4:	4a30      	ldr	r2, [pc, #192]	@ (8002868 <HAL_GPIO_Init+0x300>)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002868 <HAL_GPIO_Init+0x300>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4013      	ands	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027ce:	4a26      	ldr	r2, [pc, #152]	@ (8002868 <HAL_GPIO_Init+0x300>)
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80027d4:	4b24      	ldr	r3, [pc, #144]	@ (8002868 <HAL_GPIO_Init+0x300>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	43db      	mvns	r3, r3
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4013      	ands	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002868 <HAL_GPIO_Init+0x300>)
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80027fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002868 <HAL_GPIO_Init+0x300>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	43db      	mvns	r3, r3
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4013      	ands	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4313      	orrs	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002822:	4a11      	ldr	r2, [pc, #68]	@ (8002868 <HAL_GPIO_Init+0x300>)
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	3301      	adds	r3, #1
 800282c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	f47f ae9d 	bne.w	8002578 <HAL_GPIO_Init+0x10>
  }
}
 800283e:	bf00      	nop
 8002840:	bf00      	nop
 8002842:	371c      	adds	r7, #28
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	40021000 	.word	0x40021000
 8002850:	40010000 	.word	0x40010000
 8002854:	48000400 	.word	0x48000400
 8002858:	48000800 	.word	0x48000800
 800285c:	48000c00 	.word	0x48000c00
 8002860:	48001000 	.word	0x48001000
 8002864:	48001400 	.word	0x48001400
 8002868:	40010400 	.word	0x40010400

0800286c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e08d      	b.n	800299a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d106      	bne.n	8002898 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7fe faa2 	bl	8000ddc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2224      	movs	r2, #36	@ 0x24
 800289c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0201 	bic.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80028bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d107      	bne.n	80028e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	e006      	b.n	80028f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80028f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d108      	bne.n	800290e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800290a:	605a      	str	r2, [r3, #4]
 800290c:	e007      	b.n	800291e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800291c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6812      	ldr	r2, [r2, #0]
 8002928:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800292c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002930:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002940:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69d9      	ldr	r1, [r3, #28]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1a      	ldr	r2, [r3, #32]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0201 	orr.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2220      	movs	r2, #32
 8002986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b20      	cmp	r3, #32
 80029b6:	d138      	bne.n	8002a2a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e032      	b.n	8002a2c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2224      	movs	r2, #36	@ 0x24
 80029d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0201 	bic.w	r2, r2, #1
 80029e4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80029f4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6819      	ldr	r1, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 0201 	orr.w	r2, r2, #1
 8002a14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	e000      	b.n	8002a2c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a2a:	2302      	movs	r3, #2
  }
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b20      	cmp	r3, #32
 8002a4c:	d139      	bne.n	8002ac2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e033      	b.n	8002ac4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2224      	movs	r2, #36	@ 0x24
 8002a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0201 	bic.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a8a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	021b      	lsls	r3, r3, #8
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f042 0201 	orr.w	r2, r2, #1
 8002aac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	e000      	b.n	8002ac4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ac2:	2302      	movs	r3, #2
  }
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d141      	bne.n	8002b62 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ade:	4b4b      	ldr	r3, [pc, #300]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ae6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aea:	d131      	bne.n	8002b50 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002aec:	4b47      	ldr	r3, [pc, #284]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002af2:	4a46      	ldr	r2, [pc, #280]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002af8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002afc:	4b43      	ldr	r3, [pc, #268]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b04:	4a41      	ldr	r2, [pc, #260]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b0c:	4b40      	ldr	r3, [pc, #256]	@ (8002c10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2232      	movs	r2, #50	@ 0x32
 8002b12:	fb02 f303 	mul.w	r3, r2, r3
 8002b16:	4a3f      	ldr	r2, [pc, #252]	@ (8002c14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b18:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1c:	0c9b      	lsrs	r3, r3, #18
 8002b1e:	3301      	adds	r3, #1
 8002b20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b22:	e002      	b.n	8002b2a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b2a:	4b38      	ldr	r3, [pc, #224]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b36:	d102      	bne.n	8002b3e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f2      	bne.n	8002b24 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b3e:	4b33      	ldr	r3, [pc, #204]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b4a:	d158      	bne.n	8002bfe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e057      	b.n	8002c00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b50:	4b2e      	ldr	r3, [pc, #184]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b56:	4a2d      	ldr	r2, [pc, #180]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002b60:	e04d      	b.n	8002bfe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b68:	d141      	bne.n	8002bee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b6a:	4b28      	ldr	r3, [pc, #160]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b76:	d131      	bne.n	8002bdc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b78:	4b24      	ldr	r3, [pc, #144]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b7e:	4a23      	ldr	r2, [pc, #140]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b88:	4b20      	ldr	r3, [pc, #128]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b90:	4a1e      	ldr	r2, [pc, #120]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b98:	4b1d      	ldr	r3, [pc, #116]	@ (8002c10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2232      	movs	r2, #50	@ 0x32
 8002b9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8002c14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba8:	0c9b      	lsrs	r3, r3, #18
 8002baa:	3301      	adds	r3, #1
 8002bac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bae:	e002      	b.n	8002bb6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bb6:	4b15      	ldr	r3, [pc, #84]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bc2:	d102      	bne.n	8002bca <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f2      	bne.n	8002bb0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bca:	4b10      	ldr	r3, [pc, #64]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bd6:	d112      	bne.n	8002bfe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e011      	b.n	8002c00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002be2:	4a0a      	ldr	r2, [pc, #40]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002be8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002bec:	e007      	b.n	8002bfe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bee:	4b07      	ldr	r3, [pc, #28]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bf6:	4a05      	ldr	r2, [pc, #20]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bfc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	40007000 	.word	0x40007000
 8002c10:	20000000 	.word	0x20000000
 8002c14:	431bde83 	.word	0x431bde83

08002c18 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002c1c:	4b05      	ldr	r3, [pc, #20]	@ (8002c34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	4a04      	ldr	r2, [pc, #16]	@ (8002c34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c26:	6093      	str	r3, [r2, #8]
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	40007000 	.word	0x40007000

08002c38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e2fe      	b.n	8003248 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d075      	beq.n	8002d42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c56:	4b97      	ldr	r3, [pc, #604]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
 8002c5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c60:	4b94      	ldr	r3, [pc, #592]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	2b0c      	cmp	r3, #12
 8002c6e:	d102      	bne.n	8002c76 <HAL_RCC_OscConfig+0x3e>
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d002      	beq.n	8002c7c <HAL_RCC_OscConfig+0x44>
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d10b      	bne.n	8002c94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7c:	4b8d      	ldr	r3, [pc, #564]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d05b      	beq.n	8002d40 <HAL_RCC_OscConfig+0x108>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d157      	bne.n	8002d40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e2d9      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c9c:	d106      	bne.n	8002cac <HAL_RCC_OscConfig+0x74>
 8002c9e:	4b85      	ldr	r3, [pc, #532]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a84      	ldr	r2, [pc, #528]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002ca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	e01d      	b.n	8002ce8 <HAL_RCC_OscConfig+0xb0>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cb4:	d10c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x98>
 8002cb6:	4b7f      	ldr	r3, [pc, #508]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a7e      	ldr	r2, [pc, #504]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002cbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	4b7c      	ldr	r3, [pc, #496]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a7b      	ldr	r2, [pc, #492]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	e00b      	b.n	8002ce8 <HAL_RCC_OscConfig+0xb0>
 8002cd0:	4b78      	ldr	r3, [pc, #480]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a77      	ldr	r2, [pc, #476]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002cd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	4b75      	ldr	r3, [pc, #468]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a74      	ldr	r2, [pc, #464]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002ce2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d013      	beq.n	8002d18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf0:	f7fe fb36 	bl	8001360 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf8:	f7fe fb32 	bl	8001360 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b64      	cmp	r3, #100	@ 0x64
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e29e      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d0a:	4b6a      	ldr	r3, [pc, #424]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0xc0>
 8002d16:	e014      	b.n	8002d42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d18:	f7fe fb22 	bl	8001360 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d20:	f7fe fb1e 	bl	8001360 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b64      	cmp	r3, #100	@ 0x64
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e28a      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d32:	4b60      	ldr	r3, [pc, #384]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0xe8>
 8002d3e:	e000      	b.n	8002d42 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d075      	beq.n	8002e3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d4e:	4b59      	ldr	r3, [pc, #356]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d58:	4b56      	ldr	r3, [pc, #344]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	2b0c      	cmp	r3, #12
 8002d66:	d102      	bne.n	8002d6e <HAL_RCC_OscConfig+0x136>
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d002      	beq.n	8002d74 <HAL_RCC_OscConfig+0x13c>
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d11f      	bne.n	8002db4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d74:	4b4f      	ldr	r3, [pc, #316]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_OscConfig+0x154>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e25d      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8c:	4b49      	ldr	r3, [pc, #292]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	061b      	lsls	r3, r3, #24
 8002d9a:	4946      	ldr	r1, [pc, #280]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002da0:	4b45      	ldr	r3, [pc, #276]	@ (8002eb8 <HAL_RCC_OscConfig+0x280>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fe fa8f 	bl	80012c8 <HAL_InitTick>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d043      	beq.n	8002e38 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e249      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d023      	beq.n	8002e04 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dbc:	4b3d      	ldr	r3, [pc, #244]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a3c      	ldr	r2, [pc, #240]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7fe faca 	bl	8001360 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd0:	f7fe fac6 	bl	8001360 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e232      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002de2:	4b34      	ldr	r3, [pc, #208]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dee:	4b31      	ldr	r3, [pc, #196]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	061b      	lsls	r3, r3, #24
 8002dfc:	492d      	ldr	r1, [pc, #180]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	604b      	str	r3, [r1, #4]
 8002e02:	e01a      	b.n	8002e3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e04:	4b2b      	ldr	r3, [pc, #172]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a2a      	ldr	r2, [pc, #168]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002e0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e10:	f7fe faa6 	bl	8001360 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e18:	f7fe faa2 	bl	8001360 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e20e      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e2a:	4b22      	ldr	r3, [pc, #136]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x1e0>
 8002e36:	e000      	b.n	8002e3a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d041      	beq.n	8002eca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d01c      	beq.n	8002e88 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e4e:	4b19      	ldr	r3, [pc, #100]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e54:	4a17      	ldr	r2, [pc, #92]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5e:	f7fe fa7f 	bl	8001360 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e66:	f7fe fa7b 	bl	8001360 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e1e7      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e78:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0ef      	beq.n	8002e66 <HAL_RCC_OscConfig+0x22e>
 8002e86:	e020      	b.n	8002eca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e88:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e8e:	4a09      	ldr	r2, [pc, #36]	@ (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002e90:	f023 0301 	bic.w	r3, r3, #1
 8002e94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e98:	f7fe fa62 	bl	8001360 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e9e:	e00d      	b.n	8002ebc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea0:	f7fe fa5e 	bl	8001360 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d906      	bls.n	8002ebc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e1ca      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
 8002eb2:	bf00      	nop
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ebc:	4b8c      	ldr	r3, [pc, #560]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1ea      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 80a6 	beq.w	8003024 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002edc:	4b84      	ldr	r3, [pc, #528]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_RCC_OscConfig+0x2b4>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <HAL_RCC_OscConfig+0x2b6>
 8002eec:	2300      	movs	r3, #0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00d      	beq.n	8002f0e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef2:	4b7f      	ldr	r3, [pc, #508]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef6:	4a7e      	ldr	r2, [pc, #504]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002ef8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002efc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002efe:	4b7c      	ldr	r3, [pc, #496]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f0e:	4b79      	ldr	r3, [pc, #484]	@ (80030f4 <HAL_RCC_OscConfig+0x4bc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d118      	bne.n	8002f4c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f1a:	4b76      	ldr	r3, [pc, #472]	@ (80030f4 <HAL_RCC_OscConfig+0x4bc>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a75      	ldr	r2, [pc, #468]	@ (80030f4 <HAL_RCC_OscConfig+0x4bc>)
 8002f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f26:	f7fe fa1b 	bl	8001360 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2e:	f7fe fa17 	bl	8001360 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e183      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f40:	4b6c      	ldr	r3, [pc, #432]	@ (80030f4 <HAL_RCC_OscConfig+0x4bc>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d108      	bne.n	8002f66 <HAL_RCC_OscConfig+0x32e>
 8002f54:	4b66      	ldr	r3, [pc, #408]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5a:	4a65      	ldr	r2, [pc, #404]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f64:	e024      	b.n	8002fb0 <HAL_RCC_OscConfig+0x378>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2b05      	cmp	r3, #5
 8002f6c:	d110      	bne.n	8002f90 <HAL_RCC_OscConfig+0x358>
 8002f6e:	4b60      	ldr	r3, [pc, #384]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f74:	4a5e      	ldr	r2, [pc, #376]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002f76:	f043 0304 	orr.w	r3, r3, #4
 8002f7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f7e:	4b5c      	ldr	r3, [pc, #368]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f84:	4a5a      	ldr	r2, [pc, #360]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f8e:	e00f      	b.n	8002fb0 <HAL_RCC_OscConfig+0x378>
 8002f90:	4b57      	ldr	r3, [pc, #348]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f96:	4a56      	ldr	r2, [pc, #344]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002f98:	f023 0301 	bic.w	r3, r3, #1
 8002f9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fa0:	4b53      	ldr	r3, [pc, #332]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fa6:	4a52      	ldr	r2, [pc, #328]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002fa8:	f023 0304 	bic.w	r3, r3, #4
 8002fac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d016      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb8:	f7fe f9d2 	bl	8001360 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc0:	f7fe f9ce 	bl	8001360 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e138      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fd6:	4b46      	ldr	r3, [pc, #280]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0ed      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x388>
 8002fe4:	e015      	b.n	8003012 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe6:	f7fe f9bb 	bl	8001360 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fec:	e00a      	b.n	8003004 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fee:	f7fe f9b7 	bl	8001360 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e121      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003004:	4b3a      	ldr	r3, [pc, #232]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8003006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1ed      	bne.n	8002fee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003012:	7ffb      	ldrb	r3, [r7, #31]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d105      	bne.n	8003024 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003018:	4b35      	ldr	r3, [pc, #212]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 800301a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301c:	4a34      	ldr	r2, [pc, #208]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 800301e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003022:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0320 	and.w	r3, r3, #32
 800302c:	2b00      	cmp	r3, #0
 800302e:	d03c      	beq.n	80030aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01c      	beq.n	8003072 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003038:	4b2d      	ldr	r3, [pc, #180]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 800303a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800303e:	4a2c      	ldr	r2, [pc, #176]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003048:	f7fe f98a 	bl	8001360 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003050:	f7fe f986 	bl	8001360 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e0f2      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003062:	4b23      	ldr	r3, [pc, #140]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8003064:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0ef      	beq.n	8003050 <HAL_RCC_OscConfig+0x418>
 8003070:	e01b      	b.n	80030aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003072:	4b1f      	ldr	r3, [pc, #124]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8003074:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003078:	4a1d      	ldr	r2, [pc, #116]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 800307a:	f023 0301 	bic.w	r3, r3, #1
 800307e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003082:	f7fe f96d 	bl	8001360 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800308a:	f7fe f969 	bl	8001360 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e0d5      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800309c:	4b14      	ldr	r3, [pc, #80]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 800309e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1ef      	bne.n	800308a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 80c9 	beq.w	8003246 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030b4:	4b0e      	ldr	r3, [pc, #56]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 030c 	and.w	r3, r3, #12
 80030bc:	2b0c      	cmp	r3, #12
 80030be:	f000 8083 	beq.w	80031c8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d15e      	bne.n	8003188 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ca:	4b09      	ldr	r3, [pc, #36]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a08      	ldr	r2, [pc, #32]	@ (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 80030d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d6:	f7fe f943 	bl	8001360 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030dc:	e00c      	b.n	80030f8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030de:	f7fe f93f 	bl	8001360 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d905      	bls.n	80030f8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e0ab      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
 80030f0:	40021000 	.word	0x40021000
 80030f4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f8:	4b55      	ldr	r3, [pc, #340]	@ (8003250 <HAL_RCC_OscConfig+0x618>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1ec      	bne.n	80030de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003104:	4b52      	ldr	r3, [pc, #328]	@ (8003250 <HAL_RCC_OscConfig+0x618>)
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	4b52      	ldr	r3, [pc, #328]	@ (8003254 <HAL_RCC_OscConfig+0x61c>)
 800310a:	4013      	ands	r3, r2
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6a11      	ldr	r1, [r2, #32]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003114:	3a01      	subs	r2, #1
 8003116:	0112      	lsls	r2, r2, #4
 8003118:	4311      	orrs	r1, r2
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800311e:	0212      	lsls	r2, r2, #8
 8003120:	4311      	orrs	r1, r2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003126:	0852      	lsrs	r2, r2, #1
 8003128:	3a01      	subs	r2, #1
 800312a:	0552      	lsls	r2, r2, #21
 800312c:	4311      	orrs	r1, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003132:	0852      	lsrs	r2, r2, #1
 8003134:	3a01      	subs	r2, #1
 8003136:	0652      	lsls	r2, r2, #25
 8003138:	4311      	orrs	r1, r2
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800313e:	06d2      	lsls	r2, r2, #27
 8003140:	430a      	orrs	r2, r1
 8003142:	4943      	ldr	r1, [pc, #268]	@ (8003250 <HAL_RCC_OscConfig+0x618>)
 8003144:	4313      	orrs	r3, r2
 8003146:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003148:	4b41      	ldr	r3, [pc, #260]	@ (8003250 <HAL_RCC_OscConfig+0x618>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a40      	ldr	r2, [pc, #256]	@ (8003250 <HAL_RCC_OscConfig+0x618>)
 800314e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003152:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003154:	4b3e      	ldr	r3, [pc, #248]	@ (8003250 <HAL_RCC_OscConfig+0x618>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	4a3d      	ldr	r2, [pc, #244]	@ (8003250 <HAL_RCC_OscConfig+0x618>)
 800315a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800315e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7fe f8fe 	bl	8001360 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003168:	f7fe f8fa 	bl	8001360 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e066      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800317a:	4b35      	ldr	r3, [pc, #212]	@ (8003250 <HAL_RCC_OscConfig+0x618>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f0      	beq.n	8003168 <HAL_RCC_OscConfig+0x530>
 8003186:	e05e      	b.n	8003246 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003188:	4b31      	ldr	r3, [pc, #196]	@ (8003250 <HAL_RCC_OscConfig+0x618>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a30      	ldr	r2, [pc, #192]	@ (8003250 <HAL_RCC_OscConfig+0x618>)
 800318e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003194:	f7fe f8e4 	bl	8001360 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800319c:	f7fe f8e0 	bl	8001360 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e04c      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ae:	4b28      	ldr	r3, [pc, #160]	@ (8003250 <HAL_RCC_OscConfig+0x618>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80031ba:	4b25      	ldr	r3, [pc, #148]	@ (8003250 <HAL_RCC_OscConfig+0x618>)
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	4924      	ldr	r1, [pc, #144]	@ (8003250 <HAL_RCC_OscConfig+0x618>)
 80031c0:	4b25      	ldr	r3, [pc, #148]	@ (8003258 <HAL_RCC_OscConfig+0x620>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	60cb      	str	r3, [r1, #12]
 80031c6:	e03e      	b.n	8003246 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e039      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80031d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003250 <HAL_RCC_OscConfig+0x618>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f003 0203 	and.w	r2, r3, #3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d12c      	bne.n	8003242 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	3b01      	subs	r3, #1
 80031f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d123      	bne.n	8003242 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003204:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003206:	429a      	cmp	r2, r3
 8003208:	d11b      	bne.n	8003242 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003214:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003216:	429a      	cmp	r2, r3
 8003218:	d113      	bne.n	8003242 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003224:	085b      	lsrs	r3, r3, #1
 8003226:	3b01      	subs	r3, #1
 8003228:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800322a:	429a      	cmp	r2, r3
 800322c:	d109      	bne.n	8003242 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003238:	085b      	lsrs	r3, r3, #1
 800323a:	3b01      	subs	r3, #1
 800323c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800323e:	429a      	cmp	r2, r3
 8003240:	d001      	beq.n	8003246 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3720      	adds	r7, #32
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40021000 	.word	0x40021000
 8003254:	019f800c 	.word	0x019f800c
 8003258:	feeefffc 	.word	0xfeeefffc

0800325c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e11e      	b.n	80034b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003274:	4b91      	ldr	r3, [pc, #580]	@ (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d910      	bls.n	80032a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003282:	4b8e      	ldr	r3, [pc, #568]	@ (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 020f 	bic.w	r2, r3, #15
 800328a:	498c      	ldr	r1, [pc, #560]	@ (80034bc <HAL_RCC_ClockConfig+0x260>)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003292:	4b8a      	ldr	r3, [pc, #552]	@ (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e106      	b.n	80034b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d073      	beq.n	8003398 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d129      	bne.n	800330c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032b8:	4b81      	ldr	r3, [pc, #516]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0f4      	b.n	80034b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80032c8:	f000 f99e 	bl	8003608 <RCC_GetSysClockFreqFromPLLSource>
 80032cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	4a7c      	ldr	r2, [pc, #496]	@ (80034c4 <HAL_RCC_ClockConfig+0x268>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d93f      	bls.n	8003356 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80032d6:	4b7a      	ldr	r3, [pc, #488]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d009      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d033      	beq.n	8003356 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d12f      	bne.n	8003356 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032f6:	4b72      	ldr	r3, [pc, #456]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032fe:	4a70      	ldr	r2, [pc, #448]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003300:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003304:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003306:	2380      	movs	r3, #128	@ 0x80
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	e024      	b.n	8003356 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d107      	bne.n	8003324 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003314:	4b6a      	ldr	r3, [pc, #424]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d109      	bne.n	8003334 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0c6      	b.n	80034b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003324:	4b66      	ldr	r3, [pc, #408]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0be      	b.n	80034b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003334:	f000 f8ce 	bl	80034d4 <HAL_RCC_GetSysClockFreq>
 8003338:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	4a61      	ldr	r2, [pc, #388]	@ (80034c4 <HAL_RCC_ClockConfig+0x268>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d909      	bls.n	8003356 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003342:	4b5f      	ldr	r3, [pc, #380]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800334a:	4a5d      	ldr	r2, [pc, #372]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 800334c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003350:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003352:	2380      	movs	r3, #128	@ 0x80
 8003354:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003356:	4b5a      	ldr	r3, [pc, #360]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f023 0203 	bic.w	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	4957      	ldr	r1, [pc, #348]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003364:	4313      	orrs	r3, r2
 8003366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003368:	f7fd fffa 	bl	8001360 <HAL_GetTick>
 800336c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336e:	e00a      	b.n	8003386 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003370:	f7fd fff6 	bl	8001360 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800337e:	4293      	cmp	r3, r2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e095      	b.n	80034b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003386:	4b4e      	ldr	r3, [pc, #312]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 020c 	and.w	r2, r3, #12
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	429a      	cmp	r2, r3
 8003396:	d1eb      	bne.n	8003370 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d023      	beq.n	80033ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033b0:	4b43      	ldr	r3, [pc, #268]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	4a42      	ldr	r2, [pc, #264]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80033b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80033ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d007      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80033c8:	4b3d      	ldr	r3, [pc, #244]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80033d0:	4a3b      	ldr	r2, [pc, #236]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80033d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80033d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d8:	4b39      	ldr	r3, [pc, #228]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	4936      	ldr	r1, [pc, #216]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	608b      	str	r3, [r1, #8]
 80033ea:	e008      	b.n	80033fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b80      	cmp	r3, #128	@ 0x80
 80033f0:	d105      	bne.n	80033fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80033f2:	4b33      	ldr	r3, [pc, #204]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	4a32      	ldr	r2, [pc, #200]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80033f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033fe:	4b2f      	ldr	r3, [pc, #188]	@ (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d21d      	bcs.n	8003448 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340c:	4b2b      	ldr	r3, [pc, #172]	@ (80034bc <HAL_RCC_ClockConfig+0x260>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f023 020f 	bic.w	r2, r3, #15
 8003414:	4929      	ldr	r1, [pc, #164]	@ (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	4313      	orrs	r3, r2
 800341a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800341c:	f7fd ffa0 	bl	8001360 <HAL_GetTick>
 8003420:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003422:	e00a      	b.n	800343a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003424:	f7fd ff9c 	bl	8001360 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e03b      	b.n	80034b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800343a:	4b20      	ldr	r3, [pc, #128]	@ (80034bc <HAL_RCC_ClockConfig+0x260>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d1ed      	bne.n	8003424 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003454:	4b1a      	ldr	r3, [pc, #104]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	4917      	ldr	r1, [pc, #92]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003462:	4313      	orrs	r3, r2
 8003464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d009      	beq.n	8003486 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003472:	4b13      	ldr	r3, [pc, #76]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	490f      	ldr	r1, [pc, #60]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003482:	4313      	orrs	r3, r2
 8003484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003486:	f000 f825 	bl	80034d4 <HAL_RCC_GetSysClockFreq>
 800348a:	4602      	mov	r2, r0
 800348c:	4b0c      	ldr	r3, [pc, #48]	@ (80034c0 <HAL_RCC_ClockConfig+0x264>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	091b      	lsrs	r3, r3, #4
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	490c      	ldr	r1, [pc, #48]	@ (80034c8 <HAL_RCC_ClockConfig+0x26c>)
 8003498:	5ccb      	ldrb	r3, [r1, r3]
 800349a:	f003 031f 	and.w	r3, r3, #31
 800349e:	fa22 f303 	lsr.w	r3, r2, r3
 80034a2:	4a0a      	ldr	r2, [pc, #40]	@ (80034cc <HAL_RCC_ClockConfig+0x270>)
 80034a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80034a6:	4b0a      	ldr	r3, [pc, #40]	@ (80034d0 <HAL_RCC_ClockConfig+0x274>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fd ff0c 	bl	80012c8 <HAL_InitTick>
 80034b0:	4603      	mov	r3, r0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40022000 	.word	0x40022000
 80034c0:	40021000 	.word	0x40021000
 80034c4:	04c4b400 	.word	0x04c4b400
 80034c8:	080058bc 	.word	0x080058bc
 80034cc:	20000000 	.word	0x20000000
 80034d0:	20000004 	.word	0x20000004

080034d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80034da:	4b2c      	ldr	r3, [pc, #176]	@ (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d102      	bne.n	80034ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003590 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	e047      	b.n	800357c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80034ec:	4b27      	ldr	r3, [pc, #156]	@ (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 030c 	and.w	r3, r3, #12
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d102      	bne.n	80034fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034f8:	4b26      	ldr	r3, [pc, #152]	@ (8003594 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034fa:	613b      	str	r3, [r7, #16]
 80034fc:	e03e      	b.n	800357c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80034fe:	4b23      	ldr	r3, [pc, #140]	@ (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b0c      	cmp	r3, #12
 8003508:	d136      	bne.n	8003578 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800350a:	4b20      	ldr	r3, [pc, #128]	@ (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003514:	4b1d      	ldr	r3, [pc, #116]	@ (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	091b      	lsrs	r3, r3, #4
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	3301      	adds	r3, #1
 8003520:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2b03      	cmp	r3, #3
 8003526:	d10c      	bne.n	8003542 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003528:	4a1a      	ldr	r2, [pc, #104]	@ (8003594 <HAL_RCC_GetSysClockFreq+0xc0>)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003530:	4a16      	ldr	r2, [pc, #88]	@ (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003532:	68d2      	ldr	r2, [r2, #12]
 8003534:	0a12      	lsrs	r2, r2, #8
 8003536:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800353a:	fb02 f303 	mul.w	r3, r2, r3
 800353e:	617b      	str	r3, [r7, #20]
      break;
 8003540:	e00c      	b.n	800355c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003542:	4a13      	ldr	r2, [pc, #76]	@ (8003590 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	fbb2 f3f3 	udiv	r3, r2, r3
 800354a:	4a10      	ldr	r2, [pc, #64]	@ (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 800354c:	68d2      	ldr	r2, [r2, #12]
 800354e:	0a12      	lsrs	r2, r2, #8
 8003550:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003554:	fb02 f303 	mul.w	r3, r2, r3
 8003558:	617b      	str	r3, [r7, #20]
      break;
 800355a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800355c:	4b0b      	ldr	r3, [pc, #44]	@ (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	0e5b      	lsrs	r3, r3, #25
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	3301      	adds	r3, #1
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	fbb2 f3f3 	udiv	r3, r2, r3
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	e001      	b.n	800357c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800357c:	693b      	ldr	r3, [r7, #16]
}
 800357e:	4618      	mov	r0, r3
 8003580:	371c      	adds	r7, #28
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	40021000 	.word	0x40021000
 8003590:	00f42400 	.word	0x00f42400
 8003594:	016e3600 	.word	0x016e3600

08003598 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800359c:	4b03      	ldr	r3, [pc, #12]	@ (80035ac <HAL_RCC_GetHCLKFreq+0x14>)
 800359e:	681b      	ldr	r3, [r3, #0]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	20000000 	.word	0x20000000

080035b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80035b4:	f7ff fff0 	bl	8003598 <HAL_RCC_GetHCLKFreq>
 80035b8:	4602      	mov	r2, r0
 80035ba:	4b06      	ldr	r3, [pc, #24]	@ (80035d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	0a1b      	lsrs	r3, r3, #8
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	4904      	ldr	r1, [pc, #16]	@ (80035d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035c6:	5ccb      	ldrb	r3, [r1, r3]
 80035c8:	f003 031f 	and.w	r3, r3, #31
 80035cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40021000 	.word	0x40021000
 80035d8:	080058cc 	.word	0x080058cc

080035dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035e0:	f7ff ffda 	bl	8003598 <HAL_RCC_GetHCLKFreq>
 80035e4:	4602      	mov	r2, r0
 80035e6:	4b06      	ldr	r3, [pc, #24]	@ (8003600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	0adb      	lsrs	r3, r3, #11
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	4904      	ldr	r1, [pc, #16]	@ (8003604 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035f2:	5ccb      	ldrb	r3, [r1, r3]
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40021000 	.word	0x40021000
 8003604:	080058cc 	.word	0x080058cc

08003608 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800360e:	4b1e      	ldr	r3, [pc, #120]	@ (8003688 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003618:	4b1b      	ldr	r3, [pc, #108]	@ (8003688 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	091b      	lsrs	r3, r3, #4
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	3301      	adds	r3, #1
 8003624:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	2b03      	cmp	r3, #3
 800362a:	d10c      	bne.n	8003646 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800362c:	4a17      	ldr	r2, [pc, #92]	@ (800368c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	fbb2 f3f3 	udiv	r3, r2, r3
 8003634:	4a14      	ldr	r2, [pc, #80]	@ (8003688 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003636:	68d2      	ldr	r2, [r2, #12]
 8003638:	0a12      	lsrs	r2, r2, #8
 800363a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800363e:	fb02 f303 	mul.w	r3, r2, r3
 8003642:	617b      	str	r3, [r7, #20]
    break;
 8003644:	e00c      	b.n	8003660 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003646:	4a12      	ldr	r2, [pc, #72]	@ (8003690 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	fbb2 f3f3 	udiv	r3, r2, r3
 800364e:	4a0e      	ldr	r2, [pc, #56]	@ (8003688 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003650:	68d2      	ldr	r2, [r2, #12]
 8003652:	0a12      	lsrs	r2, r2, #8
 8003654:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003658:	fb02 f303 	mul.w	r3, r2, r3
 800365c:	617b      	str	r3, [r7, #20]
    break;
 800365e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003660:	4b09      	ldr	r3, [pc, #36]	@ (8003688 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	0e5b      	lsrs	r3, r3, #25
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	3301      	adds	r3, #1
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	fbb2 f3f3 	udiv	r3, r2, r3
 8003678:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800367a:	687b      	ldr	r3, [r7, #4]
}
 800367c:	4618      	mov	r0, r3
 800367e:	371c      	adds	r7, #28
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	40021000 	.word	0x40021000
 800368c:	016e3600 	.word	0x016e3600
 8003690:	00f42400 	.word	0x00f42400

08003694 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800369c:	2300      	movs	r3, #0
 800369e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036a0:	2300      	movs	r3, #0
 80036a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 8098 	beq.w	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036b2:	2300      	movs	r3, #0
 80036b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036b6:	4b43      	ldr	r3, [pc, #268]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10d      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c2:	4b40      	ldr	r3, [pc, #256]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c6:	4a3f      	ldr	r2, [pc, #252]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80036ce:	4b3d      	ldr	r3, [pc, #244]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036da:	2301      	movs	r3, #1
 80036dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036de:	4b3a      	ldr	r3, [pc, #232]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a39      	ldr	r2, [pc, #228]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036ea:	f7fd fe39 	bl	8001360 <HAL_GetTick>
 80036ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036f0:	e009      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036f2:	f7fd fe35 	bl	8001360 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d902      	bls.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	74fb      	strb	r3, [r7, #19]
        break;
 8003704:	e005      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003706:	4b30      	ldr	r3, [pc, #192]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0ef      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003712:	7cfb      	ldrb	r3, [r7, #19]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d159      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003718:	4b2a      	ldr	r3, [pc, #168]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003722:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d01e      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	429a      	cmp	r2, r3
 8003732:	d019      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003734:	4b23      	ldr	r3, [pc, #140]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800373a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800373e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003740:	4b20      	ldr	r3, [pc, #128]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003746:	4a1f      	ldr	r2, [pc, #124]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800374c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003750:	4b1c      	ldr	r3, [pc, #112]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003756:	4a1b      	ldr	r2, [pc, #108]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003758:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800375c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003760:	4a18      	ldr	r2, [pc, #96]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d016      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003772:	f7fd fdf5 	bl	8001360 <HAL_GetTick>
 8003776:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003778:	e00b      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377a:	f7fd fdf1 	bl	8001360 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003788:	4293      	cmp	r3, r2
 800378a:	d902      	bls.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	74fb      	strb	r3, [r7, #19]
            break;
 8003790:	e006      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003792:	4b0c      	ldr	r3, [pc, #48]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0ec      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80037a0:	7cfb      	ldrb	r3, [r7, #19]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10b      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037a6:	4b07      	ldr	r3, [pc, #28]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b4:	4903      	ldr	r1, [pc, #12]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80037bc:	e008      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037be:	7cfb      	ldrb	r3, [r7, #19]
 80037c0:	74bb      	strb	r3, [r7, #18]
 80037c2:	e005      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80037c4:	40021000 	.word	0x40021000
 80037c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037cc:	7cfb      	ldrb	r3, [r7, #19]
 80037ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037d0:	7c7b      	ldrb	r3, [r7, #17]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d105      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d6:	4ba6      	ldr	r3, [pc, #664]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037da:	4aa5      	ldr	r2, [pc, #660]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037e0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037ee:	4ba0      	ldr	r3, [pc, #640]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f4:	f023 0203 	bic.w	r2, r3, #3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	499c      	ldr	r1, [pc, #624]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003810:	4b97      	ldr	r3, [pc, #604]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003816:	f023 020c 	bic.w	r2, r3, #12
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	4994      	ldr	r1, [pc, #592]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003832:	4b8f      	ldr	r3, [pc, #572]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003838:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	498b      	ldr	r1, [pc, #556]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003854:	4b86      	ldr	r3, [pc, #536]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	4983      	ldr	r1, [pc, #524]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0320 	and.w	r3, r3, #32
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003876:	4b7e      	ldr	r3, [pc, #504]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	497a      	ldr	r1, [pc, #488]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00a      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003898:	4b75      	ldr	r3, [pc, #468]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800389e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	4972      	ldr	r1, [pc, #456]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038ba:	4b6d      	ldr	r3, [pc, #436]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	4969      	ldr	r1, [pc, #420]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038dc:	4b64      	ldr	r3, [pc, #400]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	4961      	ldr	r1, [pc, #388]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038fe:	4b5c      	ldr	r3, [pc, #368]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003904:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390c:	4958      	ldr	r1, [pc, #352]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800391c:	2b00      	cmp	r3, #0
 800391e:	d015      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003920:	4b53      	ldr	r3, [pc, #332]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003926:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800392e:	4950      	ldr	r1, [pc, #320]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800393e:	d105      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003940:	4b4b      	ldr	r3, [pc, #300]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	4a4a      	ldr	r2, [pc, #296]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003946:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800394a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003954:	2b00      	cmp	r3, #0
 8003956:	d015      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003958:	4b45      	ldr	r3, [pc, #276]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800395a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800395e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003966:	4942      	ldr	r1, [pc, #264]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003972:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003976:	d105      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003978:	4b3d      	ldr	r3, [pc, #244]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	4a3c      	ldr	r2, [pc, #240]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800397e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003982:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d015      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003990:	4b37      	ldr	r3, [pc, #220]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003996:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399e:	4934      	ldr	r1, [pc, #208]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039ae:	d105      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039b0:	4b2f      	ldr	r3, [pc, #188]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	4a2e      	ldr	r2, [pc, #184]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039ba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d015      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039c8:	4b29      	ldr	r3, [pc, #164]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d6:	4926      	ldr	r1, [pc, #152]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039e6:	d105      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039e8:	4b21      	ldr	r3, [pc, #132]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	4a20      	ldr	r2, [pc, #128]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039f2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d015      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a00:	4b1b      	ldr	r3, [pc, #108]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a0e:	4918      	ldr	r1, [pc, #96]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a1e:	d105      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a20:	4b13      	ldr	r3, [pc, #76]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4a12      	ldr	r2, [pc, #72]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a2a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d015      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a38:	4b0d      	ldr	r3, [pc, #52]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a46:	490a      	ldr	r1, [pc, #40]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a56:	d105      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a58:	4b05      	ldr	r3, [pc, #20]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	4a04      	ldr	r2, [pc, #16]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a62:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003a64:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40021000 	.word	0x40021000

08003a74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e09d      	b.n	8003bc2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d108      	bne.n	8003aa0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a96:	d009      	beq.n	8003aac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	61da      	str	r2, [r3, #28]
 8003a9e:	e005      	b.n	8003aac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7fd f9fe 	bl	8000ec8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ae2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003aec:	d902      	bls.n	8003af4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	e002      	b.n	8003afa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003af4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003af8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003b02:	d007      	beq.n	8003b14 <HAL_SPI_Init+0xa0>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b0c:	d002      	beq.n	8003b14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b56:	ea42 0103 	orr.w	r1, r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	0c1b      	lsrs	r3, r3, #16
 8003b70:	f003 0204 	and.w	r2, r3, #4
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b78:	f003 0310 	and.w	r3, r3, #16
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003b90:	ea42 0103 	orr.w	r1, r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69da      	ldr	r2, [r3, #28]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e049      	b.n	8003c70 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d106      	bne.n	8003bf6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7fd f9ab 	bl	8000f4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3304      	adds	r3, #4
 8003c06:	4619      	mov	r1, r3
 8003c08:	4610      	mov	r0, r2
 8003c0a:	f000 faa5 	bl	8004158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e049      	b.n	8003d1e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d106      	bne.n	8003ca4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f841 	bl	8003d26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	f000 fa4e 	bl	8004158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
	...

08003d3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e0ff      	b.n	8003f5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b14      	cmp	r3, #20
 8003d66:	f200 80f0 	bhi.w	8003f4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d70:	08003dc5 	.word	0x08003dc5
 8003d74:	08003f4b 	.word	0x08003f4b
 8003d78:	08003f4b 	.word	0x08003f4b
 8003d7c:	08003f4b 	.word	0x08003f4b
 8003d80:	08003e05 	.word	0x08003e05
 8003d84:	08003f4b 	.word	0x08003f4b
 8003d88:	08003f4b 	.word	0x08003f4b
 8003d8c:	08003f4b 	.word	0x08003f4b
 8003d90:	08003e47 	.word	0x08003e47
 8003d94:	08003f4b 	.word	0x08003f4b
 8003d98:	08003f4b 	.word	0x08003f4b
 8003d9c:	08003f4b 	.word	0x08003f4b
 8003da0:	08003e87 	.word	0x08003e87
 8003da4:	08003f4b 	.word	0x08003f4b
 8003da8:	08003f4b 	.word	0x08003f4b
 8003dac:	08003f4b 	.word	0x08003f4b
 8003db0:	08003ec9 	.word	0x08003ec9
 8003db4:	08003f4b 	.word	0x08003f4b
 8003db8:	08003f4b 	.word	0x08003f4b
 8003dbc:	08003f4b 	.word	0x08003f4b
 8003dc0:	08003f09 	.word	0x08003f09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68b9      	ldr	r1, [r7, #8]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fa60 	bl	8004290 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699a      	ldr	r2, [r3, #24]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0208 	orr.w	r2, r2, #8
 8003dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699a      	ldr	r2, [r3, #24]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0204 	bic.w	r2, r2, #4
 8003dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6999      	ldr	r1, [r3, #24]
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	691a      	ldr	r2, [r3, #16]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	619a      	str	r2, [r3, #24]
      break;
 8003e02:	e0a5      	b.n	8003f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68b9      	ldr	r1, [r7, #8]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fad0 	bl	80043b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699a      	ldr	r2, [r3, #24]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699a      	ldr	r2, [r3, #24]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6999      	ldr	r1, [r3, #24]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	021a      	lsls	r2, r3, #8
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	619a      	str	r2, [r3, #24]
      break;
 8003e44:	e084      	b.n	8003f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68b9      	ldr	r1, [r7, #8]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 fb39 	bl	80044c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69da      	ldr	r2, [r3, #28]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f042 0208 	orr.w	r2, r2, #8
 8003e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69da      	ldr	r2, [r3, #28]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0204 	bic.w	r2, r2, #4
 8003e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69d9      	ldr	r1, [r3, #28]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	691a      	ldr	r2, [r3, #16]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	61da      	str	r2, [r3, #28]
      break;
 8003e84:	e064      	b.n	8003f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68b9      	ldr	r1, [r7, #8]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 fba1 	bl	80045d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	69da      	ldr	r2, [r3, #28]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69da      	ldr	r2, [r3, #28]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69d9      	ldr	r1, [r3, #28]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	021a      	lsls	r2, r3, #8
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	61da      	str	r2, [r3, #28]
      break;
 8003ec6:	e043      	b.n	8003f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68b9      	ldr	r1, [r7, #8]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fc0a 	bl	80046e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0208 	orr.w	r2, r2, #8
 8003ee2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0204 	bic.w	r2, r2, #4
 8003ef2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003f06:	e023      	b.n	8003f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68b9      	ldr	r1, [r7, #8]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fc4e 	bl	80047b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f22:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f32:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	021a      	lsls	r2, r3, #8
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003f48:	e002      	b.n	8003f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	75fb      	strb	r3, [r7, #23]
      break;
 8003f4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop

08003f64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_TIM_ConfigClockSource+0x1c>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e0de      	b.n	800413e <HAL_TIM_ConfigClockSource+0x1da>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003f9e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003fa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003faa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a63      	ldr	r2, [pc, #396]	@ (8004148 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	f000 80a9 	beq.w	8004112 <HAL_TIM_ConfigClockSource+0x1ae>
 8003fc0:	4a61      	ldr	r2, [pc, #388]	@ (8004148 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	f200 80ae 	bhi.w	8004124 <HAL_TIM_ConfigClockSource+0x1c0>
 8003fc8:	4a60      	ldr	r2, [pc, #384]	@ (800414c <HAL_TIM_ConfigClockSource+0x1e8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	f000 80a1 	beq.w	8004112 <HAL_TIM_ConfigClockSource+0x1ae>
 8003fd0:	4a5e      	ldr	r2, [pc, #376]	@ (800414c <HAL_TIM_ConfigClockSource+0x1e8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	f200 80a6 	bhi.w	8004124 <HAL_TIM_ConfigClockSource+0x1c0>
 8003fd8:	4a5d      	ldr	r2, [pc, #372]	@ (8004150 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	f000 8099 	beq.w	8004112 <HAL_TIM_ConfigClockSource+0x1ae>
 8003fe0:	4a5b      	ldr	r2, [pc, #364]	@ (8004150 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	f200 809e 	bhi.w	8004124 <HAL_TIM_ConfigClockSource+0x1c0>
 8003fe8:	4a5a      	ldr	r2, [pc, #360]	@ (8004154 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	f000 8091 	beq.w	8004112 <HAL_TIM_ConfigClockSource+0x1ae>
 8003ff0:	4a58      	ldr	r2, [pc, #352]	@ (8004154 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	f200 8096 	bhi.w	8004124 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ff8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003ffc:	f000 8089 	beq.w	8004112 <HAL_TIM_ConfigClockSource+0x1ae>
 8004000:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004004:	f200 808e 	bhi.w	8004124 <HAL_TIM_ConfigClockSource+0x1c0>
 8004008:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800400c:	d03e      	beq.n	800408c <HAL_TIM_ConfigClockSource+0x128>
 800400e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004012:	f200 8087 	bhi.w	8004124 <HAL_TIM_ConfigClockSource+0x1c0>
 8004016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800401a:	f000 8086 	beq.w	800412a <HAL_TIM_ConfigClockSource+0x1c6>
 800401e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004022:	d87f      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x1c0>
 8004024:	2b70      	cmp	r3, #112	@ 0x70
 8004026:	d01a      	beq.n	800405e <HAL_TIM_ConfigClockSource+0xfa>
 8004028:	2b70      	cmp	r3, #112	@ 0x70
 800402a:	d87b      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x1c0>
 800402c:	2b60      	cmp	r3, #96	@ 0x60
 800402e:	d050      	beq.n	80040d2 <HAL_TIM_ConfigClockSource+0x16e>
 8004030:	2b60      	cmp	r3, #96	@ 0x60
 8004032:	d877      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x1c0>
 8004034:	2b50      	cmp	r3, #80	@ 0x50
 8004036:	d03c      	beq.n	80040b2 <HAL_TIM_ConfigClockSource+0x14e>
 8004038:	2b50      	cmp	r3, #80	@ 0x50
 800403a:	d873      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x1c0>
 800403c:	2b40      	cmp	r3, #64	@ 0x40
 800403e:	d058      	beq.n	80040f2 <HAL_TIM_ConfigClockSource+0x18e>
 8004040:	2b40      	cmp	r3, #64	@ 0x40
 8004042:	d86f      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x1c0>
 8004044:	2b30      	cmp	r3, #48	@ 0x30
 8004046:	d064      	beq.n	8004112 <HAL_TIM_ConfigClockSource+0x1ae>
 8004048:	2b30      	cmp	r3, #48	@ 0x30
 800404a:	d86b      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x1c0>
 800404c:	2b20      	cmp	r3, #32
 800404e:	d060      	beq.n	8004112 <HAL_TIM_ConfigClockSource+0x1ae>
 8004050:	2b20      	cmp	r3, #32
 8004052:	d867      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x1c0>
 8004054:	2b00      	cmp	r3, #0
 8004056:	d05c      	beq.n	8004112 <HAL_TIM_ConfigClockSource+0x1ae>
 8004058:	2b10      	cmp	r3, #16
 800405a:	d05a      	beq.n	8004112 <HAL_TIM_ConfigClockSource+0x1ae>
 800405c:	e062      	b.n	8004124 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800406e:	f000 fc81 	bl	8004974 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004080:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	609a      	str	r2, [r3, #8]
      break;
 800408a:	e04f      	b.n	800412c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800409c:	f000 fc6a 	bl	8004974 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040ae:	609a      	str	r2, [r3, #8]
      break;
 80040b0:	e03c      	b.n	800412c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040be:	461a      	mov	r2, r3
 80040c0:	f000 fbdc 	bl	800487c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2150      	movs	r1, #80	@ 0x50
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 fc35 	bl	800493a <TIM_ITRx_SetConfig>
      break;
 80040d0:	e02c      	b.n	800412c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040de:	461a      	mov	r2, r3
 80040e0:	f000 fbfb 	bl	80048da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2160      	movs	r1, #96	@ 0x60
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 fc25 	bl	800493a <TIM_ITRx_SetConfig>
      break;
 80040f0:	e01c      	b.n	800412c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040fe:	461a      	mov	r2, r3
 8004100:	f000 fbbc 	bl	800487c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2140      	movs	r1, #64	@ 0x40
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fc15 	bl	800493a <TIM_ITRx_SetConfig>
      break;
 8004110:	e00c      	b.n	800412c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4619      	mov	r1, r3
 800411c:	4610      	mov	r0, r2
 800411e:	f000 fc0c 	bl	800493a <TIM_ITRx_SetConfig>
      break;
 8004122:	e003      	b.n	800412c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	73fb      	strb	r3, [r7, #15]
      break;
 8004128:	e000      	b.n	800412c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800412a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800413c:	7bfb      	ldrb	r3, [r7, #15]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	00100070 	.word	0x00100070
 800414c:	00100040 	.word	0x00100040
 8004150:	00100030 	.word	0x00100030
 8004154:	00100020 	.word	0x00100020

08004158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a42      	ldr	r2, [pc, #264]	@ (8004274 <TIM_Base_SetConfig+0x11c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00f      	beq.n	8004190 <TIM_Base_SetConfig+0x38>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004176:	d00b      	beq.n	8004190 <TIM_Base_SetConfig+0x38>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a3f      	ldr	r2, [pc, #252]	@ (8004278 <TIM_Base_SetConfig+0x120>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d007      	beq.n	8004190 <TIM_Base_SetConfig+0x38>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a3e      	ldr	r2, [pc, #248]	@ (800427c <TIM_Base_SetConfig+0x124>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d003      	beq.n	8004190 <TIM_Base_SetConfig+0x38>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a3d      	ldr	r2, [pc, #244]	@ (8004280 <TIM_Base_SetConfig+0x128>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d108      	bne.n	80041a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	4313      	orrs	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a33      	ldr	r2, [pc, #204]	@ (8004274 <TIM_Base_SetConfig+0x11c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d01b      	beq.n	80041e2 <TIM_Base_SetConfig+0x8a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041b0:	d017      	beq.n	80041e2 <TIM_Base_SetConfig+0x8a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a30      	ldr	r2, [pc, #192]	@ (8004278 <TIM_Base_SetConfig+0x120>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d013      	beq.n	80041e2 <TIM_Base_SetConfig+0x8a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a2f      	ldr	r2, [pc, #188]	@ (800427c <TIM_Base_SetConfig+0x124>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00f      	beq.n	80041e2 <TIM_Base_SetConfig+0x8a>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a2e      	ldr	r2, [pc, #184]	@ (8004280 <TIM_Base_SetConfig+0x128>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00b      	beq.n	80041e2 <TIM_Base_SetConfig+0x8a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a2d      	ldr	r2, [pc, #180]	@ (8004284 <TIM_Base_SetConfig+0x12c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d007      	beq.n	80041e2 <TIM_Base_SetConfig+0x8a>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a2c      	ldr	r2, [pc, #176]	@ (8004288 <TIM_Base_SetConfig+0x130>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d003      	beq.n	80041e2 <TIM_Base_SetConfig+0x8a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a2b      	ldr	r2, [pc, #172]	@ (800428c <TIM_Base_SetConfig+0x134>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d108      	bne.n	80041f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a16      	ldr	r2, [pc, #88]	@ (8004274 <TIM_Base_SetConfig+0x11c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00f      	beq.n	8004240 <TIM_Base_SetConfig+0xe8>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a17      	ldr	r2, [pc, #92]	@ (8004280 <TIM_Base_SetConfig+0x128>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d00b      	beq.n	8004240 <TIM_Base_SetConfig+0xe8>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a16      	ldr	r2, [pc, #88]	@ (8004284 <TIM_Base_SetConfig+0x12c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d007      	beq.n	8004240 <TIM_Base_SetConfig+0xe8>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a15      	ldr	r2, [pc, #84]	@ (8004288 <TIM_Base_SetConfig+0x130>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d003      	beq.n	8004240 <TIM_Base_SetConfig+0xe8>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a14      	ldr	r2, [pc, #80]	@ (800428c <TIM_Base_SetConfig+0x134>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d103      	bne.n	8004248 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b01      	cmp	r3, #1
 8004258:	d105      	bne.n	8004266 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f023 0201 	bic.w	r2, r3, #1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	611a      	str	r2, [r3, #16]
  }
}
 8004266:	bf00      	nop
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40000400 	.word	0x40000400
 800427c:	40000800 	.word	0x40000800
 8004280:	40013400 	.word	0x40013400
 8004284:	40014000 	.word	0x40014000
 8004288:	40014400 	.word	0x40014400
 800428c:	40014800 	.word	0x40014800

08004290 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	f023 0201 	bic.w	r2, r3, #1
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f023 0303 	bic.w	r3, r3, #3
 80042ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f023 0302 	bic.w	r3, r3, #2
 80042dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a2c      	ldr	r2, [pc, #176]	@ (800439c <TIM_OC1_SetConfig+0x10c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d00f      	beq.n	8004310 <TIM_OC1_SetConfig+0x80>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a2b      	ldr	r2, [pc, #172]	@ (80043a0 <TIM_OC1_SetConfig+0x110>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d00b      	beq.n	8004310 <TIM_OC1_SetConfig+0x80>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a2a      	ldr	r2, [pc, #168]	@ (80043a4 <TIM_OC1_SetConfig+0x114>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d007      	beq.n	8004310 <TIM_OC1_SetConfig+0x80>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a29      	ldr	r2, [pc, #164]	@ (80043a8 <TIM_OC1_SetConfig+0x118>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d003      	beq.n	8004310 <TIM_OC1_SetConfig+0x80>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a28      	ldr	r2, [pc, #160]	@ (80043ac <TIM_OC1_SetConfig+0x11c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d10c      	bne.n	800432a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f023 0308 	bic.w	r3, r3, #8
 8004316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f023 0304 	bic.w	r3, r3, #4
 8004328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a1b      	ldr	r2, [pc, #108]	@ (800439c <TIM_OC1_SetConfig+0x10c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00f      	beq.n	8004352 <TIM_OC1_SetConfig+0xc2>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a1a      	ldr	r2, [pc, #104]	@ (80043a0 <TIM_OC1_SetConfig+0x110>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d00b      	beq.n	8004352 <TIM_OC1_SetConfig+0xc2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a19      	ldr	r2, [pc, #100]	@ (80043a4 <TIM_OC1_SetConfig+0x114>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d007      	beq.n	8004352 <TIM_OC1_SetConfig+0xc2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a18      	ldr	r2, [pc, #96]	@ (80043a8 <TIM_OC1_SetConfig+0x118>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d003      	beq.n	8004352 <TIM_OC1_SetConfig+0xc2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a17      	ldr	r2, [pc, #92]	@ (80043ac <TIM_OC1_SetConfig+0x11c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d111      	bne.n	8004376 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4313      	orrs	r3, r2
 8004374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	621a      	str	r2, [r3, #32]
}
 8004390:	bf00      	nop
 8004392:	371c      	adds	r7, #28
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	40012c00 	.word	0x40012c00
 80043a0:	40013400 	.word	0x40013400
 80043a4:	40014000 	.word	0x40014000
 80043a8:	40014400 	.word	0x40014400
 80043ac:	40014800 	.word	0x40014800

080043b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b087      	sub	sp, #28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	f023 0210 	bic.w	r2, r3, #16
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	021b      	lsls	r3, r3, #8
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f023 0320 	bic.w	r3, r3, #32
 80043fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a28      	ldr	r2, [pc, #160]	@ (80044b0 <TIM_OC2_SetConfig+0x100>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d003      	beq.n	800441c <TIM_OC2_SetConfig+0x6c>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a27      	ldr	r2, [pc, #156]	@ (80044b4 <TIM_OC2_SetConfig+0x104>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d10d      	bne.n	8004438 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004436:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a1d      	ldr	r2, [pc, #116]	@ (80044b0 <TIM_OC2_SetConfig+0x100>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d00f      	beq.n	8004460 <TIM_OC2_SetConfig+0xb0>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a1c      	ldr	r2, [pc, #112]	@ (80044b4 <TIM_OC2_SetConfig+0x104>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d00b      	beq.n	8004460 <TIM_OC2_SetConfig+0xb0>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a1b      	ldr	r2, [pc, #108]	@ (80044b8 <TIM_OC2_SetConfig+0x108>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d007      	beq.n	8004460 <TIM_OC2_SetConfig+0xb0>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a1a      	ldr	r2, [pc, #104]	@ (80044bc <TIM_OC2_SetConfig+0x10c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d003      	beq.n	8004460 <TIM_OC2_SetConfig+0xb0>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a19      	ldr	r2, [pc, #100]	@ (80044c0 <TIM_OC2_SetConfig+0x110>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d113      	bne.n	8004488 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004466:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800446e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	4313      	orrs	r3, r2
 800447a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	621a      	str	r2, [r3, #32]
}
 80044a2:	bf00      	nop
 80044a4:	371c      	adds	r7, #28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40012c00 	.word	0x40012c00
 80044b4:	40013400 	.word	0x40013400
 80044b8:	40014000 	.word	0x40014000
 80044bc:	40014400 	.word	0x40014400
 80044c0:	40014800 	.word	0x40014800

080044c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 0303 	bic.w	r3, r3, #3
 80044fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	021b      	lsls	r3, r3, #8
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a27      	ldr	r2, [pc, #156]	@ (80045c0 <TIM_OC3_SetConfig+0xfc>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d003      	beq.n	800452e <TIM_OC3_SetConfig+0x6a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a26      	ldr	r2, [pc, #152]	@ (80045c4 <TIM_OC3_SetConfig+0x100>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d10d      	bne.n	800454a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004534:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	021b      	lsls	r3, r3, #8
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	4313      	orrs	r3, r2
 8004540:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004548:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a1c      	ldr	r2, [pc, #112]	@ (80045c0 <TIM_OC3_SetConfig+0xfc>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d00f      	beq.n	8004572 <TIM_OC3_SetConfig+0xae>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a1b      	ldr	r2, [pc, #108]	@ (80045c4 <TIM_OC3_SetConfig+0x100>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00b      	beq.n	8004572 <TIM_OC3_SetConfig+0xae>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a1a      	ldr	r2, [pc, #104]	@ (80045c8 <TIM_OC3_SetConfig+0x104>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d007      	beq.n	8004572 <TIM_OC3_SetConfig+0xae>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a19      	ldr	r2, [pc, #100]	@ (80045cc <TIM_OC3_SetConfig+0x108>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d003      	beq.n	8004572 <TIM_OC3_SetConfig+0xae>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a18      	ldr	r2, [pc, #96]	@ (80045d0 <TIM_OC3_SetConfig+0x10c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d113      	bne.n	800459a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	4313      	orrs	r3, r2
 8004598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	621a      	str	r2, [r3, #32]
}
 80045b4:	bf00      	nop
 80045b6:	371c      	adds	r7, #28
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	40012c00 	.word	0x40012c00
 80045c4:	40013400 	.word	0x40013400
 80045c8:	40014000 	.word	0x40014000
 80045cc:	40014400 	.word	0x40014400
 80045d0:	40014800 	.word	0x40014800

080045d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800460e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	021b      	lsls	r3, r3, #8
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4313      	orrs	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004622:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	031b      	lsls	r3, r3, #12
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	4313      	orrs	r3, r2
 800462e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a28      	ldr	r2, [pc, #160]	@ (80046d4 <TIM_OC4_SetConfig+0x100>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d003      	beq.n	8004640 <TIM_OC4_SetConfig+0x6c>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a27      	ldr	r2, [pc, #156]	@ (80046d8 <TIM_OC4_SetConfig+0x104>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d10d      	bne.n	800465c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004646:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	031b      	lsls	r3, r3, #12
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800465a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a1d      	ldr	r2, [pc, #116]	@ (80046d4 <TIM_OC4_SetConfig+0x100>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d00f      	beq.n	8004684 <TIM_OC4_SetConfig+0xb0>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a1c      	ldr	r2, [pc, #112]	@ (80046d8 <TIM_OC4_SetConfig+0x104>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00b      	beq.n	8004684 <TIM_OC4_SetConfig+0xb0>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a1b      	ldr	r2, [pc, #108]	@ (80046dc <TIM_OC4_SetConfig+0x108>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d007      	beq.n	8004684 <TIM_OC4_SetConfig+0xb0>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a1a      	ldr	r2, [pc, #104]	@ (80046e0 <TIM_OC4_SetConfig+0x10c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d003      	beq.n	8004684 <TIM_OC4_SetConfig+0xb0>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a19      	ldr	r2, [pc, #100]	@ (80046e4 <TIM_OC4_SetConfig+0x110>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d113      	bne.n	80046ac <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800468a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004692:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	019b      	lsls	r3, r3, #6
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	019b      	lsls	r3, r3, #6
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	621a      	str	r2, [r3, #32]
}
 80046c6:	bf00      	nop
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	40012c00 	.word	0x40012c00
 80046d8:	40013400 	.word	0x40013400
 80046dc:	40014000 	.word	0x40014000
 80046e0:	40014400 	.word	0x40014400
 80046e4:	40014800 	.word	0x40014800

080046e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800470e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800471a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800472c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	041b      	lsls	r3, r3, #16
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a17      	ldr	r2, [pc, #92]	@ (800479c <TIM_OC5_SetConfig+0xb4>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d00f      	beq.n	8004762 <TIM_OC5_SetConfig+0x7a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a16      	ldr	r2, [pc, #88]	@ (80047a0 <TIM_OC5_SetConfig+0xb8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d00b      	beq.n	8004762 <TIM_OC5_SetConfig+0x7a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a15      	ldr	r2, [pc, #84]	@ (80047a4 <TIM_OC5_SetConfig+0xbc>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d007      	beq.n	8004762 <TIM_OC5_SetConfig+0x7a>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a14      	ldr	r2, [pc, #80]	@ (80047a8 <TIM_OC5_SetConfig+0xc0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d003      	beq.n	8004762 <TIM_OC5_SetConfig+0x7a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a13      	ldr	r2, [pc, #76]	@ (80047ac <TIM_OC5_SetConfig+0xc4>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d109      	bne.n	8004776 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004768:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	021b      	lsls	r3, r3, #8
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	4313      	orrs	r3, r2
 8004774:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	621a      	str	r2, [r3, #32]
}
 8004790:	bf00      	nop
 8004792:	371c      	adds	r7, #28
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	40012c00 	.word	0x40012c00
 80047a0:	40013400 	.word	0x40013400
 80047a4:	40014000 	.word	0x40014000
 80047a8:	40014400 	.word	0x40014400
 80047ac:	40014800 	.word	0x40014800

080047b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	021b      	lsls	r3, r3, #8
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80047f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	051b      	lsls	r3, r3, #20
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a18      	ldr	r2, [pc, #96]	@ (8004868 <TIM_OC6_SetConfig+0xb8>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d00f      	beq.n	800482c <TIM_OC6_SetConfig+0x7c>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a17      	ldr	r2, [pc, #92]	@ (800486c <TIM_OC6_SetConfig+0xbc>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d00b      	beq.n	800482c <TIM_OC6_SetConfig+0x7c>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a16      	ldr	r2, [pc, #88]	@ (8004870 <TIM_OC6_SetConfig+0xc0>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d007      	beq.n	800482c <TIM_OC6_SetConfig+0x7c>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a15      	ldr	r2, [pc, #84]	@ (8004874 <TIM_OC6_SetConfig+0xc4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d003      	beq.n	800482c <TIM_OC6_SetConfig+0x7c>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a14      	ldr	r2, [pc, #80]	@ (8004878 <TIM_OC6_SetConfig+0xc8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d109      	bne.n	8004840 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004832:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	029b      	lsls	r3, r3, #10
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	621a      	str	r2, [r3, #32]
}
 800485a:	bf00      	nop
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40012c00 	.word	0x40012c00
 800486c:	40013400 	.word	0x40013400
 8004870:	40014000 	.word	0x40014000
 8004874:	40014400 	.word	0x40014400
 8004878:	40014800 	.word	0x40014800

0800487c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	f023 0201 	bic.w	r2, r3, #1
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f023 030a 	bic.w	r3, r3, #10
 80048b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	4313      	orrs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	621a      	str	r2, [r3, #32]
}
 80048ce:	bf00      	nop
 80048d0:	371c      	adds	r7, #28
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048da:	b480      	push	{r7}
 80048dc:	b087      	sub	sp, #28
 80048de:	af00      	add	r7, sp, #0
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	f023 0210 	bic.w	r2, r3, #16
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004904:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	031b      	lsls	r3, r3, #12
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004916:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	011b      	lsls	r3, r3, #4
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	621a      	str	r2, [r3, #32]
}
 800492e:	bf00      	nop
 8004930:	371c      	adds	r7, #28
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800493a:	b480      	push	{r7}
 800493c:	b085      	sub	sp, #20
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004954:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	f043 0307 	orr.w	r3, r3, #7
 8004960:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	609a      	str	r2, [r3, #8]
}
 8004968:	bf00      	nop
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800498e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	021a      	lsls	r2, r3, #8
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	431a      	orrs	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4313      	orrs	r3, r2
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	609a      	str	r2, [r3, #8]
}
 80049a8:	bf00      	nop
 80049aa:	371c      	adds	r7, #28
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e065      	b.n	8004a98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a2c      	ldr	r2, [pc, #176]	@ (8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d004      	beq.n	8004a00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a2b      	ldr	r2, [pc, #172]	@ (8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d108      	bne.n	8004a12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004a06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004a18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a1b      	ldr	r2, [pc, #108]	@ (8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d018      	beq.n	8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a42:	d013      	beq.n	8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a18      	ldr	r2, [pc, #96]	@ (8004aac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d00e      	beq.n	8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a17      	ldr	r2, [pc, #92]	@ (8004ab0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d009      	beq.n	8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a12      	ldr	r2, [pc, #72]	@ (8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d004      	beq.n	8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a13      	ldr	r2, [pc, #76]	@ (8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d10c      	bne.n	8004a86 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	40012c00 	.word	0x40012c00
 8004aa8:	40013400 	.word	0x40013400
 8004aac:	40000400 	.word	0x40000400
 8004ab0:	40000800 	.word	0x40000800
 8004ab4:	40014000 	.word	0x40014000

08004ab8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e073      	b.n	8004bbc <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	041b      	lsls	r3, r3, #16
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a19      	ldr	r2, [pc, #100]	@ (8004bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d004      	beq.n	8004b70 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a18      	ldr	r2, [pc, #96]	@ (8004bcc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d11c      	bne.n	8004baa <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7a:	051b      	lsls	r3, r3, #20
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	40012c00 	.word	0x40012c00
 8004bcc:	40013400 	.word	0x40013400

08004bd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e042      	b.n	8004c68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d106      	bne.n	8004bfa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7fc fa4b 	bl	8001090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2224      	movs	r2, #36	@ 0x24
 8004bfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0201 	bic.w	r2, r2, #1
 8004c10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 faf4 	bl	8005208 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f825 	bl	8004c70 <UART_SetConfig>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d101      	bne.n	8004c30 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e01b      	b.n	8004c68 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0201 	orr.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 fb73 	bl	800534c <UART_CheckIdleState>
 8004c66:	4603      	mov	r3, r0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c74:	b08c      	sub	sp, #48	@ 0x30
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	4bab      	ldr	r3, [pc, #684]	@ (8004f4c <UART_SetConfig+0x2dc>)
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	6812      	ldr	r2, [r2, #0]
 8004ca6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	68da      	ldr	r2, [r3, #12]
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4aa0      	ldr	r2, [pc, #640]	@ (8004f50 <UART_SetConfig+0x2e0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d004      	beq.n	8004cdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004ce6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	6812      	ldr	r2, [r2, #0]
 8004cee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cf0:	430b      	orrs	r3, r1
 8004cf2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfa:	f023 010f 	bic.w	r1, r3, #15
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a91      	ldr	r2, [pc, #580]	@ (8004f54 <UART_SetConfig+0x2e4>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d125      	bne.n	8004d60 <UART_SetConfig+0xf0>
 8004d14:	4b90      	ldr	r3, [pc, #576]	@ (8004f58 <UART_SetConfig+0x2e8>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d81a      	bhi.n	8004d58 <UART_SetConfig+0xe8>
 8004d22:	a201      	add	r2, pc, #4	@ (adr r2, 8004d28 <UART_SetConfig+0xb8>)
 8004d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d28:	08004d39 	.word	0x08004d39
 8004d2c:	08004d49 	.word	0x08004d49
 8004d30:	08004d41 	.word	0x08004d41
 8004d34:	08004d51 	.word	0x08004d51
 8004d38:	2301      	movs	r3, #1
 8004d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d3e:	e0d6      	b.n	8004eee <UART_SetConfig+0x27e>
 8004d40:	2302      	movs	r3, #2
 8004d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d46:	e0d2      	b.n	8004eee <UART_SetConfig+0x27e>
 8004d48:	2304      	movs	r3, #4
 8004d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d4e:	e0ce      	b.n	8004eee <UART_SetConfig+0x27e>
 8004d50:	2308      	movs	r3, #8
 8004d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d56:	e0ca      	b.n	8004eee <UART_SetConfig+0x27e>
 8004d58:	2310      	movs	r3, #16
 8004d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d5e:	e0c6      	b.n	8004eee <UART_SetConfig+0x27e>
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a7d      	ldr	r2, [pc, #500]	@ (8004f5c <UART_SetConfig+0x2ec>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d138      	bne.n	8004ddc <UART_SetConfig+0x16c>
 8004d6a:	4b7b      	ldr	r3, [pc, #492]	@ (8004f58 <UART_SetConfig+0x2e8>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d70:	f003 030c 	and.w	r3, r3, #12
 8004d74:	2b0c      	cmp	r3, #12
 8004d76:	d82d      	bhi.n	8004dd4 <UART_SetConfig+0x164>
 8004d78:	a201      	add	r2, pc, #4	@ (adr r2, 8004d80 <UART_SetConfig+0x110>)
 8004d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7e:	bf00      	nop
 8004d80:	08004db5 	.word	0x08004db5
 8004d84:	08004dd5 	.word	0x08004dd5
 8004d88:	08004dd5 	.word	0x08004dd5
 8004d8c:	08004dd5 	.word	0x08004dd5
 8004d90:	08004dc5 	.word	0x08004dc5
 8004d94:	08004dd5 	.word	0x08004dd5
 8004d98:	08004dd5 	.word	0x08004dd5
 8004d9c:	08004dd5 	.word	0x08004dd5
 8004da0:	08004dbd 	.word	0x08004dbd
 8004da4:	08004dd5 	.word	0x08004dd5
 8004da8:	08004dd5 	.word	0x08004dd5
 8004dac:	08004dd5 	.word	0x08004dd5
 8004db0:	08004dcd 	.word	0x08004dcd
 8004db4:	2300      	movs	r3, #0
 8004db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dba:	e098      	b.n	8004eee <UART_SetConfig+0x27e>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dc2:	e094      	b.n	8004eee <UART_SetConfig+0x27e>
 8004dc4:	2304      	movs	r3, #4
 8004dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dca:	e090      	b.n	8004eee <UART_SetConfig+0x27e>
 8004dcc:	2308      	movs	r3, #8
 8004dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dd2:	e08c      	b.n	8004eee <UART_SetConfig+0x27e>
 8004dd4:	2310      	movs	r3, #16
 8004dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dda:	e088      	b.n	8004eee <UART_SetConfig+0x27e>
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a5f      	ldr	r2, [pc, #380]	@ (8004f60 <UART_SetConfig+0x2f0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d125      	bne.n	8004e32 <UART_SetConfig+0x1c2>
 8004de6:	4b5c      	ldr	r3, [pc, #368]	@ (8004f58 <UART_SetConfig+0x2e8>)
 8004de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004df0:	2b30      	cmp	r3, #48	@ 0x30
 8004df2:	d016      	beq.n	8004e22 <UART_SetConfig+0x1b2>
 8004df4:	2b30      	cmp	r3, #48	@ 0x30
 8004df6:	d818      	bhi.n	8004e2a <UART_SetConfig+0x1ba>
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d00a      	beq.n	8004e12 <UART_SetConfig+0x1a2>
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	d814      	bhi.n	8004e2a <UART_SetConfig+0x1ba>
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <UART_SetConfig+0x19a>
 8004e04:	2b10      	cmp	r3, #16
 8004e06:	d008      	beq.n	8004e1a <UART_SetConfig+0x1aa>
 8004e08:	e00f      	b.n	8004e2a <UART_SetConfig+0x1ba>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e10:	e06d      	b.n	8004eee <UART_SetConfig+0x27e>
 8004e12:	2302      	movs	r3, #2
 8004e14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e18:	e069      	b.n	8004eee <UART_SetConfig+0x27e>
 8004e1a:	2304      	movs	r3, #4
 8004e1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e20:	e065      	b.n	8004eee <UART_SetConfig+0x27e>
 8004e22:	2308      	movs	r3, #8
 8004e24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e28:	e061      	b.n	8004eee <UART_SetConfig+0x27e>
 8004e2a:	2310      	movs	r3, #16
 8004e2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e30:	e05d      	b.n	8004eee <UART_SetConfig+0x27e>
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a4b      	ldr	r2, [pc, #300]	@ (8004f64 <UART_SetConfig+0x2f4>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d125      	bne.n	8004e88 <UART_SetConfig+0x218>
 8004e3c:	4b46      	ldr	r3, [pc, #280]	@ (8004f58 <UART_SetConfig+0x2e8>)
 8004e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e42:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004e46:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e48:	d016      	beq.n	8004e78 <UART_SetConfig+0x208>
 8004e4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e4c:	d818      	bhi.n	8004e80 <UART_SetConfig+0x210>
 8004e4e:	2b80      	cmp	r3, #128	@ 0x80
 8004e50:	d00a      	beq.n	8004e68 <UART_SetConfig+0x1f8>
 8004e52:	2b80      	cmp	r3, #128	@ 0x80
 8004e54:	d814      	bhi.n	8004e80 <UART_SetConfig+0x210>
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <UART_SetConfig+0x1f0>
 8004e5a:	2b40      	cmp	r3, #64	@ 0x40
 8004e5c:	d008      	beq.n	8004e70 <UART_SetConfig+0x200>
 8004e5e:	e00f      	b.n	8004e80 <UART_SetConfig+0x210>
 8004e60:	2300      	movs	r3, #0
 8004e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e66:	e042      	b.n	8004eee <UART_SetConfig+0x27e>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e6e:	e03e      	b.n	8004eee <UART_SetConfig+0x27e>
 8004e70:	2304      	movs	r3, #4
 8004e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e76:	e03a      	b.n	8004eee <UART_SetConfig+0x27e>
 8004e78:	2308      	movs	r3, #8
 8004e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e7e:	e036      	b.n	8004eee <UART_SetConfig+0x27e>
 8004e80:	2310      	movs	r3, #16
 8004e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e86:	e032      	b.n	8004eee <UART_SetConfig+0x27e>
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a30      	ldr	r2, [pc, #192]	@ (8004f50 <UART_SetConfig+0x2e0>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d12a      	bne.n	8004ee8 <UART_SetConfig+0x278>
 8004e92:	4b31      	ldr	r3, [pc, #196]	@ (8004f58 <UART_SetConfig+0x2e8>)
 8004e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e98:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004e9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ea0:	d01a      	beq.n	8004ed8 <UART_SetConfig+0x268>
 8004ea2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ea6:	d81b      	bhi.n	8004ee0 <UART_SetConfig+0x270>
 8004ea8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004eac:	d00c      	beq.n	8004ec8 <UART_SetConfig+0x258>
 8004eae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004eb2:	d815      	bhi.n	8004ee0 <UART_SetConfig+0x270>
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <UART_SetConfig+0x250>
 8004eb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ebc:	d008      	beq.n	8004ed0 <UART_SetConfig+0x260>
 8004ebe:	e00f      	b.n	8004ee0 <UART_SetConfig+0x270>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ec6:	e012      	b.n	8004eee <UART_SetConfig+0x27e>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ece:	e00e      	b.n	8004eee <UART_SetConfig+0x27e>
 8004ed0:	2304      	movs	r3, #4
 8004ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ed6:	e00a      	b.n	8004eee <UART_SetConfig+0x27e>
 8004ed8:	2308      	movs	r3, #8
 8004eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ede:	e006      	b.n	8004eee <UART_SetConfig+0x27e>
 8004ee0:	2310      	movs	r3, #16
 8004ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ee6:	e002      	b.n	8004eee <UART_SetConfig+0x27e>
 8004ee8:	2310      	movs	r3, #16
 8004eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a17      	ldr	r2, [pc, #92]	@ (8004f50 <UART_SetConfig+0x2e0>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	f040 80a8 	bne.w	800504a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004efa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004efe:	2b08      	cmp	r3, #8
 8004f00:	d834      	bhi.n	8004f6c <UART_SetConfig+0x2fc>
 8004f02:	a201      	add	r2, pc, #4	@ (adr r2, 8004f08 <UART_SetConfig+0x298>)
 8004f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f08:	08004f2d 	.word	0x08004f2d
 8004f0c:	08004f6d 	.word	0x08004f6d
 8004f10:	08004f35 	.word	0x08004f35
 8004f14:	08004f6d 	.word	0x08004f6d
 8004f18:	08004f3b 	.word	0x08004f3b
 8004f1c:	08004f6d 	.word	0x08004f6d
 8004f20:	08004f6d 	.word	0x08004f6d
 8004f24:	08004f6d 	.word	0x08004f6d
 8004f28:	08004f43 	.word	0x08004f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f2c:	f7fe fb40 	bl	80035b0 <HAL_RCC_GetPCLK1Freq>
 8004f30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f32:	e021      	b.n	8004f78 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f34:	4b0c      	ldr	r3, [pc, #48]	@ (8004f68 <UART_SetConfig+0x2f8>)
 8004f36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f38:	e01e      	b.n	8004f78 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f3a:	f7fe facb 	bl	80034d4 <HAL_RCC_GetSysClockFreq>
 8004f3e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f40:	e01a      	b.n	8004f78 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f48:	e016      	b.n	8004f78 <UART_SetConfig+0x308>
 8004f4a:	bf00      	nop
 8004f4c:	cfff69f3 	.word	0xcfff69f3
 8004f50:	40008000 	.word	0x40008000
 8004f54:	40013800 	.word	0x40013800
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	40004400 	.word	0x40004400
 8004f60:	40004800 	.word	0x40004800
 8004f64:	40004c00 	.word	0x40004c00
 8004f68:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f76:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 812a 	beq.w	80051d4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f84:	4a9e      	ldr	r2, [pc, #632]	@ (8005200 <UART_SetConfig+0x590>)
 8004f86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f92:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	4413      	add	r3, r2
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d305      	bcc.n	8004fb0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d903      	bls.n	8004fb8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004fb6:	e10d      	b.n	80051d4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fba:	2200      	movs	r2, #0
 8004fbc:	60bb      	str	r3, [r7, #8]
 8004fbe:	60fa      	str	r2, [r7, #12]
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc4:	4a8e      	ldr	r2, [pc, #568]	@ (8005200 <UART_SetConfig+0x590>)
 8004fc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	2200      	movs	r2, #0
 8004fce:	603b      	str	r3, [r7, #0]
 8004fd0:	607a      	str	r2, [r7, #4]
 8004fd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fda:	f7fb f91d 	bl	8000218 <__aeabi_uldivmod>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	f04f 0200 	mov.w	r2, #0
 8004fea:	f04f 0300 	mov.w	r3, #0
 8004fee:	020b      	lsls	r3, r1, #8
 8004ff0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ff4:	0202      	lsls	r2, r0, #8
 8004ff6:	6979      	ldr	r1, [r7, #20]
 8004ff8:	6849      	ldr	r1, [r1, #4]
 8004ffa:	0849      	lsrs	r1, r1, #1
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	460c      	mov	r4, r1
 8005000:	4605      	mov	r5, r0
 8005002:	eb12 0804 	adds.w	r8, r2, r4
 8005006:	eb43 0905 	adc.w	r9, r3, r5
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	469a      	mov	sl, r3
 8005012:	4693      	mov	fp, r2
 8005014:	4652      	mov	r2, sl
 8005016:	465b      	mov	r3, fp
 8005018:	4640      	mov	r0, r8
 800501a:	4649      	mov	r1, r9
 800501c:	f7fb f8fc 	bl	8000218 <__aeabi_uldivmod>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4613      	mov	r3, r2
 8005026:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800502e:	d308      	bcc.n	8005042 <UART_SetConfig+0x3d2>
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005036:	d204      	bcs.n	8005042 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6a3a      	ldr	r2, [r7, #32]
 800503e:	60da      	str	r2, [r3, #12]
 8005040:	e0c8      	b.n	80051d4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005048:	e0c4      	b.n	80051d4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005052:	d167      	bne.n	8005124 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005054:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005058:	2b08      	cmp	r3, #8
 800505a:	d828      	bhi.n	80050ae <UART_SetConfig+0x43e>
 800505c:	a201      	add	r2, pc, #4	@ (adr r2, 8005064 <UART_SetConfig+0x3f4>)
 800505e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005062:	bf00      	nop
 8005064:	08005089 	.word	0x08005089
 8005068:	08005091 	.word	0x08005091
 800506c:	08005099 	.word	0x08005099
 8005070:	080050af 	.word	0x080050af
 8005074:	0800509f 	.word	0x0800509f
 8005078:	080050af 	.word	0x080050af
 800507c:	080050af 	.word	0x080050af
 8005080:	080050af 	.word	0x080050af
 8005084:	080050a7 	.word	0x080050a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005088:	f7fe fa92 	bl	80035b0 <HAL_RCC_GetPCLK1Freq>
 800508c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800508e:	e014      	b.n	80050ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005090:	f7fe faa4 	bl	80035dc <HAL_RCC_GetPCLK2Freq>
 8005094:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005096:	e010      	b.n	80050ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005098:	4b5a      	ldr	r3, [pc, #360]	@ (8005204 <UART_SetConfig+0x594>)
 800509a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800509c:	e00d      	b.n	80050ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800509e:	f7fe fa19 	bl	80034d4 <HAL_RCC_GetSysClockFreq>
 80050a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050a4:	e009      	b.n	80050ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80050ac:	e005      	b.n	80050ba <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80050ae:	2300      	movs	r3, #0
 80050b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80050b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 8089 	beq.w	80051d4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c6:	4a4e      	ldr	r2, [pc, #312]	@ (8005200 <UART_SetConfig+0x590>)
 80050c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050cc:	461a      	mov	r2, r3
 80050ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80050d4:	005a      	lsls	r2, r3, #1
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	085b      	lsrs	r3, r3, #1
 80050dc:	441a      	add	r2, r3
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	2b0f      	cmp	r3, #15
 80050ec:	d916      	bls.n	800511c <UART_SetConfig+0x4ac>
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050f4:	d212      	bcs.n	800511c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	f023 030f 	bic.w	r3, r3, #15
 80050fe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005100:	6a3b      	ldr	r3, [r7, #32]
 8005102:	085b      	lsrs	r3, r3, #1
 8005104:	b29b      	uxth	r3, r3
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	b29a      	uxth	r2, r3
 800510c:	8bfb      	ldrh	r3, [r7, #30]
 800510e:	4313      	orrs	r3, r2
 8005110:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	8bfa      	ldrh	r2, [r7, #30]
 8005118:	60da      	str	r2, [r3, #12]
 800511a:	e05b      	b.n	80051d4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005122:	e057      	b.n	80051d4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005124:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005128:	2b08      	cmp	r3, #8
 800512a:	d828      	bhi.n	800517e <UART_SetConfig+0x50e>
 800512c:	a201      	add	r2, pc, #4	@ (adr r2, 8005134 <UART_SetConfig+0x4c4>)
 800512e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005132:	bf00      	nop
 8005134:	08005159 	.word	0x08005159
 8005138:	08005161 	.word	0x08005161
 800513c:	08005169 	.word	0x08005169
 8005140:	0800517f 	.word	0x0800517f
 8005144:	0800516f 	.word	0x0800516f
 8005148:	0800517f 	.word	0x0800517f
 800514c:	0800517f 	.word	0x0800517f
 8005150:	0800517f 	.word	0x0800517f
 8005154:	08005177 	.word	0x08005177
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005158:	f7fe fa2a 	bl	80035b0 <HAL_RCC_GetPCLK1Freq>
 800515c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800515e:	e014      	b.n	800518a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005160:	f7fe fa3c 	bl	80035dc <HAL_RCC_GetPCLK2Freq>
 8005164:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005166:	e010      	b.n	800518a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005168:	4b26      	ldr	r3, [pc, #152]	@ (8005204 <UART_SetConfig+0x594>)
 800516a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800516c:	e00d      	b.n	800518a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800516e:	f7fe f9b1 	bl	80034d4 <HAL_RCC_GetSysClockFreq>
 8005172:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005174:	e009      	b.n	800518a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800517a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800517c:	e005      	b.n	800518a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800517e:	2300      	movs	r3, #0
 8005180:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005188:	bf00      	nop
    }

    if (pclk != 0U)
 800518a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518c:	2b00      	cmp	r3, #0
 800518e:	d021      	beq.n	80051d4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005194:	4a1a      	ldr	r2, [pc, #104]	@ (8005200 <UART_SetConfig+0x590>)
 8005196:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800519a:	461a      	mov	r2, r3
 800519c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519e:	fbb3 f2f2 	udiv	r2, r3, r2
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	085b      	lsrs	r3, r3, #1
 80051a8:	441a      	add	r2, r3
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	2b0f      	cmp	r3, #15
 80051b8:	d909      	bls.n	80051ce <UART_SetConfig+0x55e>
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051c0:	d205      	bcs.n	80051ce <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60da      	str	r2, [r3, #12]
 80051cc:	e002      	b.n	80051d4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	2201      	movs	r2, #1
 80051e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	2200      	movs	r2, #0
 80051e8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2200      	movs	r2, #0
 80051ee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80051f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3730      	adds	r7, #48	@ 0x30
 80051f8:	46bd      	mov	sp, r7
 80051fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051fe:	bf00      	nop
 8005200:	080058d4 	.word	0x080058d4
 8005204:	00f42400 	.word	0x00f42400

08005208 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005214:	f003 0308 	and.w	r3, r3, #8
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00a      	beq.n	8005232 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00a      	beq.n	8005276 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527a:	f003 0304 	and.w	r3, r3, #4
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529c:	f003 0310 	and.w	r3, r3, #16
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00a      	beq.n	80052ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01a      	beq.n	800531e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005306:	d10a      	bne.n	800531e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	605a      	str	r2, [r3, #4]
  }
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b098      	sub	sp, #96	@ 0x60
 8005350:	af02      	add	r7, sp, #8
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800535c:	f7fc f800 	bl	8001360 <HAL_GetTick>
 8005360:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0308 	and.w	r3, r3, #8
 800536c:	2b08      	cmp	r3, #8
 800536e:	d12f      	bne.n	80053d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005370:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005378:	2200      	movs	r2, #0
 800537a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f88e 	bl	80054a0 <UART_WaitOnFlagUntilTimeout>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d022      	beq.n	80053d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005392:	e853 3f00 	ldrex	r3, [r3]
 8005396:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800539a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800539e:	653b      	str	r3, [r7, #80]	@ 0x50
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	461a      	mov	r2, r3
 80053a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80053aa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053b0:	e841 2300 	strex	r3, r2, [r1]
 80053b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1e6      	bne.n	800538a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2220      	movs	r2, #32
 80053c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e063      	b.n	8005498 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0304 	and.w	r3, r3, #4
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d149      	bne.n	8005472 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053e6:	2200      	movs	r2, #0
 80053e8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f857 	bl	80054a0 <UART_WaitOnFlagUntilTimeout>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d03c      	beq.n	8005472 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005400:	e853 3f00 	ldrex	r3, [r3]
 8005404:	623b      	str	r3, [r7, #32]
   return(result);
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800540c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005416:	633b      	str	r3, [r7, #48]	@ 0x30
 8005418:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800541c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800541e:	e841 2300 	strex	r3, r2, [r1]
 8005422:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1e6      	bne.n	80053f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3308      	adds	r3, #8
 8005430:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	60fb      	str	r3, [r7, #12]
   return(result);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f023 0301 	bic.w	r3, r3, #1
 8005440:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3308      	adds	r3, #8
 8005448:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800544a:	61fa      	str	r2, [r7, #28]
 800544c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544e:	69b9      	ldr	r1, [r7, #24]
 8005450:	69fa      	ldr	r2, [r7, #28]
 8005452:	e841 2300 	strex	r3, r2, [r1]
 8005456:	617b      	str	r3, [r7, #20]
   return(result);
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1e5      	bne.n	800542a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2220      	movs	r2, #32
 8005462:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e012      	b.n	8005498 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2220      	movs	r2, #32
 8005476:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2220      	movs	r2, #32
 800547e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3758      	adds	r7, #88	@ 0x58
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	4613      	mov	r3, r2
 80054ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b0:	e04f      	b.n	8005552 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b8:	d04b      	beq.n	8005552 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ba:	f7fb ff51 	bl	8001360 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d302      	bcc.n	80054d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e04e      	b.n	8005572 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0304 	and.w	r3, r3, #4
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d037      	beq.n	8005552 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b80      	cmp	r3, #128	@ 0x80
 80054e6:	d034      	beq.n	8005552 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b40      	cmp	r3, #64	@ 0x40
 80054ec:	d031      	beq.n	8005552 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	f003 0308 	and.w	r3, r3, #8
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d110      	bne.n	800551e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2208      	movs	r2, #8
 8005502:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 f838 	bl	800557a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2208      	movs	r2, #8
 800550e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e029      	b.n	8005572 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005528:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800552c:	d111      	bne.n	8005552 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005536:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 f81e 	bl	800557a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2220      	movs	r2, #32
 8005542:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e00f      	b.n	8005572 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69da      	ldr	r2, [r3, #28]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	4013      	ands	r3, r2
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	429a      	cmp	r2, r3
 8005560:	bf0c      	ite	eq
 8005562:	2301      	moveq	r3, #1
 8005564:	2300      	movne	r3, #0
 8005566:	b2db      	uxtb	r3, r3
 8005568:	461a      	mov	r2, r3
 800556a:	79fb      	ldrb	r3, [r7, #7]
 800556c:	429a      	cmp	r2, r3
 800556e:	d0a0      	beq.n	80054b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800557a:	b480      	push	{r7}
 800557c:	b095      	sub	sp, #84	@ 0x54
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800558a:	e853 3f00 	ldrex	r3, [r3]
 800558e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005592:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005596:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	461a      	mov	r2, r3
 800559e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80055a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055a8:	e841 2300 	strex	r3, r2, [r1]
 80055ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1e6      	bne.n	8005582 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3308      	adds	r3, #8
 80055ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	e853 3f00 	ldrex	r3, [r3]
 80055c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055ca:	f023 0301 	bic.w	r3, r3, #1
 80055ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3308      	adds	r3, #8
 80055d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055e0:	e841 2300 	strex	r3, r2, [r1]
 80055e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1e3      	bne.n	80055b4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d118      	bne.n	8005626 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	e853 3f00 	ldrex	r3, [r3]
 8005600:	60bb      	str	r3, [r7, #8]
   return(result);
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	f023 0310 	bic.w	r3, r3, #16
 8005608:	647b      	str	r3, [r7, #68]	@ 0x44
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005612:	61bb      	str	r3, [r7, #24]
 8005614:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005616:	6979      	ldr	r1, [r7, #20]
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	e841 2300 	strex	r3, r2, [r1]
 800561e:	613b      	str	r3, [r7, #16]
   return(result);
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1e6      	bne.n	80055f4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2220      	movs	r2, #32
 800562a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800563a:	bf00      	nop
 800563c:	3754      	adds	r7, #84	@ 0x54
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005646:	b480      	push	{r7}
 8005648:	b085      	sub	sp, #20
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_UARTEx_DisableFifoMode+0x16>
 8005658:	2302      	movs	r3, #2
 800565a:	e027      	b.n	80056ac <HAL_UARTEx_DisableFifoMode+0x66>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2224      	movs	r2, #36	@ 0x24
 8005668:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0201 	bic.w	r2, r2, #1
 8005682:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800568a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2220      	movs	r2, #32
 800569e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d101      	bne.n	80056d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e02d      	b.n	800572c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2224      	movs	r2, #36	@ 0x24
 80056dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0201 	bic.w	r2, r2, #1
 80056f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f84f 	bl	80057b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2220      	movs	r2, #32
 800571e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005744:	2b01      	cmp	r3, #1
 8005746:	d101      	bne.n	800574c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005748:	2302      	movs	r3, #2
 800574a:	e02d      	b.n	80057a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2224      	movs	r2, #36	@ 0x24
 8005758:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0201 	bic.w	r2, r2, #1
 8005772:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f811 	bl	80057b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2220      	movs	r2, #32
 800579a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d108      	bne.n	80057d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80057d0:	e031      	b.n	8005836 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80057d2:	2308      	movs	r3, #8
 80057d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80057d6:	2308      	movs	r3, #8
 80057d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	0e5b      	lsrs	r3, r3, #25
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	f003 0307 	and.w	r3, r3, #7
 80057e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	0f5b      	lsrs	r3, r3, #29
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057fa:	7bbb      	ldrb	r3, [r7, #14]
 80057fc:	7b3a      	ldrb	r2, [r7, #12]
 80057fe:	4911      	ldr	r1, [pc, #68]	@ (8005844 <UARTEx_SetNbDataToProcess+0x94>)
 8005800:	5c8a      	ldrb	r2, [r1, r2]
 8005802:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005806:	7b3a      	ldrb	r2, [r7, #12]
 8005808:	490f      	ldr	r1, [pc, #60]	@ (8005848 <UARTEx_SetNbDataToProcess+0x98>)
 800580a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800580c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005810:	b29a      	uxth	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005818:	7bfb      	ldrb	r3, [r7, #15]
 800581a:	7b7a      	ldrb	r2, [r7, #13]
 800581c:	4909      	ldr	r1, [pc, #36]	@ (8005844 <UARTEx_SetNbDataToProcess+0x94>)
 800581e:	5c8a      	ldrb	r2, [r1, r2]
 8005820:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005824:	7b7a      	ldrb	r2, [r7, #13]
 8005826:	4908      	ldr	r1, [pc, #32]	@ (8005848 <UARTEx_SetNbDataToProcess+0x98>)
 8005828:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800582a:	fb93 f3f2 	sdiv	r3, r3, r2
 800582e:	b29a      	uxth	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005836:	bf00      	nop
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	080058ec 	.word	0x080058ec
 8005848:	080058f4 	.word	0x080058f4

0800584c <memset>:
 800584c:	4402      	add	r2, r0
 800584e:	4603      	mov	r3, r0
 8005850:	4293      	cmp	r3, r2
 8005852:	d100      	bne.n	8005856 <memset+0xa>
 8005854:	4770      	bx	lr
 8005856:	f803 1b01 	strb.w	r1, [r3], #1
 800585a:	e7f9      	b.n	8005850 <memset+0x4>

0800585c <__libc_init_array>:
 800585c:	b570      	push	{r4, r5, r6, lr}
 800585e:	4d0d      	ldr	r5, [pc, #52]	@ (8005894 <__libc_init_array+0x38>)
 8005860:	4c0d      	ldr	r4, [pc, #52]	@ (8005898 <__libc_init_array+0x3c>)
 8005862:	1b64      	subs	r4, r4, r5
 8005864:	10a4      	asrs	r4, r4, #2
 8005866:	2600      	movs	r6, #0
 8005868:	42a6      	cmp	r6, r4
 800586a:	d109      	bne.n	8005880 <__libc_init_array+0x24>
 800586c:	4d0b      	ldr	r5, [pc, #44]	@ (800589c <__libc_init_array+0x40>)
 800586e:	4c0c      	ldr	r4, [pc, #48]	@ (80058a0 <__libc_init_array+0x44>)
 8005870:	f000 f818 	bl	80058a4 <_init>
 8005874:	1b64      	subs	r4, r4, r5
 8005876:	10a4      	asrs	r4, r4, #2
 8005878:	2600      	movs	r6, #0
 800587a:	42a6      	cmp	r6, r4
 800587c:	d105      	bne.n	800588a <__libc_init_array+0x2e>
 800587e:	bd70      	pop	{r4, r5, r6, pc}
 8005880:	f855 3b04 	ldr.w	r3, [r5], #4
 8005884:	4798      	blx	r3
 8005886:	3601      	adds	r6, #1
 8005888:	e7ee      	b.n	8005868 <__libc_init_array+0xc>
 800588a:	f855 3b04 	ldr.w	r3, [r5], #4
 800588e:	4798      	blx	r3
 8005890:	3601      	adds	r6, #1
 8005892:	e7f2      	b.n	800587a <__libc_init_array+0x1e>
 8005894:	08005904 	.word	0x08005904
 8005898:	08005904 	.word	0x08005904
 800589c:	08005904 	.word	0x08005904
 80058a0:	08005908 	.word	0x08005908

080058a4 <_init>:
 80058a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a6:	bf00      	nop
 80058a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058aa:	bc08      	pop	{r3}
 80058ac:	469e      	mov	lr, r3
 80058ae:	4770      	bx	lr

080058b0 <_fini>:
 80058b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b2:	bf00      	nop
 80058b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b6:	bc08      	pop	{r3}
 80058b8:	469e      	mov	lr, r3
 80058ba:	4770      	bx	lr
