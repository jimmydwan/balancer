
focTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001123c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  08011420  08011420  00012420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080119a0  080119a0  00013258  2**0
                  CONTENTS
  4 .ARM          00000008  080119a0  080119a0  000129a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080119a8  080119a8  00013258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080119a8  080119a8  000129a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080119ac  080119ac  000129ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000258  20000000  080119b0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007ec  20000258  08011c08  00013258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a44  08011c08  00013a44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013258  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027060  00000000  00000000  00013288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005bac  00000000  00000000  0003a2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f68  00000000  00000000  0003fe98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001811  00000000  00000000  00041e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027fdf  00000000  00000000  00043611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f2c4  00000000  00000000  0006b5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6814  00000000  00000000  0009a8b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001810c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009714  00000000  00000000  0018110c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0018a820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000258 	.word	0x20000258
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011404 	.word	0x08011404

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000025c 	.word	0x2000025c
 800021c:	08011404 	.word	0x08011404

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09a      	sub	sp, #104	@ 0x68
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800104a:	2220      	movs	r2, #32
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00d fad2 	bl	800e5f8 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	223c      	movs	r2, #60	@ 0x3c
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f00d facc 	bl	800e5f8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001060:	4b4d      	ldr	r3, [pc, #308]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001062:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001068:	4b4b      	ldr	r3, [pc, #300]	@ (8001198 <MX_ADC1_Init+0x164>)
 800106a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800106e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001070:	4b49      	ldr	r3, [pc, #292]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b48      	ldr	r3, [pc, #288]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800107c:	4b46      	ldr	r3, [pc, #280]	@ (8001198 <MX_ADC1_Init+0x164>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001082:	4b45      	ldr	r3, [pc, #276]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001084:	2201      	movs	r2, #1
 8001086:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001088:	4b43      	ldr	r3, [pc, #268]	@ (8001198 <MX_ADC1_Init+0x164>)
 800108a:	2204      	movs	r2, #4
 800108c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800108e:	4b42      	ldr	r3, [pc, #264]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001090:	2200      	movs	r2, #0
 8001092:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001094:	4b40      	ldr	r3, [pc, #256]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001096:	2200      	movs	r2, #0
 8001098:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800109a:	4b3f      	ldr	r3, [pc, #252]	@ (8001198 <MX_ADC1_Init+0x164>)
 800109c:	2201      	movs	r2, #1
 800109e:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b4:	4b38      	ldr	r3, [pc, #224]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010bc:	4b36      	ldr	r3, [pc, #216]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010be:	2200      	movs	r2, #0
 80010c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c2:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ca:	4833      	ldr	r0, [pc, #204]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010cc:	f001 fcd8 	bl	8002a80 <HAL_ADC_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010d6:	f000 fc16 	bl	8001906 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010da:	2300      	movs	r3, #0
 80010dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010e2:	4619      	mov	r1, r3
 80010e4:	482c      	ldr	r0, [pc, #176]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010e6:	f003 fe01 	bl	8004cec <HAL_ADCEx_MultiModeConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80010f0:	f000 fc09 	bl	8001906 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010f4:	4b29      	ldr	r3, [pc, #164]	@ (800119c <MX_ADC1_Init+0x168>)
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f8:	2306      	movs	r3, #6
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010fc:	2300      	movs	r3, #0
 80010fe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001100:	237f      	movs	r3, #127	@ 0x7f
 8001102:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001104:	2304      	movs	r3, #4
 8001106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.Offset = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001110:	4619      	mov	r1, r3
 8001112:	4821      	ldr	r0, [pc, #132]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001114:	f002 f870 	bl	80031f8 <HAL_ADC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800111e:	f000 fbf2 	bl	8001906 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8001122:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <MX_ADC1_Init+0x16c>)
 8001124:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001126:	2309      	movs	r3, #9
 8001128:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800112a:	2301      	movs	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800112e:	237f      	movs	r3, #127	@ 0x7f
 8001130:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001132:	2304      	movs	r3, #4
 8001134:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800113a:	2302      	movs	r3, #2
 800113c:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T8_CC4;
 8001150:	239c      	movs	r3, #156	@ 0x9c
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001164:	f003 f8e2 	bl	800432c <HAL_ADCEx_InjectedConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 800116e:	f000 fbca 	bl	8001906 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8001172:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <MX_ADC1_Init+0x168>)
 8001174:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001176:	f240 130f 	movw	r3, #271	@ 0x10f
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001182:	f003 f8d3 	bl	800432c <HAL_ADCEx_InjectedConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 800118c:	f000 fbbb 	bl	8001906 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3768      	adds	r7, #104	@ 0x68
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000274 	.word	0x20000274
 800119c:	2e300800 	.word	0x2e300800
 80011a0:	14f00020 	.word	0x14f00020

080011a4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b090      	sub	sp, #64	@ 0x40
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	223c      	movs	r2, #60	@ 0x3c
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f00d fa21 	bl	800e5f8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011b6:	4b38      	ldr	r3, [pc, #224]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011b8:	4a38      	ldr	r2, [pc, #224]	@ (800129c <MX_ADC2_Init+0xf8>)
 80011ba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80011bc:	4b36      	ldr	r3, [pc, #216]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011be:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011c2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011c4:	4b34      	ldr	r3, [pc, #208]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ca:	4b33      	ldr	r3, [pc, #204]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80011d0:	4b31      	ldr	r3, [pc, #196]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011d6:	4b30      	ldr	r3, [pc, #192]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011d8:	2201      	movs	r2, #1
 80011da:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011de:	2204      	movs	r2, #4
 80011e0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80011e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80011ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011f4:	4b28      	ldr	r3, [pc, #160]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011fc:	4b26      	ldr	r3, [pc, #152]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001204:	4b24      	ldr	r3, [pc, #144]	@ (8001298 <MX_ADC2_Init+0xf4>)
 8001206:	2200      	movs	r2, #0
 8001208:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800120a:	4b23      	ldr	r3, [pc, #140]	@ (8001298 <MX_ADC2_Init+0xf4>)
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001212:	4821      	ldr	r0, [pc, #132]	@ (8001298 <MX_ADC2_Init+0xf4>)
 8001214:	f001 fc34 	bl	8002a80 <HAL_ADC_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800121e:	f000 fb72 	bl	8001906 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 8001222:	4b1f      	ldr	r3, [pc, #124]	@ (80012a0 <MX_ADC2_Init+0xfc>)
 8001224:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001226:	2309      	movs	r3, #9
 8001228:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800122a:	2301      	movs	r3, #1
 800122c:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800122e:	237f      	movs	r3, #127	@ 0x7f
 8001230:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001232:	2304      	movs	r3, #4
 8001234:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800123a:	2302      	movs	r3, #2
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T8_CC4;
 8001250:	239c      	movs	r3, #156	@ 0x9c
 8001252:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001254:	2380      	movs	r3, #128	@ 0x80
 8001256:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	4619      	mov	r1, r3
 8001262:	480d      	ldr	r0, [pc, #52]	@ (8001298 <MX_ADC2_Init+0xf4>)
 8001264:	f003 f862 	bl	800432c <HAL_ADCEx_InjectedConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 800126e:	f000 fb4a 	bl	8001906 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8001272:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <MX_ADC2_Init+0x100>)
 8001274:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001276:	f240 130f 	movw	r3, #271	@ 0x10f
 800127a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	4619      	mov	r1, r3
 8001280:	4805      	ldr	r0, [pc, #20]	@ (8001298 <MX_ADC2_Init+0xf4>)
 8001282:	f003 f853 	bl	800432c <HAL_ADCEx_InjectedConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_ADC2_Init+0xec>
  {
    Error_Handler();
 800128c:	f000 fb3b 	bl	8001906 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	3740      	adds	r7, #64	@ 0x40
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200002e0 	.word	0x200002e0
 800129c:	50000100 	.word	0x50000100
 80012a0:	3ef08000 	.word	0x3ef08000
 80012a4:	32601000 	.word	0x32601000

080012a8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b09c      	sub	sp, #112	@ 0x70
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c0:	f107 0318 	add.w	r3, r7, #24
 80012c4:	2244      	movs	r2, #68	@ 0x44
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f00d f995 	bl	800e5f8 <memset>
  if(adcHandle->Instance==ADC1)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012d6:	d146      	bne.n	8001366 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012de:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80012e2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e4:	f107 0318 	add.w	r3, r7, #24
 80012e8:	4618      	mov	r0, r3
 80012ea:	f005 fc85 	bl	8006bf8 <HAL_RCCEx_PeriphCLKConfig>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80012f4:	f000 fb07 	bl	8001906 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012f8:	4b42      	ldr	r3, [pc, #264]	@ (8001404 <HAL_ADC_MspInit+0x15c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	4a41      	ldr	r2, [pc, #260]	@ (8001404 <HAL_ADC_MspInit+0x15c>)
 8001300:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001302:	4b40      	ldr	r3, [pc, #256]	@ (8001404 <HAL_ADC_MspInit+0x15c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d10b      	bne.n	8001322 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800130a:	4b3f      	ldr	r3, [pc, #252]	@ (8001408 <HAL_ADC_MspInit+0x160>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130e:	4a3e      	ldr	r2, [pc, #248]	@ (8001408 <HAL_ADC_MspInit+0x160>)
 8001310:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001314:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001316:	4b3c      	ldr	r3, [pc, #240]	@ (8001408 <HAL_ADC_MspInit+0x160>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001322:	4b39      	ldr	r3, [pc, #228]	@ (8001408 <HAL_ADC_MspInit+0x160>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001326:	4a38      	ldr	r2, [pc, #224]	@ (8001408 <HAL_ADC_MspInit+0x160>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800132e:	4b36      	ldr	r3, [pc, #216]	@ (8001408 <HAL_ADC_MspInit+0x160>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800133a:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800133e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001340:	2303      	movs	r3, #3
 8001342:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800134c:	4619      	mov	r1, r3
 800134e:	482f      	ldr	r0, [pc, #188]	@ (800140c <HAL_ADC_MspInit+0x164>)
 8001350:	f004 fb8c 	bl	8005a6c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001354:	2200      	movs	r2, #0
 8001356:	2100      	movs	r1, #0
 8001358:	2012      	movs	r0, #18
 800135a:	f003 fe46 	bl	8004fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800135e:	2012      	movs	r0, #18
 8001360:	f003 fe5d 	bl	800501e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001364:	e04a      	b.n	80013fc <HAL_ADC_MspInit+0x154>
  else if(adcHandle->Instance==ADC2)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a29      	ldr	r2, [pc, #164]	@ (8001410 <HAL_ADC_MspInit+0x168>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d145      	bne.n	80013fc <HAL_ADC_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001370:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001374:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001376:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800137a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800137c:	f107 0318 	add.w	r3, r7, #24
 8001380:	4618      	mov	r0, r3
 8001382:	f005 fc39 	bl	8006bf8 <HAL_RCCEx_PeriphCLKConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <HAL_ADC_MspInit+0xe8>
      Error_Handler();
 800138c:	f000 fabb 	bl	8001906 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001390:	4b1c      	ldr	r3, [pc, #112]	@ (8001404 <HAL_ADC_MspInit+0x15c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	3301      	adds	r3, #1
 8001396:	4a1b      	ldr	r2, [pc, #108]	@ (8001404 <HAL_ADC_MspInit+0x15c>)
 8001398:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800139a:	4b1a      	ldr	r3, [pc, #104]	@ (8001404 <HAL_ADC_MspInit+0x15c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d10b      	bne.n	80013ba <HAL_ADC_MspInit+0x112>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013a2:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <HAL_ADC_MspInit+0x160>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a6:	4a18      	ldr	r2, [pc, #96]	@ (8001408 <HAL_ADC_MspInit+0x160>)
 80013a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ae:	4b16      	ldr	r3, [pc, #88]	@ (8001408 <HAL_ADC_MspInit+0x160>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <HAL_ADC_MspInit+0x160>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013be:	4a12      	ldr	r2, [pc, #72]	@ (8001408 <HAL_ADC_MspInit+0x160>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c6:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <HAL_ADC_MspInit+0x160>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80013d2:	f248 0304 	movw	r3, #32772	@ 0x8004
 80013d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d8:	2303      	movs	r3, #3
 80013da:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80013e4:	4619      	mov	r1, r3
 80013e6:	4809      	ldr	r0, [pc, #36]	@ (800140c <HAL_ADC_MspInit+0x164>)
 80013e8:	f004 fb40 	bl	8005a6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2100      	movs	r1, #0
 80013f0:	2012      	movs	r0, #18
 80013f2:	f003 fdfa 	bl	8004fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80013f6:	2012      	movs	r0, #18
 80013f8:	f003 fe11 	bl	800501e <HAL_NVIC_EnableIRQ>
}
 80013fc:	bf00      	nop
 80013fe:	3770      	adds	r7, #112	@ 0x70
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	2000034c 	.word	0x2000034c
 8001408:	40021000 	.word	0x40021000
 800140c:	48000400 	.word	0x48000400
 8001410:	50000100 	.word	0x50000100

08001414 <MX_DAC3_Init>:

DAC_HandleTypeDef hdac3;

/* DAC3 init function */
void MX_DAC3_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08c      	sub	sp, #48	@ 0x30
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800141a:	463b      	mov	r3, r7
 800141c:	2230      	movs	r2, #48	@ 0x30
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f00d f8e9 	bl	800e5f8 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8001426:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <MX_DAC3_Init+0x6c>)
 8001428:	4a16      	ldr	r2, [pc, #88]	@ (8001484 <MX_DAC3_Init+0x70>)
 800142a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 800142c:	4814      	ldr	r0, [pc, #80]	@ (8001480 <MX_DAC3_Init+0x6c>)
 800142e:	f003 fe10 	bl	8005052 <HAL_DAC_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8001438:	f000 fa65 	bl	8001906 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800143c:	2302      	movs	r3, #2
 800143e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001454:	2302      	movs	r3, #2
 8001456:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001458:	2302      	movs	r3, #2
 800145a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001460:	463b      	mov	r3, r7
 8001462:	2200      	movs	r2, #0
 8001464:	4619      	mov	r1, r3
 8001466:	4806      	ldr	r0, [pc, #24]	@ (8001480 <MX_DAC3_Init+0x6c>)
 8001468:	f003 fe16 	bl	8005098 <HAL_DAC_ConfigChannel>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8001472:	f000 fa48 	bl	8001906 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	3730      	adds	r7, #48	@ 0x30
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000350 	.word	0x20000350
 8001484:	50001000 	.word	0x50001000

08001488 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC3)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a0a      	ldr	r2, [pc, #40]	@ (80014c0 <HAL_DAC_MspInit+0x38>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d10b      	bne.n	80014b2 <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* DAC3 clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 800149a:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <HAL_DAC_MspInit+0x3c>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	4a09      	ldr	r2, [pc, #36]	@ (80014c4 <HAL_DAC_MspInit+0x3c>)
 80014a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a6:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <HAL_DAC_MspInit+0x3c>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }
}
 80014b2:	bf00      	nop
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	50001000 	.word	0x50001000
 80014c4:	40021000 	.word	0x40021000

080014c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80014ce:	4b16      	ldr	r3, [pc, #88]	@ (8001528 <MX_DMA_Init+0x60>)
 80014d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014d2:	4a15      	ldr	r2, [pc, #84]	@ (8001528 <MX_DMA_Init+0x60>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80014da:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <MX_DMA_Init+0x60>)
 80014dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014e6:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <MX_DMA_Init+0x60>)
 80014e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001528 <MX_DMA_Init+0x60>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6493      	str	r3, [r2, #72]	@ 0x48
 80014f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <MX_DMA_Init+0x60>)
 80014f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2101      	movs	r1, #1
 8001502:	200b      	movs	r0, #11
 8001504:	f003 fd71 	bl	8004fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001508:	200b      	movs	r0, #11
 800150a:	f003 fd88 	bl	800501e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 1, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2101      	movs	r1, #1
 8001512:	200c      	movs	r0, #12
 8001514:	f003 fd69 	bl	8004fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001518:	200c      	movs	r0, #12
 800151a:	f003 fd80 	bl	800501e <HAL_NVIC_EnableIRQ>

}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000

0800152c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	@ 0x28
 8001530:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001542:	4b3f      	ldr	r3, [pc, #252]	@ (8001640 <MX_GPIO_Init+0x114>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001546:	4a3e      	ldr	r2, [pc, #248]	@ (8001640 <MX_GPIO_Init+0x114>)
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800154e:	4b3c      	ldr	r3, [pc, #240]	@ (8001640 <MX_GPIO_Init+0x114>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800155a:	4b39      	ldr	r3, [pc, #228]	@ (8001640 <MX_GPIO_Init+0x114>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155e:	4a38      	ldr	r2, [pc, #224]	@ (8001640 <MX_GPIO_Init+0x114>)
 8001560:	f043 0320 	orr.w	r3, r3, #32
 8001564:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001566:	4b36      	ldr	r3, [pc, #216]	@ (8001640 <MX_GPIO_Init+0x114>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156a:	f003 0320 	and.w	r3, r3, #32
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	4b33      	ldr	r3, [pc, #204]	@ (8001640 <MX_GPIO_Init+0x114>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001576:	4a32      	ldr	r2, [pc, #200]	@ (8001640 <MX_GPIO_Init+0x114>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157e:	4b30      	ldr	r3, [pc, #192]	@ (8001640 <MX_GPIO_Init+0x114>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158a:	4b2d      	ldr	r3, [pc, #180]	@ (8001640 <MX_GPIO_Init+0x114>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158e:	4a2c      	ldr	r2, [pc, #176]	@ (8001640 <MX_GPIO_Init+0x114>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001596:	4b2a      	ldr	r3, [pc, #168]	@ (8001640 <MX_GPIO_Init+0x114>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|TEST_Pin, GPIO_PIN_SET);
 80015a2:	2201      	movs	r2, #1
 80015a4:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 80015a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ac:	f004 fbf8 	bl	8005da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80015b0:	2201      	movs	r2, #1
 80015b2:	2101      	movs	r1, #1
 80015b4:	4823      	ldr	r0, [pc, #140]	@ (8001644 <MX_GPIO_Init+0x118>)
 80015b6:	f004 fbf3 	bl	8005da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS1_GPIO_Port, NSS1_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2108      	movs	r1, #8
 80015be:	4821      	ldr	r0, [pc, #132]	@ (8001644 <MX_GPIO_Init+0x118>)
 80015c0:	f004 fbee 	bl	8005da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	481b      	ldr	r0, [pc, #108]	@ (8001648 <MX_GPIO_Init+0x11c>)
 80015da:	f004 fa47 	bl	8005a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80015de:	2310      	movs	r3, #16
 80015e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e2:	2301      	movs	r3, #1
 80015e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ea:	2303      	movs	r3, #3
 80015ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f8:	f004 fa38 	bl	8005a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|NSS1_Pin;
 80015fc:	2309      	movs	r3, #9
 80015fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001600:	2301      	movs	r3, #1
 8001602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	480c      	ldr	r0, [pc, #48]	@ (8001644 <MX_GPIO_Init+0x118>)
 8001614:	f004 fa2a 	bl	8005a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8001618:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800161c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161e:	2301      	movs	r3, #1
 8001620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001626:	2302      	movs	r3, #2
 8001628:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001634:	f004 fa1a 	bl	8005a6c <HAL_GPIO_Init>

}
 8001638:	bf00      	nop
 800163a:	3728      	adds	r7, #40	@ 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40021000 	.word	0x40021000
 8001644:	48000400 	.word	0x48000400
 8001648:	48000800 	.word	0x48000800

0800164c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001650:	4b1b      	ldr	r3, [pc, #108]	@ (80016c0 <MX_I2C1_Init+0x74>)
 8001652:	4a1c      	ldr	r2, [pc, #112]	@ (80016c4 <MX_I2C1_Init+0x78>)
 8001654:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8001656:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <MX_I2C1_Init+0x74>)
 8001658:	4a1b      	ldr	r2, [pc, #108]	@ (80016c8 <MX_I2C1_Init+0x7c>)
 800165a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800165c:	4b18      	ldr	r3, [pc, #96]	@ (80016c0 <MX_I2C1_Init+0x74>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001662:	4b17      	ldr	r3, [pc, #92]	@ (80016c0 <MX_I2C1_Init+0x74>)
 8001664:	2201      	movs	r2, #1
 8001666:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001668:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <MX_I2C1_Init+0x74>)
 800166a:	2200      	movs	r2, #0
 800166c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800166e:	4b14      	ldr	r3, [pc, #80]	@ (80016c0 <MX_I2C1_Init+0x74>)
 8001670:	2200      	movs	r2, #0
 8001672:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001674:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <MX_I2C1_Init+0x74>)
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800167a:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <MX_I2C1_Init+0x74>)
 800167c:	2200      	movs	r2, #0
 800167e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001680:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <MX_I2C1_Init+0x74>)
 8001682:	2200      	movs	r2, #0
 8001684:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001686:	480e      	ldr	r0, [pc, #56]	@ (80016c0 <MX_I2C1_Init+0x74>)
 8001688:	f004 fba2 	bl	8005dd0 <HAL_I2C_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001692:	f000 f938 	bl	8001906 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001696:	2100      	movs	r1, #0
 8001698:	4809      	ldr	r0, [pc, #36]	@ (80016c0 <MX_I2C1_Init+0x74>)
 800169a:	f004 fc34 	bl	8005f06 <HAL_I2CEx_ConfigAnalogFilter>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016a4:	f000 f92f 	bl	8001906 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016a8:	2100      	movs	r1, #0
 80016aa:	4805      	ldr	r0, [pc, #20]	@ (80016c0 <MX_I2C1_Init+0x74>)
 80016ac:	f004 fc76 	bl	8005f9c <HAL_I2CEx_ConfigDigitalFilter>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016b6:	f000 f926 	bl	8001906 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000364 	.word	0x20000364
 80016c4:	40005400 	.word	0x40005400
 80016c8:	30909dec 	.word	0x30909dec

080016cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b09c      	sub	sp, #112	@ 0x70
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e4:	f107 0318 	add.w	r3, r7, #24
 80016e8:	2244      	movs	r2, #68	@ 0x44
 80016ea:	2100      	movs	r1, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f00c ff83 	bl	800e5f8 <memset>
  if(i2cHandle->Instance==I2C1)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a2d      	ldr	r2, [pc, #180]	@ (80017ac <HAL_I2C_MspInit+0xe0>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d153      	bne.n	80017a4 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016fc:	2340      	movs	r3, #64	@ 0x40
 80016fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001700:	2300      	movs	r3, #0
 8001702:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001704:	f107 0318 	add.w	r3, r7, #24
 8001708:	4618      	mov	r0, r3
 800170a:	f005 fa75 	bl	8006bf8 <HAL_RCCEx_PeriphCLKConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001714:	f000 f8f7 	bl	8001906 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001718:	4b25      	ldr	r3, [pc, #148]	@ (80017b0 <HAL_I2C_MspInit+0xe4>)
 800171a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171c:	4a24      	ldr	r2, [pc, #144]	@ (80017b0 <HAL_I2C_MspInit+0xe4>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001724:	4b22      	ldr	r3, [pc, #136]	@ (80017b0 <HAL_I2C_MspInit+0xe4>)
 8001726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001730:	4b1f      	ldr	r3, [pc, #124]	@ (80017b0 <HAL_I2C_MspInit+0xe4>)
 8001732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001734:	4a1e      	ldr	r2, [pc, #120]	@ (80017b0 <HAL_I2C_MspInit+0xe4>)
 8001736:	f043 0302 	orr.w	r3, r3, #2
 800173a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800173c:	4b1c      	ldr	r3, [pc, #112]	@ (80017b0 <HAL_I2C_MspInit+0xe4>)
 800173e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001748:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800174c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800174e:	2312      	movs	r3, #18
 8001750:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800175a:	2304      	movs	r3, #4
 800175c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001762:	4619      	mov	r1, r3
 8001764:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001768:	f004 f980 	bl	8005a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800176c:	2380      	movs	r3, #128	@ 0x80
 800176e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001770:	2312      	movs	r3, #18
 8001772:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800177c:	2304      	movs	r3, #4
 800177e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001780:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001784:	4619      	mov	r1, r3
 8001786:	480b      	ldr	r0, [pc, #44]	@ (80017b4 <HAL_I2C_MspInit+0xe8>)
 8001788:	f004 f970 	bl	8005a6c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800178c:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <HAL_I2C_MspInit+0xe4>)
 800178e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001790:	4a07      	ldr	r2, [pc, #28]	@ (80017b0 <HAL_I2C_MspInit+0xe4>)
 8001792:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001796:	6593      	str	r3, [r2, #88]	@ 0x58
 8001798:	4b05      	ldr	r3, [pc, #20]	@ (80017b0 <HAL_I2C_MspInit+0xe4>)
 800179a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017a4:	bf00      	nop
 80017a6:	3770      	adds	r7, #112	@ 0x70
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40005400 	.word	0x40005400
 80017b0:	40021000 	.word	0x40021000
 80017b4:	48000400 	.word	0x48000400

080017b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017bc:	f000 fe9d 	bl	80024fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c0:	f000 f858 	bl	8001874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c4:	f7ff feb2 	bl	800152c <MX_GPIO_Init>
  MX_DMA_Init();
 80017c8:	f7ff fe7e 	bl	80014c8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80017cc:	f000 fd62 	bl	8002294 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80017d0:	f7ff fc30 	bl	8001034 <MX_ADC1_Init>
  MX_ADC2_Init();
 80017d4:	f7ff fce6 	bl	80011a4 <MX_ADC2_Init>
  MX_TIM1_Init();
 80017d8:	f000 fb04 	bl	8001de4 <MX_TIM1_Init>
  MX_DAC3_Init();
 80017dc:	f7ff fe1a 	bl	8001414 <MX_DAC3_Init>
  MX_SPI1_Init();
 80017e0:	f000 f898 	bl	8001914 <MX_SPI1_Init>
  MX_I2C1_Init();
 80017e4:	f7ff ff32 	bl	800164c <MX_I2C1_Init>
  MX_TIM8_Init();
 80017e8:	f000 fbd8 	bl	8001f9c <MX_TIM8_Init>
  MX_SPI3_Init();
 80017ec:	f000 f8d0 	bl	8001990 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  appInit();
 80017f0:	f00a fb46 	bl	800be80 <appInit>

  // HAL_UART_Receive_IT(&huart3, (uint8_t *)&aRxBuffer, 1);
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 80017f4:	2264      	movs	r2, #100	@ 0x64
 80017f6:	491a      	ldr	r1, [pc, #104]	@ (8001860 <main+0xa8>)
 80017f8:	481a      	ldr	r0, [pc, #104]	@ (8001864 <main+0xac>)
 80017fa:	f008 ff50 	bl	800a69e <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80017fe:	217f      	movs	r1, #127	@ 0x7f
 8001800:	4819      	ldr	r0, [pc, #100]	@ (8001868 <main+0xb0>)
 8001802:	f002 fb73 	bl	8003eec <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001806:	217f      	movs	r1, #127	@ 0x7f
 8001808:	4818      	ldr	r0, [pc, #96]	@ (800186c <main+0xb4>)
 800180a:	f002 fb6f 	bl	8003eec <HAL_ADCEx_Calibration_Start>
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_JEOC);
 800180e:	4b16      	ldr	r3, [pc, #88]	@ (8001868 <main+0xb0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2220      	movs	r2, #32
 8001814:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOC);
 8001816:	4b14      	ldr	r3, [pc, #80]	@ (8001868 <main+0xb0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2204      	movs	r2, #4
 800181c:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_JEOC);
 800181e:	4b13      	ldr	r3, [pc, #76]	@ (800186c <main+0xb4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2220      	movs	r2, #32
 8001824:	601a      	str	r2, [r3, #0]
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001826:	4810      	ldr	r0, [pc, #64]	@ (8001868 <main+0xb0>)
 8001828:	f002 fc72 	bl	8004110 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart(&hadc2);
 800182c:	480f      	ldr	r0, [pc, #60]	@ (800186c <main+0xb4>)
 800182e:	f002 fbbf 	bl	8003fb0 <HAL_ADCEx_InjectedStart>

  HAL_TIM_Base_Start(&htim8);
 8001832:	480f      	ldr	r0, [pc, #60]	@ (8001870 <main+0xb8>)
 8001834:	f006 f868 	bl	8007908 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001838:	210c      	movs	r1, #12
 800183a:	480d      	ldr	r0, [pc, #52]	@ (8001870 <main+0xb8>)
 800183c:	f006 f928 	bl	8007a90 <HAL_TIM_PWM_Start>
  // HAL_TIMEx_HallSensor_Start_IT(&htim4);
  // FDCAN_Config();
  // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
  // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001840:	2100      	movs	r1, #0
 8001842:	480b      	ldr	r0, [pc, #44]	@ (8001870 <main+0xb8>)
 8001844:	f006 f924 	bl	8007a90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001848:	2104      	movs	r1, #4
 800184a:	4809      	ldr	r0, [pc, #36]	@ (8001870 <main+0xb8>)
 800184c:	f006 f920 	bl	8007a90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001850:	2108      	movs	r1, #8
 8001852:	4807      	ldr	r0, [pc, #28]	@ (8001870 <main+0xb8>)
 8001854:	f006 f91c 	bl	8007a90 <HAL_TIM_PWM_Start>
    //    HAL_Delay(10);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    userMain();
 8001858:	f00a ffe6 	bl	800c828 <userMain>
 800185c:	e7fc      	b.n	8001858 <main+0xa0>
 800185e:	bf00      	nop
 8001860:	20000820 	.word	0x20000820
 8001864:	2000051c 	.word	0x2000051c
 8001868:	20000274 	.word	0x20000274
 800186c:	200002e0 	.word	0x200002e0
 8001870:	200004d0 	.word	0x200004d0

08001874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b094      	sub	sp, #80	@ 0x50
 8001878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800187a:	f107 0318 	add.w	r3, r7, #24
 800187e:	2238      	movs	r2, #56	@ 0x38
 8001880:	2100      	movs	r1, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f00c feb8 	bl	800e5f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001896:	2000      	movs	r0, #0
 8001898:	f004 fbcc 	bl	8006034 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800189c:	2301      	movs	r3, #1
 800189e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018a4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a6:	2302      	movs	r3, #2
 80018a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018aa:	2303      	movs	r3, #3
 80018ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 80018ae:	2303      	movs	r3, #3
 80018b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80018b2:	2328      	movs	r3, #40	@ 0x28
 80018b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018b6:	2302      	movs	r3, #2
 80018b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018ba:	2302      	movs	r3, #2
 80018bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018be:	2302      	movs	r3, #2
 80018c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c2:	f107 0318 	add.w	r3, r7, #24
 80018c6:	4618      	mov	r0, r3
 80018c8:	f004 fc68 	bl	800619c <HAL_RCC_OscConfig>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80018d2:	f000 f818 	bl	8001906 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d6:	230f      	movs	r3, #15
 80018d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018da:	2303      	movs	r3, #3
 80018dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2104      	movs	r1, #4
 80018ee:	4618      	mov	r0, r3
 80018f0:	f004 ff66 	bl	80067c0 <HAL_RCC_ClockConfig>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80018fa:	f000 f804 	bl	8001906 <Error_Handler>
  }
}
 80018fe:	bf00      	nop
 8001900:	3750      	adds	r7, #80	@ 0x50
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800190a:	b672      	cpsid	i
}
 800190c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800190e:	bf00      	nop
 8001910:	e7fd      	b.n	800190e <Error_Handler+0x8>
	...

08001914 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001918:	4b1b      	ldr	r3, [pc, #108]	@ (8001988 <MX_SPI1_Init+0x74>)
 800191a:	4a1c      	ldr	r2, [pc, #112]	@ (800198c <MX_SPI1_Init+0x78>)
 800191c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800191e:	4b1a      	ldr	r3, [pc, #104]	@ (8001988 <MX_SPI1_Init+0x74>)
 8001920:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001924:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001926:	4b18      	ldr	r3, [pc, #96]	@ (8001988 <MX_SPI1_Init+0x74>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800192c:	4b16      	ldr	r3, [pc, #88]	@ (8001988 <MX_SPI1_Init+0x74>)
 800192e:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8001932:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001934:	4b14      	ldr	r3, [pc, #80]	@ (8001988 <MX_SPI1_Init+0x74>)
 8001936:	2200      	movs	r2, #0
 8001938:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800193a:	4b13      	ldr	r3, [pc, #76]	@ (8001988 <MX_SPI1_Init+0x74>)
 800193c:	2201      	movs	r2, #1
 800193e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001940:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <MX_SPI1_Init+0x74>)
 8001942:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001946:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001948:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <MX_SPI1_Init+0x74>)
 800194a:	2218      	movs	r2, #24
 800194c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800194e:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <MX_SPI1_Init+0x74>)
 8001950:	2200      	movs	r2, #0
 8001952:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001954:	4b0c      	ldr	r3, [pc, #48]	@ (8001988 <MX_SPI1_Init+0x74>)
 8001956:	2200      	movs	r2, #0
 8001958:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800195a:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <MX_SPI1_Init+0x74>)
 800195c:	2200      	movs	r2, #0
 800195e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001960:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <MX_SPI1_Init+0x74>)
 8001962:	2207      	movs	r2, #7
 8001964:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001966:	4b08      	ldr	r3, [pc, #32]	@ (8001988 <MX_SPI1_Init+0x74>)
 8001968:	2200      	movs	r2, #0
 800196a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <MX_SPI1_Init+0x74>)
 800196e:	2200      	movs	r2, #0
 8001970:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001972:	4805      	ldr	r0, [pc, #20]	@ (8001988 <MX_SPI1_Init+0x74>)
 8001974:	f005 fb30 	bl	8006fd8 <HAL_SPI_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800197e:	f7ff ffc2 	bl	8001906 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200003b8 	.word	0x200003b8
 800198c:	40013000 	.word	0x40013000

08001990 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001994:	4b1b      	ldr	r3, [pc, #108]	@ (8001a04 <MX_SPI3_Init+0x74>)
 8001996:	4a1c      	ldr	r2, [pc, #112]	@ (8001a08 <MX_SPI3_Init+0x78>)
 8001998:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800199a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a04 <MX_SPI3_Init+0x74>)
 800199c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80019a2:	4b18      	ldr	r3, [pc, #96]	@ (8001a04 <MX_SPI3_Init+0x74>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80019a8:	4b16      	ldr	r3, [pc, #88]	@ (8001a04 <MX_SPI3_Init+0x74>)
 80019aa:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80019ae:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019b0:	4b14      	ldr	r3, [pc, #80]	@ (8001a04 <MX_SPI3_Init+0x74>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80019b6:	4b13      	ldr	r3, [pc, #76]	@ (8001a04 <MX_SPI3_Init+0x74>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80019bc:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <MX_SPI3_Init+0x74>)
 80019be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019c2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a04 <MX_SPI3_Init+0x74>)
 80019c6:	2210      	movs	r2, #16
 80019c8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <MX_SPI3_Init+0x74>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80019d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a04 <MX_SPI3_Init+0x74>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <MX_SPI3_Init+0x74>)
 80019d8:	2200      	movs	r2, #0
 80019da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80019dc:	4b09      	ldr	r3, [pc, #36]	@ (8001a04 <MX_SPI3_Init+0x74>)
 80019de:	2207      	movs	r2, #7
 80019e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019e2:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <MX_SPI3_Init+0x74>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80019e8:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <MX_SPI3_Init+0x74>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80019ee:	4805      	ldr	r0, [pc, #20]	@ (8001a04 <MX_SPI3_Init+0x74>)
 80019f0:	f005 faf2 	bl	8006fd8 <HAL_SPI_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80019fa:	f7ff ff84 	bl	8001906 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	2000041c 	.word	0x2000041c
 8001a08:	40003c00 	.word	0x40003c00

08001a0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08c      	sub	sp, #48	@ 0x30
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a3d      	ldr	r2, [pc, #244]	@ (8001b20 <HAL_SPI_MspInit+0x114>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d129      	bne.n	8001a82 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b24 <HAL_SPI_MspInit+0x118>)
 8001a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a32:	4a3c      	ldr	r2, [pc, #240]	@ (8001b24 <HAL_SPI_MspInit+0x118>)
 8001a34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a38:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b24 <HAL_SPI_MspInit+0x118>)
 8001a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a42:	61bb      	str	r3, [r7, #24]
 8001a44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	4b37      	ldr	r3, [pc, #220]	@ (8001b24 <HAL_SPI_MspInit+0x118>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4a:	4a36      	ldr	r2, [pc, #216]	@ (8001b24 <HAL_SPI_MspInit+0x118>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a52:	4b34      	ldr	r3, [pc, #208]	@ (8001b24 <HAL_SPI_MspInit+0x118>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a5e:	23e0      	movs	r3, #224	@ 0xe0
 8001a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a6e:	2305      	movs	r3, #5
 8001a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	4619      	mov	r1, r3
 8001a78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a7c:	f003 fff6 	bl	8005a6c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001a80:	e049      	b.n	8001b16 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a28      	ldr	r2, [pc, #160]	@ (8001b28 <HAL_SPI_MspInit+0x11c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d144      	bne.n	8001b16 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a8c:	4b25      	ldr	r3, [pc, #148]	@ (8001b24 <HAL_SPI_MspInit+0x118>)
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a90:	4a24      	ldr	r2, [pc, #144]	@ (8001b24 <HAL_SPI_MspInit+0x118>)
 8001a92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a96:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a98:	4b22      	ldr	r3, [pc, #136]	@ (8001b24 <HAL_SPI_MspInit+0x118>)
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b24 <HAL_SPI_MspInit+0x118>)
 8001aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa8:	4a1e      	ldr	r2, [pc, #120]	@ (8001b24 <HAL_SPI_MspInit+0x118>)
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
 8001aae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b24 <HAL_SPI_MspInit+0x118>)
 8001ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001abc:	4b19      	ldr	r3, [pc, #100]	@ (8001b24 <HAL_SPI_MspInit+0x118>)
 8001abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac0:	4a18      	ldr	r2, [pc, #96]	@ (8001b24 <HAL_SPI_MspInit+0x118>)
 8001ac2:	f043 0302 	orr.w	r3, r3, #2
 8001ac6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ac8:	4b16      	ldr	r3, [pc, #88]	@ (8001b24 <HAL_SPI_MspInit+0x118>)
 8001aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ad4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ada:	2302      	movs	r3, #2
 8001adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ae6:	2306      	movs	r3, #6
 8001ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aea:	f107 031c 	add.w	r3, r7, #28
 8001aee:	4619      	mov	r1, r3
 8001af0:	480e      	ldr	r0, [pc, #56]	@ (8001b2c <HAL_SPI_MspInit+0x120>)
 8001af2:	f003 ffbb 	bl	8005a6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001af6:	2320      	movs	r3, #32
 8001af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	2302      	movs	r3, #2
 8001afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b02:	2300      	movs	r3, #0
 8001b04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b06:	2306      	movs	r3, #6
 8001b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0a:	f107 031c 	add.w	r3, r7, #28
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4807      	ldr	r0, [pc, #28]	@ (8001b30 <HAL_SPI_MspInit+0x124>)
 8001b12:	f003 ffab 	bl	8005a6c <HAL_GPIO_Init>
}
 8001b16:	bf00      	nop
 8001b18:	3730      	adds	r7, #48	@ 0x30
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40013000 	.word	0x40013000
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40003c00 	.word	0x40003c00
 8001b2c:	48000800 	.word	0x48000800
 8001b30:	48000400 	.word	0x48000400

08001b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b78 <HAL_MspInit+0x44>)
 8001b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b78 <HAL_MspInit+0x44>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b46:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <HAL_MspInit+0x44>)
 8001b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <HAL_MspInit+0x44>)
 8001b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b56:	4a08      	ldr	r2, [pc, #32]	@ (8001b78 <HAL_MspInit+0x44>)
 8001b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b5e:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <HAL_MspInit+0x44>)
 8001b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001b6a:	f004 fb07 	bl	800617c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40021000 	.word	0x40021000

08001b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <NMI_Handler+0x4>

08001b84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <HardFault_Handler+0x4>

08001b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <MemManage_Handler+0x4>

08001b94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <BusFault_Handler+0x4>

08001b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <UsageFault_Handler+0x4>

08001ba4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bd2:	f000 fce5 	bl	80025a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001be0:	4802      	ldr	r0, [pc, #8]	@ (8001bec <DMA1_Channel1_IRQHandler+0x10>)
 8001be2:	f003 fdf4 	bl	80057ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200005b0 	.word	0x200005b0

08001bf0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001bf4:	4802      	ldr	r0, [pc, #8]	@ (8001c00 <DMA1_Channel2_IRQHandler+0x10>)
 8001bf6:	f003 fdea 	bl	80057ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000610 	.word	0x20000610

08001c04 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c08:	4803      	ldr	r0, [pc, #12]	@ (8001c18 <ADC1_2_IRQHandler+0x14>)
 8001c0a:	f001 f8bd 	bl	8002d88 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001c0e:	4803      	ldr	r0, [pc, #12]	@ (8001c1c <ADC1_2_IRQHandler+0x18>)
 8001c10:	f001 f8ba 	bl	8002d88 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000274 	.word	0x20000274
 8001c1c:	200002e0 	.word	0x200002e0

08001c20 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c24:	4802      	ldr	r0, [pc, #8]	@ (8001c30 <USART3_IRQHandler+0x10>)
 8001c26:	f007 f997 	bl	8008f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	2000051c 	.word	0x2000051c

08001c34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return 1;
 8001c38:	2301      	movs	r3, #1
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <_kill>:

int _kill(int pid, int sig)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c4e:	f00c fd37 	bl	800e6c0 <__errno>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2216      	movs	r2, #22
 8001c56:	601a      	str	r2, [r3, #0]
  return -1;
 8001c58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <_exit>:

void _exit (int status)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff ffe7 	bl	8001c44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c76:	bf00      	nop
 8001c78:	e7fd      	b.n	8001c76 <_exit+0x12>

08001c7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	e00a      	b.n	8001ca2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c8c:	f3af 8000 	nop.w
 8001c90:	4601      	mov	r1, r0
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	1c5a      	adds	r2, r3, #1
 8001c96:	60ba      	str	r2, [r7, #8]
 8001c98:	b2ca      	uxtb	r2, r1
 8001c9a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	dbf0      	blt.n	8001c8c <_read+0x12>
  }

  return len;
 8001caa:	687b      	ldr	r3, [r7, #4]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	e009      	b.n	8001cda <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	60ba      	str	r2, [r7, #8]
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	dbf1      	blt.n	8001cc6 <_write+0x12>
  }
  return len;
 8001ce2:	687b      	ldr	r3, [r7, #4]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <_close>:

int _close(int file)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d14:	605a      	str	r2, [r3, #4]
  return 0;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <_isatty>:

int _isatty(int file)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d2c:	2301      	movs	r3, #1
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b085      	sub	sp, #20
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d5c:	4a14      	ldr	r2, [pc, #80]	@ (8001db0 <_sbrk+0x5c>)
 8001d5e:	4b15      	ldr	r3, [pc, #84]	@ (8001db4 <_sbrk+0x60>)
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d68:	4b13      	ldr	r3, [pc, #76]	@ (8001db8 <_sbrk+0x64>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d102      	bne.n	8001d76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d70:	4b11      	ldr	r3, [pc, #68]	@ (8001db8 <_sbrk+0x64>)
 8001d72:	4a12      	ldr	r2, [pc, #72]	@ (8001dbc <_sbrk+0x68>)
 8001d74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d76:	4b10      	ldr	r3, [pc, #64]	@ (8001db8 <_sbrk+0x64>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d207      	bcs.n	8001d94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d84:	f00c fc9c 	bl	800e6c0 <__errno>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	220c      	movs	r2, #12
 8001d8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d92:	e009      	b.n	8001da8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d94:	4b08      	ldr	r3, [pc, #32]	@ (8001db8 <_sbrk+0x64>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d9a:	4b07      	ldr	r3, [pc, #28]	@ (8001db8 <_sbrk+0x64>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	4a05      	ldr	r2, [pc, #20]	@ (8001db8 <_sbrk+0x64>)
 8001da4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001da6:	68fb      	ldr	r3, [r7, #12]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20008000 	.word	0x20008000
 8001db4:	00000400 	.word	0x00000400
 8001db8:	20000480 	.word	0x20000480
 8001dbc:	20000a48 	.word	0x20000a48

08001dc0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001dc4:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <SystemInit+0x20>)
 8001dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dca:	4a05      	ldr	r2, [pc, #20]	@ (8001de0 <SystemInit+0x20>)
 8001dcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b09c      	sub	sp, #112	@ 0x70
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dea:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e04:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
 8001e14:	615a      	str	r2, [r3, #20]
 8001e16:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e18:	1d3b      	adds	r3, r7, #4
 8001e1a:	2234      	movs	r2, #52	@ 0x34
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f00c fbea 	bl	800e5f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e24:	4b5b      	ldr	r3, [pc, #364]	@ (8001f94 <MX_TIM1_Init+0x1b0>)
 8001e26:	4a5c      	ldr	r2, [pc, #368]	@ (8001f98 <MX_TIM1_Init+0x1b4>)
 8001e28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8001e2a:	4b5a      	ldr	r3, [pc, #360]	@ (8001f94 <MX_TIM1_Init+0x1b0>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001e30:	4b58      	ldr	r3, [pc, #352]	@ (8001f94 <MX_TIM1_Init+0x1b0>)
 8001e32:	2220      	movs	r2, #32
 8001e34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 8001e36:	4b57      	ldr	r3, [pc, #348]	@ (8001f94 <MX_TIM1_Init+0x1b0>)
 8001e38:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001e3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001e3e:	4b55      	ldr	r3, [pc, #340]	@ (8001f94 <MX_TIM1_Init+0x1b0>)
 8001e40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001e46:	4b53      	ldr	r3, [pc, #332]	@ (8001f94 <MX_TIM1_Init+0x1b0>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e4c:	4b51      	ldr	r3, [pc, #324]	@ (8001f94 <MX_TIM1_Init+0x1b0>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e52:	4850      	ldr	r0, [pc, #320]	@ (8001f94 <MX_TIM1_Init+0x1b0>)
 8001e54:	f005 fd00 	bl	8007858 <HAL_TIM_Base_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001e5e:	f7ff fd52 	bl	8001906 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e66:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e68:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4849      	ldr	r0, [pc, #292]	@ (8001f94 <MX_TIM1_Init+0x1b0>)
 8001e70:	f006 f8b8 	bl	8007fe4 <HAL_TIM_ConfigClockSource>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001e7a:	f7ff fd44 	bl	8001906 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e7e:	4845      	ldr	r0, [pc, #276]	@ (8001f94 <MX_TIM1_Init+0x1b0>)
 8001e80:	f005 fda4 	bl	80079cc <HAL_TIM_PWM_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001e8a:	f7ff fd3c 	bl	8001906 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001e8e:	2370      	movs	r3, #112	@ 0x70
 8001e90:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e92:	2300      	movs	r3, #0
 8001e94:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e9a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	483c      	ldr	r0, [pc, #240]	@ (8001f94 <MX_TIM1_Init+0x1b0>)
 8001ea2:	f006 fded 	bl	8008a80 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001eac:	f7ff fd2b 	bl	8001906 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eb0:	2360      	movs	r3, #96	@ 0x60
 8001eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ecc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	482f      	ldr	r0, [pc, #188]	@ (8001f94 <MX_TIM1_Init+0x1b0>)
 8001ed6:	f005 ff71 	bl	8007dbc <HAL_TIM_PWM_ConfigChannel>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001ee0:	f7ff fd11 	bl	8001906 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ee4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ee8:	2204      	movs	r2, #4
 8001eea:	4619      	mov	r1, r3
 8001eec:	4829      	ldr	r0, [pc, #164]	@ (8001f94 <MX_TIM1_Init+0x1b0>)
 8001eee:	f005 ff65 	bl	8007dbc <HAL_TIM_PWM_ConfigChannel>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001ef8:	f7ff fd05 	bl	8001906 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001efc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f00:	2208      	movs	r2, #8
 8001f02:	4619      	mov	r1, r3
 8001f04:	4823      	ldr	r0, [pc, #140]	@ (8001f94 <MX_TIM1_Init+0x1b0>)
 8001f06:	f005 ff59 	bl	8007dbc <HAL_TIM_PWM_ConfigChannel>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001f10:	f7ff fcf9 	bl	8001906 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001f14:	2370      	movs	r3, #112	@ 0x70
 8001f16:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 7998;
 8001f18:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 8001f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f1e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f22:	220c      	movs	r2, #12
 8001f24:	4619      	mov	r1, r3
 8001f26:	481b      	ldr	r0, [pc, #108]	@ (8001f94 <MX_TIM1_Init+0x1b0>)
 8001f28:	f005 ff48 	bl	8007dbc <HAL_TIM_PWM_ConfigChannel>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8001f32:	f7ff fce8 	bl	8001906 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001f46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 2;
 8001f52:	2302      	movs	r3, #2
 8001f54:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001f56:	2300      	movs	r3, #0
 8001f58:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f62:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f70:	1d3b      	adds	r3, r7, #4
 8001f72:	4619      	mov	r1, r3
 8001f74:	4807      	ldr	r0, [pc, #28]	@ (8001f94 <MX_TIM1_Init+0x1b0>)
 8001f76:	f006 fe05 	bl	8008b84 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM1_Init+0x1a0>
  {
    Error_Handler();
 8001f80:	f7ff fcc1 	bl	8001906 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f84:	4803      	ldr	r0, [pc, #12]	@ (8001f94 <MX_TIM1_Init+0x1b0>)
 8001f86:	f000 f917 	bl	80021b8 <HAL_TIM_MspPostInit>

}
 8001f8a:	bf00      	nop
 8001f8c:	3770      	adds	r7, #112	@ 0x70
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000484 	.word	0x20000484
 8001f98:	40012c00 	.word	0x40012c00

08001f9c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b09c      	sub	sp, #112	@ 0x70
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fa2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fbc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
 8001fcc:	615a      	str	r2, [r3, #20]
 8001fce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fd0:	1d3b      	adds	r3, r7, #4
 8001fd2:	2234      	movs	r2, #52	@ 0x34
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f00c fb0e 	bl	800e5f8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001fdc:	4b5a      	ldr	r3, [pc, #360]	@ (8002148 <MX_TIM8_Init+0x1ac>)
 8001fde:	4a5b      	ldr	r2, [pc, #364]	@ (800214c <MX_TIM8_Init+0x1b0>)
 8001fe0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001fe2:	4b59      	ldr	r3, [pc, #356]	@ (8002148 <MX_TIM8_Init+0x1ac>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001fe8:	4b57      	ldr	r3, [pc, #348]	@ (8002148 <MX_TIM8_Init+0x1ac>)
 8001fea:	2220      	movs	r2, #32
 8001fec:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7999;
 8001fee:	4b56      	ldr	r3, [pc, #344]	@ (8002148 <MX_TIM8_Init+0x1ac>)
 8001ff0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001ff4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001ff6:	4b54      	ldr	r3, [pc, #336]	@ (8002148 <MX_TIM8_Init+0x1ac>)
 8001ff8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ffc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 1;
 8001ffe:	4b52      	ldr	r3, [pc, #328]	@ (8002148 <MX_TIM8_Init+0x1ac>)
 8002000:	2201      	movs	r2, #1
 8002002:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002004:	4b50      	ldr	r3, [pc, #320]	@ (8002148 <MX_TIM8_Init+0x1ac>)
 8002006:	2200      	movs	r2, #0
 8002008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800200a:	484f      	ldr	r0, [pc, #316]	@ (8002148 <MX_TIM8_Init+0x1ac>)
 800200c:	f005 fc24 	bl	8007858 <HAL_TIM_Base_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8002016:	f7ff fc76 	bl	8001906 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800201a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800201e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002020:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002024:	4619      	mov	r1, r3
 8002026:	4848      	ldr	r0, [pc, #288]	@ (8002148 <MX_TIM8_Init+0x1ac>)
 8002028:	f005 ffdc 	bl	8007fe4 <HAL_TIM_ConfigClockSource>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8002032:	f7ff fc68 	bl	8001906 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002036:	4844      	ldr	r0, [pc, #272]	@ (8002148 <MX_TIM8_Init+0x1ac>)
 8002038:	f005 fcc8 	bl	80079cc <HAL_TIM_PWM_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8002042:	f7ff fc60 	bl	8001906 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8002046:	2370      	movs	r3, #112	@ 0x70
 8002048:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002052:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002056:	4619      	mov	r1, r3
 8002058:	483b      	ldr	r0, [pc, #236]	@ (8002148 <MX_TIM8_Init+0x1ac>)
 800205a:	f006 fd11 	bl	8008a80 <HAL_TIMEx_MasterConfigSynchronization>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8002064:	f7ff fc4f 	bl	8001906 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002068:	2360      	movs	r3, #96	@ 0x60
 800206a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002070:	2300      	movs	r3, #0
 8002072:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002074:	2300      	movs	r3, #0
 8002076:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002078:	2300      	movs	r3, #0
 800207a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800207c:	2300      	movs	r3, #0
 800207e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002080:	2300      	movs	r3, #0
 8002082:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002084:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002088:	2200      	movs	r2, #0
 800208a:	4619      	mov	r1, r3
 800208c:	482e      	ldr	r0, [pc, #184]	@ (8002148 <MX_TIM8_Init+0x1ac>)
 800208e:	f005 fe95 	bl	8007dbc <HAL_TIM_PWM_ConfigChannel>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8002098:	f7ff fc35 	bl	8001906 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800209c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020a0:	2204      	movs	r2, #4
 80020a2:	4619      	mov	r1, r3
 80020a4:	4828      	ldr	r0, [pc, #160]	@ (8002148 <MX_TIM8_Init+0x1ac>)
 80020a6:	f005 fe89 	bl	8007dbc <HAL_TIM_PWM_ConfigChannel>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80020b0:	f7ff fc29 	bl	8001906 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020b8:	2208      	movs	r2, #8
 80020ba:	4619      	mov	r1, r3
 80020bc:	4822      	ldr	r0, [pc, #136]	@ (8002148 <MX_TIM8_Init+0x1ac>)
 80020be:	f005 fe7d 	bl	8007dbc <HAL_TIM_PWM_ConfigChannel>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 80020c8:	f7ff fc1d 	bl	8001906 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80020cc:	2370      	movs	r3, #112	@ 0x70
 80020ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 7998;
 80020d0:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 80020d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020d6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020da:	220c      	movs	r2, #12
 80020dc:	4619      	mov	r1, r3
 80020de:	481a      	ldr	r0, [pc, #104]	@ (8002148 <MX_TIM8_Init+0x1ac>)
 80020e0:	f005 fe6c 	bl	8007dbc <HAL_TIM_PWM_ConfigChannel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM8_Init+0x152>
  {
    Error_Handler();
 80020ea:	f7ff fc0c 	bl	8001906 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002102:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002106:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800210c:	2300      	movs	r3, #0
 800210e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002114:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002118:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800211e:	2300      	movs	r3, #0
 8002120:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002122:	2300      	movs	r3, #0
 8002124:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002126:	1d3b      	adds	r3, r7, #4
 8002128:	4619      	mov	r1, r3
 800212a:	4807      	ldr	r0, [pc, #28]	@ (8002148 <MX_TIM8_Init+0x1ac>)
 800212c:	f006 fd2a 	bl	8008b84 <HAL_TIMEx_ConfigBreakDeadTime>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM8_Init+0x19e>
  {
    Error_Handler();
 8002136:	f7ff fbe6 	bl	8001906 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800213a:	4803      	ldr	r0, [pc, #12]	@ (8002148 <MX_TIM8_Init+0x1ac>)
 800213c:	f000 f83c 	bl	80021b8 <HAL_TIM_MspPostInit>

}
 8002140:	bf00      	nop
 8002142:	3770      	adds	r7, #112	@ 0x70
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	200004d0 	.word	0x200004d0
 800214c:	40013400 	.word	0x40013400

08002150 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a13      	ldr	r2, [pc, #76]	@ (80021ac <HAL_TIM_Base_MspInit+0x5c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d10c      	bne.n	800217c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002162:	4b13      	ldr	r3, [pc, #76]	@ (80021b0 <HAL_TIM_Base_MspInit+0x60>)
 8002164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002166:	4a12      	ldr	r2, [pc, #72]	@ (80021b0 <HAL_TIM_Base_MspInit+0x60>)
 8002168:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800216c:	6613      	str	r3, [r2, #96]	@ 0x60
 800216e:	4b10      	ldr	r3, [pc, #64]	@ (80021b0 <HAL_TIM_Base_MspInit+0x60>)
 8002170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002172:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800217a:	e010      	b.n	800219e <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM8)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0c      	ldr	r2, [pc, #48]	@ (80021b4 <HAL_TIM_Base_MspInit+0x64>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d10b      	bne.n	800219e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002186:	4b0a      	ldr	r3, [pc, #40]	@ (80021b0 <HAL_TIM_Base_MspInit+0x60>)
 8002188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800218a:	4a09      	ldr	r2, [pc, #36]	@ (80021b0 <HAL_TIM_Base_MspInit+0x60>)
 800218c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002190:	6613      	str	r3, [r2, #96]	@ 0x60
 8002192:	4b07      	ldr	r3, [pc, #28]	@ (80021b0 <HAL_TIM_Base_MspInit+0x60>)
 8002194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002196:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
}
 800219e:	bf00      	nop
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40012c00 	.word	0x40012c00
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40013400 	.word	0x40013400

080021b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	@ 0x28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002284 <HAL_TIM_MspPostInit+0xcc>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d11e      	bne.n	8002218 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021da:	4b2b      	ldr	r3, [pc, #172]	@ (8002288 <HAL_TIM_MspPostInit+0xd0>)
 80021dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021de:	4a2a      	ldr	r2, [pc, #168]	@ (8002288 <HAL_TIM_MspPostInit+0xd0>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021e6:	4b28      	ldr	r3, [pc, #160]	@ (8002288 <HAL_TIM_MspPostInit+0xd0>)
 80021e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80021f2:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80021f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002200:	2300      	movs	r3, #0
 8002202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002204:	2306      	movs	r3, #6
 8002206:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	4619      	mov	r1, r3
 800220e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002212:	f003 fc2b 	bl	8005a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002216:	e031      	b.n	800227c <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM8)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a1b      	ldr	r2, [pc, #108]	@ (800228c <HAL_TIM_MspPostInit+0xd4>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d12c      	bne.n	800227c <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002222:	4b19      	ldr	r3, [pc, #100]	@ (8002288 <HAL_TIM_MspPostInit+0xd0>)
 8002224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002226:	4a18      	ldr	r2, [pc, #96]	@ (8002288 <HAL_TIM_MspPostInit+0xd0>)
 8002228:	f043 0302 	orr.w	r3, r3, #2
 800222c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800222e:	4b16      	ldr	r3, [pc, #88]	@ (8002288 <HAL_TIM_MspPostInit+0xd0>)
 8002230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800223a:	2340      	movs	r3, #64	@ 0x40
 800223c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223e:	2302      	movs	r3, #2
 8002240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002246:	2300      	movs	r3, #0
 8002248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 800224a:	2305      	movs	r3, #5
 800224c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224e:	f107 0314 	add.w	r3, r7, #20
 8002252:	4619      	mov	r1, r3
 8002254:	480e      	ldr	r0, [pc, #56]	@ (8002290 <HAL_TIM_MspPostInit+0xd8>)
 8002256:	f003 fc09 	bl	8005a6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800225a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800225e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002260:	2302      	movs	r3, #2
 8002262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002268:	2300      	movs	r3, #0
 800226a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800226c:	230a      	movs	r3, #10
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	4619      	mov	r1, r3
 8002276:	4806      	ldr	r0, [pc, #24]	@ (8002290 <HAL_TIM_MspPostInit+0xd8>)
 8002278:	f003 fbf8 	bl	8005a6c <HAL_GPIO_Init>
}
 800227c:	bf00      	nop
 800227e:	3728      	adds	r7, #40	@ 0x28
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40012c00 	.word	0x40012c00
 8002288:	40021000 	.word	0x40021000
 800228c:	40013400 	.word	0x40013400
 8002290:	48000400 	.word	0x48000400

08002294 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002298:	4b22      	ldr	r3, [pc, #136]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 800229a:	4a23      	ldr	r2, [pc, #140]	@ (8002328 <MX_USART3_UART_Init+0x94>)
 800229c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800229e:	4b21      	ldr	r3, [pc, #132]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 80022a0:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80022a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 80022ba:	220c      	movs	r2, #12
 80022bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022be:	4b19      	ldr	r3, [pc, #100]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c4:	4b17      	ldr	r3, [pc, #92]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ca:	4b16      	ldr	r3, [pc, #88]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022d0:	4b14      	ldr	r3, [pc, #80]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022d6:	4b13      	ldr	r3, [pc, #76]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 80022d8:	2200      	movs	r2, #0
 80022da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022dc:	4811      	ldr	r0, [pc, #68]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 80022de:	f006 fcdd 	bl	8008c9c <HAL_UART_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80022e8:	f7ff fb0d 	bl	8001906 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022ec:	2100      	movs	r1, #0
 80022ee:	480d      	ldr	r0, [pc, #52]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 80022f0:	f008 f959 	bl	800a5a6 <HAL_UARTEx_SetTxFifoThreshold>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80022fa:	f7ff fb04 	bl	8001906 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022fe:	2100      	movs	r1, #0
 8002300:	4808      	ldr	r0, [pc, #32]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 8002302:	f008 f98e 	bl	800a622 <HAL_UARTEx_SetRxFifoThreshold>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800230c:	f7ff fafb 	bl	8001906 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002310:	4804      	ldr	r0, [pc, #16]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 8002312:	f008 f90f 	bl	800a534 <HAL_UARTEx_DisableFifoMode>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800231c:	f7ff faf3 	bl	8001906 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002320:	bf00      	nop
 8002322:	bd80      	pop	{r7, pc}
 8002324:	2000051c 	.word	0x2000051c
 8002328:	40004800 	.word	0x40004800

0800232c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b09a      	sub	sp, #104	@ 0x68
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002344:	f107 0310 	add.w	r3, r7, #16
 8002348:	2244      	movs	r2, #68	@ 0x44
 800234a:	2100      	movs	r1, #0
 800234c:	4618      	mov	r0, r3
 800234e:	f00c f953 	bl	800e5f8 <memset>
  if(uartHandle->Instance==USART3)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a4d      	ldr	r2, [pc, #308]	@ (800248c <HAL_UART_MspInit+0x160>)
 8002358:	4293      	cmp	r3, r2
 800235a:	f040 8092 	bne.w	8002482 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800235e:	2304      	movs	r3, #4
 8002360:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002366:	f107 0310 	add.w	r3, r7, #16
 800236a:	4618      	mov	r0, r3
 800236c:	f004 fc44 	bl	8006bf8 <HAL_RCCEx_PeriphCLKConfig>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002376:	f7ff fac6 	bl	8001906 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800237a:	4b45      	ldr	r3, [pc, #276]	@ (8002490 <HAL_UART_MspInit+0x164>)
 800237c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237e:	4a44      	ldr	r2, [pc, #272]	@ (8002490 <HAL_UART_MspInit+0x164>)
 8002380:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002384:	6593      	str	r3, [r2, #88]	@ 0x58
 8002386:	4b42      	ldr	r3, [pc, #264]	@ (8002490 <HAL_UART_MspInit+0x164>)
 8002388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002392:	4b3f      	ldr	r3, [pc, #252]	@ (8002490 <HAL_UART_MspInit+0x164>)
 8002394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002396:	4a3e      	ldr	r2, [pc, #248]	@ (8002490 <HAL_UART_MspInit+0x164>)
 8002398:	f043 0302 	orr.w	r3, r3, #2
 800239c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800239e:	4b3c      	ldr	r3, [pc, #240]	@ (8002490 <HAL_UART_MspInit+0x164>)
 80023a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80023aa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80023ae:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b8:	2300      	movs	r3, #0
 80023ba:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023bc:	2307      	movs	r3, #7
 80023be:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023c4:	4619      	mov	r1, r3
 80023c6:	4833      	ldr	r0, [pc, #204]	@ (8002494 <HAL_UART_MspInit+0x168>)
 80023c8:	f003 fb50 	bl	8005a6c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel1;
 80023cc:	4b32      	ldr	r3, [pc, #200]	@ (8002498 <HAL_UART_MspInit+0x16c>)
 80023ce:	4a33      	ldr	r2, [pc, #204]	@ (800249c <HAL_UART_MspInit+0x170>)
 80023d0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80023d2:	4b31      	ldr	r3, [pc, #196]	@ (8002498 <HAL_UART_MspInit+0x16c>)
 80023d4:	221d      	movs	r2, #29
 80023d6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002498 <HAL_UART_MspInit+0x16c>)
 80023da:	2210      	movs	r2, #16
 80023dc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023de:	4b2e      	ldr	r3, [pc, #184]	@ (8002498 <HAL_UART_MspInit+0x16c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002498 <HAL_UART_MspInit+0x16c>)
 80023e6:	2280      	movs	r2, #128	@ 0x80
 80023e8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002498 <HAL_UART_MspInit+0x16c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023f0:	4b29      	ldr	r3, [pc, #164]	@ (8002498 <HAL_UART_MspInit+0x16c>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80023f6:	4b28      	ldr	r3, [pc, #160]	@ (8002498 <HAL_UART_MspInit+0x16c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023fc:	4b26      	ldr	r3, [pc, #152]	@ (8002498 <HAL_UART_MspInit+0x16c>)
 80023fe:	2200      	movs	r2, #0
 8002400:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002402:	4825      	ldr	r0, [pc, #148]	@ (8002498 <HAL_UART_MspInit+0x16c>)
 8002404:	f003 f800 	bl	8005408 <HAL_DMA_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800240e:	f7ff fa7a 	bl	8001906 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a20      	ldr	r2, [pc, #128]	@ (8002498 <HAL_UART_MspInit+0x16c>)
 8002416:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002418:	4a1f      	ldr	r2, [pc, #124]	@ (8002498 <HAL_UART_MspInit+0x16c>)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel2;
 800241e:	4b20      	ldr	r3, [pc, #128]	@ (80024a0 <HAL_UART_MspInit+0x174>)
 8002420:	4a20      	ldr	r2, [pc, #128]	@ (80024a4 <HAL_UART_MspInit+0x178>)
 8002422:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002424:	4b1e      	ldr	r3, [pc, #120]	@ (80024a0 <HAL_UART_MspInit+0x174>)
 8002426:	221c      	movs	r2, #28
 8002428:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800242a:	4b1d      	ldr	r3, [pc, #116]	@ (80024a0 <HAL_UART_MspInit+0x174>)
 800242c:	2200      	movs	r2, #0
 800242e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002430:	4b1b      	ldr	r3, [pc, #108]	@ (80024a0 <HAL_UART_MspInit+0x174>)
 8002432:	2200      	movs	r2, #0
 8002434:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002436:	4b1a      	ldr	r3, [pc, #104]	@ (80024a0 <HAL_UART_MspInit+0x174>)
 8002438:	2280      	movs	r2, #128	@ 0x80
 800243a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800243c:	4b18      	ldr	r3, [pc, #96]	@ (80024a0 <HAL_UART_MspInit+0x174>)
 800243e:	2200      	movs	r2, #0
 8002440:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002442:	4b17      	ldr	r3, [pc, #92]	@ (80024a0 <HAL_UART_MspInit+0x174>)
 8002444:	2200      	movs	r2, #0
 8002446:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002448:	4b15      	ldr	r3, [pc, #84]	@ (80024a0 <HAL_UART_MspInit+0x174>)
 800244a:	2200      	movs	r2, #0
 800244c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800244e:	4b14      	ldr	r3, [pc, #80]	@ (80024a0 <HAL_UART_MspInit+0x174>)
 8002450:	2200      	movs	r2, #0
 8002452:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002454:	4812      	ldr	r0, [pc, #72]	@ (80024a0 <HAL_UART_MspInit+0x174>)
 8002456:	f002 ffd7 	bl	8005408 <HAL_DMA_Init>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8002460:	f7ff fa51 	bl	8001906 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a0e      	ldr	r2, [pc, #56]	@ (80024a0 <HAL_UART_MspInit+0x174>)
 8002468:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800246c:	4a0c      	ldr	r2, [pc, #48]	@ (80024a0 <HAL_UART_MspInit+0x174>)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8002472:	2200      	movs	r2, #0
 8002474:	2101      	movs	r1, #1
 8002476:	2027      	movs	r0, #39	@ 0x27
 8002478:	f002 fdb7 	bl	8004fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800247c:	2027      	movs	r0, #39	@ 0x27
 800247e:	f002 fdce 	bl	800501e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002482:	bf00      	nop
 8002484:	3768      	adds	r7, #104	@ 0x68
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40004800 	.word	0x40004800
 8002490:	40021000 	.word	0x40021000
 8002494:	48000400 	.word	0x48000400
 8002498:	200005b0 	.word	0x200005b0
 800249c:	40020008 	.word	0x40020008
 80024a0:	20000610 	.word	0x20000610
 80024a4:	4002001c 	.word	0x4002001c

080024a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024a8:	480d      	ldr	r0, [pc, #52]	@ (80024e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024aa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80024ac:	f7ff fc88 	bl	8001dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024b0:	480c      	ldr	r0, [pc, #48]	@ (80024e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80024b2:	490d      	ldr	r1, [pc, #52]	@ (80024e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024b4:	4a0d      	ldr	r2, [pc, #52]	@ (80024ec <LoopForever+0xe>)
  movs r3, #0
 80024b6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80024b8:	e002      	b.n	80024c0 <LoopCopyDataInit>

080024ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024be:	3304      	adds	r3, #4

080024c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c4:	d3f9      	bcc.n	80024ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024c6:	4a0a      	ldr	r2, [pc, #40]	@ (80024f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024c8:	4c0a      	ldr	r4, [pc, #40]	@ (80024f4 <LoopForever+0x16>)
  movs r3, #0
 80024ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024cc:	e001      	b.n	80024d2 <LoopFillZerobss>

080024ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d0:	3204      	adds	r2, #4

080024d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d4:	d3fb      	bcc.n	80024ce <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80024d6:	f00c f8f9 	bl	800e6cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024da:	f7ff f96d 	bl	80017b8 <main>

080024de <LoopForever>:

LoopForever:
    b LoopForever
 80024de:	e7fe      	b.n	80024de <LoopForever>
  ldr   r0, =_estack
 80024e0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80024e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e8:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 80024ec:	080119b0 	.word	0x080119b0
  ldr r2, =_sbss
 80024f0:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 80024f4:	20000a44 	.word	0x20000a44

080024f8 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024f8:	e7fe      	b.n	80024f8 <COMP1_2_3_IRQHandler>

080024fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002504:	2003      	movs	r0, #3
 8002506:	f002 fd65 	bl	8004fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800250a:	200f      	movs	r0, #15
 800250c:	f000 f80e 	bl	800252c <HAL_InitTick>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	71fb      	strb	r3, [r7, #7]
 800251a:	e001      	b.n	8002520 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800251c:	f7ff fb0a 	bl	8001b34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002520:	79fb      	ldrb	r3, [r7, #7]

}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002538:	4b16      	ldr	r3, [pc, #88]	@ (8002594 <HAL_InitTick+0x68>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d022      	beq.n	8002586 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002540:	4b15      	ldr	r3, [pc, #84]	@ (8002598 <HAL_InitTick+0x6c>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b13      	ldr	r3, [pc, #76]	@ (8002594 <HAL_InitTick+0x68>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800254c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002550:	fbb2 f3f3 	udiv	r3, r2, r3
 8002554:	4618      	mov	r0, r3
 8002556:	f002 fd70 	bl	800503a <HAL_SYSTICK_Config>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10f      	bne.n	8002580 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b0f      	cmp	r3, #15
 8002564:	d809      	bhi.n	800257a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002566:	2200      	movs	r2, #0
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	f04f 30ff 	mov.w	r0, #4294967295
 800256e:	f002 fd3c 	bl	8004fea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002572:	4a0a      	ldr	r2, [pc, #40]	@ (800259c <HAL_InitTick+0x70>)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	e007      	b.n	800258a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
 800257e:	e004      	b.n	800258a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	73fb      	strb	r3, [r7, #15]
 8002584:	e001      	b.n	800258a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800258a:	7bfb      	ldrb	r3, [r7, #15]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20000008 	.word	0x20000008
 8002598:	20000000 	.word	0x20000000
 800259c:	20000004 	.word	0x20000004

080025a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025a4:	4b05      	ldr	r3, [pc, #20]	@ (80025bc <HAL_IncTick+0x1c>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4b05      	ldr	r3, [pc, #20]	@ (80025c0 <HAL_IncTick+0x20>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4413      	add	r3, r2
 80025ae:	4a03      	ldr	r2, [pc, #12]	@ (80025bc <HAL_IncTick+0x1c>)
 80025b0:	6013      	str	r3, [r2, #0]
}
 80025b2:	bf00      	nop
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	20000670 	.word	0x20000670
 80025c0:	20000008 	.word	0x20000008

080025c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return uwTick;
 80025c8:	4b03      	ldr	r3, [pc, #12]	@ (80025d8 <HAL_GetTick+0x14>)
 80025ca:	681b      	ldr	r3, [r3, #0]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	20000670 	.word	0x20000670

080025dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	431a      	orrs	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	609a      	str	r2, [r3, #8]
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	609a      	str	r2, [r3, #8]
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002644:	b480      	push	{r7}
 8002646:	b087      	sub	sp, #28
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
 8002650:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	3360      	adds	r3, #96	@ 0x60
 8002656:	461a      	mov	r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4b08      	ldr	r3, [pc, #32]	@ (8002688 <LL_ADC_SetOffset+0x44>)
 8002666:	4013      	ands	r3, r2
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	4313      	orrs	r3, r2
 8002674:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800267c:	bf00      	nop
 800267e:	371c      	adds	r7, #28
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	03fff000 	.word	0x03fff000

0800268c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3360      	adds	r3, #96	@ 0x60
 800269a:	461a      	mov	r2, r3
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	3360      	adds	r3, #96	@ 0x60
 80026c8:	461a      	mov	r2, r3
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	431a      	orrs	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80026e2:	bf00      	nop
 80026e4:	371c      	adds	r7, #28
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b087      	sub	sp, #28
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	3360      	adds	r3, #96	@ 0x60
 80026fe:	461a      	mov	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	431a      	orrs	r2, r3
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002718:	bf00      	nop
 800271a:	371c      	adds	r7, #28
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	3360      	adds	r3, #96	@ 0x60
 8002734:	461a      	mov	r2, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	431a      	orrs	r2, r3
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800274e:	bf00      	nop
 8002750:	371c      	adds	r7, #28
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	615a      	str	r2, [r3, #20]
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b087      	sub	sp, #28
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	3330      	adds	r3, #48	@ 0x30
 80027b6:	461a      	mov	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	0a1b      	lsrs	r3, r3, #8
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	4413      	add	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	211f      	movs	r1, #31
 80027d2:	fa01 f303 	lsl.w	r3, r1, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	401a      	ands	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	0e9b      	lsrs	r3, r3, #26
 80027de:	f003 011f 	and.w	r1, r3, #31
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	f003 031f 	and.w	r3, r3, #31
 80027e8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ec:	431a      	orrs	r2, r3
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80027f2:	bf00      	nop
 80027f4:	371c      	adds	r7, #28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800280a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002824:	b480      	push	{r7}
 8002826:	b087      	sub	sp, #28
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	3314      	adds	r3, #20
 8002834:	461a      	mov	r2, r3
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	0e5b      	lsrs	r3, r3, #25
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	4413      	add	r3, r2
 8002842:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	0d1b      	lsrs	r3, r3, #20
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	2107      	movs	r1, #7
 8002852:	fa01 f303 	lsl.w	r3, r1, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	401a      	ands	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	0d1b      	lsrs	r3, r3, #20
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	fa01 f303 	lsl.w	r3, r1, r3
 8002868:	431a      	orrs	r2, r3
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800286e:	bf00      	nop
 8002870:	371c      	adds	r7, #28
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002894:	43db      	mvns	r3, r3
 8002896:	401a      	ands	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f003 0318 	and.w	r3, r3, #24
 800289e:	4908      	ldr	r1, [pc, #32]	@ (80028c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80028a0:	40d9      	lsrs	r1, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	400b      	ands	r3, r1
 80028a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028aa:	431a      	orrs	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80028b2:	bf00      	nop
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	0007ffff 	.word	0x0007ffff

080028c4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 031f 	and.w	r3, r3, #31
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800290c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6093      	str	r3, [r2, #8]
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002930:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002934:	d101      	bne.n	800293a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002958:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800295c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002980:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002984:	d101      	bne.n	800298a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029ac:	f043 0201 	orr.w	r2, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029d4:	f043 0202 	orr.w	r2, r3, #2
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <LL_ADC_IsEnabled+0x18>
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <LL_ADC_IsEnabled+0x1a>
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d101      	bne.n	8002a26 <LL_ADC_IsDisableOngoing+0x18>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <LL_ADC_IsDisableOngoing+0x1a>
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d101      	bne.n	8002a4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e000      	b.n	8002a4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d101      	bne.n	8002a72 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a80:	b590      	push	{r4, r7, lr}
 8002a82:	b089      	sub	sp, #36	@ 0x24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e167      	b.n	8002d6a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d109      	bne.n	8002abc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7fe fbfd 	bl	80012a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff ff2d 	bl	8002920 <LL_ADC_IsDeepPowerDownEnabled>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d004      	beq.n	8002ad6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff ff13 	bl	80028fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff ff48 	bl	8002970 <LL_ADC_IsInternalRegulatorEnabled>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d115      	bne.n	8002b12 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff ff2c 	bl	8002948 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002af0:	4ba0      	ldr	r3, [pc, #640]	@ (8002d74 <HAL_ADC_Init+0x2f4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	099b      	lsrs	r3, r3, #6
 8002af6:	4aa0      	ldr	r2, [pc, #640]	@ (8002d78 <HAL_ADC_Init+0x2f8>)
 8002af8:	fba2 2303 	umull	r2, r3, r2, r3
 8002afc:	099b      	lsrs	r3, r3, #6
 8002afe:	3301      	adds	r3, #1
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b04:	e002      	b.n	8002b0c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f9      	bne.n	8002b06 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff ff2a 	bl	8002970 <LL_ADC_IsInternalRegulatorEnabled>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10d      	bne.n	8002b3e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b26:	f043 0210 	orr.w	r2, r3, #16
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b32:	f043 0201 	orr.w	r2, r3, #1
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff ff76 	bl	8002a34 <LL_ADC_REG_IsConversionOngoing>
 8002b48:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f040 8100 	bne.w	8002d58 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f040 80fc 	bne.w	8002d58 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b64:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002b68:	f043 0202 	orr.w	r2, r3, #2
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff ff37 	bl	80029e8 <LL_ADC_IsEnabled>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d111      	bne.n	8002ba4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b80:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002b84:	f7ff ff30 	bl	80029e8 <LL_ADC_IsEnabled>
 8002b88:	4604      	mov	r4, r0
 8002b8a:	487c      	ldr	r0, [pc, #496]	@ (8002d7c <HAL_ADC_Init+0x2fc>)
 8002b8c:	f7ff ff2c 	bl	80029e8 <LL_ADC_IsEnabled>
 8002b90:	4603      	mov	r3, r0
 8002b92:	4323      	orrs	r3, r4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d105      	bne.n	8002ba4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4878      	ldr	r0, [pc, #480]	@ (8002d80 <HAL_ADC_Init+0x300>)
 8002ba0:	f7ff fd1c 	bl	80025dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	7f5b      	ldrb	r3, [r3, #29]
 8002ba8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bae:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002bb4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002bba:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002bc2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d106      	bne.n	8002be0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	045b      	lsls	r3, r3, #17
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d009      	beq.n	8002bfc <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bec:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	4b60      	ldr	r3, [pc, #384]	@ (8002d84 <HAL_ADC_Init+0x304>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6812      	ldr	r2, [r2, #0]
 8002c0a:	69b9      	ldr	r1, [r7, #24]
 8002c0c:	430b      	orrs	r3, r1
 8002c0e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff ff15 	bl	8002a5a <LL_ADC_INJ_IsConversionOngoing>
 8002c30:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d16d      	bne.n	8002d14 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d16a      	bne.n	8002d14 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c42:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c4a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c5a:	f023 0302 	bic.w	r3, r3, #2
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	69b9      	ldr	r1, [r7, #24]
 8002c64:	430b      	orrs	r3, r1
 8002c66:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d017      	beq.n	8002ca0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691a      	ldr	r2, [r3, #16]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002c7e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002c88:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002c8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6911      	ldr	r1, [r2, #16]
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002c9e:	e013      	b.n	8002cc8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002cae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002cc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cc4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d118      	bne.n	8002d04 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002cdc:	f023 0304 	bic.w	r3, r3, #4
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ce8:	4311      	orrs	r1, r2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002cee:	4311      	orrs	r1, r2
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f042 0201 	orr.w	r2, r2, #1
 8002d00:	611a      	str	r2, [r3, #16]
 8002d02:	e007      	b.n	8002d14 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691a      	ldr	r2, [r3, #16]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0201 	bic.w	r2, r2, #1
 8002d12:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d10c      	bne.n	8002d36 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d22:	f023 010f 	bic.w	r1, r3, #15
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	1e5a      	subs	r2, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d34:	e007      	b.n	8002d46 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 020f 	bic.w	r2, r2, #15
 8002d44:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d4a:	f023 0303 	bic.w	r3, r3, #3
 8002d4e:	f043 0201 	orr.w	r2, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d56:	e007      	b.n	8002d68 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d5c:	f043 0210 	orr.w	r2, r3, #16
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d68:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3724      	adds	r7, #36	@ 0x24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd90      	pop	{r4, r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000000 	.word	0x20000000
 8002d78:	053e2d63 	.word	0x053e2d63
 8002d7c:	50000100 	.word	0x50000100
 8002d80:	50000300 	.word	0x50000300
 8002d84:	fff04007 	.word	0xfff04007

08002d88 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08a      	sub	sp, #40	@ 0x28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002d90:	2300      	movs	r3, #0
 8002d92:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002da4:	4883      	ldr	r0, [pc, #524]	@ (8002fb4 <HAL_ADC_IRQHandler+0x22c>)
 8002da6:	f7ff fd8d 	bl	80028c4 <LL_ADC_GetMultimode>
 8002daa:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d017      	beq.n	8002de6 <HAL_ADC_IRQHandler+0x5e>
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d012      	beq.n	8002de6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d105      	bne.n	8002dd8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd0:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f001 fa9d 	bl	8004318 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2202      	movs	r2, #2
 8002de4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d004      	beq.n	8002dfa <HAL_ADC_IRQHandler+0x72>
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10a      	bne.n	8002e10 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 8085 	beq.w	8002f10 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	f003 0308 	and.w	r3, r3, #8
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d07f      	beq.n	8002f10 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d105      	bne.n	8002e28 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e20:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff fca7 	bl	8002780 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d064      	beq.n	8002f02 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a5e      	ldr	r2, [pc, #376]	@ (8002fb8 <HAL_ADC_IRQHandler+0x230>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d002      	beq.n	8002e48 <HAL_ADC_IRQHandler+0xc0>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	e001      	b.n	8002e4c <HAL_ADC_IRQHandler+0xc4>
 8002e48:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d008      	beq.n	8002e66 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2b05      	cmp	r3, #5
 8002e5e:	d002      	beq.n	8002e66 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2b09      	cmp	r3, #9
 8002e64:	d104      	bne.n	8002e70 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	623b      	str	r3, [r7, #32]
 8002e6e:	e00d      	b.n	8002e8c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a50      	ldr	r2, [pc, #320]	@ (8002fb8 <HAL_ADC_IRQHandler+0x230>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d002      	beq.n	8002e80 <HAL_ADC_IRQHandler+0xf8>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	e001      	b.n	8002e84 <HAL_ADC_IRQHandler+0xfc>
 8002e80:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e84:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d135      	bne.n	8002f02 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d12e      	bne.n	8002f02 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fdc3 	bl	8002a34 <LL_ADC_REG_IsConversionOngoing>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d11a      	bne.n	8002eea <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 020c 	bic.w	r2, r2, #12
 8002ec2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d112      	bne.n	8002f02 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee0:	f043 0201 	orr.w	r2, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ee8:	e00b      	b.n	8002f02 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eee:	f043 0210 	orr.w	r2, r3, #16
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002efa:	f043 0201 	orr.w	r2, r3, #1
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f95a 	bl	80031bc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	220c      	movs	r2, #12
 8002f0e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d004      	beq.n	8002f24 <HAL_ADC_IRQHandler+0x19c>
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	f003 0320 	and.w	r3, r3, #32
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10b      	bne.n	8002f3c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 809e 	beq.w	800306c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 8098 	beq.w	800306c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f40:	f003 0310 	and.w	r3, r3, #16
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d105      	bne.n	8002f54 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f4c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff fc50 	bl	80027fe <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002f5e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff fc0b 	bl	8002780 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f6a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a11      	ldr	r2, [pc, #68]	@ (8002fb8 <HAL_ADC_IRQHandler+0x230>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d002      	beq.n	8002f7c <HAL_ADC_IRQHandler+0x1f4>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	e001      	b.n	8002f80 <HAL_ADC_IRQHandler+0x1f8>
 8002f7c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d008      	beq.n	8002f9a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d005      	beq.n	8002f9a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2b06      	cmp	r3, #6
 8002f92:	d002      	beq.n	8002f9a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	2b07      	cmp	r3, #7
 8002f98:	d104      	bne.n	8002fa4 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	623b      	str	r3, [r7, #32]
 8002fa2:	e011      	b.n	8002fc8 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a03      	ldr	r2, [pc, #12]	@ (8002fb8 <HAL_ADC_IRQHandler+0x230>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d006      	beq.n	8002fbc <HAL_ADC_IRQHandler+0x234>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	e005      	b.n	8002fc0 <HAL_ADC_IRQHandler+0x238>
 8002fb4:	50000300 	.word	0x50000300
 8002fb8:	50000100 	.word	0x50000100
 8002fbc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002fc0:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d047      	beq.n	800305e <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d007      	beq.n	8002fe8 <HAL_ADC_IRQHandler+0x260>
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d03f      	beq.n	800305e <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d13a      	bne.n	800305e <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ff2:	2b40      	cmp	r3, #64	@ 0x40
 8002ff4:	d133      	bne.n	800305e <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d12e      	bne.n	800305e <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff fd28 	bl	8002a5a <LL_ADC_INJ_IsConversionOngoing>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d11a      	bne.n	8003046 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800301e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003024:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003034:	2b00      	cmp	r3, #0
 8003036:	d112      	bne.n	800305e <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303c:	f043 0201 	orr.w	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003044:	e00b      	b.n	800305e <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304a:	f043 0210 	orr.w	r2, r3, #16
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003056:	f043 0201 	orr.w	r2, r3, #1
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f008 ffbe 	bl	800bfe0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2260      	movs	r2, #96	@ 0x60
 800306a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003072:	2b00      	cmp	r3, #0
 8003074:	d011      	beq.n	800309a <HAL_ADC_IRQHandler+0x312>
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00c      	beq.n	800309a <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003084:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f89f 	bl	80031d0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2280      	movs	r2, #128	@ 0x80
 8003098:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d012      	beq.n	80030ca <HAL_ADC_IRQHandler+0x342>
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00d      	beq.n	80030ca <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f001 f918 	bl	80042f0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030c8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d012      	beq.n	80030fa <HAL_ADC_IRQHandler+0x372>
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00d      	beq.n	80030fa <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f001 f90a 	bl	8004304 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f003 0310 	and.w	r3, r3, #16
 8003100:	2b00      	cmp	r3, #0
 8003102:	d036      	beq.n	8003172 <HAL_ADC_IRQHandler+0x3ea>
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	f003 0310 	and.w	r3, r3, #16
 800310a:	2b00      	cmp	r3, #0
 800310c:	d031      	beq.n	8003172 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003112:	2b00      	cmp	r3, #0
 8003114:	d102      	bne.n	800311c <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8003116:	2301      	movs	r3, #1
 8003118:	627b      	str	r3, [r7, #36]	@ 0x24
 800311a:	e014      	b.n	8003146 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d008      	beq.n	8003134 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003122:	4825      	ldr	r0, [pc, #148]	@ (80031b8 <HAL_ADC_IRQHandler+0x430>)
 8003124:	f7ff fbdc 	bl	80028e0 <LL_ADC_GetMultiDMATransfer>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00b      	beq.n	8003146 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800312e:	2301      	movs	r3, #1
 8003130:	627b      	str	r3, [r7, #36]	@ 0x24
 8003132:	e008      	b.n	8003146 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003142:	2301      	movs	r3, #1
 8003144:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003148:	2b01      	cmp	r3, #1
 800314a:	d10e      	bne.n	800316a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003150:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800315c:	f043 0202 	orr.w	r2, r3, #2
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f83d 	bl	80031e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2210      	movs	r2, #16
 8003170:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003178:	2b00      	cmp	r3, #0
 800317a:	d018      	beq.n	80031ae <HAL_ADC_IRQHandler+0x426>
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003182:	2b00      	cmp	r3, #0
 8003184:	d013      	beq.n	80031ae <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003196:	f043 0208 	orr.w	r2, r3, #8
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031a6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f001 f897 	bl	80042dc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80031ae:	bf00      	nop
 80031b0:	3728      	adds	r7, #40	@ 0x28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	50000300 	.word	0x50000300

080031bc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b0b6      	sub	sp, #216	@ 0xd8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003208:	2300      	movs	r3, #0
 800320a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003212:	2b01      	cmp	r3, #1
 8003214:	d101      	bne.n	800321a <HAL_ADC_ConfigChannel+0x22>
 8003216:	2302      	movs	r3, #2
 8003218:	e3c8      	b.n	80039ac <HAL_ADC_ConfigChannel+0x7b4>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff fc04 	bl	8002a34 <LL_ADC_REG_IsConversionOngoing>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	f040 83ad 	bne.w	800398e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	6859      	ldr	r1, [r3, #4]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	461a      	mov	r2, r3
 8003242:	f7ff fab0 	bl	80027a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff fbf2 	bl	8002a34 <LL_ADC_REG_IsConversionOngoing>
 8003250:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff fbfe 	bl	8002a5a <LL_ADC_INJ_IsConversionOngoing>
 800325e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003262:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003266:	2b00      	cmp	r3, #0
 8003268:	f040 81d9 	bne.w	800361e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800326c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003270:	2b00      	cmp	r3, #0
 8003272:	f040 81d4 	bne.w	800361e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800327e:	d10f      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2200      	movs	r2, #0
 800328a:	4619      	mov	r1, r3
 800328c:	f7ff faca 	bl	8002824 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff fa5e 	bl	800275a <LL_ADC_SetSamplingTimeCommonConfig>
 800329e:	e00e      	b.n	80032be <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	6819      	ldr	r1, [r3, #0]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	461a      	mov	r2, r3
 80032ae:	f7ff fab9 	bl	8002824 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fa4e 	bl	800275a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	695a      	ldr	r2, [r3, #20]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	08db      	lsrs	r3, r3, #3
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d022      	beq.n	8003326 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6818      	ldr	r0, [r3, #0]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	6919      	ldr	r1, [r3, #16]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80032f0:	f7ff f9a8 	bl	8002644 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6818      	ldr	r0, [r3, #0]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	6919      	ldr	r1, [r3, #16]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	461a      	mov	r2, r3
 8003302:	f7ff f9f4 	bl	80026ee <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003312:	2b01      	cmp	r3, #1
 8003314:	d102      	bne.n	800331c <HAL_ADC_ConfigChannel+0x124>
 8003316:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800331a:	e000      	b.n	800331e <HAL_ADC_ConfigChannel+0x126>
 800331c:	2300      	movs	r3, #0
 800331e:	461a      	mov	r2, r3
 8003320:	f7ff fa00 	bl	8002724 <LL_ADC_SetOffsetSaturation>
 8003324:	e17b      	b.n	800361e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2100      	movs	r1, #0
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff f9ad 	bl	800268c <LL_ADC_GetOffsetChannel>
 8003332:	4603      	mov	r3, r0
 8003334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10a      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x15a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2100      	movs	r1, #0
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff f9a2 	bl	800268c <LL_ADC_GetOffsetChannel>
 8003348:	4603      	mov	r3, r0
 800334a:	0e9b      	lsrs	r3, r3, #26
 800334c:	f003 021f 	and.w	r2, r3, #31
 8003350:	e01e      	b.n	8003390 <HAL_ADC_ConfigChannel+0x198>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2100      	movs	r1, #0
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff f997 	bl	800268c <LL_ADC_GetOffsetChannel>
 800335e:	4603      	mov	r3, r0
 8003360:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003364:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003368:	fa93 f3a3 	rbit	r3, r3
 800336c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003370:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003374:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003378:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003380:	2320      	movs	r3, #32
 8003382:	e004      	b.n	800338e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003384:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003388:	fab3 f383 	clz	r3, r3
 800338c:	b2db      	uxtb	r3, r3
 800338e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003398:	2b00      	cmp	r3, #0
 800339a:	d105      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x1b0>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	0e9b      	lsrs	r3, r3, #26
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	e018      	b.n	80033da <HAL_ADC_ConfigChannel+0x1e2>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80033b4:	fa93 f3a3 	rbit	r3, r3
 80033b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80033bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80033c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80033cc:	2320      	movs	r3, #32
 80033ce:	e004      	b.n	80033da <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80033d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80033d4:	fab3 f383 	clz	r3, r3
 80033d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033da:	429a      	cmp	r2, r3
 80033dc:	d106      	bne.n	80033ec <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2200      	movs	r2, #0
 80033e4:	2100      	movs	r1, #0
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff f966 	bl	80026b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2101      	movs	r1, #1
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff f94a 	bl	800268c <LL_ADC_GetOffsetChannel>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10a      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x220>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2101      	movs	r1, #1
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff f93f 	bl	800268c <LL_ADC_GetOffsetChannel>
 800340e:	4603      	mov	r3, r0
 8003410:	0e9b      	lsrs	r3, r3, #26
 8003412:	f003 021f 	and.w	r2, r3, #31
 8003416:	e01e      	b.n	8003456 <HAL_ADC_ConfigChannel+0x25e>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2101      	movs	r1, #1
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff f934 	bl	800268c <LL_ADC_GetOffsetChannel>
 8003424:	4603      	mov	r3, r0
 8003426:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800342e:	fa93 f3a3 	rbit	r3, r3
 8003432:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003436:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800343a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800343e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003446:	2320      	movs	r3, #32
 8003448:	e004      	b.n	8003454 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800344a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800344e:	fab3 f383 	clz	r3, r3
 8003452:	b2db      	uxtb	r3, r3
 8003454:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800345e:	2b00      	cmp	r3, #0
 8003460:	d105      	bne.n	800346e <HAL_ADC_ConfigChannel+0x276>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	0e9b      	lsrs	r3, r3, #26
 8003468:	f003 031f 	and.w	r3, r3, #31
 800346c:	e018      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x2a8>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800347a:	fa93 f3a3 	rbit	r3, r3
 800347e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003482:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003486:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800348a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003492:	2320      	movs	r3, #32
 8003494:	e004      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003496:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800349a:	fab3 f383 	clz	r3, r3
 800349e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d106      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2200      	movs	r2, #0
 80034aa:	2101      	movs	r1, #1
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff f903 	bl	80026b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2102      	movs	r1, #2
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff f8e7 	bl	800268c <LL_ADC_GetOffsetChannel>
 80034be:	4603      	mov	r3, r0
 80034c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10a      	bne.n	80034de <HAL_ADC_ConfigChannel+0x2e6>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2102      	movs	r1, #2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff f8dc 	bl	800268c <LL_ADC_GetOffsetChannel>
 80034d4:	4603      	mov	r3, r0
 80034d6:	0e9b      	lsrs	r3, r3, #26
 80034d8:	f003 021f 	and.w	r2, r3, #31
 80034dc:	e01e      	b.n	800351c <HAL_ADC_ConfigChannel+0x324>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2102      	movs	r1, #2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff f8d1 	bl	800268c <LL_ADC_GetOffsetChannel>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034f4:	fa93 f3a3 	rbit	r3, r3
 80034f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80034fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003500:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003504:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800350c:	2320      	movs	r3, #32
 800350e:	e004      	b.n	800351a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003510:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003514:	fab3 f383 	clz	r3, r3
 8003518:	b2db      	uxtb	r3, r3
 800351a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003524:	2b00      	cmp	r3, #0
 8003526:	d105      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x33c>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	0e9b      	lsrs	r3, r3, #26
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	e016      	b.n	8003562 <HAL_ADC_ConfigChannel+0x36a>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003540:	fa93 f3a3 	rbit	r3, r3
 8003544:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003546:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003548:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800354c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003554:	2320      	movs	r3, #32
 8003556:	e004      	b.n	8003562 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003558:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800355c:	fab3 f383 	clz	r3, r3
 8003560:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003562:	429a      	cmp	r2, r3
 8003564:	d106      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2200      	movs	r2, #0
 800356c:	2102      	movs	r1, #2
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff f8a2 	bl	80026b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2103      	movs	r1, #3
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff f886 	bl	800268c <LL_ADC_GetOffsetChannel>
 8003580:	4603      	mov	r3, r0
 8003582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10a      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x3a8>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2103      	movs	r1, #3
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff f87b 	bl	800268c <LL_ADC_GetOffsetChannel>
 8003596:	4603      	mov	r3, r0
 8003598:	0e9b      	lsrs	r3, r3, #26
 800359a:	f003 021f 	and.w	r2, r3, #31
 800359e:	e017      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x3d8>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2103      	movs	r1, #3
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff f870 	bl	800268c <LL_ADC_GetOffsetChannel>
 80035ac:	4603      	mov	r3, r0
 80035ae:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035b2:	fa93 f3a3 	rbit	r3, r3
 80035b6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80035b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035ba:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80035bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80035c2:	2320      	movs	r3, #32
 80035c4:	e003      	b.n	80035ce <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80035c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035c8:	fab3 f383 	clz	r3, r3
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d105      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x3f0>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	0e9b      	lsrs	r3, r3, #26
 80035e2:	f003 031f 	and.w	r3, r3, #31
 80035e6:	e011      	b.n	800360c <HAL_ADC_ConfigChannel+0x414>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035f0:	fa93 f3a3 	rbit	r3, r3
 80035f4:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80035f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80035fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003600:	2320      	movs	r3, #32
 8003602:	e003      	b.n	800360c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003604:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003606:	fab3 f383 	clz	r3, r3
 800360a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800360c:	429a      	cmp	r2, r3
 800360e:	d106      	bne.n	800361e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2200      	movs	r2, #0
 8003616:	2103      	movs	r1, #3
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff f84d 	bl	80026b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff f9e0 	bl	80029e8 <LL_ADC_IsEnabled>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	f040 8140 	bne.w	80038b0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6818      	ldr	r0, [r3, #0]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	6819      	ldr	r1, [r3, #0]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	461a      	mov	r2, r3
 800363e:	f7ff f91d 	bl	800287c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	4a8f      	ldr	r2, [pc, #572]	@ (8003884 <HAL_ADC_ConfigChannel+0x68c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	f040 8131 	bne.w	80038b0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10b      	bne.n	8003676 <HAL_ADC_ConfigChannel+0x47e>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	0e9b      	lsrs	r3, r3, #26
 8003664:	3301      	adds	r3, #1
 8003666:	f003 031f 	and.w	r3, r3, #31
 800366a:	2b09      	cmp	r3, #9
 800366c:	bf94      	ite	ls
 800366e:	2301      	movls	r3, #1
 8003670:	2300      	movhi	r3, #0
 8003672:	b2db      	uxtb	r3, r3
 8003674:	e019      	b.n	80036aa <HAL_ADC_ConfigChannel+0x4b2>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800367e:	fa93 f3a3 	rbit	r3, r3
 8003682:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003684:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003686:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003688:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800368e:	2320      	movs	r3, #32
 8003690:	e003      	b.n	800369a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003692:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003694:	fab3 f383 	clz	r3, r3
 8003698:	b2db      	uxtb	r3, r3
 800369a:	3301      	adds	r3, #1
 800369c:	f003 031f 	and.w	r3, r3, #31
 80036a0:	2b09      	cmp	r3, #9
 80036a2:	bf94      	ite	ls
 80036a4:	2301      	movls	r3, #1
 80036a6:	2300      	movhi	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d079      	beq.n	80037a2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d107      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x4d2>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	0e9b      	lsrs	r3, r3, #26
 80036c0:	3301      	adds	r3, #1
 80036c2:	069b      	lsls	r3, r3, #26
 80036c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036c8:	e015      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x4fe>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036d2:	fa93 f3a3 	rbit	r3, r3
 80036d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80036d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036da:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80036dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80036e2:	2320      	movs	r3, #32
 80036e4:	e003      	b.n	80036ee <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80036e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e8:	fab3 f383 	clz	r3, r3
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	3301      	adds	r3, #1
 80036f0:	069b      	lsls	r3, r3, #26
 80036f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d109      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x51e>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	0e9b      	lsrs	r3, r3, #26
 8003708:	3301      	adds	r3, #1
 800370a:	f003 031f 	and.w	r3, r3, #31
 800370e:	2101      	movs	r1, #1
 8003710:	fa01 f303 	lsl.w	r3, r1, r3
 8003714:	e017      	b.n	8003746 <HAL_ADC_ConfigChannel+0x54e>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800371e:	fa93 f3a3 	rbit	r3, r3
 8003722:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003724:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003726:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003728:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800372e:	2320      	movs	r3, #32
 8003730:	e003      	b.n	800373a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003734:	fab3 f383 	clz	r3, r3
 8003738:	b2db      	uxtb	r3, r3
 800373a:	3301      	adds	r3, #1
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	2101      	movs	r1, #1
 8003742:	fa01 f303 	lsl.w	r3, r1, r3
 8003746:	ea42 0103 	orr.w	r1, r2, r3
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10a      	bne.n	800376c <HAL_ADC_ConfigChannel+0x574>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	0e9b      	lsrs	r3, r3, #26
 800375c:	3301      	adds	r3, #1
 800375e:	f003 021f 	and.w	r2, r3, #31
 8003762:	4613      	mov	r3, r2
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	4413      	add	r3, r2
 8003768:	051b      	lsls	r3, r3, #20
 800376a:	e018      	b.n	800379e <HAL_ADC_ConfigChannel+0x5a6>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003774:	fa93 f3a3 	rbit	r3, r3
 8003778:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800377a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800377c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800377e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003784:	2320      	movs	r3, #32
 8003786:	e003      	b.n	8003790 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800378a:	fab3 f383 	clz	r3, r3
 800378e:	b2db      	uxtb	r3, r3
 8003790:	3301      	adds	r3, #1
 8003792:	f003 021f 	and.w	r2, r3, #31
 8003796:	4613      	mov	r3, r2
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	4413      	add	r3, r2
 800379c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800379e:	430b      	orrs	r3, r1
 80037a0:	e081      	b.n	80038a6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d107      	bne.n	80037be <HAL_ADC_ConfigChannel+0x5c6>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	0e9b      	lsrs	r3, r3, #26
 80037b4:	3301      	adds	r3, #1
 80037b6:	069b      	lsls	r3, r3, #26
 80037b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037bc:	e015      	b.n	80037ea <HAL_ADC_ConfigChannel+0x5f2>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c6:	fa93 f3a3 	rbit	r3, r3
 80037ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80037cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ce:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80037d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80037d6:	2320      	movs	r3, #32
 80037d8:	e003      	b.n	80037e2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80037da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037dc:	fab3 f383 	clz	r3, r3
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	3301      	adds	r3, #1
 80037e4:	069b      	lsls	r3, r3, #26
 80037e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d109      	bne.n	800380a <HAL_ADC_ConfigChannel+0x612>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	0e9b      	lsrs	r3, r3, #26
 80037fc:	3301      	adds	r3, #1
 80037fe:	f003 031f 	and.w	r3, r3, #31
 8003802:	2101      	movs	r1, #1
 8003804:	fa01 f303 	lsl.w	r3, r1, r3
 8003808:	e017      	b.n	800383a <HAL_ADC_ConfigChannel+0x642>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	fa93 f3a3 	rbit	r3, r3
 8003816:	61fb      	str	r3, [r7, #28]
  return result;
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800381c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003822:	2320      	movs	r3, #32
 8003824:	e003      	b.n	800382e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003828:	fab3 f383 	clz	r3, r3
 800382c:	b2db      	uxtb	r3, r3
 800382e:	3301      	adds	r3, #1
 8003830:	f003 031f 	and.w	r3, r3, #31
 8003834:	2101      	movs	r1, #1
 8003836:	fa01 f303 	lsl.w	r3, r1, r3
 800383a:	ea42 0103 	orr.w	r1, r2, r3
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10d      	bne.n	8003866 <HAL_ADC_ConfigChannel+0x66e>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	0e9b      	lsrs	r3, r3, #26
 8003850:	3301      	adds	r3, #1
 8003852:	f003 021f 	and.w	r2, r3, #31
 8003856:	4613      	mov	r3, r2
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4413      	add	r3, r2
 800385c:	3b1e      	subs	r3, #30
 800385e:	051b      	lsls	r3, r3, #20
 8003860:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003864:	e01e      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x6ac>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	fa93 f3a3 	rbit	r3, r3
 8003872:	613b      	str	r3, [r7, #16]
  return result;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d104      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800387e:	2320      	movs	r3, #32
 8003880:	e006      	b.n	8003890 <HAL_ADC_ConfigChannel+0x698>
 8003882:	bf00      	nop
 8003884:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	fab3 f383 	clz	r3, r3
 800388e:	b2db      	uxtb	r3, r3
 8003890:	3301      	adds	r3, #1
 8003892:	f003 021f 	and.w	r2, r3, #31
 8003896:	4613      	mov	r3, r2
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	4413      	add	r3, r2
 800389c:	3b1e      	subs	r3, #30
 800389e:	051b      	lsls	r3, r3, #20
 80038a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038a4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038aa:	4619      	mov	r1, r3
 80038ac:	f7fe ffba 	bl	8002824 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	4b3f      	ldr	r3, [pc, #252]	@ (80039b4 <HAL_ADC_ConfigChannel+0x7bc>)
 80038b6:	4013      	ands	r3, r2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d071      	beq.n	80039a0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038bc:	483e      	ldr	r0, [pc, #248]	@ (80039b8 <HAL_ADC_ConfigChannel+0x7c0>)
 80038be:	f7fe feb3 	bl	8002628 <LL_ADC_GetCommonPathInternalCh>
 80038c2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a3c      	ldr	r2, [pc, #240]	@ (80039bc <HAL_ADC_ConfigChannel+0x7c4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d004      	beq.n	80038da <HAL_ADC_ConfigChannel+0x6e2>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a3a      	ldr	r2, [pc, #232]	@ (80039c0 <HAL_ADC_ConfigChannel+0x7c8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d127      	bne.n	800392a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d121      	bne.n	800392a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038ee:	d157      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038f8:	4619      	mov	r1, r3
 80038fa:	482f      	ldr	r0, [pc, #188]	@ (80039b8 <HAL_ADC_ConfigChannel+0x7c0>)
 80038fc:	f7fe fe81 	bl	8002602 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003900:	4b30      	ldr	r3, [pc, #192]	@ (80039c4 <HAL_ADC_ConfigChannel+0x7cc>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	099b      	lsrs	r3, r3, #6
 8003906:	4a30      	ldr	r2, [pc, #192]	@ (80039c8 <HAL_ADC_ConfigChannel+0x7d0>)
 8003908:	fba2 2303 	umull	r2, r3, r2, r3
 800390c:	099b      	lsrs	r3, r3, #6
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	4613      	mov	r3, r2
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	4413      	add	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800391a:	e002      	b.n	8003922 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	3b01      	subs	r3, #1
 8003920:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1f9      	bne.n	800391c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003928:	e03a      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a27      	ldr	r2, [pc, #156]	@ (80039cc <HAL_ADC_ConfigChannel+0x7d4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d113      	bne.n	800395c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003934:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003938:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10d      	bne.n	800395c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a22      	ldr	r2, [pc, #136]	@ (80039d0 <HAL_ADC_ConfigChannel+0x7d8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d02a      	beq.n	80039a0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800394a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800394e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003952:	4619      	mov	r1, r3
 8003954:	4818      	ldr	r0, [pc, #96]	@ (80039b8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003956:	f7fe fe54 	bl	8002602 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800395a:	e021      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a1c      	ldr	r2, [pc, #112]	@ (80039d4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d11c      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003966:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800396a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d116      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a16      	ldr	r2, [pc, #88]	@ (80039d0 <HAL_ADC_ConfigChannel+0x7d8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d011      	beq.n	80039a0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800397c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003980:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003984:	4619      	mov	r1, r3
 8003986:	480c      	ldr	r0, [pc, #48]	@ (80039b8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003988:	f7fe fe3b 	bl	8002602 <LL_ADC_SetCommonPathInternalCh>
 800398c:	e008      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003992:	f043 0220 	orr.w	r2, r3, #32
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80039a8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	37d8      	adds	r7, #216	@ 0xd8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	80080000 	.word	0x80080000
 80039b8:	50000300 	.word	0x50000300
 80039bc:	c3210000 	.word	0xc3210000
 80039c0:	90c00010 	.word	0x90c00010
 80039c4:	20000000 	.word	0x20000000
 80039c8:	053e2d63 	.word	0x053e2d63
 80039cc:	c7520000 	.word	0xc7520000
 80039d0:	50000100 	.word	0x50000100
 80039d4:	cb840000 	.word	0xcb840000

080039d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fe fffd 	bl	80029e8 <LL_ADC_IsEnabled>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d169      	bne.n	8003ac8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	4b36      	ldr	r3, [pc, #216]	@ (8003ad4 <ADC_Enable+0xfc>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00d      	beq.n	8003a1e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a06:	f043 0210 	orr.w	r2, r3, #16
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a12:	f043 0201 	orr.w	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e055      	b.n	8003aca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fe ffb8 	bl	8002998 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a28:	482b      	ldr	r0, [pc, #172]	@ (8003ad8 <ADC_Enable+0x100>)
 8003a2a:	f7fe fdfd 	bl	8002628 <LL_ADC_GetCommonPathInternalCh>
 8003a2e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003a30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d013      	beq.n	8003a60 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a38:	4b28      	ldr	r3, [pc, #160]	@ (8003adc <ADC_Enable+0x104>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	099b      	lsrs	r3, r3, #6
 8003a3e:	4a28      	ldr	r2, [pc, #160]	@ (8003ae0 <ADC_Enable+0x108>)
 8003a40:	fba2 2303 	umull	r2, r3, r2, r3
 8003a44:	099b      	lsrs	r3, r3, #6
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	4613      	mov	r3, r2
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	4413      	add	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a52:	e002      	b.n	8003a5a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1f9      	bne.n	8003a54 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a60:	f7fe fdb0 	bl	80025c4 <HAL_GetTick>
 8003a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a66:	e028      	b.n	8003aba <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fe ffbb 	bl	80029e8 <LL_ADC_IsEnabled>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d104      	bne.n	8003a82 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fe ff8b 	bl	8002998 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a82:	f7fe fd9f 	bl	80025c4 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d914      	bls.n	8003aba <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d00d      	beq.n	8003aba <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa2:	f043 0210 	orr.w	r2, r3, #16
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aae:	f043 0201 	orr.w	r2, r3, #1
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e007      	b.n	8003aca <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d1cf      	bne.n	8003a68 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	8000003f 	.word	0x8000003f
 8003ad8:	50000300 	.word	0x50000300
 8003adc:	20000000 	.word	0x20000000
 8003ae0:	053e2d63 	.word	0x053e2d63

08003ae4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fe ff8c 	bl	8002a0e <LL_ADC_IsDisableOngoing>
 8003af6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fe ff73 	bl	80029e8 <LL_ADC_IsEnabled>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d047      	beq.n	8003b98 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d144      	bne.n	8003b98 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 030d 	and.w	r3, r3, #13
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d10c      	bne.n	8003b36 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fe ff4d 	bl	80029c0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2203      	movs	r2, #3
 8003b2c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b2e:	f7fe fd49 	bl	80025c4 <HAL_GetTick>
 8003b32:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b34:	e029      	b.n	8003b8a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b3a:	f043 0210 	orr.w	r2, r3, #16
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b46:	f043 0201 	orr.w	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e023      	b.n	8003b9a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b52:	f7fe fd37 	bl	80025c4 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d914      	bls.n	8003b8a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00d      	beq.n	8003b8a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b72:	f043 0210 	orr.w	r2, r3, #16
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b7e:	f043 0201 	orr.w	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e007      	b.n	8003b9a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1dc      	bne.n	8003b52 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <LL_ADC_SetCommonPathInternalCh>:
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	609a      	str	r2, [r3, #8]
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <LL_ADC_GetCommonPathInternalCh>:
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <LL_ADC_SetOffset>:
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	3360      	adds	r3, #96	@ 0x60
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	4b08      	ldr	r3, [pc, #32]	@ (8003c28 <LL_ADC_SetOffset+0x44>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	601a      	str	r2, [r3, #0]
}
 8003c1c:	bf00      	nop
 8003c1e:	371c      	adds	r7, #28
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	03fff000 	.word	0x03fff000

08003c2c <LL_ADC_GetOffsetChannel>:
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3360      	adds	r3, #96	@ 0x60
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <LL_ADC_SetOffsetState>:
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3360      	adds	r3, #96	@ 0x60
 8003c68:	461a      	mov	r2, r3
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	601a      	str	r2, [r3, #0]
}
 8003c82:	bf00      	nop
 8003c84:	371c      	adds	r7, #28
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <LL_ADC_SetOffsetSign>:
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b087      	sub	sp, #28
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3360      	adds	r3, #96	@ 0x60
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	601a      	str	r2, [r3, #0]
}
 8003cb8:	bf00      	nop
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <LL_ADC_SetOffsetSaturation>:
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	3360      	adds	r3, #96	@ 0x60
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	601a      	str	r2, [r3, #0]
}
 8003cee:	bf00      	nop
 8003cf0:	371c      	adds	r7, #28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	615a      	str	r2, [r3, #20]
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <LL_ADC_INJ_GetTrigAuto>:
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <LL_ADC_SetChannelSamplingTime>:
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	3314      	adds	r3, #20
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	0e5b      	lsrs	r3, r3, #25
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	4413      	add	r3, r2
 8003d5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	0d1b      	lsrs	r3, r3, #20
 8003d64:	f003 031f 	and.w	r3, r3, #31
 8003d68:	2107      	movs	r1, #7
 8003d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	401a      	ands	r2, r3
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	0d1b      	lsrs	r3, r3, #20
 8003d76:	f003 031f 	and.w	r3, r3, #31
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d80:	431a      	orrs	r2, r3
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	601a      	str	r2, [r3, #0]
}
 8003d86:	bf00      	nop
 8003d88:	371c      	adds	r7, #28
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <LL_ADC_SetChannelSingleDiff>:
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dac:	43db      	mvns	r3, r3
 8003dae:	401a      	ands	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f003 0318 	and.w	r3, r3, #24
 8003db6:	4908      	ldr	r1, [pc, #32]	@ (8003dd8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003db8:	40d9      	lsrs	r1, r3
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	400b      	ands	r3, r1
 8003dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8003dca:	bf00      	nop
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	0007ffff 	.word	0x0007ffff

08003ddc <LL_ADC_GetMultimode>:
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 031f 	and.w	r3, r3, #31
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <LL_ADC_IsEnabled>:
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <LL_ADC_IsEnabled+0x18>
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e000      	b.n	8003e12 <LL_ADC_IsEnabled+0x1a>
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <LL_ADC_StartCalibration>:
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003e30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	609a      	str	r2, [r3, #8]
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <LL_ADC_IsCalibrationOnGoing>:
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e64:	d101      	bne.n	8003e6a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003e66:	2301      	movs	r3, #1
 8003e68:	e000      	b.n	8003e6c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <LL_ADC_REG_IsConversionOngoing>:
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d101      	bne.n	8003e90 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e000      	b.n	8003e92 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <LL_ADC_INJ_StartConversion>:
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003eae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003eb2:	f043 0208 	orr.w	r2, r3, #8
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	609a      	str	r2, [r3, #8]
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <LL_ADC_INJ_IsConversionOngoing>:
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d101      	bne.n	8003ede <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e000      	b.n	8003ee0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_ADCEx_Calibration_Start+0x1c>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e04d      	b.n	8003fa4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff fde7 	bl	8003ae4 <ADC_Disable>
 8003f16:	4603      	mov	r3, r0
 8003f18:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d136      	bne.n	8003f8e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f24:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003f28:	f023 0302 	bic.w	r3, r3, #2
 8003f2c:	f043 0202 	orr.w	r2, r3, #2
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6839      	ldr	r1, [r7, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff ff6f 	bl	8003e1e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f40:	e014      	b.n	8003f6c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	3301      	adds	r3, #1
 8003f46:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	4a18      	ldr	r2, [pc, #96]	@ (8003fac <HAL_ADCEx_Calibration_Start+0xc0>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d90d      	bls.n	8003f6c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f54:	f023 0312 	bic.w	r3, r3, #18
 8003f58:	f043 0210 	orr.w	r2, r3, #16
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e01b      	b.n	8003fa4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7ff ff6d 	bl	8003e50 <LL_ADC_IsCalibrationOnGoing>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1e2      	bne.n	8003f42 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f80:	f023 0303 	bic.w	r3, r3, #3
 8003f84:	f043 0201 	orr.w	r2, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f8c:	e005      	b.n	8003f9a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f92:	f043 0210 	orr.w	r2, r3, #16
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	0004de01 	.word	0x0004de01

08003fb0 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fb8:	4853      	ldr	r0, [pc, #332]	@ (8004108 <HAL_ADCEx_InjectedStart+0x158>)
 8003fba:	f7ff ff0f 	bl	8003ddc <LL_ADC_GetMultimode>
 8003fbe:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff ff7e 	bl	8003ec6 <LL_ADC_INJ_IsConversionOngoing>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e094      	b.n	80040fe <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003fde:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fe6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10a      	bne.n	8004004 <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d107      	bne.n	8004004 <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ff8:	f043 0220 	orr.w	r2, r3, #32
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e07c      	b.n	80040fe <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <HAL_ADCEx_InjectedStart+0x62>
 800400e:	2302      	movs	r3, #2
 8004010:	e075      	b.n	80040fe <HAL_ADCEx_InjectedStart+0x14e>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff fcdc 	bl	80039d8 <ADC_Enable>
 8004020:	4603      	mov	r3, r0
 8004022:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004024:	7bfb      	ldrb	r3, [r7, #15]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d164      	bne.n	80040f4 <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800402e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004032:	2b00      	cmp	r3, #0
 8004034:	d006      	beq.n	8004044 <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800403a:	f023 0208 	bic.w	r2, r3, #8
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	661a      	str	r2, [r3, #96]	@ 0x60
 8004042:	e002      	b.n	800404a <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004052:	f023 0301 	bic.w	r3, r3, #1
 8004056:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a2a      	ldr	r2, [pc, #168]	@ (800410c <HAL_ADCEx_InjectedStart+0x15c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d002      	beq.n	800406e <HAL_ADCEx_InjectedStart+0xbe>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	e001      	b.n	8004072 <HAL_ADCEx_InjectedStart+0xc2>
 800406e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6812      	ldr	r2, [r2, #0]
 8004076:	4293      	cmp	r3, r2
 8004078:	d002      	beq.n	8004080 <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d105      	bne.n	800408c <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004084:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2260      	movs	r2, #96	@ 0x60
 8004092:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a1a      	ldr	r2, [pc, #104]	@ (800410c <HAL_ADCEx_InjectedStart+0x15c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d002      	beq.n	80040ac <HAL_ADCEx_InjectedStart+0xfc>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	e001      	b.n	80040b0 <HAL_ADCEx_InjectedStart+0x100>
 80040ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d008      	beq.n	80040ca <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d005      	beq.n	80040ca <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2b06      	cmp	r3, #6
 80040c2:	d002      	beq.n	80040ca <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2b07      	cmp	r3, #7
 80040c8:	d10d      	bne.n	80040e6 <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff fe26 	bl	8003d20 <LL_ADC_INJ_GetTrigAuto>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d110      	bne.n	80040fc <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff fedd 	bl	8003e9e <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80040e4:	e00a      	b.n	80040fc <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80040f2:	e003      	b.n	80040fc <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	50000300 	.word	0x50000300
 800410c:	50000100 	.word	0x50000100

08004110 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004118:	486e      	ldr	r0, [pc, #440]	@ (80042d4 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 800411a:	f7ff fe5f 	bl	8003ddc <LL_ADC_GetMultimode>
 800411e:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff fece 	bl	8003ec6 <LL_ADC_INJ_IsConversionOngoing>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 8004130:	2302      	movs	r3, #2
 8004132:	e0ca      	b.n	80042ca <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800413e:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004146:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10a      	bne.n	8004164 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d107      	bne.n	8004164 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004158:	f043 0220 	orr.w	r2, r3, #32
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0b2      	b.n	80042ca <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800416a:	2b01      	cmp	r3, #1
 800416c:	d101      	bne.n	8004172 <HAL_ADCEx_InjectedStart_IT+0x62>
 800416e:	2302      	movs	r3, #2
 8004170:	e0ab      	b.n	80042ca <HAL_ADCEx_InjectedStart_IT+0x1ba>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7ff fc2c 	bl	80039d8 <ADC_Enable>
 8004180:	4603      	mov	r3, r0
 8004182:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004184:	7bfb      	ldrb	r3, [r7, #15]
 8004186:	2b00      	cmp	r3, #0
 8004188:	f040 809a 	bne.w	80042c0 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004194:	2b00      	cmp	r3, #0
 8004196:	d006      	beq.n	80041a6 <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800419c:	f023 0208 	bic.w	r2, r3, #8
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	661a      	str	r2, [r3, #96]	@ 0x60
 80041a4:	e002      	b.n	80041ac <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80041b4:	f023 0301 	bic.w	r3, r3, #1
 80041b8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a44      	ldr	r2, [pc, #272]	@ (80042d8 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d002      	beq.n	80041d0 <HAL_ADCEx_InjectedStart_IT+0xc0>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	e001      	b.n	80041d4 <HAL_ADCEx_InjectedStart_IT+0xc4>
 80041d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6812      	ldr	r2, [r2, #0]
 80041d8:	4293      	cmp	r3, r2
 80041da:	d002      	beq.n	80041e2 <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d105      	bne.n	80041ee <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2260      	movs	r2, #96	@ 0x60
 80041f4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d007      	beq.n	800421c <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800421a:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	2b08      	cmp	r3, #8
 8004222:	d110      	bne.n	8004246 <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0220 	bic.w	r2, r2, #32
 8004232:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004242:	605a      	str	r2, [r3, #4]
          break;
 8004244:	e010      	b.n	8004268 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004254:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f042 0220 	orr.w	r2, r2, #32
 8004264:	605a      	str	r2, [r3, #4]
          break;
 8004266:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a1a      	ldr	r2, [pc, #104]	@ (80042d8 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d002      	beq.n	8004278 <HAL_ADCEx_InjectedStart_IT+0x168>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	e001      	b.n	800427c <HAL_ADCEx_InjectedStart_IT+0x16c>
 8004278:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6812      	ldr	r2, [r2, #0]
 8004280:	4293      	cmp	r3, r2
 8004282:	d008      	beq.n	8004296 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d005      	beq.n	8004296 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2b06      	cmp	r3, #6
 800428e:	d002      	beq.n	8004296 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	2b07      	cmp	r3, #7
 8004294:	d10d      	bne.n	80042b2 <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff fd40 	bl	8003d20 <LL_ADC_INJ_GetTrigAuto>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d110      	bne.n	80042c8 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff fdf7 	bl	8003e9e <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80042b0:	e00a      	b.n	80042c8 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80042be:	e003      	b.n	80042c8 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	50000300 	.word	0x50000300
 80042d8:	50000100 	.word	0x50000100

080042dc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b0b6      	sub	sp, #216	@ 0xd8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800434c:	2b01      	cmp	r3, #1
 800434e:	d102      	bne.n	8004356 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8004350:	2302      	movs	r3, #2
 8004352:	f000 bcb5 	b.w	8004cc0 <HAL_ADCEx_InjectedConfigChannel+0x994>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800436a:	2b01      	cmp	r3, #1
 800436c:	d130      	bne.n	80043d0 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b09      	cmp	r3, #9
 8004374:	d179      	bne.n	800446a <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437a:	2b00      	cmp	r3, #0
 800437c:	d010      	beq.n	80043a0 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	0e9b      	lsrs	r3, r3, #26
 8004384:	025b      	lsls	r3, r3, #9
 8004386:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438e:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8004392:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800439e:	e007      	b.n	80043b0 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	0e9b      	lsrs	r3, r3, #26
 80043a6:	025b      	lsls	r3, r3, #9
 80043a8:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 80043ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043b6:	4b84      	ldr	r3, [pc, #528]	@ (80045c8 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80043b8:	4013      	ands	r3, r2
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6812      	ldr	r2, [r2, #0]
 80043be:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80043c2:	430b      	orrs	r3, r1
 80043c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80043cc:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80043ce:	e04c      	b.n	800446a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d11d      	bne.n	8004414 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	6a1a      	ldr	r2, [r3, #32]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00d      	beq.n	800440a <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f8:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80043fc:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004408:	e004      	b.n	8004414 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	3b01      	subs	r3, #1
 8004410:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	0e9b      	lsrs	r3, r3, #26
 800441a:	f003 021f 	and.w	r2, r3, #31
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f003 031f 	and.w	r3, r3, #31
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800442e:	4313      	orrs	r3, r2
 8004430:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004438:	1e5a      	subs	r2, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004442:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10a      	bne.n	800446a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800445a:	4b5b      	ldr	r3, [pc, #364]	@ (80045c8 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 800445c:	4013      	ands	r3, r2
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	430b      	orrs	r3, r1
 8004468:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff fd29 	bl	8003ec6 <LL_ADC_INJ_IsConversionOngoing>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d124      	bne.n	80044c4 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004480:	2b00      	cmp	r3, #0
 8004482:	d112      	bne.n	80044aa <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8004494:	055a      	lsls	r2, r3, #21
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800449c:	051b      	lsls	r3, r3, #20
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	60da      	str	r2, [r3, #12]
 80044a8:	e00c      	b.n	80044c4 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80044ba:	055a      	lsls	r2, r3, #21
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff fcd5 	bl	8003e78 <LL_ADC_REG_IsConversionOngoing>
 80044ce:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff fcf5 	bl	8003ec6 <LL_ADC_INJ_IsConversionOngoing>
 80044dc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f040 822e 	bne.w	8004946 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f040 8229 	bne.w	8004946 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004500:	2b00      	cmp	r3, #0
 8004502:	d116      	bne.n	8004532 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800450a:	2b01      	cmp	r3, #1
 800450c:	d108      	bne.n	8004520 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68da      	ldr	r2, [r3, #12]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800451c:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800451e:	e01f      	b.n	8004560 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800452e:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004530:	e016      	b.n	8004560 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004538:	2b01      	cmp	r3, #1
 800453a:	d109      	bne.n	8004550 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004540:	f043 0220 	orr.w	r2, r3, #32
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800454e:	e007      	b.n	8004560 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800455e:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004566:	2b01      	cmp	r3, #1
 8004568:	d110      	bne.n	800458c <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800457c:	430b      	orrs	r3, r1
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0202 	orr.w	r2, r2, #2
 8004588:	611a      	str	r2, [r3, #16]
 800458a:	e007      	b.n	800459c <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0202 	bic.w	r2, r2, #2
 800459a:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045a4:	d112      	bne.n	80045cc <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2200      	movs	r2, #0
 80045b0:	4619      	mov	r1, r3
 80045b2:	f7ff fbc3 	bl	8003d3c <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff fb9b 	bl	8003cfa <LL_ADC_SetSamplingTimeCommonConfig>
 80045c4:	e011      	b.n	80045ea <HAL_ADCEx_InjectedConfigChannel+0x2be>
 80045c6:	bf00      	nop
 80045c8:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80045d8:	461a      	mov	r2, r3
 80045da:	f7ff fbaf 	bl	8003d3c <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2100      	movs	r1, #0
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff fb88 	bl	8003cfa <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	695a      	ldr	r2, [r3, #20]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	08db      	lsrs	r3, r3, #3
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	2b04      	cmp	r3, #4
 800460a:	d022      	beq.n	8004652 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6818      	ldr	r0, [r3, #0]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	6919      	ldr	r1, [r3, #16]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800461c:	f7ff fae2 	bl	8003be4 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6818      	ldr	r0, [r3, #0]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	6919      	ldr	r1, [r3, #16]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	461a      	mov	r2, r3
 800462e:	f7ff fb2e 	bl	8003c8e <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6818      	ldr	r0, [r3, #0]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 800463e:	2b01      	cmp	r3, #1
 8004640:	d102      	bne.n	8004648 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8004642:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004646:	e000      	b.n	800464a <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8004648:	2300      	movs	r3, #0
 800464a:	461a      	mov	r2, r3
 800464c:	f7ff fb3a 	bl	8003cc4 <LL_ADC_SetOffsetSaturation>
 8004650:	e179      	b.n	8004946 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2100      	movs	r1, #0
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff fae7 	bl	8003c2c <LL_ADC_GetOffsetChannel>
 800465e:	4603      	mov	r3, r0
 8004660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10a      	bne.n	800467e <HAL_ADCEx_InjectedConfigChannel+0x352>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2100      	movs	r1, #0
 800466e:	4618      	mov	r0, r3
 8004670:	f7ff fadc 	bl	8003c2c <LL_ADC_GetOffsetChannel>
 8004674:	4603      	mov	r3, r0
 8004676:	0e9b      	lsrs	r3, r3, #26
 8004678:	f003 021f 	and.w	r2, r3, #31
 800467c:	e01e      	b.n	80046bc <HAL_ADCEx_InjectedConfigChannel+0x390>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2100      	movs	r1, #0
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff fad1 	bl	8003c2c <LL_ADC_GetOffsetChannel>
 800468a:	4603      	mov	r3, r0
 800468c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004690:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004694:	fa93 f3a3 	rbit	r3, r3
 8004698:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800469c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80046a0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80046a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 80046ac:	2320      	movs	r3, #32
 80046ae:	e004      	b.n	80046ba <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 80046b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80046b4:	fab3 f383 	clz	r3, r3
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d105      	bne.n	80046d4 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	0e9b      	lsrs	r3, r3, #26
 80046ce:	f003 031f 	and.w	r3, r3, #31
 80046d2:	e018      	b.n	8004706 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046e0:	fa93 f3a3 	rbit	r3, r3
 80046e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80046e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80046ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80046f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 80046f8:	2320      	movs	r3, #32
 80046fa:	e004      	b.n	8004706 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 80046fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004700:	fab3 f383 	clz	r3, r3
 8004704:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004706:	429a      	cmp	r2, r3
 8004708:	d106      	bne.n	8004718 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2200      	movs	r2, #0
 8004710:	2100      	movs	r1, #0
 8004712:	4618      	mov	r0, r3
 8004714:	f7ff faa0 	bl	8003c58 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2101      	movs	r1, #1
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff fa84 	bl	8003c2c <LL_ADC_GetOffsetChannel>
 8004724:	4603      	mov	r3, r0
 8004726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10a      	bne.n	8004744 <HAL_ADCEx_InjectedConfigChannel+0x418>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2101      	movs	r1, #1
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff fa79 	bl	8003c2c <LL_ADC_GetOffsetChannel>
 800473a:	4603      	mov	r3, r0
 800473c:	0e9b      	lsrs	r3, r3, #26
 800473e:	f003 021f 	and.w	r2, r3, #31
 8004742:	e01e      	b.n	8004782 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2101      	movs	r1, #1
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff fa6e 	bl	8003c2c <LL_ADC_GetOffsetChannel>
 8004750:	4603      	mov	r3, r0
 8004752:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004756:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800475a:	fa93 f3a3 	rbit	r3, r3
 800475e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004762:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004766:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800476a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8004772:	2320      	movs	r3, #32
 8004774:	e004      	b.n	8004780 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8004776:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800477a:	fab3 f383 	clz	r3, r3
 800477e:	b2db      	uxtb	r3, r3
 8004780:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800478a:	2b00      	cmp	r3, #0
 800478c:	d105      	bne.n	800479a <HAL_ADCEx_InjectedConfigChannel+0x46e>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	0e9b      	lsrs	r3, r3, #26
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	e018      	b.n	80047cc <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80047a6:	fa93 f3a3 	rbit	r3, r3
 80047aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80047ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80047b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80047b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 80047be:	2320      	movs	r3, #32
 80047c0:	e004      	b.n	80047cc <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 80047c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80047c6:	fab3 f383 	clz	r3, r3
 80047ca:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d106      	bne.n	80047de <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2200      	movs	r2, #0
 80047d6:	2101      	movs	r1, #1
 80047d8:	4618      	mov	r0, r3
 80047da:	f7ff fa3d 	bl	8003c58 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2102      	movs	r1, #2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7ff fa21 	bl	8003c2c <LL_ADC_GetOffsetChannel>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10a      	bne.n	800480a <HAL_ADCEx_InjectedConfigChannel+0x4de>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2102      	movs	r1, #2
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff fa16 	bl	8003c2c <LL_ADC_GetOffsetChannel>
 8004800:	4603      	mov	r3, r0
 8004802:	0e9b      	lsrs	r3, r3, #26
 8004804:	f003 021f 	and.w	r2, r3, #31
 8004808:	e01e      	b.n	8004848 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2102      	movs	r1, #2
 8004810:	4618      	mov	r0, r3
 8004812:	f7ff fa0b 	bl	8003c2c <LL_ADC_GetOffsetChannel>
 8004816:	4603      	mov	r3, r0
 8004818:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004820:	fa93 f3a3 	rbit	r3, r3
 8004824:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004828:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800482c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004830:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8004838:	2320      	movs	r3, #32
 800483a:	e004      	b.n	8004846 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 800483c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004840:	fab3 f383 	clz	r3, r3
 8004844:	b2db      	uxtb	r3, r3
 8004846:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004850:	2b00      	cmp	r3, #0
 8004852:	d105      	bne.n	8004860 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	0e9b      	lsrs	r3, r3, #26
 800485a:	f003 031f 	and.w	r3, r3, #31
 800485e:	e014      	b.n	800488a <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004866:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004868:	fa93 f3a3 	rbit	r3, r3
 800486c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800486e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004870:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004874:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 800487c:	2320      	movs	r3, #32
 800487e:	e004      	b.n	800488a <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004880:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004884:	fab3 f383 	clz	r3, r3
 8004888:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800488a:	429a      	cmp	r2, r3
 800488c:	d106      	bne.n	800489c <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2200      	movs	r2, #0
 8004894:	2102      	movs	r1, #2
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff f9de 	bl	8003c58 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2103      	movs	r1, #3
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff f9c2 	bl	8003c2c <LL_ADC_GetOffsetChannel>
 80048a8:	4603      	mov	r3, r0
 80048aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10a      	bne.n	80048c8 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2103      	movs	r1, #3
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7ff f9b7 	bl	8003c2c <LL_ADC_GetOffsetChannel>
 80048be:	4603      	mov	r3, r0
 80048c0:	0e9b      	lsrs	r3, r3, #26
 80048c2:	f003 021f 	and.w	r2, r3, #31
 80048c6:	e017      	b.n	80048f8 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2103      	movs	r1, #3
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7ff f9ac 	bl	8003c2c <LL_ADC_GetOffsetChannel>
 80048d4:	4603      	mov	r3, r0
 80048d6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048da:	fa93 f3a3 	rbit	r3, r3
 80048de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80048e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048e2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80048e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 80048ea:	2320      	movs	r3, #32
 80048ec:	e003      	b.n	80048f6 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 80048ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048f0:	fab3 f383 	clz	r3, r3
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004900:	2b00      	cmp	r3, #0
 8004902:	d105      	bne.n	8004910 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	0e9b      	lsrs	r3, r3, #26
 800490a:	f003 031f 	and.w	r3, r3, #31
 800490e:	e011      	b.n	8004934 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004916:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004918:	fa93 f3a3 	rbit	r3, r3
 800491c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800491e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004920:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004922:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8004928:	2320      	movs	r3, #32
 800492a:	e003      	b.n	8004934 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 800492c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800492e:	fab3 f383 	clz	r3, r3
 8004932:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004934:	429a      	cmp	r2, r3
 8004936:	d106      	bne.n	8004946 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2200      	movs	r2, #0
 800493e:	2103      	movs	r1, #3
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff f989 	bl	8003c58 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff fa54 	bl	8003df8 <LL_ADC_IsEnabled>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	f040 8140 	bne.w	8004bd8 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6818      	ldr	r0, [r3, #0]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	6819      	ldr	r1, [r3, #0]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	461a      	mov	r2, r3
 8004966:	f7ff fa15 	bl	8003d94 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	4a8f      	ldr	r2, [pc, #572]	@ (8004bac <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8004970:	4293      	cmp	r3, r2
 8004972:	f040 8131 	bne.w	8004bd8 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10b      	bne.n	800499e <HAL_ADCEx_InjectedConfigChannel+0x672>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	0e9b      	lsrs	r3, r3, #26
 800498c:	3301      	adds	r3, #1
 800498e:	f003 031f 	and.w	r3, r3, #31
 8004992:	2b09      	cmp	r3, #9
 8004994:	bf94      	ite	ls
 8004996:	2301      	movls	r3, #1
 8004998:	2300      	movhi	r3, #0
 800499a:	b2db      	uxtb	r3, r3
 800499c:	e019      	b.n	80049d2 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049a6:	fa93 f3a3 	rbit	r3, r3
 80049aa:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80049ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80049b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 80049b6:	2320      	movs	r3, #32
 80049b8:	e003      	b.n	80049c2 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 80049ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049bc:	fab3 f383 	clz	r3, r3
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	3301      	adds	r3, #1
 80049c4:	f003 031f 	and.w	r3, r3, #31
 80049c8:	2b09      	cmp	r3, #9
 80049ca:	bf94      	ite	ls
 80049cc:	2301      	movls	r3, #1
 80049ce:	2300      	movhi	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d079      	beq.n	8004aca <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d107      	bne.n	80049f2 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	0e9b      	lsrs	r3, r3, #26
 80049e8:	3301      	adds	r3, #1
 80049ea:	069b      	lsls	r3, r3, #26
 80049ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80049f0:	e015      	b.n	8004a1e <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049fa:	fa93 f3a3 	rbit	r3, r3
 80049fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004a00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a02:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004a04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8004a0a:	2320      	movs	r3, #32
 8004a0c:	e003      	b.n	8004a16 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8004a0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a10:	fab3 f383 	clz	r3, r3
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	3301      	adds	r3, #1
 8004a18:	069b      	lsls	r3, r3, #26
 8004a1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d109      	bne.n	8004a3e <HAL_ADCEx_InjectedConfigChannel+0x712>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	0e9b      	lsrs	r3, r3, #26
 8004a30:	3301      	adds	r3, #1
 8004a32:	f003 031f 	and.w	r3, r3, #31
 8004a36:	2101      	movs	r1, #1
 8004a38:	fa01 f303 	lsl.w	r3, r1, r3
 8004a3c:	e017      	b.n	8004a6e <HAL_ADCEx_InjectedConfigChannel+0x742>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a46:	fa93 f3a3 	rbit	r3, r3
 8004a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004a4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a4e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004a50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8004a56:	2320      	movs	r3, #32
 8004a58:	e003      	b.n	8004a62 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8004a5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a5c:	fab3 f383 	clz	r3, r3
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	3301      	adds	r3, #1
 8004a64:	f003 031f 	and.w	r3, r3, #31
 8004a68:	2101      	movs	r1, #1
 8004a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6e:	ea42 0103 	orr.w	r1, r2, r3
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10a      	bne.n	8004a94 <HAL_ADCEx_InjectedConfigChannel+0x768>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	0e9b      	lsrs	r3, r3, #26
 8004a84:	3301      	adds	r3, #1
 8004a86:	f003 021f 	and.w	r2, r3, #31
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	4413      	add	r3, r2
 8004a90:	051b      	lsls	r3, r3, #20
 8004a92:	e018      	b.n	8004ac6 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a9c:	fa93 f3a3 	rbit	r3, r3
 8004aa0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8004aac:	2320      	movs	r3, #32
 8004aae:	e003      	b.n	8004ab8 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8004ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab2:	fab3 f383 	clz	r3, r3
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	3301      	adds	r3, #1
 8004aba:	f003 021f 	and.w	r2, r3, #31
 8004abe:	4613      	mov	r3, r2
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	4413      	add	r3, r2
 8004ac4:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ac6:	430b      	orrs	r3, r1
 8004ac8:	e081      	b.n	8004bce <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d107      	bne.n	8004ae6 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	0e9b      	lsrs	r3, r3, #26
 8004adc:	3301      	adds	r3, #1
 8004ade:	069b      	lsls	r3, r3, #26
 8004ae0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ae4:	e015      	b.n	8004b12 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aee:	fa93 f3a3 	rbit	r3, r3
 8004af2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8004afe:	2320      	movs	r3, #32
 8004b00:	e003      	b.n	8004b0a <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8004b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b04:	fab3 f383 	clz	r3, r3
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	069b      	lsls	r3, r3, #26
 8004b0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d109      	bne.n	8004b32 <HAL_ADCEx_InjectedConfigChannel+0x806>
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	0e9b      	lsrs	r3, r3, #26
 8004b24:	3301      	adds	r3, #1
 8004b26:	f003 031f 	and.w	r3, r3, #31
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b30:	e017      	b.n	8004b62 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	fa93 f3a3 	rbit	r3, r3
 8004b3e:	61bb      	str	r3, [r7, #24]
  return result;
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8004b4a:	2320      	movs	r3, #32
 8004b4c:	e003      	b.n	8004b56 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8004b4e:	6a3b      	ldr	r3, [r7, #32]
 8004b50:	fab3 f383 	clz	r3, r3
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	3301      	adds	r3, #1
 8004b58:	f003 031f 	and.w	r3, r3, #31
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b62:	ea42 0103 	orr.w	r1, r2, r3
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10d      	bne.n	8004b8e <HAL_ADCEx_InjectedConfigChannel+0x862>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	0e9b      	lsrs	r3, r3, #26
 8004b78:	3301      	adds	r3, #1
 8004b7a:	f003 021f 	and.w	r2, r3, #31
 8004b7e:	4613      	mov	r3, r2
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	4413      	add	r3, r2
 8004b84:	3b1e      	subs	r3, #30
 8004b86:	051b      	lsls	r3, r3, #20
 8004b88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004b8c:	e01e      	b.n	8004bcc <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	fa93 f3a3 	rbit	r3, r3
 8004b9a:	60fb      	str	r3, [r7, #12]
  return result;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d104      	bne.n	8004bb0 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 8004ba6:	2320      	movs	r3, #32
 8004ba8:	e006      	b.n	8004bb8 <HAL_ADCEx_InjectedConfigChannel+0x88c>
 8004baa:	bf00      	nop
 8004bac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	fab3 f383 	clz	r3, r3
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	3301      	adds	r3, #1
 8004bba:	f003 021f 	and.w	r2, r3, #31
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	4413      	add	r3, r2
 8004bc4:	3b1e      	subs	r3, #30
 8004bc6:	051b      	lsls	r3, r3, #20
 8004bc8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bcc:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	f7ff f8b2 	bl	8003d3c <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	4b3a      	ldr	r3, [pc, #232]	@ (8004cc8 <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d067      	beq.n	8004cb4 <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004be4:	4839      	ldr	r0, [pc, #228]	@ (8004ccc <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004be6:	f7fe ffef 	bl	8003bc8 <LL_ADC_GetCommonPathInternalCh>
 8004bea:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a37      	ldr	r2, [pc, #220]	@ (8004cd0 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d004      	beq.n	8004c02 <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a35      	ldr	r2, [pc, #212]	@ (8004cd4 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d127      	bne.n	8004c52 <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d121      	bne.n	8004c52 <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c16:	d14d      	bne.n	8004cb4 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c20:	4619      	mov	r1, r3
 8004c22:	482a      	ldr	r0, [pc, #168]	@ (8004ccc <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004c24:	f7fe ffbd 	bl	8003ba2 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004c28:	4b2b      	ldr	r3, [pc, #172]	@ (8004cd8 <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	099b      	lsrs	r3, r3, #6
 8004c2e:	4a2b      	ldr	r2, [pc, #172]	@ (8004cdc <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8004c30:	fba2 2303 	umull	r2, r3, r2, r3
 8004c34:	099a      	lsrs	r2, r3, #6
 8004c36:	4613      	mov	r3, r2
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	4413      	add	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004c40:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004c42:	e002      	b.n	8004c4a <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1f9      	bne.n	8004c44 <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c50:	e030      	b.n	8004cb4 <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a22      	ldr	r2, [pc, #136]	@ (8004ce0 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d113      	bne.n	8004c84 <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10d      	bne.n	8004c84 <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ce4 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d020      	beq.n	8004cb4 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	4813      	ldr	r0, [pc, #76]	@ (8004ccc <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004c7e:	f7fe ff90 	bl	8003ba2 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c82:	e017      	b.n	8004cb4 <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a17      	ldr	r2, [pc, #92]	@ (8004ce8 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d112      	bne.n	8004cb4 <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10c      	bne.n	8004cb4 <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a11      	ldr	r2, [pc, #68]	@ (8004ce4 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d007      	beq.n	8004cb4 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ca4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ca8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004cac:	4619      	mov	r1, r3
 8004cae:	4807      	ldr	r0, [pc, #28]	@ (8004ccc <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004cb0:	f7fe ff77 	bl	8003ba2 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004cbc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	37d8      	adds	r7, #216	@ 0xd8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	80080000 	.word	0x80080000
 8004ccc:	50000300 	.word	0x50000300
 8004cd0:	c3210000 	.word	0xc3210000
 8004cd4:	90c00010 	.word	0x90c00010
 8004cd8:	20000000 	.word	0x20000000
 8004cdc:	053e2d63 	.word	0x053e2d63
 8004ce0:	c7520000 	.word	0xc7520000
 8004ce4:	50000100 	.word	0x50000100
 8004ce8:	cb840000 	.word	0xcb840000

08004cec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004cec:	b590      	push	{r4, r7, lr}
 8004cee:	b0a1      	sub	sp, #132	@ 0x84
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d101      	bne.n	8004d0a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004d06:	2302      	movs	r3, #2
 8004d08:	e08b      	b.n	8004e22 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004d12:	2300      	movs	r3, #0
 8004d14:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004d16:	2300      	movs	r3, #0
 8004d18:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d22:	d102      	bne.n	8004d2a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004d24:	4b41      	ldr	r3, [pc, #260]	@ (8004e2c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004d26:	60bb      	str	r3, [r7, #8]
 8004d28:	e001      	b.n	8004d2e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10b      	bne.n	8004d4c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d38:	f043 0220 	orr.w	r2, r3, #32
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e06a      	b.n	8004e22 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff f892 	bl	8003e78 <LL_ADC_REG_IsConversionOngoing>
 8004d54:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff f88c 	bl	8003e78 <LL_ADC_REG_IsConversionOngoing>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d14c      	bne.n	8004e00 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004d66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d149      	bne.n	8004e00 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004d6c:	4b30      	ldr	r3, [pc, #192]	@ (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004d6e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d028      	beq.n	8004dca <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004d78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	6859      	ldr	r1, [r3, #4]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d8a:	035b      	lsls	r3, r3, #13
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d92:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d94:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004d98:	f7ff f82e 	bl	8003df8 <LL_ADC_IsEnabled>
 8004d9c:	4604      	mov	r4, r0
 8004d9e:	4823      	ldr	r0, [pc, #140]	@ (8004e2c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004da0:	f7ff f82a 	bl	8003df8 <LL_ADC_IsEnabled>
 8004da4:	4603      	mov	r3, r0
 8004da6:	4323      	orrs	r3, r4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d133      	bne.n	8004e14 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004dac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004db4:	f023 030f 	bic.w	r3, r3, #15
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	6811      	ldr	r1, [r2, #0]
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	6892      	ldr	r2, [r2, #8]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dc6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004dc8:	e024      	b.n	8004e14 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004dca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004dd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dd4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dd6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004dda:	f7ff f80d 	bl	8003df8 <LL_ADC_IsEnabled>
 8004dde:	4604      	mov	r4, r0
 8004de0:	4812      	ldr	r0, [pc, #72]	@ (8004e2c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004de2:	f7ff f809 	bl	8003df8 <LL_ADC_IsEnabled>
 8004de6:	4603      	mov	r3, r0
 8004de8:	4323      	orrs	r3, r4
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d112      	bne.n	8004e14 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004dee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004df6:	f023 030f 	bic.w	r3, r3, #15
 8004dfa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004dfc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004dfe:	e009      	b.n	8004e14 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e04:	f043 0220 	orr.w	r2, r3, #32
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004e12:	e000      	b.n	8004e16 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004e1e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3784      	adds	r7, #132	@ 0x84
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd90      	pop	{r4, r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	50000100 	.word	0x50000100
 8004e30:	50000300 	.word	0x50000300

08004e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e44:	4b0c      	ldr	r3, [pc, #48]	@ (8004e78 <__NVIC_SetPriorityGrouping+0x44>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e50:	4013      	ands	r3, r2
 8004e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004e60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e66:	4a04      	ldr	r2, [pc, #16]	@ (8004e78 <__NVIC_SetPriorityGrouping+0x44>)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	60d3      	str	r3, [r2, #12]
}
 8004e6c:	bf00      	nop
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	e000ed00 	.word	0xe000ed00

08004e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e80:	4b04      	ldr	r3, [pc, #16]	@ (8004e94 <__NVIC_GetPriorityGrouping+0x18>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	0a1b      	lsrs	r3, r3, #8
 8004e86:	f003 0307 	and.w	r3, r3, #7
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	e000ed00 	.word	0xe000ed00

08004e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	db0b      	blt.n	8004ec2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004eaa:	79fb      	ldrb	r3, [r7, #7]
 8004eac:	f003 021f 	and.w	r2, r3, #31
 8004eb0:	4907      	ldr	r1, [pc, #28]	@ (8004ed0 <__NVIC_EnableIRQ+0x38>)
 8004eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	2001      	movs	r0, #1
 8004eba:	fa00 f202 	lsl.w	r2, r0, r2
 8004ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	e000e100 	.word	0xe000e100

08004ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	4603      	mov	r3, r0
 8004edc:	6039      	str	r1, [r7, #0]
 8004ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	db0a      	blt.n	8004efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	490c      	ldr	r1, [pc, #48]	@ (8004f20 <__NVIC_SetPriority+0x4c>)
 8004eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef2:	0112      	lsls	r2, r2, #4
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004efc:	e00a      	b.n	8004f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	4908      	ldr	r1, [pc, #32]	@ (8004f24 <__NVIC_SetPriority+0x50>)
 8004f04:	79fb      	ldrb	r3, [r7, #7]
 8004f06:	f003 030f 	and.w	r3, r3, #15
 8004f0a:	3b04      	subs	r3, #4
 8004f0c:	0112      	lsls	r2, r2, #4
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	440b      	add	r3, r1
 8004f12:	761a      	strb	r2, [r3, #24]
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	e000e100 	.word	0xe000e100
 8004f24:	e000ed00 	.word	0xe000ed00

08004f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b089      	sub	sp, #36	@ 0x24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	f1c3 0307 	rsb	r3, r3, #7
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	bf28      	it	cs
 8004f46:	2304      	movcs	r3, #4
 8004f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	2b06      	cmp	r3, #6
 8004f50:	d902      	bls.n	8004f58 <NVIC_EncodePriority+0x30>
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	3b03      	subs	r3, #3
 8004f56:	e000      	b.n	8004f5a <NVIC_EncodePriority+0x32>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	fa02 f303 	lsl.w	r3, r2, r3
 8004f66:	43da      	mvns	r2, r3
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	401a      	ands	r2, r3
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f70:	f04f 31ff 	mov.w	r1, #4294967295
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7a:	43d9      	mvns	r1, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f80:	4313      	orrs	r3, r2
         );
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3724      	adds	r7, #36	@ 0x24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
	...

08004f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fa0:	d301      	bcc.n	8004fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e00f      	b.n	8004fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8004fd0 <SysTick_Config+0x40>)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fae:	210f      	movs	r1, #15
 8004fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb4:	f7ff ff8e 	bl	8004ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fb8:	4b05      	ldr	r3, [pc, #20]	@ (8004fd0 <SysTick_Config+0x40>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fbe:	4b04      	ldr	r3, [pc, #16]	@ (8004fd0 <SysTick_Config+0x40>)
 8004fc0:	2207      	movs	r2, #7
 8004fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	e000e010 	.word	0xe000e010

08004fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7ff ff29 	bl	8004e34 <__NVIC_SetPriorityGrouping>
}
 8004fe2:	bf00      	nop
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b086      	sub	sp, #24
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	607a      	str	r2, [r7, #4]
 8004ff6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ff8:	f7ff ff40 	bl	8004e7c <__NVIC_GetPriorityGrouping>
 8004ffc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	68b9      	ldr	r1, [r7, #8]
 8005002:	6978      	ldr	r0, [r7, #20]
 8005004:	f7ff ff90 	bl	8004f28 <NVIC_EncodePriority>
 8005008:	4602      	mov	r2, r0
 800500a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800500e:	4611      	mov	r1, r2
 8005010:	4618      	mov	r0, r3
 8005012:	f7ff ff5f 	bl	8004ed4 <__NVIC_SetPriority>
}
 8005016:	bf00      	nop
 8005018:	3718      	adds	r7, #24
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b082      	sub	sp, #8
 8005022:	af00      	add	r7, sp, #0
 8005024:	4603      	mov	r3, r0
 8005026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800502c:	4618      	mov	r0, r3
 800502e:	f7ff ff33 	bl	8004e98 <__NVIC_EnableIRQ>
}
 8005032:	bf00      	nop
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b082      	sub	sp, #8
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7ff ffa4 	bl	8004f90 <SysTick_Config>
 8005048:	4603      	mov	r3, r0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b082      	sub	sp, #8
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e014      	b.n	800508e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	791b      	ldrb	r3, [r3, #4]
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d105      	bne.n	800507a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7fc fa07 	bl	8001488 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2202      	movs	r2, #2
 800507e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
	...

08005098 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b08a      	sub	sp, #40	@ 0x28
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050a4:	2300      	movs	r3, #0
 80050a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d002      	beq.n	80050b4 <HAL_DAC_ConfigChannel+0x1c>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e19e      	b.n	80053f6 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	795b      	ldrb	r3, [r3, #5]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d101      	bne.n	80050c4 <HAL_DAC_ConfigChannel+0x2c>
 80050c0:	2302      	movs	r3, #2
 80050c2:	e198      	b.n	80053f6 <HAL_DAC_ConfigChannel+0x35e>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2201      	movs	r2, #1
 80050c8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2202      	movs	r2, #2
 80050ce:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	2b04      	cmp	r3, #4
 80050d6:	d17a      	bne.n	80051ce <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80050d8:	f7fd fa74 	bl	80025c4 <HAL_GetTick>
 80050dc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d13d      	bne.n	8005160 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80050e4:	e018      	b.n	8005118 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80050e6:	f7fd fa6d 	bl	80025c4 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d911      	bls.n	8005118 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00a      	beq.n	8005118 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f043 0208 	orr.w	r2, r3, #8
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2203      	movs	r2, #3
 8005112:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e16e      	b.n	80053f6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800511e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1df      	bne.n	80050e6 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800512e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005130:	e020      	b.n	8005174 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005132:	f7fd fa47 	bl	80025c4 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b01      	cmp	r3, #1
 800513e:	d90f      	bls.n	8005160 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005146:	2b00      	cmp	r3, #0
 8005148:	da0a      	bge.n	8005160 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	f043 0208 	orr.w	r2, r3, #8
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2203      	movs	r2, #3
 800515a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e14a      	b.n	80053f6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005166:	2b00      	cmp	r3, #0
 8005168:	dbe3      	blt.n	8005132 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005172:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f003 0310 	and.w	r3, r3, #16
 8005180:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005184:	fa01 f303 	lsl.w	r3, r1, r3
 8005188:	43db      	mvns	r3, r3
 800518a:	ea02 0103 	and.w	r1, r2, r3
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f003 0310 	and.w	r3, r3, #16
 8005198:	409a      	lsls	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f003 0310 	and.w	r3, r3, #16
 80051ae:	21ff      	movs	r1, #255	@ 0xff
 80051b0:	fa01 f303 	lsl.w	r3, r1, r3
 80051b4:	43db      	mvns	r3, r3
 80051b6:	ea02 0103 	and.w	r1, r2, r3
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f003 0310 	and.w	r3, r3, #16
 80051c4:	409a      	lsls	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d11d      	bne.n	8005212 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051dc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f003 0310 	and.w	r3, r3, #16
 80051e4:	221f      	movs	r2, #31
 80051e6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ea:	43db      	mvns	r3, r3
 80051ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051ee:	4013      	ands	r3, r2
 80051f0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f003 0310 	and.w	r3, r3, #16
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005206:	4313      	orrs	r3, r2
 8005208:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005210:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005218:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f003 0310 	and.w	r3, r3, #16
 8005220:	2207      	movs	r2, #7
 8005222:	fa02 f303 	lsl.w	r3, r2, r3
 8005226:	43db      	mvns	r3, r3
 8005228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800522a:	4013      	ands	r3, r2
 800522c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d102      	bne.n	800523c <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8005236:	2300      	movs	r3, #0
 8005238:	623b      	str	r3, [r7, #32]
 800523a:	e00f      	b.n	800525c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	2b02      	cmp	r3, #2
 8005242:	d102      	bne.n	800524a <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005244:	2301      	movs	r3, #1
 8005246:	623b      	str	r3, [r7, #32]
 8005248:	e008      	b.n	800525c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d102      	bne.n	8005258 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005252:	2301      	movs	r3, #1
 8005254:	623b      	str	r3, [r7, #32]
 8005256:	e001      	b.n	800525c <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005258:	2300      	movs	r3, #0
 800525a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	4313      	orrs	r3, r2
 8005266:	6a3a      	ldr	r2, [r7, #32]
 8005268:	4313      	orrs	r3, r2
 800526a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f003 0310 	and.w	r3, r3, #16
 8005272:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005276:	fa02 f303 	lsl.w	r3, r2, r3
 800527a:	43db      	mvns	r3, r3
 800527c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800527e:	4013      	ands	r3, r2
 8005280:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	791b      	ldrb	r3, [r3, #4]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d102      	bne.n	8005290 <HAL_DAC_ConfigChannel+0x1f8>
 800528a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800528e:	e000      	b.n	8005292 <HAL_DAC_ConfigChannel+0x1fa>
 8005290:	2300      	movs	r3, #0
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	4313      	orrs	r3, r2
 8005296:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f003 0310 	and.w	r3, r3, #16
 800529e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052a2:	fa02 f303 	lsl.w	r3, r2, r3
 80052a6:	43db      	mvns	r3, r3
 80052a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052aa:	4013      	ands	r3, r2
 80052ac:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	795b      	ldrb	r3, [r3, #5]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d102      	bne.n	80052bc <HAL_DAC_ConfigChannel+0x224>
 80052b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80052ba:	e000      	b.n	80052be <HAL_DAC_ConfigChannel+0x226>
 80052bc:	2300      	movs	r3, #0
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80052c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80052ca:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d114      	bne.n	80052fe <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80052d4:	f001 fc12 	bl	8006afc <HAL_RCC_GetHCLKFreq>
 80052d8:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	4a48      	ldr	r2, [pc, #288]	@ (8005400 <HAL_DAC_ConfigChannel+0x368>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d904      	bls.n	80052ec <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80052e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80052ea:	e00f      	b.n	800530c <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	4a45      	ldr	r2, [pc, #276]	@ (8005404 <HAL_DAC_ConfigChannel+0x36c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d90a      	bls.n	800530a <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80052f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80052fc:	e006      	b.n	800530c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005304:	4313      	orrs	r3, r2
 8005306:	627b      	str	r3, [r7, #36]	@ 0x24
 8005308:	e000      	b.n	800530c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800530a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f003 0310 	and.w	r3, r3, #16
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	fa02 f303 	lsl.w	r3, r2, r3
 8005318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800531a:	4313      	orrs	r3, r2
 800531c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005324:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6819      	ldr	r1, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f003 0310 	and.w	r3, r3, #16
 8005332:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005336:	fa02 f303 	lsl.w	r3, r2, r3
 800533a:	43da      	mvns	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	400a      	ands	r2, r1
 8005342:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f003 0310 	and.w	r3, r3, #16
 8005352:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005356:	fa02 f303 	lsl.w	r3, r2, r3
 800535a:	43db      	mvns	r3, r3
 800535c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800535e:	4013      	ands	r3, r2
 8005360:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f003 0310 	and.w	r3, r3, #16
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	fa02 f303 	lsl.w	r3, r2, r3
 8005374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005376:	4313      	orrs	r3, r2
 8005378:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005380:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6819      	ldr	r1, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f003 0310 	and.w	r3, r3, #16
 800538e:	22c0      	movs	r2, #192	@ 0xc0
 8005390:	fa02 f303 	lsl.w	r3, r2, r3
 8005394:	43da      	mvns	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	400a      	ands	r2, r1
 800539c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	089b      	lsrs	r3, r3, #2
 80053a4:	f003 030f 	and.w	r3, r3, #15
 80053a8:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	089b      	lsrs	r3, r3, #2
 80053b0:	021b      	lsls	r3, r3, #8
 80053b2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80053cc:	fa01 f303 	lsl.w	r3, r1, r3
 80053d0:	43db      	mvns	r3, r3
 80053d2:	ea02 0103 	and.w	r1, r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f003 0310 	and.w	r3, r3, #16
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	409a      	lsls	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2201      	movs	r2, #1
 80053ec:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80053f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3728      	adds	r7, #40	@ 0x28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	09896800 	.word	0x09896800
 8005404:	04c4b400 	.word	0x04c4b400

08005408 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e08d      	b.n	8005536 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	461a      	mov	r2, r3
 8005420:	4b47      	ldr	r3, [pc, #284]	@ (8005540 <HAL_DMA_Init+0x138>)
 8005422:	429a      	cmp	r2, r3
 8005424:	d80f      	bhi.n	8005446 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	461a      	mov	r2, r3
 800542c:	4b45      	ldr	r3, [pc, #276]	@ (8005544 <HAL_DMA_Init+0x13c>)
 800542e:	4413      	add	r3, r2
 8005430:	4a45      	ldr	r2, [pc, #276]	@ (8005548 <HAL_DMA_Init+0x140>)
 8005432:	fba2 2303 	umull	r2, r3, r2, r3
 8005436:	091b      	lsrs	r3, r3, #4
 8005438:	009a      	lsls	r2, r3, #2
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a42      	ldr	r2, [pc, #264]	@ (800554c <HAL_DMA_Init+0x144>)
 8005442:	641a      	str	r2, [r3, #64]	@ 0x40
 8005444:	e00e      	b.n	8005464 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	4b40      	ldr	r3, [pc, #256]	@ (8005550 <HAL_DMA_Init+0x148>)
 800544e:	4413      	add	r3, r2
 8005450:	4a3d      	ldr	r2, [pc, #244]	@ (8005548 <HAL_DMA_Init+0x140>)
 8005452:	fba2 2303 	umull	r2, r3, r2, r3
 8005456:	091b      	lsrs	r3, r3, #4
 8005458:	009a      	lsls	r2, r3, #2
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a3c      	ldr	r2, [pc, #240]	@ (8005554 <HAL_DMA_Init+0x14c>)
 8005462:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800547a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800547e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005488:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005494:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fa76 	bl	80059a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054c4:	d102      	bne.n	80054cc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80054e0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d010      	beq.n	800550c <HAL_DMA_Init+0x104>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d80c      	bhi.n	800550c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fa96 	bl	8005a24 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054fc:	2200      	movs	r2, #0
 80054fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005508:	605a      	str	r2, [r3, #4]
 800550a:	e008      	b.n	800551e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	40020407 	.word	0x40020407
 8005544:	bffdfff8 	.word	0xbffdfff8
 8005548:	cccccccd 	.word	0xcccccccd
 800554c:	40020000 	.word	0x40020000
 8005550:	bffdfbf8 	.word	0xbffdfbf8
 8005554:	40020400 	.word	0x40020400

08005558 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
 8005564:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005566:	2300      	movs	r3, #0
 8005568:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005570:	2b01      	cmp	r3, #1
 8005572:	d101      	bne.n	8005578 <HAL_DMA_Start_IT+0x20>
 8005574:	2302      	movs	r3, #2
 8005576:	e066      	b.n	8005646 <HAL_DMA_Start_IT+0xee>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b01      	cmp	r3, #1
 800558a:	d155      	bne.n	8005638 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2202      	movs	r2, #2
 8005590:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0201 	bic.w	r2, r2, #1
 80055a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	68b9      	ldr	r1, [r7, #8]
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 f9bb 	bl	800592c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d008      	beq.n	80055d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f042 020e 	orr.w	r2, r2, #14
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	e00f      	b.n	80055f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0204 	bic.w	r2, r2, #4
 80055de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 020a 	orr.w	r2, r2, #10
 80055ee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d007      	beq.n	800560e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005608:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800560c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005612:	2b00      	cmp	r3, #0
 8005614:	d007      	beq.n	8005626 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005620:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005624:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f042 0201 	orr.w	r2, r2, #1
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	e005      	b.n	8005644 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005640:	2302      	movs	r3, #2
 8005642:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005644:	7dfb      	ldrb	r3, [r7, #23]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800564e:	b480      	push	{r7}
 8005650:	b085      	sub	sp, #20
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005656:	2300      	movs	r3, #0
 8005658:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d005      	beq.n	8005672 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2204      	movs	r2, #4
 800566a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	73fb      	strb	r3, [r7, #15]
 8005670:	e037      	b.n	80056e2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 020e 	bic.w	r2, r2, #14
 8005680:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800568c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005690:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0201 	bic.w	r2, r2, #1
 80056a0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a6:	f003 021f 	and.w	r2, r3, #31
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ae:	2101      	movs	r1, #1
 80056b0:	fa01 f202 	lsl.w	r2, r1, r2
 80056b4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80056be:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00c      	beq.n	80056e2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056d6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80056e0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80056f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005708:	2300      	movs	r3, #0
 800570a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b02      	cmp	r3, #2
 8005716:	d00d      	beq.n	8005734 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2204      	movs	r2, #4
 800571c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	73fb      	strb	r3, [r7, #15]
 8005732:	e047      	b.n	80057c4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 020e 	bic.w	r2, r2, #14
 8005742:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0201 	bic.w	r2, r2, #1
 8005752:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800575e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005762:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005768:	f003 021f 	and.w	r2, r3, #31
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005770:	2101      	movs	r1, #1
 8005772:	fa01 f202 	lsl.w	r2, r1, r2
 8005776:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005780:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00c      	beq.n	80057a4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005794:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005798:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80057a2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d003      	beq.n	80057c4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	4798      	blx	r3
    }
  }
  return status;
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b084      	sub	sp, #16
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ea:	f003 031f 	and.w	r3, r3, #31
 80057ee:	2204      	movs	r2, #4
 80057f0:	409a      	lsls	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4013      	ands	r3, r2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d026      	beq.n	8005848 <HAL_DMA_IRQHandler+0x7a>
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f003 0304 	and.w	r3, r3, #4
 8005800:	2b00      	cmp	r3, #0
 8005802:	d021      	beq.n	8005848 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0320 	and.w	r3, r3, #32
 800580e:	2b00      	cmp	r3, #0
 8005810:	d107      	bne.n	8005822 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 0204 	bic.w	r2, r2, #4
 8005820:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005826:	f003 021f 	and.w	r2, r3, #31
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582e:	2104      	movs	r1, #4
 8005830:	fa01 f202 	lsl.w	r2, r1, r2
 8005834:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800583a:	2b00      	cmp	r3, #0
 800583c:	d071      	beq.n	8005922 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005846:	e06c      	b.n	8005922 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800584c:	f003 031f 	and.w	r3, r3, #31
 8005850:	2202      	movs	r2, #2
 8005852:	409a      	lsls	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4013      	ands	r3, r2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d02e      	beq.n	80058ba <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d029      	beq.n	80058ba <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0320 	and.w	r3, r3, #32
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10b      	bne.n	800588c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 020a 	bic.w	r2, r2, #10
 8005882:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005890:	f003 021f 	and.w	r2, r3, #31
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005898:	2102      	movs	r1, #2
 800589a:	fa01 f202 	lsl.w	r2, r1, r2
 800589e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d038      	beq.n	8005922 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80058b8:	e033      	b.n	8005922 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058be:	f003 031f 	and.w	r3, r3, #31
 80058c2:	2208      	movs	r2, #8
 80058c4:	409a      	lsls	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4013      	ands	r3, r2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d02a      	beq.n	8005924 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f003 0308 	and.w	r3, r3, #8
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d025      	beq.n	8005924 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 020e 	bic.w	r2, r2, #14
 80058e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ec:	f003 021f 	and.w	r2, r3, #31
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f4:	2101      	movs	r1, #1
 80058f6:	fa01 f202 	lsl.w	r2, r1, r2
 80058fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005916:	2b00      	cmp	r3, #0
 8005918:	d004      	beq.n	8005924 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005922:	bf00      	nop
 8005924:	bf00      	nop
}
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
 8005938:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005942:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005948:	2b00      	cmp	r3, #0
 800594a:	d004      	beq.n	8005956 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005954:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800595a:	f003 021f 	and.w	r2, r3, #31
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005962:	2101      	movs	r1, #1
 8005964:	fa01 f202 	lsl.w	r2, r1, r2
 8005968:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	2b10      	cmp	r3, #16
 8005978:	d108      	bne.n	800598c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800598a:	e007      	b.n	800599c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	60da      	str	r2, [r3, #12]
}
 800599c:	bf00      	nop
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	461a      	mov	r2, r3
 80059b6:	4b16      	ldr	r3, [pc, #88]	@ (8005a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d802      	bhi.n	80059c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80059bc:	4b15      	ldr	r3, [pc, #84]	@ (8005a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	e001      	b.n	80059c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80059c2:	4b15      	ldr	r3, [pc, #84]	@ (8005a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80059c4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	3b08      	subs	r3, #8
 80059d2:	4a12      	ldr	r2, [pc, #72]	@ (8005a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80059d4:	fba2 2303 	umull	r2, r3, r2, r3
 80059d8:	091b      	lsrs	r3, r3, #4
 80059da:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059e0:	089b      	lsrs	r3, r3, #2
 80059e2:	009a      	lsls	r2, r3, #2
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	4413      	add	r3, r2
 80059e8:	461a      	mov	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a0b      	ldr	r2, [pc, #44]	@ (8005a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80059f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f003 031f 	and.w	r3, r3, #31
 80059fa:	2201      	movs	r2, #1
 80059fc:	409a      	lsls	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005a02:	bf00      	nop
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	40020407 	.word	0x40020407
 8005a14:	40020800 	.word	0x40020800
 8005a18:	40020820 	.word	0x40020820
 8005a1c:	cccccccd 	.word	0xcccccccd
 8005a20:	40020880 	.word	0x40020880

08005a24 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4b0b      	ldr	r3, [pc, #44]	@ (8005a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005a38:	4413      	add	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a08      	ldr	r2, [pc, #32]	@ (8005a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005a46:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	f003 031f 	and.w	r3, r3, #31
 8005a50:	2201      	movs	r2, #1
 8005a52:	409a      	lsls	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005a58:	bf00      	nop
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	1000823f 	.word	0x1000823f
 8005a68:	40020940 	.word	0x40020940

08005a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b087      	sub	sp, #28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005a7a:	e15a      	b.n	8005d32 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	2101      	movs	r1, #1
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	fa01 f303 	lsl.w	r3, r1, r3
 8005a88:	4013      	ands	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 814c 	beq.w	8005d2c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f003 0303 	and.w	r3, r3, #3
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d005      	beq.n	8005aac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d130      	bne.n	8005b0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	2203      	movs	r2, #3
 8005ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8005abc:	43db      	mvns	r3, r3
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	68da      	ldr	r2, [r3, #12]
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	005b      	lsls	r3, r3, #1
 8005acc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aea:	43db      	mvns	r3, r3
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	4013      	ands	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	091b      	lsrs	r3, r3, #4
 8005af8:	f003 0201 	and.w	r2, r3, #1
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	fa02 f303 	lsl.w	r3, r2, r3
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f003 0303 	and.w	r3, r3, #3
 8005b16:	2b03      	cmp	r3, #3
 8005b18:	d017      	beq.n	8005b4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	2203      	movs	r2, #3
 8005b26:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2a:	43db      	mvns	r3, r3
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	4013      	ands	r3, r2
 8005b30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	689a      	ldr	r2, [r3, #8]
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	005b      	lsls	r3, r3, #1
 8005b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f003 0303 	and.w	r3, r3, #3
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d123      	bne.n	8005b9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	08da      	lsrs	r2, r3, #3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3208      	adds	r2, #8
 8005b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	220f      	movs	r2, #15
 8005b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b72:	43db      	mvns	r3, r3
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	4013      	ands	r3, r2
 8005b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	691a      	ldr	r2, [r3, #16]
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f003 0307 	and.w	r3, r3, #7
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	08da      	lsrs	r2, r3, #3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3208      	adds	r2, #8
 8005b98:	6939      	ldr	r1, [r7, #16]
 8005b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	2203      	movs	r2, #3
 8005baa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bae:	43db      	mvns	r3, r3
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f003 0203 	and.w	r2, r3, #3
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f000 80a6 	beq.w	8005d2c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005be0:	4b5b      	ldr	r3, [pc, #364]	@ (8005d50 <HAL_GPIO_Init+0x2e4>)
 8005be2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005be4:	4a5a      	ldr	r2, [pc, #360]	@ (8005d50 <HAL_GPIO_Init+0x2e4>)
 8005be6:	f043 0301 	orr.w	r3, r3, #1
 8005bea:	6613      	str	r3, [r2, #96]	@ 0x60
 8005bec:	4b58      	ldr	r3, [pc, #352]	@ (8005d50 <HAL_GPIO_Init+0x2e4>)
 8005bee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	60bb      	str	r3, [r7, #8]
 8005bf6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005bf8:	4a56      	ldr	r2, [pc, #344]	@ (8005d54 <HAL_GPIO_Init+0x2e8>)
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	089b      	lsrs	r3, r3, #2
 8005bfe:	3302      	adds	r3, #2
 8005c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f003 0303 	and.w	r3, r3, #3
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	220f      	movs	r2, #15
 8005c10:	fa02 f303 	lsl.w	r3, r2, r3
 8005c14:	43db      	mvns	r3, r3
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005c22:	d01f      	beq.n	8005c64 <HAL_GPIO_Init+0x1f8>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a4c      	ldr	r2, [pc, #304]	@ (8005d58 <HAL_GPIO_Init+0x2ec>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d019      	beq.n	8005c60 <HAL_GPIO_Init+0x1f4>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a4b      	ldr	r2, [pc, #300]	@ (8005d5c <HAL_GPIO_Init+0x2f0>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d013      	beq.n	8005c5c <HAL_GPIO_Init+0x1f0>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a4a      	ldr	r2, [pc, #296]	@ (8005d60 <HAL_GPIO_Init+0x2f4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d00d      	beq.n	8005c58 <HAL_GPIO_Init+0x1ec>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a49      	ldr	r2, [pc, #292]	@ (8005d64 <HAL_GPIO_Init+0x2f8>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d007      	beq.n	8005c54 <HAL_GPIO_Init+0x1e8>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a48      	ldr	r2, [pc, #288]	@ (8005d68 <HAL_GPIO_Init+0x2fc>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d101      	bne.n	8005c50 <HAL_GPIO_Init+0x1e4>
 8005c4c:	2305      	movs	r3, #5
 8005c4e:	e00a      	b.n	8005c66 <HAL_GPIO_Init+0x1fa>
 8005c50:	2306      	movs	r3, #6
 8005c52:	e008      	b.n	8005c66 <HAL_GPIO_Init+0x1fa>
 8005c54:	2304      	movs	r3, #4
 8005c56:	e006      	b.n	8005c66 <HAL_GPIO_Init+0x1fa>
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e004      	b.n	8005c66 <HAL_GPIO_Init+0x1fa>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e002      	b.n	8005c66 <HAL_GPIO_Init+0x1fa>
 8005c60:	2301      	movs	r3, #1
 8005c62:	e000      	b.n	8005c66 <HAL_GPIO_Init+0x1fa>
 8005c64:	2300      	movs	r3, #0
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	f002 0203 	and.w	r2, r2, #3
 8005c6c:	0092      	lsls	r2, r2, #2
 8005c6e:	4093      	lsls	r3, r2
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c76:	4937      	ldr	r1, [pc, #220]	@ (8005d54 <HAL_GPIO_Init+0x2e8>)
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	089b      	lsrs	r3, r3, #2
 8005c7c:	3302      	adds	r3, #2
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c84:	4b39      	ldr	r3, [pc, #228]	@ (8005d6c <HAL_GPIO_Init+0x300>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	43db      	mvns	r3, r3
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	4013      	ands	r3, r2
 8005c92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005ca8:	4a30      	ldr	r2, [pc, #192]	@ (8005d6c <HAL_GPIO_Init+0x300>)
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005cae:	4b2f      	ldr	r3, [pc, #188]	@ (8005d6c <HAL_GPIO_Init+0x300>)
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	43db      	mvns	r3, r3
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	4013      	ands	r3, r2
 8005cbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005cd2:	4a26      	ldr	r2, [pc, #152]	@ (8005d6c <HAL_GPIO_Init+0x300>)
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005cd8:	4b24      	ldr	r3, [pc, #144]	@ (8005d6c <HAL_GPIO_Init+0x300>)
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	43db      	mvns	r3, r3
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8005d6c <HAL_GPIO_Init+0x300>)
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005d02:	4b1a      	ldr	r3, [pc, #104]	@ (8005d6c <HAL_GPIO_Init+0x300>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	43db      	mvns	r3, r3
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005d26:	4a11      	ldr	r2, [pc, #68]	@ (8005d6c <HAL_GPIO_Init+0x300>)
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	fa22 f303 	lsr.w	r3, r2, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f47f ae9d 	bne.w	8005a7c <HAL_GPIO_Init+0x10>
  }
}
 8005d42:	bf00      	nop
 8005d44:	bf00      	nop
 8005d46:	371c      	adds	r7, #28
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	40021000 	.word	0x40021000
 8005d54:	40010000 	.word	0x40010000
 8005d58:	48000400 	.word	0x48000400
 8005d5c:	48000800 	.word	0x48000800
 8005d60:	48000c00 	.word	0x48000c00
 8005d64:	48001000 	.word	0x48001000
 8005d68:	48001400 	.word	0x48001400
 8005d6c:	40010400 	.word	0x40010400

08005d70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	691a      	ldr	r2, [r3, #16]
 8005d80:	887b      	ldrh	r3, [r7, #2]
 8005d82:	4013      	ands	r3, r2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	73fb      	strb	r3, [r7, #15]
 8005d8c:	e001      	b.n	8005d92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	460b      	mov	r3, r1
 8005daa:	807b      	strh	r3, [r7, #2]
 8005dac:	4613      	mov	r3, r2
 8005dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005db0:	787b      	ldrb	r3, [r7, #1]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005db6:	887a      	ldrh	r2, [r7, #2]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005dbc:	e002      	b.n	8005dc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005dbe:	887a      	ldrh	r2, [r7, #2]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e08d      	b.n	8005efe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d106      	bne.n	8005dfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7fb fc68 	bl	80016cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2224      	movs	r2, #36	@ 0x24
 8005e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0201 	bic.w	r2, r2, #1
 8005e12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005e20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689a      	ldr	r2, [r3, #8]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d107      	bne.n	8005e4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e46:	609a      	str	r2, [r3, #8]
 8005e48:	e006      	b.n	8005e58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	689a      	ldr	r2, [r3, #8]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005e56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d108      	bne.n	8005e72 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e6e:	605a      	str	r2, [r3, #4]
 8005e70:	e007      	b.n	8005e82 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6812      	ldr	r2, [r2, #0]
 8005e8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005e90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68da      	ldr	r2, [r3, #12]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ea4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	691a      	ldr	r2, [r3, #16]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	69d9      	ldr	r1, [r3, #28]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a1a      	ldr	r2, [r3, #32]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0201 	orr.w	r2, r2, #1
 8005ede:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b083      	sub	sp, #12
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b20      	cmp	r3, #32
 8005f1a:	d138      	bne.n	8005f8e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d101      	bne.n	8005f2a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005f26:	2302      	movs	r3, #2
 8005f28:	e032      	b.n	8005f90 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2224      	movs	r2, #36	@ 0x24
 8005f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f022 0201 	bic.w	r2, r2, #1
 8005f48:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005f58:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6819      	ldr	r1, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f042 0201 	orr.w	r2, r2, #1
 8005f78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2220      	movs	r2, #32
 8005f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	e000      	b.n	8005f90 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005f8e:	2302      	movs	r3, #2
  }
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b20      	cmp	r3, #32
 8005fb0:	d139      	bne.n	8006026 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d101      	bne.n	8005fc0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	e033      	b.n	8006028 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2224      	movs	r2, #36	@ 0x24
 8005fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 0201 	bic.w	r2, r2, #1
 8005fde:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005fee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	021b      	lsls	r3, r3, #8
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f042 0201 	orr.w	r2, r2, #1
 8006010:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2220      	movs	r2, #32
 8006016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006022:	2300      	movs	r3, #0
 8006024:	e000      	b.n	8006028 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006026:	2302      	movs	r3, #2
  }
}
 8006028:	4618      	mov	r0, r3
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d141      	bne.n	80060c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006042:	4b4b      	ldr	r3, [pc, #300]	@ (8006170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800604a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800604e:	d131      	bne.n	80060b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006050:	4b47      	ldr	r3, [pc, #284]	@ (8006170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006052:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006056:	4a46      	ldr	r2, [pc, #280]	@ (8006170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006058:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800605c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006060:	4b43      	ldr	r3, [pc, #268]	@ (8006170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006068:	4a41      	ldr	r2, [pc, #260]	@ (8006170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800606a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800606e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006070:	4b40      	ldr	r3, [pc, #256]	@ (8006174 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2232      	movs	r2, #50	@ 0x32
 8006076:	fb02 f303 	mul.w	r3, r2, r3
 800607a:	4a3f      	ldr	r2, [pc, #252]	@ (8006178 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800607c:	fba2 2303 	umull	r2, r3, r2, r3
 8006080:	0c9b      	lsrs	r3, r3, #18
 8006082:	3301      	adds	r3, #1
 8006084:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006086:	e002      	b.n	800608e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	3b01      	subs	r3, #1
 800608c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800608e:	4b38      	ldr	r3, [pc, #224]	@ (8006170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800609a:	d102      	bne.n	80060a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1f2      	bne.n	8006088 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80060a2:	4b33      	ldr	r3, [pc, #204]	@ (8006170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060ae:	d158      	bne.n	8006162 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e057      	b.n	8006164 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80060b4:	4b2e      	ldr	r3, [pc, #184]	@ (8006170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060ba:	4a2d      	ldr	r2, [pc, #180]	@ (8006170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80060c4:	e04d      	b.n	8006162 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060cc:	d141      	bne.n	8006152 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80060ce:	4b28      	ldr	r3, [pc, #160]	@ (8006170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80060d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060da:	d131      	bne.n	8006140 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80060dc:	4b24      	ldr	r3, [pc, #144]	@ (8006170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060e2:	4a23      	ldr	r2, [pc, #140]	@ (8006170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80060ec:	4b20      	ldr	r3, [pc, #128]	@ (8006170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80060f4:	4a1e      	ldr	r2, [pc, #120]	@ (8006170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80060fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80060fc:	4b1d      	ldr	r3, [pc, #116]	@ (8006174 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2232      	movs	r2, #50	@ 0x32
 8006102:	fb02 f303 	mul.w	r3, r2, r3
 8006106:	4a1c      	ldr	r2, [pc, #112]	@ (8006178 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006108:	fba2 2303 	umull	r2, r3, r2, r3
 800610c:	0c9b      	lsrs	r3, r3, #18
 800610e:	3301      	adds	r3, #1
 8006110:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006112:	e002      	b.n	800611a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	3b01      	subs	r3, #1
 8006118:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800611a:	4b15      	ldr	r3, [pc, #84]	@ (8006170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006126:	d102      	bne.n	800612e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1f2      	bne.n	8006114 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800612e:	4b10      	ldr	r3, [pc, #64]	@ (8006170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800613a:	d112      	bne.n	8006162 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e011      	b.n	8006164 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006140:	4b0b      	ldr	r3, [pc, #44]	@ (8006170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006146:	4a0a      	ldr	r2, [pc, #40]	@ (8006170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006148:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800614c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006150:	e007      	b.n	8006162 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006152:	4b07      	ldr	r3, [pc, #28]	@ (8006170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800615a:	4a05      	ldr	r2, [pc, #20]	@ (8006170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800615c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006160:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	40007000 	.word	0x40007000
 8006174:	20000000 	.word	0x20000000
 8006178:	431bde83 	.word	0x431bde83

0800617c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006180:	4b05      	ldr	r3, [pc, #20]	@ (8006198 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	4a04      	ldr	r2, [pc, #16]	@ (8006198 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006186:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800618a:	6093      	str	r3, [r2, #8]
}
 800618c:	bf00      	nop
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	40007000 	.word	0x40007000

0800619c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b088      	sub	sp, #32
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e2fe      	b.n	80067ac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d075      	beq.n	80062a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061ba:	4b97      	ldr	r3, [pc, #604]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f003 030c 	and.w	r3, r3, #12
 80061c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061c4:	4b94      	ldr	r3, [pc, #592]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	f003 0303 	and.w	r3, r3, #3
 80061cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	2b0c      	cmp	r3, #12
 80061d2:	d102      	bne.n	80061da <HAL_RCC_OscConfig+0x3e>
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	d002      	beq.n	80061e0 <HAL_RCC_OscConfig+0x44>
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d10b      	bne.n	80061f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061e0:	4b8d      	ldr	r3, [pc, #564]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d05b      	beq.n	80062a4 <HAL_RCC_OscConfig+0x108>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d157      	bne.n	80062a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e2d9      	b.n	80067ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006200:	d106      	bne.n	8006210 <HAL_RCC_OscConfig+0x74>
 8006202:	4b85      	ldr	r3, [pc, #532]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a84      	ldr	r2, [pc, #528]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 8006208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	e01d      	b.n	800624c <HAL_RCC_OscConfig+0xb0>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006218:	d10c      	bne.n	8006234 <HAL_RCC_OscConfig+0x98>
 800621a:	4b7f      	ldr	r3, [pc, #508]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a7e      	ldr	r2, [pc, #504]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 8006220:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	4b7c      	ldr	r3, [pc, #496]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a7b      	ldr	r2, [pc, #492]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 800622c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	e00b      	b.n	800624c <HAL_RCC_OscConfig+0xb0>
 8006234:	4b78      	ldr	r3, [pc, #480]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a77      	ldr	r2, [pc, #476]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 800623a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800623e:	6013      	str	r3, [r2, #0]
 8006240:	4b75      	ldr	r3, [pc, #468]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a74      	ldr	r2, [pc, #464]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 8006246:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800624a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d013      	beq.n	800627c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006254:	f7fc f9b6 	bl	80025c4 <HAL_GetTick>
 8006258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800625a:	e008      	b.n	800626e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800625c:	f7fc f9b2 	bl	80025c4 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b64      	cmp	r3, #100	@ 0x64
 8006268:	d901      	bls.n	800626e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e29e      	b.n	80067ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800626e:	4b6a      	ldr	r3, [pc, #424]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d0f0      	beq.n	800625c <HAL_RCC_OscConfig+0xc0>
 800627a:	e014      	b.n	80062a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800627c:	f7fc f9a2 	bl	80025c4 <HAL_GetTick>
 8006280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006282:	e008      	b.n	8006296 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006284:	f7fc f99e 	bl	80025c4 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	2b64      	cmp	r3, #100	@ 0x64
 8006290:	d901      	bls.n	8006296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e28a      	b.n	80067ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006296:	4b60      	ldr	r3, [pc, #384]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1f0      	bne.n	8006284 <HAL_RCC_OscConfig+0xe8>
 80062a2:	e000      	b.n	80062a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d075      	beq.n	800639e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062b2:	4b59      	ldr	r3, [pc, #356]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f003 030c 	and.w	r3, r3, #12
 80062ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062bc:	4b56      	ldr	r3, [pc, #344]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f003 0303 	and.w	r3, r3, #3
 80062c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	2b0c      	cmp	r3, #12
 80062ca:	d102      	bne.n	80062d2 <HAL_RCC_OscConfig+0x136>
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d002      	beq.n	80062d8 <HAL_RCC_OscConfig+0x13c>
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	2b04      	cmp	r3, #4
 80062d6:	d11f      	bne.n	8006318 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062d8:	4b4f      	ldr	r3, [pc, #316]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d005      	beq.n	80062f0 <HAL_RCC_OscConfig+0x154>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e25d      	b.n	80067ac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062f0:	4b49      	ldr	r3, [pc, #292]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	061b      	lsls	r3, r3, #24
 80062fe:	4946      	ldr	r1, [pc, #280]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 8006300:	4313      	orrs	r3, r2
 8006302:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006304:	4b45      	ldr	r3, [pc, #276]	@ (800641c <HAL_RCC_OscConfig+0x280>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4618      	mov	r0, r3
 800630a:	f7fc f90f 	bl	800252c <HAL_InitTick>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d043      	beq.n	800639c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e249      	b.n	80067ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d023      	beq.n	8006368 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006320:	4b3d      	ldr	r3, [pc, #244]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a3c      	ldr	r2, [pc, #240]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 8006326:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800632a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800632c:	f7fc f94a 	bl	80025c4 <HAL_GetTick>
 8006330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006332:	e008      	b.n	8006346 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006334:	f7fc f946 	bl	80025c4 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e232      	b.n	80067ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006346:	4b34      	ldr	r3, [pc, #208]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800634e:	2b00      	cmp	r3, #0
 8006350:	d0f0      	beq.n	8006334 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006352:	4b31      	ldr	r3, [pc, #196]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	061b      	lsls	r3, r3, #24
 8006360:	492d      	ldr	r1, [pc, #180]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 8006362:	4313      	orrs	r3, r2
 8006364:	604b      	str	r3, [r1, #4]
 8006366:	e01a      	b.n	800639e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006368:	4b2b      	ldr	r3, [pc, #172]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a2a      	ldr	r2, [pc, #168]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 800636e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006374:	f7fc f926 	bl	80025c4 <HAL_GetTick>
 8006378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800637a:	e008      	b.n	800638e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800637c:	f7fc f922 	bl	80025c4 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	2b02      	cmp	r3, #2
 8006388:	d901      	bls.n	800638e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e20e      	b.n	80067ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800638e:	4b22      	ldr	r3, [pc, #136]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1f0      	bne.n	800637c <HAL_RCC_OscConfig+0x1e0>
 800639a:	e000      	b.n	800639e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800639c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0308 	and.w	r3, r3, #8
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d041      	beq.n	800642e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d01c      	beq.n	80063ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063b2:	4b19      	ldr	r3, [pc, #100]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 80063b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063b8:	4a17      	ldr	r2, [pc, #92]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 80063ba:	f043 0301 	orr.w	r3, r3, #1
 80063be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063c2:	f7fc f8ff 	bl	80025c4 <HAL_GetTick>
 80063c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80063c8:	e008      	b.n	80063dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063ca:	f7fc f8fb 	bl	80025c4 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d901      	bls.n	80063dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e1e7      	b.n	80067ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80063dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 80063de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d0ef      	beq.n	80063ca <HAL_RCC_OscConfig+0x22e>
 80063ea:	e020      	b.n	800642e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 80063ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063f2:	4a09      	ldr	r2, [pc, #36]	@ (8006418 <HAL_RCC_OscConfig+0x27c>)
 80063f4:	f023 0301 	bic.w	r3, r3, #1
 80063f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063fc:	f7fc f8e2 	bl	80025c4 <HAL_GetTick>
 8006400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006402:	e00d      	b.n	8006420 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006404:	f7fc f8de 	bl	80025c4 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b02      	cmp	r3, #2
 8006410:	d906      	bls.n	8006420 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e1ca      	b.n	80067ac <HAL_RCC_OscConfig+0x610>
 8006416:	bf00      	nop
 8006418:	40021000 	.word	0x40021000
 800641c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006420:	4b8c      	ldr	r3, [pc, #560]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 8006422:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1ea      	bne.n	8006404 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0304 	and.w	r3, r3, #4
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 80a6 	beq.w	8006588 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800643c:	2300      	movs	r3, #0
 800643e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006440:	4b84      	ldr	r3, [pc, #528]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 8006442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <HAL_RCC_OscConfig+0x2b4>
 800644c:	2301      	movs	r3, #1
 800644e:	e000      	b.n	8006452 <HAL_RCC_OscConfig+0x2b6>
 8006450:	2300      	movs	r3, #0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00d      	beq.n	8006472 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006456:	4b7f      	ldr	r3, [pc, #508]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 8006458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800645a:	4a7e      	ldr	r2, [pc, #504]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 800645c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006460:	6593      	str	r3, [r2, #88]	@ 0x58
 8006462:	4b7c      	ldr	r3, [pc, #496]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 8006464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800646e:	2301      	movs	r3, #1
 8006470:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006472:	4b79      	ldr	r3, [pc, #484]	@ (8006658 <HAL_RCC_OscConfig+0x4bc>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800647a:	2b00      	cmp	r3, #0
 800647c:	d118      	bne.n	80064b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800647e:	4b76      	ldr	r3, [pc, #472]	@ (8006658 <HAL_RCC_OscConfig+0x4bc>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a75      	ldr	r2, [pc, #468]	@ (8006658 <HAL_RCC_OscConfig+0x4bc>)
 8006484:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800648a:	f7fc f89b 	bl	80025c4 <HAL_GetTick>
 800648e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006490:	e008      	b.n	80064a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006492:	f7fc f897 	bl	80025c4 <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	2b02      	cmp	r3, #2
 800649e:	d901      	bls.n	80064a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e183      	b.n	80067ac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064a4:	4b6c      	ldr	r3, [pc, #432]	@ (8006658 <HAL_RCC_OscConfig+0x4bc>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d0f0      	beq.n	8006492 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d108      	bne.n	80064ca <HAL_RCC_OscConfig+0x32e>
 80064b8:	4b66      	ldr	r3, [pc, #408]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 80064ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064be:	4a65      	ldr	r2, [pc, #404]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 80064c0:	f043 0301 	orr.w	r3, r3, #1
 80064c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80064c8:	e024      	b.n	8006514 <HAL_RCC_OscConfig+0x378>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	2b05      	cmp	r3, #5
 80064d0:	d110      	bne.n	80064f4 <HAL_RCC_OscConfig+0x358>
 80064d2:	4b60      	ldr	r3, [pc, #384]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 80064d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064d8:	4a5e      	ldr	r2, [pc, #376]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 80064da:	f043 0304 	orr.w	r3, r3, #4
 80064de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80064e2:	4b5c      	ldr	r3, [pc, #368]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 80064e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064e8:	4a5a      	ldr	r2, [pc, #360]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 80064ea:	f043 0301 	orr.w	r3, r3, #1
 80064ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80064f2:	e00f      	b.n	8006514 <HAL_RCC_OscConfig+0x378>
 80064f4:	4b57      	ldr	r3, [pc, #348]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 80064f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064fa:	4a56      	ldr	r2, [pc, #344]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 80064fc:	f023 0301 	bic.w	r3, r3, #1
 8006500:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006504:	4b53      	ldr	r3, [pc, #332]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 8006506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800650a:	4a52      	ldr	r2, [pc, #328]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 800650c:	f023 0304 	bic.w	r3, r3, #4
 8006510:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d016      	beq.n	800654a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800651c:	f7fc f852 	bl	80025c4 <HAL_GetTick>
 8006520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006522:	e00a      	b.n	800653a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006524:	f7fc f84e 	bl	80025c4 <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006532:	4293      	cmp	r3, r2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e138      	b.n	80067ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800653a:	4b46      	ldr	r3, [pc, #280]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 800653c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b00      	cmp	r3, #0
 8006546:	d0ed      	beq.n	8006524 <HAL_RCC_OscConfig+0x388>
 8006548:	e015      	b.n	8006576 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800654a:	f7fc f83b 	bl	80025c4 <HAL_GetTick>
 800654e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006550:	e00a      	b.n	8006568 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006552:	f7fc f837 	bl	80025c4 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006560:	4293      	cmp	r3, r2
 8006562:	d901      	bls.n	8006568 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e121      	b.n	80067ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006568:	4b3a      	ldr	r3, [pc, #232]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 800656a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1ed      	bne.n	8006552 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006576:	7ffb      	ldrb	r3, [r7, #31]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d105      	bne.n	8006588 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800657c:	4b35      	ldr	r3, [pc, #212]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 800657e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006580:	4a34      	ldr	r2, [pc, #208]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 8006582:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006586:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0320 	and.w	r3, r3, #32
 8006590:	2b00      	cmp	r3, #0
 8006592:	d03c      	beq.n	800660e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d01c      	beq.n	80065d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800659c:	4b2d      	ldr	r3, [pc, #180]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 800659e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065a2:	4a2c      	ldr	r2, [pc, #176]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 80065a4:	f043 0301 	orr.w	r3, r3, #1
 80065a8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ac:	f7fc f80a 	bl	80025c4 <HAL_GetTick>
 80065b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80065b2:	e008      	b.n	80065c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065b4:	f7fc f806 	bl	80025c4 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d901      	bls.n	80065c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e0f2      	b.n	80067ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80065c6:	4b23      	ldr	r3, [pc, #140]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 80065c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d0ef      	beq.n	80065b4 <HAL_RCC_OscConfig+0x418>
 80065d4:	e01b      	b.n	800660e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80065d6:	4b1f      	ldr	r3, [pc, #124]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 80065d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 80065de:	f023 0301 	bic.w	r3, r3, #1
 80065e2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065e6:	f7fb ffed 	bl	80025c4 <HAL_GetTick>
 80065ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80065ec:	e008      	b.n	8006600 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065ee:	f7fb ffe9 	bl	80025c4 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d901      	bls.n	8006600 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e0d5      	b.n	80067ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006600:	4b14      	ldr	r3, [pc, #80]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 8006602:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1ef      	bne.n	80065ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	69db      	ldr	r3, [r3, #28]
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 80c9 	beq.w	80067aa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006618:	4b0e      	ldr	r3, [pc, #56]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f003 030c 	and.w	r3, r3, #12
 8006620:	2b0c      	cmp	r3, #12
 8006622:	f000 8083 	beq.w	800672c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	2b02      	cmp	r3, #2
 800662c:	d15e      	bne.n	80066ec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800662e:	4b09      	ldr	r3, [pc, #36]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a08      	ldr	r2, [pc, #32]	@ (8006654 <HAL_RCC_OscConfig+0x4b8>)
 8006634:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800663a:	f7fb ffc3 	bl	80025c4 <HAL_GetTick>
 800663e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006640:	e00c      	b.n	800665c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006642:	f7fb ffbf 	bl	80025c4 <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	2b02      	cmp	r3, #2
 800664e:	d905      	bls.n	800665c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e0ab      	b.n	80067ac <HAL_RCC_OscConfig+0x610>
 8006654:	40021000 	.word	0x40021000
 8006658:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800665c:	4b55      	ldr	r3, [pc, #340]	@ (80067b4 <HAL_RCC_OscConfig+0x618>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1ec      	bne.n	8006642 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006668:	4b52      	ldr	r3, [pc, #328]	@ (80067b4 <HAL_RCC_OscConfig+0x618>)
 800666a:	68da      	ldr	r2, [r3, #12]
 800666c:	4b52      	ldr	r3, [pc, #328]	@ (80067b8 <HAL_RCC_OscConfig+0x61c>)
 800666e:	4013      	ands	r3, r2
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	6a11      	ldr	r1, [r2, #32]
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006678:	3a01      	subs	r2, #1
 800667a:	0112      	lsls	r2, r2, #4
 800667c:	4311      	orrs	r1, r2
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006682:	0212      	lsls	r2, r2, #8
 8006684:	4311      	orrs	r1, r2
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800668a:	0852      	lsrs	r2, r2, #1
 800668c:	3a01      	subs	r2, #1
 800668e:	0552      	lsls	r2, r2, #21
 8006690:	4311      	orrs	r1, r2
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006696:	0852      	lsrs	r2, r2, #1
 8006698:	3a01      	subs	r2, #1
 800669a:	0652      	lsls	r2, r2, #25
 800669c:	4311      	orrs	r1, r2
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80066a2:	06d2      	lsls	r2, r2, #27
 80066a4:	430a      	orrs	r2, r1
 80066a6:	4943      	ldr	r1, [pc, #268]	@ (80067b4 <HAL_RCC_OscConfig+0x618>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066ac:	4b41      	ldr	r3, [pc, #260]	@ (80067b4 <HAL_RCC_OscConfig+0x618>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a40      	ldr	r2, [pc, #256]	@ (80067b4 <HAL_RCC_OscConfig+0x618>)
 80066b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80066b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80066b8:	4b3e      	ldr	r3, [pc, #248]	@ (80067b4 <HAL_RCC_OscConfig+0x618>)
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	4a3d      	ldr	r2, [pc, #244]	@ (80067b4 <HAL_RCC_OscConfig+0x618>)
 80066be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80066c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c4:	f7fb ff7e 	bl	80025c4 <HAL_GetTick>
 80066c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066ca:	e008      	b.n	80066de <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066cc:	f7fb ff7a 	bl	80025c4 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d901      	bls.n	80066de <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e066      	b.n	80067ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066de:	4b35      	ldr	r3, [pc, #212]	@ (80067b4 <HAL_RCC_OscConfig+0x618>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d0f0      	beq.n	80066cc <HAL_RCC_OscConfig+0x530>
 80066ea:	e05e      	b.n	80067aa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066ec:	4b31      	ldr	r3, [pc, #196]	@ (80067b4 <HAL_RCC_OscConfig+0x618>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a30      	ldr	r2, [pc, #192]	@ (80067b4 <HAL_RCC_OscConfig+0x618>)
 80066f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f8:	f7fb ff64 	bl	80025c4 <HAL_GetTick>
 80066fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066fe:	e008      	b.n	8006712 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006700:	f7fb ff60 	bl	80025c4 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	2b02      	cmp	r3, #2
 800670c:	d901      	bls.n	8006712 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e04c      	b.n	80067ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006712:	4b28      	ldr	r3, [pc, #160]	@ (80067b4 <HAL_RCC_OscConfig+0x618>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1f0      	bne.n	8006700 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800671e:	4b25      	ldr	r3, [pc, #148]	@ (80067b4 <HAL_RCC_OscConfig+0x618>)
 8006720:	68da      	ldr	r2, [r3, #12]
 8006722:	4924      	ldr	r1, [pc, #144]	@ (80067b4 <HAL_RCC_OscConfig+0x618>)
 8006724:	4b25      	ldr	r3, [pc, #148]	@ (80067bc <HAL_RCC_OscConfig+0x620>)
 8006726:	4013      	ands	r3, r2
 8006728:	60cb      	str	r3, [r1, #12]
 800672a:	e03e      	b.n	80067aa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d101      	bne.n	8006738 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e039      	b.n	80067ac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006738:	4b1e      	ldr	r3, [pc, #120]	@ (80067b4 <HAL_RCC_OscConfig+0x618>)
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f003 0203 	and.w	r2, r3, #3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a1b      	ldr	r3, [r3, #32]
 8006748:	429a      	cmp	r2, r3
 800674a:	d12c      	bne.n	80067a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006756:	3b01      	subs	r3, #1
 8006758:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800675a:	429a      	cmp	r2, r3
 800675c:	d123      	bne.n	80067a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006768:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800676a:	429a      	cmp	r2, r3
 800676c:	d11b      	bne.n	80067a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006778:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800677a:	429a      	cmp	r2, r3
 800677c:	d113      	bne.n	80067a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006788:	085b      	lsrs	r3, r3, #1
 800678a:	3b01      	subs	r3, #1
 800678c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800678e:	429a      	cmp	r2, r3
 8006790:	d109      	bne.n	80067a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800679c:	085b      	lsrs	r3, r3, #1
 800679e:	3b01      	subs	r3, #1
 80067a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d001      	beq.n	80067aa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e000      	b.n	80067ac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3720      	adds	r7, #32
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	40021000 	.word	0x40021000
 80067b8:	019f800c 	.word	0x019f800c
 80067bc:	feeefffc 	.word	0xfeeefffc

080067c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80067ca:	2300      	movs	r3, #0
 80067cc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e11e      	b.n	8006a16 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067d8:	4b91      	ldr	r3, [pc, #580]	@ (8006a20 <HAL_RCC_ClockConfig+0x260>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 030f 	and.w	r3, r3, #15
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d910      	bls.n	8006808 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067e6:	4b8e      	ldr	r3, [pc, #568]	@ (8006a20 <HAL_RCC_ClockConfig+0x260>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f023 020f 	bic.w	r2, r3, #15
 80067ee:	498c      	ldr	r1, [pc, #560]	@ (8006a20 <HAL_RCC_ClockConfig+0x260>)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067f6:	4b8a      	ldr	r3, [pc, #552]	@ (8006a20 <HAL_RCC_ClockConfig+0x260>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 030f 	and.w	r3, r3, #15
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	429a      	cmp	r2, r3
 8006802:	d001      	beq.n	8006808 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e106      	b.n	8006a16 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b00      	cmp	r3, #0
 8006812:	d073      	beq.n	80068fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	2b03      	cmp	r3, #3
 800681a:	d129      	bne.n	8006870 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800681c:	4b81      	ldr	r3, [pc, #516]	@ (8006a24 <HAL_RCC_ClockConfig+0x264>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d101      	bne.n	800682c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e0f4      	b.n	8006a16 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800682c:	f000 f99e 	bl	8006b6c <RCC_GetSysClockFreqFromPLLSource>
 8006830:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	4a7c      	ldr	r2, [pc, #496]	@ (8006a28 <HAL_RCC_ClockConfig+0x268>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d93f      	bls.n	80068ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800683a:	4b7a      	ldr	r3, [pc, #488]	@ (8006a24 <HAL_RCC_ClockConfig+0x264>)
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d009      	beq.n	800685a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800684e:	2b00      	cmp	r3, #0
 8006850:	d033      	beq.n	80068ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006856:	2b00      	cmp	r3, #0
 8006858:	d12f      	bne.n	80068ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800685a:	4b72      	ldr	r3, [pc, #456]	@ (8006a24 <HAL_RCC_ClockConfig+0x264>)
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006862:	4a70      	ldr	r2, [pc, #448]	@ (8006a24 <HAL_RCC_ClockConfig+0x264>)
 8006864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006868:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800686a:	2380      	movs	r3, #128	@ 0x80
 800686c:	617b      	str	r3, [r7, #20]
 800686e:	e024      	b.n	80068ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	2b02      	cmp	r3, #2
 8006876:	d107      	bne.n	8006888 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006878:	4b6a      	ldr	r3, [pc, #424]	@ (8006a24 <HAL_RCC_ClockConfig+0x264>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d109      	bne.n	8006898 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e0c6      	b.n	8006a16 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006888:	4b66      	ldr	r3, [pc, #408]	@ (8006a24 <HAL_RCC_ClockConfig+0x264>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e0be      	b.n	8006a16 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006898:	f000 f8ce 	bl	8006a38 <HAL_RCC_GetSysClockFreq>
 800689c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	4a61      	ldr	r2, [pc, #388]	@ (8006a28 <HAL_RCC_ClockConfig+0x268>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d909      	bls.n	80068ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80068a6:	4b5f      	ldr	r3, [pc, #380]	@ (8006a24 <HAL_RCC_ClockConfig+0x264>)
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068ae:	4a5d      	ldr	r2, [pc, #372]	@ (8006a24 <HAL_RCC_ClockConfig+0x264>)
 80068b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80068b6:	2380      	movs	r3, #128	@ 0x80
 80068b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80068ba:	4b5a      	ldr	r3, [pc, #360]	@ (8006a24 <HAL_RCC_ClockConfig+0x264>)
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f023 0203 	bic.w	r2, r3, #3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	4957      	ldr	r1, [pc, #348]	@ (8006a24 <HAL_RCC_ClockConfig+0x264>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068cc:	f7fb fe7a 	bl	80025c4 <HAL_GetTick>
 80068d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068d2:	e00a      	b.n	80068ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068d4:	f7fb fe76 	bl	80025c4 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d901      	bls.n	80068ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e095      	b.n	8006a16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068ea:	4b4e      	ldr	r3, [pc, #312]	@ (8006a24 <HAL_RCC_ClockConfig+0x264>)
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f003 020c 	and.w	r2, r3, #12
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d1eb      	bne.n	80068d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	2b00      	cmp	r3, #0
 8006906:	d023      	beq.n	8006950 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0304 	and.w	r3, r3, #4
 8006910:	2b00      	cmp	r3, #0
 8006912:	d005      	beq.n	8006920 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006914:	4b43      	ldr	r3, [pc, #268]	@ (8006a24 <HAL_RCC_ClockConfig+0x264>)
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	4a42      	ldr	r2, [pc, #264]	@ (8006a24 <HAL_RCC_ClockConfig+0x264>)
 800691a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800691e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0308 	and.w	r3, r3, #8
 8006928:	2b00      	cmp	r3, #0
 800692a:	d007      	beq.n	800693c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800692c:	4b3d      	ldr	r3, [pc, #244]	@ (8006a24 <HAL_RCC_ClockConfig+0x264>)
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006934:	4a3b      	ldr	r2, [pc, #236]	@ (8006a24 <HAL_RCC_ClockConfig+0x264>)
 8006936:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800693a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800693c:	4b39      	ldr	r3, [pc, #228]	@ (8006a24 <HAL_RCC_ClockConfig+0x264>)
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	4936      	ldr	r1, [pc, #216]	@ (8006a24 <HAL_RCC_ClockConfig+0x264>)
 800694a:	4313      	orrs	r3, r2
 800694c:	608b      	str	r3, [r1, #8]
 800694e:	e008      	b.n	8006962 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	2b80      	cmp	r3, #128	@ 0x80
 8006954:	d105      	bne.n	8006962 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006956:	4b33      	ldr	r3, [pc, #204]	@ (8006a24 <HAL_RCC_ClockConfig+0x264>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	4a32      	ldr	r2, [pc, #200]	@ (8006a24 <HAL_RCC_ClockConfig+0x264>)
 800695c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006960:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006962:	4b2f      	ldr	r3, [pc, #188]	@ (8006a20 <HAL_RCC_ClockConfig+0x260>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 030f 	and.w	r3, r3, #15
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	429a      	cmp	r2, r3
 800696e:	d21d      	bcs.n	80069ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006970:	4b2b      	ldr	r3, [pc, #172]	@ (8006a20 <HAL_RCC_ClockConfig+0x260>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f023 020f 	bic.w	r2, r3, #15
 8006978:	4929      	ldr	r1, [pc, #164]	@ (8006a20 <HAL_RCC_ClockConfig+0x260>)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	4313      	orrs	r3, r2
 800697e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006980:	f7fb fe20 	bl	80025c4 <HAL_GetTick>
 8006984:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006986:	e00a      	b.n	800699e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006988:	f7fb fe1c 	bl	80025c4 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006996:	4293      	cmp	r3, r2
 8006998:	d901      	bls.n	800699e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e03b      	b.n	8006a16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800699e:	4b20      	ldr	r3, [pc, #128]	@ (8006a20 <HAL_RCC_ClockConfig+0x260>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 030f 	and.w	r3, r3, #15
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d1ed      	bne.n	8006988 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0304 	and.w	r3, r3, #4
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d008      	beq.n	80069ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069b8:	4b1a      	ldr	r3, [pc, #104]	@ (8006a24 <HAL_RCC_ClockConfig+0x264>)
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	4917      	ldr	r1, [pc, #92]	@ (8006a24 <HAL_RCC_ClockConfig+0x264>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0308 	and.w	r3, r3, #8
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d009      	beq.n	80069ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069d6:	4b13      	ldr	r3, [pc, #76]	@ (8006a24 <HAL_RCC_ClockConfig+0x264>)
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	490f      	ldr	r1, [pc, #60]	@ (8006a24 <HAL_RCC_ClockConfig+0x264>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80069ea:	f000 f825 	bl	8006a38 <HAL_RCC_GetSysClockFreq>
 80069ee:	4602      	mov	r2, r0
 80069f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006a24 <HAL_RCC_ClockConfig+0x264>)
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	091b      	lsrs	r3, r3, #4
 80069f6:	f003 030f 	and.w	r3, r3, #15
 80069fa:	490c      	ldr	r1, [pc, #48]	@ (8006a2c <HAL_RCC_ClockConfig+0x26c>)
 80069fc:	5ccb      	ldrb	r3, [r1, r3]
 80069fe:	f003 031f 	and.w	r3, r3, #31
 8006a02:	fa22 f303 	lsr.w	r3, r2, r3
 8006a06:	4a0a      	ldr	r2, [pc, #40]	@ (8006a30 <HAL_RCC_ClockConfig+0x270>)
 8006a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a34 <HAL_RCC_ClockConfig+0x274>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fb fd8c 	bl	800252c <HAL_InitTick>
 8006a14:	4603      	mov	r3, r0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3718      	adds	r7, #24
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	40022000 	.word	0x40022000
 8006a24:	40021000 	.word	0x40021000
 8006a28:	04c4b400 	.word	0x04c4b400
 8006a2c:	08011524 	.word	0x08011524
 8006a30:	20000000 	.word	0x20000000
 8006a34:	20000004 	.word	0x20000004

08006a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006a3e:	4b2c      	ldr	r3, [pc, #176]	@ (8006af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f003 030c 	and.w	r3, r3, #12
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	d102      	bne.n	8006a50 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006a4a:	4b2a      	ldr	r3, [pc, #168]	@ (8006af4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006a4c:	613b      	str	r3, [r7, #16]
 8006a4e:	e047      	b.n	8006ae0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006a50:	4b27      	ldr	r3, [pc, #156]	@ (8006af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f003 030c 	and.w	r3, r3, #12
 8006a58:	2b08      	cmp	r3, #8
 8006a5a:	d102      	bne.n	8006a62 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006a5c:	4b26      	ldr	r3, [pc, #152]	@ (8006af8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006a5e:	613b      	str	r3, [r7, #16]
 8006a60:	e03e      	b.n	8006ae0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006a62:	4b23      	ldr	r3, [pc, #140]	@ (8006af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f003 030c 	and.w	r3, r3, #12
 8006a6a:	2b0c      	cmp	r3, #12
 8006a6c:	d136      	bne.n	8006adc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006a6e:	4b20      	ldr	r3, [pc, #128]	@ (8006af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	f003 0303 	and.w	r3, r3, #3
 8006a76:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006a78:	4b1d      	ldr	r3, [pc, #116]	@ (8006af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	091b      	lsrs	r3, r3, #4
 8006a7e:	f003 030f 	and.w	r3, r3, #15
 8006a82:	3301      	adds	r3, #1
 8006a84:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b03      	cmp	r3, #3
 8006a8a:	d10c      	bne.n	8006aa6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006a8c:	4a1a      	ldr	r2, [pc, #104]	@ (8006af8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a94:	4a16      	ldr	r2, [pc, #88]	@ (8006af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a96:	68d2      	ldr	r2, [r2, #12]
 8006a98:	0a12      	lsrs	r2, r2, #8
 8006a9a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006a9e:	fb02 f303 	mul.w	r3, r2, r3
 8006aa2:	617b      	str	r3, [r7, #20]
      break;
 8006aa4:	e00c      	b.n	8006ac0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006aa6:	4a13      	ldr	r2, [pc, #76]	@ (8006af4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aae:	4a10      	ldr	r2, [pc, #64]	@ (8006af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ab0:	68d2      	ldr	r2, [r2, #12]
 8006ab2:	0a12      	lsrs	r2, r2, #8
 8006ab4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ab8:	fb02 f303 	mul.w	r3, r2, r3
 8006abc:	617b      	str	r3, [r7, #20]
      break;
 8006abe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8006af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	0e5b      	lsrs	r3, r3, #25
 8006ac6:	f003 0303 	and.w	r3, r3, #3
 8006aca:	3301      	adds	r3, #1
 8006acc:	005b      	lsls	r3, r3, #1
 8006ace:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad8:	613b      	str	r3, [r7, #16]
 8006ada:	e001      	b.n	8006ae0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006ae0:	693b      	ldr	r3, [r7, #16]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	371c      	adds	r7, #28
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	40021000 	.word	0x40021000
 8006af4:	00f42400 	.word	0x00f42400
 8006af8:	016e3600 	.word	0x016e3600

08006afc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b00:	4b03      	ldr	r3, [pc, #12]	@ (8006b10 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b02:	681b      	ldr	r3, [r3, #0]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	20000000 	.word	0x20000000

08006b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006b18:	f7ff fff0 	bl	8006afc <HAL_RCC_GetHCLKFreq>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	4b06      	ldr	r3, [pc, #24]	@ (8006b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	0a1b      	lsrs	r3, r3, #8
 8006b24:	f003 0307 	and.w	r3, r3, #7
 8006b28:	4904      	ldr	r1, [pc, #16]	@ (8006b3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b2a:	5ccb      	ldrb	r3, [r1, r3]
 8006b2c:	f003 031f 	and.w	r3, r3, #31
 8006b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	40021000 	.word	0x40021000
 8006b3c:	08011534 	.word	0x08011534

08006b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006b44:	f7ff ffda 	bl	8006afc <HAL_RCC_GetHCLKFreq>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	4b06      	ldr	r3, [pc, #24]	@ (8006b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	0adb      	lsrs	r3, r3, #11
 8006b50:	f003 0307 	and.w	r3, r3, #7
 8006b54:	4904      	ldr	r1, [pc, #16]	@ (8006b68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b56:	5ccb      	ldrb	r3, [r1, r3]
 8006b58:	f003 031f 	and.w	r3, r3, #31
 8006b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	40021000 	.word	0x40021000
 8006b68:	08011534 	.word	0x08011534

08006b6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006b72:	4b1e      	ldr	r3, [pc, #120]	@ (8006bec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	f003 0303 	and.w	r3, r3, #3
 8006b7a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8006bec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	091b      	lsrs	r3, r3, #4
 8006b82:	f003 030f 	and.w	r3, r3, #15
 8006b86:	3301      	adds	r3, #1
 8006b88:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	2b03      	cmp	r3, #3
 8006b8e:	d10c      	bne.n	8006baa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b90:	4a17      	ldr	r2, [pc, #92]	@ (8006bf0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b98:	4a14      	ldr	r2, [pc, #80]	@ (8006bec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006b9a:	68d2      	ldr	r2, [r2, #12]
 8006b9c:	0a12      	lsrs	r2, r2, #8
 8006b9e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ba2:	fb02 f303 	mul.w	r3, r2, r3
 8006ba6:	617b      	str	r3, [r7, #20]
    break;
 8006ba8:	e00c      	b.n	8006bc4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006baa:	4a12      	ldr	r2, [pc, #72]	@ (8006bf4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb2:	4a0e      	ldr	r2, [pc, #56]	@ (8006bec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006bb4:	68d2      	ldr	r2, [r2, #12]
 8006bb6:	0a12      	lsrs	r2, r2, #8
 8006bb8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006bbc:	fb02 f303 	mul.w	r3, r2, r3
 8006bc0:	617b      	str	r3, [r7, #20]
    break;
 8006bc2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006bc4:	4b09      	ldr	r3, [pc, #36]	@ (8006bec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	0e5b      	lsrs	r3, r3, #25
 8006bca:	f003 0303 	and.w	r3, r3, #3
 8006bce:	3301      	adds	r3, #1
 8006bd0:	005b      	lsls	r3, r3, #1
 8006bd2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bdc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006bde:	687b      	ldr	r3, [r7, #4]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	371c      	adds	r7, #28
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	40021000 	.word	0x40021000
 8006bf0:	016e3600 	.word	0x016e3600
 8006bf4:	00f42400 	.word	0x00f42400

08006bf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c00:	2300      	movs	r3, #0
 8006c02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c04:	2300      	movs	r3, #0
 8006c06:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 8098 	beq.w	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c16:	2300      	movs	r3, #0
 8006c18:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c1a:	4b43      	ldr	r3, [pc, #268]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10d      	bne.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c26:	4b40      	ldr	r3, [pc, #256]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c2a:	4a3f      	ldr	r2, [pc, #252]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c30:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c32:	4b3d      	ldr	r3, [pc, #244]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c3a:	60bb      	str	r3, [r7, #8]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c42:	4b3a      	ldr	r3, [pc, #232]	@ (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a39      	ldr	r2, [pc, #228]	@ (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c4e:	f7fb fcb9 	bl	80025c4 <HAL_GetTick>
 8006c52:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c54:	e009      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c56:	f7fb fcb5 	bl	80025c4 <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d902      	bls.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	74fb      	strb	r3, [r7, #19]
        break;
 8006c68:	e005      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c6a:	4b30      	ldr	r3, [pc, #192]	@ (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d0ef      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006c76:	7cfb      	ldrb	r3, [r7, #19]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d159      	bne.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006c7c:	4b2a      	ldr	r3, [pc, #168]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c86:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d01e      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d019      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006c98:	4b23      	ldr	r3, [pc, #140]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ca2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ca4:	4b20      	ldr	r3, [pc, #128]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006caa:	4a1f      	ldr	r2, [pc, #124]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cba:	4a1b      	ldr	r2, [pc, #108]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006cc4:	4a18      	ldr	r2, [pc, #96]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d016      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cd6:	f7fb fc75 	bl	80025c4 <HAL_GetTick>
 8006cda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cdc:	e00b      	b.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cde:	f7fb fc71 	bl	80025c4 <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d902      	bls.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	74fb      	strb	r3, [r7, #19]
            break;
 8006cf4:	e006      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cfc:	f003 0302 	and.w	r3, r3, #2
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d0ec      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006d04:	7cfb      	ldrb	r3, [r7, #19]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10b      	bne.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d0a:	4b07      	ldr	r3, [pc, #28]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d18:	4903      	ldr	r1, [pc, #12]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006d20:	e008      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d22:	7cfb      	ldrb	r3, [r7, #19]
 8006d24:	74bb      	strb	r3, [r7, #18]
 8006d26:	e005      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006d28:	40021000 	.word	0x40021000
 8006d2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d30:	7cfb      	ldrb	r3, [r7, #19]
 8006d32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d34:	7c7b      	ldrb	r3, [r7, #17]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d105      	bne.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d3a:	4ba6      	ldr	r3, [pc, #664]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d3e:	4aa5      	ldr	r2, [pc, #660]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d44:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00a      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d52:	4ba0      	ldr	r3, [pc, #640]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d58:	f023 0203 	bic.w	r2, r3, #3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	499c      	ldr	r1, [pc, #624]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0302 	and.w	r3, r3, #2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00a      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d74:	4b97      	ldr	r3, [pc, #604]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d7a:	f023 020c 	bic.w	r2, r3, #12
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	4994      	ldr	r1, [pc, #592]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0304 	and.w	r3, r3, #4
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00a      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006d96:	4b8f      	ldr	r3, [pc, #572]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d9c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	498b      	ldr	r1, [pc, #556]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0308 	and.w	r3, r3, #8
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00a      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006db8:	4b86      	ldr	r3, [pc, #536]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dbe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	4983      	ldr	r1, [pc, #524]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0320 	and.w	r3, r3, #32
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00a      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006dda:	4b7e      	ldr	r3, [pc, #504]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006de0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	695b      	ldr	r3, [r3, #20]
 8006de8:	497a      	ldr	r1, [pc, #488]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00a      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006dfc:	4b75      	ldr	r3, [pc, #468]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e02:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	4972      	ldr	r1, [pc, #456]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00a      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006e1e:	4b6d      	ldr	r3, [pc, #436]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e24:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	4969      	ldr	r1, [pc, #420]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00a      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006e40:	4b64      	ldr	r3, [pc, #400]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e46:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	4961      	ldr	r1, [pc, #388]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00a      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e62:	4b5c      	ldr	r3, [pc, #368]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e68:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e70:	4958      	ldr	r1, [pc, #352]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d015      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e84:	4b53      	ldr	r3, [pc, #332]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e92:	4950      	ldr	r1, [pc, #320]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ea2:	d105      	bne.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ea4:	4b4b      	ldr	r3, [pc, #300]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	4a4a      	ldr	r2, [pc, #296]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006eae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d015      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006ebc:	4b45      	ldr	r3, [pc, #276]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ec2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eca:	4942      	ldr	r1, [pc, #264]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006eda:	d105      	bne.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006edc:	4b3d      	ldr	r3, [pc, #244]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	4a3c      	ldr	r2, [pc, #240]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ee2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ee6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d015      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006ef4:	4b37      	ldr	r3, [pc, #220]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006efa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f02:	4934      	ldr	r1, [pc, #208]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f04:	4313      	orrs	r3, r2
 8006f06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f12:	d105      	bne.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f14:	4b2f      	ldr	r3, [pc, #188]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	4a2e      	ldr	r2, [pc, #184]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f1e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d015      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f2c:	4b29      	ldr	r3, [pc, #164]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f32:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f3a:	4926      	ldr	r1, [pc, #152]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f4a:	d105      	bne.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f4c:	4b21      	ldr	r3, [pc, #132]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	4a20      	ldr	r2, [pc, #128]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f56:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d015      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f64:	4b1b      	ldr	r3, [pc, #108]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f72:	4918      	ldr	r1, [pc, #96]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f74:	4313      	orrs	r3, r2
 8006f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f82:	d105      	bne.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f84:	4b13      	ldr	r3, [pc, #76]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	4a12      	ldr	r2, [pc, #72]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f8e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d015      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fa2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006faa:	490a      	ldr	r1, [pc, #40]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fba:	d105      	bne.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006fbc:	4b05      	ldr	r3, [pc, #20]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	4a04      	ldr	r2, [pc, #16]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fc6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006fc8:	7cbb      	ldrb	r3, [r7, #18]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	40021000 	.word	0x40021000

08006fd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e09d      	b.n	8007126 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d108      	bne.n	8007004 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ffa:	d009      	beq.n	8007010 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	61da      	str	r2, [r3, #28]
 8007002:	e005      	b.n	8007010 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d106      	bne.n	8007030 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7fa fcee 	bl	8001a0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007046:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007050:	d902      	bls.n	8007058 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007052:	2300      	movs	r3, #0
 8007054:	60fb      	str	r3, [r7, #12]
 8007056:	e002      	b.n	800705e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007058:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800705c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007066:	d007      	beq.n	8007078 <HAL_SPI_Init+0xa0>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007070:	d002      	beq.n	8007078 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007088:	431a      	orrs	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	f003 0302 	and.w	r3, r3, #2
 8007092:	431a      	orrs	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	431a      	orrs	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070a6:	431a      	orrs	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070b0:	431a      	orrs	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070ba:	ea42 0103 	orr.w	r1, r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	430a      	orrs	r2, r1
 80070cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	0c1b      	lsrs	r3, r3, #16
 80070d4:	f003 0204 	and.w	r2, r3, #4
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070dc:	f003 0310 	and.w	r3, r3, #16
 80070e0:	431a      	orrs	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070e6:	f003 0308 	and.w	r3, r3, #8
 80070ea:	431a      	orrs	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80070f4:	ea42 0103 	orr.w	r1, r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	430a      	orrs	r2, r1
 8007104:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	69da      	ldr	r2, [r3, #28]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007114:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b08a      	sub	sp, #40	@ 0x28
 8007132:	af00      	add	r7, sp, #0
 8007134:	60f8      	str	r0, [r7, #12]
 8007136:	60b9      	str	r1, [r7, #8]
 8007138:	607a      	str	r2, [r7, #4]
 800713a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800713c:	2301      	movs	r3, #1
 800713e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007140:	2300      	movs	r3, #0
 8007142:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800714c:	2b01      	cmp	r3, #1
 800714e:	d101      	bne.n	8007154 <HAL_SPI_TransmitReceive+0x26>
 8007150:	2302      	movs	r3, #2
 8007152:	e20a      	b.n	800756a <HAL_SPI_TransmitReceive+0x43c>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800715c:	f7fb fa32 	bl	80025c4 <HAL_GetTick>
 8007160:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007168:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007170:	887b      	ldrh	r3, [r7, #2]
 8007172:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007174:	887b      	ldrh	r3, [r7, #2]
 8007176:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007178:	7efb      	ldrb	r3, [r7, #27]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d00e      	beq.n	800719c <HAL_SPI_TransmitReceive+0x6e>
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007184:	d106      	bne.n	8007194 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d102      	bne.n	8007194 <HAL_SPI_TransmitReceive+0x66>
 800718e:	7efb      	ldrb	r3, [r7, #27]
 8007190:	2b04      	cmp	r3, #4
 8007192:	d003      	beq.n	800719c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007194:	2302      	movs	r3, #2
 8007196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800719a:	e1e0      	b.n	800755e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d005      	beq.n	80071ae <HAL_SPI_TransmitReceive+0x80>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d002      	beq.n	80071ae <HAL_SPI_TransmitReceive+0x80>
 80071a8:	887b      	ldrh	r3, [r7, #2]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d103      	bne.n	80071b6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80071b4:	e1d3      	b.n	800755e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b04      	cmp	r3, #4
 80071c0:	d003      	beq.n	80071ca <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2205      	movs	r2, #5
 80071c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	887a      	ldrh	r2, [r7, #2]
 80071da:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	887a      	ldrh	r2, [r7, #2]
 80071e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	68ba      	ldr	r2, [r7, #8]
 80071ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	887a      	ldrh	r2, [r7, #2]
 80071f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	887a      	ldrh	r2, [r7, #2]
 80071f6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800720c:	d802      	bhi.n	8007214 <HAL_SPI_TransmitReceive+0xe6>
 800720e:	8a3b      	ldrh	r3, [r7, #16]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d908      	bls.n	8007226 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685a      	ldr	r2, [r3, #4]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007222:	605a      	str	r2, [r3, #4]
 8007224:	e007      	b.n	8007236 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007234:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007240:	2b40      	cmp	r3, #64	@ 0x40
 8007242:	d007      	beq.n	8007254 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007252:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800725c:	f240 8081 	bls.w	8007362 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d002      	beq.n	800726e <HAL_SPI_TransmitReceive+0x140>
 8007268:	8a7b      	ldrh	r3, [r7, #18]
 800726a:	2b01      	cmp	r3, #1
 800726c:	d16d      	bne.n	800734a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007272:	881a      	ldrh	r2, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800727e:	1c9a      	adds	r2, r3, #2
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007288:	b29b      	uxth	r3, r3
 800728a:	3b01      	subs	r3, #1
 800728c:	b29a      	uxth	r2, r3
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007292:	e05a      	b.n	800734a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f003 0302 	and.w	r3, r3, #2
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d11b      	bne.n	80072da <HAL_SPI_TransmitReceive+0x1ac>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d016      	beq.n	80072da <HAL_SPI_TransmitReceive+0x1ac>
 80072ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d113      	bne.n	80072da <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b6:	881a      	ldrh	r2, [r3, #0]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c2:	1c9a      	adds	r2, r3, #2
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	3b01      	subs	r3, #1
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d11c      	bne.n	8007322 <HAL_SPI_TransmitReceive+0x1f4>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d016      	beq.n	8007322 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68da      	ldr	r2, [r3, #12]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072fe:	b292      	uxth	r2, r2
 8007300:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007306:	1c9a      	adds	r2, r3, #2
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007312:	b29b      	uxth	r3, r3
 8007314:	3b01      	subs	r3, #1
 8007316:	b29a      	uxth	r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800731e:	2301      	movs	r3, #1
 8007320:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007322:	f7fb f94f 	bl	80025c4 <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800732e:	429a      	cmp	r2, r3
 8007330:	d80b      	bhi.n	800734a <HAL_SPI_TransmitReceive+0x21c>
 8007332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007338:	d007      	beq.n	800734a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007348:	e109      	b.n	800755e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800734e:	b29b      	uxth	r3, r3
 8007350:	2b00      	cmp	r3, #0
 8007352:	d19f      	bne.n	8007294 <HAL_SPI_TransmitReceive+0x166>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800735a:	b29b      	uxth	r3, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	d199      	bne.n	8007294 <HAL_SPI_TransmitReceive+0x166>
 8007360:	e0e3      	b.n	800752a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d003      	beq.n	8007372 <HAL_SPI_TransmitReceive+0x244>
 800736a:	8a7b      	ldrh	r3, [r7, #18]
 800736c:	2b01      	cmp	r3, #1
 800736e:	f040 80cf 	bne.w	8007510 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007376:	b29b      	uxth	r3, r3
 8007378:	2b01      	cmp	r3, #1
 800737a:	d912      	bls.n	80073a2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007380:	881a      	ldrh	r2, [r3, #0]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800738c:	1c9a      	adds	r2, r3, #2
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007396:	b29b      	uxth	r3, r3
 8007398:	3b02      	subs	r3, #2
 800739a:	b29a      	uxth	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80073a0:	e0b6      	b.n	8007510 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	330c      	adds	r3, #12
 80073ac:	7812      	ldrb	r2, [r2, #0]
 80073ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b4:	1c5a      	adds	r2, r3, #1
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073be:	b29b      	uxth	r3, r3
 80073c0:	3b01      	subs	r3, #1
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073c8:	e0a2      	b.n	8007510 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d134      	bne.n	8007442 <HAL_SPI_TransmitReceive+0x314>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073dc:	b29b      	uxth	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d02f      	beq.n	8007442 <HAL_SPI_TransmitReceive+0x314>
 80073e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d12c      	bne.n	8007442 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d912      	bls.n	8007418 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f6:	881a      	ldrh	r2, [r3, #0]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007402:	1c9a      	adds	r2, r3, #2
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800740c:	b29b      	uxth	r3, r3
 800740e:	3b02      	subs	r3, #2
 8007410:	b29a      	uxth	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007416:	e012      	b.n	800743e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	330c      	adds	r3, #12
 8007422:	7812      	ldrb	r2, [r2, #0]
 8007424:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800742a:	1c5a      	adds	r2, r3, #1
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007434:	b29b      	uxth	r3, r3
 8007436:	3b01      	subs	r3, #1
 8007438:	b29a      	uxth	r2, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800743e:	2300      	movs	r3, #0
 8007440:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b01      	cmp	r3, #1
 800744e:	d148      	bne.n	80074e2 <HAL_SPI_TransmitReceive+0x3b4>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007456:	b29b      	uxth	r3, r3
 8007458:	2b00      	cmp	r3, #0
 800745a:	d042      	beq.n	80074e2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007462:	b29b      	uxth	r3, r3
 8007464:	2b01      	cmp	r3, #1
 8007466:	d923      	bls.n	80074b0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68da      	ldr	r2, [r3, #12]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007472:	b292      	uxth	r2, r2
 8007474:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800747a:	1c9a      	adds	r2, r3, #2
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007486:	b29b      	uxth	r3, r3
 8007488:	3b02      	subs	r3, #2
 800748a:	b29a      	uxth	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007498:	b29b      	uxth	r3, r3
 800749a:	2b01      	cmp	r3, #1
 800749c:	d81f      	bhi.n	80074de <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80074ac:	605a      	str	r2, [r3, #4]
 80074ae:	e016      	b.n	80074de <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f103 020c 	add.w	r2, r3, #12
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074bc:	7812      	ldrb	r2, [r2, #0]
 80074be:	b2d2      	uxtb	r2, r2
 80074c0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c6:	1c5a      	adds	r2, r3, #1
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	3b01      	subs	r3, #1
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074de:	2301      	movs	r3, #1
 80074e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80074e2:	f7fb f86f 	bl	80025c4 <HAL_GetTick>
 80074e6:	4602      	mov	r2, r0
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d803      	bhi.n	80074fa <HAL_SPI_TransmitReceive+0x3cc>
 80074f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f8:	d102      	bne.n	8007500 <HAL_SPI_TransmitReceive+0x3d2>
 80074fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d107      	bne.n	8007510 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800750e:	e026      	b.n	800755e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007514:	b29b      	uxth	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	f47f af57 	bne.w	80073ca <HAL_SPI_TransmitReceive+0x29c>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007522:	b29b      	uxth	r3, r3
 8007524:	2b00      	cmp	r3, #0
 8007526:	f47f af50 	bne.w	80073ca <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800752a:	69fa      	ldr	r2, [r7, #28]
 800752c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f000 f94c 	bl	80077cc <SPI_EndRxTxTransaction>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d005      	beq.n	8007546 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2220      	movs	r2, #32
 8007544:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800754a:	2b00      	cmp	r3, #0
 800754c:	d003      	beq.n	8007556 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007554:	e003      	b.n	800755e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007566:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800756a:	4618      	mov	r0, r3
 800756c:	3728      	adds	r7, #40	@ 0x28
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007572:	b480      	push	{r7}
 8007574:	b083      	sub	sp, #12
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007580:	b2db      	uxtb	r3, r3
}
 8007582:	4618      	mov	r0, r3
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
	...

08007590 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b088      	sub	sp, #32
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	603b      	str	r3, [r7, #0]
 800759c:	4613      	mov	r3, r2
 800759e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80075a0:	f7fb f810 	bl	80025c4 <HAL_GetTick>
 80075a4:	4602      	mov	r2, r0
 80075a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a8:	1a9b      	subs	r3, r3, r2
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	4413      	add	r3, r2
 80075ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80075b0:	f7fb f808 	bl	80025c4 <HAL_GetTick>
 80075b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80075b6:	4b39      	ldr	r3, [pc, #228]	@ (800769c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	015b      	lsls	r3, r3, #5
 80075bc:	0d1b      	lsrs	r3, r3, #20
 80075be:	69fa      	ldr	r2, [r7, #28]
 80075c0:	fb02 f303 	mul.w	r3, r2, r3
 80075c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075c6:	e054      	b.n	8007672 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ce:	d050      	beq.n	8007672 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80075d0:	f7fa fff8 	bl	80025c4 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	69fa      	ldr	r2, [r7, #28]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d902      	bls.n	80075e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d13d      	bne.n	8007662 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	685a      	ldr	r2, [r3, #4]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80075f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075fe:	d111      	bne.n	8007624 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007608:	d004      	beq.n	8007614 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007612:	d107      	bne.n	8007624 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007622:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007628:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800762c:	d10f      	bne.n	800764e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800764c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e017      	b.n	8007692 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007668:	2300      	movs	r3, #0
 800766a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	3b01      	subs	r3, #1
 8007670:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	689a      	ldr	r2, [r3, #8]
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	4013      	ands	r3, r2
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	429a      	cmp	r2, r3
 8007680:	bf0c      	ite	eq
 8007682:	2301      	moveq	r3, #1
 8007684:	2300      	movne	r3, #0
 8007686:	b2db      	uxtb	r3, r3
 8007688:	461a      	mov	r2, r3
 800768a:	79fb      	ldrb	r3, [r7, #7]
 800768c:	429a      	cmp	r2, r3
 800768e:	d19b      	bne.n	80075c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3720      	adds	r7, #32
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	20000000 	.word	0x20000000

080076a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b08a      	sub	sp, #40	@ 0x28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
 80076ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80076ae:	2300      	movs	r3, #0
 80076b0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80076b2:	f7fa ff87 	bl	80025c4 <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ba:	1a9b      	subs	r3, r3, r2
 80076bc:	683a      	ldr	r2, [r7, #0]
 80076be:	4413      	add	r3, r2
 80076c0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80076c2:	f7fa ff7f 	bl	80025c4 <HAL_GetTick>
 80076c6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	330c      	adds	r3, #12
 80076ce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80076d0:	4b3d      	ldr	r3, [pc, #244]	@ (80077c8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	4613      	mov	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	00da      	lsls	r2, r3, #3
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	0d1b      	lsrs	r3, r3, #20
 80076e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076e2:	fb02 f303 	mul.w	r3, r2, r3
 80076e6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80076e8:	e060      	b.n	80077ac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80076f0:	d107      	bne.n	8007702 <SPI_WaitFifoStateUntilTimeout+0x62>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d104      	bne.n	8007702 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007700:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007708:	d050      	beq.n	80077ac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800770a:	f7fa ff5b 	bl	80025c4 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007716:	429a      	cmp	r2, r3
 8007718:	d902      	bls.n	8007720 <SPI_WaitFifoStateUntilTimeout+0x80>
 800771a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771c:	2b00      	cmp	r3, #0
 800771e:	d13d      	bne.n	800779c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	685a      	ldr	r2, [r3, #4]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800772e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007738:	d111      	bne.n	800775e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007742:	d004      	beq.n	800774e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800774c:	d107      	bne.n	800775e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800775c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007762:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007766:	d10f      	bne.n	8007788 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007776:	601a      	str	r2, [r3, #0]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007786:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e010      	b.n	80077be <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80077a2:	2300      	movs	r3, #0
 80077a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	3b01      	subs	r3, #1
 80077aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	689a      	ldr	r2, [r3, #8]
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	4013      	ands	r3, r2
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d196      	bne.n	80076ea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3728      	adds	r7, #40	@ 0x28
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	20000000 	.word	0x20000000

080077cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af02      	add	r7, sp, #8
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2200      	movs	r2, #0
 80077e0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f7ff ff5b 	bl	80076a0 <SPI_WaitFifoStateUntilTimeout>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d007      	beq.n	8007800 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077f4:	f043 0220 	orr.w	r2, r3, #32
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e027      	b.n	8007850 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	2200      	movs	r2, #0
 8007808:	2180      	movs	r1, #128	@ 0x80
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f7ff fec0 	bl	8007590 <SPI_WaitFlagStateUntilTimeout>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d007      	beq.n	8007826 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800781a:	f043 0220 	orr.w	r2, r3, #32
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e014      	b.n	8007850 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	2200      	movs	r2, #0
 800782e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f7ff ff34 	bl	80076a0 <SPI_WaitFifoStateUntilTimeout>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d007      	beq.n	800784e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007842:	f043 0220 	orr.w	r2, r3, #32
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	e000      	b.n	8007850 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e049      	b.n	80078fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d106      	bne.n	8007884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7fa fc66 	bl	8002150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2202      	movs	r2, #2
 8007888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	3304      	adds	r3, #4
 8007894:	4619      	mov	r1, r3
 8007896:	4610      	mov	r0, r2
 8007898:	f000 fc9e 	bl	80081d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3708      	adds	r7, #8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
	...

08007908 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007916:	b2db      	uxtb	r3, r3
 8007918:	2b01      	cmp	r3, #1
 800791a:	d001      	beq.n	8007920 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e042      	b.n	80079a6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2202      	movs	r2, #2
 8007924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a21      	ldr	r2, [pc, #132]	@ (80079b4 <HAL_TIM_Base_Start+0xac>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d018      	beq.n	8007964 <HAL_TIM_Base_Start+0x5c>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800793a:	d013      	beq.n	8007964 <HAL_TIM_Base_Start+0x5c>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a1d      	ldr	r2, [pc, #116]	@ (80079b8 <HAL_TIM_Base_Start+0xb0>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d00e      	beq.n	8007964 <HAL_TIM_Base_Start+0x5c>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a1c      	ldr	r2, [pc, #112]	@ (80079bc <HAL_TIM_Base_Start+0xb4>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d009      	beq.n	8007964 <HAL_TIM_Base_Start+0x5c>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a1a      	ldr	r2, [pc, #104]	@ (80079c0 <HAL_TIM_Base_Start+0xb8>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d004      	beq.n	8007964 <HAL_TIM_Base_Start+0x5c>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a19      	ldr	r2, [pc, #100]	@ (80079c4 <HAL_TIM_Base_Start+0xbc>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d115      	bne.n	8007990 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	689a      	ldr	r2, [r3, #8]
 800796a:	4b17      	ldr	r3, [pc, #92]	@ (80079c8 <HAL_TIM_Base_Start+0xc0>)
 800796c:	4013      	ands	r3, r2
 800796e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2b06      	cmp	r3, #6
 8007974:	d015      	beq.n	80079a2 <HAL_TIM_Base_Start+0x9a>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800797c:	d011      	beq.n	80079a2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f042 0201 	orr.w	r2, r2, #1
 800798c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800798e:	e008      	b.n	80079a2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f042 0201 	orr.w	r2, r2, #1
 800799e:	601a      	str	r2, [r3, #0]
 80079a0:	e000      	b.n	80079a4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3714      	adds	r7, #20
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	40012c00 	.word	0x40012c00
 80079b8:	40000400 	.word	0x40000400
 80079bc:	40000800 	.word	0x40000800
 80079c0:	40013400 	.word	0x40013400
 80079c4:	40014000 	.word	0x40014000
 80079c8:	00010007 	.word	0x00010007

080079cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d101      	bne.n	80079de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e049      	b.n	8007a72 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d106      	bne.n	80079f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f841 	bl	8007a7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2202      	movs	r2, #2
 80079fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	3304      	adds	r3, #4
 8007a08:	4619      	mov	r1, r3
 8007a0a:	4610      	mov	r0, r2
 8007a0c:	f000 fbe4 	bl	80081d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b083      	sub	sp, #12
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007a82:	bf00      	nop
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
	...

08007a90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d109      	bne.n	8007ab4 <HAL_TIM_PWM_Start+0x24>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	bf14      	ite	ne
 8007aac:	2301      	movne	r3, #1
 8007aae:	2300      	moveq	r3, #0
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	e03c      	b.n	8007b2e <HAL_TIM_PWM_Start+0x9e>
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	2b04      	cmp	r3, #4
 8007ab8:	d109      	bne.n	8007ace <HAL_TIM_PWM_Start+0x3e>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	bf14      	ite	ne
 8007ac6:	2301      	movne	r3, #1
 8007ac8:	2300      	moveq	r3, #0
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	e02f      	b.n	8007b2e <HAL_TIM_PWM_Start+0x9e>
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b08      	cmp	r3, #8
 8007ad2:	d109      	bne.n	8007ae8 <HAL_TIM_PWM_Start+0x58>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	bf14      	ite	ne
 8007ae0:	2301      	movne	r3, #1
 8007ae2:	2300      	moveq	r3, #0
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	e022      	b.n	8007b2e <HAL_TIM_PWM_Start+0x9e>
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	2b0c      	cmp	r3, #12
 8007aec:	d109      	bne.n	8007b02 <HAL_TIM_PWM_Start+0x72>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	bf14      	ite	ne
 8007afa:	2301      	movne	r3, #1
 8007afc:	2300      	moveq	r3, #0
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	e015      	b.n	8007b2e <HAL_TIM_PWM_Start+0x9e>
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b10      	cmp	r3, #16
 8007b06:	d109      	bne.n	8007b1c <HAL_TIM_PWM_Start+0x8c>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	bf14      	ite	ne
 8007b14:	2301      	movne	r3, #1
 8007b16:	2300      	moveq	r3, #0
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	e008      	b.n	8007b2e <HAL_TIM_PWM_Start+0x9e>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	bf14      	ite	ne
 8007b28:	2301      	movne	r3, #1
 8007b2a:	2300      	moveq	r3, #0
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e097      	b.n	8007c66 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d104      	bne.n	8007b46 <HAL_TIM_PWM_Start+0xb6>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2202      	movs	r2, #2
 8007b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b44:	e023      	b.n	8007b8e <HAL_TIM_PWM_Start+0xfe>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	2b04      	cmp	r3, #4
 8007b4a:	d104      	bne.n	8007b56 <HAL_TIM_PWM_Start+0xc6>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b54:	e01b      	b.n	8007b8e <HAL_TIM_PWM_Start+0xfe>
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2b08      	cmp	r3, #8
 8007b5a:	d104      	bne.n	8007b66 <HAL_TIM_PWM_Start+0xd6>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b64:	e013      	b.n	8007b8e <HAL_TIM_PWM_Start+0xfe>
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b0c      	cmp	r3, #12
 8007b6a:	d104      	bne.n	8007b76 <HAL_TIM_PWM_Start+0xe6>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2202      	movs	r2, #2
 8007b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b74:	e00b      	b.n	8007b8e <HAL_TIM_PWM_Start+0xfe>
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2b10      	cmp	r3, #16
 8007b7a:	d104      	bne.n	8007b86 <HAL_TIM_PWM_Start+0xf6>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2202      	movs	r2, #2
 8007b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b84:	e003      	b.n	8007b8e <HAL_TIM_PWM_Start+0xfe>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2202      	movs	r2, #2
 8007b8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2201      	movs	r2, #1
 8007b94:	6839      	ldr	r1, [r7, #0]
 8007b96:	4618      	mov	r0, r3
 8007b98:	f000 ff4c 	bl	8008a34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a33      	ldr	r2, [pc, #204]	@ (8007c70 <HAL_TIM_PWM_Start+0x1e0>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d013      	beq.n	8007bce <HAL_TIM_PWM_Start+0x13e>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a32      	ldr	r2, [pc, #200]	@ (8007c74 <HAL_TIM_PWM_Start+0x1e4>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d00e      	beq.n	8007bce <HAL_TIM_PWM_Start+0x13e>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a30      	ldr	r2, [pc, #192]	@ (8007c78 <HAL_TIM_PWM_Start+0x1e8>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d009      	beq.n	8007bce <HAL_TIM_PWM_Start+0x13e>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a2f      	ldr	r2, [pc, #188]	@ (8007c7c <HAL_TIM_PWM_Start+0x1ec>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d004      	beq.n	8007bce <HAL_TIM_PWM_Start+0x13e>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a2d      	ldr	r2, [pc, #180]	@ (8007c80 <HAL_TIM_PWM_Start+0x1f0>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d101      	bne.n	8007bd2 <HAL_TIM_PWM_Start+0x142>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e000      	b.n	8007bd4 <HAL_TIM_PWM_Start+0x144>
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d007      	beq.n	8007be8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007be6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a20      	ldr	r2, [pc, #128]	@ (8007c70 <HAL_TIM_PWM_Start+0x1e0>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d018      	beq.n	8007c24 <HAL_TIM_PWM_Start+0x194>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bfa:	d013      	beq.n	8007c24 <HAL_TIM_PWM_Start+0x194>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a20      	ldr	r2, [pc, #128]	@ (8007c84 <HAL_TIM_PWM_Start+0x1f4>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d00e      	beq.n	8007c24 <HAL_TIM_PWM_Start+0x194>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a1f      	ldr	r2, [pc, #124]	@ (8007c88 <HAL_TIM_PWM_Start+0x1f8>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d009      	beq.n	8007c24 <HAL_TIM_PWM_Start+0x194>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a17      	ldr	r2, [pc, #92]	@ (8007c74 <HAL_TIM_PWM_Start+0x1e4>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d004      	beq.n	8007c24 <HAL_TIM_PWM_Start+0x194>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a16      	ldr	r2, [pc, #88]	@ (8007c78 <HAL_TIM_PWM_Start+0x1e8>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d115      	bne.n	8007c50 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689a      	ldr	r2, [r3, #8]
 8007c2a:	4b18      	ldr	r3, [pc, #96]	@ (8007c8c <HAL_TIM_PWM_Start+0x1fc>)
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b06      	cmp	r3, #6
 8007c34:	d015      	beq.n	8007c62 <HAL_TIM_PWM_Start+0x1d2>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c3c:	d011      	beq.n	8007c62 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f042 0201 	orr.w	r2, r2, #1
 8007c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c4e:	e008      	b.n	8007c62 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f042 0201 	orr.w	r2, r2, #1
 8007c5e:	601a      	str	r2, [r3, #0]
 8007c60:	e000      	b.n	8007c64 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	40012c00 	.word	0x40012c00
 8007c74:	40013400 	.word	0x40013400
 8007c78:	40014000 	.word	0x40014000
 8007c7c:	40014400 	.word	0x40014400
 8007c80:	40014800 	.word	0x40014800
 8007c84:	40000400 	.word	0x40000400
 8007c88:	40000800 	.word	0x40000800
 8007c8c:	00010007 	.word	0x00010007

08007c90 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 fec6 	bl	8008a34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a3e      	ldr	r2, [pc, #248]	@ (8007da8 <HAL_TIM_PWM_Stop+0x118>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d013      	beq.n	8007cda <HAL_TIM_PWM_Stop+0x4a>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a3d      	ldr	r2, [pc, #244]	@ (8007dac <HAL_TIM_PWM_Stop+0x11c>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d00e      	beq.n	8007cda <HAL_TIM_PWM_Stop+0x4a>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a3b      	ldr	r2, [pc, #236]	@ (8007db0 <HAL_TIM_PWM_Stop+0x120>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d009      	beq.n	8007cda <HAL_TIM_PWM_Stop+0x4a>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a3a      	ldr	r2, [pc, #232]	@ (8007db4 <HAL_TIM_PWM_Stop+0x124>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d004      	beq.n	8007cda <HAL_TIM_PWM_Stop+0x4a>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a38      	ldr	r2, [pc, #224]	@ (8007db8 <HAL_TIM_PWM_Stop+0x128>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d101      	bne.n	8007cde <HAL_TIM_PWM_Stop+0x4e>
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e000      	b.n	8007ce0 <HAL_TIM_PWM_Stop+0x50>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d017      	beq.n	8007d14 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6a1a      	ldr	r2, [r3, #32]
 8007cea:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007cee:	4013      	ands	r3, r2
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10f      	bne.n	8007d14 <HAL_TIM_PWM_Stop+0x84>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6a1a      	ldr	r2, [r3, #32]
 8007cfa:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007cfe:	4013      	ands	r3, r2
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d107      	bne.n	8007d14 <HAL_TIM_PWM_Stop+0x84>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d12:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	6a1a      	ldr	r2, [r3, #32]
 8007d1a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007d1e:	4013      	ands	r3, r2
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10f      	bne.n	8007d44 <HAL_TIM_PWM_Stop+0xb4>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	6a1a      	ldr	r2, [r3, #32]
 8007d2a:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007d2e:	4013      	ands	r3, r2
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d107      	bne.n	8007d44 <HAL_TIM_PWM_Stop+0xb4>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f022 0201 	bic.w	r2, r2, #1
 8007d42:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d104      	bne.n	8007d54 <HAL_TIM_PWM_Stop+0xc4>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d52:	e023      	b.n	8007d9c <HAL_TIM_PWM_Stop+0x10c>
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	2b04      	cmp	r3, #4
 8007d58:	d104      	bne.n	8007d64 <HAL_TIM_PWM_Stop+0xd4>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d62:	e01b      	b.n	8007d9c <HAL_TIM_PWM_Stop+0x10c>
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	2b08      	cmp	r3, #8
 8007d68:	d104      	bne.n	8007d74 <HAL_TIM_PWM_Stop+0xe4>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d72:	e013      	b.n	8007d9c <HAL_TIM_PWM_Stop+0x10c>
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	2b0c      	cmp	r3, #12
 8007d78:	d104      	bne.n	8007d84 <HAL_TIM_PWM_Stop+0xf4>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d82:	e00b      	b.n	8007d9c <HAL_TIM_PWM_Stop+0x10c>
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	2b10      	cmp	r3, #16
 8007d88:	d104      	bne.n	8007d94 <HAL_TIM_PWM_Stop+0x104>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d92:	e003      	b.n	8007d9c <HAL_TIM_PWM_Stop+0x10c>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	40012c00 	.word	0x40012c00
 8007dac:	40013400 	.word	0x40013400
 8007db0:	40014000 	.word	0x40014000
 8007db4:	40014400 	.word	0x40014400
 8007db8:	40014800 	.word	0x40014800

08007dbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d101      	bne.n	8007dda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	e0ff      	b.n	8007fda <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2b14      	cmp	r3, #20
 8007de6:	f200 80f0 	bhi.w	8007fca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007dea:	a201      	add	r2, pc, #4	@ (adr r2, 8007df0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df0:	08007e45 	.word	0x08007e45
 8007df4:	08007fcb 	.word	0x08007fcb
 8007df8:	08007fcb 	.word	0x08007fcb
 8007dfc:	08007fcb 	.word	0x08007fcb
 8007e00:	08007e85 	.word	0x08007e85
 8007e04:	08007fcb 	.word	0x08007fcb
 8007e08:	08007fcb 	.word	0x08007fcb
 8007e0c:	08007fcb 	.word	0x08007fcb
 8007e10:	08007ec7 	.word	0x08007ec7
 8007e14:	08007fcb 	.word	0x08007fcb
 8007e18:	08007fcb 	.word	0x08007fcb
 8007e1c:	08007fcb 	.word	0x08007fcb
 8007e20:	08007f07 	.word	0x08007f07
 8007e24:	08007fcb 	.word	0x08007fcb
 8007e28:	08007fcb 	.word	0x08007fcb
 8007e2c:	08007fcb 	.word	0x08007fcb
 8007e30:	08007f49 	.word	0x08007f49
 8007e34:	08007fcb 	.word	0x08007fcb
 8007e38:	08007fcb 	.word	0x08007fcb
 8007e3c:	08007fcb 	.word	0x08007fcb
 8007e40:	08007f89 	.word	0x08007f89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68b9      	ldr	r1, [r7, #8]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 fa60 	bl	8008310 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	699a      	ldr	r2, [r3, #24]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f042 0208 	orr.w	r2, r2, #8
 8007e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	699a      	ldr	r2, [r3, #24]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 0204 	bic.w	r2, r2, #4
 8007e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6999      	ldr	r1, [r3, #24]
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	691a      	ldr	r2, [r3, #16]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	619a      	str	r2, [r3, #24]
      break;
 8007e82:	e0a5      	b.n	8007fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68b9      	ldr	r1, [r7, #8]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f000 fad0 	bl	8008430 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	699a      	ldr	r2, [r3, #24]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	699a      	ldr	r2, [r3, #24]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6999      	ldr	r1, [r3, #24]
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	021a      	lsls	r2, r3, #8
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	430a      	orrs	r2, r1
 8007ec2:	619a      	str	r2, [r3, #24]
      break;
 8007ec4:	e084      	b.n	8007fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68b9      	ldr	r1, [r7, #8]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f000 fb39 	bl	8008544 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	69da      	ldr	r2, [r3, #28]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f042 0208 	orr.w	r2, r2, #8
 8007ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	69da      	ldr	r2, [r3, #28]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f022 0204 	bic.w	r2, r2, #4
 8007ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	69d9      	ldr	r1, [r3, #28]
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	691a      	ldr	r2, [r3, #16]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	430a      	orrs	r2, r1
 8007f02:	61da      	str	r2, [r3, #28]
      break;
 8007f04:	e064      	b.n	8007fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68b9      	ldr	r1, [r7, #8]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f000 fba1 	bl	8008654 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	69da      	ldr	r2, [r3, #28]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	69da      	ldr	r2, [r3, #28]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	69d9      	ldr	r1, [r3, #28]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	021a      	lsls	r2, r3, #8
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	430a      	orrs	r2, r1
 8007f44:	61da      	str	r2, [r3, #28]
      break;
 8007f46:	e043      	b.n	8007fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68b9      	ldr	r1, [r7, #8]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f000 fc0a 	bl	8008768 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f042 0208 	orr.w	r2, r2, #8
 8007f62:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f022 0204 	bic.w	r2, r2, #4
 8007f72:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	691a      	ldr	r2, [r3, #16]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	430a      	orrs	r2, r1
 8007f84:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007f86:	e023      	b.n	8007fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68b9      	ldr	r1, [r7, #8]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f000 fc4e 	bl	8008830 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007fa2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007fb2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	021a      	lsls	r2, r3, #8
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007fc8:	e002      	b.n	8007fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8007fce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3718      	adds	r7, #24
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop

08007fe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d101      	bne.n	8008000 <HAL_TIM_ConfigClockSource+0x1c>
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	e0de      	b.n	80081be <HAL_TIM_ConfigClockSource+0x1da>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2202      	movs	r2, #2
 800800c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800801e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800802a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a63      	ldr	r2, [pc, #396]	@ (80081c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800803a:	4293      	cmp	r3, r2
 800803c:	f000 80a9 	beq.w	8008192 <HAL_TIM_ConfigClockSource+0x1ae>
 8008040:	4a61      	ldr	r2, [pc, #388]	@ (80081c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008042:	4293      	cmp	r3, r2
 8008044:	f200 80ae 	bhi.w	80081a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008048:	4a60      	ldr	r2, [pc, #384]	@ (80081cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800804a:	4293      	cmp	r3, r2
 800804c:	f000 80a1 	beq.w	8008192 <HAL_TIM_ConfigClockSource+0x1ae>
 8008050:	4a5e      	ldr	r2, [pc, #376]	@ (80081cc <HAL_TIM_ConfigClockSource+0x1e8>)
 8008052:	4293      	cmp	r3, r2
 8008054:	f200 80a6 	bhi.w	80081a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008058:	4a5d      	ldr	r2, [pc, #372]	@ (80081d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800805a:	4293      	cmp	r3, r2
 800805c:	f000 8099 	beq.w	8008192 <HAL_TIM_ConfigClockSource+0x1ae>
 8008060:	4a5b      	ldr	r2, [pc, #364]	@ (80081d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008062:	4293      	cmp	r3, r2
 8008064:	f200 809e 	bhi.w	80081a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008068:	4a5a      	ldr	r2, [pc, #360]	@ (80081d4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800806a:	4293      	cmp	r3, r2
 800806c:	f000 8091 	beq.w	8008192 <HAL_TIM_ConfigClockSource+0x1ae>
 8008070:	4a58      	ldr	r2, [pc, #352]	@ (80081d4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008072:	4293      	cmp	r3, r2
 8008074:	f200 8096 	bhi.w	80081a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008078:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800807c:	f000 8089 	beq.w	8008192 <HAL_TIM_ConfigClockSource+0x1ae>
 8008080:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008084:	f200 808e 	bhi.w	80081a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008088:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800808c:	d03e      	beq.n	800810c <HAL_TIM_ConfigClockSource+0x128>
 800808e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008092:	f200 8087 	bhi.w	80081a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800809a:	f000 8086 	beq.w	80081aa <HAL_TIM_ConfigClockSource+0x1c6>
 800809e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080a2:	d87f      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80080a4:	2b70      	cmp	r3, #112	@ 0x70
 80080a6:	d01a      	beq.n	80080de <HAL_TIM_ConfigClockSource+0xfa>
 80080a8:	2b70      	cmp	r3, #112	@ 0x70
 80080aa:	d87b      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80080ac:	2b60      	cmp	r3, #96	@ 0x60
 80080ae:	d050      	beq.n	8008152 <HAL_TIM_ConfigClockSource+0x16e>
 80080b0:	2b60      	cmp	r3, #96	@ 0x60
 80080b2:	d877      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80080b4:	2b50      	cmp	r3, #80	@ 0x50
 80080b6:	d03c      	beq.n	8008132 <HAL_TIM_ConfigClockSource+0x14e>
 80080b8:	2b50      	cmp	r3, #80	@ 0x50
 80080ba:	d873      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80080bc:	2b40      	cmp	r3, #64	@ 0x40
 80080be:	d058      	beq.n	8008172 <HAL_TIM_ConfigClockSource+0x18e>
 80080c0:	2b40      	cmp	r3, #64	@ 0x40
 80080c2:	d86f      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80080c4:	2b30      	cmp	r3, #48	@ 0x30
 80080c6:	d064      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0x1ae>
 80080c8:	2b30      	cmp	r3, #48	@ 0x30
 80080ca:	d86b      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80080cc:	2b20      	cmp	r3, #32
 80080ce:	d060      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0x1ae>
 80080d0:	2b20      	cmp	r3, #32
 80080d2:	d867      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d05c      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0x1ae>
 80080d8:	2b10      	cmp	r3, #16
 80080da:	d05a      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0x1ae>
 80080dc:	e062      	b.n	80081a4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80080ee:	f000 fc81 	bl	80089f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008100:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	609a      	str	r2, [r3, #8]
      break;
 800810a:	e04f      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800811c:	f000 fc6a 	bl	80089f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689a      	ldr	r2, [r3, #8]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800812e:	609a      	str	r2, [r3, #8]
      break;
 8008130:	e03c      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800813e:	461a      	mov	r2, r3
 8008140:	f000 fbdc 	bl	80088fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2150      	movs	r1, #80	@ 0x50
 800814a:	4618      	mov	r0, r3
 800814c:	f000 fc35 	bl	80089ba <TIM_ITRx_SetConfig>
      break;
 8008150:	e02c      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800815e:	461a      	mov	r2, r3
 8008160:	f000 fbfb 	bl	800895a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2160      	movs	r1, #96	@ 0x60
 800816a:	4618      	mov	r0, r3
 800816c:	f000 fc25 	bl	80089ba <TIM_ITRx_SetConfig>
      break;
 8008170:	e01c      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800817e:	461a      	mov	r2, r3
 8008180:	f000 fbbc 	bl	80088fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2140      	movs	r1, #64	@ 0x40
 800818a:	4618      	mov	r0, r3
 800818c:	f000 fc15 	bl	80089ba <TIM_ITRx_SetConfig>
      break;
 8008190:	e00c      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4619      	mov	r1, r3
 800819c:	4610      	mov	r0, r2
 800819e:	f000 fc0c 	bl	80089ba <TIM_ITRx_SetConfig>
      break;
 80081a2:	e003      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	73fb      	strb	r3, [r7, #15]
      break;
 80081a8:	e000      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80081aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80081bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	00100070 	.word	0x00100070
 80081cc:	00100040 	.word	0x00100040
 80081d0:	00100030 	.word	0x00100030
 80081d4:	00100020 	.word	0x00100020

080081d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a42      	ldr	r2, [pc, #264]	@ (80082f4 <TIM_Base_SetConfig+0x11c>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d00f      	beq.n	8008210 <TIM_Base_SetConfig+0x38>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081f6:	d00b      	beq.n	8008210 <TIM_Base_SetConfig+0x38>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a3f      	ldr	r2, [pc, #252]	@ (80082f8 <TIM_Base_SetConfig+0x120>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d007      	beq.n	8008210 <TIM_Base_SetConfig+0x38>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a3e      	ldr	r2, [pc, #248]	@ (80082fc <TIM_Base_SetConfig+0x124>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d003      	beq.n	8008210 <TIM_Base_SetConfig+0x38>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a3d      	ldr	r2, [pc, #244]	@ (8008300 <TIM_Base_SetConfig+0x128>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d108      	bne.n	8008222 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	4313      	orrs	r3, r2
 8008220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a33      	ldr	r2, [pc, #204]	@ (80082f4 <TIM_Base_SetConfig+0x11c>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d01b      	beq.n	8008262 <TIM_Base_SetConfig+0x8a>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008230:	d017      	beq.n	8008262 <TIM_Base_SetConfig+0x8a>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a30      	ldr	r2, [pc, #192]	@ (80082f8 <TIM_Base_SetConfig+0x120>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d013      	beq.n	8008262 <TIM_Base_SetConfig+0x8a>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a2f      	ldr	r2, [pc, #188]	@ (80082fc <TIM_Base_SetConfig+0x124>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d00f      	beq.n	8008262 <TIM_Base_SetConfig+0x8a>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a2e      	ldr	r2, [pc, #184]	@ (8008300 <TIM_Base_SetConfig+0x128>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d00b      	beq.n	8008262 <TIM_Base_SetConfig+0x8a>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a2d      	ldr	r2, [pc, #180]	@ (8008304 <TIM_Base_SetConfig+0x12c>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d007      	beq.n	8008262 <TIM_Base_SetConfig+0x8a>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a2c      	ldr	r2, [pc, #176]	@ (8008308 <TIM_Base_SetConfig+0x130>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d003      	beq.n	8008262 <TIM_Base_SetConfig+0x8a>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a2b      	ldr	r2, [pc, #172]	@ (800830c <TIM_Base_SetConfig+0x134>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d108      	bne.n	8008274 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	4313      	orrs	r3, r2
 8008272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	695b      	ldr	r3, [r3, #20]
 800827e:	4313      	orrs	r3, r2
 8008280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	689a      	ldr	r2, [r3, #8]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a16      	ldr	r2, [pc, #88]	@ (80082f4 <TIM_Base_SetConfig+0x11c>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d00f      	beq.n	80082c0 <TIM_Base_SetConfig+0xe8>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	4a17      	ldr	r2, [pc, #92]	@ (8008300 <TIM_Base_SetConfig+0x128>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d00b      	beq.n	80082c0 <TIM_Base_SetConfig+0xe8>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4a16      	ldr	r2, [pc, #88]	@ (8008304 <TIM_Base_SetConfig+0x12c>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d007      	beq.n	80082c0 <TIM_Base_SetConfig+0xe8>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4a15      	ldr	r2, [pc, #84]	@ (8008308 <TIM_Base_SetConfig+0x130>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d003      	beq.n	80082c0 <TIM_Base_SetConfig+0xe8>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a14      	ldr	r2, [pc, #80]	@ (800830c <TIM_Base_SetConfig+0x134>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d103      	bne.n	80082c8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	691a      	ldr	r2, [r3, #16]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d105      	bne.n	80082e6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	f023 0201 	bic.w	r2, r3, #1
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	611a      	str	r2, [r3, #16]
  }
}
 80082e6:	bf00      	nop
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	40012c00 	.word	0x40012c00
 80082f8:	40000400 	.word	0x40000400
 80082fc:	40000800 	.word	0x40000800
 8008300:	40013400 	.word	0x40013400
 8008304:	40014000 	.word	0x40014000
 8008308:	40014400 	.word	0x40014400
 800830c:	40014800 	.word	0x40014800

08008310 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008310:	b480      	push	{r7}
 8008312:	b087      	sub	sp, #28
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a1b      	ldr	r3, [r3, #32]
 800831e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6a1b      	ldr	r3, [r3, #32]
 8008324:	f023 0201 	bic.w	r2, r3, #1
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800833e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f023 0303 	bic.w	r3, r3, #3
 800834a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	4313      	orrs	r3, r2
 8008354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	f023 0302 	bic.w	r3, r3, #2
 800835c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	697a      	ldr	r2, [r7, #20]
 8008364:	4313      	orrs	r3, r2
 8008366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a2c      	ldr	r2, [pc, #176]	@ (800841c <TIM_OC1_SetConfig+0x10c>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d00f      	beq.n	8008390 <TIM_OC1_SetConfig+0x80>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a2b      	ldr	r2, [pc, #172]	@ (8008420 <TIM_OC1_SetConfig+0x110>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d00b      	beq.n	8008390 <TIM_OC1_SetConfig+0x80>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a2a      	ldr	r2, [pc, #168]	@ (8008424 <TIM_OC1_SetConfig+0x114>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d007      	beq.n	8008390 <TIM_OC1_SetConfig+0x80>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a29      	ldr	r2, [pc, #164]	@ (8008428 <TIM_OC1_SetConfig+0x118>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d003      	beq.n	8008390 <TIM_OC1_SetConfig+0x80>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a28      	ldr	r2, [pc, #160]	@ (800842c <TIM_OC1_SetConfig+0x11c>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d10c      	bne.n	80083aa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	f023 0308 	bic.w	r3, r3, #8
 8008396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	4313      	orrs	r3, r2
 80083a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	f023 0304 	bic.w	r3, r3, #4
 80083a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a1b      	ldr	r2, [pc, #108]	@ (800841c <TIM_OC1_SetConfig+0x10c>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d00f      	beq.n	80083d2 <TIM_OC1_SetConfig+0xc2>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a1a      	ldr	r2, [pc, #104]	@ (8008420 <TIM_OC1_SetConfig+0x110>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d00b      	beq.n	80083d2 <TIM_OC1_SetConfig+0xc2>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a19      	ldr	r2, [pc, #100]	@ (8008424 <TIM_OC1_SetConfig+0x114>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d007      	beq.n	80083d2 <TIM_OC1_SetConfig+0xc2>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a18      	ldr	r2, [pc, #96]	@ (8008428 <TIM_OC1_SetConfig+0x118>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d003      	beq.n	80083d2 <TIM_OC1_SetConfig+0xc2>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a17      	ldr	r2, [pc, #92]	@ (800842c <TIM_OC1_SetConfig+0x11c>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d111      	bne.n	80083f6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80083e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	695b      	ldr	r3, [r3, #20]
 80083e6:	693a      	ldr	r2, [r7, #16]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	699b      	ldr	r3, [r3, #24]
 80083f0:	693a      	ldr	r2, [r7, #16]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	693a      	ldr	r2, [r7, #16]
 80083fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	685a      	ldr	r2, [r3, #4]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	697a      	ldr	r2, [r7, #20]
 800840e:	621a      	str	r2, [r3, #32]
}
 8008410:	bf00      	nop
 8008412:	371c      	adds	r7, #28
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr
 800841c:	40012c00 	.word	0x40012c00
 8008420:	40013400 	.word	0x40013400
 8008424:	40014000 	.word	0x40014000
 8008428:	40014400 	.word	0x40014400
 800842c:	40014800 	.word	0x40014800

08008430 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008430:	b480      	push	{r7}
 8008432:	b087      	sub	sp, #28
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a1b      	ldr	r3, [r3, #32]
 800843e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a1b      	ldr	r3, [r3, #32]
 8008444:	f023 0210 	bic.w	r2, r3, #16
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	699b      	ldr	r3, [r3, #24]
 8008456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800845e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800846a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	021b      	lsls	r3, r3, #8
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	4313      	orrs	r3, r2
 8008476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	f023 0320 	bic.w	r3, r3, #32
 800847e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	011b      	lsls	r3, r3, #4
 8008486:	697a      	ldr	r2, [r7, #20]
 8008488:	4313      	orrs	r3, r2
 800848a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a28      	ldr	r2, [pc, #160]	@ (8008530 <TIM_OC2_SetConfig+0x100>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d003      	beq.n	800849c <TIM_OC2_SetConfig+0x6c>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a27      	ldr	r2, [pc, #156]	@ (8008534 <TIM_OC2_SetConfig+0x104>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d10d      	bne.n	80084b8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	011b      	lsls	r3, r3, #4
 80084aa:	697a      	ldr	r2, [r7, #20]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a1d      	ldr	r2, [pc, #116]	@ (8008530 <TIM_OC2_SetConfig+0x100>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d00f      	beq.n	80084e0 <TIM_OC2_SetConfig+0xb0>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4a1c      	ldr	r2, [pc, #112]	@ (8008534 <TIM_OC2_SetConfig+0x104>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d00b      	beq.n	80084e0 <TIM_OC2_SetConfig+0xb0>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4a1b      	ldr	r2, [pc, #108]	@ (8008538 <TIM_OC2_SetConfig+0x108>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d007      	beq.n	80084e0 <TIM_OC2_SetConfig+0xb0>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4a1a      	ldr	r2, [pc, #104]	@ (800853c <TIM_OC2_SetConfig+0x10c>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d003      	beq.n	80084e0 <TIM_OC2_SetConfig+0xb0>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a19      	ldr	r2, [pc, #100]	@ (8008540 <TIM_OC2_SetConfig+0x110>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d113      	bne.n	8008508 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80084e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80084ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	695b      	ldr	r3, [r3, #20]
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	693a      	ldr	r2, [r7, #16]
 8008504:	4313      	orrs	r3, r2
 8008506:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	693a      	ldr	r2, [r7, #16]
 800850c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	685a      	ldr	r2, [r3, #4]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	697a      	ldr	r2, [r7, #20]
 8008520:	621a      	str	r2, [r3, #32]
}
 8008522:	bf00      	nop
 8008524:	371c      	adds	r7, #28
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	40012c00 	.word	0x40012c00
 8008534:	40013400 	.word	0x40013400
 8008538:	40014000 	.word	0x40014000
 800853c:	40014400 	.word	0x40014400
 8008540:	40014800 	.word	0x40014800

08008544 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008544:	b480      	push	{r7}
 8008546:	b087      	sub	sp, #28
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a1b      	ldr	r3, [r3, #32]
 8008552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a1b      	ldr	r3, [r3, #32]
 8008558:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	69db      	ldr	r3, [r3, #28]
 800856a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008572:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f023 0303 	bic.w	r3, r3, #3
 800857e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	4313      	orrs	r3, r2
 8008588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	021b      	lsls	r3, r3, #8
 8008598:	697a      	ldr	r2, [r7, #20]
 800859a:	4313      	orrs	r3, r2
 800859c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a27      	ldr	r2, [pc, #156]	@ (8008640 <TIM_OC3_SetConfig+0xfc>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d003      	beq.n	80085ae <TIM_OC3_SetConfig+0x6a>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a26      	ldr	r2, [pc, #152]	@ (8008644 <TIM_OC3_SetConfig+0x100>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d10d      	bne.n	80085ca <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80085b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	021b      	lsls	r3, r3, #8
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	4313      	orrs	r3, r2
 80085c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80085c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a1c      	ldr	r2, [pc, #112]	@ (8008640 <TIM_OC3_SetConfig+0xfc>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d00f      	beq.n	80085f2 <TIM_OC3_SetConfig+0xae>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a1b      	ldr	r2, [pc, #108]	@ (8008644 <TIM_OC3_SetConfig+0x100>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d00b      	beq.n	80085f2 <TIM_OC3_SetConfig+0xae>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a1a      	ldr	r2, [pc, #104]	@ (8008648 <TIM_OC3_SetConfig+0x104>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d007      	beq.n	80085f2 <TIM_OC3_SetConfig+0xae>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a19      	ldr	r2, [pc, #100]	@ (800864c <TIM_OC3_SetConfig+0x108>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d003      	beq.n	80085f2 <TIM_OC3_SetConfig+0xae>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a18      	ldr	r2, [pc, #96]	@ (8008650 <TIM_OC3_SetConfig+0x10c>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d113      	bne.n	800861a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	011b      	lsls	r3, r3, #4
 8008608:	693a      	ldr	r2, [r7, #16]
 800860a:	4313      	orrs	r3, r2
 800860c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	011b      	lsls	r3, r3, #4
 8008614:	693a      	ldr	r2, [r7, #16]
 8008616:	4313      	orrs	r3, r2
 8008618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	685a      	ldr	r2, [r3, #4]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	621a      	str	r2, [r3, #32]
}
 8008634:	bf00      	nop
 8008636:	371c      	adds	r7, #28
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	40012c00 	.word	0x40012c00
 8008644:	40013400 	.word	0x40013400
 8008648:	40014000 	.word	0x40014000
 800864c:	40014400 	.word	0x40014400
 8008650:	40014800 	.word	0x40014800

08008654 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008654:	b480      	push	{r7}
 8008656:	b087      	sub	sp, #28
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a1b      	ldr	r3, [r3, #32]
 8008662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6a1b      	ldr	r3, [r3, #32]
 8008668:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	69db      	ldr	r3, [r3, #28]
 800867a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008682:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800868e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	021b      	lsls	r3, r3, #8
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	4313      	orrs	r3, r2
 800869a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80086a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	031b      	lsls	r3, r3, #12
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a28      	ldr	r2, [pc, #160]	@ (8008754 <TIM_OC4_SetConfig+0x100>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d003      	beq.n	80086c0 <TIM_OC4_SetConfig+0x6c>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a27      	ldr	r2, [pc, #156]	@ (8008758 <TIM_OC4_SetConfig+0x104>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d10d      	bne.n	80086dc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80086c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	031b      	lsls	r3, r3, #12
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a1d      	ldr	r2, [pc, #116]	@ (8008754 <TIM_OC4_SetConfig+0x100>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d00f      	beq.n	8008704 <TIM_OC4_SetConfig+0xb0>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a1c      	ldr	r2, [pc, #112]	@ (8008758 <TIM_OC4_SetConfig+0x104>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d00b      	beq.n	8008704 <TIM_OC4_SetConfig+0xb0>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a1b      	ldr	r2, [pc, #108]	@ (800875c <TIM_OC4_SetConfig+0x108>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d007      	beq.n	8008704 <TIM_OC4_SetConfig+0xb0>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a1a      	ldr	r2, [pc, #104]	@ (8008760 <TIM_OC4_SetConfig+0x10c>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d003      	beq.n	8008704 <TIM_OC4_SetConfig+0xb0>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a19      	ldr	r2, [pc, #100]	@ (8008764 <TIM_OC4_SetConfig+0x110>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d113      	bne.n	800872c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800870a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008712:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	695b      	ldr	r3, [r3, #20]
 8008718:	019b      	lsls	r3, r3, #6
 800871a:	693a      	ldr	r2, [r7, #16]
 800871c:	4313      	orrs	r3, r2
 800871e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	019b      	lsls	r3, r3, #6
 8008726:	693a      	ldr	r2, [r7, #16]
 8008728:	4313      	orrs	r3, r2
 800872a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	693a      	ldr	r2, [r7, #16]
 8008730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	685a      	ldr	r2, [r3, #4]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	621a      	str	r2, [r3, #32]
}
 8008746:	bf00      	nop
 8008748:	371c      	adds	r7, #28
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	40012c00 	.word	0x40012c00
 8008758:	40013400 	.word	0x40013400
 800875c:	40014000 	.word	0x40014000
 8008760:	40014400 	.word	0x40014400
 8008764:	40014800 	.word	0x40014800

08008768 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008768:	b480      	push	{r7}
 800876a:	b087      	sub	sp, #28
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6a1b      	ldr	r3, [r3, #32]
 8008776:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a1b      	ldr	r3, [r3, #32]
 800877c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800878e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800879a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80087ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	041b      	lsls	r3, r3, #16
 80087b4:	693a      	ldr	r2, [r7, #16]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a17      	ldr	r2, [pc, #92]	@ (800881c <TIM_OC5_SetConfig+0xb4>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d00f      	beq.n	80087e2 <TIM_OC5_SetConfig+0x7a>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a16      	ldr	r2, [pc, #88]	@ (8008820 <TIM_OC5_SetConfig+0xb8>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d00b      	beq.n	80087e2 <TIM_OC5_SetConfig+0x7a>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a15      	ldr	r2, [pc, #84]	@ (8008824 <TIM_OC5_SetConfig+0xbc>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d007      	beq.n	80087e2 <TIM_OC5_SetConfig+0x7a>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a14      	ldr	r2, [pc, #80]	@ (8008828 <TIM_OC5_SetConfig+0xc0>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d003      	beq.n	80087e2 <TIM_OC5_SetConfig+0x7a>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a13      	ldr	r2, [pc, #76]	@ (800882c <TIM_OC5_SetConfig+0xc4>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d109      	bne.n	80087f6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	695b      	ldr	r3, [r3, #20]
 80087ee:	021b      	lsls	r3, r3, #8
 80087f0:	697a      	ldr	r2, [r7, #20]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	697a      	ldr	r2, [r7, #20]
 80087fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	685a      	ldr	r2, [r3, #4]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	693a      	ldr	r2, [r7, #16]
 800880e:	621a      	str	r2, [r3, #32]
}
 8008810:	bf00      	nop
 8008812:	371c      	adds	r7, #28
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr
 800881c:	40012c00 	.word	0x40012c00
 8008820:	40013400 	.word	0x40013400
 8008824:	40014000 	.word	0x40014000
 8008828:	40014400 	.word	0x40014400
 800882c:	40014800 	.word	0x40014800

08008830 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008830:	b480      	push	{r7}
 8008832:	b087      	sub	sp, #28
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6a1b      	ldr	r3, [r3, #32]
 8008844:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800885e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	021b      	lsls	r3, r3, #8
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	4313      	orrs	r3, r2
 800886e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008876:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	051b      	lsls	r3, r3, #20
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	4313      	orrs	r3, r2
 8008882:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a18      	ldr	r2, [pc, #96]	@ (80088e8 <TIM_OC6_SetConfig+0xb8>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d00f      	beq.n	80088ac <TIM_OC6_SetConfig+0x7c>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a17      	ldr	r2, [pc, #92]	@ (80088ec <TIM_OC6_SetConfig+0xbc>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d00b      	beq.n	80088ac <TIM_OC6_SetConfig+0x7c>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a16      	ldr	r2, [pc, #88]	@ (80088f0 <TIM_OC6_SetConfig+0xc0>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d007      	beq.n	80088ac <TIM_OC6_SetConfig+0x7c>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a15      	ldr	r2, [pc, #84]	@ (80088f4 <TIM_OC6_SetConfig+0xc4>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d003      	beq.n	80088ac <TIM_OC6_SetConfig+0x7c>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a14      	ldr	r2, [pc, #80]	@ (80088f8 <TIM_OC6_SetConfig+0xc8>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d109      	bne.n	80088c0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80088b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	695b      	ldr	r3, [r3, #20]
 80088b8:	029b      	lsls	r3, r3, #10
 80088ba:	697a      	ldr	r2, [r7, #20]
 80088bc:	4313      	orrs	r3, r2
 80088be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	697a      	ldr	r2, [r7, #20]
 80088c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	685a      	ldr	r2, [r3, #4]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	621a      	str	r2, [r3, #32]
}
 80088da:	bf00      	nop
 80088dc:	371c      	adds	r7, #28
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	40012c00 	.word	0x40012c00
 80088ec:	40013400 	.word	0x40013400
 80088f0:	40014000 	.word	0x40014000
 80088f4:	40014400 	.word	0x40014400
 80088f8:	40014800 	.word	0x40014800

080088fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b087      	sub	sp, #28
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6a1b      	ldr	r3, [r3, #32]
 800890c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	f023 0201 	bic.w	r2, r3, #1
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	699b      	ldr	r3, [r3, #24]
 800891e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	011b      	lsls	r3, r3, #4
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	4313      	orrs	r3, r2
 8008930:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	f023 030a 	bic.w	r3, r3, #10
 8008938:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800893a:	697a      	ldr	r2, [r7, #20]
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	4313      	orrs	r3, r2
 8008940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	697a      	ldr	r2, [r7, #20]
 800894c:	621a      	str	r2, [r3, #32]
}
 800894e:	bf00      	nop
 8008950:	371c      	adds	r7, #28
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr

0800895a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800895a:	b480      	push	{r7}
 800895c:	b087      	sub	sp, #28
 800895e:	af00      	add	r7, sp, #0
 8008960:	60f8      	str	r0, [r7, #12]
 8008962:	60b9      	str	r1, [r7, #8]
 8008964:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6a1b      	ldr	r3, [r3, #32]
 800896a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6a1b      	ldr	r3, [r3, #32]
 8008970:	f023 0210 	bic.w	r2, r3, #16
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	699b      	ldr	r3, [r3, #24]
 800897c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008984:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	031b      	lsls	r3, r3, #12
 800898a:	693a      	ldr	r2, [r7, #16]
 800898c:	4313      	orrs	r3, r2
 800898e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008996:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	011b      	lsls	r3, r3, #4
 800899c:	697a      	ldr	r2, [r7, #20]
 800899e:	4313      	orrs	r3, r2
 80089a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	697a      	ldr	r2, [r7, #20]
 80089ac:	621a      	str	r2, [r3, #32]
}
 80089ae:	bf00      	nop
 80089b0:	371c      	adds	r7, #28
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089ba:	b480      	push	{r7}
 80089bc:	b085      	sub	sp, #20
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80089d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089d6:	683a      	ldr	r2, [r7, #0]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	4313      	orrs	r3, r2
 80089dc:	f043 0307 	orr.w	r3, r3, #7
 80089e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	609a      	str	r2, [r3, #8]
}
 80089e8:	bf00      	nop
 80089ea:	3714      	adds	r7, #20
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b087      	sub	sp, #28
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
 8008a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	021a      	lsls	r2, r3, #8
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	431a      	orrs	r2, r3
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	697a      	ldr	r2, [r7, #20]
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	609a      	str	r2, [r3, #8]
}
 8008a28:	bf00      	nop
 8008a2a:	371c      	adds	r7, #28
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b087      	sub	sp, #28
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	f003 031f 	and.w	r3, r3, #31
 8008a46:	2201      	movs	r2, #1
 8008a48:	fa02 f303 	lsl.w	r3, r2, r3
 8008a4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6a1a      	ldr	r2, [r3, #32]
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	43db      	mvns	r3, r3
 8008a56:	401a      	ands	r2, r3
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6a1a      	ldr	r2, [r3, #32]
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	f003 031f 	and.w	r3, r3, #31
 8008a66:	6879      	ldr	r1, [r7, #4]
 8008a68:	fa01 f303 	lsl.w	r3, r1, r3
 8008a6c:	431a      	orrs	r2, r3
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	621a      	str	r2, [r3, #32]
}
 8008a72:	bf00      	nop
 8008a74:	371c      	adds	r7, #28
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
	...

08008a80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d101      	bne.n	8008a98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a94:	2302      	movs	r3, #2
 8008a96:	e065      	b.n	8008b64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a2c      	ldr	r2, [pc, #176]	@ (8008b70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d004      	beq.n	8008acc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a2b      	ldr	r2, [pc, #172]	@ (8008b74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d108      	bne.n	8008ade <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008ad2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008ae4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ae8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a1b      	ldr	r2, [pc, #108]	@ (8008b70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d018      	beq.n	8008b38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b0e:	d013      	beq.n	8008b38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a18      	ldr	r2, [pc, #96]	@ (8008b78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d00e      	beq.n	8008b38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a17      	ldr	r2, [pc, #92]	@ (8008b7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d009      	beq.n	8008b38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a12      	ldr	r2, [pc, #72]	@ (8008b74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d004      	beq.n	8008b38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a13      	ldr	r2, [pc, #76]	@ (8008b80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d10c      	bne.n	8008b52 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68ba      	ldr	r2, [r7, #8]
 8008b50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2201      	movs	r2, #1
 8008b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3714      	adds	r7, #20
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr
 8008b70:	40012c00 	.word	0x40012c00
 8008b74:	40013400 	.word	0x40013400
 8008b78:	40000400 	.word	0x40000400
 8008b7c:	40000800 	.word	0x40000800
 8008b80:	40014000 	.word	0x40014000

08008b84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d101      	bne.n	8008ba0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008b9c:	2302      	movs	r3, #2
 8008b9e:	e073      	b.n	8008c88 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	695b      	ldr	r3, [r3, #20]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c06:	4313      	orrs	r3, r2
 8008c08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	041b      	lsls	r3, r3, #16
 8008c16:	4313      	orrs	r3, r2
 8008c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	69db      	ldr	r3, [r3, #28]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a19      	ldr	r2, [pc, #100]	@ (8008c94 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d004      	beq.n	8008c3c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a18      	ldr	r2, [pc, #96]	@ (8008c98 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d11c      	bne.n	8008c76 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c46:	051b      	lsls	r3, r3, #20
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	6a1b      	ldr	r3, [r3, #32]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c64:	4313      	orrs	r3, r2
 8008c66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c72:	4313      	orrs	r3, r2
 8008c74:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3714      	adds	r7, #20
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr
 8008c94:	40012c00 	.word	0x40012c00
 8008c98:	40013400 	.word	0x40013400

08008c9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d101      	bne.n	8008cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	e042      	b.n	8008d34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d106      	bne.n	8008cc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f7f9 fb33 	bl	800232c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2224      	movs	r2, #36	@ 0x24
 8008cca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f022 0201 	bic.w	r2, r2, #1
 8008cdc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d002      	beq.n	8008cec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 ff6e 	bl	8009bc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fc9f 	bl	8009630 <UART_SetConfig>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d101      	bne.n	8008cfc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e01b      	b.n	8008d34 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	685a      	ldr	r2, [r3, #4]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	689a      	ldr	r2, [r3, #8]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f042 0201 	orr.w	r2, r2, #1
 8008d2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 ffed 	bl	8009d0c <UART_CheckIdleState>
 8008d32:	4603      	mov	r3, r0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b08a      	sub	sp, #40	@ 0x28
 8008d40:	af02      	add	r7, sp, #8
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	603b      	str	r3, [r7, #0]
 8008d48:	4613      	mov	r3, r2
 8008d4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d52:	2b20      	cmp	r3, #32
 8008d54:	d17b      	bne.n	8008e4e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d002      	beq.n	8008d62 <HAL_UART_Transmit+0x26>
 8008d5c:	88fb      	ldrh	r3, [r7, #6]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d101      	bne.n	8008d66 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e074      	b.n	8008e50 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2221      	movs	r2, #33	@ 0x21
 8008d72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d76:	f7f9 fc25 	bl	80025c4 <HAL_GetTick>
 8008d7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	88fa      	ldrh	r2, [r7, #6]
 8008d80:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	88fa      	ldrh	r2, [r7, #6]
 8008d88:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d94:	d108      	bne.n	8008da8 <HAL_UART_Transmit+0x6c>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d104      	bne.n	8008da8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	61bb      	str	r3, [r7, #24]
 8008da6:	e003      	b.n	8008db0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008dac:	2300      	movs	r3, #0
 8008dae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008db0:	e030      	b.n	8008e14 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	2200      	movs	r2, #0
 8008dba:	2180      	movs	r1, #128	@ 0x80
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f001 f84f 	bl	8009e60 <UART_WaitOnFlagUntilTimeout>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d005      	beq.n	8008dd4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2220      	movs	r2, #32
 8008dcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e03d      	b.n	8008e50 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d10b      	bne.n	8008df2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	881b      	ldrh	r3, [r3, #0]
 8008dde:	461a      	mov	r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008de8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	3302      	adds	r3, #2
 8008dee:	61bb      	str	r3, [r7, #24]
 8008df0:	e007      	b.n	8008e02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	781a      	ldrb	r2, [r3, #0]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d1c8      	bne.n	8008db2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	9300      	str	r3, [sp, #0]
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	2200      	movs	r2, #0
 8008e28:	2140      	movs	r1, #64	@ 0x40
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f001 f818 	bl	8009e60 <UART_WaitOnFlagUntilTimeout>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d005      	beq.n	8008e42 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2220      	movs	r2, #32
 8008e3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	e006      	b.n	8008e50 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2220      	movs	r2, #32
 8008e46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	e000      	b.n	8008e50 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008e4e:	2302      	movs	r3, #2
  }
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3720      	adds	r7, #32
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b08a      	sub	sp, #40	@ 0x28
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	4613      	mov	r3, r2
 8008e64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e6c:	2b20      	cmp	r3, #32
 8008e6e:	d167      	bne.n	8008f40 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d002      	beq.n	8008e7c <HAL_UART_Transmit_DMA+0x24>
 8008e76:	88fb      	ldrh	r3, [r7, #6]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d101      	bne.n	8008e80 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e060      	b.n	8008f42 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	88fa      	ldrh	r2, [r7, #6]
 8008e8a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	88fa      	ldrh	r2, [r7, #6]
 8008e92:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2221      	movs	r2, #33	@ 0x21
 8008ea2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d028      	beq.n	8008f00 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008eb2:	4a26      	ldr	r2, [pc, #152]	@ (8008f4c <HAL_UART_Transmit_DMA+0xf4>)
 8008eb4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008eba:	4a25      	ldr	r2, [pc, #148]	@ (8008f50 <HAL_UART_Transmit_DMA+0xf8>)
 8008ebc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ec2:	4a24      	ldr	r2, [pc, #144]	@ (8008f54 <HAL_UART_Transmit_DMA+0xfc>)
 8008ec4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008eca:	2200      	movs	r2, #0
 8008ecc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3328      	adds	r3, #40	@ 0x28
 8008ede:	461a      	mov	r2, r3
 8008ee0:	88fb      	ldrh	r3, [r7, #6]
 8008ee2:	f7fc fb39 	bl	8005558 <HAL_DMA_Start_IT>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d009      	beq.n	8008f00 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2210      	movs	r2, #16
 8008ef0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2220      	movs	r2, #32
 8008ef8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e020      	b.n	8008f42 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2240      	movs	r2, #64	@ 0x40
 8008f06:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	3308      	adds	r3, #8
 8008f0e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	e853 3f00 	ldrex	r3, [r3]
 8008f16:	613b      	str	r3, [r7, #16]
   return(result);
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	3308      	adds	r3, #8
 8008f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f28:	623a      	str	r2, [r7, #32]
 8008f2a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2c:	69f9      	ldr	r1, [r7, #28]
 8008f2e:	6a3a      	ldr	r2, [r7, #32]
 8008f30:	e841 2300 	strex	r3, r2, [r1]
 8008f34:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1e5      	bne.n	8008f08 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	e000      	b.n	8008f42 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008f40:	2302      	movs	r3, #2
  }
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3728      	adds	r7, #40	@ 0x28
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	0800a1d7 	.word	0x0800a1d7
 8008f50:	0800a271 	.word	0x0800a271
 8008f54:	0800a3f7 	.word	0x0800a3f7

08008f58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b0ba      	sub	sp, #232	@ 0xe8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	69db      	ldr	r3, [r3, #28]
 8008f66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008f7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008f82:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008f86:	4013      	ands	r3, r2
 8008f88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008f8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d11b      	bne.n	8008fcc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f98:	f003 0320 	and.w	r3, r3, #32
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d015      	beq.n	8008fcc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fa4:	f003 0320 	and.w	r3, r3, #32
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d105      	bne.n	8008fb8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d009      	beq.n	8008fcc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f000 82e3 	beq.w	8009588 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	4798      	blx	r3
      }
      return;
 8008fca:	e2dd      	b.n	8009588 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008fcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 8123 	beq.w	800921c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008fd6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008fda:	4b8d      	ldr	r3, [pc, #564]	@ (8009210 <HAL_UART_IRQHandler+0x2b8>)
 8008fdc:	4013      	ands	r3, r2
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d106      	bne.n	8008ff0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008fe2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008fe6:	4b8b      	ldr	r3, [pc, #556]	@ (8009214 <HAL_UART_IRQHandler+0x2bc>)
 8008fe8:	4013      	ands	r3, r2
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f000 8116 	beq.w	800921c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ff4:	f003 0301 	and.w	r3, r3, #1
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d011      	beq.n	8009020 <HAL_UART_IRQHandler+0xc8>
 8008ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00b      	beq.n	8009020 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2201      	movs	r2, #1
 800900e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009016:	f043 0201 	orr.w	r2, r3, #1
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009024:	f003 0302 	and.w	r3, r3, #2
 8009028:	2b00      	cmp	r3, #0
 800902a:	d011      	beq.n	8009050 <HAL_UART_IRQHandler+0xf8>
 800902c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009030:	f003 0301 	and.w	r3, r3, #1
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00b      	beq.n	8009050 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2202      	movs	r2, #2
 800903e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009046:	f043 0204 	orr.w	r2, r3, #4
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009054:	f003 0304 	and.w	r3, r3, #4
 8009058:	2b00      	cmp	r3, #0
 800905a:	d011      	beq.n	8009080 <HAL_UART_IRQHandler+0x128>
 800905c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009060:	f003 0301 	and.w	r3, r3, #1
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00b      	beq.n	8009080 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2204      	movs	r2, #4
 800906e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009076:	f043 0202 	orr.w	r2, r3, #2
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009084:	f003 0308 	and.w	r3, r3, #8
 8009088:	2b00      	cmp	r3, #0
 800908a:	d017      	beq.n	80090bc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800908c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009090:	f003 0320 	and.w	r3, r3, #32
 8009094:	2b00      	cmp	r3, #0
 8009096:	d105      	bne.n	80090a4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009098:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800909c:	4b5c      	ldr	r3, [pc, #368]	@ (8009210 <HAL_UART_IRQHandler+0x2b8>)
 800909e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00b      	beq.n	80090bc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2208      	movs	r2, #8
 80090aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090b2:	f043 0208 	orr.w	r2, r3, #8
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80090bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d012      	beq.n	80090ee <HAL_UART_IRQHandler+0x196>
 80090c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00c      	beq.n	80090ee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80090dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090e4:	f043 0220 	orr.w	r2, r3, #32
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f000 8249 	beq.w	800958c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80090fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090fe:	f003 0320 	and.w	r3, r3, #32
 8009102:	2b00      	cmp	r3, #0
 8009104:	d013      	beq.n	800912e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800910a:	f003 0320 	and.w	r3, r3, #32
 800910e:	2b00      	cmp	r3, #0
 8009110:	d105      	bne.n	800911e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800911a:	2b00      	cmp	r3, #0
 800911c:	d007      	beq.n	800912e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009122:	2b00      	cmp	r3, #0
 8009124:	d003      	beq.n	800912e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009134:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009142:	2b40      	cmp	r3, #64	@ 0x40
 8009144:	d005      	beq.n	8009152 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800914a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800914e:	2b00      	cmp	r3, #0
 8009150:	d054      	beq.n	80091fc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 ffd9 	bl	800a10a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009162:	2b40      	cmp	r3, #64	@ 0x40
 8009164:	d146      	bne.n	80091f4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	3308      	adds	r3, #8
 800916c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009170:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009174:	e853 3f00 	ldrex	r3, [r3]
 8009178:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800917c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009180:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009184:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	3308      	adds	r3, #8
 800918e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009192:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009196:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800919e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80091a2:	e841 2300 	strex	r3, r2, [r1]
 80091a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80091aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d1d9      	bne.n	8009166 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d017      	beq.n	80091ec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091c2:	4a15      	ldr	r2, [pc, #84]	@ (8009218 <HAL_UART_IRQHandler+0x2c0>)
 80091c4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7fc fa97 	bl	8005700 <HAL_DMA_Abort_IT>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d019      	beq.n	800920c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80091e6:	4610      	mov	r0, r2
 80091e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091ea:	e00f      	b.n	800920c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 f9ff 	bl	80095f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091f2:	e00b      	b.n	800920c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 f9fb 	bl	80095f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091fa:	e007      	b.n	800920c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f9f7 	bl	80095f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800920a:	e1bf      	b.n	800958c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800920c:	bf00      	nop
    return;
 800920e:	e1bd      	b.n	800958c <HAL_UART_IRQHandler+0x634>
 8009210:	10000001 	.word	0x10000001
 8009214:	04000120 	.word	0x04000120
 8009218:	0800a477 	.word	0x0800a477

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009220:	2b01      	cmp	r3, #1
 8009222:	f040 8153 	bne.w	80094cc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800922a:	f003 0310 	and.w	r3, r3, #16
 800922e:	2b00      	cmp	r3, #0
 8009230:	f000 814c 	beq.w	80094cc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009238:	f003 0310 	and.w	r3, r3, #16
 800923c:	2b00      	cmp	r3, #0
 800923e:	f000 8145 	beq.w	80094cc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2210      	movs	r2, #16
 8009248:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009254:	2b40      	cmp	r3, #64	@ 0x40
 8009256:	f040 80bb 	bne.w	80093d0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009268:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800926c:	2b00      	cmp	r3, #0
 800926e:	f000 818f 	beq.w	8009590 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009278:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800927c:	429a      	cmp	r2, r3
 800927e:	f080 8187 	bcs.w	8009590 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009288:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f003 0320 	and.w	r3, r3, #32
 800929a:	2b00      	cmp	r3, #0
 800929c:	f040 8087 	bne.w	80093ae <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80092ac:	e853 3f00 	ldrex	r3, [r3]
 80092b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80092b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80092b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	461a      	mov	r2, r3
 80092c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80092ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80092ce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80092d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80092da:	e841 2300 	strex	r3, r2, [r1]
 80092de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80092e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1da      	bne.n	80092a0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	3308      	adds	r3, #8
 80092f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80092f4:	e853 3f00 	ldrex	r3, [r3]
 80092f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80092fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80092fc:	f023 0301 	bic.w	r3, r3, #1
 8009300:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	3308      	adds	r3, #8
 800930a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800930e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009312:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009314:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009316:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800931a:	e841 2300 	strex	r3, r2, [r1]
 800931e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009320:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1e1      	bne.n	80092ea <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	3308      	adds	r3, #8
 800932c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009330:	e853 3f00 	ldrex	r3, [r3]
 8009334:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009336:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009338:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800933c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	3308      	adds	r3, #8
 8009346:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800934a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800934c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009350:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009352:	e841 2300 	strex	r3, r2, [r1]
 8009356:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009358:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1e3      	bne.n	8009326 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2220      	movs	r2, #32
 8009362:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009374:	e853 3f00 	ldrex	r3, [r3]
 8009378:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800937a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800937c:	f023 0310 	bic.w	r3, r3, #16
 8009380:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	461a      	mov	r2, r3
 800938a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800938e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009390:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009392:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009394:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009396:	e841 2300 	strex	r3, r2, [r1]
 800939a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800939c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1e4      	bne.n	800936c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fc f950 	bl	800564e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2202      	movs	r2, #2
 80093b2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	1ad3      	subs	r3, r2, r3
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	4619      	mov	r1, r3
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f002 fe37 	bl	800c03c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80093ce:	e0df      	b.n	8009590 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093dc:	b29b      	uxth	r3, r3
 80093de:	1ad3      	subs	r3, r2, r3
 80093e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f000 80d1 	beq.w	8009594 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80093f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f000 80cc 	beq.w	8009594 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009404:	e853 3f00 	ldrex	r3, [r3]
 8009408:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800940a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800940c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009410:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	461a      	mov	r2, r3
 800941a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800941e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009420:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009422:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009424:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009426:	e841 2300 	strex	r3, r2, [r1]
 800942a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800942c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800942e:	2b00      	cmp	r3, #0
 8009430:	d1e4      	bne.n	80093fc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	3308      	adds	r3, #8
 8009438:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800943c:	e853 3f00 	ldrex	r3, [r3]
 8009440:	623b      	str	r3, [r7, #32]
   return(result);
 8009442:	6a3b      	ldr	r3, [r7, #32]
 8009444:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009448:	f023 0301 	bic.w	r3, r3, #1
 800944c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	3308      	adds	r3, #8
 8009456:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800945a:	633a      	str	r2, [r7, #48]	@ 0x30
 800945c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009460:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009462:	e841 2300 	strex	r3, r2, [r1]
 8009466:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800946a:	2b00      	cmp	r3, #0
 800946c:	d1e1      	bne.n	8009432 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2220      	movs	r2, #32
 8009472:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	e853 3f00 	ldrex	r3, [r3]
 800948e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f023 0310 	bic.w	r3, r3, #16
 8009496:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	461a      	mov	r2, r3
 80094a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80094a4:	61fb      	str	r3, [r7, #28]
 80094a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a8:	69b9      	ldr	r1, [r7, #24]
 80094aa:	69fa      	ldr	r2, [r7, #28]
 80094ac:	e841 2300 	strex	r3, r2, [r1]
 80094b0:	617b      	str	r3, [r7, #20]
   return(result);
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d1e4      	bne.n	8009482 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2202      	movs	r2, #2
 80094bc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80094be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80094c2:	4619      	mov	r1, r3
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f002 fdb9 	bl	800c03c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80094ca:	e063      	b.n	8009594 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80094cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00e      	beq.n	80094f6 <HAL_UART_IRQHandler+0x59e>
 80094d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d008      	beq.n	80094f6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80094ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f001 f802 	bl	800a4f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80094f4:	e051      	b.n	800959a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80094f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d014      	beq.n	800952c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800950a:	2b00      	cmp	r3, #0
 800950c:	d105      	bne.n	800951a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800950e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009512:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009516:	2b00      	cmp	r3, #0
 8009518:	d008      	beq.n	800952c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800951e:	2b00      	cmp	r3, #0
 8009520:	d03a      	beq.n	8009598 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	4798      	blx	r3
    }
    return;
 800952a:	e035      	b.n	8009598 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800952c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009534:	2b00      	cmp	r3, #0
 8009536:	d009      	beq.n	800954c <HAL_UART_IRQHandler+0x5f4>
 8009538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800953c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009540:	2b00      	cmp	r3, #0
 8009542:	d003      	beq.n	800954c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 ffac 	bl	800a4a2 <UART_EndTransmit_IT>
    return;
 800954a:	e026      	b.n	800959a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800954c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009550:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009554:	2b00      	cmp	r3, #0
 8009556:	d009      	beq.n	800956c <HAL_UART_IRQHandler+0x614>
 8009558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800955c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009560:	2b00      	cmp	r3, #0
 8009562:	d003      	beq.n	800956c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 ffdb 	bl	800a520 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800956a:	e016      	b.n	800959a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800956c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009570:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009574:	2b00      	cmp	r3, #0
 8009576:	d010      	beq.n	800959a <HAL_UART_IRQHandler+0x642>
 8009578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800957c:	2b00      	cmp	r3, #0
 800957e:	da0c      	bge.n	800959a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 ffc3 	bl	800a50c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009586:	e008      	b.n	800959a <HAL_UART_IRQHandler+0x642>
      return;
 8009588:	bf00      	nop
 800958a:	e006      	b.n	800959a <HAL_UART_IRQHandler+0x642>
    return;
 800958c:	bf00      	nop
 800958e:	e004      	b.n	800959a <HAL_UART_IRQHandler+0x642>
      return;
 8009590:	bf00      	nop
 8009592:	e002      	b.n	800959a <HAL_UART_IRQHandler+0x642>
      return;
 8009594:	bf00      	nop
 8009596:	e000      	b.n	800959a <HAL_UART_IRQHandler+0x642>
    return;
 8009598:	bf00      	nop
  }
}
 800959a:	37e8      	adds	r7, #232	@ 0xe8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80095a8:	bf00      	nop
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80095bc:	bf00      	nop
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80095d0:	bf00      	nop
 80095d2:	370c      	adds	r7, #12
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80095e4:	bf00      	nop
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80095f8:	bf00      	nop
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8009604:	b480      	push	{r7}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009612:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800961a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	4313      	orrs	r3, r2
}
 8009622:	4618      	mov	r0, r3
 8009624:	3714      	adds	r7, #20
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr
	...

08009630 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009634:	b08c      	sub	sp, #48	@ 0x30
 8009636:	af00      	add	r7, sp, #0
 8009638:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800963a:	2300      	movs	r3, #0
 800963c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	689a      	ldr	r2, [r3, #8]
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	431a      	orrs	r2, r3
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	695b      	ldr	r3, [r3, #20]
 800964e:	431a      	orrs	r2, r3
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	69db      	ldr	r3, [r3, #28]
 8009654:	4313      	orrs	r3, r2
 8009656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	4bab      	ldr	r3, [pc, #684]	@ (800990c <UART_SetConfig+0x2dc>)
 8009660:	4013      	ands	r3, r2
 8009662:	697a      	ldr	r2, [r7, #20]
 8009664:	6812      	ldr	r2, [r2, #0]
 8009666:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009668:	430b      	orrs	r3, r1
 800966a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	68da      	ldr	r2, [r3, #12]
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	430a      	orrs	r2, r1
 8009680:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	699b      	ldr	r3, [r3, #24]
 8009686:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4aa0      	ldr	r2, [pc, #640]	@ (8009910 <UART_SetConfig+0x2e0>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d004      	beq.n	800969c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	6a1b      	ldr	r3, [r3, #32]
 8009696:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009698:	4313      	orrs	r3, r2
 800969a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80096a6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80096aa:	697a      	ldr	r2, [r7, #20]
 80096ac:	6812      	ldr	r2, [r2, #0]
 80096ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096b0:	430b      	orrs	r3, r1
 80096b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ba:	f023 010f 	bic.w	r1, r3, #15
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	430a      	orrs	r2, r1
 80096c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a91      	ldr	r2, [pc, #580]	@ (8009914 <UART_SetConfig+0x2e4>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d125      	bne.n	8009720 <UART_SetConfig+0xf0>
 80096d4:	4b90      	ldr	r3, [pc, #576]	@ (8009918 <UART_SetConfig+0x2e8>)
 80096d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096da:	f003 0303 	and.w	r3, r3, #3
 80096de:	2b03      	cmp	r3, #3
 80096e0:	d81a      	bhi.n	8009718 <UART_SetConfig+0xe8>
 80096e2:	a201      	add	r2, pc, #4	@ (adr r2, 80096e8 <UART_SetConfig+0xb8>)
 80096e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e8:	080096f9 	.word	0x080096f9
 80096ec:	08009709 	.word	0x08009709
 80096f0:	08009701 	.word	0x08009701
 80096f4:	08009711 	.word	0x08009711
 80096f8:	2301      	movs	r3, #1
 80096fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096fe:	e0d6      	b.n	80098ae <UART_SetConfig+0x27e>
 8009700:	2302      	movs	r3, #2
 8009702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009706:	e0d2      	b.n	80098ae <UART_SetConfig+0x27e>
 8009708:	2304      	movs	r3, #4
 800970a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800970e:	e0ce      	b.n	80098ae <UART_SetConfig+0x27e>
 8009710:	2308      	movs	r3, #8
 8009712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009716:	e0ca      	b.n	80098ae <UART_SetConfig+0x27e>
 8009718:	2310      	movs	r3, #16
 800971a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800971e:	e0c6      	b.n	80098ae <UART_SetConfig+0x27e>
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a7d      	ldr	r2, [pc, #500]	@ (800991c <UART_SetConfig+0x2ec>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d138      	bne.n	800979c <UART_SetConfig+0x16c>
 800972a:	4b7b      	ldr	r3, [pc, #492]	@ (8009918 <UART_SetConfig+0x2e8>)
 800972c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009730:	f003 030c 	and.w	r3, r3, #12
 8009734:	2b0c      	cmp	r3, #12
 8009736:	d82d      	bhi.n	8009794 <UART_SetConfig+0x164>
 8009738:	a201      	add	r2, pc, #4	@ (adr r2, 8009740 <UART_SetConfig+0x110>)
 800973a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973e:	bf00      	nop
 8009740:	08009775 	.word	0x08009775
 8009744:	08009795 	.word	0x08009795
 8009748:	08009795 	.word	0x08009795
 800974c:	08009795 	.word	0x08009795
 8009750:	08009785 	.word	0x08009785
 8009754:	08009795 	.word	0x08009795
 8009758:	08009795 	.word	0x08009795
 800975c:	08009795 	.word	0x08009795
 8009760:	0800977d 	.word	0x0800977d
 8009764:	08009795 	.word	0x08009795
 8009768:	08009795 	.word	0x08009795
 800976c:	08009795 	.word	0x08009795
 8009770:	0800978d 	.word	0x0800978d
 8009774:	2300      	movs	r3, #0
 8009776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800977a:	e098      	b.n	80098ae <UART_SetConfig+0x27e>
 800977c:	2302      	movs	r3, #2
 800977e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009782:	e094      	b.n	80098ae <UART_SetConfig+0x27e>
 8009784:	2304      	movs	r3, #4
 8009786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800978a:	e090      	b.n	80098ae <UART_SetConfig+0x27e>
 800978c:	2308      	movs	r3, #8
 800978e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009792:	e08c      	b.n	80098ae <UART_SetConfig+0x27e>
 8009794:	2310      	movs	r3, #16
 8009796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800979a:	e088      	b.n	80098ae <UART_SetConfig+0x27e>
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a5f      	ldr	r2, [pc, #380]	@ (8009920 <UART_SetConfig+0x2f0>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d125      	bne.n	80097f2 <UART_SetConfig+0x1c2>
 80097a6:	4b5c      	ldr	r3, [pc, #368]	@ (8009918 <UART_SetConfig+0x2e8>)
 80097a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80097b0:	2b30      	cmp	r3, #48	@ 0x30
 80097b2:	d016      	beq.n	80097e2 <UART_SetConfig+0x1b2>
 80097b4:	2b30      	cmp	r3, #48	@ 0x30
 80097b6:	d818      	bhi.n	80097ea <UART_SetConfig+0x1ba>
 80097b8:	2b20      	cmp	r3, #32
 80097ba:	d00a      	beq.n	80097d2 <UART_SetConfig+0x1a2>
 80097bc:	2b20      	cmp	r3, #32
 80097be:	d814      	bhi.n	80097ea <UART_SetConfig+0x1ba>
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d002      	beq.n	80097ca <UART_SetConfig+0x19a>
 80097c4:	2b10      	cmp	r3, #16
 80097c6:	d008      	beq.n	80097da <UART_SetConfig+0x1aa>
 80097c8:	e00f      	b.n	80097ea <UART_SetConfig+0x1ba>
 80097ca:	2300      	movs	r3, #0
 80097cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097d0:	e06d      	b.n	80098ae <UART_SetConfig+0x27e>
 80097d2:	2302      	movs	r3, #2
 80097d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097d8:	e069      	b.n	80098ae <UART_SetConfig+0x27e>
 80097da:	2304      	movs	r3, #4
 80097dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097e0:	e065      	b.n	80098ae <UART_SetConfig+0x27e>
 80097e2:	2308      	movs	r3, #8
 80097e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097e8:	e061      	b.n	80098ae <UART_SetConfig+0x27e>
 80097ea:	2310      	movs	r3, #16
 80097ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097f0:	e05d      	b.n	80098ae <UART_SetConfig+0x27e>
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a4b      	ldr	r2, [pc, #300]	@ (8009924 <UART_SetConfig+0x2f4>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d125      	bne.n	8009848 <UART_SetConfig+0x218>
 80097fc:	4b46      	ldr	r3, [pc, #280]	@ (8009918 <UART_SetConfig+0x2e8>)
 80097fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009802:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009806:	2bc0      	cmp	r3, #192	@ 0xc0
 8009808:	d016      	beq.n	8009838 <UART_SetConfig+0x208>
 800980a:	2bc0      	cmp	r3, #192	@ 0xc0
 800980c:	d818      	bhi.n	8009840 <UART_SetConfig+0x210>
 800980e:	2b80      	cmp	r3, #128	@ 0x80
 8009810:	d00a      	beq.n	8009828 <UART_SetConfig+0x1f8>
 8009812:	2b80      	cmp	r3, #128	@ 0x80
 8009814:	d814      	bhi.n	8009840 <UART_SetConfig+0x210>
 8009816:	2b00      	cmp	r3, #0
 8009818:	d002      	beq.n	8009820 <UART_SetConfig+0x1f0>
 800981a:	2b40      	cmp	r3, #64	@ 0x40
 800981c:	d008      	beq.n	8009830 <UART_SetConfig+0x200>
 800981e:	e00f      	b.n	8009840 <UART_SetConfig+0x210>
 8009820:	2300      	movs	r3, #0
 8009822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009826:	e042      	b.n	80098ae <UART_SetConfig+0x27e>
 8009828:	2302      	movs	r3, #2
 800982a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800982e:	e03e      	b.n	80098ae <UART_SetConfig+0x27e>
 8009830:	2304      	movs	r3, #4
 8009832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009836:	e03a      	b.n	80098ae <UART_SetConfig+0x27e>
 8009838:	2308      	movs	r3, #8
 800983a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800983e:	e036      	b.n	80098ae <UART_SetConfig+0x27e>
 8009840:	2310      	movs	r3, #16
 8009842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009846:	e032      	b.n	80098ae <UART_SetConfig+0x27e>
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a30      	ldr	r2, [pc, #192]	@ (8009910 <UART_SetConfig+0x2e0>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d12a      	bne.n	80098a8 <UART_SetConfig+0x278>
 8009852:	4b31      	ldr	r3, [pc, #196]	@ (8009918 <UART_SetConfig+0x2e8>)
 8009854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009858:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800985c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009860:	d01a      	beq.n	8009898 <UART_SetConfig+0x268>
 8009862:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009866:	d81b      	bhi.n	80098a0 <UART_SetConfig+0x270>
 8009868:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800986c:	d00c      	beq.n	8009888 <UART_SetConfig+0x258>
 800986e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009872:	d815      	bhi.n	80098a0 <UART_SetConfig+0x270>
 8009874:	2b00      	cmp	r3, #0
 8009876:	d003      	beq.n	8009880 <UART_SetConfig+0x250>
 8009878:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800987c:	d008      	beq.n	8009890 <UART_SetConfig+0x260>
 800987e:	e00f      	b.n	80098a0 <UART_SetConfig+0x270>
 8009880:	2300      	movs	r3, #0
 8009882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009886:	e012      	b.n	80098ae <UART_SetConfig+0x27e>
 8009888:	2302      	movs	r3, #2
 800988a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800988e:	e00e      	b.n	80098ae <UART_SetConfig+0x27e>
 8009890:	2304      	movs	r3, #4
 8009892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009896:	e00a      	b.n	80098ae <UART_SetConfig+0x27e>
 8009898:	2308      	movs	r3, #8
 800989a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800989e:	e006      	b.n	80098ae <UART_SetConfig+0x27e>
 80098a0:	2310      	movs	r3, #16
 80098a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098a6:	e002      	b.n	80098ae <UART_SetConfig+0x27e>
 80098a8:	2310      	movs	r3, #16
 80098aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a17      	ldr	r2, [pc, #92]	@ (8009910 <UART_SetConfig+0x2e0>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	f040 80a8 	bne.w	8009a0a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80098ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80098be:	2b08      	cmp	r3, #8
 80098c0:	d834      	bhi.n	800992c <UART_SetConfig+0x2fc>
 80098c2:	a201      	add	r2, pc, #4	@ (adr r2, 80098c8 <UART_SetConfig+0x298>)
 80098c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c8:	080098ed 	.word	0x080098ed
 80098cc:	0800992d 	.word	0x0800992d
 80098d0:	080098f5 	.word	0x080098f5
 80098d4:	0800992d 	.word	0x0800992d
 80098d8:	080098fb 	.word	0x080098fb
 80098dc:	0800992d 	.word	0x0800992d
 80098e0:	0800992d 	.word	0x0800992d
 80098e4:	0800992d 	.word	0x0800992d
 80098e8:	08009903 	.word	0x08009903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098ec:	f7fd f912 	bl	8006b14 <HAL_RCC_GetPCLK1Freq>
 80098f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80098f2:	e021      	b.n	8009938 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009928 <UART_SetConfig+0x2f8>)
 80098f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80098f8:	e01e      	b.n	8009938 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098fa:	f7fd f89d 	bl	8006a38 <HAL_RCC_GetSysClockFreq>
 80098fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009900:	e01a      	b.n	8009938 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009902:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009906:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009908:	e016      	b.n	8009938 <UART_SetConfig+0x308>
 800990a:	bf00      	nop
 800990c:	cfff69f3 	.word	0xcfff69f3
 8009910:	40008000 	.word	0x40008000
 8009914:	40013800 	.word	0x40013800
 8009918:	40021000 	.word	0x40021000
 800991c:	40004400 	.word	0x40004400
 8009920:	40004800 	.word	0x40004800
 8009924:	40004c00 	.word	0x40004c00
 8009928:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800992c:	2300      	movs	r3, #0
 800992e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009936:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993a:	2b00      	cmp	r3, #0
 800993c:	f000 812a 	beq.w	8009b94 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009944:	4a9e      	ldr	r2, [pc, #632]	@ (8009bc0 <UART_SetConfig+0x590>)
 8009946:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800994a:	461a      	mov	r2, r3
 800994c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800994e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009952:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	685a      	ldr	r2, [r3, #4]
 8009958:	4613      	mov	r3, r2
 800995a:	005b      	lsls	r3, r3, #1
 800995c:	4413      	add	r3, r2
 800995e:	69ba      	ldr	r2, [r7, #24]
 8009960:	429a      	cmp	r2, r3
 8009962:	d305      	bcc.n	8009970 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800996a:	69ba      	ldr	r2, [r7, #24]
 800996c:	429a      	cmp	r2, r3
 800996e:	d903      	bls.n	8009978 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009970:	2301      	movs	r3, #1
 8009972:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009976:	e10d      	b.n	8009b94 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800997a:	2200      	movs	r2, #0
 800997c:	60bb      	str	r3, [r7, #8]
 800997e:	60fa      	str	r2, [r7, #12]
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009984:	4a8e      	ldr	r2, [pc, #568]	@ (8009bc0 <UART_SetConfig+0x590>)
 8009986:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800998a:	b29b      	uxth	r3, r3
 800998c:	2200      	movs	r2, #0
 800998e:	603b      	str	r3, [r7, #0]
 8009990:	607a      	str	r2, [r7, #4]
 8009992:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009996:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800999a:	f7f7 f99d 	bl	8000cd8 <__aeabi_uldivmod>
 800999e:	4602      	mov	r2, r0
 80099a0:	460b      	mov	r3, r1
 80099a2:	4610      	mov	r0, r2
 80099a4:	4619      	mov	r1, r3
 80099a6:	f04f 0200 	mov.w	r2, #0
 80099aa:	f04f 0300 	mov.w	r3, #0
 80099ae:	020b      	lsls	r3, r1, #8
 80099b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80099b4:	0202      	lsls	r2, r0, #8
 80099b6:	6979      	ldr	r1, [r7, #20]
 80099b8:	6849      	ldr	r1, [r1, #4]
 80099ba:	0849      	lsrs	r1, r1, #1
 80099bc:	2000      	movs	r0, #0
 80099be:	460c      	mov	r4, r1
 80099c0:	4605      	mov	r5, r0
 80099c2:	eb12 0804 	adds.w	r8, r2, r4
 80099c6:	eb43 0905 	adc.w	r9, r3, r5
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	469a      	mov	sl, r3
 80099d2:	4693      	mov	fp, r2
 80099d4:	4652      	mov	r2, sl
 80099d6:	465b      	mov	r3, fp
 80099d8:	4640      	mov	r0, r8
 80099da:	4649      	mov	r1, r9
 80099dc:	f7f7 f97c 	bl	8000cd8 <__aeabi_uldivmod>
 80099e0:	4602      	mov	r2, r0
 80099e2:	460b      	mov	r3, r1
 80099e4:	4613      	mov	r3, r2
 80099e6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80099e8:	6a3b      	ldr	r3, [r7, #32]
 80099ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80099ee:	d308      	bcc.n	8009a02 <UART_SetConfig+0x3d2>
 80099f0:	6a3b      	ldr	r3, [r7, #32]
 80099f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099f6:	d204      	bcs.n	8009a02 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	6a3a      	ldr	r2, [r7, #32]
 80099fe:	60da      	str	r2, [r3, #12]
 8009a00:	e0c8      	b.n	8009b94 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009a08:	e0c4      	b.n	8009b94 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	69db      	ldr	r3, [r3, #28]
 8009a0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a12:	d167      	bne.n	8009ae4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009a14:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009a18:	2b08      	cmp	r3, #8
 8009a1a:	d828      	bhi.n	8009a6e <UART_SetConfig+0x43e>
 8009a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8009a24 <UART_SetConfig+0x3f4>)
 8009a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a22:	bf00      	nop
 8009a24:	08009a49 	.word	0x08009a49
 8009a28:	08009a51 	.word	0x08009a51
 8009a2c:	08009a59 	.word	0x08009a59
 8009a30:	08009a6f 	.word	0x08009a6f
 8009a34:	08009a5f 	.word	0x08009a5f
 8009a38:	08009a6f 	.word	0x08009a6f
 8009a3c:	08009a6f 	.word	0x08009a6f
 8009a40:	08009a6f 	.word	0x08009a6f
 8009a44:	08009a67 	.word	0x08009a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a48:	f7fd f864 	bl	8006b14 <HAL_RCC_GetPCLK1Freq>
 8009a4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a4e:	e014      	b.n	8009a7a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a50:	f7fd f876 	bl	8006b40 <HAL_RCC_GetPCLK2Freq>
 8009a54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a56:	e010      	b.n	8009a7a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a58:	4b5a      	ldr	r3, [pc, #360]	@ (8009bc4 <UART_SetConfig+0x594>)
 8009a5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a5c:	e00d      	b.n	8009a7a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a5e:	f7fc ffeb 	bl	8006a38 <HAL_RCC_GetSysClockFreq>
 8009a62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a64:	e009      	b.n	8009a7a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a6c:	e005      	b.n	8009a7a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009a78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f000 8089 	beq.w	8009b94 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a86:	4a4e      	ldr	r2, [pc, #312]	@ (8009bc0 <UART_SetConfig+0x590>)
 8009a88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a90:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a94:	005a      	lsls	r2, r3, #1
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	085b      	lsrs	r3, r3, #1
 8009a9c:	441a      	add	r2, r3
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009aa6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009aa8:	6a3b      	ldr	r3, [r7, #32]
 8009aaa:	2b0f      	cmp	r3, #15
 8009aac:	d916      	bls.n	8009adc <UART_SetConfig+0x4ac>
 8009aae:	6a3b      	ldr	r3, [r7, #32]
 8009ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ab4:	d212      	bcs.n	8009adc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009ab6:	6a3b      	ldr	r3, [r7, #32]
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	f023 030f 	bic.w	r3, r3, #15
 8009abe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ac0:	6a3b      	ldr	r3, [r7, #32]
 8009ac2:	085b      	lsrs	r3, r3, #1
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	f003 0307 	and.w	r3, r3, #7
 8009aca:	b29a      	uxth	r2, r3
 8009acc:	8bfb      	ldrh	r3, [r7, #30]
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	8bfa      	ldrh	r2, [r7, #30]
 8009ad8:	60da      	str	r2, [r3, #12]
 8009ada:	e05b      	b.n	8009b94 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009ae2:	e057      	b.n	8009b94 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009ae4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009ae8:	2b08      	cmp	r3, #8
 8009aea:	d828      	bhi.n	8009b3e <UART_SetConfig+0x50e>
 8009aec:	a201      	add	r2, pc, #4	@ (adr r2, 8009af4 <UART_SetConfig+0x4c4>)
 8009aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af2:	bf00      	nop
 8009af4:	08009b19 	.word	0x08009b19
 8009af8:	08009b21 	.word	0x08009b21
 8009afc:	08009b29 	.word	0x08009b29
 8009b00:	08009b3f 	.word	0x08009b3f
 8009b04:	08009b2f 	.word	0x08009b2f
 8009b08:	08009b3f 	.word	0x08009b3f
 8009b0c:	08009b3f 	.word	0x08009b3f
 8009b10:	08009b3f 	.word	0x08009b3f
 8009b14:	08009b37 	.word	0x08009b37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b18:	f7fc fffc 	bl	8006b14 <HAL_RCC_GetPCLK1Freq>
 8009b1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b1e:	e014      	b.n	8009b4a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b20:	f7fd f80e 	bl	8006b40 <HAL_RCC_GetPCLK2Freq>
 8009b24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b26:	e010      	b.n	8009b4a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b28:	4b26      	ldr	r3, [pc, #152]	@ (8009bc4 <UART_SetConfig+0x594>)
 8009b2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b2c:	e00d      	b.n	8009b4a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b2e:	f7fc ff83 	bl	8006a38 <HAL_RCC_GetSysClockFreq>
 8009b32:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b34:	e009      	b.n	8009b4a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b3c:	e005      	b.n	8009b4a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009b42:	2301      	movs	r3, #1
 8009b44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009b48:	bf00      	nop
    }

    if (pclk != 0U)
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d021      	beq.n	8009b94 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b54:	4a1a      	ldr	r2, [pc, #104]	@ (8009bc0 <UART_SetConfig+0x590>)
 8009b56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	085b      	lsrs	r3, r3, #1
 8009b68:	441a      	add	r2, r3
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b74:	6a3b      	ldr	r3, [r7, #32]
 8009b76:	2b0f      	cmp	r3, #15
 8009b78:	d909      	bls.n	8009b8e <UART_SetConfig+0x55e>
 8009b7a:	6a3b      	ldr	r3, [r7, #32]
 8009b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b80:	d205      	bcs.n	8009b8e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b82:	6a3b      	ldr	r3, [r7, #32]
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	60da      	str	r2, [r3, #12]
 8009b8c:	e002      	b.n	8009b94 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	2200      	movs	r2, #0
 8009bae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009bb0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3730      	adds	r7, #48	@ 0x30
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009bbe:	bf00      	nop
 8009bc0:	0801153c 	.word	0x0801153c
 8009bc4:	00f42400 	.word	0x00f42400

08009bc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd4:	f003 0308 	and.w	r3, r3, #8
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d00a      	beq.n	8009bf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	430a      	orrs	r2, r1
 8009bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bf6:	f003 0301 	and.w	r3, r3, #1
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00a      	beq.n	8009c14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	430a      	orrs	r2, r1
 8009c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c18:	f003 0302 	and.w	r3, r3, #2
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d00a      	beq.n	8009c36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	430a      	orrs	r2, r1
 8009c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c3a:	f003 0304 	and.w	r3, r3, #4
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00a      	beq.n	8009c58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	430a      	orrs	r2, r1
 8009c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c5c:	f003 0310 	and.w	r3, r3, #16
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d00a      	beq.n	8009c7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	430a      	orrs	r2, r1
 8009c78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c7e:	f003 0320 	and.w	r3, r3, #32
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00a      	beq.n	8009c9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	430a      	orrs	r2, r1
 8009c9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d01a      	beq.n	8009cde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	430a      	orrs	r2, r1
 8009cbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cc6:	d10a      	bne.n	8009cde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	430a      	orrs	r2, r1
 8009cdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d00a      	beq.n	8009d00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	430a      	orrs	r2, r1
 8009cfe:	605a      	str	r2, [r3, #4]
  }
}
 8009d00:	bf00      	nop
 8009d02:	370c      	adds	r7, #12
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b098      	sub	sp, #96	@ 0x60
 8009d10:	af02      	add	r7, sp, #8
 8009d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d1c:	f7f8 fc52 	bl	80025c4 <HAL_GetTick>
 8009d20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f003 0308 	and.w	r3, r3, #8
 8009d2c:	2b08      	cmp	r3, #8
 8009d2e:	d12f      	bne.n	8009d90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d34:	9300      	str	r3, [sp, #0]
 8009d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f88e 	bl	8009e60 <UART_WaitOnFlagUntilTimeout>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d022      	beq.n	8009d90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d52:	e853 3f00 	ldrex	r3, [r3]
 8009d56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	461a      	mov	r2, r3
 8009d66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d68:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d6a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d70:	e841 2300 	strex	r3, r2, [r1]
 8009d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d1e6      	bne.n	8009d4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2220      	movs	r2, #32
 8009d80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d8c:	2303      	movs	r3, #3
 8009d8e:	e063      	b.n	8009e58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f003 0304 	and.w	r3, r3, #4
 8009d9a:	2b04      	cmp	r3, #4
 8009d9c:	d149      	bne.n	8009e32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d9e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009da6:	2200      	movs	r2, #0
 8009da8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 f857 	bl	8009e60 <UART_WaitOnFlagUntilTimeout>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d03c      	beq.n	8009e32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc0:	e853 3f00 	ldrex	r3, [r3]
 8009dc4:	623b      	str	r3, [r7, #32]
   return(result);
 8009dc6:	6a3b      	ldr	r3, [r7, #32]
 8009dc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009dcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8009dd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ddc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dde:	e841 2300 	strex	r3, r2, [r1]
 8009de2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d1e6      	bne.n	8009db8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	3308      	adds	r3, #8
 8009df0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	e853 3f00 	ldrex	r3, [r3]
 8009df8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f023 0301 	bic.w	r3, r3, #1
 8009e00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	3308      	adds	r3, #8
 8009e08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e0a:	61fa      	str	r2, [r7, #28]
 8009e0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0e:	69b9      	ldr	r1, [r7, #24]
 8009e10:	69fa      	ldr	r2, [r7, #28]
 8009e12:	e841 2300 	strex	r3, r2, [r1]
 8009e16:	617b      	str	r3, [r7, #20]
   return(result);
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d1e5      	bne.n	8009dea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2220      	movs	r2, #32
 8009e22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e2e:	2303      	movs	r3, #3
 8009e30:	e012      	b.n	8009e58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2220      	movs	r2, #32
 8009e36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2220      	movs	r2, #32
 8009e3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2200      	movs	r2, #0
 8009e52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3758      	adds	r7, #88	@ 0x58
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	603b      	str	r3, [r7, #0]
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e70:	e04f      	b.n	8009f12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e72:	69bb      	ldr	r3, [r7, #24]
 8009e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e78:	d04b      	beq.n	8009f12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e7a:	f7f8 fba3 	bl	80025c4 <HAL_GetTick>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	1ad3      	subs	r3, r2, r3
 8009e84:	69ba      	ldr	r2, [r7, #24]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d302      	bcc.n	8009e90 <UART_WaitOnFlagUntilTimeout+0x30>
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d101      	bne.n	8009e94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009e90:	2303      	movs	r3, #3
 8009e92:	e04e      	b.n	8009f32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f003 0304 	and.w	r3, r3, #4
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d037      	beq.n	8009f12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	2b80      	cmp	r3, #128	@ 0x80
 8009ea6:	d034      	beq.n	8009f12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	2b40      	cmp	r3, #64	@ 0x40
 8009eac:	d031      	beq.n	8009f12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	69db      	ldr	r3, [r3, #28]
 8009eb4:	f003 0308 	and.w	r3, r3, #8
 8009eb8:	2b08      	cmp	r3, #8
 8009eba:	d110      	bne.n	8009ede <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2208      	movs	r2, #8
 8009ec2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ec4:	68f8      	ldr	r0, [r7, #12]
 8009ec6:	f000 f920 	bl	800a10a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2208      	movs	r2, #8
 8009ece:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009eda:	2301      	movs	r3, #1
 8009edc:	e029      	b.n	8009f32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	69db      	ldr	r3, [r3, #28]
 8009ee4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ee8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009eec:	d111      	bne.n	8009f12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009ef6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	f000 f906 	bl	800a10a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2220      	movs	r2, #32
 8009f02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009f0e:	2303      	movs	r3, #3
 8009f10:	e00f      	b.n	8009f32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	69da      	ldr	r2, [r3, #28]
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	4013      	ands	r3, r2
 8009f1c:	68ba      	ldr	r2, [r7, #8]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	bf0c      	ite	eq
 8009f22:	2301      	moveq	r3, #1
 8009f24:	2300      	movne	r3, #0
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	461a      	mov	r2, r3
 8009f2a:	79fb      	ldrb	r3, [r7, #7]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d0a0      	beq.n	8009e72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f30:	2300      	movs	r3, #0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3710      	adds	r7, #16
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
	...

08009f3c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b096      	sub	sp, #88	@ 0x58
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	4613      	mov	r3, r2
 8009f48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	68ba      	ldr	r2, [r7, #8]
 8009f4e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	88fa      	ldrh	r2, [r7, #6]
 8009f54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2222      	movs	r2, #34	@ 0x22
 8009f64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d02d      	beq.n	8009fce <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f78:	4a40      	ldr	r2, [pc, #256]	@ (800a07c <UART_Start_Receive_DMA+0x140>)
 8009f7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f82:	4a3f      	ldr	r2, [pc, #252]	@ (800a080 <UART_Start_Receive_DMA+0x144>)
 8009f84:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f8c:	4a3d      	ldr	r2, [pc, #244]	@ (800a084 <UART_Start_Receive_DMA+0x148>)
 8009f8e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f96:	2200      	movs	r2, #0
 8009f98:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	3324      	adds	r3, #36	@ 0x24
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fac:	461a      	mov	r2, r3
 8009fae:	88fb      	ldrh	r3, [r7, #6]
 8009fb0:	f7fb fad2 	bl	8005558 <HAL_DMA_Start_IT>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d009      	beq.n	8009fce <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2210      	movs	r2, #16
 8009fbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2220      	movs	r2, #32
 8009fc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e051      	b.n	800a072 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d018      	beq.n	800a008 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fde:	e853 3f00 	ldrex	r3, [r3]
 8009fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fe6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009fea:	657b      	str	r3, [r7, #84]	@ 0x54
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ff6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009ffa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ffc:	e841 2300 	strex	r3, r2, [r1]
 800a000:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a002:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1e6      	bne.n	8009fd6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	3308      	adds	r3, #8
 800a00e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a012:	e853 3f00 	ldrex	r3, [r3]
 800a016:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a01a:	f043 0301 	orr.w	r3, r3, #1
 800a01e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	3308      	adds	r3, #8
 800a026:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a028:	637a      	str	r2, [r7, #52]	@ 0x34
 800a02a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a02e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a030:	e841 2300 	strex	r3, r2, [r1]
 800a034:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d1e5      	bne.n	800a008 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	3308      	adds	r3, #8
 800a042:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	e853 3f00 	ldrex	r3, [r3]
 800a04a:	613b      	str	r3, [r7, #16]
   return(result);
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a052:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	3308      	adds	r3, #8
 800a05a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a05c:	623a      	str	r2, [r7, #32]
 800a05e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a060:	69f9      	ldr	r1, [r7, #28]
 800a062:	6a3a      	ldr	r2, [r7, #32]
 800a064:	e841 2300 	strex	r3, r2, [r1]
 800a068:	61bb      	str	r3, [r7, #24]
   return(result);
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1e5      	bne.n	800a03c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3758      	adds	r7, #88	@ 0x58
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	0800a28d 	.word	0x0800a28d
 800a080:	0800a3b9 	.word	0x0800a3b9
 800a084:	0800a3f7 	.word	0x0800a3f7

0800a088 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a088:	b480      	push	{r7}
 800a08a:	b08f      	sub	sp, #60	@ 0x3c
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a096:	6a3b      	ldr	r3, [r7, #32]
 800a098:	e853 3f00 	ldrex	r3, [r3]
 800a09c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a09e:	69fb      	ldr	r3, [r7, #28]
 800a0a0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a0a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0b0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a0b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0b6:	e841 2300 	strex	r3, r2, [r1]
 800a0ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d1e6      	bne.n	800a090 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	3308      	adds	r3, #8
 800a0c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	e853 3f00 	ldrex	r3, [r3]
 800a0d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a0d8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	3308      	adds	r3, #8
 800a0e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0e2:	61ba      	str	r2, [r7, #24]
 800a0e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e6:	6979      	ldr	r1, [r7, #20]
 800a0e8:	69ba      	ldr	r2, [r7, #24]
 800a0ea:	e841 2300 	strex	r3, r2, [r1]
 800a0ee:	613b      	str	r3, [r7, #16]
   return(result);
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1e5      	bne.n	800a0c2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2220      	movs	r2, #32
 800a0fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a0fe:	bf00      	nop
 800a100:	373c      	adds	r7, #60	@ 0x3c
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr

0800a10a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a10a:	b480      	push	{r7}
 800a10c:	b095      	sub	sp, #84	@ 0x54
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a11a:	e853 3f00 	ldrex	r3, [r3]
 800a11e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a122:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a126:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	461a      	mov	r2, r3
 800a12e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a130:	643b      	str	r3, [r7, #64]	@ 0x40
 800a132:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a134:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a136:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a138:	e841 2300 	strex	r3, r2, [r1]
 800a13c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a13e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a140:	2b00      	cmp	r3, #0
 800a142:	d1e6      	bne.n	800a112 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	3308      	adds	r3, #8
 800a14a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14c:	6a3b      	ldr	r3, [r7, #32]
 800a14e:	e853 3f00 	ldrex	r3, [r3]
 800a152:	61fb      	str	r3, [r7, #28]
   return(result);
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a15a:	f023 0301 	bic.w	r3, r3, #1
 800a15e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	3308      	adds	r3, #8
 800a166:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a168:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a16a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a16e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a170:	e841 2300 	strex	r3, r2, [r1]
 800a174:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d1e3      	bne.n	800a144 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a180:	2b01      	cmp	r3, #1
 800a182:	d118      	bne.n	800a1b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	e853 3f00 	ldrex	r3, [r3]
 800a190:	60bb      	str	r3, [r7, #8]
   return(result);
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	f023 0310 	bic.w	r3, r3, #16
 800a198:	647b      	str	r3, [r7, #68]	@ 0x44
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1a2:	61bb      	str	r3, [r7, #24]
 800a1a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a6:	6979      	ldr	r1, [r7, #20]
 800a1a8:	69ba      	ldr	r2, [r7, #24]
 800a1aa:	e841 2300 	strex	r3, r2, [r1]
 800a1ae:	613b      	str	r3, [r7, #16]
   return(result);
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d1e6      	bne.n	800a184 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2220      	movs	r2, #32
 800a1ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a1ca:	bf00      	nop
 800a1cc:	3754      	adds	r7, #84	@ 0x54
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr

0800a1d6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b090      	sub	sp, #64	@ 0x40
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f003 0320 	and.w	r3, r3, #32
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d137      	bne.n	800a262 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a1f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a1fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	3308      	adds	r3, #8
 800a200:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a204:	e853 3f00 	ldrex	r3, [r3]
 800a208:	623b      	str	r3, [r7, #32]
   return(result);
 800a20a:	6a3b      	ldr	r3, [r7, #32]
 800a20c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a210:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	3308      	adds	r3, #8
 800a218:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a21a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a21c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a220:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a222:	e841 2300 	strex	r3, r2, [r1]
 800a226:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1e5      	bne.n	800a1fa <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a22e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	e853 3f00 	ldrex	r3, [r3]
 800a23a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a242:	637b      	str	r3, [r7, #52]	@ 0x34
 800a244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	461a      	mov	r2, r3
 800a24a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a24c:	61fb      	str	r3, [r7, #28]
 800a24e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a250:	69b9      	ldr	r1, [r7, #24]
 800a252:	69fa      	ldr	r2, [r7, #28]
 800a254:	e841 2300 	strex	r3, r2, [r1]
 800a258:	617b      	str	r3, [r7, #20]
   return(result);
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d1e6      	bne.n	800a22e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a260:	e002      	b.n	800a268 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a262:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a264:	f7ff f99c 	bl	80095a0 <HAL_UART_TxCpltCallback>
}
 800a268:	bf00      	nop
 800a26a:	3740      	adds	r7, #64	@ 0x40
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a27c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	f7ff f998 	bl	80095b4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a284:	bf00      	nop
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b09c      	sub	sp, #112	@ 0x70
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a298:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f003 0320 	and.w	r3, r3, #32
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d171      	bne.n	800a38c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a2a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2b8:	e853 3f00 	ldrex	r3, [r3]
 800a2bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a2be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a2c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a2c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a2ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a2d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a2d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a2d6:	e841 2300 	strex	r3, r2, [r1]
 800a2da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a2dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1e6      	bne.n	800a2b0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	3308      	adds	r3, #8
 800a2e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ec:	e853 3f00 	ldrex	r3, [r3]
 800a2f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a2f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2f4:	f023 0301 	bic.w	r3, r3, #1
 800a2f8:	667b      	str	r3, [r7, #100]	@ 0x64
 800a2fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	3308      	adds	r3, #8
 800a300:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a302:	647a      	str	r2, [r7, #68]	@ 0x44
 800a304:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a306:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a308:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a30a:	e841 2300 	strex	r3, r2, [r1]
 800a30e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a312:	2b00      	cmp	r3, #0
 800a314:	d1e5      	bne.n	800a2e2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a316:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3308      	adds	r3, #8
 800a31c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a320:	e853 3f00 	ldrex	r3, [r3]
 800a324:	623b      	str	r3, [r7, #32]
   return(result);
 800a326:	6a3b      	ldr	r3, [r7, #32]
 800a328:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a32c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a32e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	3308      	adds	r3, #8
 800a334:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a336:	633a      	str	r2, [r7, #48]	@ 0x30
 800a338:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a33c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a33e:	e841 2300 	strex	r3, r2, [r1]
 800a342:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a346:	2b00      	cmp	r3, #0
 800a348:	d1e5      	bne.n	800a316 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a34a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a34c:	2220      	movs	r2, #32
 800a34e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a352:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a354:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a356:	2b01      	cmp	r3, #1
 800a358:	d118      	bne.n	800a38c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a35a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	e853 3f00 	ldrex	r3, [r3]
 800a366:	60fb      	str	r3, [r7, #12]
   return(result);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f023 0310 	bic.w	r3, r3, #16
 800a36e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a370:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	461a      	mov	r2, r3
 800a376:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a378:	61fb      	str	r3, [r7, #28]
 800a37a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37c:	69b9      	ldr	r1, [r7, #24]
 800a37e:	69fa      	ldr	r2, [r7, #28]
 800a380:	e841 2300 	strex	r3, r2, [r1]
 800a384:	617b      	str	r3, [r7, #20]
   return(result);
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d1e6      	bne.n	800a35a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a38c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a38e:	2200      	movs	r2, #0
 800a390:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a392:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a394:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a396:	2b01      	cmp	r3, #1
 800a398:	d107      	bne.n	800a3aa <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a39a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a39c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a3a4:	f001 fe4a 	bl	800c03c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3a8:	e002      	b.n	800a3b0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a3aa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a3ac:	f7ff f90c 	bl	80095c8 <HAL_UART_RxCpltCallback>
}
 800a3b0:	bf00      	nop
 800a3b2:	3770      	adds	r7, #112	@ 0x70
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3c4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d109      	bne.n	800a3e8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a3da:	085b      	lsrs	r3, r3, #1
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	4619      	mov	r1, r3
 800a3e0:	68f8      	ldr	r0, [r7, #12]
 800a3e2:	f001 fe2b 	bl	800c03c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3e6:	e002      	b.n	800a3ee <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a3e8:	68f8      	ldr	r0, [r7, #12]
 800a3ea:	f7ff f8f7 	bl	80095dc <HAL_UART_RxHalfCpltCallback>
}
 800a3ee:	bf00      	nop
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b086      	sub	sp, #24
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a402:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a40a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a412:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a41e:	2b80      	cmp	r3, #128	@ 0x80
 800a420:	d109      	bne.n	800a436 <UART_DMAError+0x40>
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	2b21      	cmp	r3, #33	@ 0x21
 800a426:	d106      	bne.n	800a436 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a430:	6978      	ldr	r0, [r7, #20]
 800a432:	f7ff fe29 	bl	800a088 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a440:	2b40      	cmp	r3, #64	@ 0x40
 800a442:	d109      	bne.n	800a458 <UART_DMAError+0x62>
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2b22      	cmp	r3, #34	@ 0x22
 800a448:	d106      	bne.n	800a458 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	2200      	movs	r2, #0
 800a44e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a452:	6978      	ldr	r0, [r7, #20]
 800a454:	f7ff fe59 	bl	800a10a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a45e:	f043 0210 	orr.w	r2, r3, #16
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a468:	6978      	ldr	r0, [r7, #20]
 800a46a:	f7ff f8c1 	bl	80095f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a46e:	bf00      	nop
 800a470:	3718      	adds	r7, #24
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}

0800a476 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b084      	sub	sp, #16
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a482:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2200      	movs	r2, #0
 800a488:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2200      	movs	r2, #0
 800a490:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f7ff f8ab 	bl	80095f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a49a:	bf00      	nop
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}

0800a4a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a4a2:	b580      	push	{r7, lr}
 800a4a4:	b088      	sub	sp, #32
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	e853 3f00 	ldrex	r3, [r3]
 800a4b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4be:	61fb      	str	r3, [r7, #28]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	61bb      	str	r3, [r7, #24]
 800a4ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4cc:	6979      	ldr	r1, [r7, #20]
 800a4ce:	69ba      	ldr	r2, [r7, #24]
 800a4d0:	e841 2300 	strex	r3, r2, [r1]
 800a4d4:	613b      	str	r3, [r7, #16]
   return(result);
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d1e6      	bne.n	800a4aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2220      	movs	r2, #32
 800a4e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f7ff f858 	bl	80095a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4f0:	bf00      	nop
 800a4f2:	3720      	adds	r7, #32
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a500:	bf00      	nop
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a514:	bf00      	nop
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a528:	bf00      	nop
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a534:	b480      	push	{r7}
 800a536:	b085      	sub	sp, #20
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a542:	2b01      	cmp	r3, #1
 800a544:	d101      	bne.n	800a54a <HAL_UARTEx_DisableFifoMode+0x16>
 800a546:	2302      	movs	r3, #2
 800a548:	e027      	b.n	800a59a <HAL_UARTEx_DisableFifoMode+0x66>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2201      	movs	r2, #1
 800a54e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2224      	movs	r2, #36	@ 0x24
 800a556:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f022 0201 	bic.w	r2, r2, #1
 800a570:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a578:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2220      	movs	r2, #32
 800a58c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a598:	2300      	movs	r3, #0
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3714      	adds	r7, #20
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr

0800a5a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b084      	sub	sp, #16
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d101      	bne.n	800a5be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a5ba:	2302      	movs	r3, #2
 800a5bc:	e02d      	b.n	800a61a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2224      	movs	r2, #36	@ 0x24
 800a5ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f022 0201 	bic.w	r2, r2, #1
 800a5e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	683a      	ldr	r2, [r7, #0]
 800a5f6:	430a      	orrs	r2, r1
 800a5f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 f8a4 	bl	800a748 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	68fa      	ldr	r2, [r7, #12]
 800a606:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2220      	movs	r2, #32
 800a60c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2200      	movs	r2, #0
 800a614:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a618:	2300      	movs	r3, #0
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3710      	adds	r7, #16
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b084      	sub	sp, #16
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
 800a62a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a632:	2b01      	cmp	r3, #1
 800a634:	d101      	bne.n	800a63a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a636:	2302      	movs	r3, #2
 800a638:	e02d      	b.n	800a696 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2201      	movs	r2, #1
 800a63e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2224      	movs	r2, #36	@ 0x24
 800a646:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f022 0201 	bic.w	r2, r2, #1
 800a660:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	683a      	ldr	r2, [r7, #0]
 800a672:	430a      	orrs	r2, r1
 800a674:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f866 	bl	800a748 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2220      	movs	r2, #32
 800a688:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	3710      	adds	r7, #16
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b08c      	sub	sp, #48	@ 0x30
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	60f8      	str	r0, [r7, #12]
 800a6a6:	60b9      	str	r1, [r7, #8]
 800a6a8:	4613      	mov	r3, r2
 800a6aa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a6b2:	2b20      	cmp	r3, #32
 800a6b4:	d142      	bne.n	800a73c <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d002      	beq.n	800a6c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800a6bc:	88fb      	ldrh	r3, [r7, #6]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d101      	bne.n	800a6c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e03b      	b.n	800a73e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a6d2:	88fb      	ldrh	r3, [r7, #6]
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	68b9      	ldr	r1, [r7, #8]
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f7ff fc2f 	bl	8009f3c <UART_Start_Receive_DMA>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a6e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d124      	bne.n	800a736 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d11d      	bne.n	800a730 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2210      	movs	r2, #16
 800a6fa:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	e853 3f00 	ldrex	r3, [r3]
 800a708:	617b      	str	r3, [r7, #20]
   return(result);
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	f043 0310 	orr.w	r3, r3, #16
 800a710:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	461a      	mov	r2, r3
 800a718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a71a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a71c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a71e:	6a39      	ldr	r1, [r7, #32]
 800a720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a722:	e841 2300 	strex	r3, r2, [r1]
 800a726:	61fb      	str	r3, [r7, #28]
   return(result);
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d1e6      	bne.n	800a6fc <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800a72e:	e002      	b.n	800a736 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a730:	2301      	movs	r3, #1
 800a732:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800a736:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a73a:	e000      	b.n	800a73e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a73c:	2302      	movs	r3, #2
  }
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3730      	adds	r7, #48	@ 0x30
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
	...

0800a748 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a748:	b480      	push	{r7}
 800a74a:	b085      	sub	sp, #20
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a754:	2b00      	cmp	r3, #0
 800a756:	d108      	bne.n	800a76a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2201      	movs	r2, #1
 800a764:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a768:	e031      	b.n	800a7ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a76a:	2308      	movs	r3, #8
 800a76c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a76e:	2308      	movs	r3, #8
 800a770:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	0e5b      	lsrs	r3, r3, #25
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	f003 0307 	and.w	r3, r3, #7
 800a780:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	0f5b      	lsrs	r3, r3, #29
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	f003 0307 	and.w	r3, r3, #7
 800a790:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a792:	7bbb      	ldrb	r3, [r7, #14]
 800a794:	7b3a      	ldrb	r2, [r7, #12]
 800a796:	4911      	ldr	r1, [pc, #68]	@ (800a7dc <UARTEx_SetNbDataToProcess+0x94>)
 800a798:	5c8a      	ldrb	r2, [r1, r2]
 800a79a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a79e:	7b3a      	ldrb	r2, [r7, #12]
 800a7a0:	490f      	ldr	r1, [pc, #60]	@ (800a7e0 <UARTEx_SetNbDataToProcess+0x98>)
 800a7a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a7a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7a8:	b29a      	uxth	r2, r3
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a7b0:	7bfb      	ldrb	r3, [r7, #15]
 800a7b2:	7b7a      	ldrb	r2, [r7, #13]
 800a7b4:	4909      	ldr	r1, [pc, #36]	@ (800a7dc <UARTEx_SetNbDataToProcess+0x94>)
 800a7b6:	5c8a      	ldrb	r2, [r1, r2]
 800a7b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a7bc:	7b7a      	ldrb	r2, [r7, #13]
 800a7be:	4908      	ldr	r1, [pc, #32]	@ (800a7e0 <UARTEx_SetNbDataToProcess+0x98>)
 800a7c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a7c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7c6:	b29a      	uxth	r2, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a7ce:	bf00      	nop
 800a7d0:	3714      	adds	r7, #20
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	08011554 	.word	0x08011554
 800a7e0:	0801155c 	.word	0x0801155c

0800a7e4 <goToZeroElecAngle>:
#include "pid.h"
#include "lowpass_filter.h"
#include "app.h"

void goToZeroElecAngle(BldcMotor *motor)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
    setTorque(motor, 0, OPEN_LOOP_TORQUE, 0);
 800a7ec:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 800a810 <goToZeroElecAngle+0x2c>
 800a7f0:	eddf 0a08 	vldr	s1, [pc, #32]	@ 800a814 <goToZeroElecAngle+0x30>
 800a7f4:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 800a810 <goToZeroElecAngle+0x2c>
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f001 f815 	bl	800b828 <setTorque>
    delay(700);
 800a7fe:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800a802:	f001 ff87 	bl	800c714 <delay>
}
 800a806:	bf00      	nop
 800a808:	3708      	adds	r7, #8
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	00000000 	.word	0x00000000
 800a814:	405db3d7 	.word	0x405db3d7

0800a818 <alignSensor>:
void alignSensor(BldcMotor *motor)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b08a      	sub	sp, #40	@ 0x28
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i <= 500; i++)
 800a820:	2300      	movs	r3, #0
 800a822:	627b      	str	r3, [r7, #36]	@ 0x24
 800a824:	e025      	b.n	800a872 <alignSensor+0x5a>
    {
        float angle = _3PI_2 + _2PI * i / 500.0f;
 800a826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a828:	ee07 3a90 	vmov	s15, r3
 800a82c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a830:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 800aa18 <alignSensor+0x200>
 800a834:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a838:	eddf 6a78 	vldr	s13, [pc, #480]	@ 800aa1c <alignSensor+0x204>
 800a83c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a840:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 800aa20 <alignSensor+0x208>
 800a844:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a848:	edc7 7a02 	vstr	s15, [r7, #8]
        setTorque(motor, OPEN_LOOP_TORQUE, 0, angle);
 800a84c:	ed97 1a02 	vldr	s2, [r7, #8]
 800a850:	eddf 0a74 	vldr	s1, [pc, #464]	@ 800aa24 <alignSensor+0x20c>
 800a854:	ed9f 0a74 	vldr	s0, [pc, #464]	@ 800aa28 <alignSensor+0x210>
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 ffe5 	bl	800b828 <setTorque>
        encoderUpdate(&motor->magEncoder);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	4618      	mov	r0, r3
 800a862:	f000 fcb7 	bl	800b1d4 <encoderUpdate>
        delay(2);
 800a866:	2002      	movs	r0, #2
 800a868:	f001 ff54 	bl	800c714 <delay>
    for (int i = 0; i <= 500; i++)
 800a86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a86e:	3301      	adds	r3, #1
 800a870:	627b      	str	r3, [r7, #36]	@ 0x24
 800a872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a874:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800a878:	ddd5      	ble.n	800a826 <alignSensor+0xe>
    }
    encoderUpdate(&motor->magEncoder);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4618      	mov	r0, r3
 800a87e:	f000 fca9 	bl	800b1d4 <encoderUpdate>
    float mid_angle = motor->magEncoder.fullAngle;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	695b      	ldr	r3, [r3, #20]
 800a886:	61fb      	str	r3, [r7, #28]
    // move one electrical revolution backwards
    for (int i = 500; i >= 0; i--)
 800a888:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800a88c:	623b      	str	r3, [r7, #32]
 800a88e:	e025      	b.n	800a8dc <alignSensor+0xc4>
    {
        float angle = _3PI_2 + _2PI * i / 500.0f;
 800a890:	6a3b      	ldr	r3, [r7, #32]
 800a892:	ee07 3a90 	vmov	s15, r3
 800a896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a89a:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 800aa18 <alignSensor+0x200>
 800a89e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a8a2:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800aa1c <alignSensor+0x204>
 800a8a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a8aa:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800aa20 <alignSensor+0x208>
 800a8ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a8b2:	edc7 7a03 	vstr	s15, [r7, #12]
        setTorque(motor, OPEN_LOOP_TORQUE, 0, angle);
 800a8b6:	ed97 1a03 	vldr	s2, [r7, #12]
 800a8ba:	eddf 0a5a 	vldr	s1, [pc, #360]	@ 800aa24 <alignSensor+0x20c>
 800a8be:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 800aa28 <alignSensor+0x210>
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 ffb0 	bl	800b828 <setTorque>
        encoderUpdate(&motor->magEncoder);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f000 fc82 	bl	800b1d4 <encoderUpdate>
        delay(2);
 800a8d0:	2002      	movs	r0, #2
 800a8d2:	f001 ff1f 	bl	800c714 <delay>
    for (int i = 500; i >= 0; i--)
 800a8d6:	6a3b      	ldr	r3, [r7, #32]
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	623b      	str	r3, [r7, #32]
 800a8dc:	6a3b      	ldr	r3, [r7, #32]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	dad6      	bge.n	800a890 <alignSensor+0x78>
    }
    encoderUpdate(&motor->magEncoder);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f000 fc75 	bl	800b1d4 <encoderUpdate>
    float end_angle = motor->magEncoder.fullAngle;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	695b      	ldr	r3, [r3, #20]
 800a8ee:	61bb      	str	r3, [r7, #24]
    // setPhaseVoltage(0, 0, 0);
    delay(200);
 800a8f0:	20c8      	movs	r0, #200	@ 0xc8
 800a8f2:	f001 ff0f 	bl	800c714 <delay>

    // determine the direction the sensor moved
    float moved = fabs(mid_angle - end_angle);
 800a8f6:	ed97 7a07 	vldr	s14, [r7, #28]
 800a8fa:	edd7 7a06 	vldr	s15, [r7, #24]
 800a8fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a902:	eef0 7ae7 	vabs.f32	s15, s15
 800a906:	edc7 7a05 	vstr	s15, [r7, #20]
    if (moved < MIN_ANGLE_DETECT_MOVEMENT)
 800a90a:	edd7 7a05 	vldr	s15, [r7, #20]
 800a90e:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800aa2c <alignSensor+0x214>
 800a912:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a91a:	d503      	bpl.n	800a924 <alignSensor+0x10c>
    { // minimum angle to detect movement
        FOC_log("Failed to notice movement\n");
 800a91c:	4844      	ldr	r0, [pc, #272]	@ (800aa30 <alignSensor+0x218>)
 800a91e:	f001 fba9 	bl	800c074 <FOC_log>
        return 0; // failed calibration
 800a922:	e075      	b.n	800aa10 <alignSensor+0x1f8>
    }
    else if (mid_angle < end_angle)
 800a924:	ed97 7a07 	vldr	s14, [r7, #28]
 800a928:	edd7 7a06 	vldr	s15, [r7, #24]
 800a92c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a934:	d507      	bpl.n	800a946 <alignSensor+0x12e>
    {
        FOC_log("sensor_direction==CCW\n");
 800a936:	483f      	ldr	r0, [pc, #252]	@ (800aa34 <alignSensor+0x21c>)
 800a938:	f001 fb9c 	bl	800c074 <FOC_log>
        motor->magEncoder.direction = CCW;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	22ff      	movs	r2, #255	@ 0xff
 800a940:	f883 2020 	strb.w	r2, [r3, #32]
 800a944:	e006      	b.n	800a954 <alignSensor+0x13c>
    }
    else
    {
        FOC_log("sensor_direction==CW\n");
 800a946:	483c      	ldr	r0, [pc, #240]	@ (800aa38 <alignSensor+0x220>)
 800a948:	f001 fb94 	bl	800c074 <FOC_log>
        motor->magEncoder.direction = CW;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	f883 2020 	strb.w	r2, [r3, #32]
    }
    // check pole pair number
    bool pp_check_result = !(fabs(moved * motor->pole_pairs - _2PI) > 0.5f); // 0.5f is arbitrary number it can be lower or higher!
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a95a:	ee07 3a90 	vmov	s15, r3
 800a95e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a962:	edd7 7a05 	vldr	s15, [r7, #20]
 800a966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a96a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800aa18 <alignSensor+0x200>
 800a96e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a972:	eef0 7ae7 	vabs.f32	s15, s15
 800a976:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a97a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a982:	bfcc      	ite	gt
 800a984:	2301      	movgt	r3, #1
 800a986:	2300      	movle	r3, #0
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	f083 0301 	eor.w	r3, r3, #1
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	74fb      	strb	r3, [r7, #19]
    if (pp_check_result == false)
 800a992:	7cfb      	ldrb	r3, [r7, #19]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d10f      	bne.n	800a9b8 <alignSensor+0x1a0>
    {
        FOC_log("PP check: fail - estimated pp: \n", _2PI / moved);
 800a998:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800aa18 <alignSensor+0x200>
 800a99c:	edd7 7a05 	vldr	s15, [r7, #20]
 800a9a0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a9a4:	ee16 0a90 	vmov	r0, s13
 800a9a8:	f7f5 fdf6 	bl	8000598 <__aeabi_f2d>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	4822      	ldr	r0, [pc, #136]	@ (800aa3c <alignSensor+0x224>)
 800a9b2:	f001 fb5f 	bl	800c074 <FOC_log>
 800a9b6:	e002      	b.n	800a9be <alignSensor+0x1a6>
    }
    else
    {
        FOC_log("PP check: OK!\n");
 800a9b8:	4821      	ldr	r0, [pc, #132]	@ (800aa40 <alignSensor+0x228>)
 800a9ba:	f001 fb5b 	bl	800c074 <FOC_log>
    }

    // align the electrical phases of the motor and sensor
    // set angle -90(270 = 3PI/2) degrees
    goToZeroElecAngle(motor);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f7ff ff10 	bl	800a7e4 <goToZeroElecAngle>
    // read the sensor
    encoderUpdate(&motor->magEncoder);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f000 fc04 	bl	800b1d4 <encoderUpdate>
    // get the current zero electric angle
    motor->zeroElectricAngleOffSet = 0;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f04f 0200 	mov.w	r2, #0
 800a9d2:	635a      	str	r2, [r3, #52]	@ 0x34
    getElecAngle(motor);
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 f839 	bl	800aa4c <getElecAngle>
    motor->zeroElectricAngleOffSet = motor->angle_el;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	635a      	str	r2, [r3, #52]	@ 0x34
    // zero_electric_angle =  _normalizeAngle(_electricalAngle(sensor_direction*sensor->getAngle(), pole_pairs));
    // delay(20);
    // encoderUpdate(&motor->magEncoder);
    getElecAngle(motor);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 f832 	bl	800aa4c <getElecAngle>
    // motor->zeroElectricAngleOffSet = 0;
    // FOC_log("[zeroAngleOffset]:%f  [zeroAngle]:%f\r\n", motor->zeroElectricAngleOffSet, motor->angle_el);
    FOC_log("[zeroAngleOffset]:%f\n", motor->zeroElectricAngleOffSet);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7f5 fdd3 	bl	8000598 <__aeabi_f2d>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	4813      	ldr	r0, [pc, #76]	@ (800aa44 <alignSensor+0x22c>)
 800a9f8:	f001 fb3c 	bl	800c074 <FOC_log>
    FOC_log("[zeroAngle]:%f\n", motor->angle_el);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7f5 fdc9 	bl	8000598 <__aeabi_f2d>
 800aa06:	4602      	mov	r2, r0
 800aa08:	460b      	mov	r3, r1
 800aa0a:	480f      	ldr	r0, [pc, #60]	@ (800aa48 <alignSensor+0x230>)
 800aa0c:	f001 fb32 	bl	800c074 <FOC_log>
    // // make sure the angle_el is about zero

    // delay(200);
}
 800aa10:	3728      	adds	r7, #40	@ 0x28
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	40c90fdb 	.word	0x40c90fdb
 800aa1c:	43fa0000 	.word	0x43fa0000
 800aa20:	4096cbe4 	.word	0x4096cbe4
 800aa24:	00000000 	.word	0x00000000
 800aa28:	405db3d7 	.word	0x405db3d7
 800aa2c:	3d7ecfa9 	.word	0x3d7ecfa9
 800aa30:	08011420 	.word	0x08011420
 800aa34:	0801143c 	.word	0x0801143c
 800aa38:	08011454 	.word	0x08011454
 800aa3c:	0801146c 	.word	0x0801146c
 800aa40:	08011490 	.word	0x08011490
 800aa44:	080114a0 	.word	0x080114a0
 800aa48:	080114b8 	.word	0x080114b8

0800aa4c <getElecAngle>:

void getElecAngle(BldcMotor *motor)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
    motor->angle_el = _normalizeAngle(motor->magEncoder.direction * motor->pole_pairs * motor->magEncoder.shaftAngle - motor->zeroElectricAngleOffSet);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800aa62:	fb02 f303 	mul.w	r3, r2, r3
 800aa66:	ee07 3a90 	vmov	s15, r3
 800aa6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	edd3 7a04 	vldr	s15, [r3, #16]
 800aa74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800aa7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa82:	eeb0 0a67 	vmov.f32	s0, s15
 800aa86:	f000 fd47 	bl	800b518 <_normalizeAngle>
 800aa8a:	eef0 7a40 	vmov.f32	s15, s0
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
}
 800aa94:	bf00      	nop
 800aa96:	3708      	adds	r7, #8
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <foc>:

void foc(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b088      	sub	sp, #32
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	607a      	str	r2, [r7, #4]

    if (motor->state == MOTOR_CALIBRATE)
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d10d      	bne.n	800aace <foc+0x32>
    {
        getCurrentOffsets(motor, adc_a, adc_b, 100);
 800aab2:	2364      	movs	r3, #100	@ 0x64
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	68b9      	ldr	r1, [r7, #8]
 800aab8:	68f8      	ldr	r0, [r7, #12]
 800aaba:	f000 f999 	bl	800adf0 <getCurrentOffsets>
        alignSensor(motor);
 800aabe:	68f8      	ldr	r0, [r7, #12]
 800aac0:	f7ff feaa 	bl	800a818 <alignSensor>
        motor->state = MOTOR_READY;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2201      	movs	r2, #1
 800aac8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                break;
            }
            setTorque(motor, motor->Uq, motor->Ud, motor->angle_el);
        }
    }
}
 800aacc:	e183      	b.n	800add6 <foc+0x33a>
        getPhaseCurrents(motor, adc_a, adc_b);
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	68b9      	ldr	r1, [r7, #8]
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f000 fa5c 	bl	800af90 <getPhaseCurrents>
        getABCurrents(motor);
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f000 fae9 	bl	800b0b0 <getABCurrents>
        getDQCurrents(motor);
 800aade:	68f8      	ldr	r0, [r7, #12]
 800aae0:	f000 fb0c 	bl	800b0fc <getDQCurrents>
        motor->Iq = lpfOperator(&motor->IqFilter, motor->Iq);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f103 02f0 	add.w	r2, r3, #240	@ 0xf0
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800aaf0:	eeb0 0a67 	vmov.f32	s0, s15
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	f000 fc05 	bl	800b304 <lpfOperator>
 800aafa:	eef0 7a40 	vmov.f32	s15, s0
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
        motor->Id = lpfOperator(&motor->IdFilter, motor->Id);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f103 02fc 	add.w	r2, r3, #252	@ 0xfc
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800ab10:	eeb0 0a67 	vmov.f32	s0, s15
 800ab14:	4610      	mov	r0, r2
 800ab16:	f000 fbf5 	bl	800b304 <lpfOperator>
 800ab1a:	eef0 7a40 	vmov.f32	s15, s0
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
        encoderUpdate(&motor->magEncoder);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	4618      	mov	r0, r3
 800ab28:	f000 fb54 	bl	800b1d4 <encoderUpdate>
        motor->magEncoder.velocity = lpfOperator(&motor->velocityFilter, motor->magEncoder.velocity);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f503 7284 	add.w	r2, r3, #264	@ 0x108
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	edd3 7a06 	vldr	s15, [r3, #24]
 800ab38:	eeb0 0a67 	vmov.f32	s0, s15
 800ab3c:	4610      	mov	r0, r2
 800ab3e:	f000 fbe1 	bl	800b304 <lpfOperator>
 800ab42:	eef0 7a40 	vmov.f32	s15, s0
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	edc3 7a06 	vstr	s15, [r3, #24]
        getElecAngle(motor);
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	f7ff ff7d 	bl	800aa4c <getElecAngle>
            switch (motor->controlType)
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800ab58:	2b03      	cmp	r3, #3
 800ab5a:	f200 812a 	bhi.w	800adb2 <foc+0x316>
 800ab5e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab64 <foc+0xc8>)
 800ab60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab64:	0800ab75 	.word	0x0800ab75
 800ab68:	0800abdb 	.word	0x0800abdb
 800ab6c:	0800ac31 	.word	0x0800ac31
 800ab70:	0800ace1 	.word	0x0800ace1
                if (motor->torqueType == VOLTAGE)
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d104      	bne.n	800ab88 <foc+0xec>
                    motor->Uq = UqMAX; // motor->target;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	4a97      	ldr	r2, [pc, #604]	@ (800ade0 <foc+0x344>)
 800ab82:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                break;
 800ab86:	e114      	b.n	800adb2 <foc+0x316>
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800ab94:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 800ade4 <foc+0x348>
 800ab98:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab9c:	eeb0 0a67 	vmov.f32	s0, s15
 800aba0:	4610      	mov	r0, r2
 800aba2:	f000 fd39 	bl	800b618 <pidOperator>
 800aba6:	eef0 7a40 	vmov.f32	s15, s0
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114
                    motor->Uq = pidOperator(&motor->pidIq, 0.8f - motor->Iq);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800abbc:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 800ade8 <foc+0x34c>
 800abc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abc4:	eeb0 0a67 	vmov.f32	s0, s15
 800abc8:	4610      	mov	r0, r2
 800abca:	f000 fd25 	bl	800b618 <pidOperator>
 800abce:	eef0 7a40 	vmov.f32	s15, s0
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                break;
 800abd8:	e0eb      	b.n	800adb2 <foc+0x316>
                shaftAngle = _normalizeAngle(shaftAngle + motor->target * motor->Ts);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800abe6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abea:	4b80      	ldr	r3, [pc, #512]	@ (800adec <foc+0x350>)
 800abec:	edd3 7a00 	vldr	s15, [r3]
 800abf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abf4:	eeb0 0a67 	vmov.f32	s0, s15
 800abf8:	f000 fc8e 	bl	800b518 <_normalizeAngle>
 800abfc:	eef0 7a40 	vmov.f32	s15, s0
 800ac00:	4b7a      	ldr	r3, [pc, #488]	@ (800adec <foc+0x350>)
 800ac02:	edc3 7a00 	vstr	s15, [r3]
                motor->angle_el = _electricalAngle(shaftAngle, motor->pole_pairs);
 800ac06:	4b79      	ldr	r3, [pc, #484]	@ (800adec <foc+0x350>)
 800ac08:	edd3 7a00 	vldr	s15, [r3]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ac12:	4618      	mov	r0, r3
 800ac14:	eeb0 0a67 	vmov.f32	s0, s15
 800ac18:	f000 fcb4 	bl	800b584 <_electricalAngle>
 800ac1c:	eef0 7a40 	vmov.f32	s15, s0
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                motor->Uq = UqMAX;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	4a6d      	ldr	r2, [pc, #436]	@ (800ade0 <foc+0x344>)
 800ac2a:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                break;
 800ac2e:	e0c0      	b.n	800adb2 <foc+0x316>
                if (motor->torqueType == VOLTAGE)
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d116      	bne.n	800ac68 <foc+0x1cc>
                    velocityErr = motor->target - motor->magEncoder.velocity;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	edd3 7a06 	vldr	s15, [r3, #24]
 800ac46:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac4a:	edc7 7a04 	vstr	s15, [r7, #16]
                    motor->Uq = pidOperator(&motor->velocityPID, velocityErr);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	33a8      	adds	r3, #168	@ 0xa8
 800ac52:	ed97 0a04 	vldr	s0, [r7, #16]
 800ac56:	4618      	mov	r0, r3
 800ac58:	f000 fcde 	bl	800b618 <pidOperator>
 800ac5c:	eef0 7a40 	vmov.f32	s15, s0
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                break;
 800ac66:	e0a4      	b.n	800adb2 <foc+0x316>
                    velocityErr = motor->target - motor->magEncoder.velocity;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	edd3 7a06 	vldr	s15, [r3, #24]
 800ac74:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac78:	edc7 7a04 	vstr	s15, [r7, #16]
                    IqRef = pidOperator(&motor->velocityPID, velocityErr);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	33a8      	adds	r3, #168	@ 0xa8
 800ac80:	ed97 0a04 	vldr	s0, [r7, #16]
 800ac84:	4618      	mov	r0, r3
 800ac86:	f000 fcc7 	bl	800b618 <pidOperator>
 800ac8a:	ed87 0a05 	vstr	s0, [r7, #20]
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800ac9a:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800ade4 <foc+0x348>
 800ac9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aca2:	eeb0 0a67 	vmov.f32	s0, s15
 800aca6:	4610      	mov	r0, r2
 800aca8:	f000 fcb6 	bl	800b618 <pidOperator>
 800acac:	eef0 7a40 	vmov.f32	s15, s0
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114
                    motor->Uq = pidOperator(&motor->pidIq, IqRef - motor->Iq);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800acc2:	ed97 7a05 	vldr	s14, [r7, #20]
 800acc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acca:	eeb0 0a67 	vmov.f32	s0, s15
 800acce:	4610      	mov	r0, r2
 800acd0:	f000 fca2 	bl	800b618 <pidOperator>
 800acd4:	eef0 7a40 	vmov.f32	s15, s0
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                break;
 800acde:	e068      	b.n	800adb2 <foc+0x316>
                if (motor->torqueType == VOLTAGE)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d116      	bne.n	800ad18 <foc+0x27c>
                    angleErr = motor->target - motor->magEncoder.fullAngle;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	edd3 7a05 	vldr	s15, [r3, #20]
 800acf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acfa:	edc7 7a07 	vstr	s15, [r7, #28]
                    motor->Uq = pidOperator(&motor->anglePID, angleErr);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	33cc      	adds	r3, #204	@ 0xcc
 800ad02:	ed97 0a07 	vldr	s0, [r7, #28]
 800ad06:	4618      	mov	r0, r3
 800ad08:	f000 fc86 	bl	800b618 <pidOperator>
 800ad0c:	eef0 7a40 	vmov.f32	s15, s0
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                break;
 800ad16:	e04b      	b.n	800adb0 <foc+0x314>
                    angleErr = motor->target - motor->magEncoder.fullAngle;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	edd3 7a05 	vldr	s15, [r3, #20]
 800ad24:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad28:	edc7 7a07 	vstr	s15, [r7, #28]
                    velocityRef = pidOperator(&motor->anglePID, angleErr);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	33cc      	adds	r3, #204	@ 0xcc
 800ad30:	ed97 0a07 	vldr	s0, [r7, #28]
 800ad34:	4618      	mov	r0, r3
 800ad36:	f000 fc6f 	bl	800b618 <pidOperator>
 800ad3a:	ed87 0a06 	vstr	s0, [r7, #24]
                    IqRef = pidOperator(&motor->velocityPID, velocityRef - motor->magEncoder.velocity);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	edd3 7a06 	vldr	s15, [r3, #24]
 800ad4a:	ed97 7a06 	vldr	s14, [r7, #24]
 800ad4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad52:	eeb0 0a67 	vmov.f32	s0, s15
 800ad56:	4610      	mov	r0, r2
 800ad58:	f000 fc5e 	bl	800b618 <pidOperator>
 800ad5c:	ed87 0a05 	vstr	s0, [r7, #20]
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800ad6c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800ade4 <foc+0x348>
 800ad70:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad74:	eeb0 0a67 	vmov.f32	s0, s15
 800ad78:	4610      	mov	r0, r2
 800ad7a:	f000 fc4d 	bl	800b618 <pidOperator>
 800ad7e:	eef0 7a40 	vmov.f32	s15, s0
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114
                    motor->Uq = pidOperator(&motor->pidIq, IqRef - motor->Iq);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800ad94:	ed97 7a05 	vldr	s14, [r7, #20]
 800ad98:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad9c:	eeb0 0a67 	vmov.f32	s0, s15
 800ada0:	4610      	mov	r0, r2
 800ada2:	f000 fc39 	bl	800b618 <pidOperator>
 800ada6:	eef0 7a40 	vmov.f32	s15, s0
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                break;
 800adb0:	bf00      	nop
            setTorque(motor, motor->Uq, motor->Ud, motor->angle_el);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	edd3 7a46 	vldr	s15, [r3, #280]	@ 0x118
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	ed93 7a45 	vldr	s14, [r3, #276]	@ 0x114
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800adc4:	eeb0 1a66 	vmov.f32	s2, s13
 800adc8:	eef0 0a47 	vmov.f32	s1, s14
 800adcc:	eeb0 0a67 	vmov.f32	s0, s15
 800add0:	68f8      	ldr	r0, [r7, #12]
 800add2:	f000 fd29 	bl	800b828 <setTorque>
}
 800add6:	bf00      	nop
 800add8:	3720      	adds	r7, #32
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	40ddb3d7 	.word	0x40ddb3d7
 800ade4:	00000000 	.word	0x00000000
 800ade8:	3f4ccccd 	.word	0x3f4ccccd
 800adec:	20000674 	.word	0x20000674

0800adf0 <getCurrentOffsets>:
#include "math_utils.h"
#include "comm.h"

// Function finding zero offsets of the ADC
void getCurrentOffsets(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b, uint32_t rounds)
{
 800adf0:	b5b0      	push	{r4, r5, r7, lr}
 800adf2:	b086      	sub	sp, #24
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	607a      	str	r2, [r7, #4]
 800adfc:	603b      	str	r3, [r7, #0]
    // find adc offset = zero current voltage
    motor->offset_ia = 0;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f04f 0200 	mov.w	r2, #0
 800ae04:	641a      	str	r2, [r3, #64]	@ 0x40
    motor->offset_ib = 0;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f04f 0200 	mov.w	r2, #0
 800ae0c:	645a      	str	r2, [r3, #68]	@ 0x44
    // read the adc voltage  times ( arbitrary number )
    for (int i = 0; i < rounds; i++)
 800ae0e:	2300      	movs	r3, #0
 800ae10:	617b      	str	r3, [r7, #20]
 800ae12:	e076      	b.n	800af02 <getCurrentOffsets+0x112>
    {
        motor->offset_ia += ADC_2_CURRENT(adc_a);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7f5 fbbd 	bl	8000598 <__aeabi_f2d>
 800ae1e:	4604      	mov	r4, r0
 800ae20:	460d      	mov	r5, r1
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	ee07 3a90 	vmov	s15, r3
 800ae28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae2c:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 800af80 <getCurrentOffsets+0x190>
 800ae30:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae34:	ee17 0a90 	vmov	r0, s15
 800ae38:	f7f5 fbae 	bl	8000598 <__aeabi_f2d>
 800ae3c:	a34c      	add	r3, pc, #304	@ (adr r3, 800af70 <getCurrentOffsets+0x180>)
 800ae3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae42:	f7f5 fd2b 	bl	800089c <__aeabi_ddiv>
 800ae46:	4602      	mov	r2, r0
 800ae48:	460b      	mov	r3, r1
 800ae4a:	4610      	mov	r0, r2
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	a34a      	add	r3, pc, #296	@ (adr r3, 800af78 <getCurrentOffsets+0x188>)
 800ae50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae54:	f7f5 fd22 	bl	800089c <__aeabi_ddiv>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	4610      	mov	r0, r2
 800ae5e:	4619      	mov	r1, r3
 800ae60:	f04f 0200 	mov.w	r2, #0
 800ae64:	4b47      	ldr	r3, [pc, #284]	@ (800af84 <getCurrentOffsets+0x194>)
 800ae66:	f7f5 fd19 	bl	800089c <__aeabi_ddiv>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	4620      	mov	r0, r4
 800ae70:	4629      	mov	r1, r5
 800ae72:	f7f5 fa33 	bl	80002dc <__adddf3>
 800ae76:	4602      	mov	r2, r0
 800ae78:	460b      	mov	r3, r1
 800ae7a:	4610      	mov	r0, r2
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	f7f5 fedb 	bl	8000c38 <__aeabi_d2f>
 800ae82:	4602      	mov	r2, r0
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	641a      	str	r2, [r3, #64]	@ 0x40
        motor->offset_ib += ADC_2_CURRENT(adc_b);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7f5 fb83 	bl	8000598 <__aeabi_f2d>
 800ae92:	4604      	mov	r4, r0
 800ae94:	460d      	mov	r5, r1
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	ee07 3a90 	vmov	s15, r3
 800ae9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aea0:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800af80 <getCurrentOffsets+0x190>
 800aea4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aea8:	ee17 0a90 	vmov	r0, s15
 800aeac:	f7f5 fb74 	bl	8000598 <__aeabi_f2d>
 800aeb0:	a32f      	add	r3, pc, #188	@ (adr r3, 800af70 <getCurrentOffsets+0x180>)
 800aeb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb6:	f7f5 fcf1 	bl	800089c <__aeabi_ddiv>
 800aeba:	4602      	mov	r2, r0
 800aebc:	460b      	mov	r3, r1
 800aebe:	4610      	mov	r0, r2
 800aec0:	4619      	mov	r1, r3
 800aec2:	a32d      	add	r3, pc, #180	@ (adr r3, 800af78 <getCurrentOffsets+0x188>)
 800aec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec8:	f7f5 fce8 	bl	800089c <__aeabi_ddiv>
 800aecc:	4602      	mov	r2, r0
 800aece:	460b      	mov	r3, r1
 800aed0:	4610      	mov	r0, r2
 800aed2:	4619      	mov	r1, r3
 800aed4:	f04f 0200 	mov.w	r2, #0
 800aed8:	4b2a      	ldr	r3, [pc, #168]	@ (800af84 <getCurrentOffsets+0x194>)
 800aeda:	f7f5 fcdf 	bl	800089c <__aeabi_ddiv>
 800aede:	4602      	mov	r2, r0
 800aee0:	460b      	mov	r3, r1
 800aee2:	4620      	mov	r0, r4
 800aee4:	4629      	mov	r1, r5
 800aee6:	f7f5 f9f9 	bl	80002dc <__adddf3>
 800aeea:	4602      	mov	r2, r0
 800aeec:	460b      	mov	r3, r1
 800aeee:	4610      	mov	r0, r2
 800aef0:	4619      	mov	r1, r3
 800aef2:	f7f5 fea1 	bl	8000c38 <__aeabi_d2f>
 800aef6:	4602      	mov	r2, r0
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	645a      	str	r2, [r3, #68]	@ 0x44
    for (int i = 0; i < rounds; i++)
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	3301      	adds	r3, #1
 800af00:	617b      	str	r3, [r7, #20]
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	683a      	ldr	r2, [r7, #0]
 800af06:	429a      	cmp	r2, r3
 800af08:	d884      	bhi.n	800ae14 <getCurrentOffsets+0x24>
    }
    // calculate the mean offsets
    motor->offset_ia = motor->offset_ia / rounds;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	ee07 3a90 	vmov	s15, r3
 800af16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800af1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    motor->offset_ib = motor->offset_ib / rounds;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	ee07 3a90 	vmov	s15, r3
 800af30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800af34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    // FOC_log("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
    // printf("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
    FOC_log("[offset_ia]:%f\r\n", motor->offset_ia);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af42:	4618      	mov	r0, r3
 800af44:	f7f5 fb28 	bl	8000598 <__aeabi_f2d>
 800af48:	4602      	mov	r2, r0
 800af4a:	460b      	mov	r3, r1
 800af4c:	480e      	ldr	r0, [pc, #56]	@ (800af88 <getCurrentOffsets+0x198>)
 800af4e:	f001 f891 	bl	800c074 <FOC_log>
    FOC_log("[offset_ib]:%f\r\n", motor->offset_ib);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af56:	4618      	mov	r0, r3
 800af58:	f7f5 fb1e 	bl	8000598 <__aeabi_f2d>
 800af5c:	4602      	mov	r2, r0
 800af5e:	460b      	mov	r3, r1
 800af60:	480a      	ldr	r0, [pc, #40]	@ (800af8c <getCurrentOffsets+0x19c>)
 800af62:	f001 f887 	bl	800c074 <FOC_log>
    // _dbg_printf("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
}
 800af66:	bf00      	nop
 800af68:	3718      	adds	r7, #24
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bdb0      	pop	{r4, r5, r7, pc}
 800af6e:	bf00      	nop
 800af70:	00000000 	.word	0x00000000
 800af74:	40affe00 	.word	0x40affe00
 800af78:	40000000 	.word	0x40000000
 800af7c:	3f847ae1 	.word	0x3f847ae1
 800af80:	40533333 	.word	0x40533333
 800af84:	40240000 	.word	0x40240000
 800af88:	080114c8 	.word	0x080114c8
 800af8c:	080114dc 	.word	0x080114dc

0800af90 <getPhaseCurrents>:

// read all three phase currents (if possible 2 or 3)
void getPhaseCurrents(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800af90:	b5b0      	push	{r4, r5, r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	607a      	str	r2, [r7, #4]
    motor->Ia = ADC_2_CURRENT(adc_a) - motor->offset_ia; // amps
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	ee07 3a90 	vmov	s15, r3
 800afa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afa6:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 800b0a8 <getPhaseCurrents+0x118>
 800afaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800afae:	ee17 0a90 	vmov	r0, s15
 800afb2:	f7f5 faf1 	bl	8000598 <__aeabi_f2d>
 800afb6:	a338      	add	r3, pc, #224	@ (adr r3, 800b098 <getPhaseCurrents+0x108>)
 800afb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afbc:	f7f5 fc6e 	bl	800089c <__aeabi_ddiv>
 800afc0:	4602      	mov	r2, r0
 800afc2:	460b      	mov	r3, r1
 800afc4:	4610      	mov	r0, r2
 800afc6:	4619      	mov	r1, r3
 800afc8:	a335      	add	r3, pc, #212	@ (adr r3, 800b0a0 <getPhaseCurrents+0x110>)
 800afca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afce:	f7f5 fc65 	bl	800089c <__aeabi_ddiv>
 800afd2:	4602      	mov	r2, r0
 800afd4:	460b      	mov	r3, r1
 800afd6:	4610      	mov	r0, r2
 800afd8:	4619      	mov	r1, r3
 800afda:	f04f 0200 	mov.w	r2, #0
 800afde:	4b33      	ldr	r3, [pc, #204]	@ (800b0ac <getPhaseCurrents+0x11c>)
 800afe0:	f7f5 fc5c 	bl	800089c <__aeabi_ddiv>
 800afe4:	4602      	mov	r2, r0
 800afe6:	460b      	mov	r3, r1
 800afe8:	4614      	mov	r4, r2
 800afea:	461d      	mov	r5, r3
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7f5 fad1 	bl	8000598 <__aeabi_f2d>
 800aff6:	4602      	mov	r2, r0
 800aff8:	460b      	mov	r3, r1
 800affa:	4620      	mov	r0, r4
 800affc:	4629      	mov	r1, r5
 800affe:	f7f5 f96b 	bl	80002d8 <__aeabi_dsub>
 800b002:	4602      	mov	r2, r0
 800b004:	460b      	mov	r3, r1
 800b006:	4610      	mov	r0, r2
 800b008:	4619      	mov	r1, r3
 800b00a:	f7f5 fe15 	bl	8000c38 <__aeabi_d2f>
 800b00e:	4602      	mov	r2, r0
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	649a      	str	r2, [r3, #72]	@ 0x48
    motor->Ib = ADC_2_CURRENT(adc_b) - motor->offset_ib;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	ee07 3a90 	vmov	s15, r3
 800b01a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b01e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800b0a8 <getPhaseCurrents+0x118>
 800b022:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b026:	ee17 0a90 	vmov	r0, s15
 800b02a:	f7f5 fab5 	bl	8000598 <__aeabi_f2d>
 800b02e:	a31a      	add	r3, pc, #104	@ (adr r3, 800b098 <getPhaseCurrents+0x108>)
 800b030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b034:	f7f5 fc32 	bl	800089c <__aeabi_ddiv>
 800b038:	4602      	mov	r2, r0
 800b03a:	460b      	mov	r3, r1
 800b03c:	4610      	mov	r0, r2
 800b03e:	4619      	mov	r1, r3
 800b040:	a317      	add	r3, pc, #92	@ (adr r3, 800b0a0 <getPhaseCurrents+0x110>)
 800b042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b046:	f7f5 fc29 	bl	800089c <__aeabi_ddiv>
 800b04a:	4602      	mov	r2, r0
 800b04c:	460b      	mov	r3, r1
 800b04e:	4610      	mov	r0, r2
 800b050:	4619      	mov	r1, r3
 800b052:	f04f 0200 	mov.w	r2, #0
 800b056:	4b15      	ldr	r3, [pc, #84]	@ (800b0ac <getPhaseCurrents+0x11c>)
 800b058:	f7f5 fc20 	bl	800089c <__aeabi_ddiv>
 800b05c:	4602      	mov	r2, r0
 800b05e:	460b      	mov	r3, r1
 800b060:	4614      	mov	r4, r2
 800b062:	461d      	mov	r5, r3
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b068:	4618      	mov	r0, r3
 800b06a:	f7f5 fa95 	bl	8000598 <__aeabi_f2d>
 800b06e:	4602      	mov	r2, r0
 800b070:	460b      	mov	r3, r1
 800b072:	4620      	mov	r0, r4
 800b074:	4629      	mov	r1, r5
 800b076:	f7f5 f92f 	bl	80002d8 <__aeabi_dsub>
 800b07a:	4602      	mov	r2, r0
 800b07c:	460b      	mov	r3, r1
 800b07e:	4610      	mov	r0, r2
 800b080:	4619      	mov	r1, r3
 800b082:	f7f5 fdd9 	bl	8000c38 <__aeabi_d2f>
 800b086:	4602      	mov	r2, r0
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800b08c:	bf00      	nop
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bdb0      	pop	{r4, r5, r7, pc}
 800b094:	f3af 8000 	nop.w
 800b098:	00000000 	.word	0x00000000
 800b09c:	40affe00 	.word	0x40affe00
 800b0a0:	40000000 	.word	0x40000000
 800b0a4:	3f847ae1 	.word	0x3f847ae1
 800b0a8:	40533333 	.word	0x40533333
 800b0ac:	40240000 	.word	0x40240000

0800b0b0 <getABCurrents>:
// Ibeta = 1/sqrt(3) * Ia + 1/sqrt(3) * 2Ib
/*============================================================================*/
//   calculating Alpha Beta currents from phase currents
//   - function calculating Clarke transform of the phase currents
void getABCurrents(BldcMotor *motor)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
    motor->Ialpha = motor->Ia;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	651a      	str	r2, [r3, #80]	@ 0x50
    motor->Ibeta = _1_SQRT3 * motor->Ia + _2_SQRT3 * motor->Ib;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800b0c6:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800b0f4 <getABCurrents+0x44>
 800b0ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800b0d4:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800b0f8 <getABCurrents+0x48>
 800b0d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b0dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
}
 800b0e6:	bf00      	nop
 800b0e8:	370c      	adds	r7, #12
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr
 800b0f2:	bf00      	nop
 800b0f4:	3f13cd3a 	.word	0x3f13cd3a
 800b0f8:	3f93cd3a 	.word	0x3f93cd3a

0800b0fc <getDQCurrents>:
/*============================================================================*/
// function used with the foc algorihtm
//   calculating D and Q currents from Alpha Beta currents and electrical angle
//   - function calculating Clarke transform of the phase currents
void getDQCurrents(BldcMotor *motor)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
    float ct;
    float st;
    _sincos(motor->angle_el, &st, &ct);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800b10a:	f107 020c 	add.w	r2, r7, #12
 800b10e:	f107 0308 	add.w	r3, r7, #8
 800b112:	4611      	mov	r1, r2
 800b114:	4618      	mov	r0, r3
 800b116:	eeb0 0a67 	vmov.f32	s0, s15
 800b11a:	f000 f9dd 	bl	800b4d8 <_sincos>
    motor->Id = motor->Ialpha * ct + motor->Ibeta * st;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 800b124:	edd7 7a03 	vldr	s15, [r7, #12]
 800b128:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 800b132:	edd7 7a02 	vldr	s15, [r7, #8]
 800b136:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b13a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
    motor->Iq = motor->Ibeta * ct - motor->Ialpha * st;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 800b14a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b14e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 800b158:	edd7 7a02 	vldr	s15, [r7, #8]
 800b15c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b160:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
 800b16a:	bf00      	nop
 800b16c:	3710      	adds	r7, #16
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <encoderInit>:

#include "encoder.h"
#include "math_utils.h"
void encoderInit(MagEncoder *encoder, float _Ts, float (*_getRawAngle)(void))
{
 800b172:	b480      	push	{r7}
 800b174:	b085      	sub	sp, #20
 800b176:	af00      	add	r7, sp, #0
 800b178:	60f8      	str	r0, [r7, #12]
 800b17a:	ed87 0a02 	vstr	s0, [r7, #8]
 800b17e:	6079      	str	r1, [r7, #4]
    encoder->angle_prev = 0;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f04f 0200 	mov.w	r2, #0
 800b186:	601a      	str	r2, [r3, #0]
    encoder->vel_angle_prev = 0;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f04f 0200 	mov.w	r2, #0
 800b18e:	605a      	str	r2, [r3, #4]
    encoder->full_rotations = 0;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2200      	movs	r2, #0
 800b194:	609a      	str	r2, [r3, #8]
    encoder->vel_full_rotations = 0;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2200      	movs	r2, #0
 800b19a:	60da      	str	r2, [r3, #12]
    encoder->shaftAngle = 0;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f04f 0200 	mov.w	r2, #0
 800b1a2:	611a      	str	r2, [r3, #16]
    encoder->fullAngle = 0;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f04f 0200 	mov.w	r2, #0
 800b1aa:	615a      	str	r2, [r3, #20]
    encoder->velocity = 0;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f04f 0200 	mov.w	r2, #0
 800b1b2:	619a      	str	r2, [r3, #24]
    encoder->Ts = _Ts;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	68ba      	ldr	r2, [r7, #8]
 800b1b8:	61da      	str	r2, [r3, #28]
    encoder->getRawAngle = _getRawAngle;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	625a      	str	r2, [r3, #36]	@ 0x24
    encoder->direction = UNKNOWN;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f883 2020 	strb.w	r2, [r3, #32]
}
 800b1c8:	bf00      	nop
 800b1ca:	3714      	adds	r7, #20
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr

0800b1d4 <encoderUpdate>:

void encoderUpdate(MagEncoder *encoder)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
    float val = encoder->getRawAngle();
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1e0:	4798      	blx	r3
 800b1e2:	ed87 0a03 	vstr	s0, [r7, #12]

    float d_angle = val - encoder->angle_prev;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	edd3 7a00 	vldr	s15, [r3]
 800b1ec:	ed97 7a03 	vldr	s14, [r7, #12]
 800b1f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1f4:	edc7 7a02 	vstr	s15, [r7, #8]
    // 圈数检测
    if (abs(d_angle) > (0.8f * _2PI))
 800b1f8:	edd7 7a02 	vldr	s15, [r7, #8]
 800b1fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b200:	ee17 3a90 	vmov	r3, s15
 800b204:	2b00      	cmp	r3, #0
 800b206:	bfb8      	it	lt
 800b208:	425b      	neglt	r3, r3
 800b20a:	ee07 3a90 	vmov	s15, r3
 800b20e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b212:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800b2cc <encoderUpdate+0xf8>
 800b216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b21e:	dd0f      	ble.n	800b240 <encoderUpdate+0x6c>
        encoder->full_rotations += (d_angle > 0) ? -1 : 1;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	689b      	ldr	r3, [r3, #8]
 800b224:	edd7 7a02 	vldr	s15, [r7, #8]
 800b228:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b22c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b230:	dd02      	ble.n	800b238 <encoderUpdate+0x64>
 800b232:	f04f 32ff 	mov.w	r2, #4294967295
 800b236:	e000      	b.n	800b23a <encoderUpdate+0x66>
 800b238:	2201      	movs	r2, #1
 800b23a:	441a      	add	r2, r3
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	609a      	str	r2, [r3, #8]

    // angle
    encoder->angle_prev = val;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	68fa      	ldr	r2, [r7, #12]
 800b244:	601a      	str	r2, [r3, #0]
    encoder->shaftAngle = val;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	68fa      	ldr	r2, [r7, #12]
 800b24a:	611a      	str	r2, [r3, #16]
    encoder->fullAngle = (float)encoder->full_rotations * _2PI + encoder->angle_prev;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	ee07 3a90 	vmov	s15, r3
 800b254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b258:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800b2d0 <encoderUpdate+0xfc>
 800b25c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	edd3 7a00 	vldr	s15, [r3]
 800b266:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	edc3 7a05 	vstr	s15, [r3, #20]

    // 速度计算
    val = ((float)(encoder->full_rotations - encoder->vel_full_rotations) * _2PI + (encoder->angle_prev - encoder->vel_angle_prev)) / encoder->Ts;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	689a      	ldr	r2, [r3, #8]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	1ad3      	subs	r3, r2, r3
 800b27a:	ee07 3a90 	vmov	s15, r3
 800b27e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b282:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800b2d0 <encoderUpdate+0xfc>
 800b286:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	edd3 6a00 	vldr	s13, [r3]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	edd3 7a01 	vldr	s15, [r3, #4]
 800b296:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b29a:	ee77 6a27 	vadd.f32	s13, s14, s15
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	ed93 7a07 	vldr	s14, [r3, #28]
 800b2a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2a8:	edc7 7a03 	vstr	s15, [r7, #12]
    // 保存变量以待将来使用
    encoder->vel_angle_prev = encoder->angle_prev;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	605a      	str	r2, [r3, #4]
    encoder->vel_full_rotations = encoder->full_rotations;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	689a      	ldr	r2, [r3, #8]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	60da      	str	r2, [r3, #12]
    encoder->velocity = val;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	68fa      	ldr	r2, [r7, #12]
 800b2c0:	619a      	str	r2, [r3, #24]
}
 800b2c2:	bf00      	nop
 800b2c4:	3710      	adds	r7, #16
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	40a0d97c 	.word	0x40a0d97c
 800b2d0:	40c90fdb 	.word	0x40c90fdb

0800b2d4 <lpfInit>:
#include "lowpass_filter.h"

void lpfInit(LowPassFilter *filter, const float _Tf, const float _dt)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b085      	sub	sp, #20
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	ed87 0a02 	vstr	s0, [r7, #8]
 800b2e0:	edc7 0a01 	vstr	s1, [r7, #4]
    filter->Tf = _Tf;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	68ba      	ldr	r2, [r7, #8]
 800b2e8:	601a      	str	r2, [r3, #0]
    filter->dt = _dt;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	687a      	ldr	r2, [r7, #4]
 800b2ee:	605a      	str	r2, [r3, #4]
    filter->y_prev = 0;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f04f 0200 	mov.w	r2, #0
 800b2f6:	609a      	str	r2, [r3, #8]
}
 800b2f8:	bf00      	nop
 800b2fa:	3714      	adds	r7, #20
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <lpfOperator>:

float lpfOperator(LowPassFilter *filter, float x)
{
 800b304:	b480      	push	{r7}
 800b306:	b085      	sub	sp, #20
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	ed87 0a00 	vstr	s0, [r7]

    float alpha = filter->Tf / (filter->Tf + filter->dt);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	edd3 6a00 	vldr	s13, [r3]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	ed93 7a00 	vldr	s14, [r3]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	edd3 7a01 	vldr	s15, [r3, #4]
 800b322:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b32a:	edc7 7a03 	vstr	s15, [r7, #12]
    float y = alpha * filter->y_prev + (1.0f - alpha) * x;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	ed93 7a02 	vldr	s14, [r3, #8]
 800b334:	edd7 7a03 	vldr	s15, [r7, #12]
 800b338:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b33c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b340:	edd7 7a03 	vldr	s15, [r7, #12]
 800b344:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b348:	edd7 7a00 	vldr	s15, [r7]
 800b34c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b350:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b354:	edc7 7a02 	vstr	s15, [r7, #8]
    filter->y_prev = y;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	68ba      	ldr	r2, [r7, #8]
 800b35c:	609a      	str	r2, [r3, #8]

    return y;
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	ee07 3a90 	vmov	s15, r3
}
 800b364:	eeb0 0a67 	vmov.f32	s0, s15
 800b368:	3714      	adds	r7, #20
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr
 800b372:	0000      	movs	r0, r0
 800b374:	0000      	movs	r0, r0
	...

0800b378 <_sin>:

// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b086      	sub	sp, #24
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0, 804, 1608, 2411, 3212, 4011, 4808, 5602, 6393, 7180, 7962, 8740, 9512, 10279, 11039, 11793, 12540, 13279, 14010, 14733, 15447, 16151, 16846, 17531, 18205, 18868, 19520, 20160, 20788, 21403, 22006, 22595, 23170, 23732, 24279, 24812, 25330, 25833, 26320, 26791, 27246, 27684, 28106, 28511, 28899, 29269, 29622, 29957, 30274, 30572, 30853, 31114, 31357, 31581, 31786, 31972, 32138, 32286, 32413, 32522, 32610, 32679, 32729, 32758, 32768};
  unsigned int i = (unsigned int)(a * (64 * 4 * 256.0 / _2PI));
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f7f5 f908 	bl	8000598 <__aeabi_f2d>
 800b388:	a339      	add	r3, pc, #228	@ (adr r3, 800b470 <_sin+0xf8>)
 800b38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38e:	f7f5 f95b 	bl	8000648 <__aeabi_dmul>
 800b392:	4602      	mov	r2, r0
 800b394:	460b      	mov	r3, r1
 800b396:	4610      	mov	r0, r2
 800b398:	4619      	mov	r1, r3
 800b39a:	f7f5 fc2d 	bl	8000bf8 <__aeabi_d2uiz>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	0a1b      	lsrs	r3, r3, #8
 800b3ac:	b2db      	uxtb	r3, r3
 800b3ae:	60fb      	str	r3, [r7, #12]
  if (i < 64)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2b3f      	cmp	r3, #63	@ 0x3f
 800b3b4:	d80b      	bhi.n	800b3ce <_sin+0x56>
  {
    t1 = sine_array[i];
 800b3b6:	4a2c      	ldr	r2, [pc, #176]	@ (800b468 <_sin+0xf0>)
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3be:	617b      	str	r3, [r7, #20]
    t2 = sine_array[i + 1];
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	4a28      	ldr	r2, [pc, #160]	@ (800b468 <_sin+0xf0>)
 800b3c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3ca:	613b      	str	r3, [r7, #16]
 800b3cc:	e033      	b.n	800b436 <_sin+0xbe>
  }
  else if (i < 128)
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2b7f      	cmp	r3, #127	@ 0x7f
 800b3d2:	d80e      	bhi.n	800b3f2 <_sin+0x7a>
  {
    t1 = sine_array[128 - i];
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800b3da:	4a23      	ldr	r2, [pc, #140]	@ (800b468 <_sin+0xf0>)
 800b3dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3e0:	617b      	str	r3, [r7, #20]
    t2 = sine_array[127 - i];
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800b3e8:	4a1f      	ldr	r2, [pc, #124]	@ (800b468 <_sin+0xf0>)
 800b3ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3ee:	613b      	str	r3, [r7, #16]
 800b3f0:	e021      	b.n	800b436 <_sin+0xbe>
  }
  else if (i < 192)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2bbf      	cmp	r3, #191	@ 0xbf
 800b3f6:	d80e      	bhi.n	800b416 <_sin+0x9e>
  {
    t1 = -sine_array[-128 + i];
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	3b80      	subs	r3, #128	@ 0x80
 800b3fc:	4a1a      	ldr	r2, [pc, #104]	@ (800b468 <_sin+0xf0>)
 800b3fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b402:	425b      	negs	r3, r3
 800b404:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[-127 + i];
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	3b7f      	subs	r3, #127	@ 0x7f
 800b40a:	4a17      	ldr	r2, [pc, #92]	@ (800b468 <_sin+0xf0>)
 800b40c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b410:	425b      	negs	r3, r3
 800b412:	613b      	str	r3, [r7, #16]
 800b414:	e00f      	b.n	800b436 <_sin+0xbe>
  }
  else
  {
    t1 = -sine_array[256 - i];
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800b41c:	4a12      	ldr	r2, [pc, #72]	@ (800b468 <_sin+0xf0>)
 800b41e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b422:	425b      	negs	r3, r3
 800b424:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[255 - i];
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800b42c:	4a0e      	ldr	r2, [pc, #56]	@ (800b468 <_sin+0xf0>)
 800b42e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b432:	425b      	negs	r3, r3
 800b434:	613b      	str	r3, [r7, #16]
  }
  return (1.0f / 32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 800b436:	693a      	ldr	r2, [r7, #16]
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	1ad3      	subs	r3, r2, r3
 800b43c:	68ba      	ldr	r2, [r7, #8]
 800b43e:	fb02 f303 	mul.w	r3, r2, r3
 800b442:	121a      	asrs	r2, r3, #8
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	4413      	add	r3, r2
 800b448:	ee07 3a90 	vmov	s15, r3
 800b44c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b450:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800b46c <_sin+0xf4>
 800b454:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b458:	eeb0 0a67 	vmov.f32	s0, s15
 800b45c:	3718      	adds	r7, #24
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	f3af 8000 	nop.w
 800b468:	2000000c 	.word	0x2000000c
 800b46c:	38000000 	.word	0x38000000
 800b470:	6446f9b4 	.word	0x6446f9b4
 800b474:	40c45f30 	.word	0x40c45f30

0800b478 <_cos>:
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 800b482:	edd7 7a01 	vldr	s15, [r7, #4]
 800b486:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800b4d0 <_cos+0x58>
 800b48a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b48e:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 800b492:	edd7 7a03 	vldr	s15, [r7, #12]
 800b496:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800b4d4 <_cos+0x5c>
 800b49a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4a2:	dd06      	ble.n	800b4b2 <_cos+0x3a>
 800b4a4:	edd7 7a03 	vldr	s15, [r7, #12]
 800b4a8:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800b4d4 <_cos+0x5c>
 800b4ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b4b0:	e001      	b.n	800b4b6 <_cos+0x3e>
 800b4b2:	edd7 7a03 	vldr	s15, [r7, #12]
 800b4b6:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 800b4ba:	ed97 0a03 	vldr	s0, [r7, #12]
 800b4be:	f7ff ff5b 	bl	800b378 <_sin>
 800b4c2:	eef0 7a40 	vmov.f32	s15, s0
}
 800b4c6:	eeb0 0a67 	vmov.f32	s0, s15
 800b4ca:	3710      	adds	r7, #16
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	3fc90fdb 	.word	0x3fc90fdb
 800b4d4:	40c90fdb 	.word	0x40c90fdb

0800b4d8 <_sincos>:

__attribute__((weak)) void _sincos(float a, float *s, float *c)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	ed87 0a03 	vstr	s0, [r7, #12]
 800b4e2:	60b8      	str	r0, [r7, #8]
 800b4e4:	6079      	str	r1, [r7, #4]
  *s = _sin(a);
 800b4e6:	ed97 0a03 	vldr	s0, [r7, #12]
 800b4ea:	f7ff ff45 	bl	800b378 <_sin>
 800b4ee:	eef0 7a40 	vmov.f32	s15, s0
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	edc3 7a00 	vstr	s15, [r3]
  *c = _cos(a);
 800b4f8:	ed97 0a03 	vldr	s0, [r7, #12]
 800b4fc:	f7ff ffbc 	bl	800b478 <_cos>
 800b500:	eef0 7a40 	vmov.f32	s15, s0
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	edc3 7a00 	vstr	s15, [r3]
}
 800b50a:	bf00      	nop
 800b50c:	3710      	adds	r7, #16
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	0000      	movs	r0, r0
 800b514:	0000      	movs	r0, r0
	...

0800b518 <_normalizeAngle>:
  return r;
}

// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f7f5 f838 	bl	8000598 <__aeabi_f2d>
 800b528:	4602      	mov	r2, r0
 800b52a:	460b      	mov	r3, r1
 800b52c:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 800b578 <_normalizeAngle+0x60>
 800b530:	ec43 2b10 	vmov	d0, r2, r3
 800b534:	f005 fe2e 	bl	8011194 <fmod>
 800b538:	ec53 2b10 	vmov	r2, r3, d0
 800b53c:	4610      	mov	r0, r2
 800b53e:	4619      	mov	r1, r3
 800b540:	f7f5 fb7a 	bl	8000c38 <__aeabi_d2f>
 800b544:	4603      	mov	r3, r0
 800b546:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 800b548:	edd7 7a03 	vldr	s15, [r7, #12]
 800b54c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b554:	db02      	blt.n	800b55c <_normalizeAngle+0x44>
 800b556:	edd7 7a03 	vldr	s15, [r7, #12]
 800b55a:	e005      	b.n	800b568 <_normalizeAngle+0x50>
 800b55c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b560:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800b580 <_normalizeAngle+0x68>
 800b564:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800b568:	eeb0 0a67 	vmov.f32	s0, s15
 800b56c:	3710      	adds	r7, #16
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	f3af 8000 	nop.w
 800b578:	60000000 	.word	0x60000000
 800b57c:	401921fb 	.word	0x401921fb
 800b580:	40c90fdb 	.word	0x40c90fdb

0800b584 <_electricalAngle>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs)
{
 800b584:	b480      	push	{r7}
 800b586:	b083      	sub	sp, #12
 800b588:	af00      	add	r7, sp, #0
 800b58a:	ed87 0a01 	vstr	s0, [r7, #4]
 800b58e:	6038      	str	r0, [r7, #0]
  return (shaft_angle * pole_pairs);
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	ee07 3a90 	vmov	s15, r3
 800b596:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b59a:	edd7 7a01 	vldr	s15, [r7, #4]
 800b59e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800b5a2:	eeb0 0a67 	vmov.f32	s0, s15
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <pidInit>:
#include "pid.h"
#include "math_utils.h"

void pidInit(PidController *pidController, float _P, float _I, float _D, float _ramp, float _limit, float _Ts)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b089      	sub	sp, #36	@ 0x24
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	61f8      	str	r0, [r7, #28]
 800b5b8:	ed87 0a06 	vstr	s0, [r7, #24]
 800b5bc:	edc7 0a05 	vstr	s1, [r7, #20]
 800b5c0:	ed87 1a04 	vstr	s2, [r7, #16]
 800b5c4:	edc7 1a03 	vstr	s3, [r7, #12]
 800b5c8:	ed87 2a02 	vstr	s4, [r7, #8]
 800b5cc:	edc7 2a01 	vstr	s5, [r7, #4]
    pidController->P = _P;
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	69ba      	ldr	r2, [r7, #24]
 800b5d4:	601a      	str	r2, [r3, #0]
    pidController->I = _I;
 800b5d6:	69fb      	ldr	r3, [r7, #28]
 800b5d8:	697a      	ldr	r2, [r7, #20]
 800b5da:	605a      	str	r2, [r3, #4]
    pidController->D = _D;
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	693a      	ldr	r2, [r7, #16]
 800b5e0:	609a      	str	r2, [r3, #8]
    pidController->output_ramp = _ramp;
 800b5e2:	69fb      	ldr	r3, [r7, #28]
 800b5e4:	68fa      	ldr	r2, [r7, #12]
 800b5e6:	60da      	str	r2, [r3, #12]
    pidController->limit = _limit;
 800b5e8:	69fb      	ldr	r3, [r7, #28]
 800b5ea:	68ba      	ldr	r2, [r7, #8]
 800b5ec:	611a      	str	r2, [r3, #16]
    pidController->Ts = _Ts;
 800b5ee:	69fb      	ldr	r3, [r7, #28]
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	621a      	str	r2, [r3, #32]
    pidController->error_prev = 0;
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	f04f 0200 	mov.w	r2, #0
 800b5fa:	615a      	str	r2, [r3, #20]
    pidController->output_prev = 0;
 800b5fc:	69fb      	ldr	r3, [r7, #28]
 800b5fe:	f04f 0200 	mov.w	r2, #0
 800b602:	619a      	str	r2, [r3, #24]
    pidController->integral_prev = 0;
 800b604:	69fb      	ldr	r3, [r7, #28]
 800b606:	f04f 0200 	mov.w	r2, #0
 800b60a:	61da      	str	r2, [r3, #28]
}
 800b60c:	bf00      	nop
 800b60e:	3724      	adds	r7, #36	@ 0x24
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <pidOperator>:

// PID controller function
float pidOperator(PidController *pidController, float error)
{
 800b618:	b480      	push	{r7}
 800b61a:	b08b      	sub	sp, #44	@ 0x2c
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	ed87 0a00 	vstr	s0, [r7]
    // u(s) = (P + I/s + Ds)e(s)
    // Discrete implementations
    // proportional part
    // u_p  = P *e(k)
    float proportional = pidController->P * error;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	edd3 7a00 	vldr	s15, [r3]
 800b62a:	ed97 7a00 	vldr	s14, [r7]
 800b62e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b632:	edc7 7a08 	vstr	s15, [r7, #32]
    // Tustin transform of the integral part
    // u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
    float a = 0.5f * (error + pidController->error_prev);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	ed93 7a05 	vldr	s14, [r3, #20]
 800b63c:	edd7 7a00 	vldr	s15, [r7]
 800b640:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b644:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b648:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b64c:	edc7 7a07 	vstr	s15, [r7, #28]
    float b = pidController->I * pidController->Ts;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	ed93 7a01 	vldr	s14, [r3, #4]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	edd3 7a08 	vldr	s15, [r3, #32]
 800b65c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b660:	edc7 7a06 	vstr	s15, [r7, #24]
    float integral = pidController->integral_prev + pidController->I * pidController->Ts * 0.5f * (error + pidController->error_prev);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	ed93 7a07 	vldr	s14, [r3, #28]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	edd3 6a01 	vldr	s13, [r3, #4]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	edd3 7a08 	vldr	s15, [r3, #32]
 800b676:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b67a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800b67e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	ed93 6a05 	vldr	s12, [r3, #20]
 800b688:	edd7 7a00 	vldr	s15, [r7]
 800b68c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800b690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b694:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b698:	edc7 7a05 	vstr	s15, [r7, #20]
    // antiwindup - limit the output
    integral = _constrain(integral, -pidController->limit, pidController->limit);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	edd3 7a04 	vldr	s15, [r3, #16]
 800b6a2:	eef1 7a67 	vneg.f32	s15, s15
 800b6a6:	ed97 7a05 	vldr	s14, [r7, #20]
 800b6aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b6ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6b2:	d505      	bpl.n	800b6c0 <pidOperator+0xa8>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	edd3 7a04 	vldr	s15, [r3, #16]
 800b6ba:	eef1 7a67 	vneg.f32	s15, s15
 800b6be:	e00f      	b.n	800b6e0 <pidOperator+0xc8>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	edd3 7a04 	vldr	s15, [r3, #16]
 800b6c6:	ed97 7a05 	vldr	s14, [r7, #20]
 800b6ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b6ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6d2:	dd03      	ble.n	800b6dc <pidOperator+0xc4>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	edd3 7a04 	vldr	s15, [r3, #16]
 800b6da:	e001      	b.n	800b6e0 <pidOperator+0xc8>
 800b6dc:	edd7 7a05 	vldr	s15, [r7, #20]
 800b6e0:	edc7 7a05 	vstr	s15, [r7, #20]
    // Discrete derivation
    // u_dk = D(ek - ek_1)/Ts
    float derivative = pidController->D * (error - pidController->error_prev) / pidController->Ts;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	ed93 7a02 	vldr	s14, [r3, #8]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	edd3 7a05 	vldr	s15, [r3, #20]
 800b6f0:	edd7 6a00 	vldr	s13, [r7]
 800b6f4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b6f8:	ee67 6a27 	vmul.f32	s13, s14, s15
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	ed93 7a08 	vldr	s14, [r3, #32]
 800b702:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b706:	edc7 7a04 	vstr	s15, [r7, #16]

    // sum all the components
    float output = proportional + integral + derivative;
 800b70a:	ed97 7a08 	vldr	s14, [r7, #32]
 800b70e:	edd7 7a05 	vldr	s15, [r7, #20]
 800b712:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b716:	ed97 7a04 	vldr	s14, [r7, #16]
 800b71a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b71e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    // antiwindup - limit the output variable
    output = _constrain(output, -pidController->limit, pidController->limit);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	edd3 7a04 	vldr	s15, [r3, #16]
 800b728:	eef1 7a67 	vneg.f32	s15, s15
 800b72c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b730:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b738:	d505      	bpl.n	800b746 <pidOperator+0x12e>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	edd3 7a04 	vldr	s15, [r3, #16]
 800b740:	eef1 7a67 	vneg.f32	s15, s15
 800b744:	e00f      	b.n	800b766 <pidOperator+0x14e>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	edd3 7a04 	vldr	s15, [r3, #16]
 800b74c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b750:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b758:	dd03      	ble.n	800b762 <pidOperator+0x14a>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	edd3 7a04 	vldr	s15, [r3, #16]
 800b760:	e001      	b.n	800b766 <pidOperator+0x14e>
 800b762:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b766:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // if output ramp defined
    if (pidController->output_ramp > 0)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	edd3 7a03 	vldr	s15, [r3, #12]
 800b770:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b778:	dd42      	ble.n	800b800 <pidOperator+0x1e8>
    {
        // limit the acceleration by ramping the output
        float output_rate = (output - pidController->output_prev) / pidController->Ts;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	edd3 7a06 	vldr	s15, [r3, #24]
 800b780:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b784:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	ed93 7a08 	vldr	s14, [r3, #32]
 800b78e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b792:	edc7 7a03 	vstr	s15, [r7, #12]
        if (output_rate > pidController->output_ramp)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	edd3 7a03 	vldr	s15, [r3, #12]
 800b79c:	ed97 7a03 	vldr	s14, [r7, #12]
 800b7a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7a8:	dd0f      	ble.n	800b7ca <pidOperator+0x1b2>
            output = pidController->output_prev + pidController->output_ramp * pidController->Ts;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	ed93 7a06 	vldr	s14, [r3, #24]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	edd3 6a03 	vldr	s13, [r3, #12]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	edd3 7a08 	vldr	s15, [r3, #32]
 800b7bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b7c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7c4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 800b7c8:	e01a      	b.n	800b800 <pidOperator+0x1e8>
        else if (output_rate < -pidController->output_ramp)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	edd3 7a03 	vldr	s15, [r3, #12]
 800b7d0:	eef1 7a67 	vneg.f32	s15, s15
 800b7d4:	ed97 7a03 	vldr	s14, [r7, #12]
 800b7d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b7dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7e0:	d50e      	bpl.n	800b800 <pidOperator+0x1e8>
            output = pidController->output_prev - pidController->output_ramp * pidController->Ts;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	ed93 7a06 	vldr	s14, [r3, #24]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	edd3 6a03 	vldr	s13, [r3, #12]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	edd3 7a08 	vldr	s15, [r3, #32]
 800b7f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b7f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7fc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }
    // saving for the next pass
    pidController->integral_prev = integral;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	697a      	ldr	r2, [r7, #20]
 800b804:	61da      	str	r2, [r3, #28]
    pidController->output_prev = output;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b80a:	619a      	str	r2, [r3, #24]
    pidController->error_prev = error;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	683a      	ldr	r2, [r7, #0]
 800b810:	615a      	str	r2, [r3, #20]
    return output;
 800b812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b814:	ee07 3a90 	vmov	s15, r3
}
 800b818:	eeb0 0a67 	vmov.f32	s0, s15
 800b81c:	372c      	adds	r7, #44	@ 0x2c
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr
	...

0800b828 <setTorque>:
    motor->updatePwm(HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Tc);
}
#elif 1

void setTorque(BldcMotor *motor, float Uq, float Ud, float angle_el)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b08e      	sub	sp, #56	@ 0x38
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	ed87 0a02 	vstr	s0, [r7, #8]
 800b834:	edc7 0a01 	vstr	s1, [r7, #4]
 800b838:	ed87 1a00 	vstr	s2, [r7]
    float Ualpha, Ubeta;
    float Ua, Ub, Uc;

    // Sinusoidal PWM modulation
    // Inverse Park + Clarke transformation
    _sincos(angle_el, &_sa, &_ca);
 800b83c:	f107 0214 	add.w	r2, r7, #20
 800b840:	f107 0310 	add.w	r3, r7, #16
 800b844:	4611      	mov	r1, r2
 800b846:	4618      	mov	r0, r3
 800b848:	ed97 0a00 	vldr	s0, [r7]
 800b84c:	f7ff fe44 	bl	800b4d8 <_sincos>

    // Inverse park transform
    Ualpha = _ca * Ud - _sa * Uq; // -sin(angle) * Uq;
 800b850:	ed97 7a05 	vldr	s14, [r7, #20]
 800b854:	edd7 7a01 	vldr	s15, [r7, #4]
 800b858:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b85c:	edd7 6a04 	vldr	s13, [r7, #16]
 800b860:	edd7 7a02 	vldr	s15, [r7, #8]
 800b864:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b868:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b86c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    Ubeta = _sa * Ud + _ca * Uq;  //  cos(angle) * Uq;
 800b870:	ed97 7a04 	vldr	s14, [r7, #16]
 800b874:	edd7 7a01 	vldr	s15, [r7, #4]
 800b878:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b87c:	edd7 6a05 	vldr	s13, [r7, #20]
 800b880:	edd7 7a02 	vldr	s15, [r7, #8]
 800b884:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b888:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b88c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Clarke transform
    Ua = Ualpha;
 800b890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b892:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Ub = -0.5f * Ualpha + _SQRT3_2 * Ubeta;
 800b894:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800b898:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800b89c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b8a0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800b8a4:	eddf 6a95 	vldr	s13, [pc, #596]	@ 800bafc <setTorque+0x2d4>
 800b8a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b8ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b8b0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc = -0.5f * Ualpha - _SQRT3_2 * Ubeta;
 800b8b4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800b8b8:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800b8bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b8c0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800b8c4:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 800bafc <setTorque+0x2d4>
 800b8c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b8cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b8d0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    center = UqMAX / 2;
 800b8d4:	4b8a      	ldr	r3, [pc, #552]	@ (800bb00 <setTorque+0x2d8>)
 800b8d6:	623b      	str	r3, [r7, #32]

    // discussed here: https://community.simplefoc.com/t/embedded-world-2023-stm32-cordic-co-processor/3107/165?u=candas1
    // a bit more info here: https://microchipdeveloper.com/mct5001:which-zsm-is-best
    // Midpoint Clamp
    float Umin = min(Ua, min(Ub, Uc));
 800b8d8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b8dc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b8e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8e8:	d502      	bpl.n	800b8f0 <setTorque+0xc8>
 800b8ea:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800b8ee:	e001      	b.n	800b8f4 <setTorque+0xcc>
 800b8f0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b8f4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b8f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b8fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b900:	dd01      	ble.n	800b906 <setTorque+0xde>
 800b902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b904:	e00b      	b.n	800b91e <setTorque+0xf6>
 800b906:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b90a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b90e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b916:	d501      	bpl.n	800b91c <setTorque+0xf4>
 800b918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b91a:	e000      	b.n	800b91e <setTorque+0xf6>
 800b91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b91e:	61fb      	str	r3, [r7, #28]
    float Umax = max(Ua, max(Ub, Uc));
 800b920:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b924:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b928:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b930:	dd02      	ble.n	800b938 <setTorque+0x110>
 800b932:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800b936:	e001      	b.n	800b93c <setTorque+0x114>
 800b938:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b93c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b940:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b948:	d501      	bpl.n	800b94e <setTorque+0x126>
 800b94a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b94c:	e00b      	b.n	800b966 <setTorque+0x13e>
 800b94e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b952:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b956:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b95a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b95e:	dd01      	ble.n	800b964 <setTorque+0x13c>
 800b960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b962:	e000      	b.n	800b966 <setTorque+0x13e>
 800b964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b966:	61bb      	str	r3, [r7, #24]
    center -= (Umax + Umin) / 2;
 800b968:	ed97 7a06 	vldr	s14, [r7, #24]
 800b96c:	edd7 7a07 	vldr	s15, [r7, #28]
 800b970:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b974:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800b978:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b97c:	ed97 7a08 	vldr	s14, [r7, #32]
 800b980:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b984:	edc7 7a08 	vstr	s15, [r7, #32]

    Ua += center;
 800b988:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b98c:	edd7 7a08 	vldr	s15, [r7, #32]
 800b990:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b994:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    Ub += center;
 800b998:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b99c:	edd7 7a08 	vldr	s15, [r7, #32]
 800b9a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b9a4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc += center;
 800b9a8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b9ac:	edd7 7a08 	vldr	s15, [r7, #32]
 800b9b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b9b4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    motor->Ta = _constrain(Ua / U_DC, 0.0f, 1.0f);
 800b9b8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b9bc:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800b9c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b9c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b9c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9cc:	d502      	bpl.n	800b9d4 <setTorque+0x1ac>
 800b9ce:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800bb04 <setTorque+0x2dc>
 800b9d2:	e015      	b.n	800ba00 <setTorque+0x1d8>
 800b9d4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b9d8:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800b9dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b9e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b9e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b9e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ec:	dd02      	ble.n	800b9f4 <setTorque+0x1cc>
 800b9ee:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b9f2:	e005      	b.n	800ba00 <setTorque+0x1d8>
 800b9f4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b9f8:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800b9fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    motor->Tb = _constrain(Ub / U_DC, 0.0f, 1.0f);
 800ba06:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800ba0a:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800ba0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ba16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba1a:	d502      	bpl.n	800ba22 <setTorque+0x1fa>
 800ba1c:	eddf 7a39 	vldr	s15, [pc, #228]	@ 800bb04 <setTorque+0x2dc>
 800ba20:	e015      	b.n	800ba4e <setTorque+0x226>
 800ba22:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800ba26:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800ba2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba32:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba3a:	dd02      	ble.n	800ba42 <setTorque+0x21a>
 800ba3c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ba40:	e005      	b.n	800ba4e <setTorque+0x226>
 800ba42:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800ba46:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800ba4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128
    motor->Tc = _constrain(Uc / U_DC, 0.0f, 1.0f);
 800ba54:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800ba58:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800ba5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ba64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba68:	d502      	bpl.n	800ba70 <setTorque+0x248>
 800ba6a:	eddf 7a26 	vldr	s15, [pc, #152]	@ 800bb04 <setTorque+0x2dc>
 800ba6e:	e015      	b.n	800ba9c <setTorque+0x274>
 800ba70:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800ba74:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800ba78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba80:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba88:	dd02      	ble.n	800ba90 <setTorque+0x268>
 800ba8a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ba8e:	e005      	b.n	800ba9c <setTorque+0x274>
 800ba90:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800ba94:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800ba98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	edc3 7a4b 	vstr	s15, [r3, #300]	@ 0x12c

    motor->updatePwm(HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Tc);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	edd2 7a49 	vldr	s15, [r2, #292]	@ 0x124
 800baae:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800bb08 <setTorque+0x2e0>
 800bab2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baba:	ee17 2a90 	vmov	r2, s15
 800babe:	b290      	uxth	r0, r2
 800bac0:	68fa      	ldr	r2, [r7, #12]
 800bac2:	edd2 7a4a 	vldr	s15, [r2, #296]	@ 0x128
 800bac6:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800bb08 <setTorque+0x2e0>
 800baca:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bad2:	ee17 2a90 	vmov	r2, s15
 800bad6:	b291      	uxth	r1, r2
 800bad8:	68fa      	ldr	r2, [r7, #12]
 800bada:	edd2 7a4b 	vldr	s15, [r2, #300]	@ 0x12c
 800bade:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800bb08 <setTorque+0x2e0>
 800bae2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baea:	ee17 2a90 	vmov	r2, s15
 800baee:	b292      	uxth	r2, r2
 800baf0:	4798      	blx	r3
    // set the voltages in driver
    // driver->setPwm(Ua, Ub, Uc);
}
 800baf2:	bf00      	nop
 800baf4:	3738      	adds	r7, #56	@ 0x38
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop
 800bafc:	3f5db3d7 	.word	0x3f5db3d7
 800bb00:	405db3d7 	.word	0x405db3d7
 800bb04:	00000000 	.word	0x00000000
 800bb08:	45fa0000 	.word	0x45fa0000

0800bb0c <startPwm1>:

static void standingBy();
static void working(void);
static void updatePwm1(unsigned short int a, unsigned short int b, unsigned short int c);
static void startPwm1()
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800bb10:	2100      	movs	r1, #0
 800bb12:	4806      	ldr	r0, [pc, #24]	@ (800bb2c <startPwm1+0x20>)
 800bb14:	f7fb ffbc 	bl	8007a90 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800bb18:	2104      	movs	r1, #4
 800bb1a:	4804      	ldr	r0, [pc, #16]	@ (800bb2c <startPwm1+0x20>)
 800bb1c:	f7fb ffb8 	bl	8007a90 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800bb20:	2108      	movs	r1, #8
 800bb22:	4802      	ldr	r0, [pc, #8]	@ (800bb2c <startPwm1+0x20>)
 800bb24:	f7fb ffb4 	bl	8007a90 <HAL_TIM_PWM_Start>
    // HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
    // HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
    // HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
}
 800bb28:	bf00      	nop
 800bb2a:	bd80      	pop	{r7, pc}
 800bb2c:	200004d0 	.word	0x200004d0

0800bb30 <stopPwm1>:
static void stopPwm1()
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 800bb34:	2100      	movs	r1, #0
 800bb36:	4806      	ldr	r0, [pc, #24]	@ (800bb50 <stopPwm1+0x20>)
 800bb38:	f7fc f8aa 	bl	8007c90 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 800bb3c:	2104      	movs	r1, #4
 800bb3e:	4804      	ldr	r0, [pc, #16]	@ (800bb50 <stopPwm1+0x20>)
 800bb40:	f7fc f8a6 	bl	8007c90 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 800bb44:	2108      	movs	r1, #8
 800bb46:	4802      	ldr	r0, [pc, #8]	@ (800bb50 <stopPwm1+0x20>)
 800bb48:	f7fc f8a2 	bl	8007c90 <HAL_TIM_PWM_Stop>
    // HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
    // HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
    // HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
}
 800bb4c:	bf00      	nop
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	200004d0 	.word	0x200004d0

0800bb54 <updatePwm1>:
static void updatePwm1(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b083      	sub	sp, #12
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	80fb      	strh	r3, [r7, #6]
 800bb5e:	460b      	mov	r3, r1
 800bb60:	80bb      	strh	r3, [r7, #4]
 800bb62:	4613      	mov	r3, r2
 800bb64:	807b      	strh	r3, [r7, #2]
    TIM8->CCR1 = a;
 800bb66:	4a07      	ldr	r2, [pc, #28]	@ (800bb84 <updatePwm1+0x30>)
 800bb68:	88fb      	ldrh	r3, [r7, #6]
 800bb6a:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM8->CCR2 = b;
 800bb6c:	4a05      	ldr	r2, [pc, #20]	@ (800bb84 <updatePwm1+0x30>)
 800bb6e:	88bb      	ldrh	r3, [r7, #4]
 800bb70:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM8->CCR3 = c;
 800bb72:	4a04      	ldr	r2, [pc, #16]	@ (800bb84 <updatePwm1+0x30>)
 800bb74:	887b      	ldrh	r3, [r7, #2]
 800bb76:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800bb78:	bf00      	nop
 800bb7a:	370c      	adds	r7, #12
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr
 800bb84:	40013400 	.word	0x40013400

0800bb88 <motorInit>:
// should be called before interruption enabled

static void motorInit()
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b086      	sub	sp, #24
 800bb8c:	af00      	add	r7, sp, #0
    motor1.pole_pairs = 7;
 800bb8e:	4ba1      	ldr	r3, [pc, #644]	@ (800be14 <motorInit+0x28c>)
 800bb90:	2207      	movs	r2, #7
 800bb92:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    motor1.updatePwm = updatePwm1;
 800bb96:	4b9f      	ldr	r3, [pc, #636]	@ (800be14 <motorInit+0x28c>)
 800bb98:	4a9f      	ldr	r2, [pc, #636]	@ (800be18 <motorInit+0x290>)
 800bb9a:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
    motor1.startPwm = startPwm1;
 800bb9e:	4b9d      	ldr	r3, [pc, #628]	@ (800be14 <motorInit+0x28c>)
 800bba0:	4a9e      	ldr	r2, [pc, #632]	@ (800be1c <motorInit+0x294>)
 800bba2:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    motor1.stopPwm = stopPwm1;
 800bba6:	4b9b      	ldr	r3, [pc, #620]	@ (800be14 <motorInit+0x28c>)
 800bba8:	4a9d      	ldr	r2, [pc, #628]	@ (800be20 <motorInit+0x298>)
 800bbaa:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor1.zeroElectricAngleOffSet = 0;
 800bbae:	4b99      	ldr	r3, [pc, #612]	@ (800be14 <motorInit+0x28c>)
 800bbb0:	f04f 0200 	mov.w	r2, #0
 800bbb4:	635a      	str	r2, [r3, #52]	@ 0x34
    motor1.Ts = 100 * 1e-6f;
 800bbb6:	4b97      	ldr	r3, [pc, #604]	@ (800be14 <motorInit+0x28c>)
 800bbb8:	4a9a      	ldr	r2, [pc, #616]	@ (800be24 <motorInit+0x29c>)
 800bbba:	62da      	str	r2, [r3, #44]	@ 0x2c
    motor1.torqueType = VOLTAGE;
 800bbbc:	4b95      	ldr	r3, [pc, #596]	@ (800be14 <motorInit+0x28c>)
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    motor1.controlType = VELOCITY;
 800bbc4:	4b93      	ldr	r3, [pc, #588]	@ (800be14 <motorInit+0x28c>)
 800bbc6:	2202      	movs	r2, #2
 800bbc8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    motor1.state = MOTOR_CALIBRATE;
 800bbcc:	4b91      	ldr	r3, [pc, #580]	@ (800be14 <motorInit+0x28c>)
 800bbce:	2200      	movs	r2, #0
 800bbd0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    encoderInit(&motor1.magEncoder, motor1.Ts, MT6701_GetRawAngle);
 800bbd4:	4b8f      	ldr	r3, [pc, #572]	@ (800be14 <motorInit+0x28c>)
 800bbd6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bbda:	4993      	ldr	r1, [pc, #588]	@ (800be28 <motorInit+0x2a0>)
 800bbdc:	eeb0 0a67 	vmov.f32	s0, s15
 800bbe0:	488c      	ldr	r0, [pc, #560]	@ (800be14 <motorInit+0x28c>)
 800bbe2:	f7ff fac6 	bl	800b172 <encoderInit>

    if (motor1.controlType == TORQUE && motor1.torqueType == CURRENT)
 800bbe6:	4b8b      	ldr	r3, [pc, #556]	@ (800be14 <motorInit+0x28c>)
 800bbe8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d12d      	bne.n	800bc4c <motorInit+0xc4>
 800bbf0:	4b88      	ldr	r3, [pc, #544]	@ (800be14 <motorInit+0x28c>)
 800bbf2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800bbf6:	2b01      	cmp	r3, #1
 800bbf8:	d128      	bne.n	800bc4c <motorInit+0xc4>
    {
        float kp, ki;
        kp = -200;
 800bbfa:	4b8c      	ldr	r3, [pc, #560]	@ (800be2c <motorInit+0x2a4>)
 800bbfc:	617b      	str	r3, [r7, #20]
        ki = -20;
 800bbfe:	4b8c      	ldr	r3, [pc, #560]	@ (800be30 <motorInit+0x2a8>)
 800bc00:	613b      	str	r3, [r7, #16]
        pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800bc02:	4b84      	ldr	r3, [pc, #528]	@ (800be14 <motorInit+0x28c>)
 800bc04:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bc08:	eef0 2a67 	vmov.f32	s5, s15
 800bc0c:	ed9f 2a89 	vldr	s4, [pc, #548]	@ 800be34 <motorInit+0x2ac>
 800bc10:	eddf 1a89 	vldr	s3, [pc, #548]	@ 800be38 <motorInit+0x2b0>
 800bc14:	ed9f 1a88 	vldr	s2, [pc, #544]	@ 800be38 <motorInit+0x2b0>
 800bc18:	edd7 0a04 	vldr	s1, [r7, #16]
 800bc1c:	ed97 0a05 	vldr	s0, [r7, #20]
 800bc20:	4886      	ldr	r0, [pc, #536]	@ (800be3c <motorInit+0x2b4>)
 800bc22:	f7ff fcc5 	bl	800b5b0 <pidInit>
        pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800bc26:	4b7b      	ldr	r3, [pc, #492]	@ (800be14 <motorInit+0x28c>)
 800bc28:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bc2c:	eef0 2a67 	vmov.f32	s5, s15
 800bc30:	ed9f 2a80 	vldr	s4, [pc, #512]	@ 800be34 <motorInit+0x2ac>
 800bc34:	eddf 1a80 	vldr	s3, [pc, #512]	@ 800be38 <motorInit+0x2b0>
 800bc38:	ed9f 1a7f 	vldr	s2, [pc, #508]	@ 800be38 <motorInit+0x2b0>
 800bc3c:	edd7 0a04 	vldr	s1, [r7, #16]
 800bc40:	ed97 0a05 	vldr	s0, [r7, #20]
 800bc44:	487e      	ldr	r0, [pc, #504]	@ (800be40 <motorInit+0x2b8>)
 800bc46:	f7ff fcb3 	bl	800b5b0 <pidInit>
    {
 800bc4a:	e0c0      	b.n	800bdce <motorInit+0x246>
    }
    else if (motor1.controlType == VELOCITY)
 800bc4c:	4b71      	ldr	r3, [pc, #452]	@ (800be14 <motorInit+0x28c>)
 800bc4e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800bc52:	2b02      	cmp	r3, #2
 800bc54:	d152      	bne.n	800bcfc <motorInit+0x174>
    {
        if (motor1.torqueType == CURRENT)
 800bc56:	4b6f      	ldr	r3, [pc, #444]	@ (800be14 <motorInit+0x28c>)
 800bc58:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	d13a      	bne.n	800bcd6 <motorInit+0x14e>
        {
            pidInit(&motor1.velocityPID, -0.02, -0.01, 0, 0, CURRENT_MAX, motor1.Ts);
 800bc60:	4b6c      	ldr	r3, [pc, #432]	@ (800be14 <motorInit+0x28c>)
 800bc62:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bc66:	eef0 2a67 	vmov.f32	s5, s15
 800bc6a:	ed9f 2a76 	vldr	s4, [pc, #472]	@ 800be44 <motorInit+0x2bc>
 800bc6e:	eddf 1a72 	vldr	s3, [pc, #456]	@ 800be38 <motorInit+0x2b0>
 800bc72:	ed9f 1a71 	vldr	s2, [pc, #452]	@ 800be38 <motorInit+0x2b0>
 800bc76:	eddf 0a74 	vldr	s1, [pc, #464]	@ 800be48 <motorInit+0x2c0>
 800bc7a:	ed9f 0a74 	vldr	s0, [pc, #464]	@ 800be4c <motorInit+0x2c4>
 800bc7e:	4874      	ldr	r0, [pc, #464]	@ (800be50 <motorInit+0x2c8>)
 800bc80:	f7ff fc96 	bl	800b5b0 <pidInit>

            float kp, ki;
            kp = -200;
 800bc84:	4b69      	ldr	r3, [pc, #420]	@ (800be2c <motorInit+0x2a4>)
 800bc86:	607b      	str	r3, [r7, #4]
            ki = -20;
 800bc88:	4b69      	ldr	r3, [pc, #420]	@ (800be30 <motorInit+0x2a8>)
 800bc8a:	603b      	str	r3, [r7, #0]
            pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800bc8c:	4b61      	ldr	r3, [pc, #388]	@ (800be14 <motorInit+0x28c>)
 800bc8e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bc92:	eef0 2a67 	vmov.f32	s5, s15
 800bc96:	ed9f 2a67 	vldr	s4, [pc, #412]	@ 800be34 <motorInit+0x2ac>
 800bc9a:	eddf 1a67 	vldr	s3, [pc, #412]	@ 800be38 <motorInit+0x2b0>
 800bc9e:	ed9f 1a66 	vldr	s2, [pc, #408]	@ 800be38 <motorInit+0x2b0>
 800bca2:	edd7 0a00 	vldr	s1, [r7]
 800bca6:	ed97 0a01 	vldr	s0, [r7, #4]
 800bcaa:	4864      	ldr	r0, [pc, #400]	@ (800be3c <motorInit+0x2b4>)
 800bcac:	f7ff fc80 	bl	800b5b0 <pidInit>
            pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800bcb0:	4b58      	ldr	r3, [pc, #352]	@ (800be14 <motorInit+0x28c>)
 800bcb2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bcb6:	eef0 2a67 	vmov.f32	s5, s15
 800bcba:	ed9f 2a5e 	vldr	s4, [pc, #376]	@ 800be34 <motorInit+0x2ac>
 800bcbe:	eddf 1a5e 	vldr	s3, [pc, #376]	@ 800be38 <motorInit+0x2b0>
 800bcc2:	ed9f 1a5d 	vldr	s2, [pc, #372]	@ 800be38 <motorInit+0x2b0>
 800bcc6:	edd7 0a00 	vldr	s1, [r7]
 800bcca:	ed97 0a01 	vldr	s0, [r7, #4]
 800bcce:	485c      	ldr	r0, [pc, #368]	@ (800be40 <motorInit+0x2b8>)
 800bcd0:	f7ff fc6e 	bl	800b5b0 <pidInit>
 800bcd4:	e07b      	b.n	800bdce <motorInit+0x246>
        }
        else
        {
            pidInit(&motor1.velocityPID, 0.15, 0.05, 0, 0, UqMAX, motor1.Ts);
 800bcd6:	4b4f      	ldr	r3, [pc, #316]	@ (800be14 <motorInit+0x28c>)
 800bcd8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bcdc:	eef0 2a67 	vmov.f32	s5, s15
 800bce0:	ed9f 2a54 	vldr	s4, [pc, #336]	@ 800be34 <motorInit+0x2ac>
 800bce4:	eddf 1a54 	vldr	s3, [pc, #336]	@ 800be38 <motorInit+0x2b0>
 800bce8:	ed9f 1a53 	vldr	s2, [pc, #332]	@ 800be38 <motorInit+0x2b0>
 800bcec:	eddf 0a59 	vldr	s1, [pc, #356]	@ 800be54 <motorInit+0x2cc>
 800bcf0:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 800be58 <motorInit+0x2d0>
 800bcf4:	4856      	ldr	r0, [pc, #344]	@ (800be50 <motorInit+0x2c8>)
 800bcf6:	f7ff fc5b 	bl	800b5b0 <pidInit>
 800bcfa:	e068      	b.n	800bdce <motorInit+0x246>
        }
    }
    else if (motor1.controlType == ANGLE)
 800bcfc:	4b45      	ldr	r3, [pc, #276]	@ (800be14 <motorInit+0x28c>)
 800bcfe:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800bd02:	2b03      	cmp	r3, #3
 800bd04:	d163      	bne.n	800bdce <motorInit+0x246>
    {
        if (motor1.torqueType == CURRENT)
 800bd06:	4b43      	ldr	r3, [pc, #268]	@ (800be14 <motorInit+0x28c>)
 800bd08:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d14c      	bne.n	800bdaa <motorInit+0x222>
        {
            pidInit(&motor1.anglePID, 2, 0, 0, 0, MAX_VELOCITY, motor1.Ts);
 800bd10:	4b40      	ldr	r3, [pc, #256]	@ (800be14 <motorInit+0x28c>)
 800bd12:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bd16:	eef0 2a67 	vmov.f32	s5, s15
 800bd1a:	ed9f 2a50 	vldr	s4, [pc, #320]	@ 800be5c <motorInit+0x2d4>
 800bd1e:	eddf 1a46 	vldr	s3, [pc, #280]	@ 800be38 <motorInit+0x2b0>
 800bd22:	ed9f 1a45 	vldr	s2, [pc, #276]	@ 800be38 <motorInit+0x2b0>
 800bd26:	eddf 0a44 	vldr	s1, [pc, #272]	@ 800be38 <motorInit+0x2b0>
 800bd2a:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800bd2e:	484c      	ldr	r0, [pc, #304]	@ (800be60 <motorInit+0x2d8>)
 800bd30:	f7ff fc3e 	bl	800b5b0 <pidInit>

            pidInit(&motor1.velocityPID, -0.02, -0.01, 0, 0, CURRENT_MAX, motor1.Ts);
 800bd34:	4b37      	ldr	r3, [pc, #220]	@ (800be14 <motorInit+0x28c>)
 800bd36:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bd3a:	eef0 2a67 	vmov.f32	s5, s15
 800bd3e:	ed9f 2a41 	vldr	s4, [pc, #260]	@ 800be44 <motorInit+0x2bc>
 800bd42:	eddf 1a3d 	vldr	s3, [pc, #244]	@ 800be38 <motorInit+0x2b0>
 800bd46:	ed9f 1a3c 	vldr	s2, [pc, #240]	@ 800be38 <motorInit+0x2b0>
 800bd4a:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 800be48 <motorInit+0x2c0>
 800bd4e:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 800be4c <motorInit+0x2c4>
 800bd52:	483f      	ldr	r0, [pc, #252]	@ (800be50 <motorInit+0x2c8>)
 800bd54:	f7ff fc2c 	bl	800b5b0 <pidInit>

            // pidInit(&motor1.anglePID, -0.001, -0.0001, 0, 0, CURRENT_MAX / 2, motor1.Ts);

            float kp, ki;
            kp = -200;
 800bd58:	4b34      	ldr	r3, [pc, #208]	@ (800be2c <motorInit+0x2a4>)
 800bd5a:	60fb      	str	r3, [r7, #12]
            ki = -20;
 800bd5c:	4b34      	ldr	r3, [pc, #208]	@ (800be30 <motorInit+0x2a8>)
 800bd5e:	60bb      	str	r3, [r7, #8]
            pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800bd60:	4b2c      	ldr	r3, [pc, #176]	@ (800be14 <motorInit+0x28c>)
 800bd62:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bd66:	eef0 2a67 	vmov.f32	s5, s15
 800bd6a:	ed9f 2a32 	vldr	s4, [pc, #200]	@ 800be34 <motorInit+0x2ac>
 800bd6e:	eddf 1a32 	vldr	s3, [pc, #200]	@ 800be38 <motorInit+0x2b0>
 800bd72:	ed9f 1a31 	vldr	s2, [pc, #196]	@ 800be38 <motorInit+0x2b0>
 800bd76:	edd7 0a02 	vldr	s1, [r7, #8]
 800bd7a:	ed97 0a03 	vldr	s0, [r7, #12]
 800bd7e:	482f      	ldr	r0, [pc, #188]	@ (800be3c <motorInit+0x2b4>)
 800bd80:	f7ff fc16 	bl	800b5b0 <pidInit>
            pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800bd84:	4b23      	ldr	r3, [pc, #140]	@ (800be14 <motorInit+0x28c>)
 800bd86:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bd8a:	eef0 2a67 	vmov.f32	s5, s15
 800bd8e:	ed9f 2a29 	vldr	s4, [pc, #164]	@ 800be34 <motorInit+0x2ac>
 800bd92:	eddf 1a29 	vldr	s3, [pc, #164]	@ 800be38 <motorInit+0x2b0>
 800bd96:	ed9f 1a28 	vldr	s2, [pc, #160]	@ 800be38 <motorInit+0x2b0>
 800bd9a:	edd7 0a02 	vldr	s1, [r7, #8]
 800bd9e:	ed97 0a03 	vldr	s0, [r7, #12]
 800bda2:	4827      	ldr	r0, [pc, #156]	@ (800be40 <motorInit+0x2b8>)
 800bda4:	f7ff fc04 	bl	800b5b0 <pidInit>
 800bda8:	e011      	b.n	800bdce <motorInit+0x246>
        }
        else
        {
            pidInit(&motor1.anglePID, 0.3, 0.001, 0, 0, UqMAX / 2, motor1.Ts);
 800bdaa:	4b1a      	ldr	r3, [pc, #104]	@ (800be14 <motorInit+0x28c>)
 800bdac:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bdb0:	eef0 2a67 	vmov.f32	s5, s15
 800bdb4:	ed9f 2a2b 	vldr	s4, [pc, #172]	@ 800be64 <motorInit+0x2dc>
 800bdb8:	eddf 1a1f 	vldr	s3, [pc, #124]	@ 800be38 <motorInit+0x2b0>
 800bdbc:	ed9f 1a1e 	vldr	s2, [pc, #120]	@ 800be38 <motorInit+0x2b0>
 800bdc0:	eddf 0a29 	vldr	s1, [pc, #164]	@ 800be68 <motorInit+0x2e0>
 800bdc4:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 800be6c <motorInit+0x2e4>
 800bdc8:	4825      	ldr	r0, [pc, #148]	@ (800be60 <motorInit+0x2d8>)
 800bdca:	f7ff fbf1 	bl	800b5b0 <pidInit>
        }
    }

    lpfInit(&motor1.IqFilter, 0.05, motor1.Ts);
 800bdce:	4b11      	ldr	r3, [pc, #68]	@ (800be14 <motorInit+0x28c>)
 800bdd0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bdd4:	eef0 0a67 	vmov.f32	s1, s15
 800bdd8:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 800be54 <motorInit+0x2cc>
 800bddc:	4824      	ldr	r0, [pc, #144]	@ (800be70 <motorInit+0x2e8>)
 800bdde:	f7ff fa79 	bl	800b2d4 <lpfInit>
    lpfInit(&motor1.IdFilter, 0.05, motor1.Ts);
 800bde2:	4b0c      	ldr	r3, [pc, #48]	@ (800be14 <motorInit+0x28c>)
 800bde4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bde8:	eef0 0a67 	vmov.f32	s1, s15
 800bdec:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 800be54 <motorInit+0x2cc>
 800bdf0:	4820      	ldr	r0, [pc, #128]	@ (800be74 <motorInit+0x2ec>)
 800bdf2:	f7ff fa6f 	bl	800b2d4 <lpfInit>
    lpfInit(&motor1.velocityFilter, 0.01, motor1.Ts);
 800bdf6:	4b07      	ldr	r3, [pc, #28]	@ (800be14 <motorInit+0x28c>)
 800bdf8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bdfc:	eef0 0a67 	vmov.f32	s1, s15
 800be00:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 800be78 <motorInit+0x2f0>
 800be04:	481d      	ldr	r0, [pc, #116]	@ (800be7c <motorInit+0x2f4>)
 800be06:	f7ff fa65 	bl	800b2d4 <lpfInit>
}
 800be0a:	bf00      	nop
 800be0c:	3718      	adds	r7, #24
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
 800be12:	bf00      	nop
 800be14:	2000067c 	.word	0x2000067c
 800be18:	0800bb55 	.word	0x0800bb55
 800be1c:	0800bb0d 	.word	0x0800bb0d
 800be20:	0800bb31 	.word	0x0800bb31
 800be24:	38d1b717 	.word	0x38d1b717
 800be28:	0800c6d9 	.word	0x0800c6d9
 800be2c:	c3480000 	.word	0xc3480000
 800be30:	c1a00000 	.word	0xc1a00000
 800be34:	40ddb3d7 	.word	0x40ddb3d7
 800be38:	00000000 	.word	0x00000000
 800be3c:	200006dc 	.word	0x200006dc
 800be40:	20000700 	.word	0x20000700
 800be44:	3f4ccccd 	.word	0x3f4ccccd
 800be48:	bc23d70a 	.word	0xbc23d70a
 800be4c:	bca3d70a 	.word	0xbca3d70a
 800be50:	20000724 	.word	0x20000724
 800be54:	3d4ccccd 	.word	0x3d4ccccd
 800be58:	3e19999a 	.word	0x3e19999a
 800be5c:	43960000 	.word	0x43960000
 800be60:	20000748 	.word	0x20000748
 800be64:	405db3d7 	.word	0x405db3d7
 800be68:	3a83126f 	.word	0x3a83126f
 800be6c:	3e99999a 	.word	0x3e99999a
 800be70:	2000076c 	.word	0x2000076c
 800be74:	20000778 	.word	0x20000778
 800be78:	3c23d70a 	.word	0x3c23d70a
 800be7c:	20000784 	.word	0x20000784

0800be80 <appInit>:
void appInit()
{
 800be80:	b580      	push	{r7, lr}
 800be82:	af00      	add	r7, sp, #0
    motorInit();
 800be84:	f7ff fe80 	bl	800bb88 <motorInit>
    devState = WORK;
 800be88:	4b02      	ldr	r3, [pc, #8]	@ (800be94 <appInit+0x14>)
 800be8a:	2201      	movs	r2, #1
 800be8c:	701a      	strb	r2, [r3, #0]
    //    MPU6050_Init(); // MPU6050初始化
}
 800be8e:	bf00      	nop
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop
 800be94:	2000008e 	.word	0x2000008e

0800be98 <appRunning>:
static bool zeroReset;
void appRunning()
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	af00      	add	r7, sp, #0

    getKeyState(&keyState);
 800be9c:	4813      	ldr	r0, [pc, #76]	@ (800beec <appRunning+0x54>)
 800be9e:	f000 fb85 	bl	800c5ac <getKeyState>
    commander_run(&motor1);
 800bea2:	4813      	ldr	r0, [pc, #76]	@ (800bef0 <appRunning+0x58>)
 800bea4:	f000 f924 	bl	800c0f0 <commander_run>
    if (++flashCnt >= 10)
 800bea8:	4b12      	ldr	r3, [pc, #72]	@ (800bef4 <appRunning+0x5c>)
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	3301      	adds	r3, #1
 800beae:	b2da      	uxtb	r2, r3
 800beb0:	4b10      	ldr	r3, [pc, #64]	@ (800bef4 <appRunning+0x5c>)
 800beb2:	701a      	strb	r2, [r3, #0]
 800beb4:	4b0f      	ldr	r3, [pc, #60]	@ (800bef4 <appRunning+0x5c>)
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	2b09      	cmp	r3, #9
 800beba:	d902      	bls.n	800bec2 <appRunning+0x2a>
        flashCnt = 0;
 800bebc:	4b0d      	ldr	r3, [pc, #52]	@ (800bef4 <appRunning+0x5c>)
 800bebe:	2200      	movs	r2, #0
 800bec0:	701a      	strb	r2, [r3, #0]

    ledOn = 0;
 800bec2:	4b0d      	ldr	r3, [pc, #52]	@ (800bef8 <appRunning+0x60>)
 800bec4:	2200      	movs	r2, #0
 800bec6:	701a      	strb	r2, [r3, #0]
    //         motor1.target = goalTorqueV;
    //     else
    //         motor1.target = goalTorqueC;
    // }

    switch (devState)
 800bec8:	4b0c      	ldr	r3, [pc, #48]	@ (800befc <appRunning+0x64>)
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d002      	beq.n	800bed6 <appRunning+0x3e>
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	d003      	beq.n	800bedc <appRunning+0x44>
 800bed4:	e005      	b.n	800bee2 <appRunning+0x4a>
    {
    case STANDBY:
        standingBy();
 800bed6:	f000 f813 	bl	800bf00 <standingBy>
        break;
 800beda:	e002      	b.n	800bee2 <appRunning+0x4a>

    case WORK:
        working();
 800bedc:	f000 f844 	bl	800bf68 <working>
        break;
 800bee0:	bf00      	nop
    }

    LED_drive();
 800bee2:	f000 fba1 	bl	800c628 <LED_drive>
}
 800bee6:	bf00      	nop
 800bee8:	bd80      	pop	{r7, pc}
 800beea:	bf00      	nop
 800beec:	20000678 	.word	0x20000678
 800bef0:	2000067c 	.word	0x2000067c
 800bef4:	20000679 	.word	0x20000679
 800bef8:	200008c4 	.word	0x200008c4
 800befc:	2000008e 	.word	0x2000008e

0800bf00 <standingBy>:
static void standingBy()
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	af00      	add	r7, sp, #0
    ledOn = 1;
 800bf04:	4b12      	ldr	r3, [pc, #72]	@ (800bf50 <standingBy+0x50>)
 800bf06:	2201      	movs	r2, #1
 800bf08:	701a      	strb	r2, [r3, #0]
    // setTorque(&motor1, 0, OPEN_LOOP_TORQUE, 0);
    if (zeroReset == 0)
 800bf0a:	4b12      	ldr	r3, [pc, #72]	@ (800bf54 <standingBy+0x54>)
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d106      	bne.n	800bf20 <standingBy+0x20>
    {
        goToZeroElecAngle(&motor1);
 800bf12:	4811      	ldr	r0, [pc, #68]	@ (800bf58 <standingBy+0x58>)
 800bf14:	f7fe fc66 	bl	800a7e4 <goToZeroElecAngle>
        zeroReset = 1;
 800bf18:	4b0e      	ldr	r3, [pc, #56]	@ (800bf54 <standingBy+0x54>)
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	701a      	strb	r2, [r3, #0]
 800bf1e:	e003      	b.n	800bf28 <standingBy+0x28>
    }
    else
        motor1.stopPwm();
 800bf20:	4b0d      	ldr	r3, [pc, #52]	@ (800bf58 <standingBy+0x58>)
 800bf22:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800bf26:	4798      	blx	r3

    if (keyState == USER3_SHORT)
 800bf28:	4b0c      	ldr	r3, [pc, #48]	@ (800bf5c <standingBy+0x5c>)
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	2b03      	cmp	r3, #3
 800bf2e:	d10d      	bne.n	800bf4c <standingBy+0x4c>
    {
        WORK_INIT;
 800bf30:	4b0b      	ldr	r3, [pc, #44]	@ (800bf60 <standingBy+0x60>)
 800bf32:	2201      	movs	r2, #1
 800bf34:	701a      	strb	r2, [r3, #0]
 800bf36:	4b0b      	ldr	r3, [pc, #44]	@ (800bf64 <standingBy+0x64>)
 800bf38:	2200      	movs	r2, #0
 800bf3a:	701a      	strb	r2, [r3, #0]
 800bf3c:	4b06      	ldr	r3, [pc, #24]	@ (800bf58 <standingBy+0x58>)
 800bf3e:	2202      	movs	r2, #2
 800bf40:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800bf44:	4b04      	ldr	r3, [pc, #16]	@ (800bf58 <standingBy+0x58>)
 800bf46:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800bf4a:	4798      	blx	r3
    }
}
 800bf4c:	bf00      	nop
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	200008c4 	.word	0x200008c4
 800bf54:	200007b8 	.word	0x200007b8
 800bf58:	2000067c 	.word	0x2000067c
 800bf5c:	20000678 	.word	0x20000678
 800bf60:	2000008e 	.word	0x2000008e
 800bf64:	20000679 	.word	0x20000679

0800bf68 <working>:

static void working(void)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	af00      	add	r7, sp, #0
    zeroReset = 0;
 800bf6c:	4b07      	ldr	r3, [pc, #28]	@ (800bf8c <working+0x24>)
 800bf6e:	2200      	movs	r2, #0
 800bf70:	701a      	strb	r2, [r3, #0]
    if (flashCnt < 5)
 800bf72:	4b07      	ldr	r3, [pc, #28]	@ (800bf90 <working+0x28>)
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	2b04      	cmp	r3, #4
 800bf78:	d802      	bhi.n	800bf80 <working+0x18>
        ledOn = 1;
 800bf7a:	4b06      	ldr	r3, [pc, #24]	@ (800bf94 <working+0x2c>)
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	701a      	strb	r2, [r3, #0]
    //        //     {
    //        //         bldcMotor.focTarget = 23;
    //        //     }
    //        // }
    //    }
}
 800bf80:	bf00      	nop
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr
 800bf8a:	bf00      	nop
 800bf8c:	200007b8 	.word	0x200007b8
 800bf90:	20000679 	.word	0x20000679
 800bf94:	200008c4 	.word	0x200008c4

0800bf98 <txDataProcess>:

void txDataProcess()
{
 800bf98:	b5b0      	push	{r4, r5, r7, lr}
 800bf9a:	b082      	sub	sp, #8
 800bf9c:	af02      	add	r7, sp, #8

    // sprintf(txBuffer, "target:%.2f fullAngle:%.2f velocity:%.2f Uq:%.2f Ud:%.2f Iq:%.2f Id:%.2f elec_angle:%.2f\n", motor1.target, motor1.magEncoder.fullAngle, motor1.magEncoder.velocity, motor1.Uq, motor1.Ud, motor1.Iq, motor1.Id, motor1.angle_el);

    // sprintf(txBuffer, "fullAngle:%.2f velocity:%.2f  shaftAngle:%.2f\n", motor1.magEncoder.fullAngle, motor1.magEncoder.velocity, motor1.magEncoder.shaftAngle);

    sprintf(txBuffer, "target:%f Uq:%f\n", motor1.target, motor1.Uq);
 800bf9e:	4b0d      	ldr	r3, [pc, #52]	@ (800bfd4 <txDataProcess+0x3c>)
 800bfa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7f4 faf8 	bl	8000598 <__aeabi_f2d>
 800bfa8:	4604      	mov	r4, r0
 800bfaa:	460d      	mov	r5, r1
 800bfac:	4b09      	ldr	r3, [pc, #36]	@ (800bfd4 <txDataProcess+0x3c>)
 800bfae:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7f4 faf0 	bl	8000598 <__aeabi_f2d>
 800bfb8:	4602      	mov	r2, r0
 800bfba:	460b      	mov	r3, r1
 800bfbc:	e9cd 2300 	strd	r2, r3, [sp]
 800bfc0:	4622      	mov	r2, r4
 800bfc2:	462b      	mov	r3, r5
 800bfc4:	4904      	ldr	r1, [pc, #16]	@ (800bfd8 <txDataProcess+0x40>)
 800bfc6:	4805      	ldr	r0, [pc, #20]	@ (800bfdc <txDataProcess+0x44>)
 800bfc8:	f002 fa92 	bl	800e4f0 <siprintf>
    // sprintf(txBuffer, "offset_ia:%f offset_ib:%f, Ia:%f, Ib:%f\n", motor1.offset_ia, motor1.offset_ib, motor1.Ia, motor1.Ib);
}
 800bfcc:	bf00      	nop
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bdb0      	pop	{r4, r5, r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	2000067c 	.word	0x2000067c
 800bfd8:	080114f0 	.word	0x080114f0
 800bfdc:	200007bc 	.word	0x200007bc

0800bfe0 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_SET);
 800bfe8:	2201      	movs	r2, #1
 800bfea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800bfee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bff2:	f7f9 fed5 	bl	8005da0 <HAL_GPIO_WritePin>
    if (hadc == &hadc1)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	4a0d      	ldr	r2, [pc, #52]	@ (800c030 <HAL_ADCEx_InjectedConvCpltCallback+0x50>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d10d      	bne.n	800c01a <HAL_ADCEx_InjectedConvCpltCallback+0x3a>
    {

        foc(&motor1, hadc1.Instance->JDR1, hadc2.Instance->JDR1);
 800bffe:	4b0c      	ldr	r3, [pc, #48]	@ (800c030 <HAL_ADCEx_InjectedConvCpltCallback+0x50>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 800c006:	4b0b      	ldr	r3, [pc, #44]	@ (800c034 <HAL_ADCEx_InjectedConvCpltCallback+0x54>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c00e:	461a      	mov	r2, r3
 800c010:	4809      	ldr	r0, [pc, #36]	@ (800c038 <HAL_ADCEx_InjectedConvCpltCallback+0x58>)
 800c012:	f7fe fd43 	bl	800aa9c <foc>
        // svpwm_test(&motor1, 2.0f, 0.01f);
        dealPer100us();
 800c016:	f000 fc21 	bl	800c85c <dealPer100us>

        memcpy(tempData, (uint8_t *)&load_data, sizeof(load_data));
        HAL_UART_Transmit_DMA(&huart3, (uint8_t *)tempData, sizeof(tempData));
#endif
    }
    HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 800c01a:	2200      	movs	r2, #0
 800c01c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800c020:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c024:	f7f9 febc 	bl	8005da0 <HAL_GPIO_WritePin>
}
 800c028:	bf00      	nop
 800c02a:	3708      	adds	r7, #8
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}
 800c030:	20000274 	.word	0x20000274
 800c034:	200002e0 	.word	0x200002e0
 800c038:	2000067c 	.word	0x2000067c

0800c03c <HAL_UARTEx_RxEventCallback>:
bool toProcessData;
uint8_t aRxBuffer;
float comm1, comm2, comm3, comm4, comm5, comm6, comm7, comm8, comm9, comm10, comm11;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	460b      	mov	r3, r1
 800c046:	807b      	strh	r3, [r7, #2]
  if (huart == &huart3)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	4a07      	ldr	r2, [pc, #28]	@ (800c068 <HAL_UARTEx_RxEventCallback+0x2c>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d107      	bne.n	800c060 <HAL_UARTEx_RxEventCallback+0x24>
  {
    // HAL_UART_Transmit_DMA(&huart3, rxBuffer, Size);
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 800c050:	2264      	movs	r2, #100	@ 0x64
 800c052:	4906      	ldr	r1, [pc, #24]	@ (800c06c <HAL_UARTEx_RxEventCallback+0x30>)
 800c054:	4804      	ldr	r0, [pc, #16]	@ (800c068 <HAL_UARTEx_RxEventCallback+0x2c>)
 800c056:	f7fe fb22 	bl	800a69e <HAL_UARTEx_ReceiveToIdle_DMA>
    toProcessData = 1;
 800c05a:	4b05      	ldr	r3, [pc, #20]	@ (800c070 <HAL_UARTEx_RxEventCallback+0x34>)
 800c05c:	2201      	movs	r2, #1
 800c05e:	701a      	strb	r2, [r3, #0]
  }
}
 800c060:	bf00      	nop
 800c062:	3708      	adds	r7, #8
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}
 800c068:	2000051c 	.word	0x2000051c
 800c06c:	20000820 	.word	0x20000820
 800c070:	20000884 	.word	0x20000884

0800c074 <FOC_log>:

// DMA模式
void FOC_log(const char *format, ...)
{
 800c074:	b40f      	push	{r0, r1, r2, r3}
 800c076:	b580      	push	{r7, lr}
 800c078:	b0c2      	sub	sp, #264	@ 0x108
 800c07a:	af00      	add	r7, sp, #0
  // length = vsnprintf((char *)txBuffer, sizeof(txBuffer), (char *)format, args);
  // va_end(args);
  // HAL_UART_Transmit_DMA(&huart3, (const char *)txBuffer, length);

  va_list args;           // 定义参数列表变量
  va_start(args, format); // 从format位置开始接收参数表，放在arg里面
 800c07c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800c080:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

  char strBuf[256];               // 定义输出的字符串
  vsprintf(strBuf, format, args); // 使用vsprintf将格式化的数据写入缓冲区
 800c084:	1d3b      	adds	r3, r7, #4
 800c086:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800c08a:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 800c08e:	4618      	mov	r0, r3
 800c090:	f002 faa8 	bl	800e5e4 <vsiprintf>
  va_end(args);                   // 结束可变参数的使用

  // 等待上次的数据发送完成，避免新的数据覆盖正在传输的数据，导致混乱
  while (HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX)
 800c094:	bf00      	nop
 800c096:	480d      	ldr	r0, [pc, #52]	@ (800c0cc <FOC_log+0x58>)
 800c098:	f7fd fab4 	bl	8009604 <HAL_UART_GetState>
 800c09c:	4603      	mov	r3, r0
 800c09e:	2b21      	cmp	r3, #33	@ 0x21
 800c0a0:	d0f9      	beq.n	800c096 <FOC_log+0x22>
  {
    // Wait for DMA transfer to complete
  }
  HAL_UART_Transmit(&huart3, (uint8_t *)strBuf, strlen(strBuf), 1000);
 800c0a2:	1d3b      	adds	r3, r7, #4
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f7f4 f90b 	bl	80002c0 <strlen>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	b29a      	uxth	r2, r3
 800c0ae:	1d39      	adds	r1, r7, #4
 800c0b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c0b4:	4805      	ldr	r0, [pc, #20]	@ (800c0cc <FOC_log+0x58>)
 800c0b6:	f7fc fe41 	bl	8008d3c <HAL_UART_Transmit>
}
 800c0ba:	bf00      	nop
 800c0bc:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c0c6:	b004      	add	sp, #16
 800c0c8:	4770      	bx	lr
 800c0ca:	bf00      	nop
 800c0cc:	2000051c 	.word	0x2000051c

0800c0d0 <printLog>:
//   va_end(args);
//   HAL_UART_Transmit_DMA(&huart3, (const char *)txBuffer, length);
// }

void printLog()
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	af00      	add	r7, sp, #0

#if SHOW_WAVE == 0
  txDataProcess();
 800c0d4:	f7ff ff60 	bl	800bf98 <txDataProcess>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800c0d8:	2264      	movs	r2, #100	@ 0x64
 800c0da:	4903      	ldr	r1, [pc, #12]	@ (800c0e8 <printLog+0x18>)
 800c0dc:	4803      	ldr	r0, [pc, #12]	@ (800c0ec <printLog+0x1c>)
 800c0de:	f7fc febb 	bl	8008e58 <HAL_UART_Transmit_DMA>
#endif
}
 800c0e2:	bf00      	nop
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	200007bc 	.word	0x200007bc
 800c0ec:	2000051c 	.word	0x2000051c

0800c0f0 <commander_run>:

void commander_run(BldcMotor *motor)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b082      	sub	sp, #8
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  if (toProcessData == 1)
 800c0f8:	4b1c      	ldr	r3, [pc, #112]	@ (800c16c <commander_run+0x7c>)
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d131      	bne.n	800c164 <commander_run+0x74>
  {
    // memset(txBuffer, '\0', sizeof(txBuffer));

    switch (rxBuffer[0])
 800c100:	4b1b      	ldr	r3, [pc, #108]	@ (800c170 <commander_run+0x80>)
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	2b48      	cmp	r3, #72	@ 0x48
 800c106:	d002      	beq.n	800c10e <commander_run+0x1e>
 800c108:	2b54      	cmp	r3, #84	@ 0x54
 800c10a:	d00a      	beq.n	800c122 <commander_run+0x32>
 800c10c:	e027      	b.n	800c15e <commander_run+0x6e>
    {
    case 'H':
      // sprintf(sndBuff, "Hello World!\r\n");
      // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)sndBuff, sizeof(sndBuff));
      sprintf(txBuffer, "Hello World!\r\n");
 800c10e:	4919      	ldr	r1, [pc, #100]	@ (800c174 <commander_run+0x84>)
 800c110:	4819      	ldr	r0, [pc, #100]	@ (800c178 <commander_run+0x88>)
 800c112:	f002 f9ed 	bl	800e4f0 <siprintf>
      HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800c116:	2264      	movs	r2, #100	@ 0x64
 800c118:	4917      	ldr	r1, [pc, #92]	@ (800c178 <commander_run+0x88>)
 800c11a:	4818      	ldr	r0, [pc, #96]	@ (800c17c <commander_run+0x8c>)
 800c11c:	f7fc fe9c 	bl	8008e58 <HAL_UART_Transmit_DMA>
      break;
 800c120:	e01d      	b.n	800c15e <commander_run+0x6e>
    case 'T': // T6.28

      motor->target = atof((const char *)(rxBuffer + 1));
 800c122:	4b17      	ldr	r3, [pc, #92]	@ (800c180 <commander_run+0x90>)
 800c124:	4618      	mov	r0, r3
 800c126:	f000 fc9b 	bl	800ca60 <atof>
 800c12a:	ec53 2b10 	vmov	r2, r3, d0
 800c12e:	4610      	mov	r0, r2
 800c130:	4619      	mov	r1, r3
 800c132:	f7f4 fd81 	bl	8000c38 <__aeabi_d2f>
 800c136:	4602      	mov	r2, r0
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	631a      	str	r2, [r3, #48]	@ 0x30
      sprintf(txBuffer, "Target=%.2f\r\n", motor->target);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c140:	4618      	mov	r0, r3
 800c142:	f7f4 fa29 	bl	8000598 <__aeabi_f2d>
 800c146:	4602      	mov	r2, r0
 800c148:	460b      	mov	r3, r1
 800c14a:	490e      	ldr	r1, [pc, #56]	@ (800c184 <commander_run+0x94>)
 800c14c:	480a      	ldr	r0, [pc, #40]	@ (800c178 <commander_run+0x88>)
 800c14e:	f002 f9cf 	bl	800e4f0 <siprintf>
      HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800c152:	2264      	movs	r2, #100	@ 0x64
 800c154:	4908      	ldr	r1, [pc, #32]	@ (800c178 <commander_run+0x88>)
 800c156:	4809      	ldr	r0, [pc, #36]	@ (800c17c <commander_run+0x8c>)
 800c158:	f7fc fe7e 	bl	8008e58 <HAL_UART_Transmit_DMA>
      // printf("%s", sndBuff);
      // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)sndBuff, sizeof(sndBuff));
      break;
 800c15c:	bf00      	nop
      // case 'A': // A
      //   sprintf(sndBuff, "Ang=%.2f\r\n", shaftAngle);
      //   printf("%s", sndBuff);
      //   break;
    }
    toProcessData = 0;
 800c15e:	4b03      	ldr	r3, [pc, #12]	@ (800c16c <commander_run+0x7c>)
 800c160:	2200      	movs	r2, #0
 800c162:	701a      	strb	r2, [r3, #0]
  }
}
 800c164:	bf00      	nop
 800c166:	3708      	adds	r7, #8
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	20000884 	.word	0x20000884
 800c170:	20000820 	.word	0x20000820
 800c174:	08011504 	.word	0x08011504
 800c178:	200007bc 	.word	0x200007bc
 800c17c:	2000051c 	.word	0x2000051c
 800c180:	20000821 	.word	0x20000821
 800c184:	08011514 	.word	0x08011514

0800c188 <getKeyFlags>:
#include "key.h"

static KeyStruct keyStruct[KEY_NUM];

uint getKeyFlags()
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	af00      	add	r7, sp, #0
    static uint keyFlagsBak; // back up keyflags for filtering
    static uchar filterCnt;
    static Byte flags;       // real time key flags with bits operation
    static uint keyFlagsBuf; // return key flags after filtering

    flags.byte = 0;
 800c18c:	4b3b      	ldr	r3, [pc, #236]	@ (800c27c <getKeyFlags+0xf4>)
 800c18e:	2200      	movs	r2, #0
 800c190:	701a      	strb	r2, [r3, #0]

    // when IO been multiplexed
    if (HAL_GPIO_ReadPin(SW_PORT, SW1_PIN) == 1)
 800c192:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c196:	483a      	ldr	r0, [pc, #232]	@ (800c280 <getKeyFlags+0xf8>)
 800c198:	f7f9 fdea 	bl	8005d70 <HAL_GPIO_ReadPin>
 800c19c:	4603      	mov	r3, r0
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	d104      	bne.n	800c1ac <getKeyFlags+0x24>
    {
        flags.bits.b0 = 1; // SW1
 800c1a2:	4a36      	ldr	r2, [pc, #216]	@ (800c27c <getKeyFlags+0xf4>)
 800c1a4:	7813      	ldrb	r3, [r2, #0]
 800c1a6:	f043 0301 	orr.w	r3, r3, #1
 800c1aa:	7013      	strb	r3, [r2, #0]
    }

    if (HAL_GPIO_ReadPin(SW_PORT, SW2_PIN) == 1)
 800c1ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800c1b0:	4833      	ldr	r0, [pc, #204]	@ (800c280 <getKeyFlags+0xf8>)
 800c1b2:	f7f9 fddd 	bl	8005d70 <HAL_GPIO_ReadPin>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d104      	bne.n	800c1c6 <getKeyFlags+0x3e>
    {
        flags.bits.b1 = 1; // SW2
 800c1bc:	4a2f      	ldr	r2, [pc, #188]	@ (800c27c <getKeyFlags+0xf4>)
 800c1be:	7813      	ldrb	r3, [r2, #0]
 800c1c0:	f043 0302 	orr.w	r3, r3, #2
 800c1c4:	7013      	strb	r3, [r2, #0]
    }

    if (HAL_GPIO_ReadPin(SW_PORT, SW3_PIN) == 1)
 800c1c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800c1ca:	482d      	ldr	r0, [pc, #180]	@ (800c280 <getKeyFlags+0xf8>)
 800c1cc:	f7f9 fdd0 	bl	8005d70 <HAL_GPIO_ReadPin>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	2b01      	cmp	r3, #1
 800c1d4:	d104      	bne.n	800c1e0 <getKeyFlags+0x58>
    {
        flags.bits.b2 = 1; // SW3
 800c1d6:	4a29      	ldr	r2, [pc, #164]	@ (800c27c <getKeyFlags+0xf4>)
 800c1d8:	7813      	ldrb	r3, [r2, #0]
 800c1da:	f043 0304 	orr.w	r3, r3, #4
 800c1de:	7013      	strb	r3, [r2, #0]
    }

    if (flags.byte == keyFlagsBak)
 800c1e0:	4b26      	ldr	r3, [pc, #152]	@ (800c27c <getKeyFlags+0xf4>)
 800c1e2:	781b      	ldrb	r3, [r3, #0]
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	4b27      	ldr	r3, [pc, #156]	@ (800c284 <getKeyFlags+0xfc>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d13c      	bne.n	800c268 <getKeyFlags+0xe0>
    {
        if (flags.bits.b0)
 800c1ee:	4b23      	ldr	r3, [pc, #140]	@ (800c27c <getKeyFlags+0xf4>)
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	f003 0301 	and.w	r3, r3, #1
 800c1f6:	b2db      	uxtb	r3, r3
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d006      	beq.n	800c20a <getKeyFlags+0x82>
            keyFlagsBuf |= 1;
 800c1fc:	4b22      	ldr	r3, [pc, #136]	@ (800c288 <getKeyFlags+0x100>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f043 0301 	orr.w	r3, r3, #1
 800c204:	4a20      	ldr	r2, [pc, #128]	@ (800c288 <getKeyFlags+0x100>)
 800c206:	6013      	str	r3, [r2, #0]
 800c208:	e005      	b.n	800c216 <getKeyFlags+0x8e>
        else
            keyFlagsBuf &= ~1;
 800c20a:	4b1f      	ldr	r3, [pc, #124]	@ (800c288 <getKeyFlags+0x100>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f023 0301 	bic.w	r3, r3, #1
 800c212:	4a1d      	ldr	r2, [pc, #116]	@ (800c288 <getKeyFlags+0x100>)
 800c214:	6013      	str	r3, [r2, #0]

        if (flags.bits.b1)
 800c216:	4b19      	ldr	r3, [pc, #100]	@ (800c27c <getKeyFlags+0xf4>)
 800c218:	781b      	ldrb	r3, [r3, #0]
 800c21a:	f003 0302 	and.w	r3, r3, #2
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	2b00      	cmp	r3, #0
 800c222:	d006      	beq.n	800c232 <getKeyFlags+0xaa>
            keyFlagsBuf |= 1 << 1;
 800c224:	4b18      	ldr	r3, [pc, #96]	@ (800c288 <getKeyFlags+0x100>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f043 0302 	orr.w	r3, r3, #2
 800c22c:	4a16      	ldr	r2, [pc, #88]	@ (800c288 <getKeyFlags+0x100>)
 800c22e:	6013      	str	r3, [r2, #0]
 800c230:	e005      	b.n	800c23e <getKeyFlags+0xb6>
        else
            keyFlagsBuf &= ~(1 << 1);
 800c232:	4b15      	ldr	r3, [pc, #84]	@ (800c288 <getKeyFlags+0x100>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f023 0302 	bic.w	r3, r3, #2
 800c23a:	4a13      	ldr	r2, [pc, #76]	@ (800c288 <getKeyFlags+0x100>)
 800c23c:	6013      	str	r3, [r2, #0]

        if (flags.bits.b2)
 800c23e:	4b0f      	ldr	r3, [pc, #60]	@ (800c27c <getKeyFlags+0xf4>)
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	f003 0304 	and.w	r3, r3, #4
 800c246:	b2db      	uxtb	r3, r3
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d006      	beq.n	800c25a <getKeyFlags+0xd2>
            keyFlagsBuf |= 1 << 2;
 800c24c:	4b0e      	ldr	r3, [pc, #56]	@ (800c288 <getKeyFlags+0x100>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f043 0304 	orr.w	r3, r3, #4
 800c254:	4a0c      	ldr	r2, [pc, #48]	@ (800c288 <getKeyFlags+0x100>)
 800c256:	6013      	str	r3, [r2, #0]
 800c258:	e00b      	b.n	800c272 <getKeyFlags+0xea>
        else
            keyFlagsBuf &= ~(1 << 2);
 800c25a:	4b0b      	ldr	r3, [pc, #44]	@ (800c288 <getKeyFlags+0x100>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f023 0304 	bic.w	r3, r3, #4
 800c262:	4a09      	ldr	r2, [pc, #36]	@ (800c288 <getKeyFlags+0x100>)
 800c264:	6013      	str	r3, [r2, #0]
 800c266:	e004      	b.n	800c272 <getKeyFlags+0xea>
    }
    else
    {
        keyFlagsBak = flags.byte;
 800c268:	4b04      	ldr	r3, [pc, #16]	@ (800c27c <getKeyFlags+0xf4>)
 800c26a:	781b      	ldrb	r3, [r3, #0]
 800c26c:	461a      	mov	r2, r3
 800c26e:	4b05      	ldr	r3, [pc, #20]	@ (800c284 <getKeyFlags+0xfc>)
 800c270:	601a      	str	r2, [r3, #0]
    }
#if DEBUG_KEY
    // displayStuff = keyFlagsBuf;
#endif

    return keyFlagsBuf;
 800c272:	4b05      	ldr	r3, [pc, #20]	@ (800c288 <getKeyFlags+0x100>)
 800c274:	681b      	ldr	r3, [r3, #0]
}
 800c276:	4618      	mov	r0, r3
 800c278:	bd80      	pop	{r7, pc}
 800c27a:	bf00      	nop
 800c27c:	200008b8 	.word	0x200008b8
 800c280:	48000800 	.word	0x48000800
 800c284:	200008bc 	.word	0x200008bc
 800c288:	200008c0 	.word	0x200008c0

0800c28c <keyScan>:

void keyScan()
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0

    uint keyFlags;

    keyFlags = getKeyFlags();
 800c292:	f7ff ff79 	bl	800c188 <getKeyFlags>
 800c296:	6038      	str	r0, [r7, #0]

    if (keyFlags == 0)
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d13b      	bne.n	800c316 <keyScan+0x8a>
    {
        uchar i;
        for (i = 0; i < KEY_NUM; i++)
 800c29e:	2300      	movs	r3, #0
 800c2a0:	71fb      	strb	r3, [r7, #7]
 800c2a2:	e035      	b.n	800c310 <keyScan+0x84>
        {
            if (keyStruct[i].keyType == LONG_WITH_SHORT && keyStruct[i].trigCnt > 0)
 800c2a4:	79fa      	ldrb	r2, [r7, #7]
 800c2a6:	4992      	ldr	r1, [pc, #584]	@ (800c4f0 <keyScan+0x264>)
 800c2a8:	4613      	mov	r3, r2
 800c2aa:	005b      	lsls	r3, r3, #1
 800c2ac:	4413      	add	r3, r2
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	440b      	add	r3, r1
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d114      	bne.n	800c2e2 <keyScan+0x56>
 800c2b8:	79fa      	ldrb	r2, [r7, #7]
 800c2ba:	498d      	ldr	r1, [pc, #564]	@ (800c4f0 <keyScan+0x264>)
 800c2bc:	4613      	mov	r3, r2
 800c2be:	005b      	lsls	r3, r3, #1
 800c2c0:	4413      	add	r3, r2
 800c2c2:	009b      	lsls	r3, r3, #2
 800c2c4:	440b      	add	r3, r1
 800c2c6:	3304      	adds	r3, #4
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d009      	beq.n	800c2e2 <keyScan+0x56>
            {
                keyStruct[i].trigType = TRIG_SHORT;
 800c2ce:	79fa      	ldrb	r2, [r7, #7]
 800c2d0:	4987      	ldr	r1, [pc, #540]	@ (800c4f0 <keyScan+0x264>)
 800c2d2:	4613      	mov	r3, r2
 800c2d4:	005b      	lsls	r3, r3, #1
 800c2d6:	4413      	add	r3, r2
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	440b      	add	r3, r1
 800c2dc:	3308      	adds	r3, #8
 800c2de:	2201      	movs	r2, #1
 800c2e0:	701a      	strb	r2, [r3, #0]
            }
            keyStruct[i].trigCnt = 0;
 800c2e2:	79fa      	ldrb	r2, [r7, #7]
 800c2e4:	4982      	ldr	r1, [pc, #520]	@ (800c4f0 <keyScan+0x264>)
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	005b      	lsls	r3, r3, #1
 800c2ea:	4413      	add	r3, r2
 800c2ec:	009b      	lsls	r3, r3, #2
 800c2ee:	440b      	add	r3, r1
 800c2f0:	3304      	adds	r3, #4
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	601a      	str	r2, [r3, #0]
            keyStruct[i].preKeyValue = NO_TRIG;
 800c2f6:	79fa      	ldrb	r2, [r7, #7]
 800c2f8:	497d      	ldr	r1, [pc, #500]	@ (800c4f0 <keyScan+0x264>)
 800c2fa:	4613      	mov	r3, r2
 800c2fc:	005b      	lsls	r3, r3, #1
 800c2fe:	4413      	add	r3, r2
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	440b      	add	r3, r1
 800c304:	3309      	adds	r3, #9
 800c306:	2200      	movs	r2, #0
 800c308:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < KEY_NUM; i++)
 800c30a:	79fb      	ldrb	r3, [r7, #7]
 800c30c:	3301      	adds	r3, #1
 800c30e:	71fb      	strb	r3, [r7, #7]
 800c310:	79fb      	ldrb	r3, [r7, #7]
 800c312:	2b03      	cmp	r3, #3
 800c314:	d9c6      	bls.n	800c2a4 <keyScan+0x18>
    //                keyStruct[0].trigType = keyStruct[1].preKeyValue;
    //            }
    //        }
    //    }

    if (keyStruct[1].preKeyValue == NO_TRIG)
 800c316:	4b76      	ldr	r3, [pc, #472]	@ (800c4f0 <keyScan+0x264>)
 800c318:	7d5b      	ldrb	r3, [r3, #21]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d131      	bne.n	800c382 <keyScan+0xf6>
    {
        if (keyFlags == K(1))
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	2b01      	cmp	r3, #1
 800c322:	d15d      	bne.n	800c3e0 <keyScan+0x154>
        {
            if (keyStruct[1].preKeyValue == NO_TRIG)
 800c324:	4b72      	ldr	r3, [pc, #456]	@ (800c4f0 <keyScan+0x264>)
 800c326:	7d5b      	ldrb	r3, [r3, #21]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d159      	bne.n	800c3e0 <keyScan+0x154>
            {
                if (keyStruct[1].keyType == SHORT || keyStruct[1].keyType == CONTINUOUS)
 800c32c:	4b70      	ldr	r3, [pc, #448]	@ (800c4f0 <keyScan+0x264>)
 800c32e:	7b1b      	ldrb	r3, [r3, #12]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d003      	beq.n	800c33c <keyScan+0xb0>
 800c334:	4b6e      	ldr	r3, [pc, #440]	@ (800c4f0 <keyScan+0x264>)
 800c336:	7b1b      	ldrb	r3, [r3, #12]
 800c338:	2b02      	cmp	r3, #2
 800c33a:	d106      	bne.n	800c34a <keyScan+0xbe>
                {
                    keyStruct[1].trigType = TRIG_SHORT;
 800c33c:	4b6c      	ldr	r3, [pc, #432]	@ (800c4f0 <keyScan+0x264>)
 800c33e:	2201      	movs	r2, #1
 800c340:	751a      	strb	r2, [r3, #20]
                    keyStruct[1].preKeyValue = TRIG_SHORT;
 800c342:	4b6b      	ldr	r3, [pc, #428]	@ (800c4f0 <keyScan+0x264>)
 800c344:	2201      	movs	r2, #1
 800c346:	755a      	strb	r2, [r3, #21]
 800c348:	e04a      	b.n	800c3e0 <keyScan+0x154>
                }
                else if (keyStruct[1].keyType == LONG_WITH_SHORT || keyStruct[1].keyType == LONG)
 800c34a:	4b69      	ldr	r3, [pc, #420]	@ (800c4f0 <keyScan+0x264>)
 800c34c:	7b1b      	ldrb	r3, [r3, #12]
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d003      	beq.n	800c35a <keyScan+0xce>
 800c352:	4b67      	ldr	r3, [pc, #412]	@ (800c4f0 <keyScan+0x264>)
 800c354:	7b1b      	ldrb	r3, [r3, #12]
 800c356:	2b03      	cmp	r3, #3
 800c358:	d142      	bne.n	800c3e0 <keyScan+0x154>
                {
                    if (++keyStruct[1].trigCnt >= KEY1_LONG_CNT)
 800c35a:	4b65      	ldr	r3, [pc, #404]	@ (800c4f0 <keyScan+0x264>)
 800c35c:	691b      	ldr	r3, [r3, #16]
 800c35e:	3301      	adds	r3, #1
 800c360:	4a63      	ldr	r2, [pc, #396]	@ (800c4f0 <keyScan+0x264>)
 800c362:	6113      	str	r3, [r2, #16]
 800c364:	4b62      	ldr	r3, [pc, #392]	@ (800c4f0 <keyScan+0x264>)
 800c366:	691b      	ldr	r3, [r3, #16]
 800c368:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800c36c:	d338      	bcc.n	800c3e0 <keyScan+0x154>
                    {
                        keyStruct[1].trigCnt = 0;
 800c36e:	4b60      	ldr	r3, [pc, #384]	@ (800c4f0 <keyScan+0x264>)
 800c370:	2200      	movs	r2, #0
 800c372:	611a      	str	r2, [r3, #16]
                        keyStruct[1].trigType = TRIG_LONG;
 800c374:	4b5e      	ldr	r3, [pc, #376]	@ (800c4f0 <keyScan+0x264>)
 800c376:	2202      	movs	r2, #2
 800c378:	751a      	strb	r2, [r3, #20]
                        keyStruct[1].preKeyValue = TRIG_LONG;
 800c37a:	4b5d      	ldr	r3, [pc, #372]	@ (800c4f0 <keyScan+0x264>)
 800c37c:	2202      	movs	r2, #2
 800c37e:	755a      	strb	r2, [r3, #21]
 800c380:	e02e      	b.n	800c3e0 <keyScan+0x154>
                    }
                }
            }
        }
    }
    else if (keyStruct[1].keyType == CONTINUOUS)
 800c382:	4b5b      	ldr	r3, [pc, #364]	@ (800c4f0 <keyScan+0x264>)
 800c384:	7b1b      	ldrb	r3, [r3, #12]
 800c386:	2b02      	cmp	r3, #2
 800c388:	d12a      	bne.n	800c3e0 <keyScan+0x154>
    {
        if (keyStruct[1].preKeyValue == TRIG_SHORT) // short key
 800c38a:	4b59      	ldr	r3, [pc, #356]	@ (800c4f0 <keyScan+0x264>)
 800c38c:	7d5b      	ldrb	r3, [r3, #21]
 800c38e:	2b01      	cmp	r3, #1
 800c390:	d112      	bne.n	800c3b8 <keyScan+0x12c>
        {
            if (++keyStruct[1].trigCnt >= CONTINUOUS_TRIG_CNT)
 800c392:	4b57      	ldr	r3, [pc, #348]	@ (800c4f0 <keyScan+0x264>)
 800c394:	691b      	ldr	r3, [r3, #16]
 800c396:	3301      	adds	r3, #1
 800c398:	4a55      	ldr	r2, [pc, #340]	@ (800c4f0 <keyScan+0x264>)
 800c39a:	6113      	str	r3, [r2, #16]
 800c39c:	4b54      	ldr	r3, [pc, #336]	@ (800c4f0 <keyScan+0x264>)
 800c39e:	691b      	ldr	r3, [r3, #16]
 800c3a0:	2b63      	cmp	r3, #99	@ 0x63
 800c3a2:	d91d      	bls.n	800c3e0 <keyScan+0x154>
            {
                keyStruct[1].trigCnt = 0;
 800c3a4:	4b52      	ldr	r3, [pc, #328]	@ (800c4f0 <keyScan+0x264>)
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	611a      	str	r2, [r3, #16]
                keyStruct[1].trigType = TRIG_LONG; // long
 800c3aa:	4b51      	ldr	r3, [pc, #324]	@ (800c4f0 <keyScan+0x264>)
 800c3ac:	2202      	movs	r2, #2
 800c3ae:	751a      	strb	r2, [r3, #20]
                keyStruct[1].preKeyValue = TRIG_LONG;
 800c3b0:	4b4f      	ldr	r3, [pc, #316]	@ (800c4f0 <keyScan+0x264>)
 800c3b2:	2202      	movs	r2, #2
 800c3b4:	755a      	strb	r2, [r3, #21]
 800c3b6:	e013      	b.n	800c3e0 <keyScan+0x154>
            }
        }
        else if (keyStruct[1].preKeyValue == TRIG_LONG) // long key
 800c3b8:	4b4d      	ldr	r3, [pc, #308]	@ (800c4f0 <keyScan+0x264>)
 800c3ba:	7d5b      	ldrb	r3, [r3, #21]
 800c3bc:	2b02      	cmp	r3, #2
 800c3be:	d10f      	bne.n	800c3e0 <keyScan+0x154>
        {
            if (++keyStruct[1].trigCnt >= CONTINUOUS_INTEVAL)
 800c3c0:	4b4b      	ldr	r3, [pc, #300]	@ (800c4f0 <keyScan+0x264>)
 800c3c2:	691b      	ldr	r3, [r3, #16]
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	4a4a      	ldr	r2, [pc, #296]	@ (800c4f0 <keyScan+0x264>)
 800c3c8:	6113      	str	r3, [r2, #16]
 800c3ca:	4b49      	ldr	r3, [pc, #292]	@ (800c4f0 <keyScan+0x264>)
 800c3cc:	691b      	ldr	r3, [r3, #16]
 800c3ce:	2b27      	cmp	r3, #39	@ 0x27
 800c3d0:	d906      	bls.n	800c3e0 <keyScan+0x154>
            {
                keyStruct[1].trigCnt = 0;
 800c3d2:	4b47      	ldr	r3, [pc, #284]	@ (800c4f0 <keyScan+0x264>)
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	611a      	str	r2, [r3, #16]
                keyStruct[1].trigType = keyStruct[1].preKeyValue;
 800c3d8:	4b45      	ldr	r3, [pc, #276]	@ (800c4f0 <keyScan+0x264>)
 800c3da:	7d5a      	ldrb	r2, [r3, #21]
 800c3dc:	4b44      	ldr	r3, [pc, #272]	@ (800c4f0 <keyScan+0x264>)
 800c3de:	751a      	strb	r2, [r3, #20]
            }
        }
    }

    if (keyStruct[2].preKeyValue == NO_TRIG)
 800c3e0:	4b43      	ldr	r3, [pc, #268]	@ (800c4f0 <keyScan+0x264>)
 800c3e2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d131      	bne.n	800c44e <keyScan+0x1c2>
    {
        if (keyFlags == K(2))
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	2b02      	cmp	r3, #2
 800c3ee:	d163      	bne.n	800c4b8 <keyScan+0x22c>
        {

            if (keyStruct[2].keyType == SHORT || keyStruct[2].keyType == CONTINUOUS)
 800c3f0:	4b3f      	ldr	r3, [pc, #252]	@ (800c4f0 <keyScan+0x264>)
 800c3f2:	7e1b      	ldrb	r3, [r3, #24]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d003      	beq.n	800c400 <keyScan+0x174>
 800c3f8:	4b3d      	ldr	r3, [pc, #244]	@ (800c4f0 <keyScan+0x264>)
 800c3fa:	7e1b      	ldrb	r3, [r3, #24]
 800c3fc:	2b02      	cmp	r3, #2
 800c3fe:	d108      	bne.n	800c412 <keyScan+0x186>
            {
                keyStruct[2].trigType = TRIG_SHORT;
 800c400:	4b3b      	ldr	r3, [pc, #236]	@ (800c4f0 <keyScan+0x264>)
 800c402:	2201      	movs	r2, #1
 800c404:	f883 2020 	strb.w	r2, [r3, #32]
                keyStruct[2].preKeyValue = TRIG_SHORT;
 800c408:	4b39      	ldr	r3, [pc, #228]	@ (800c4f0 <keyScan+0x264>)
 800c40a:	2201      	movs	r2, #1
 800c40c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800c410:	e052      	b.n	800c4b8 <keyScan+0x22c>
            }
            else if (keyStruct[2].keyType == LONG_WITH_SHORT || keyStruct[2].keyType == LONG)
 800c412:	4b37      	ldr	r3, [pc, #220]	@ (800c4f0 <keyScan+0x264>)
 800c414:	7e1b      	ldrb	r3, [r3, #24]
 800c416:	2b01      	cmp	r3, #1
 800c418:	d003      	beq.n	800c422 <keyScan+0x196>
 800c41a:	4b35      	ldr	r3, [pc, #212]	@ (800c4f0 <keyScan+0x264>)
 800c41c:	7e1b      	ldrb	r3, [r3, #24]
 800c41e:	2b03      	cmp	r3, #3
 800c420:	d14a      	bne.n	800c4b8 <keyScan+0x22c>
            {
                if (++keyStruct[2].trigCnt >= KEY2_LONG_CNT)
 800c422:	4b33      	ldr	r3, [pc, #204]	@ (800c4f0 <keyScan+0x264>)
 800c424:	69db      	ldr	r3, [r3, #28]
 800c426:	3301      	adds	r3, #1
 800c428:	4a31      	ldr	r2, [pc, #196]	@ (800c4f0 <keyScan+0x264>)
 800c42a:	61d3      	str	r3, [r2, #28]
 800c42c:	4b30      	ldr	r3, [pc, #192]	@ (800c4f0 <keyScan+0x264>)
 800c42e:	69db      	ldr	r3, [r3, #28]
 800c430:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800c434:	d340      	bcc.n	800c4b8 <keyScan+0x22c>
                {
                    keyStruct[2].trigCnt = 0;
 800c436:	4b2e      	ldr	r3, [pc, #184]	@ (800c4f0 <keyScan+0x264>)
 800c438:	2200      	movs	r2, #0
 800c43a:	61da      	str	r2, [r3, #28]
                    keyStruct[2].trigType = TRIG_LONG;
 800c43c:	4b2c      	ldr	r3, [pc, #176]	@ (800c4f0 <keyScan+0x264>)
 800c43e:	2202      	movs	r2, #2
 800c440:	f883 2020 	strb.w	r2, [r3, #32]
                    keyStruct[2].preKeyValue = TRIG_LONG;
 800c444:	4b2a      	ldr	r3, [pc, #168]	@ (800c4f0 <keyScan+0x264>)
 800c446:	2202      	movs	r2, #2
 800c448:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800c44c:	e034      	b.n	800c4b8 <keyScan+0x22c>
                }
            }
        }
    }
    else if (keyStruct[2].keyType == CONTINUOUS)
 800c44e:	4b28      	ldr	r3, [pc, #160]	@ (800c4f0 <keyScan+0x264>)
 800c450:	7e1b      	ldrb	r3, [r3, #24]
 800c452:	2b02      	cmp	r3, #2
 800c454:	d130      	bne.n	800c4b8 <keyScan+0x22c>
    {
        if (keyStruct[2].preKeyValue == TRIG_SHORT) // short key
 800c456:	4b26      	ldr	r3, [pc, #152]	@ (800c4f0 <keyScan+0x264>)
 800c458:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c45c:	2b01      	cmp	r3, #1
 800c45e:	d114      	bne.n	800c48a <keyScan+0x1fe>
        {
            if (++keyStruct[2].trigCnt >= CONTINUOUS_TRIG_CNT)
 800c460:	4b23      	ldr	r3, [pc, #140]	@ (800c4f0 <keyScan+0x264>)
 800c462:	69db      	ldr	r3, [r3, #28]
 800c464:	3301      	adds	r3, #1
 800c466:	4a22      	ldr	r2, [pc, #136]	@ (800c4f0 <keyScan+0x264>)
 800c468:	61d3      	str	r3, [r2, #28]
 800c46a:	4b21      	ldr	r3, [pc, #132]	@ (800c4f0 <keyScan+0x264>)
 800c46c:	69db      	ldr	r3, [r3, #28]
 800c46e:	2b63      	cmp	r3, #99	@ 0x63
 800c470:	d922      	bls.n	800c4b8 <keyScan+0x22c>
            {
                keyStruct[2].trigCnt = 0;
 800c472:	4b1f      	ldr	r3, [pc, #124]	@ (800c4f0 <keyScan+0x264>)
 800c474:	2200      	movs	r2, #0
 800c476:	61da      	str	r2, [r3, #28]
                keyStruct[2].trigType = TRIG_LONG; // long
 800c478:	4b1d      	ldr	r3, [pc, #116]	@ (800c4f0 <keyScan+0x264>)
 800c47a:	2202      	movs	r2, #2
 800c47c:	f883 2020 	strb.w	r2, [r3, #32]
                keyStruct[2].preKeyValue = TRIG_LONG;
 800c480:	4b1b      	ldr	r3, [pc, #108]	@ (800c4f0 <keyScan+0x264>)
 800c482:	2202      	movs	r2, #2
 800c484:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800c488:	e016      	b.n	800c4b8 <keyScan+0x22c>
            }
        }
        else if (keyStruct[2].preKeyValue == TRIG_LONG) // long key
 800c48a:	4b19      	ldr	r3, [pc, #100]	@ (800c4f0 <keyScan+0x264>)
 800c48c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c490:	2b02      	cmp	r3, #2
 800c492:	d111      	bne.n	800c4b8 <keyScan+0x22c>
        {
            if (++keyStruct[2].trigCnt >= CONTINUOUS_INTEVAL)
 800c494:	4b16      	ldr	r3, [pc, #88]	@ (800c4f0 <keyScan+0x264>)
 800c496:	69db      	ldr	r3, [r3, #28]
 800c498:	3301      	adds	r3, #1
 800c49a:	4a15      	ldr	r2, [pc, #84]	@ (800c4f0 <keyScan+0x264>)
 800c49c:	61d3      	str	r3, [r2, #28]
 800c49e:	4b14      	ldr	r3, [pc, #80]	@ (800c4f0 <keyScan+0x264>)
 800c4a0:	69db      	ldr	r3, [r3, #28]
 800c4a2:	2b27      	cmp	r3, #39	@ 0x27
 800c4a4:	d908      	bls.n	800c4b8 <keyScan+0x22c>
            {
                keyStruct[2].trigCnt = 0;
 800c4a6:	4b12      	ldr	r3, [pc, #72]	@ (800c4f0 <keyScan+0x264>)
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	61da      	str	r2, [r3, #28]
                keyStruct[2].trigType = keyStruct[2].preKeyValue;
 800c4ac:	4b10      	ldr	r3, [pc, #64]	@ (800c4f0 <keyScan+0x264>)
 800c4ae:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800c4b2:	4b0f      	ldr	r3, [pc, #60]	@ (800c4f0 <keyScan+0x264>)
 800c4b4:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }
    }

    if (keyStruct[3].preKeyValue == NO_TRIG)
 800c4b8:	4b0d      	ldr	r3, [pc, #52]	@ (800c4f0 <keyScan+0x264>)
 800c4ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d137      	bne.n	800c532 <keyScan+0x2a6>
    {
        if (keyFlags == K(3))
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	2b04      	cmp	r3, #4
 800c4c6:	d16a      	bne.n	800c59e <keyScan+0x312>
        {
            if (keyStruct[3].keyType == SHORT || keyStruct[3].keyType == CONTINUOUS)
 800c4c8:	4b09      	ldr	r3, [pc, #36]	@ (800c4f0 <keyScan+0x264>)
 800c4ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d004      	beq.n	800c4dc <keyScan+0x250>
 800c4d2:	4b07      	ldr	r3, [pc, #28]	@ (800c4f0 <keyScan+0x264>)
 800c4d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c4d8:	2b02      	cmp	r3, #2
 800c4da:	d10b      	bne.n	800c4f4 <keyScan+0x268>
            {
                keyStruct[3].trigType = TRIG_SHORT;
 800c4dc:	4b04      	ldr	r3, [pc, #16]	@ (800c4f0 <keyScan+0x264>)
 800c4de:	2201      	movs	r2, #1
 800c4e0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                keyStruct[3].preKeyValue = TRIG_SHORT;
 800c4e4:	4b02      	ldr	r3, [pc, #8]	@ (800c4f0 <keyScan+0x264>)
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
                keyStruct[3].trigCnt = 0;
                keyStruct[3].trigType = keyStruct[3].preKeyValue;
            }
        }
    }
}
 800c4ec:	e057      	b.n	800c59e <keyScan+0x312>
 800c4ee:	bf00      	nop
 800c4f0:	20000888 	.word	0x20000888
            else if (keyStruct[3].keyType == LONG_WITH_SHORT || keyStruct[3].keyType == LONG)
 800c4f4:	4b2c      	ldr	r3, [pc, #176]	@ (800c5a8 <keyScan+0x31c>)
 800c4f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d004      	beq.n	800c508 <keyScan+0x27c>
 800c4fe:	4b2a      	ldr	r3, [pc, #168]	@ (800c5a8 <keyScan+0x31c>)
 800c500:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c504:	2b03      	cmp	r3, #3
 800c506:	d14a      	bne.n	800c59e <keyScan+0x312>
                if (++keyStruct[3].trigCnt >= KEY3_LONG_CNT)
 800c508:	4b27      	ldr	r3, [pc, #156]	@ (800c5a8 <keyScan+0x31c>)
 800c50a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c50c:	3301      	adds	r3, #1
 800c50e:	4a26      	ldr	r2, [pc, #152]	@ (800c5a8 <keyScan+0x31c>)
 800c510:	6293      	str	r3, [r2, #40]	@ 0x28
 800c512:	4b25      	ldr	r3, [pc, #148]	@ (800c5a8 <keyScan+0x31c>)
 800c514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c516:	2b00      	cmp	r3, #0
 800c518:	d041      	beq.n	800c59e <keyScan+0x312>
                    keyStruct[3].trigCnt = 0;
 800c51a:	4b23      	ldr	r3, [pc, #140]	@ (800c5a8 <keyScan+0x31c>)
 800c51c:	2200      	movs	r2, #0
 800c51e:	629a      	str	r2, [r3, #40]	@ 0x28
                    keyStruct[3].trigType = TRIG_LONG;
 800c520:	4b21      	ldr	r3, [pc, #132]	@ (800c5a8 <keyScan+0x31c>)
 800c522:	2202      	movs	r2, #2
 800c524:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                    keyStruct[3].preKeyValue = TRIG_LONG;
 800c528:	4b1f      	ldr	r3, [pc, #124]	@ (800c5a8 <keyScan+0x31c>)
 800c52a:	2202      	movs	r2, #2
 800c52c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800c530:	e035      	b.n	800c59e <keyScan+0x312>
    else if (keyStruct[3].keyType == CONTINUOUS)
 800c532:	4b1d      	ldr	r3, [pc, #116]	@ (800c5a8 <keyScan+0x31c>)
 800c534:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c538:	2b02      	cmp	r3, #2
 800c53a:	d130      	bne.n	800c59e <keyScan+0x312>
        if (keyStruct[3].preKeyValue == TRIG_SHORT) // short key
 800c53c:	4b1a      	ldr	r3, [pc, #104]	@ (800c5a8 <keyScan+0x31c>)
 800c53e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c542:	2b01      	cmp	r3, #1
 800c544:	d114      	bne.n	800c570 <keyScan+0x2e4>
            if (++keyStruct[3].trigCnt >= CONTINUOUS_TRIG_CNT)
 800c546:	4b18      	ldr	r3, [pc, #96]	@ (800c5a8 <keyScan+0x31c>)
 800c548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c54a:	3301      	adds	r3, #1
 800c54c:	4a16      	ldr	r2, [pc, #88]	@ (800c5a8 <keyScan+0x31c>)
 800c54e:	6293      	str	r3, [r2, #40]	@ 0x28
 800c550:	4b15      	ldr	r3, [pc, #84]	@ (800c5a8 <keyScan+0x31c>)
 800c552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c554:	2b63      	cmp	r3, #99	@ 0x63
 800c556:	d922      	bls.n	800c59e <keyScan+0x312>
                keyStruct[3].trigCnt = 0;
 800c558:	4b13      	ldr	r3, [pc, #76]	@ (800c5a8 <keyScan+0x31c>)
 800c55a:	2200      	movs	r2, #0
 800c55c:	629a      	str	r2, [r3, #40]	@ 0x28
                keyStruct[3].trigType = TRIG_LONG; // long
 800c55e:	4b12      	ldr	r3, [pc, #72]	@ (800c5a8 <keyScan+0x31c>)
 800c560:	2202      	movs	r2, #2
 800c562:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                keyStruct[3].preKeyValue = TRIG_LONG;
 800c566:	4b10      	ldr	r3, [pc, #64]	@ (800c5a8 <keyScan+0x31c>)
 800c568:	2202      	movs	r2, #2
 800c56a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800c56e:	e016      	b.n	800c59e <keyScan+0x312>
        else if (keyStruct[3].preKeyValue == TRIG_LONG) // long key
 800c570:	4b0d      	ldr	r3, [pc, #52]	@ (800c5a8 <keyScan+0x31c>)
 800c572:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c576:	2b02      	cmp	r3, #2
 800c578:	d111      	bne.n	800c59e <keyScan+0x312>
            if (++keyStruct[3].trigCnt >= CONTINUOUS_INTEVAL)
 800c57a:	4b0b      	ldr	r3, [pc, #44]	@ (800c5a8 <keyScan+0x31c>)
 800c57c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c57e:	3301      	adds	r3, #1
 800c580:	4a09      	ldr	r2, [pc, #36]	@ (800c5a8 <keyScan+0x31c>)
 800c582:	6293      	str	r3, [r2, #40]	@ 0x28
 800c584:	4b08      	ldr	r3, [pc, #32]	@ (800c5a8 <keyScan+0x31c>)
 800c586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c588:	2b27      	cmp	r3, #39	@ 0x27
 800c58a:	d908      	bls.n	800c59e <keyScan+0x312>
                keyStruct[3].trigCnt = 0;
 800c58c:	4b06      	ldr	r3, [pc, #24]	@ (800c5a8 <keyScan+0x31c>)
 800c58e:	2200      	movs	r2, #0
 800c590:	629a      	str	r2, [r3, #40]	@ 0x28
                keyStruct[3].trigType = keyStruct[3].preKeyValue;
 800c592:	4b05      	ldr	r3, [pc, #20]	@ (800c5a8 <keyScan+0x31c>)
 800c594:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800c598:	4b03      	ldr	r3, [pc, #12]	@ (800c5a8 <keyScan+0x31c>)
 800c59a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 800c59e:	bf00      	nop
 800c5a0:	3708      	adds	r7, #8
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	20000888 	.word	0x20000888

0800c5ac <getKeyState>:

/*
将物理按键转化为逻辑按键
 */
void getKeyState(KeyState *keyState)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b085      	sub	sp, #20
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
    uchar i;

    if (keyStruct[1].trigType == TRIG_SHORT)
 800c5b4:	4b1b      	ldr	r3, [pc, #108]	@ (800c624 <getKeyState+0x78>)
 800c5b6:	7d1b      	ldrb	r3, [r3, #20]
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d103      	bne.n	800c5c4 <getKeyState+0x18>
        *keyState = USER1_SHORT;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	701a      	strb	r2, [r3, #0]
 800c5c2:	e014      	b.n	800c5ee <getKeyState+0x42>
    else if (keyStruct[2].trigType == TRIG_SHORT)
 800c5c4:	4b17      	ldr	r3, [pc, #92]	@ (800c624 <getKeyState+0x78>)
 800c5c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d103      	bne.n	800c5d6 <getKeyState+0x2a>
        *keyState = USER2_SHORT;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2202      	movs	r2, #2
 800c5d2:	701a      	strb	r2, [r3, #0]
 800c5d4:	e00b      	b.n	800c5ee <getKeyState+0x42>
    else if (keyStruct[3].trigType == TRIG_SHORT)
 800c5d6:	4b13      	ldr	r3, [pc, #76]	@ (800c624 <getKeyState+0x78>)
 800c5d8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d103      	bne.n	800c5e8 <getKeyState+0x3c>
        *keyState = USER3_SHORT;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2203      	movs	r2, #3
 800c5e4:	701a      	strb	r2, [r3, #0]
 800c5e6:	e002      	b.n	800c5ee <getKeyState+0x42>
    else
        *keyState = NONE_KEY;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < KEY_NUM; i++)
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	73fb      	strb	r3, [r7, #15]
 800c5f2:	e00c      	b.n	800c60e <getKeyState+0x62>
    {
        keyStruct[i].trigType = NO_TRIG;
 800c5f4:	7bfa      	ldrb	r2, [r7, #15]
 800c5f6:	490b      	ldr	r1, [pc, #44]	@ (800c624 <getKeyState+0x78>)
 800c5f8:	4613      	mov	r3, r2
 800c5fa:	005b      	lsls	r3, r3, #1
 800c5fc:	4413      	add	r3, r2
 800c5fe:	009b      	lsls	r3, r3, #2
 800c600:	440b      	add	r3, r1
 800c602:	3308      	adds	r3, #8
 800c604:	2200      	movs	r2, #0
 800c606:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < KEY_NUM; i++)
 800c608:	7bfb      	ldrb	r3, [r7, #15]
 800c60a:	3301      	adds	r3, #1
 800c60c:	73fb      	strb	r3, [r7, #15]
 800c60e:	7bfb      	ldrb	r3, [r7, #15]
 800c610:	2b03      	cmp	r3, #3
 800c612:	d9ef      	bls.n	800c5f4 <getKeyState+0x48>
    }
}
 800c614:	bf00      	nop
 800c616:	bf00      	nop
 800c618:	3714      	adds	r7, #20
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr
 800c622:	bf00      	nop
 800c624:	20000888 	.word	0x20000888

0800c628 <LED_drive>:
#include "led.h"

bool ledOn;

void LED_drive()
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	af00      	add	r7, sp, #0
    if (ledOn)
 800c62c:	4b08      	ldr	r3, [pc, #32]	@ (800c650 <LED_drive+0x28>)
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d005      	beq.n	800c640 <LED_drive+0x18>
        LED_ON;
 800c634:	2200      	movs	r2, #0
 800c636:	2101      	movs	r1, #1
 800c638:	4806      	ldr	r0, [pc, #24]	@ (800c654 <LED_drive+0x2c>)
 800c63a:	f7f9 fbb1 	bl	8005da0 <HAL_GPIO_WritePin>
    else
        LED_OFF;
}
 800c63e:	e004      	b.n	800c64a <LED_drive+0x22>
        LED_OFF;
 800c640:	2201      	movs	r2, #1
 800c642:	2101      	movs	r1, #1
 800c644:	4803      	ldr	r0, [pc, #12]	@ (800c654 <LED_drive+0x2c>)
 800c646:	f7f9 fbab 	bl	8005da0 <HAL_GPIO_WritePin>
}
 800c64a:	bf00      	nop
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	200008c4 	.word	0x200008c4
 800c654:	48000400 	.word	0x48000400

0800c658 <MT6701_GetRawData>:
#include "math_utils.h"
#include "time_utils.h"
// static unsigned int rotationCount, rotationCount_Last;

uint16_t MT6701_GetRawData(void)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af02      	add	r7, sp, #8
    uint16_t rawData;
    uint16_t txData = 0xFFFF;
 800c65e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c662:	803b      	strh	r3, [r7, #0]
    uint16_t timeOut = 200;
 800c664:	23c8      	movs	r3, #200	@ 0xc8
 800c666:	80fb      	strh	r3, [r7, #6]

    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800c668:	e006      	b.n	800c678 <MT6701_GetRawData+0x20>
    {
        if (timeOut-- == 0)
 800c66a:	88fb      	ldrh	r3, [r7, #6]
 800c66c:	1e5a      	subs	r2, r3, #1
 800c66e:	80fa      	strh	r2, [r7, #6]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d101      	bne.n	800c678 <MT6701_GetRawData+0x20>
        {
            //   FOC_log("SPI state error!\r\n");
            return 0; // 在超时时直接返回，避免继续执行后续代码
 800c674:	2300      	movs	r3, #0
 800c676:	e027      	b.n	800c6c8 <MT6701_GetRawData+0x70>
    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800c678:	4815      	ldr	r0, [pc, #84]	@ (800c6d0 <MT6701_GetRawData+0x78>)
 800c67a:	f7fa ff7a 	bl	8007572 <HAL_SPI_GetState>
 800c67e:	4603      	mov	r3, r0
 800c680:	2b01      	cmp	r3, #1
 800c682:	d1f2      	bne.n	800c66a <MT6701_GetRawData+0x12>
        }
    }

    MT6701_CS_Enable;
 800c684:	2200      	movs	r2, #0
 800c686:	2108      	movs	r1, #8
 800c688:	4812      	ldr	r0, [pc, #72]	@ (800c6d4 <MT6701_GetRawData+0x7c>)
 800c68a:	f7f9 fb89 	bl	8005da0 <HAL_GPIO_WritePin>

    HAL_StatusTypeDef spiStatus = HAL_SPI_TransmitReceive(&hspi3, (uint8_t *)&txData, (uint8_t *)&rawData, 1, HAL_MAX_DELAY);
 800c68e:	1cba      	adds	r2, r7, #2
 800c690:	4639      	mov	r1, r7
 800c692:	f04f 33ff 	mov.w	r3, #4294967295
 800c696:	9300      	str	r3, [sp, #0]
 800c698:	2301      	movs	r3, #1
 800c69a:	480d      	ldr	r0, [pc, #52]	@ (800c6d0 <MT6701_GetRawData+0x78>)
 800c69c:	f7fa fd47 	bl	800712e <HAL_SPI_TransmitReceive>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	717b      	strb	r3, [r7, #5]
    if (spiStatus != HAL_OK)
 800c6a4:	797b      	ldrb	r3, [r7, #5]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d006      	beq.n	800c6b8 <MT6701_GetRawData+0x60>
    {
        MT6701_CS_Disable;
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	2108      	movs	r1, #8
 800c6ae:	4809      	ldr	r0, [pc, #36]	@ (800c6d4 <MT6701_GetRawData+0x7c>)
 800c6b0:	f7f9 fb76 	bl	8005da0 <HAL_GPIO_WritePin>
        //  FOC_log("MT6701 read data error!\r\n");
        return 0; // 在SPI传输错误时直接返回，避免继续执行后续代码
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	e007      	b.n	800c6c8 <MT6701_GetRawData+0x70>
    }

    MT6701_CS_Disable;
 800c6b8:	2201      	movs	r2, #1
 800c6ba:	2108      	movs	r1, #8
 800c6bc:	4805      	ldr	r0, [pc, #20]	@ (800c6d4 <MT6701_GetRawData+0x7c>)
 800c6be:	f7f9 fb6f 	bl	8005da0 <HAL_GPIO_WritePin>

    return rawData >> 2; // 取高14位的角度数据
 800c6c2:	887b      	ldrh	r3, [r7, #2]
 800c6c4:	089b      	lsrs	r3, r3, #2
 800c6c6:	b29b      	uxth	r3, r3
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3708      	adds	r7, #8
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	2000041c 	.word	0x2000041c
 800c6d4:	48000400 	.word	0x48000400

0800c6d8 <MT6701_GetRawAngle>:

// 将传感器原始数据转化为弧度
float MT6701_GetRawAngle(void)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
    uint16_t rawData = MT6701_GetRawData();
 800c6de:	f7ff ffbb 	bl	800c658 <MT6701_GetRawData>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	80fb      	strh	r3, [r7, #6]
    return (float)rawData / 16384.0f * _2PI;
 800c6e6:	88fb      	ldrh	r3, [r7, #6]
 800c6e8:	ee07 3a90 	vmov	s15, r3
 800c6ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c6f0:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800c70c <MT6701_GetRawAngle+0x34>
 800c6f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c6f8:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800c710 <MT6701_GetRawAngle+0x38>
 800c6fc:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800c700:	eeb0 0a67 	vmov.f32	s0, s15
 800c704:	3708      	adds	r7, #8
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
 800c70a:	bf00      	nop
 800c70c:	46800000 	.word	0x46800000
 800c710:	40c90fdb 	.word	0x40c90fdb

0800c714 <delay>:
#include "time_utils.h"

__IO uint32_t m, tms, u, t0;

void delay(uint32_t _ms)
{
 800c714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c718:	b082      	sub	sp, #8
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
    t0 = micros();
 800c71e:	f000 f83b 	bl	800c798 <micros>
 800c722:	4602      	mov	r2, r0
 800c724:	460b      	mov	r3, r1
 800c726:	4b11      	ldr	r3, [pc, #68]	@ (800c76c <delay+0x58>)
 800c728:	601a      	str	r2, [r3, #0]
    while (micros() - t0 < _ms * 1000)
 800c72a:	e000      	b.n	800c72e <delay+0x1a>
        __NOP();
 800c72c:	bf00      	nop
    while (micros() - t0 < _ms * 1000)
 800c72e:	f000 f833 	bl	800c798 <micros>
 800c732:	4602      	mov	r2, r0
 800c734:	460b      	mov	r3, r1
 800c736:	490d      	ldr	r1, [pc, #52]	@ (800c76c <delay+0x58>)
 800c738:	6809      	ldr	r1, [r1, #0]
 800c73a:	2000      	movs	r0, #0
 800c73c:	468a      	mov	sl, r1
 800c73e:	4683      	mov	fp, r0
 800c740:	ebb2 040a 	subs.w	r4, r2, sl
 800c744:	eb63 050b 	sbc.w	r5, r3, fp
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c74e:	fb02 f303 	mul.w	r3, r2, r3
 800c752:	2200      	movs	r2, #0
 800c754:	4698      	mov	r8, r3
 800c756:	4691      	mov	r9, r2
 800c758:	4544      	cmp	r4, r8
 800c75a:	eb75 0309 	sbcs.w	r3, r5, r9
 800c75e:	d3e5      	bcc.n	800c72c <delay+0x18>
}
 800c760:	bf00      	nop
 800c762:	bf00      	nop
 800c764:	3708      	adds	r7, #8
 800c766:	46bd      	mov	sp, r7
 800c768:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c76c:	200008d4 	.word	0x200008d4

0800c770 <LL_SYSTICK_IsActiveCounterFlag>:
    while (_us--)
        __NOP();
}

__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag()
{
 800c770:	b480      	push	{r7}
 800c772:	af00      	add	r7, sp, #0
    return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 800c774:	4b07      	ldr	r3, [pc, #28]	@ (800c794 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c77c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c780:	bf0c      	ite	eq
 800c782:	2301      	moveq	r3, #1
 800c784:	2300      	movne	r3, #0
 800c786:	b2db      	uxtb	r3, r3
}
 800c788:	4618      	mov	r0, r3
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr
 800c792:	bf00      	nop
 800c794:	e000e010 	.word	0xe000e010

0800c798 <micros>:

uint64_t micros()
{
 800c798:	b5b0      	push	{r4, r5, r7, lr}
 800c79a:	af00      	add	r7, sp, #0
    /* Ensure COUNTFLAG is reset by reading SysTick control and status register */
    LL_SYSTICK_IsActiveCounterFlag();
 800c79c:	f7ff ffe8 	bl	800c770 <LL_SYSTICK_IsActiveCounterFlag>
    m = HAL_GetTick();
 800c7a0:	f7f5 ff10 	bl	80025c4 <HAL_GetTick>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	4a1c      	ldr	r2, [pc, #112]	@ (800c818 <micros+0x80>)
 800c7a8:	6013      	str	r3, [r2, #0]
    tms = SysTick->LOAD + 1;
 800c7aa:	4b1c      	ldr	r3, [pc, #112]	@ (800c81c <micros+0x84>)
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	4a1b      	ldr	r2, [pc, #108]	@ (800c820 <micros+0x88>)
 800c7b2:	6013      	str	r3, [r2, #0]
    u = tms - SysTick->VAL;
 800c7b4:	4b1a      	ldr	r3, [pc, #104]	@ (800c820 <micros+0x88>)
 800c7b6:	681a      	ldr	r2, [r3, #0]
 800c7b8:	4b18      	ldr	r3, [pc, #96]	@ (800c81c <micros+0x84>)
 800c7ba:	689b      	ldr	r3, [r3, #8]
 800c7bc:	1ad3      	subs	r3, r2, r3
 800c7be:	4a19      	ldr	r2, [pc, #100]	@ (800c824 <micros+0x8c>)
 800c7c0:	6013      	str	r3, [r2, #0]
    if (LL_SYSTICK_IsActiveCounterFlag())
 800c7c2:	f7ff ffd5 	bl	800c770 <LL_SYSTICK_IsActiveCounterFlag>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d00b      	beq.n	800c7e4 <micros+0x4c>
    {
        m = HAL_GetTick();
 800c7cc:	f7f5 fefa 	bl	80025c4 <HAL_GetTick>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	4a11      	ldr	r2, [pc, #68]	@ (800c818 <micros+0x80>)
 800c7d4:	6013      	str	r3, [r2, #0]
        u = tms - SysTick->VAL;
 800c7d6:	4b12      	ldr	r3, [pc, #72]	@ (800c820 <micros+0x88>)
 800c7d8:	681a      	ldr	r2, [r3, #0]
 800c7da:	4b10      	ldr	r3, [pc, #64]	@ (800c81c <micros+0x84>)
 800c7dc:	689b      	ldr	r3, [r3, #8]
 800c7de:	1ad3      	subs	r3, r2, r3
 800c7e0:	4a10      	ldr	r2, [pc, #64]	@ (800c824 <micros+0x8c>)
 800c7e2:	6013      	str	r3, [r2, #0]
    }
    return (m * 1000 + (u * 1000) / tms);
 800c7e4:	4b0c      	ldr	r3, [pc, #48]	@ (800c818 <micros+0x80>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c7ec:	fb03 f202 	mul.w	r2, r3, r2
 800c7f0:	4b0c      	ldr	r3, [pc, #48]	@ (800c824 <micros+0x8c>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800c7f8:	fb03 f101 	mul.w	r1, r3, r1
 800c7fc:	4b08      	ldr	r3, [pc, #32]	@ (800c820 <micros+0x88>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	fbb1 f3f3 	udiv	r3, r1, r3
 800c804:	4413      	add	r3, r2
 800c806:	2200      	movs	r2, #0
 800c808:	461c      	mov	r4, r3
 800c80a:	4615      	mov	r5, r2
 800c80c:	4622      	mov	r2, r4
 800c80e:	462b      	mov	r3, r5
}
 800c810:	4610      	mov	r0, r2
 800c812:	4619      	mov	r1, r3
 800c814:	bdb0      	pop	{r4, r5, r7, pc}
 800c816:	bf00      	nop
 800c818:	200008c8 	.word	0x200008c8
 800c81c:	e000e010 	.word	0xe000e010
 800c820:	200008cc 	.word	0x200008cc
 800c824:	200008d0 	.word	0x200008d0

0800c828 <userMain>:
float HallTheta = 0;
float HallSpeed = 0;
uint8_t HallReadTemp = 0;
//static bool powerLost;
void userMain(void)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	af00      	add	r7, sp, #0

	if (get5MsFlag())
 800c82c:	f000 f8f0 	bl	800ca10 <get5MsFlag>
 800c830:	4603      	mov	r3, r0
 800c832:	2b00      	cmp	r3, #0
 800c834:	d001      	beq.n	800c83a <userMain+0x12>
	{
		keyScan();
 800c836:	f7ff fd29 	bl	800c28c <keyScan>
	}

	if (get100MsFlag())
 800c83a:	f000 f8fd 	bl	800ca38 <get100MsFlag>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b00      	cmp	r3, #0
 800c842:	d001      	beq.n	800c848 <userMain+0x20>
	{
		appRunning();
 800c844:	f7ff fb28 	bl	800be98 <appRunning>
	}
#if SHOW_WAVE == 0 //&& COMMAMNDER == 0
	// if (get500MsFlag())
	if (getOneSecFlag())
 800c848:	f000 f8ce 	bl	800c9e8 <getOneSecFlag>
 800c84c:	4603      	mov	r3, r0
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d001      	beq.n	800c856 <userMain+0x2e>
	{
		printLog();
 800c852:	f7ff fc3d 	bl	800c0d0 <printLog>
	}
#endif
}
 800c856:	bf00      	nop
 800c858:	bd80      	pop	{r7, pc}
	...

0800c85c <dealPer100us>:


static bool _5msFlag, _10msFlag, _20msFlag, _30msFlag, _100msFlag, _500msFlag, _1s;
static void dealPerMs();
void dealPer100us()
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	af00      	add	r7, sp, #0
    static unsigned char cnt;
    if (++cnt >= 10)
 800c860:	4b08      	ldr	r3, [pc, #32]	@ (800c884 <dealPer100us+0x28>)
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	3301      	adds	r3, #1
 800c866:	b2da      	uxtb	r2, r3
 800c868:	4b06      	ldr	r3, [pc, #24]	@ (800c884 <dealPer100us+0x28>)
 800c86a:	701a      	strb	r2, [r3, #0]
 800c86c:	4b05      	ldr	r3, [pc, #20]	@ (800c884 <dealPer100us+0x28>)
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	2b09      	cmp	r3, #9
 800c872:	d904      	bls.n	800c87e <dealPer100us+0x22>
    {
        cnt = 0;
 800c874:	4b03      	ldr	r3, [pc, #12]	@ (800c884 <dealPer100us+0x28>)
 800c876:	2200      	movs	r2, #0
 800c878:	701a      	strb	r2, [r3, #0]
        dealPerMs();
 800c87a:	f000 f805 	bl	800c888 <dealPerMs>
    }

}
 800c87e:	bf00      	nop
 800c880:	bd80      	pop	{r7, pc}
 800c882:	bf00      	nop
 800c884:	200008e7 	.word	0x200008e7

0800c888 <dealPerMs>:

static void dealPerMs()
{
 800c888:	b480      	push	{r7}
 800c88a:	af00      	add	r7, sp, #0
    static unsigned char _5msCnt, _30msCnt, _20msCnt, _100msCnt, _10msCnt;
    static uint _500msCnt, _1000msCnt;
    if (++_5msCnt >= 5)
 800c88c:	4b45      	ldr	r3, [pc, #276]	@ (800c9a4 <dealPerMs+0x11c>)
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	3301      	adds	r3, #1
 800c892:	b2da      	uxtb	r2, r3
 800c894:	4b43      	ldr	r3, [pc, #268]	@ (800c9a4 <dealPerMs+0x11c>)
 800c896:	701a      	strb	r2, [r3, #0]
 800c898:	4b42      	ldr	r3, [pc, #264]	@ (800c9a4 <dealPerMs+0x11c>)
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	2b04      	cmp	r3, #4
 800c89e:	d905      	bls.n	800c8ac <dealPerMs+0x24>
    {
        _5msCnt = 0;
 800c8a0:	4b40      	ldr	r3, [pc, #256]	@ (800c9a4 <dealPerMs+0x11c>)
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	701a      	strb	r2, [r3, #0]
        _5msFlag = 1;
 800c8a6:	4b40      	ldr	r3, [pc, #256]	@ (800c9a8 <dealPerMs+0x120>)
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	701a      	strb	r2, [r3, #0]
    }

    if (++_10msCnt >= 10)
 800c8ac:	4b3f      	ldr	r3, [pc, #252]	@ (800c9ac <dealPerMs+0x124>)
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	3301      	adds	r3, #1
 800c8b2:	b2da      	uxtb	r2, r3
 800c8b4:	4b3d      	ldr	r3, [pc, #244]	@ (800c9ac <dealPerMs+0x124>)
 800c8b6:	701a      	strb	r2, [r3, #0]
 800c8b8:	4b3c      	ldr	r3, [pc, #240]	@ (800c9ac <dealPerMs+0x124>)
 800c8ba:	781b      	ldrb	r3, [r3, #0]
 800c8bc:	2b09      	cmp	r3, #9
 800c8be:	d905      	bls.n	800c8cc <dealPerMs+0x44>
    {
        _10msCnt = 0;
 800c8c0:	4b3a      	ldr	r3, [pc, #232]	@ (800c9ac <dealPerMs+0x124>)
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	701a      	strb	r2, [r3, #0]
        _10msFlag = 1;
 800c8c6:	4b3a      	ldr	r3, [pc, #232]	@ (800c9b0 <dealPerMs+0x128>)
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	701a      	strb	r2, [r3, #0]
    }

    if (++_20msCnt >= 20)
 800c8cc:	4b39      	ldr	r3, [pc, #228]	@ (800c9b4 <dealPerMs+0x12c>)
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	b2da      	uxtb	r2, r3
 800c8d4:	4b37      	ldr	r3, [pc, #220]	@ (800c9b4 <dealPerMs+0x12c>)
 800c8d6:	701a      	strb	r2, [r3, #0]
 800c8d8:	4b36      	ldr	r3, [pc, #216]	@ (800c9b4 <dealPerMs+0x12c>)
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	2b13      	cmp	r3, #19
 800c8de:	d905      	bls.n	800c8ec <dealPerMs+0x64>
    {
        _20msCnt = 0;
 800c8e0:	4b34      	ldr	r3, [pc, #208]	@ (800c9b4 <dealPerMs+0x12c>)
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	701a      	strb	r2, [r3, #0]
        _20msFlag = 1;
 800c8e6:	4b34      	ldr	r3, [pc, #208]	@ (800c9b8 <dealPerMs+0x130>)
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	701a      	strb	r2, [r3, #0]
    }

    if (++_30msCnt >= 30)
 800c8ec:	4b33      	ldr	r3, [pc, #204]	@ (800c9bc <dealPerMs+0x134>)
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	b2da      	uxtb	r2, r3
 800c8f4:	4b31      	ldr	r3, [pc, #196]	@ (800c9bc <dealPerMs+0x134>)
 800c8f6:	701a      	strb	r2, [r3, #0]
 800c8f8:	4b30      	ldr	r3, [pc, #192]	@ (800c9bc <dealPerMs+0x134>)
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	2b1d      	cmp	r3, #29
 800c8fe:	d905      	bls.n	800c90c <dealPerMs+0x84>
    {
        _30msCnt = 0;
 800c900:	4b2e      	ldr	r3, [pc, #184]	@ (800c9bc <dealPerMs+0x134>)
 800c902:	2200      	movs	r2, #0
 800c904:	701a      	strb	r2, [r3, #0]
        _30msFlag = 1;
 800c906:	4b2e      	ldr	r3, [pc, #184]	@ (800c9c0 <dealPerMs+0x138>)
 800c908:	2201      	movs	r2, #1
 800c90a:	701a      	strb	r2, [r3, #0]
    }

    if (++_100msCnt >= 100)
 800c90c:	4b2d      	ldr	r3, [pc, #180]	@ (800c9c4 <dealPerMs+0x13c>)
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	3301      	adds	r3, #1
 800c912:	b2da      	uxtb	r2, r3
 800c914:	4b2b      	ldr	r3, [pc, #172]	@ (800c9c4 <dealPerMs+0x13c>)
 800c916:	701a      	strb	r2, [r3, #0]
 800c918:	4b2a      	ldr	r3, [pc, #168]	@ (800c9c4 <dealPerMs+0x13c>)
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	2b63      	cmp	r3, #99	@ 0x63
 800c91e:	d905      	bls.n	800c92c <dealPerMs+0xa4>
    {
        _100msCnt = 0;
 800c920:	4b28      	ldr	r3, [pc, #160]	@ (800c9c4 <dealPerMs+0x13c>)
 800c922:	2200      	movs	r2, #0
 800c924:	701a      	strb	r2, [r3, #0]
        _100msFlag = 1;
 800c926:	4b28      	ldr	r3, [pc, #160]	@ (800c9c8 <dealPerMs+0x140>)
 800c928:	2201      	movs	r2, #1
 800c92a:	701a      	strb	r2, [r3, #0]
    }

    if (++_500msCnt >= 500)
 800c92c:	4b27      	ldr	r3, [pc, #156]	@ (800c9cc <dealPerMs+0x144>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	3301      	adds	r3, #1
 800c932:	4a26      	ldr	r2, [pc, #152]	@ (800c9cc <dealPerMs+0x144>)
 800c934:	6013      	str	r3, [r2, #0]
 800c936:	4b25      	ldr	r3, [pc, #148]	@ (800c9cc <dealPerMs+0x144>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800c93e:	d305      	bcc.n	800c94c <dealPerMs+0xc4>
    {
        _500msCnt = 0;
 800c940:	4b22      	ldr	r3, [pc, #136]	@ (800c9cc <dealPerMs+0x144>)
 800c942:	2200      	movs	r2, #0
 800c944:	601a      	str	r2, [r3, #0]
        _500msFlag = 1;
 800c946:	4b22      	ldr	r3, [pc, #136]	@ (800c9d0 <dealPerMs+0x148>)
 800c948:	2201      	movs	r2, #1
 800c94a:	701a      	strb	r2, [r3, #0]
    }
    if (++_1000msCnt >= 1000)
 800c94c:	4b21      	ldr	r3, [pc, #132]	@ (800c9d4 <dealPerMs+0x14c>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	3301      	adds	r3, #1
 800c952:	4a20      	ldr	r2, [pc, #128]	@ (800c9d4 <dealPerMs+0x14c>)
 800c954:	6013      	str	r3, [r2, #0]
 800c956:	4b1f      	ldr	r3, [pc, #124]	@ (800c9d4 <dealPerMs+0x14c>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c95e:	d305      	bcc.n	800c96c <dealPerMs+0xe4>
    {
        _1000msCnt = 0;
 800c960:	4b1c      	ldr	r3, [pc, #112]	@ (800c9d4 <dealPerMs+0x14c>)
 800c962:	2200      	movs	r2, #0
 800c964:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800c966:	4b1c      	ldr	r3, [pc, #112]	@ (800c9d8 <dealPerMs+0x150>)
 800c968:	2201      	movs	r2, #1
 800c96a:	701a      	strb	r2, [r3, #0]

        cnt = 0;
    }

#else
    frequence = 50;
 800c96c:	4b1b      	ldr	r3, [pc, #108]	@ (800c9dc <dealPerMs+0x154>)
 800c96e:	2232      	movs	r2, #50	@ 0x32
 800c970:	701a      	strb	r2, [r3, #0]
            _1s = 1;
        }
    }
#else

    if (++_1msCnt >= 1000)
 800c972:	4b1b      	ldr	r3, [pc, #108]	@ (800c9e0 <dealPerMs+0x158>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	3301      	adds	r3, #1
 800c978:	4a19      	ldr	r2, [pc, #100]	@ (800c9e0 <dealPerMs+0x158>)
 800c97a:	6013      	str	r3, [r2, #0]
 800c97c:	4b18      	ldr	r3, [pc, #96]	@ (800c9e0 <dealPerMs+0x158>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c984:	d305      	bcc.n	800c992 <dealPerMs+0x10a>
    {
        _1msCnt = 0;
 800c986:	4b16      	ldr	r3, [pc, #88]	@ (800c9e0 <dealPerMs+0x158>)
 800c988:	2200      	movs	r2, #0
 800c98a:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800c98c:	4b12      	ldr	r3, [pc, #72]	@ (800c9d8 <dealPerMs+0x150>)
 800c98e:	2201      	movs	r2, #1
 800c990:	701a      	strb	r2, [r3, #0]
    }
#endif
#if SPEED_UP
    _1s = 1;
#endif
    _1ms = 1;
 800c992:	4b14      	ldr	r3, [pc, #80]	@ (800c9e4 <dealPerMs+0x15c>)
 800c994:	2201      	movs	r2, #1
 800c996:	701a      	strb	r2, [r3, #0]




}
 800c998:	bf00      	nop
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr
 800c9a2:	bf00      	nop
 800c9a4:	200008e8 	.word	0x200008e8
 800c9a8:	200008e1 	.word	0x200008e1
 800c9ac:	200008e9 	.word	0x200008e9
 800c9b0:	200008e2 	.word	0x200008e2
 800c9b4:	200008ea 	.word	0x200008ea
 800c9b8:	200008e3 	.word	0x200008e3
 800c9bc:	200008eb 	.word	0x200008eb
 800c9c0:	200008e4 	.word	0x200008e4
 800c9c4:	200008ec 	.word	0x200008ec
 800c9c8:	200008e5 	.word	0x200008e5
 800c9cc:	200008f0 	.word	0x200008f0
 800c9d0:	200008e6 	.word	0x200008e6
 800c9d4:	200008f4 	.word	0x200008f4
 800c9d8:	200008d8 	.word	0x200008d8
 800c9dc:	200008e0 	.word	0x200008e0
 800c9e0:	200008dc 	.word	0x200008dc
 800c9e4:	200008d9 	.word	0x200008d9

0800c9e8 <getOneSecFlag>:
}



bool getOneSecFlag()
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	af00      	add	r7, sp, #0
    if (_1s)
 800c9ec:	4b07      	ldr	r3, [pc, #28]	@ (800ca0c <getOneSecFlag+0x24>)
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d004      	beq.n	800c9fe <getOneSecFlag+0x16>
    {
        _1s = 0;
 800c9f4:	4b05      	ldr	r3, [pc, #20]	@ (800ca0c <getOneSecFlag+0x24>)
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	701a      	strb	r2, [r3, #0]
        return 1;
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	e000      	b.n	800ca00 <getOneSecFlag+0x18>
    }
    else
        return 0;
 800c9fe:	2300      	movs	r3, #0
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	46bd      	mov	sp, r7
 800ca04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca08:	4770      	bx	lr
 800ca0a:	bf00      	nop
 800ca0c:	200008d8 	.word	0x200008d8

0800ca10 <get5MsFlag>:
bool getCrossZero()
{
    return crossZero;
}
bool get5MsFlag()
{
 800ca10:	b480      	push	{r7}
 800ca12:	af00      	add	r7, sp, #0
    if (_5msFlag)
 800ca14:	4b07      	ldr	r3, [pc, #28]	@ (800ca34 <get5MsFlag+0x24>)
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d004      	beq.n	800ca26 <get5MsFlag+0x16>
    {
        _5msFlag = 0;
 800ca1c:	4b05      	ldr	r3, [pc, #20]	@ (800ca34 <get5MsFlag+0x24>)
 800ca1e:	2200      	movs	r2, #0
 800ca20:	701a      	strb	r2, [r3, #0]
        return 1;
 800ca22:	2301      	movs	r3, #1
 800ca24:	e000      	b.n	800ca28 <get5MsFlag+0x18>
    }
    else
    {
        return 0;
 800ca26:	2300      	movs	r3, #0
    }
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr
 800ca32:	bf00      	nop
 800ca34:	200008e1 	.word	0x200008e1

0800ca38 <get100MsFlag>:
        return 0;
    }
}

bool get100MsFlag()
{
 800ca38:	b480      	push	{r7}
 800ca3a:	af00      	add	r7, sp, #0
    if (_100msFlag)
 800ca3c:	4b07      	ldr	r3, [pc, #28]	@ (800ca5c <get100MsFlag+0x24>)
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d004      	beq.n	800ca4e <get100MsFlag+0x16>
    {
        _100msFlag = 0;
 800ca44:	4b05      	ldr	r3, [pc, #20]	@ (800ca5c <get100MsFlag+0x24>)
 800ca46:	2200      	movs	r2, #0
 800ca48:	701a      	strb	r2, [r3, #0]
        return 1;
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	e000      	b.n	800ca50 <get100MsFlag+0x18>
    }
    else
    {
        return 0;
 800ca4e:	2300      	movs	r3, #0
    }
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	46bd      	mov	sp, r7
 800ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca58:	4770      	bx	lr
 800ca5a:	bf00      	nop
 800ca5c:	200008e5 	.word	0x200008e5

0800ca60 <atof>:
 800ca60:	2100      	movs	r1, #0
 800ca62:	f000 be0b 	b.w	800d67c <strtod>

0800ca66 <sulp>:
 800ca66:	b570      	push	{r4, r5, r6, lr}
 800ca68:	4604      	mov	r4, r0
 800ca6a:	460d      	mov	r5, r1
 800ca6c:	ec45 4b10 	vmov	d0, r4, r5
 800ca70:	4616      	mov	r6, r2
 800ca72:	f003 fc7d 	bl	8010370 <__ulp>
 800ca76:	ec51 0b10 	vmov	r0, r1, d0
 800ca7a:	b17e      	cbz	r6, 800ca9c <sulp+0x36>
 800ca7c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ca80:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	dd09      	ble.n	800ca9c <sulp+0x36>
 800ca88:	051b      	lsls	r3, r3, #20
 800ca8a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ca8e:	2400      	movs	r4, #0
 800ca90:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ca94:	4622      	mov	r2, r4
 800ca96:	462b      	mov	r3, r5
 800ca98:	f7f3 fdd6 	bl	8000648 <__aeabi_dmul>
 800ca9c:	ec41 0b10 	vmov	d0, r0, r1
 800caa0:	bd70      	pop	{r4, r5, r6, pc}
 800caa2:	0000      	movs	r0, r0
 800caa4:	0000      	movs	r0, r0
	...

0800caa8 <_strtod_l>:
 800caa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caac:	b09f      	sub	sp, #124	@ 0x7c
 800caae:	460c      	mov	r4, r1
 800cab0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800cab2:	2200      	movs	r2, #0
 800cab4:	921a      	str	r2, [sp, #104]	@ 0x68
 800cab6:	9005      	str	r0, [sp, #20]
 800cab8:	f04f 0a00 	mov.w	sl, #0
 800cabc:	f04f 0b00 	mov.w	fp, #0
 800cac0:	460a      	mov	r2, r1
 800cac2:	9219      	str	r2, [sp, #100]	@ 0x64
 800cac4:	7811      	ldrb	r1, [r2, #0]
 800cac6:	292b      	cmp	r1, #43	@ 0x2b
 800cac8:	d04a      	beq.n	800cb60 <_strtod_l+0xb8>
 800caca:	d838      	bhi.n	800cb3e <_strtod_l+0x96>
 800cacc:	290d      	cmp	r1, #13
 800cace:	d832      	bhi.n	800cb36 <_strtod_l+0x8e>
 800cad0:	2908      	cmp	r1, #8
 800cad2:	d832      	bhi.n	800cb3a <_strtod_l+0x92>
 800cad4:	2900      	cmp	r1, #0
 800cad6:	d03b      	beq.n	800cb50 <_strtod_l+0xa8>
 800cad8:	2200      	movs	r2, #0
 800cada:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cadc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800cade:	782a      	ldrb	r2, [r5, #0]
 800cae0:	2a30      	cmp	r2, #48	@ 0x30
 800cae2:	f040 80b3 	bne.w	800cc4c <_strtod_l+0x1a4>
 800cae6:	786a      	ldrb	r2, [r5, #1]
 800cae8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800caec:	2a58      	cmp	r2, #88	@ 0x58
 800caee:	d16e      	bne.n	800cbce <_strtod_l+0x126>
 800caf0:	9302      	str	r3, [sp, #8]
 800caf2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800caf4:	9301      	str	r3, [sp, #4]
 800caf6:	ab1a      	add	r3, sp, #104	@ 0x68
 800caf8:	9300      	str	r3, [sp, #0]
 800cafa:	4a8e      	ldr	r2, [pc, #568]	@ (800cd34 <_strtod_l+0x28c>)
 800cafc:	9805      	ldr	r0, [sp, #20]
 800cafe:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cb00:	a919      	add	r1, sp, #100	@ 0x64
 800cb02:	f002 fd27 	bl	800f554 <__gethex>
 800cb06:	f010 060f 	ands.w	r6, r0, #15
 800cb0a:	4604      	mov	r4, r0
 800cb0c:	d005      	beq.n	800cb1a <_strtod_l+0x72>
 800cb0e:	2e06      	cmp	r6, #6
 800cb10:	d128      	bne.n	800cb64 <_strtod_l+0xbc>
 800cb12:	3501      	adds	r5, #1
 800cb14:	2300      	movs	r3, #0
 800cb16:	9519      	str	r5, [sp, #100]	@ 0x64
 800cb18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	f040 858e 	bne.w	800d63e <_strtod_l+0xb96>
 800cb22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb24:	b1cb      	cbz	r3, 800cb5a <_strtod_l+0xb2>
 800cb26:	4652      	mov	r2, sl
 800cb28:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cb2c:	ec43 2b10 	vmov	d0, r2, r3
 800cb30:	b01f      	add	sp, #124	@ 0x7c
 800cb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb36:	2920      	cmp	r1, #32
 800cb38:	d1ce      	bne.n	800cad8 <_strtod_l+0x30>
 800cb3a:	3201      	adds	r2, #1
 800cb3c:	e7c1      	b.n	800cac2 <_strtod_l+0x1a>
 800cb3e:	292d      	cmp	r1, #45	@ 0x2d
 800cb40:	d1ca      	bne.n	800cad8 <_strtod_l+0x30>
 800cb42:	2101      	movs	r1, #1
 800cb44:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cb46:	1c51      	adds	r1, r2, #1
 800cb48:	9119      	str	r1, [sp, #100]	@ 0x64
 800cb4a:	7852      	ldrb	r2, [r2, #1]
 800cb4c:	2a00      	cmp	r2, #0
 800cb4e:	d1c5      	bne.n	800cadc <_strtod_l+0x34>
 800cb50:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cb52:	9419      	str	r4, [sp, #100]	@ 0x64
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	f040 8570 	bne.w	800d63a <_strtod_l+0xb92>
 800cb5a:	4652      	mov	r2, sl
 800cb5c:	465b      	mov	r3, fp
 800cb5e:	e7e5      	b.n	800cb2c <_strtod_l+0x84>
 800cb60:	2100      	movs	r1, #0
 800cb62:	e7ef      	b.n	800cb44 <_strtod_l+0x9c>
 800cb64:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cb66:	b13a      	cbz	r2, 800cb78 <_strtod_l+0xd0>
 800cb68:	2135      	movs	r1, #53	@ 0x35
 800cb6a:	a81c      	add	r0, sp, #112	@ 0x70
 800cb6c:	f003 fcfa 	bl	8010564 <__copybits>
 800cb70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb72:	9805      	ldr	r0, [sp, #20]
 800cb74:	f003 f8c8 	bl	800fd08 <_Bfree>
 800cb78:	3e01      	subs	r6, #1
 800cb7a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cb7c:	2e04      	cmp	r6, #4
 800cb7e:	d806      	bhi.n	800cb8e <_strtod_l+0xe6>
 800cb80:	e8df f006 	tbb	[pc, r6]
 800cb84:	201d0314 	.word	0x201d0314
 800cb88:	14          	.byte	0x14
 800cb89:	00          	.byte	0x00
 800cb8a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cb8e:	05e1      	lsls	r1, r4, #23
 800cb90:	bf48      	it	mi
 800cb92:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cb96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cb9a:	0d1b      	lsrs	r3, r3, #20
 800cb9c:	051b      	lsls	r3, r3, #20
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d1bb      	bne.n	800cb1a <_strtod_l+0x72>
 800cba2:	f001 fd8d 	bl	800e6c0 <__errno>
 800cba6:	2322      	movs	r3, #34	@ 0x22
 800cba8:	6003      	str	r3, [r0, #0]
 800cbaa:	e7b6      	b.n	800cb1a <_strtod_l+0x72>
 800cbac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cbb0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cbb4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cbb8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cbbc:	e7e7      	b.n	800cb8e <_strtod_l+0xe6>
 800cbbe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800cd3c <_strtod_l+0x294>
 800cbc2:	e7e4      	b.n	800cb8e <_strtod_l+0xe6>
 800cbc4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cbc8:	f04f 3aff 	mov.w	sl, #4294967295
 800cbcc:	e7df      	b.n	800cb8e <_strtod_l+0xe6>
 800cbce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbd0:	1c5a      	adds	r2, r3, #1
 800cbd2:	9219      	str	r2, [sp, #100]	@ 0x64
 800cbd4:	785b      	ldrb	r3, [r3, #1]
 800cbd6:	2b30      	cmp	r3, #48	@ 0x30
 800cbd8:	d0f9      	beq.n	800cbce <_strtod_l+0x126>
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d09d      	beq.n	800cb1a <_strtod_l+0x72>
 800cbde:	2301      	movs	r3, #1
 800cbe0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbe2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbe4:	930c      	str	r3, [sp, #48]	@ 0x30
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	9308      	str	r3, [sp, #32]
 800cbea:	930a      	str	r3, [sp, #40]	@ 0x28
 800cbec:	461f      	mov	r7, r3
 800cbee:	220a      	movs	r2, #10
 800cbf0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cbf2:	7805      	ldrb	r5, [r0, #0]
 800cbf4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cbf8:	b2d9      	uxtb	r1, r3
 800cbfa:	2909      	cmp	r1, #9
 800cbfc:	d928      	bls.n	800cc50 <_strtod_l+0x1a8>
 800cbfe:	494e      	ldr	r1, [pc, #312]	@ (800cd38 <_strtod_l+0x290>)
 800cc00:	2201      	movs	r2, #1
 800cc02:	f001 fd01 	bl	800e608 <strncmp>
 800cc06:	2800      	cmp	r0, #0
 800cc08:	d032      	beq.n	800cc70 <_strtod_l+0x1c8>
 800cc0a:	2000      	movs	r0, #0
 800cc0c:	462a      	mov	r2, r5
 800cc0e:	4681      	mov	r9, r0
 800cc10:	463d      	mov	r5, r7
 800cc12:	4603      	mov	r3, r0
 800cc14:	2a65      	cmp	r2, #101	@ 0x65
 800cc16:	d001      	beq.n	800cc1c <_strtod_l+0x174>
 800cc18:	2a45      	cmp	r2, #69	@ 0x45
 800cc1a:	d114      	bne.n	800cc46 <_strtod_l+0x19e>
 800cc1c:	b91d      	cbnz	r5, 800cc26 <_strtod_l+0x17e>
 800cc1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc20:	4302      	orrs	r2, r0
 800cc22:	d095      	beq.n	800cb50 <_strtod_l+0xa8>
 800cc24:	2500      	movs	r5, #0
 800cc26:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cc28:	1c62      	adds	r2, r4, #1
 800cc2a:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc2c:	7862      	ldrb	r2, [r4, #1]
 800cc2e:	2a2b      	cmp	r2, #43	@ 0x2b
 800cc30:	d077      	beq.n	800cd22 <_strtod_l+0x27a>
 800cc32:	2a2d      	cmp	r2, #45	@ 0x2d
 800cc34:	d07b      	beq.n	800cd2e <_strtod_l+0x286>
 800cc36:	f04f 0c00 	mov.w	ip, #0
 800cc3a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cc3e:	2909      	cmp	r1, #9
 800cc40:	f240 8082 	bls.w	800cd48 <_strtod_l+0x2a0>
 800cc44:	9419      	str	r4, [sp, #100]	@ 0x64
 800cc46:	f04f 0800 	mov.w	r8, #0
 800cc4a:	e0a2      	b.n	800cd92 <_strtod_l+0x2ea>
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	e7c7      	b.n	800cbe0 <_strtod_l+0x138>
 800cc50:	2f08      	cmp	r7, #8
 800cc52:	bfd5      	itete	le
 800cc54:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800cc56:	9908      	ldrgt	r1, [sp, #32]
 800cc58:	fb02 3301 	mlale	r3, r2, r1, r3
 800cc5c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800cc60:	f100 0001 	add.w	r0, r0, #1
 800cc64:	bfd4      	ite	le
 800cc66:	930a      	strle	r3, [sp, #40]	@ 0x28
 800cc68:	9308      	strgt	r3, [sp, #32]
 800cc6a:	3701      	adds	r7, #1
 800cc6c:	9019      	str	r0, [sp, #100]	@ 0x64
 800cc6e:	e7bf      	b.n	800cbf0 <_strtod_l+0x148>
 800cc70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc72:	1c5a      	adds	r2, r3, #1
 800cc74:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc76:	785a      	ldrb	r2, [r3, #1]
 800cc78:	b37f      	cbz	r7, 800ccda <_strtod_l+0x232>
 800cc7a:	4681      	mov	r9, r0
 800cc7c:	463d      	mov	r5, r7
 800cc7e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800cc82:	2b09      	cmp	r3, #9
 800cc84:	d912      	bls.n	800ccac <_strtod_l+0x204>
 800cc86:	2301      	movs	r3, #1
 800cc88:	e7c4      	b.n	800cc14 <_strtod_l+0x16c>
 800cc8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc8c:	1c5a      	adds	r2, r3, #1
 800cc8e:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc90:	785a      	ldrb	r2, [r3, #1]
 800cc92:	3001      	adds	r0, #1
 800cc94:	2a30      	cmp	r2, #48	@ 0x30
 800cc96:	d0f8      	beq.n	800cc8a <_strtod_l+0x1e2>
 800cc98:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cc9c:	2b08      	cmp	r3, #8
 800cc9e:	f200 84d3 	bhi.w	800d648 <_strtod_l+0xba0>
 800cca2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cca4:	930c      	str	r3, [sp, #48]	@ 0x30
 800cca6:	4681      	mov	r9, r0
 800cca8:	2000      	movs	r0, #0
 800ccaa:	4605      	mov	r5, r0
 800ccac:	3a30      	subs	r2, #48	@ 0x30
 800ccae:	f100 0301 	add.w	r3, r0, #1
 800ccb2:	d02a      	beq.n	800cd0a <_strtod_l+0x262>
 800ccb4:	4499      	add	r9, r3
 800ccb6:	eb00 0c05 	add.w	ip, r0, r5
 800ccba:	462b      	mov	r3, r5
 800ccbc:	210a      	movs	r1, #10
 800ccbe:	4563      	cmp	r3, ip
 800ccc0:	d10d      	bne.n	800ccde <_strtod_l+0x236>
 800ccc2:	1c69      	adds	r1, r5, #1
 800ccc4:	4401      	add	r1, r0
 800ccc6:	4428      	add	r0, r5
 800ccc8:	2808      	cmp	r0, #8
 800ccca:	dc16      	bgt.n	800ccfa <_strtod_l+0x252>
 800cccc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ccce:	230a      	movs	r3, #10
 800ccd0:	fb03 2300 	mla	r3, r3, r0, r2
 800ccd4:	930a      	str	r3, [sp, #40]	@ 0x28
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	e018      	b.n	800cd0c <_strtod_l+0x264>
 800ccda:	4638      	mov	r0, r7
 800ccdc:	e7da      	b.n	800cc94 <_strtod_l+0x1ec>
 800ccde:	2b08      	cmp	r3, #8
 800cce0:	f103 0301 	add.w	r3, r3, #1
 800cce4:	dc03      	bgt.n	800ccee <_strtod_l+0x246>
 800cce6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cce8:	434e      	muls	r6, r1
 800ccea:	960a      	str	r6, [sp, #40]	@ 0x28
 800ccec:	e7e7      	b.n	800ccbe <_strtod_l+0x216>
 800ccee:	2b10      	cmp	r3, #16
 800ccf0:	bfde      	ittt	le
 800ccf2:	9e08      	ldrle	r6, [sp, #32]
 800ccf4:	434e      	mulle	r6, r1
 800ccf6:	9608      	strle	r6, [sp, #32]
 800ccf8:	e7e1      	b.n	800ccbe <_strtod_l+0x216>
 800ccfa:	280f      	cmp	r0, #15
 800ccfc:	dceb      	bgt.n	800ccd6 <_strtod_l+0x22e>
 800ccfe:	9808      	ldr	r0, [sp, #32]
 800cd00:	230a      	movs	r3, #10
 800cd02:	fb03 2300 	mla	r3, r3, r0, r2
 800cd06:	9308      	str	r3, [sp, #32]
 800cd08:	e7e5      	b.n	800ccd6 <_strtod_l+0x22e>
 800cd0a:	4629      	mov	r1, r5
 800cd0c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd0e:	1c50      	adds	r0, r2, #1
 800cd10:	9019      	str	r0, [sp, #100]	@ 0x64
 800cd12:	7852      	ldrb	r2, [r2, #1]
 800cd14:	4618      	mov	r0, r3
 800cd16:	460d      	mov	r5, r1
 800cd18:	e7b1      	b.n	800cc7e <_strtod_l+0x1d6>
 800cd1a:	f04f 0900 	mov.w	r9, #0
 800cd1e:	2301      	movs	r3, #1
 800cd20:	e77d      	b.n	800cc1e <_strtod_l+0x176>
 800cd22:	f04f 0c00 	mov.w	ip, #0
 800cd26:	1ca2      	adds	r2, r4, #2
 800cd28:	9219      	str	r2, [sp, #100]	@ 0x64
 800cd2a:	78a2      	ldrb	r2, [r4, #2]
 800cd2c:	e785      	b.n	800cc3a <_strtod_l+0x192>
 800cd2e:	f04f 0c01 	mov.w	ip, #1
 800cd32:	e7f8      	b.n	800cd26 <_strtod_l+0x27e>
 800cd34:	0801157c 	.word	0x0801157c
 800cd38:	08011564 	.word	0x08011564
 800cd3c:	7ff00000 	.word	0x7ff00000
 800cd40:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd42:	1c51      	adds	r1, r2, #1
 800cd44:	9119      	str	r1, [sp, #100]	@ 0x64
 800cd46:	7852      	ldrb	r2, [r2, #1]
 800cd48:	2a30      	cmp	r2, #48	@ 0x30
 800cd4a:	d0f9      	beq.n	800cd40 <_strtod_l+0x298>
 800cd4c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cd50:	2908      	cmp	r1, #8
 800cd52:	f63f af78 	bhi.w	800cc46 <_strtod_l+0x19e>
 800cd56:	3a30      	subs	r2, #48	@ 0x30
 800cd58:	920e      	str	r2, [sp, #56]	@ 0x38
 800cd5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd5c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cd5e:	f04f 080a 	mov.w	r8, #10
 800cd62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd64:	1c56      	adds	r6, r2, #1
 800cd66:	9619      	str	r6, [sp, #100]	@ 0x64
 800cd68:	7852      	ldrb	r2, [r2, #1]
 800cd6a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cd6e:	f1be 0f09 	cmp.w	lr, #9
 800cd72:	d939      	bls.n	800cde8 <_strtod_l+0x340>
 800cd74:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cd76:	1a76      	subs	r6, r6, r1
 800cd78:	2e08      	cmp	r6, #8
 800cd7a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cd7e:	dc03      	bgt.n	800cd88 <_strtod_l+0x2e0>
 800cd80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cd82:	4588      	cmp	r8, r1
 800cd84:	bfa8      	it	ge
 800cd86:	4688      	movge	r8, r1
 800cd88:	f1bc 0f00 	cmp.w	ip, #0
 800cd8c:	d001      	beq.n	800cd92 <_strtod_l+0x2ea>
 800cd8e:	f1c8 0800 	rsb	r8, r8, #0
 800cd92:	2d00      	cmp	r5, #0
 800cd94:	d14e      	bne.n	800ce34 <_strtod_l+0x38c>
 800cd96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd98:	4308      	orrs	r0, r1
 800cd9a:	f47f aebe 	bne.w	800cb1a <_strtod_l+0x72>
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	f47f aed6 	bne.w	800cb50 <_strtod_l+0xa8>
 800cda4:	2a69      	cmp	r2, #105	@ 0x69
 800cda6:	d028      	beq.n	800cdfa <_strtod_l+0x352>
 800cda8:	dc25      	bgt.n	800cdf6 <_strtod_l+0x34e>
 800cdaa:	2a49      	cmp	r2, #73	@ 0x49
 800cdac:	d025      	beq.n	800cdfa <_strtod_l+0x352>
 800cdae:	2a4e      	cmp	r2, #78	@ 0x4e
 800cdb0:	f47f aece 	bne.w	800cb50 <_strtod_l+0xa8>
 800cdb4:	499b      	ldr	r1, [pc, #620]	@ (800d024 <_strtod_l+0x57c>)
 800cdb6:	a819      	add	r0, sp, #100	@ 0x64
 800cdb8:	f002 fdee 	bl	800f998 <__match>
 800cdbc:	2800      	cmp	r0, #0
 800cdbe:	f43f aec7 	beq.w	800cb50 <_strtod_l+0xa8>
 800cdc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	2b28      	cmp	r3, #40	@ 0x28
 800cdc8:	d12e      	bne.n	800ce28 <_strtod_l+0x380>
 800cdca:	4997      	ldr	r1, [pc, #604]	@ (800d028 <_strtod_l+0x580>)
 800cdcc:	aa1c      	add	r2, sp, #112	@ 0x70
 800cdce:	a819      	add	r0, sp, #100	@ 0x64
 800cdd0:	f002 fdf6 	bl	800f9c0 <__hexnan>
 800cdd4:	2805      	cmp	r0, #5
 800cdd6:	d127      	bne.n	800ce28 <_strtod_l+0x380>
 800cdd8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cdda:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cdde:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cde2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cde6:	e698      	b.n	800cb1a <_strtod_l+0x72>
 800cde8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cdea:	fb08 2101 	mla	r1, r8, r1, r2
 800cdee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cdf2:	920e      	str	r2, [sp, #56]	@ 0x38
 800cdf4:	e7b5      	b.n	800cd62 <_strtod_l+0x2ba>
 800cdf6:	2a6e      	cmp	r2, #110	@ 0x6e
 800cdf8:	e7da      	b.n	800cdb0 <_strtod_l+0x308>
 800cdfa:	498c      	ldr	r1, [pc, #560]	@ (800d02c <_strtod_l+0x584>)
 800cdfc:	a819      	add	r0, sp, #100	@ 0x64
 800cdfe:	f002 fdcb 	bl	800f998 <__match>
 800ce02:	2800      	cmp	r0, #0
 800ce04:	f43f aea4 	beq.w	800cb50 <_strtod_l+0xa8>
 800ce08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce0a:	4989      	ldr	r1, [pc, #548]	@ (800d030 <_strtod_l+0x588>)
 800ce0c:	3b01      	subs	r3, #1
 800ce0e:	a819      	add	r0, sp, #100	@ 0x64
 800ce10:	9319      	str	r3, [sp, #100]	@ 0x64
 800ce12:	f002 fdc1 	bl	800f998 <__match>
 800ce16:	b910      	cbnz	r0, 800ce1e <_strtod_l+0x376>
 800ce18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce1a:	3301      	adds	r3, #1
 800ce1c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ce1e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d040 <_strtod_l+0x598>
 800ce22:	f04f 0a00 	mov.w	sl, #0
 800ce26:	e678      	b.n	800cb1a <_strtod_l+0x72>
 800ce28:	4882      	ldr	r0, [pc, #520]	@ (800d034 <_strtod_l+0x58c>)
 800ce2a:	f001 fc85 	bl	800e738 <nan>
 800ce2e:	ec5b ab10 	vmov	sl, fp, d0
 800ce32:	e672      	b.n	800cb1a <_strtod_l+0x72>
 800ce34:	eba8 0309 	sub.w	r3, r8, r9
 800ce38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ce3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce3c:	2f00      	cmp	r7, #0
 800ce3e:	bf08      	it	eq
 800ce40:	462f      	moveq	r7, r5
 800ce42:	2d10      	cmp	r5, #16
 800ce44:	462c      	mov	r4, r5
 800ce46:	bfa8      	it	ge
 800ce48:	2410      	movge	r4, #16
 800ce4a:	f7f3 fb83 	bl	8000554 <__aeabi_ui2d>
 800ce4e:	2d09      	cmp	r5, #9
 800ce50:	4682      	mov	sl, r0
 800ce52:	468b      	mov	fp, r1
 800ce54:	dc13      	bgt.n	800ce7e <_strtod_l+0x3d6>
 800ce56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	f43f ae5e 	beq.w	800cb1a <_strtod_l+0x72>
 800ce5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce60:	dd78      	ble.n	800cf54 <_strtod_l+0x4ac>
 800ce62:	2b16      	cmp	r3, #22
 800ce64:	dc5f      	bgt.n	800cf26 <_strtod_l+0x47e>
 800ce66:	4974      	ldr	r1, [pc, #464]	@ (800d038 <_strtod_l+0x590>)
 800ce68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce70:	4652      	mov	r2, sl
 800ce72:	465b      	mov	r3, fp
 800ce74:	f7f3 fbe8 	bl	8000648 <__aeabi_dmul>
 800ce78:	4682      	mov	sl, r0
 800ce7a:	468b      	mov	fp, r1
 800ce7c:	e64d      	b.n	800cb1a <_strtod_l+0x72>
 800ce7e:	4b6e      	ldr	r3, [pc, #440]	@ (800d038 <_strtod_l+0x590>)
 800ce80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce84:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ce88:	f7f3 fbde 	bl	8000648 <__aeabi_dmul>
 800ce8c:	4682      	mov	sl, r0
 800ce8e:	9808      	ldr	r0, [sp, #32]
 800ce90:	468b      	mov	fp, r1
 800ce92:	f7f3 fb5f 	bl	8000554 <__aeabi_ui2d>
 800ce96:	4602      	mov	r2, r0
 800ce98:	460b      	mov	r3, r1
 800ce9a:	4650      	mov	r0, sl
 800ce9c:	4659      	mov	r1, fp
 800ce9e:	f7f3 fa1d 	bl	80002dc <__adddf3>
 800cea2:	2d0f      	cmp	r5, #15
 800cea4:	4682      	mov	sl, r0
 800cea6:	468b      	mov	fp, r1
 800cea8:	ddd5      	ble.n	800ce56 <_strtod_l+0x3ae>
 800ceaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceac:	1b2c      	subs	r4, r5, r4
 800ceae:	441c      	add	r4, r3
 800ceb0:	2c00      	cmp	r4, #0
 800ceb2:	f340 8096 	ble.w	800cfe2 <_strtod_l+0x53a>
 800ceb6:	f014 030f 	ands.w	r3, r4, #15
 800ceba:	d00a      	beq.n	800ced2 <_strtod_l+0x42a>
 800cebc:	495e      	ldr	r1, [pc, #376]	@ (800d038 <_strtod_l+0x590>)
 800cebe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cec2:	4652      	mov	r2, sl
 800cec4:	465b      	mov	r3, fp
 800cec6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ceca:	f7f3 fbbd 	bl	8000648 <__aeabi_dmul>
 800cece:	4682      	mov	sl, r0
 800ced0:	468b      	mov	fp, r1
 800ced2:	f034 040f 	bics.w	r4, r4, #15
 800ced6:	d073      	beq.n	800cfc0 <_strtod_l+0x518>
 800ced8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cedc:	dd48      	ble.n	800cf70 <_strtod_l+0x4c8>
 800cede:	2400      	movs	r4, #0
 800cee0:	46a0      	mov	r8, r4
 800cee2:	940a      	str	r4, [sp, #40]	@ 0x28
 800cee4:	46a1      	mov	r9, r4
 800cee6:	9a05      	ldr	r2, [sp, #20]
 800cee8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d040 <_strtod_l+0x598>
 800ceec:	2322      	movs	r3, #34	@ 0x22
 800ceee:	6013      	str	r3, [r2, #0]
 800cef0:	f04f 0a00 	mov.w	sl, #0
 800cef4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	f43f ae0f 	beq.w	800cb1a <_strtod_l+0x72>
 800cefc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cefe:	9805      	ldr	r0, [sp, #20]
 800cf00:	f002 ff02 	bl	800fd08 <_Bfree>
 800cf04:	9805      	ldr	r0, [sp, #20]
 800cf06:	4649      	mov	r1, r9
 800cf08:	f002 fefe 	bl	800fd08 <_Bfree>
 800cf0c:	9805      	ldr	r0, [sp, #20]
 800cf0e:	4641      	mov	r1, r8
 800cf10:	f002 fefa 	bl	800fd08 <_Bfree>
 800cf14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cf16:	9805      	ldr	r0, [sp, #20]
 800cf18:	f002 fef6 	bl	800fd08 <_Bfree>
 800cf1c:	9805      	ldr	r0, [sp, #20]
 800cf1e:	4621      	mov	r1, r4
 800cf20:	f002 fef2 	bl	800fd08 <_Bfree>
 800cf24:	e5f9      	b.n	800cb1a <_strtod_l+0x72>
 800cf26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf28:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	dbbc      	blt.n	800ceaa <_strtod_l+0x402>
 800cf30:	4c41      	ldr	r4, [pc, #260]	@ (800d038 <_strtod_l+0x590>)
 800cf32:	f1c5 050f 	rsb	r5, r5, #15
 800cf36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cf3a:	4652      	mov	r2, sl
 800cf3c:	465b      	mov	r3, fp
 800cf3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf42:	f7f3 fb81 	bl	8000648 <__aeabi_dmul>
 800cf46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf48:	1b5d      	subs	r5, r3, r5
 800cf4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cf4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cf52:	e78f      	b.n	800ce74 <_strtod_l+0x3cc>
 800cf54:	3316      	adds	r3, #22
 800cf56:	dba8      	blt.n	800ceaa <_strtod_l+0x402>
 800cf58:	4b37      	ldr	r3, [pc, #220]	@ (800d038 <_strtod_l+0x590>)
 800cf5a:	eba9 0808 	sub.w	r8, r9, r8
 800cf5e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cf62:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cf66:	4650      	mov	r0, sl
 800cf68:	4659      	mov	r1, fp
 800cf6a:	f7f3 fc97 	bl	800089c <__aeabi_ddiv>
 800cf6e:	e783      	b.n	800ce78 <_strtod_l+0x3d0>
 800cf70:	4b32      	ldr	r3, [pc, #200]	@ (800d03c <_strtod_l+0x594>)
 800cf72:	9308      	str	r3, [sp, #32]
 800cf74:	2300      	movs	r3, #0
 800cf76:	1124      	asrs	r4, r4, #4
 800cf78:	4650      	mov	r0, sl
 800cf7a:	4659      	mov	r1, fp
 800cf7c:	461e      	mov	r6, r3
 800cf7e:	2c01      	cmp	r4, #1
 800cf80:	dc21      	bgt.n	800cfc6 <_strtod_l+0x51e>
 800cf82:	b10b      	cbz	r3, 800cf88 <_strtod_l+0x4e0>
 800cf84:	4682      	mov	sl, r0
 800cf86:	468b      	mov	fp, r1
 800cf88:	492c      	ldr	r1, [pc, #176]	@ (800d03c <_strtod_l+0x594>)
 800cf8a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cf8e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cf92:	4652      	mov	r2, sl
 800cf94:	465b      	mov	r3, fp
 800cf96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf9a:	f7f3 fb55 	bl	8000648 <__aeabi_dmul>
 800cf9e:	4b28      	ldr	r3, [pc, #160]	@ (800d040 <_strtod_l+0x598>)
 800cfa0:	460a      	mov	r2, r1
 800cfa2:	400b      	ands	r3, r1
 800cfa4:	4927      	ldr	r1, [pc, #156]	@ (800d044 <_strtod_l+0x59c>)
 800cfa6:	428b      	cmp	r3, r1
 800cfa8:	4682      	mov	sl, r0
 800cfaa:	d898      	bhi.n	800cede <_strtod_l+0x436>
 800cfac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cfb0:	428b      	cmp	r3, r1
 800cfb2:	bf86      	itte	hi
 800cfb4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d048 <_strtod_l+0x5a0>
 800cfb8:	f04f 3aff 	movhi.w	sl, #4294967295
 800cfbc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	9308      	str	r3, [sp, #32]
 800cfc4:	e07a      	b.n	800d0bc <_strtod_l+0x614>
 800cfc6:	07e2      	lsls	r2, r4, #31
 800cfc8:	d505      	bpl.n	800cfd6 <_strtod_l+0x52e>
 800cfca:	9b08      	ldr	r3, [sp, #32]
 800cfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd0:	f7f3 fb3a 	bl	8000648 <__aeabi_dmul>
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	9a08      	ldr	r2, [sp, #32]
 800cfd8:	3208      	adds	r2, #8
 800cfda:	3601      	adds	r6, #1
 800cfdc:	1064      	asrs	r4, r4, #1
 800cfde:	9208      	str	r2, [sp, #32]
 800cfe0:	e7cd      	b.n	800cf7e <_strtod_l+0x4d6>
 800cfe2:	d0ed      	beq.n	800cfc0 <_strtod_l+0x518>
 800cfe4:	4264      	negs	r4, r4
 800cfe6:	f014 020f 	ands.w	r2, r4, #15
 800cfea:	d00a      	beq.n	800d002 <_strtod_l+0x55a>
 800cfec:	4b12      	ldr	r3, [pc, #72]	@ (800d038 <_strtod_l+0x590>)
 800cfee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cff2:	4650      	mov	r0, sl
 800cff4:	4659      	mov	r1, fp
 800cff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cffa:	f7f3 fc4f 	bl	800089c <__aeabi_ddiv>
 800cffe:	4682      	mov	sl, r0
 800d000:	468b      	mov	fp, r1
 800d002:	1124      	asrs	r4, r4, #4
 800d004:	d0dc      	beq.n	800cfc0 <_strtod_l+0x518>
 800d006:	2c1f      	cmp	r4, #31
 800d008:	dd20      	ble.n	800d04c <_strtod_l+0x5a4>
 800d00a:	2400      	movs	r4, #0
 800d00c:	46a0      	mov	r8, r4
 800d00e:	940a      	str	r4, [sp, #40]	@ 0x28
 800d010:	46a1      	mov	r9, r4
 800d012:	9a05      	ldr	r2, [sp, #20]
 800d014:	2322      	movs	r3, #34	@ 0x22
 800d016:	f04f 0a00 	mov.w	sl, #0
 800d01a:	f04f 0b00 	mov.w	fp, #0
 800d01e:	6013      	str	r3, [r2, #0]
 800d020:	e768      	b.n	800cef4 <_strtod_l+0x44c>
 800d022:	bf00      	nop
 800d024:	080115c5 	.word	0x080115c5
 800d028:	08011568 	.word	0x08011568
 800d02c:	080115bd 	.word	0x080115bd
 800d030:	080115fc 	.word	0x080115fc
 800d034:	0801198d 	.word	0x0801198d
 800d038:	08011778 	.word	0x08011778
 800d03c:	08011750 	.word	0x08011750
 800d040:	7ff00000 	.word	0x7ff00000
 800d044:	7ca00000 	.word	0x7ca00000
 800d048:	7fefffff 	.word	0x7fefffff
 800d04c:	f014 0310 	ands.w	r3, r4, #16
 800d050:	bf18      	it	ne
 800d052:	236a      	movne	r3, #106	@ 0x6a
 800d054:	4ea9      	ldr	r6, [pc, #676]	@ (800d2fc <_strtod_l+0x854>)
 800d056:	9308      	str	r3, [sp, #32]
 800d058:	4650      	mov	r0, sl
 800d05a:	4659      	mov	r1, fp
 800d05c:	2300      	movs	r3, #0
 800d05e:	07e2      	lsls	r2, r4, #31
 800d060:	d504      	bpl.n	800d06c <_strtod_l+0x5c4>
 800d062:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d066:	f7f3 faef 	bl	8000648 <__aeabi_dmul>
 800d06a:	2301      	movs	r3, #1
 800d06c:	1064      	asrs	r4, r4, #1
 800d06e:	f106 0608 	add.w	r6, r6, #8
 800d072:	d1f4      	bne.n	800d05e <_strtod_l+0x5b6>
 800d074:	b10b      	cbz	r3, 800d07a <_strtod_l+0x5d2>
 800d076:	4682      	mov	sl, r0
 800d078:	468b      	mov	fp, r1
 800d07a:	9b08      	ldr	r3, [sp, #32]
 800d07c:	b1b3      	cbz	r3, 800d0ac <_strtod_l+0x604>
 800d07e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d082:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d086:	2b00      	cmp	r3, #0
 800d088:	4659      	mov	r1, fp
 800d08a:	dd0f      	ble.n	800d0ac <_strtod_l+0x604>
 800d08c:	2b1f      	cmp	r3, #31
 800d08e:	dd55      	ble.n	800d13c <_strtod_l+0x694>
 800d090:	2b34      	cmp	r3, #52	@ 0x34
 800d092:	bfde      	ittt	le
 800d094:	f04f 33ff 	movle.w	r3, #4294967295
 800d098:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d09c:	4093      	lslle	r3, r2
 800d09e:	f04f 0a00 	mov.w	sl, #0
 800d0a2:	bfcc      	ite	gt
 800d0a4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d0a8:	ea03 0b01 	andle.w	fp, r3, r1
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	4650      	mov	r0, sl
 800d0b2:	4659      	mov	r1, fp
 800d0b4:	f7f3 fd30 	bl	8000b18 <__aeabi_dcmpeq>
 800d0b8:	2800      	cmp	r0, #0
 800d0ba:	d1a6      	bne.n	800d00a <_strtod_l+0x562>
 800d0bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0be:	9300      	str	r3, [sp, #0]
 800d0c0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d0c2:	9805      	ldr	r0, [sp, #20]
 800d0c4:	462b      	mov	r3, r5
 800d0c6:	463a      	mov	r2, r7
 800d0c8:	f002 fe86 	bl	800fdd8 <__s2b>
 800d0cc:	900a      	str	r0, [sp, #40]	@ 0x28
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	f43f af05 	beq.w	800cede <_strtod_l+0x436>
 800d0d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d0d6:	2a00      	cmp	r2, #0
 800d0d8:	eba9 0308 	sub.w	r3, r9, r8
 800d0dc:	bfa8      	it	ge
 800d0de:	2300      	movge	r3, #0
 800d0e0:	9312      	str	r3, [sp, #72]	@ 0x48
 800d0e2:	2400      	movs	r4, #0
 800d0e4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d0e8:	9316      	str	r3, [sp, #88]	@ 0x58
 800d0ea:	46a0      	mov	r8, r4
 800d0ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0ee:	9805      	ldr	r0, [sp, #20]
 800d0f0:	6859      	ldr	r1, [r3, #4]
 800d0f2:	f002 fdc9 	bl	800fc88 <_Balloc>
 800d0f6:	4681      	mov	r9, r0
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	f43f aef4 	beq.w	800cee6 <_strtod_l+0x43e>
 800d0fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d100:	691a      	ldr	r2, [r3, #16]
 800d102:	3202      	adds	r2, #2
 800d104:	f103 010c 	add.w	r1, r3, #12
 800d108:	0092      	lsls	r2, r2, #2
 800d10a:	300c      	adds	r0, #12
 800d10c:	f001 fb05 	bl	800e71a <memcpy>
 800d110:	ec4b ab10 	vmov	d0, sl, fp
 800d114:	9805      	ldr	r0, [sp, #20]
 800d116:	aa1c      	add	r2, sp, #112	@ 0x70
 800d118:	a91b      	add	r1, sp, #108	@ 0x6c
 800d11a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d11e:	f003 f997 	bl	8010450 <__d2b>
 800d122:	901a      	str	r0, [sp, #104]	@ 0x68
 800d124:	2800      	cmp	r0, #0
 800d126:	f43f aede 	beq.w	800cee6 <_strtod_l+0x43e>
 800d12a:	9805      	ldr	r0, [sp, #20]
 800d12c:	2101      	movs	r1, #1
 800d12e:	f002 fee9 	bl	800ff04 <__i2b>
 800d132:	4680      	mov	r8, r0
 800d134:	b948      	cbnz	r0, 800d14a <_strtod_l+0x6a2>
 800d136:	f04f 0800 	mov.w	r8, #0
 800d13a:	e6d4      	b.n	800cee6 <_strtod_l+0x43e>
 800d13c:	f04f 32ff 	mov.w	r2, #4294967295
 800d140:	fa02 f303 	lsl.w	r3, r2, r3
 800d144:	ea03 0a0a 	and.w	sl, r3, sl
 800d148:	e7b0      	b.n	800d0ac <_strtod_l+0x604>
 800d14a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d14c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d14e:	2d00      	cmp	r5, #0
 800d150:	bfab      	itete	ge
 800d152:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d154:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d156:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d158:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d15a:	bfac      	ite	ge
 800d15c:	18ef      	addge	r7, r5, r3
 800d15e:	1b5e      	sublt	r6, r3, r5
 800d160:	9b08      	ldr	r3, [sp, #32]
 800d162:	1aed      	subs	r5, r5, r3
 800d164:	4415      	add	r5, r2
 800d166:	4b66      	ldr	r3, [pc, #408]	@ (800d300 <_strtod_l+0x858>)
 800d168:	3d01      	subs	r5, #1
 800d16a:	429d      	cmp	r5, r3
 800d16c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d170:	da50      	bge.n	800d214 <_strtod_l+0x76c>
 800d172:	1b5b      	subs	r3, r3, r5
 800d174:	2b1f      	cmp	r3, #31
 800d176:	eba2 0203 	sub.w	r2, r2, r3
 800d17a:	f04f 0101 	mov.w	r1, #1
 800d17e:	dc3d      	bgt.n	800d1fc <_strtod_l+0x754>
 800d180:	fa01 f303 	lsl.w	r3, r1, r3
 800d184:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d186:	2300      	movs	r3, #0
 800d188:	9310      	str	r3, [sp, #64]	@ 0x40
 800d18a:	18bd      	adds	r5, r7, r2
 800d18c:	9b08      	ldr	r3, [sp, #32]
 800d18e:	42af      	cmp	r7, r5
 800d190:	4416      	add	r6, r2
 800d192:	441e      	add	r6, r3
 800d194:	463b      	mov	r3, r7
 800d196:	bfa8      	it	ge
 800d198:	462b      	movge	r3, r5
 800d19a:	42b3      	cmp	r3, r6
 800d19c:	bfa8      	it	ge
 800d19e:	4633      	movge	r3, r6
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	bfc2      	ittt	gt
 800d1a4:	1aed      	subgt	r5, r5, r3
 800d1a6:	1af6      	subgt	r6, r6, r3
 800d1a8:	1aff      	subgt	r7, r7, r3
 800d1aa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	dd16      	ble.n	800d1de <_strtod_l+0x736>
 800d1b0:	4641      	mov	r1, r8
 800d1b2:	9805      	ldr	r0, [sp, #20]
 800d1b4:	461a      	mov	r2, r3
 800d1b6:	f002 ff65 	bl	8010084 <__pow5mult>
 800d1ba:	4680      	mov	r8, r0
 800d1bc:	2800      	cmp	r0, #0
 800d1be:	d0ba      	beq.n	800d136 <_strtod_l+0x68e>
 800d1c0:	4601      	mov	r1, r0
 800d1c2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d1c4:	9805      	ldr	r0, [sp, #20]
 800d1c6:	f002 feb3 	bl	800ff30 <__multiply>
 800d1ca:	900e      	str	r0, [sp, #56]	@ 0x38
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	f43f ae8a 	beq.w	800cee6 <_strtod_l+0x43e>
 800d1d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d1d4:	9805      	ldr	r0, [sp, #20]
 800d1d6:	f002 fd97 	bl	800fd08 <_Bfree>
 800d1da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1dc:	931a      	str	r3, [sp, #104]	@ 0x68
 800d1de:	2d00      	cmp	r5, #0
 800d1e0:	dc1d      	bgt.n	800d21e <_strtod_l+0x776>
 800d1e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	dd23      	ble.n	800d230 <_strtod_l+0x788>
 800d1e8:	4649      	mov	r1, r9
 800d1ea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d1ec:	9805      	ldr	r0, [sp, #20]
 800d1ee:	f002 ff49 	bl	8010084 <__pow5mult>
 800d1f2:	4681      	mov	r9, r0
 800d1f4:	b9e0      	cbnz	r0, 800d230 <_strtod_l+0x788>
 800d1f6:	f04f 0900 	mov.w	r9, #0
 800d1fa:	e674      	b.n	800cee6 <_strtod_l+0x43e>
 800d1fc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d200:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d204:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d208:	35e2      	adds	r5, #226	@ 0xe2
 800d20a:	fa01 f305 	lsl.w	r3, r1, r5
 800d20e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d210:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d212:	e7ba      	b.n	800d18a <_strtod_l+0x6e2>
 800d214:	2300      	movs	r3, #0
 800d216:	9310      	str	r3, [sp, #64]	@ 0x40
 800d218:	2301      	movs	r3, #1
 800d21a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d21c:	e7b5      	b.n	800d18a <_strtod_l+0x6e2>
 800d21e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d220:	9805      	ldr	r0, [sp, #20]
 800d222:	462a      	mov	r2, r5
 800d224:	f002 ff88 	bl	8010138 <__lshift>
 800d228:	901a      	str	r0, [sp, #104]	@ 0x68
 800d22a:	2800      	cmp	r0, #0
 800d22c:	d1d9      	bne.n	800d1e2 <_strtod_l+0x73a>
 800d22e:	e65a      	b.n	800cee6 <_strtod_l+0x43e>
 800d230:	2e00      	cmp	r6, #0
 800d232:	dd07      	ble.n	800d244 <_strtod_l+0x79c>
 800d234:	4649      	mov	r1, r9
 800d236:	9805      	ldr	r0, [sp, #20]
 800d238:	4632      	mov	r2, r6
 800d23a:	f002 ff7d 	bl	8010138 <__lshift>
 800d23e:	4681      	mov	r9, r0
 800d240:	2800      	cmp	r0, #0
 800d242:	d0d8      	beq.n	800d1f6 <_strtod_l+0x74e>
 800d244:	2f00      	cmp	r7, #0
 800d246:	dd08      	ble.n	800d25a <_strtod_l+0x7b2>
 800d248:	4641      	mov	r1, r8
 800d24a:	9805      	ldr	r0, [sp, #20]
 800d24c:	463a      	mov	r2, r7
 800d24e:	f002 ff73 	bl	8010138 <__lshift>
 800d252:	4680      	mov	r8, r0
 800d254:	2800      	cmp	r0, #0
 800d256:	f43f ae46 	beq.w	800cee6 <_strtod_l+0x43e>
 800d25a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d25c:	9805      	ldr	r0, [sp, #20]
 800d25e:	464a      	mov	r2, r9
 800d260:	f002 fff2 	bl	8010248 <__mdiff>
 800d264:	4604      	mov	r4, r0
 800d266:	2800      	cmp	r0, #0
 800d268:	f43f ae3d 	beq.w	800cee6 <_strtod_l+0x43e>
 800d26c:	68c3      	ldr	r3, [r0, #12]
 800d26e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d270:	2300      	movs	r3, #0
 800d272:	60c3      	str	r3, [r0, #12]
 800d274:	4641      	mov	r1, r8
 800d276:	f002 ffcb 	bl	8010210 <__mcmp>
 800d27a:	2800      	cmp	r0, #0
 800d27c:	da46      	bge.n	800d30c <_strtod_l+0x864>
 800d27e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d280:	ea53 030a 	orrs.w	r3, r3, sl
 800d284:	d16c      	bne.n	800d360 <_strtod_l+0x8b8>
 800d286:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d168      	bne.n	800d360 <_strtod_l+0x8b8>
 800d28e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d292:	0d1b      	lsrs	r3, r3, #20
 800d294:	051b      	lsls	r3, r3, #20
 800d296:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d29a:	d961      	bls.n	800d360 <_strtod_l+0x8b8>
 800d29c:	6963      	ldr	r3, [r4, #20]
 800d29e:	b913      	cbnz	r3, 800d2a6 <_strtod_l+0x7fe>
 800d2a0:	6923      	ldr	r3, [r4, #16]
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	dd5c      	ble.n	800d360 <_strtod_l+0x8b8>
 800d2a6:	4621      	mov	r1, r4
 800d2a8:	2201      	movs	r2, #1
 800d2aa:	9805      	ldr	r0, [sp, #20]
 800d2ac:	f002 ff44 	bl	8010138 <__lshift>
 800d2b0:	4641      	mov	r1, r8
 800d2b2:	4604      	mov	r4, r0
 800d2b4:	f002 ffac 	bl	8010210 <__mcmp>
 800d2b8:	2800      	cmp	r0, #0
 800d2ba:	dd51      	ble.n	800d360 <_strtod_l+0x8b8>
 800d2bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d2c0:	9a08      	ldr	r2, [sp, #32]
 800d2c2:	0d1b      	lsrs	r3, r3, #20
 800d2c4:	051b      	lsls	r3, r3, #20
 800d2c6:	2a00      	cmp	r2, #0
 800d2c8:	d06b      	beq.n	800d3a2 <_strtod_l+0x8fa>
 800d2ca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d2ce:	d868      	bhi.n	800d3a2 <_strtod_l+0x8fa>
 800d2d0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d2d4:	f67f ae9d 	bls.w	800d012 <_strtod_l+0x56a>
 800d2d8:	4b0a      	ldr	r3, [pc, #40]	@ (800d304 <_strtod_l+0x85c>)
 800d2da:	4650      	mov	r0, sl
 800d2dc:	4659      	mov	r1, fp
 800d2de:	2200      	movs	r2, #0
 800d2e0:	f7f3 f9b2 	bl	8000648 <__aeabi_dmul>
 800d2e4:	4b08      	ldr	r3, [pc, #32]	@ (800d308 <_strtod_l+0x860>)
 800d2e6:	400b      	ands	r3, r1
 800d2e8:	4682      	mov	sl, r0
 800d2ea:	468b      	mov	fp, r1
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	f47f ae05 	bne.w	800cefc <_strtod_l+0x454>
 800d2f2:	9a05      	ldr	r2, [sp, #20]
 800d2f4:	2322      	movs	r3, #34	@ 0x22
 800d2f6:	6013      	str	r3, [r2, #0]
 800d2f8:	e600      	b.n	800cefc <_strtod_l+0x454>
 800d2fa:	bf00      	nop
 800d2fc:	08011590 	.word	0x08011590
 800d300:	fffffc02 	.word	0xfffffc02
 800d304:	39500000 	.word	0x39500000
 800d308:	7ff00000 	.word	0x7ff00000
 800d30c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d310:	d165      	bne.n	800d3de <_strtod_l+0x936>
 800d312:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d314:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d318:	b35a      	cbz	r2, 800d372 <_strtod_l+0x8ca>
 800d31a:	4a9f      	ldr	r2, [pc, #636]	@ (800d598 <_strtod_l+0xaf0>)
 800d31c:	4293      	cmp	r3, r2
 800d31e:	d12b      	bne.n	800d378 <_strtod_l+0x8d0>
 800d320:	9b08      	ldr	r3, [sp, #32]
 800d322:	4651      	mov	r1, sl
 800d324:	b303      	cbz	r3, 800d368 <_strtod_l+0x8c0>
 800d326:	4b9d      	ldr	r3, [pc, #628]	@ (800d59c <_strtod_l+0xaf4>)
 800d328:	465a      	mov	r2, fp
 800d32a:	4013      	ands	r3, r2
 800d32c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d330:	f04f 32ff 	mov.w	r2, #4294967295
 800d334:	d81b      	bhi.n	800d36e <_strtod_l+0x8c6>
 800d336:	0d1b      	lsrs	r3, r3, #20
 800d338:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d33c:	fa02 f303 	lsl.w	r3, r2, r3
 800d340:	4299      	cmp	r1, r3
 800d342:	d119      	bne.n	800d378 <_strtod_l+0x8d0>
 800d344:	4b96      	ldr	r3, [pc, #600]	@ (800d5a0 <_strtod_l+0xaf8>)
 800d346:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d348:	429a      	cmp	r2, r3
 800d34a:	d102      	bne.n	800d352 <_strtod_l+0x8aa>
 800d34c:	3101      	adds	r1, #1
 800d34e:	f43f adca 	beq.w	800cee6 <_strtod_l+0x43e>
 800d352:	4b92      	ldr	r3, [pc, #584]	@ (800d59c <_strtod_l+0xaf4>)
 800d354:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d356:	401a      	ands	r2, r3
 800d358:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d35c:	f04f 0a00 	mov.w	sl, #0
 800d360:	9b08      	ldr	r3, [sp, #32]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d1b8      	bne.n	800d2d8 <_strtod_l+0x830>
 800d366:	e5c9      	b.n	800cefc <_strtod_l+0x454>
 800d368:	f04f 33ff 	mov.w	r3, #4294967295
 800d36c:	e7e8      	b.n	800d340 <_strtod_l+0x898>
 800d36e:	4613      	mov	r3, r2
 800d370:	e7e6      	b.n	800d340 <_strtod_l+0x898>
 800d372:	ea53 030a 	orrs.w	r3, r3, sl
 800d376:	d0a1      	beq.n	800d2bc <_strtod_l+0x814>
 800d378:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d37a:	b1db      	cbz	r3, 800d3b4 <_strtod_l+0x90c>
 800d37c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d37e:	4213      	tst	r3, r2
 800d380:	d0ee      	beq.n	800d360 <_strtod_l+0x8b8>
 800d382:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d384:	9a08      	ldr	r2, [sp, #32]
 800d386:	4650      	mov	r0, sl
 800d388:	4659      	mov	r1, fp
 800d38a:	b1bb      	cbz	r3, 800d3bc <_strtod_l+0x914>
 800d38c:	f7ff fb6b 	bl	800ca66 <sulp>
 800d390:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d394:	ec53 2b10 	vmov	r2, r3, d0
 800d398:	f7f2 ffa0 	bl	80002dc <__adddf3>
 800d39c:	4682      	mov	sl, r0
 800d39e:	468b      	mov	fp, r1
 800d3a0:	e7de      	b.n	800d360 <_strtod_l+0x8b8>
 800d3a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d3a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d3aa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d3ae:	f04f 3aff 	mov.w	sl, #4294967295
 800d3b2:	e7d5      	b.n	800d360 <_strtod_l+0x8b8>
 800d3b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d3b6:	ea13 0f0a 	tst.w	r3, sl
 800d3ba:	e7e1      	b.n	800d380 <_strtod_l+0x8d8>
 800d3bc:	f7ff fb53 	bl	800ca66 <sulp>
 800d3c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d3c4:	ec53 2b10 	vmov	r2, r3, d0
 800d3c8:	f7f2 ff86 	bl	80002d8 <__aeabi_dsub>
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	4682      	mov	sl, r0
 800d3d2:	468b      	mov	fp, r1
 800d3d4:	f7f3 fba0 	bl	8000b18 <__aeabi_dcmpeq>
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	d0c1      	beq.n	800d360 <_strtod_l+0x8b8>
 800d3dc:	e619      	b.n	800d012 <_strtod_l+0x56a>
 800d3de:	4641      	mov	r1, r8
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	f003 f88d 	bl	8010500 <__ratio>
 800d3e6:	ec57 6b10 	vmov	r6, r7, d0
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d3f0:	4630      	mov	r0, r6
 800d3f2:	4639      	mov	r1, r7
 800d3f4:	f7f3 fba4 	bl	8000b40 <__aeabi_dcmple>
 800d3f8:	2800      	cmp	r0, #0
 800d3fa:	d06f      	beq.n	800d4dc <_strtod_l+0xa34>
 800d3fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d17a      	bne.n	800d4f8 <_strtod_l+0xa50>
 800d402:	f1ba 0f00 	cmp.w	sl, #0
 800d406:	d158      	bne.n	800d4ba <_strtod_l+0xa12>
 800d408:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d40a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d15a      	bne.n	800d4c8 <_strtod_l+0xa20>
 800d412:	4b64      	ldr	r3, [pc, #400]	@ (800d5a4 <_strtod_l+0xafc>)
 800d414:	2200      	movs	r2, #0
 800d416:	4630      	mov	r0, r6
 800d418:	4639      	mov	r1, r7
 800d41a:	f7f3 fb87 	bl	8000b2c <__aeabi_dcmplt>
 800d41e:	2800      	cmp	r0, #0
 800d420:	d159      	bne.n	800d4d6 <_strtod_l+0xa2e>
 800d422:	4630      	mov	r0, r6
 800d424:	4639      	mov	r1, r7
 800d426:	4b60      	ldr	r3, [pc, #384]	@ (800d5a8 <_strtod_l+0xb00>)
 800d428:	2200      	movs	r2, #0
 800d42a:	f7f3 f90d 	bl	8000648 <__aeabi_dmul>
 800d42e:	4606      	mov	r6, r0
 800d430:	460f      	mov	r7, r1
 800d432:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d436:	9606      	str	r6, [sp, #24]
 800d438:	9307      	str	r3, [sp, #28]
 800d43a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d43e:	4d57      	ldr	r5, [pc, #348]	@ (800d59c <_strtod_l+0xaf4>)
 800d440:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d444:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d446:	401d      	ands	r5, r3
 800d448:	4b58      	ldr	r3, [pc, #352]	@ (800d5ac <_strtod_l+0xb04>)
 800d44a:	429d      	cmp	r5, r3
 800d44c:	f040 80b2 	bne.w	800d5b4 <_strtod_l+0xb0c>
 800d450:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d452:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d456:	ec4b ab10 	vmov	d0, sl, fp
 800d45a:	f002 ff89 	bl	8010370 <__ulp>
 800d45e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d462:	ec51 0b10 	vmov	r0, r1, d0
 800d466:	f7f3 f8ef 	bl	8000648 <__aeabi_dmul>
 800d46a:	4652      	mov	r2, sl
 800d46c:	465b      	mov	r3, fp
 800d46e:	f7f2 ff35 	bl	80002dc <__adddf3>
 800d472:	460b      	mov	r3, r1
 800d474:	4949      	ldr	r1, [pc, #292]	@ (800d59c <_strtod_l+0xaf4>)
 800d476:	4a4e      	ldr	r2, [pc, #312]	@ (800d5b0 <_strtod_l+0xb08>)
 800d478:	4019      	ands	r1, r3
 800d47a:	4291      	cmp	r1, r2
 800d47c:	4682      	mov	sl, r0
 800d47e:	d942      	bls.n	800d506 <_strtod_l+0xa5e>
 800d480:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d482:	4b47      	ldr	r3, [pc, #284]	@ (800d5a0 <_strtod_l+0xaf8>)
 800d484:	429a      	cmp	r2, r3
 800d486:	d103      	bne.n	800d490 <_strtod_l+0x9e8>
 800d488:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d48a:	3301      	adds	r3, #1
 800d48c:	f43f ad2b 	beq.w	800cee6 <_strtod_l+0x43e>
 800d490:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d5a0 <_strtod_l+0xaf8>
 800d494:	f04f 3aff 	mov.w	sl, #4294967295
 800d498:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d49a:	9805      	ldr	r0, [sp, #20]
 800d49c:	f002 fc34 	bl	800fd08 <_Bfree>
 800d4a0:	9805      	ldr	r0, [sp, #20]
 800d4a2:	4649      	mov	r1, r9
 800d4a4:	f002 fc30 	bl	800fd08 <_Bfree>
 800d4a8:	9805      	ldr	r0, [sp, #20]
 800d4aa:	4641      	mov	r1, r8
 800d4ac:	f002 fc2c 	bl	800fd08 <_Bfree>
 800d4b0:	9805      	ldr	r0, [sp, #20]
 800d4b2:	4621      	mov	r1, r4
 800d4b4:	f002 fc28 	bl	800fd08 <_Bfree>
 800d4b8:	e618      	b.n	800d0ec <_strtod_l+0x644>
 800d4ba:	f1ba 0f01 	cmp.w	sl, #1
 800d4be:	d103      	bne.n	800d4c8 <_strtod_l+0xa20>
 800d4c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	f43f ada5 	beq.w	800d012 <_strtod_l+0x56a>
 800d4c8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d578 <_strtod_l+0xad0>
 800d4cc:	4f35      	ldr	r7, [pc, #212]	@ (800d5a4 <_strtod_l+0xafc>)
 800d4ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d4d2:	2600      	movs	r6, #0
 800d4d4:	e7b1      	b.n	800d43a <_strtod_l+0x992>
 800d4d6:	4f34      	ldr	r7, [pc, #208]	@ (800d5a8 <_strtod_l+0xb00>)
 800d4d8:	2600      	movs	r6, #0
 800d4da:	e7aa      	b.n	800d432 <_strtod_l+0x98a>
 800d4dc:	4b32      	ldr	r3, [pc, #200]	@ (800d5a8 <_strtod_l+0xb00>)
 800d4de:	4630      	mov	r0, r6
 800d4e0:	4639      	mov	r1, r7
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	f7f3 f8b0 	bl	8000648 <__aeabi_dmul>
 800d4e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4ea:	4606      	mov	r6, r0
 800d4ec:	460f      	mov	r7, r1
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d09f      	beq.n	800d432 <_strtod_l+0x98a>
 800d4f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d4f6:	e7a0      	b.n	800d43a <_strtod_l+0x992>
 800d4f8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d580 <_strtod_l+0xad8>
 800d4fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d500:	ec57 6b17 	vmov	r6, r7, d7
 800d504:	e799      	b.n	800d43a <_strtod_l+0x992>
 800d506:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d50a:	9b08      	ldr	r3, [sp, #32]
 800d50c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d510:	2b00      	cmp	r3, #0
 800d512:	d1c1      	bne.n	800d498 <_strtod_l+0x9f0>
 800d514:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d518:	0d1b      	lsrs	r3, r3, #20
 800d51a:	051b      	lsls	r3, r3, #20
 800d51c:	429d      	cmp	r5, r3
 800d51e:	d1bb      	bne.n	800d498 <_strtod_l+0x9f0>
 800d520:	4630      	mov	r0, r6
 800d522:	4639      	mov	r1, r7
 800d524:	f7f3 fbf0 	bl	8000d08 <__aeabi_d2lz>
 800d528:	f7f3 f860 	bl	80005ec <__aeabi_l2d>
 800d52c:	4602      	mov	r2, r0
 800d52e:	460b      	mov	r3, r1
 800d530:	4630      	mov	r0, r6
 800d532:	4639      	mov	r1, r7
 800d534:	f7f2 fed0 	bl	80002d8 <__aeabi_dsub>
 800d538:	460b      	mov	r3, r1
 800d53a:	4602      	mov	r2, r0
 800d53c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d540:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d546:	ea46 060a 	orr.w	r6, r6, sl
 800d54a:	431e      	orrs	r6, r3
 800d54c:	d06f      	beq.n	800d62e <_strtod_l+0xb86>
 800d54e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d588 <_strtod_l+0xae0>)
 800d550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d554:	f7f3 faea 	bl	8000b2c <__aeabi_dcmplt>
 800d558:	2800      	cmp	r0, #0
 800d55a:	f47f accf 	bne.w	800cefc <_strtod_l+0x454>
 800d55e:	a30c      	add	r3, pc, #48	@ (adr r3, 800d590 <_strtod_l+0xae8>)
 800d560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d564:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d568:	f7f3 fafe 	bl	8000b68 <__aeabi_dcmpgt>
 800d56c:	2800      	cmp	r0, #0
 800d56e:	d093      	beq.n	800d498 <_strtod_l+0x9f0>
 800d570:	e4c4      	b.n	800cefc <_strtod_l+0x454>
 800d572:	bf00      	nop
 800d574:	f3af 8000 	nop.w
 800d578:	00000000 	.word	0x00000000
 800d57c:	bff00000 	.word	0xbff00000
 800d580:	00000000 	.word	0x00000000
 800d584:	3ff00000 	.word	0x3ff00000
 800d588:	94a03595 	.word	0x94a03595
 800d58c:	3fdfffff 	.word	0x3fdfffff
 800d590:	35afe535 	.word	0x35afe535
 800d594:	3fe00000 	.word	0x3fe00000
 800d598:	000fffff 	.word	0x000fffff
 800d59c:	7ff00000 	.word	0x7ff00000
 800d5a0:	7fefffff 	.word	0x7fefffff
 800d5a4:	3ff00000 	.word	0x3ff00000
 800d5a8:	3fe00000 	.word	0x3fe00000
 800d5ac:	7fe00000 	.word	0x7fe00000
 800d5b0:	7c9fffff 	.word	0x7c9fffff
 800d5b4:	9b08      	ldr	r3, [sp, #32]
 800d5b6:	b323      	cbz	r3, 800d602 <_strtod_l+0xb5a>
 800d5b8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d5bc:	d821      	bhi.n	800d602 <_strtod_l+0xb5a>
 800d5be:	a328      	add	r3, pc, #160	@ (adr r3, 800d660 <_strtod_l+0xbb8>)
 800d5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c4:	4630      	mov	r0, r6
 800d5c6:	4639      	mov	r1, r7
 800d5c8:	f7f3 faba 	bl	8000b40 <__aeabi_dcmple>
 800d5cc:	b1a0      	cbz	r0, 800d5f8 <_strtod_l+0xb50>
 800d5ce:	4639      	mov	r1, r7
 800d5d0:	4630      	mov	r0, r6
 800d5d2:	f7f3 fb11 	bl	8000bf8 <__aeabi_d2uiz>
 800d5d6:	2801      	cmp	r0, #1
 800d5d8:	bf38      	it	cc
 800d5da:	2001      	movcc	r0, #1
 800d5dc:	f7f2 ffba 	bl	8000554 <__aeabi_ui2d>
 800d5e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5e2:	4606      	mov	r6, r0
 800d5e4:	460f      	mov	r7, r1
 800d5e6:	b9fb      	cbnz	r3, 800d628 <_strtod_l+0xb80>
 800d5e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d5ec:	9014      	str	r0, [sp, #80]	@ 0x50
 800d5ee:	9315      	str	r3, [sp, #84]	@ 0x54
 800d5f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d5f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d5f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d5fa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d5fe:	1b5b      	subs	r3, r3, r5
 800d600:	9311      	str	r3, [sp, #68]	@ 0x44
 800d602:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d606:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d60a:	f002 feb1 	bl	8010370 <__ulp>
 800d60e:	4650      	mov	r0, sl
 800d610:	ec53 2b10 	vmov	r2, r3, d0
 800d614:	4659      	mov	r1, fp
 800d616:	f7f3 f817 	bl	8000648 <__aeabi_dmul>
 800d61a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d61e:	f7f2 fe5d 	bl	80002dc <__adddf3>
 800d622:	4682      	mov	sl, r0
 800d624:	468b      	mov	fp, r1
 800d626:	e770      	b.n	800d50a <_strtod_l+0xa62>
 800d628:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d62c:	e7e0      	b.n	800d5f0 <_strtod_l+0xb48>
 800d62e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d668 <_strtod_l+0xbc0>)
 800d630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d634:	f7f3 fa7a 	bl	8000b2c <__aeabi_dcmplt>
 800d638:	e798      	b.n	800d56c <_strtod_l+0xac4>
 800d63a:	2300      	movs	r3, #0
 800d63c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d63e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d640:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d642:	6013      	str	r3, [r2, #0]
 800d644:	f7ff ba6d 	b.w	800cb22 <_strtod_l+0x7a>
 800d648:	2a65      	cmp	r2, #101	@ 0x65
 800d64a:	f43f ab66 	beq.w	800cd1a <_strtod_l+0x272>
 800d64e:	2a45      	cmp	r2, #69	@ 0x45
 800d650:	f43f ab63 	beq.w	800cd1a <_strtod_l+0x272>
 800d654:	2301      	movs	r3, #1
 800d656:	f7ff bb9e 	b.w	800cd96 <_strtod_l+0x2ee>
 800d65a:	bf00      	nop
 800d65c:	f3af 8000 	nop.w
 800d660:	ffc00000 	.word	0xffc00000
 800d664:	41dfffff 	.word	0x41dfffff
 800d668:	94a03595 	.word	0x94a03595
 800d66c:	3fcfffff 	.word	0x3fcfffff

0800d670 <_strtod_r>:
 800d670:	4b01      	ldr	r3, [pc, #4]	@ (800d678 <_strtod_r+0x8>)
 800d672:	f7ff ba19 	b.w	800caa8 <_strtod_l>
 800d676:	bf00      	nop
 800d678:	2000009c 	.word	0x2000009c

0800d67c <strtod>:
 800d67c:	460a      	mov	r2, r1
 800d67e:	4601      	mov	r1, r0
 800d680:	4802      	ldr	r0, [pc, #8]	@ (800d68c <strtod+0x10>)
 800d682:	4b03      	ldr	r3, [pc, #12]	@ (800d690 <strtod+0x14>)
 800d684:	6800      	ldr	r0, [r0, #0]
 800d686:	f7ff ba0f 	b.w	800caa8 <_strtod_l>
 800d68a:	bf00      	nop
 800d68c:	20000208 	.word	0x20000208
 800d690:	2000009c 	.word	0x2000009c

0800d694 <__cvt>:
 800d694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d698:	ec57 6b10 	vmov	r6, r7, d0
 800d69c:	2f00      	cmp	r7, #0
 800d69e:	460c      	mov	r4, r1
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	463b      	mov	r3, r7
 800d6a4:	bfbb      	ittet	lt
 800d6a6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d6aa:	461f      	movlt	r7, r3
 800d6ac:	2300      	movge	r3, #0
 800d6ae:	232d      	movlt	r3, #45	@ 0x2d
 800d6b0:	700b      	strb	r3, [r1, #0]
 800d6b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d6b4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d6b8:	4691      	mov	r9, r2
 800d6ba:	f023 0820 	bic.w	r8, r3, #32
 800d6be:	bfbc      	itt	lt
 800d6c0:	4632      	movlt	r2, r6
 800d6c2:	4616      	movlt	r6, r2
 800d6c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d6c8:	d005      	beq.n	800d6d6 <__cvt+0x42>
 800d6ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d6ce:	d100      	bne.n	800d6d2 <__cvt+0x3e>
 800d6d0:	3401      	adds	r4, #1
 800d6d2:	2102      	movs	r1, #2
 800d6d4:	e000      	b.n	800d6d8 <__cvt+0x44>
 800d6d6:	2103      	movs	r1, #3
 800d6d8:	ab03      	add	r3, sp, #12
 800d6da:	9301      	str	r3, [sp, #4]
 800d6dc:	ab02      	add	r3, sp, #8
 800d6de:	9300      	str	r3, [sp, #0]
 800d6e0:	ec47 6b10 	vmov	d0, r6, r7
 800d6e4:	4653      	mov	r3, sl
 800d6e6:	4622      	mov	r2, r4
 800d6e8:	f001 f8be 	bl	800e868 <_dtoa_r>
 800d6ec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d6f0:	4605      	mov	r5, r0
 800d6f2:	d119      	bne.n	800d728 <__cvt+0x94>
 800d6f4:	f019 0f01 	tst.w	r9, #1
 800d6f8:	d00e      	beq.n	800d718 <__cvt+0x84>
 800d6fa:	eb00 0904 	add.w	r9, r0, r4
 800d6fe:	2200      	movs	r2, #0
 800d700:	2300      	movs	r3, #0
 800d702:	4630      	mov	r0, r6
 800d704:	4639      	mov	r1, r7
 800d706:	f7f3 fa07 	bl	8000b18 <__aeabi_dcmpeq>
 800d70a:	b108      	cbz	r0, 800d710 <__cvt+0x7c>
 800d70c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d710:	2230      	movs	r2, #48	@ 0x30
 800d712:	9b03      	ldr	r3, [sp, #12]
 800d714:	454b      	cmp	r3, r9
 800d716:	d31e      	bcc.n	800d756 <__cvt+0xc2>
 800d718:	9b03      	ldr	r3, [sp, #12]
 800d71a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d71c:	1b5b      	subs	r3, r3, r5
 800d71e:	4628      	mov	r0, r5
 800d720:	6013      	str	r3, [r2, #0]
 800d722:	b004      	add	sp, #16
 800d724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d728:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d72c:	eb00 0904 	add.w	r9, r0, r4
 800d730:	d1e5      	bne.n	800d6fe <__cvt+0x6a>
 800d732:	7803      	ldrb	r3, [r0, #0]
 800d734:	2b30      	cmp	r3, #48	@ 0x30
 800d736:	d10a      	bne.n	800d74e <__cvt+0xba>
 800d738:	2200      	movs	r2, #0
 800d73a:	2300      	movs	r3, #0
 800d73c:	4630      	mov	r0, r6
 800d73e:	4639      	mov	r1, r7
 800d740:	f7f3 f9ea 	bl	8000b18 <__aeabi_dcmpeq>
 800d744:	b918      	cbnz	r0, 800d74e <__cvt+0xba>
 800d746:	f1c4 0401 	rsb	r4, r4, #1
 800d74a:	f8ca 4000 	str.w	r4, [sl]
 800d74e:	f8da 3000 	ldr.w	r3, [sl]
 800d752:	4499      	add	r9, r3
 800d754:	e7d3      	b.n	800d6fe <__cvt+0x6a>
 800d756:	1c59      	adds	r1, r3, #1
 800d758:	9103      	str	r1, [sp, #12]
 800d75a:	701a      	strb	r2, [r3, #0]
 800d75c:	e7d9      	b.n	800d712 <__cvt+0x7e>

0800d75e <__exponent>:
 800d75e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d760:	2900      	cmp	r1, #0
 800d762:	bfba      	itte	lt
 800d764:	4249      	neglt	r1, r1
 800d766:	232d      	movlt	r3, #45	@ 0x2d
 800d768:	232b      	movge	r3, #43	@ 0x2b
 800d76a:	2909      	cmp	r1, #9
 800d76c:	7002      	strb	r2, [r0, #0]
 800d76e:	7043      	strb	r3, [r0, #1]
 800d770:	dd29      	ble.n	800d7c6 <__exponent+0x68>
 800d772:	f10d 0307 	add.w	r3, sp, #7
 800d776:	461d      	mov	r5, r3
 800d778:	270a      	movs	r7, #10
 800d77a:	461a      	mov	r2, r3
 800d77c:	fbb1 f6f7 	udiv	r6, r1, r7
 800d780:	fb07 1416 	mls	r4, r7, r6, r1
 800d784:	3430      	adds	r4, #48	@ 0x30
 800d786:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d78a:	460c      	mov	r4, r1
 800d78c:	2c63      	cmp	r4, #99	@ 0x63
 800d78e:	f103 33ff 	add.w	r3, r3, #4294967295
 800d792:	4631      	mov	r1, r6
 800d794:	dcf1      	bgt.n	800d77a <__exponent+0x1c>
 800d796:	3130      	adds	r1, #48	@ 0x30
 800d798:	1e94      	subs	r4, r2, #2
 800d79a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d79e:	1c41      	adds	r1, r0, #1
 800d7a0:	4623      	mov	r3, r4
 800d7a2:	42ab      	cmp	r3, r5
 800d7a4:	d30a      	bcc.n	800d7bc <__exponent+0x5e>
 800d7a6:	f10d 0309 	add.w	r3, sp, #9
 800d7aa:	1a9b      	subs	r3, r3, r2
 800d7ac:	42ac      	cmp	r4, r5
 800d7ae:	bf88      	it	hi
 800d7b0:	2300      	movhi	r3, #0
 800d7b2:	3302      	adds	r3, #2
 800d7b4:	4403      	add	r3, r0
 800d7b6:	1a18      	subs	r0, r3, r0
 800d7b8:	b003      	add	sp, #12
 800d7ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d7c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d7c4:	e7ed      	b.n	800d7a2 <__exponent+0x44>
 800d7c6:	2330      	movs	r3, #48	@ 0x30
 800d7c8:	3130      	adds	r1, #48	@ 0x30
 800d7ca:	7083      	strb	r3, [r0, #2]
 800d7cc:	70c1      	strb	r1, [r0, #3]
 800d7ce:	1d03      	adds	r3, r0, #4
 800d7d0:	e7f1      	b.n	800d7b6 <__exponent+0x58>
	...

0800d7d4 <_printf_float>:
 800d7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d8:	b08d      	sub	sp, #52	@ 0x34
 800d7da:	460c      	mov	r4, r1
 800d7dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d7e0:	4616      	mov	r6, r2
 800d7e2:	461f      	mov	r7, r3
 800d7e4:	4605      	mov	r5, r0
 800d7e6:	f000 ff21 	bl	800e62c <_localeconv_r>
 800d7ea:	6803      	ldr	r3, [r0, #0]
 800d7ec:	9304      	str	r3, [sp, #16]
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f7f2 fd66 	bl	80002c0 <strlen>
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d7f8:	f8d8 3000 	ldr.w	r3, [r8]
 800d7fc:	9005      	str	r0, [sp, #20]
 800d7fe:	3307      	adds	r3, #7
 800d800:	f023 0307 	bic.w	r3, r3, #7
 800d804:	f103 0208 	add.w	r2, r3, #8
 800d808:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d80c:	f8d4 b000 	ldr.w	fp, [r4]
 800d810:	f8c8 2000 	str.w	r2, [r8]
 800d814:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d818:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d81c:	9307      	str	r3, [sp, #28]
 800d81e:	f8cd 8018 	str.w	r8, [sp, #24]
 800d822:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d826:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d82a:	4b9c      	ldr	r3, [pc, #624]	@ (800da9c <_printf_float+0x2c8>)
 800d82c:	f04f 32ff 	mov.w	r2, #4294967295
 800d830:	f7f3 f9a4 	bl	8000b7c <__aeabi_dcmpun>
 800d834:	bb70      	cbnz	r0, 800d894 <_printf_float+0xc0>
 800d836:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d83a:	4b98      	ldr	r3, [pc, #608]	@ (800da9c <_printf_float+0x2c8>)
 800d83c:	f04f 32ff 	mov.w	r2, #4294967295
 800d840:	f7f3 f97e 	bl	8000b40 <__aeabi_dcmple>
 800d844:	bb30      	cbnz	r0, 800d894 <_printf_float+0xc0>
 800d846:	2200      	movs	r2, #0
 800d848:	2300      	movs	r3, #0
 800d84a:	4640      	mov	r0, r8
 800d84c:	4649      	mov	r1, r9
 800d84e:	f7f3 f96d 	bl	8000b2c <__aeabi_dcmplt>
 800d852:	b110      	cbz	r0, 800d85a <_printf_float+0x86>
 800d854:	232d      	movs	r3, #45	@ 0x2d
 800d856:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d85a:	4a91      	ldr	r2, [pc, #580]	@ (800daa0 <_printf_float+0x2cc>)
 800d85c:	4b91      	ldr	r3, [pc, #580]	@ (800daa4 <_printf_float+0x2d0>)
 800d85e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d862:	bf94      	ite	ls
 800d864:	4690      	movls	r8, r2
 800d866:	4698      	movhi	r8, r3
 800d868:	2303      	movs	r3, #3
 800d86a:	6123      	str	r3, [r4, #16]
 800d86c:	f02b 0304 	bic.w	r3, fp, #4
 800d870:	6023      	str	r3, [r4, #0]
 800d872:	f04f 0900 	mov.w	r9, #0
 800d876:	9700      	str	r7, [sp, #0]
 800d878:	4633      	mov	r3, r6
 800d87a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d87c:	4621      	mov	r1, r4
 800d87e:	4628      	mov	r0, r5
 800d880:	f000 f9d2 	bl	800dc28 <_printf_common>
 800d884:	3001      	adds	r0, #1
 800d886:	f040 808d 	bne.w	800d9a4 <_printf_float+0x1d0>
 800d88a:	f04f 30ff 	mov.w	r0, #4294967295
 800d88e:	b00d      	add	sp, #52	@ 0x34
 800d890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d894:	4642      	mov	r2, r8
 800d896:	464b      	mov	r3, r9
 800d898:	4640      	mov	r0, r8
 800d89a:	4649      	mov	r1, r9
 800d89c:	f7f3 f96e 	bl	8000b7c <__aeabi_dcmpun>
 800d8a0:	b140      	cbz	r0, 800d8b4 <_printf_float+0xe0>
 800d8a2:	464b      	mov	r3, r9
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	bfbc      	itt	lt
 800d8a8:	232d      	movlt	r3, #45	@ 0x2d
 800d8aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d8ae:	4a7e      	ldr	r2, [pc, #504]	@ (800daa8 <_printf_float+0x2d4>)
 800d8b0:	4b7e      	ldr	r3, [pc, #504]	@ (800daac <_printf_float+0x2d8>)
 800d8b2:	e7d4      	b.n	800d85e <_printf_float+0x8a>
 800d8b4:	6863      	ldr	r3, [r4, #4]
 800d8b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d8ba:	9206      	str	r2, [sp, #24]
 800d8bc:	1c5a      	adds	r2, r3, #1
 800d8be:	d13b      	bne.n	800d938 <_printf_float+0x164>
 800d8c0:	2306      	movs	r3, #6
 800d8c2:	6063      	str	r3, [r4, #4]
 800d8c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	6022      	str	r2, [r4, #0]
 800d8cc:	9303      	str	r3, [sp, #12]
 800d8ce:	ab0a      	add	r3, sp, #40	@ 0x28
 800d8d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d8d4:	ab09      	add	r3, sp, #36	@ 0x24
 800d8d6:	9300      	str	r3, [sp, #0]
 800d8d8:	6861      	ldr	r1, [r4, #4]
 800d8da:	ec49 8b10 	vmov	d0, r8, r9
 800d8de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d8e2:	4628      	mov	r0, r5
 800d8e4:	f7ff fed6 	bl	800d694 <__cvt>
 800d8e8:	9b06      	ldr	r3, [sp, #24]
 800d8ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d8ec:	2b47      	cmp	r3, #71	@ 0x47
 800d8ee:	4680      	mov	r8, r0
 800d8f0:	d129      	bne.n	800d946 <_printf_float+0x172>
 800d8f2:	1cc8      	adds	r0, r1, #3
 800d8f4:	db02      	blt.n	800d8fc <_printf_float+0x128>
 800d8f6:	6863      	ldr	r3, [r4, #4]
 800d8f8:	4299      	cmp	r1, r3
 800d8fa:	dd41      	ble.n	800d980 <_printf_float+0x1ac>
 800d8fc:	f1aa 0a02 	sub.w	sl, sl, #2
 800d900:	fa5f fa8a 	uxtb.w	sl, sl
 800d904:	3901      	subs	r1, #1
 800d906:	4652      	mov	r2, sl
 800d908:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d90c:	9109      	str	r1, [sp, #36]	@ 0x24
 800d90e:	f7ff ff26 	bl	800d75e <__exponent>
 800d912:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d914:	1813      	adds	r3, r2, r0
 800d916:	2a01      	cmp	r2, #1
 800d918:	4681      	mov	r9, r0
 800d91a:	6123      	str	r3, [r4, #16]
 800d91c:	dc02      	bgt.n	800d924 <_printf_float+0x150>
 800d91e:	6822      	ldr	r2, [r4, #0]
 800d920:	07d2      	lsls	r2, r2, #31
 800d922:	d501      	bpl.n	800d928 <_printf_float+0x154>
 800d924:	3301      	adds	r3, #1
 800d926:	6123      	str	r3, [r4, #16]
 800d928:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d0a2      	beq.n	800d876 <_printf_float+0xa2>
 800d930:	232d      	movs	r3, #45	@ 0x2d
 800d932:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d936:	e79e      	b.n	800d876 <_printf_float+0xa2>
 800d938:	9a06      	ldr	r2, [sp, #24]
 800d93a:	2a47      	cmp	r2, #71	@ 0x47
 800d93c:	d1c2      	bne.n	800d8c4 <_printf_float+0xf0>
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d1c0      	bne.n	800d8c4 <_printf_float+0xf0>
 800d942:	2301      	movs	r3, #1
 800d944:	e7bd      	b.n	800d8c2 <_printf_float+0xee>
 800d946:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d94a:	d9db      	bls.n	800d904 <_printf_float+0x130>
 800d94c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d950:	d118      	bne.n	800d984 <_printf_float+0x1b0>
 800d952:	2900      	cmp	r1, #0
 800d954:	6863      	ldr	r3, [r4, #4]
 800d956:	dd0b      	ble.n	800d970 <_printf_float+0x19c>
 800d958:	6121      	str	r1, [r4, #16]
 800d95a:	b913      	cbnz	r3, 800d962 <_printf_float+0x18e>
 800d95c:	6822      	ldr	r2, [r4, #0]
 800d95e:	07d0      	lsls	r0, r2, #31
 800d960:	d502      	bpl.n	800d968 <_printf_float+0x194>
 800d962:	3301      	adds	r3, #1
 800d964:	440b      	add	r3, r1
 800d966:	6123      	str	r3, [r4, #16]
 800d968:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d96a:	f04f 0900 	mov.w	r9, #0
 800d96e:	e7db      	b.n	800d928 <_printf_float+0x154>
 800d970:	b913      	cbnz	r3, 800d978 <_printf_float+0x1a4>
 800d972:	6822      	ldr	r2, [r4, #0]
 800d974:	07d2      	lsls	r2, r2, #31
 800d976:	d501      	bpl.n	800d97c <_printf_float+0x1a8>
 800d978:	3302      	adds	r3, #2
 800d97a:	e7f4      	b.n	800d966 <_printf_float+0x192>
 800d97c:	2301      	movs	r3, #1
 800d97e:	e7f2      	b.n	800d966 <_printf_float+0x192>
 800d980:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d986:	4299      	cmp	r1, r3
 800d988:	db05      	blt.n	800d996 <_printf_float+0x1c2>
 800d98a:	6823      	ldr	r3, [r4, #0]
 800d98c:	6121      	str	r1, [r4, #16]
 800d98e:	07d8      	lsls	r0, r3, #31
 800d990:	d5ea      	bpl.n	800d968 <_printf_float+0x194>
 800d992:	1c4b      	adds	r3, r1, #1
 800d994:	e7e7      	b.n	800d966 <_printf_float+0x192>
 800d996:	2900      	cmp	r1, #0
 800d998:	bfd4      	ite	le
 800d99a:	f1c1 0202 	rsble	r2, r1, #2
 800d99e:	2201      	movgt	r2, #1
 800d9a0:	4413      	add	r3, r2
 800d9a2:	e7e0      	b.n	800d966 <_printf_float+0x192>
 800d9a4:	6823      	ldr	r3, [r4, #0]
 800d9a6:	055a      	lsls	r2, r3, #21
 800d9a8:	d407      	bmi.n	800d9ba <_printf_float+0x1e6>
 800d9aa:	6923      	ldr	r3, [r4, #16]
 800d9ac:	4642      	mov	r2, r8
 800d9ae:	4631      	mov	r1, r6
 800d9b0:	4628      	mov	r0, r5
 800d9b2:	47b8      	blx	r7
 800d9b4:	3001      	adds	r0, #1
 800d9b6:	d12b      	bne.n	800da10 <_printf_float+0x23c>
 800d9b8:	e767      	b.n	800d88a <_printf_float+0xb6>
 800d9ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d9be:	f240 80dd 	bls.w	800db7c <_printf_float+0x3a8>
 800d9c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	f7f3 f8a5 	bl	8000b18 <__aeabi_dcmpeq>
 800d9ce:	2800      	cmp	r0, #0
 800d9d0:	d033      	beq.n	800da3a <_printf_float+0x266>
 800d9d2:	4a37      	ldr	r2, [pc, #220]	@ (800dab0 <_printf_float+0x2dc>)
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	4631      	mov	r1, r6
 800d9d8:	4628      	mov	r0, r5
 800d9da:	47b8      	blx	r7
 800d9dc:	3001      	adds	r0, #1
 800d9de:	f43f af54 	beq.w	800d88a <_printf_float+0xb6>
 800d9e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d9e6:	4543      	cmp	r3, r8
 800d9e8:	db02      	blt.n	800d9f0 <_printf_float+0x21c>
 800d9ea:	6823      	ldr	r3, [r4, #0]
 800d9ec:	07d8      	lsls	r0, r3, #31
 800d9ee:	d50f      	bpl.n	800da10 <_printf_float+0x23c>
 800d9f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9f4:	4631      	mov	r1, r6
 800d9f6:	4628      	mov	r0, r5
 800d9f8:	47b8      	blx	r7
 800d9fa:	3001      	adds	r0, #1
 800d9fc:	f43f af45 	beq.w	800d88a <_printf_float+0xb6>
 800da00:	f04f 0900 	mov.w	r9, #0
 800da04:	f108 38ff 	add.w	r8, r8, #4294967295
 800da08:	f104 0a1a 	add.w	sl, r4, #26
 800da0c:	45c8      	cmp	r8, r9
 800da0e:	dc09      	bgt.n	800da24 <_printf_float+0x250>
 800da10:	6823      	ldr	r3, [r4, #0]
 800da12:	079b      	lsls	r3, r3, #30
 800da14:	f100 8103 	bmi.w	800dc1e <_printf_float+0x44a>
 800da18:	68e0      	ldr	r0, [r4, #12]
 800da1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da1c:	4298      	cmp	r0, r3
 800da1e:	bfb8      	it	lt
 800da20:	4618      	movlt	r0, r3
 800da22:	e734      	b.n	800d88e <_printf_float+0xba>
 800da24:	2301      	movs	r3, #1
 800da26:	4652      	mov	r2, sl
 800da28:	4631      	mov	r1, r6
 800da2a:	4628      	mov	r0, r5
 800da2c:	47b8      	blx	r7
 800da2e:	3001      	adds	r0, #1
 800da30:	f43f af2b 	beq.w	800d88a <_printf_float+0xb6>
 800da34:	f109 0901 	add.w	r9, r9, #1
 800da38:	e7e8      	b.n	800da0c <_printf_float+0x238>
 800da3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	dc39      	bgt.n	800dab4 <_printf_float+0x2e0>
 800da40:	4a1b      	ldr	r2, [pc, #108]	@ (800dab0 <_printf_float+0x2dc>)
 800da42:	2301      	movs	r3, #1
 800da44:	4631      	mov	r1, r6
 800da46:	4628      	mov	r0, r5
 800da48:	47b8      	blx	r7
 800da4a:	3001      	adds	r0, #1
 800da4c:	f43f af1d 	beq.w	800d88a <_printf_float+0xb6>
 800da50:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800da54:	ea59 0303 	orrs.w	r3, r9, r3
 800da58:	d102      	bne.n	800da60 <_printf_float+0x28c>
 800da5a:	6823      	ldr	r3, [r4, #0]
 800da5c:	07d9      	lsls	r1, r3, #31
 800da5e:	d5d7      	bpl.n	800da10 <_printf_float+0x23c>
 800da60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da64:	4631      	mov	r1, r6
 800da66:	4628      	mov	r0, r5
 800da68:	47b8      	blx	r7
 800da6a:	3001      	adds	r0, #1
 800da6c:	f43f af0d 	beq.w	800d88a <_printf_float+0xb6>
 800da70:	f04f 0a00 	mov.w	sl, #0
 800da74:	f104 0b1a 	add.w	fp, r4, #26
 800da78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da7a:	425b      	negs	r3, r3
 800da7c:	4553      	cmp	r3, sl
 800da7e:	dc01      	bgt.n	800da84 <_printf_float+0x2b0>
 800da80:	464b      	mov	r3, r9
 800da82:	e793      	b.n	800d9ac <_printf_float+0x1d8>
 800da84:	2301      	movs	r3, #1
 800da86:	465a      	mov	r2, fp
 800da88:	4631      	mov	r1, r6
 800da8a:	4628      	mov	r0, r5
 800da8c:	47b8      	blx	r7
 800da8e:	3001      	adds	r0, #1
 800da90:	f43f aefb 	beq.w	800d88a <_printf_float+0xb6>
 800da94:	f10a 0a01 	add.w	sl, sl, #1
 800da98:	e7ee      	b.n	800da78 <_printf_float+0x2a4>
 800da9a:	bf00      	nop
 800da9c:	7fefffff 	.word	0x7fefffff
 800daa0:	080115b8 	.word	0x080115b8
 800daa4:	080115bc 	.word	0x080115bc
 800daa8:	080115c0 	.word	0x080115c0
 800daac:	080115c4 	.word	0x080115c4
 800dab0:	080115c8 	.word	0x080115c8
 800dab4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dab6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800daba:	4553      	cmp	r3, sl
 800dabc:	bfa8      	it	ge
 800dabe:	4653      	movge	r3, sl
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	4699      	mov	r9, r3
 800dac4:	dc36      	bgt.n	800db34 <_printf_float+0x360>
 800dac6:	f04f 0b00 	mov.w	fp, #0
 800daca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dace:	f104 021a 	add.w	r2, r4, #26
 800dad2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dad4:	9306      	str	r3, [sp, #24]
 800dad6:	eba3 0309 	sub.w	r3, r3, r9
 800dada:	455b      	cmp	r3, fp
 800dadc:	dc31      	bgt.n	800db42 <_printf_float+0x36e>
 800dade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dae0:	459a      	cmp	sl, r3
 800dae2:	dc3a      	bgt.n	800db5a <_printf_float+0x386>
 800dae4:	6823      	ldr	r3, [r4, #0]
 800dae6:	07da      	lsls	r2, r3, #31
 800dae8:	d437      	bmi.n	800db5a <_printf_float+0x386>
 800daea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800daec:	ebaa 0903 	sub.w	r9, sl, r3
 800daf0:	9b06      	ldr	r3, [sp, #24]
 800daf2:	ebaa 0303 	sub.w	r3, sl, r3
 800daf6:	4599      	cmp	r9, r3
 800daf8:	bfa8      	it	ge
 800dafa:	4699      	movge	r9, r3
 800dafc:	f1b9 0f00 	cmp.w	r9, #0
 800db00:	dc33      	bgt.n	800db6a <_printf_float+0x396>
 800db02:	f04f 0800 	mov.w	r8, #0
 800db06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800db0a:	f104 0b1a 	add.w	fp, r4, #26
 800db0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db10:	ebaa 0303 	sub.w	r3, sl, r3
 800db14:	eba3 0309 	sub.w	r3, r3, r9
 800db18:	4543      	cmp	r3, r8
 800db1a:	f77f af79 	ble.w	800da10 <_printf_float+0x23c>
 800db1e:	2301      	movs	r3, #1
 800db20:	465a      	mov	r2, fp
 800db22:	4631      	mov	r1, r6
 800db24:	4628      	mov	r0, r5
 800db26:	47b8      	blx	r7
 800db28:	3001      	adds	r0, #1
 800db2a:	f43f aeae 	beq.w	800d88a <_printf_float+0xb6>
 800db2e:	f108 0801 	add.w	r8, r8, #1
 800db32:	e7ec      	b.n	800db0e <_printf_float+0x33a>
 800db34:	4642      	mov	r2, r8
 800db36:	4631      	mov	r1, r6
 800db38:	4628      	mov	r0, r5
 800db3a:	47b8      	blx	r7
 800db3c:	3001      	adds	r0, #1
 800db3e:	d1c2      	bne.n	800dac6 <_printf_float+0x2f2>
 800db40:	e6a3      	b.n	800d88a <_printf_float+0xb6>
 800db42:	2301      	movs	r3, #1
 800db44:	4631      	mov	r1, r6
 800db46:	4628      	mov	r0, r5
 800db48:	9206      	str	r2, [sp, #24]
 800db4a:	47b8      	blx	r7
 800db4c:	3001      	adds	r0, #1
 800db4e:	f43f ae9c 	beq.w	800d88a <_printf_float+0xb6>
 800db52:	9a06      	ldr	r2, [sp, #24]
 800db54:	f10b 0b01 	add.w	fp, fp, #1
 800db58:	e7bb      	b.n	800dad2 <_printf_float+0x2fe>
 800db5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db5e:	4631      	mov	r1, r6
 800db60:	4628      	mov	r0, r5
 800db62:	47b8      	blx	r7
 800db64:	3001      	adds	r0, #1
 800db66:	d1c0      	bne.n	800daea <_printf_float+0x316>
 800db68:	e68f      	b.n	800d88a <_printf_float+0xb6>
 800db6a:	9a06      	ldr	r2, [sp, #24]
 800db6c:	464b      	mov	r3, r9
 800db6e:	4442      	add	r2, r8
 800db70:	4631      	mov	r1, r6
 800db72:	4628      	mov	r0, r5
 800db74:	47b8      	blx	r7
 800db76:	3001      	adds	r0, #1
 800db78:	d1c3      	bne.n	800db02 <_printf_float+0x32e>
 800db7a:	e686      	b.n	800d88a <_printf_float+0xb6>
 800db7c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800db80:	f1ba 0f01 	cmp.w	sl, #1
 800db84:	dc01      	bgt.n	800db8a <_printf_float+0x3b6>
 800db86:	07db      	lsls	r3, r3, #31
 800db88:	d536      	bpl.n	800dbf8 <_printf_float+0x424>
 800db8a:	2301      	movs	r3, #1
 800db8c:	4642      	mov	r2, r8
 800db8e:	4631      	mov	r1, r6
 800db90:	4628      	mov	r0, r5
 800db92:	47b8      	blx	r7
 800db94:	3001      	adds	r0, #1
 800db96:	f43f ae78 	beq.w	800d88a <_printf_float+0xb6>
 800db9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db9e:	4631      	mov	r1, r6
 800dba0:	4628      	mov	r0, r5
 800dba2:	47b8      	blx	r7
 800dba4:	3001      	adds	r0, #1
 800dba6:	f43f ae70 	beq.w	800d88a <_printf_float+0xb6>
 800dbaa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dbae:	2200      	movs	r2, #0
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dbb6:	f7f2 ffaf 	bl	8000b18 <__aeabi_dcmpeq>
 800dbba:	b9c0      	cbnz	r0, 800dbee <_printf_float+0x41a>
 800dbbc:	4653      	mov	r3, sl
 800dbbe:	f108 0201 	add.w	r2, r8, #1
 800dbc2:	4631      	mov	r1, r6
 800dbc4:	4628      	mov	r0, r5
 800dbc6:	47b8      	blx	r7
 800dbc8:	3001      	adds	r0, #1
 800dbca:	d10c      	bne.n	800dbe6 <_printf_float+0x412>
 800dbcc:	e65d      	b.n	800d88a <_printf_float+0xb6>
 800dbce:	2301      	movs	r3, #1
 800dbd0:	465a      	mov	r2, fp
 800dbd2:	4631      	mov	r1, r6
 800dbd4:	4628      	mov	r0, r5
 800dbd6:	47b8      	blx	r7
 800dbd8:	3001      	adds	r0, #1
 800dbda:	f43f ae56 	beq.w	800d88a <_printf_float+0xb6>
 800dbde:	f108 0801 	add.w	r8, r8, #1
 800dbe2:	45d0      	cmp	r8, sl
 800dbe4:	dbf3      	blt.n	800dbce <_printf_float+0x3fa>
 800dbe6:	464b      	mov	r3, r9
 800dbe8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800dbec:	e6df      	b.n	800d9ae <_printf_float+0x1da>
 800dbee:	f04f 0800 	mov.w	r8, #0
 800dbf2:	f104 0b1a 	add.w	fp, r4, #26
 800dbf6:	e7f4      	b.n	800dbe2 <_printf_float+0x40e>
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	4642      	mov	r2, r8
 800dbfc:	e7e1      	b.n	800dbc2 <_printf_float+0x3ee>
 800dbfe:	2301      	movs	r3, #1
 800dc00:	464a      	mov	r2, r9
 800dc02:	4631      	mov	r1, r6
 800dc04:	4628      	mov	r0, r5
 800dc06:	47b8      	blx	r7
 800dc08:	3001      	adds	r0, #1
 800dc0a:	f43f ae3e 	beq.w	800d88a <_printf_float+0xb6>
 800dc0e:	f108 0801 	add.w	r8, r8, #1
 800dc12:	68e3      	ldr	r3, [r4, #12]
 800dc14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dc16:	1a5b      	subs	r3, r3, r1
 800dc18:	4543      	cmp	r3, r8
 800dc1a:	dcf0      	bgt.n	800dbfe <_printf_float+0x42a>
 800dc1c:	e6fc      	b.n	800da18 <_printf_float+0x244>
 800dc1e:	f04f 0800 	mov.w	r8, #0
 800dc22:	f104 0919 	add.w	r9, r4, #25
 800dc26:	e7f4      	b.n	800dc12 <_printf_float+0x43e>

0800dc28 <_printf_common>:
 800dc28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc2c:	4616      	mov	r6, r2
 800dc2e:	4698      	mov	r8, r3
 800dc30:	688a      	ldr	r2, [r1, #8]
 800dc32:	690b      	ldr	r3, [r1, #16]
 800dc34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dc38:	4293      	cmp	r3, r2
 800dc3a:	bfb8      	it	lt
 800dc3c:	4613      	movlt	r3, r2
 800dc3e:	6033      	str	r3, [r6, #0]
 800dc40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dc44:	4607      	mov	r7, r0
 800dc46:	460c      	mov	r4, r1
 800dc48:	b10a      	cbz	r2, 800dc4e <_printf_common+0x26>
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	6033      	str	r3, [r6, #0]
 800dc4e:	6823      	ldr	r3, [r4, #0]
 800dc50:	0699      	lsls	r1, r3, #26
 800dc52:	bf42      	ittt	mi
 800dc54:	6833      	ldrmi	r3, [r6, #0]
 800dc56:	3302      	addmi	r3, #2
 800dc58:	6033      	strmi	r3, [r6, #0]
 800dc5a:	6825      	ldr	r5, [r4, #0]
 800dc5c:	f015 0506 	ands.w	r5, r5, #6
 800dc60:	d106      	bne.n	800dc70 <_printf_common+0x48>
 800dc62:	f104 0a19 	add.w	sl, r4, #25
 800dc66:	68e3      	ldr	r3, [r4, #12]
 800dc68:	6832      	ldr	r2, [r6, #0]
 800dc6a:	1a9b      	subs	r3, r3, r2
 800dc6c:	42ab      	cmp	r3, r5
 800dc6e:	dc26      	bgt.n	800dcbe <_printf_common+0x96>
 800dc70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dc74:	6822      	ldr	r2, [r4, #0]
 800dc76:	3b00      	subs	r3, #0
 800dc78:	bf18      	it	ne
 800dc7a:	2301      	movne	r3, #1
 800dc7c:	0692      	lsls	r2, r2, #26
 800dc7e:	d42b      	bmi.n	800dcd8 <_printf_common+0xb0>
 800dc80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dc84:	4641      	mov	r1, r8
 800dc86:	4638      	mov	r0, r7
 800dc88:	47c8      	blx	r9
 800dc8a:	3001      	adds	r0, #1
 800dc8c:	d01e      	beq.n	800dccc <_printf_common+0xa4>
 800dc8e:	6823      	ldr	r3, [r4, #0]
 800dc90:	6922      	ldr	r2, [r4, #16]
 800dc92:	f003 0306 	and.w	r3, r3, #6
 800dc96:	2b04      	cmp	r3, #4
 800dc98:	bf02      	ittt	eq
 800dc9a:	68e5      	ldreq	r5, [r4, #12]
 800dc9c:	6833      	ldreq	r3, [r6, #0]
 800dc9e:	1aed      	subeq	r5, r5, r3
 800dca0:	68a3      	ldr	r3, [r4, #8]
 800dca2:	bf0c      	ite	eq
 800dca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dca8:	2500      	movne	r5, #0
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	bfc4      	itt	gt
 800dcae:	1a9b      	subgt	r3, r3, r2
 800dcb0:	18ed      	addgt	r5, r5, r3
 800dcb2:	2600      	movs	r6, #0
 800dcb4:	341a      	adds	r4, #26
 800dcb6:	42b5      	cmp	r5, r6
 800dcb8:	d11a      	bne.n	800dcf0 <_printf_common+0xc8>
 800dcba:	2000      	movs	r0, #0
 800dcbc:	e008      	b.n	800dcd0 <_printf_common+0xa8>
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	4652      	mov	r2, sl
 800dcc2:	4641      	mov	r1, r8
 800dcc4:	4638      	mov	r0, r7
 800dcc6:	47c8      	blx	r9
 800dcc8:	3001      	adds	r0, #1
 800dcca:	d103      	bne.n	800dcd4 <_printf_common+0xac>
 800dccc:	f04f 30ff 	mov.w	r0, #4294967295
 800dcd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcd4:	3501      	adds	r5, #1
 800dcd6:	e7c6      	b.n	800dc66 <_printf_common+0x3e>
 800dcd8:	18e1      	adds	r1, r4, r3
 800dcda:	1c5a      	adds	r2, r3, #1
 800dcdc:	2030      	movs	r0, #48	@ 0x30
 800dcde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dce2:	4422      	add	r2, r4
 800dce4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dce8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dcec:	3302      	adds	r3, #2
 800dcee:	e7c7      	b.n	800dc80 <_printf_common+0x58>
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	4622      	mov	r2, r4
 800dcf4:	4641      	mov	r1, r8
 800dcf6:	4638      	mov	r0, r7
 800dcf8:	47c8      	blx	r9
 800dcfa:	3001      	adds	r0, #1
 800dcfc:	d0e6      	beq.n	800dccc <_printf_common+0xa4>
 800dcfe:	3601      	adds	r6, #1
 800dd00:	e7d9      	b.n	800dcb6 <_printf_common+0x8e>
	...

0800dd04 <_printf_i>:
 800dd04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd08:	7e0f      	ldrb	r7, [r1, #24]
 800dd0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dd0c:	2f78      	cmp	r7, #120	@ 0x78
 800dd0e:	4691      	mov	r9, r2
 800dd10:	4680      	mov	r8, r0
 800dd12:	460c      	mov	r4, r1
 800dd14:	469a      	mov	sl, r3
 800dd16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dd1a:	d807      	bhi.n	800dd2c <_printf_i+0x28>
 800dd1c:	2f62      	cmp	r7, #98	@ 0x62
 800dd1e:	d80a      	bhi.n	800dd36 <_printf_i+0x32>
 800dd20:	2f00      	cmp	r7, #0
 800dd22:	f000 80d2 	beq.w	800deca <_printf_i+0x1c6>
 800dd26:	2f58      	cmp	r7, #88	@ 0x58
 800dd28:	f000 80b9 	beq.w	800de9e <_printf_i+0x19a>
 800dd2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dd30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dd34:	e03a      	b.n	800ddac <_printf_i+0xa8>
 800dd36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dd3a:	2b15      	cmp	r3, #21
 800dd3c:	d8f6      	bhi.n	800dd2c <_printf_i+0x28>
 800dd3e:	a101      	add	r1, pc, #4	@ (adr r1, 800dd44 <_printf_i+0x40>)
 800dd40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dd44:	0800dd9d 	.word	0x0800dd9d
 800dd48:	0800ddb1 	.word	0x0800ddb1
 800dd4c:	0800dd2d 	.word	0x0800dd2d
 800dd50:	0800dd2d 	.word	0x0800dd2d
 800dd54:	0800dd2d 	.word	0x0800dd2d
 800dd58:	0800dd2d 	.word	0x0800dd2d
 800dd5c:	0800ddb1 	.word	0x0800ddb1
 800dd60:	0800dd2d 	.word	0x0800dd2d
 800dd64:	0800dd2d 	.word	0x0800dd2d
 800dd68:	0800dd2d 	.word	0x0800dd2d
 800dd6c:	0800dd2d 	.word	0x0800dd2d
 800dd70:	0800deb1 	.word	0x0800deb1
 800dd74:	0800dddb 	.word	0x0800dddb
 800dd78:	0800de6b 	.word	0x0800de6b
 800dd7c:	0800dd2d 	.word	0x0800dd2d
 800dd80:	0800dd2d 	.word	0x0800dd2d
 800dd84:	0800ded3 	.word	0x0800ded3
 800dd88:	0800dd2d 	.word	0x0800dd2d
 800dd8c:	0800dddb 	.word	0x0800dddb
 800dd90:	0800dd2d 	.word	0x0800dd2d
 800dd94:	0800dd2d 	.word	0x0800dd2d
 800dd98:	0800de73 	.word	0x0800de73
 800dd9c:	6833      	ldr	r3, [r6, #0]
 800dd9e:	1d1a      	adds	r2, r3, #4
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	6032      	str	r2, [r6, #0]
 800dda4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dda8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ddac:	2301      	movs	r3, #1
 800ddae:	e09d      	b.n	800deec <_printf_i+0x1e8>
 800ddb0:	6833      	ldr	r3, [r6, #0]
 800ddb2:	6820      	ldr	r0, [r4, #0]
 800ddb4:	1d19      	adds	r1, r3, #4
 800ddb6:	6031      	str	r1, [r6, #0]
 800ddb8:	0606      	lsls	r6, r0, #24
 800ddba:	d501      	bpl.n	800ddc0 <_printf_i+0xbc>
 800ddbc:	681d      	ldr	r5, [r3, #0]
 800ddbe:	e003      	b.n	800ddc8 <_printf_i+0xc4>
 800ddc0:	0645      	lsls	r5, r0, #25
 800ddc2:	d5fb      	bpl.n	800ddbc <_printf_i+0xb8>
 800ddc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ddc8:	2d00      	cmp	r5, #0
 800ddca:	da03      	bge.n	800ddd4 <_printf_i+0xd0>
 800ddcc:	232d      	movs	r3, #45	@ 0x2d
 800ddce:	426d      	negs	r5, r5
 800ddd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ddd4:	4859      	ldr	r0, [pc, #356]	@ (800df3c <_printf_i+0x238>)
 800ddd6:	230a      	movs	r3, #10
 800ddd8:	e011      	b.n	800ddfe <_printf_i+0xfa>
 800ddda:	6821      	ldr	r1, [r4, #0]
 800dddc:	6833      	ldr	r3, [r6, #0]
 800ddde:	0608      	lsls	r0, r1, #24
 800dde0:	f853 5b04 	ldr.w	r5, [r3], #4
 800dde4:	d402      	bmi.n	800ddec <_printf_i+0xe8>
 800dde6:	0649      	lsls	r1, r1, #25
 800dde8:	bf48      	it	mi
 800ddea:	b2ad      	uxthmi	r5, r5
 800ddec:	2f6f      	cmp	r7, #111	@ 0x6f
 800ddee:	4853      	ldr	r0, [pc, #332]	@ (800df3c <_printf_i+0x238>)
 800ddf0:	6033      	str	r3, [r6, #0]
 800ddf2:	bf14      	ite	ne
 800ddf4:	230a      	movne	r3, #10
 800ddf6:	2308      	moveq	r3, #8
 800ddf8:	2100      	movs	r1, #0
 800ddfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ddfe:	6866      	ldr	r6, [r4, #4]
 800de00:	60a6      	str	r6, [r4, #8]
 800de02:	2e00      	cmp	r6, #0
 800de04:	bfa2      	ittt	ge
 800de06:	6821      	ldrge	r1, [r4, #0]
 800de08:	f021 0104 	bicge.w	r1, r1, #4
 800de0c:	6021      	strge	r1, [r4, #0]
 800de0e:	b90d      	cbnz	r5, 800de14 <_printf_i+0x110>
 800de10:	2e00      	cmp	r6, #0
 800de12:	d04b      	beq.n	800deac <_printf_i+0x1a8>
 800de14:	4616      	mov	r6, r2
 800de16:	fbb5 f1f3 	udiv	r1, r5, r3
 800de1a:	fb03 5711 	mls	r7, r3, r1, r5
 800de1e:	5dc7      	ldrb	r7, [r0, r7]
 800de20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800de24:	462f      	mov	r7, r5
 800de26:	42bb      	cmp	r3, r7
 800de28:	460d      	mov	r5, r1
 800de2a:	d9f4      	bls.n	800de16 <_printf_i+0x112>
 800de2c:	2b08      	cmp	r3, #8
 800de2e:	d10b      	bne.n	800de48 <_printf_i+0x144>
 800de30:	6823      	ldr	r3, [r4, #0]
 800de32:	07df      	lsls	r7, r3, #31
 800de34:	d508      	bpl.n	800de48 <_printf_i+0x144>
 800de36:	6923      	ldr	r3, [r4, #16]
 800de38:	6861      	ldr	r1, [r4, #4]
 800de3a:	4299      	cmp	r1, r3
 800de3c:	bfde      	ittt	le
 800de3e:	2330      	movle	r3, #48	@ 0x30
 800de40:	f806 3c01 	strble.w	r3, [r6, #-1]
 800de44:	f106 36ff 	addle.w	r6, r6, #4294967295
 800de48:	1b92      	subs	r2, r2, r6
 800de4a:	6122      	str	r2, [r4, #16]
 800de4c:	f8cd a000 	str.w	sl, [sp]
 800de50:	464b      	mov	r3, r9
 800de52:	aa03      	add	r2, sp, #12
 800de54:	4621      	mov	r1, r4
 800de56:	4640      	mov	r0, r8
 800de58:	f7ff fee6 	bl	800dc28 <_printf_common>
 800de5c:	3001      	adds	r0, #1
 800de5e:	d14a      	bne.n	800def6 <_printf_i+0x1f2>
 800de60:	f04f 30ff 	mov.w	r0, #4294967295
 800de64:	b004      	add	sp, #16
 800de66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de6a:	6823      	ldr	r3, [r4, #0]
 800de6c:	f043 0320 	orr.w	r3, r3, #32
 800de70:	6023      	str	r3, [r4, #0]
 800de72:	4833      	ldr	r0, [pc, #204]	@ (800df40 <_printf_i+0x23c>)
 800de74:	2778      	movs	r7, #120	@ 0x78
 800de76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800de7a:	6823      	ldr	r3, [r4, #0]
 800de7c:	6831      	ldr	r1, [r6, #0]
 800de7e:	061f      	lsls	r7, r3, #24
 800de80:	f851 5b04 	ldr.w	r5, [r1], #4
 800de84:	d402      	bmi.n	800de8c <_printf_i+0x188>
 800de86:	065f      	lsls	r7, r3, #25
 800de88:	bf48      	it	mi
 800de8a:	b2ad      	uxthmi	r5, r5
 800de8c:	6031      	str	r1, [r6, #0]
 800de8e:	07d9      	lsls	r1, r3, #31
 800de90:	bf44      	itt	mi
 800de92:	f043 0320 	orrmi.w	r3, r3, #32
 800de96:	6023      	strmi	r3, [r4, #0]
 800de98:	b11d      	cbz	r5, 800dea2 <_printf_i+0x19e>
 800de9a:	2310      	movs	r3, #16
 800de9c:	e7ac      	b.n	800ddf8 <_printf_i+0xf4>
 800de9e:	4827      	ldr	r0, [pc, #156]	@ (800df3c <_printf_i+0x238>)
 800dea0:	e7e9      	b.n	800de76 <_printf_i+0x172>
 800dea2:	6823      	ldr	r3, [r4, #0]
 800dea4:	f023 0320 	bic.w	r3, r3, #32
 800dea8:	6023      	str	r3, [r4, #0]
 800deaa:	e7f6      	b.n	800de9a <_printf_i+0x196>
 800deac:	4616      	mov	r6, r2
 800deae:	e7bd      	b.n	800de2c <_printf_i+0x128>
 800deb0:	6833      	ldr	r3, [r6, #0]
 800deb2:	6825      	ldr	r5, [r4, #0]
 800deb4:	6961      	ldr	r1, [r4, #20]
 800deb6:	1d18      	adds	r0, r3, #4
 800deb8:	6030      	str	r0, [r6, #0]
 800deba:	062e      	lsls	r6, r5, #24
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	d501      	bpl.n	800dec4 <_printf_i+0x1c0>
 800dec0:	6019      	str	r1, [r3, #0]
 800dec2:	e002      	b.n	800deca <_printf_i+0x1c6>
 800dec4:	0668      	lsls	r0, r5, #25
 800dec6:	d5fb      	bpl.n	800dec0 <_printf_i+0x1bc>
 800dec8:	8019      	strh	r1, [r3, #0]
 800deca:	2300      	movs	r3, #0
 800decc:	6123      	str	r3, [r4, #16]
 800dece:	4616      	mov	r6, r2
 800ded0:	e7bc      	b.n	800de4c <_printf_i+0x148>
 800ded2:	6833      	ldr	r3, [r6, #0]
 800ded4:	1d1a      	adds	r2, r3, #4
 800ded6:	6032      	str	r2, [r6, #0]
 800ded8:	681e      	ldr	r6, [r3, #0]
 800deda:	6862      	ldr	r2, [r4, #4]
 800dedc:	2100      	movs	r1, #0
 800dede:	4630      	mov	r0, r6
 800dee0:	f7f2 f99e 	bl	8000220 <memchr>
 800dee4:	b108      	cbz	r0, 800deea <_printf_i+0x1e6>
 800dee6:	1b80      	subs	r0, r0, r6
 800dee8:	6060      	str	r0, [r4, #4]
 800deea:	6863      	ldr	r3, [r4, #4]
 800deec:	6123      	str	r3, [r4, #16]
 800deee:	2300      	movs	r3, #0
 800def0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800def4:	e7aa      	b.n	800de4c <_printf_i+0x148>
 800def6:	6923      	ldr	r3, [r4, #16]
 800def8:	4632      	mov	r2, r6
 800defa:	4649      	mov	r1, r9
 800defc:	4640      	mov	r0, r8
 800defe:	47d0      	blx	sl
 800df00:	3001      	adds	r0, #1
 800df02:	d0ad      	beq.n	800de60 <_printf_i+0x15c>
 800df04:	6823      	ldr	r3, [r4, #0]
 800df06:	079b      	lsls	r3, r3, #30
 800df08:	d413      	bmi.n	800df32 <_printf_i+0x22e>
 800df0a:	68e0      	ldr	r0, [r4, #12]
 800df0c:	9b03      	ldr	r3, [sp, #12]
 800df0e:	4298      	cmp	r0, r3
 800df10:	bfb8      	it	lt
 800df12:	4618      	movlt	r0, r3
 800df14:	e7a6      	b.n	800de64 <_printf_i+0x160>
 800df16:	2301      	movs	r3, #1
 800df18:	4632      	mov	r2, r6
 800df1a:	4649      	mov	r1, r9
 800df1c:	4640      	mov	r0, r8
 800df1e:	47d0      	blx	sl
 800df20:	3001      	adds	r0, #1
 800df22:	d09d      	beq.n	800de60 <_printf_i+0x15c>
 800df24:	3501      	adds	r5, #1
 800df26:	68e3      	ldr	r3, [r4, #12]
 800df28:	9903      	ldr	r1, [sp, #12]
 800df2a:	1a5b      	subs	r3, r3, r1
 800df2c:	42ab      	cmp	r3, r5
 800df2e:	dcf2      	bgt.n	800df16 <_printf_i+0x212>
 800df30:	e7eb      	b.n	800df0a <_printf_i+0x206>
 800df32:	2500      	movs	r5, #0
 800df34:	f104 0619 	add.w	r6, r4, #25
 800df38:	e7f5      	b.n	800df26 <_printf_i+0x222>
 800df3a:	bf00      	nop
 800df3c:	080115ca 	.word	0x080115ca
 800df40:	080115db 	.word	0x080115db

0800df44 <_scanf_float>:
 800df44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df48:	b087      	sub	sp, #28
 800df4a:	4617      	mov	r7, r2
 800df4c:	9303      	str	r3, [sp, #12]
 800df4e:	688b      	ldr	r3, [r1, #8]
 800df50:	1e5a      	subs	r2, r3, #1
 800df52:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800df56:	bf81      	itttt	hi
 800df58:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800df5c:	eb03 0b05 	addhi.w	fp, r3, r5
 800df60:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800df64:	608b      	strhi	r3, [r1, #8]
 800df66:	680b      	ldr	r3, [r1, #0]
 800df68:	460a      	mov	r2, r1
 800df6a:	f04f 0500 	mov.w	r5, #0
 800df6e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800df72:	f842 3b1c 	str.w	r3, [r2], #28
 800df76:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800df7a:	4680      	mov	r8, r0
 800df7c:	460c      	mov	r4, r1
 800df7e:	bf98      	it	ls
 800df80:	f04f 0b00 	movls.w	fp, #0
 800df84:	9201      	str	r2, [sp, #4]
 800df86:	4616      	mov	r6, r2
 800df88:	46aa      	mov	sl, r5
 800df8a:	46a9      	mov	r9, r5
 800df8c:	9502      	str	r5, [sp, #8]
 800df8e:	68a2      	ldr	r2, [r4, #8]
 800df90:	b152      	cbz	r2, 800dfa8 <_scanf_float+0x64>
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	2b4e      	cmp	r3, #78	@ 0x4e
 800df98:	d864      	bhi.n	800e064 <_scanf_float+0x120>
 800df9a:	2b40      	cmp	r3, #64	@ 0x40
 800df9c:	d83c      	bhi.n	800e018 <_scanf_float+0xd4>
 800df9e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800dfa2:	b2c8      	uxtb	r0, r1
 800dfa4:	280e      	cmp	r0, #14
 800dfa6:	d93a      	bls.n	800e01e <_scanf_float+0xda>
 800dfa8:	f1b9 0f00 	cmp.w	r9, #0
 800dfac:	d003      	beq.n	800dfb6 <_scanf_float+0x72>
 800dfae:	6823      	ldr	r3, [r4, #0]
 800dfb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dfb4:	6023      	str	r3, [r4, #0]
 800dfb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dfba:	f1ba 0f01 	cmp.w	sl, #1
 800dfbe:	f200 8117 	bhi.w	800e1f0 <_scanf_float+0x2ac>
 800dfc2:	9b01      	ldr	r3, [sp, #4]
 800dfc4:	429e      	cmp	r6, r3
 800dfc6:	f200 8108 	bhi.w	800e1da <_scanf_float+0x296>
 800dfca:	2001      	movs	r0, #1
 800dfcc:	b007      	add	sp, #28
 800dfce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfd2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800dfd6:	2a0d      	cmp	r2, #13
 800dfd8:	d8e6      	bhi.n	800dfa8 <_scanf_float+0x64>
 800dfda:	a101      	add	r1, pc, #4	@ (adr r1, 800dfe0 <_scanf_float+0x9c>)
 800dfdc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dfe0:	0800e127 	.word	0x0800e127
 800dfe4:	0800dfa9 	.word	0x0800dfa9
 800dfe8:	0800dfa9 	.word	0x0800dfa9
 800dfec:	0800dfa9 	.word	0x0800dfa9
 800dff0:	0800e187 	.word	0x0800e187
 800dff4:	0800e15f 	.word	0x0800e15f
 800dff8:	0800dfa9 	.word	0x0800dfa9
 800dffc:	0800dfa9 	.word	0x0800dfa9
 800e000:	0800e135 	.word	0x0800e135
 800e004:	0800dfa9 	.word	0x0800dfa9
 800e008:	0800dfa9 	.word	0x0800dfa9
 800e00c:	0800dfa9 	.word	0x0800dfa9
 800e010:	0800dfa9 	.word	0x0800dfa9
 800e014:	0800e0ed 	.word	0x0800e0ed
 800e018:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e01c:	e7db      	b.n	800dfd6 <_scanf_float+0x92>
 800e01e:	290e      	cmp	r1, #14
 800e020:	d8c2      	bhi.n	800dfa8 <_scanf_float+0x64>
 800e022:	a001      	add	r0, pc, #4	@ (adr r0, 800e028 <_scanf_float+0xe4>)
 800e024:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e028:	0800e0dd 	.word	0x0800e0dd
 800e02c:	0800dfa9 	.word	0x0800dfa9
 800e030:	0800e0dd 	.word	0x0800e0dd
 800e034:	0800e173 	.word	0x0800e173
 800e038:	0800dfa9 	.word	0x0800dfa9
 800e03c:	0800e085 	.word	0x0800e085
 800e040:	0800e0c3 	.word	0x0800e0c3
 800e044:	0800e0c3 	.word	0x0800e0c3
 800e048:	0800e0c3 	.word	0x0800e0c3
 800e04c:	0800e0c3 	.word	0x0800e0c3
 800e050:	0800e0c3 	.word	0x0800e0c3
 800e054:	0800e0c3 	.word	0x0800e0c3
 800e058:	0800e0c3 	.word	0x0800e0c3
 800e05c:	0800e0c3 	.word	0x0800e0c3
 800e060:	0800e0c3 	.word	0x0800e0c3
 800e064:	2b6e      	cmp	r3, #110	@ 0x6e
 800e066:	d809      	bhi.n	800e07c <_scanf_float+0x138>
 800e068:	2b60      	cmp	r3, #96	@ 0x60
 800e06a:	d8b2      	bhi.n	800dfd2 <_scanf_float+0x8e>
 800e06c:	2b54      	cmp	r3, #84	@ 0x54
 800e06e:	d07b      	beq.n	800e168 <_scanf_float+0x224>
 800e070:	2b59      	cmp	r3, #89	@ 0x59
 800e072:	d199      	bne.n	800dfa8 <_scanf_float+0x64>
 800e074:	2d07      	cmp	r5, #7
 800e076:	d197      	bne.n	800dfa8 <_scanf_float+0x64>
 800e078:	2508      	movs	r5, #8
 800e07a:	e02c      	b.n	800e0d6 <_scanf_float+0x192>
 800e07c:	2b74      	cmp	r3, #116	@ 0x74
 800e07e:	d073      	beq.n	800e168 <_scanf_float+0x224>
 800e080:	2b79      	cmp	r3, #121	@ 0x79
 800e082:	e7f6      	b.n	800e072 <_scanf_float+0x12e>
 800e084:	6821      	ldr	r1, [r4, #0]
 800e086:	05c8      	lsls	r0, r1, #23
 800e088:	d51b      	bpl.n	800e0c2 <_scanf_float+0x17e>
 800e08a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e08e:	6021      	str	r1, [r4, #0]
 800e090:	f109 0901 	add.w	r9, r9, #1
 800e094:	f1bb 0f00 	cmp.w	fp, #0
 800e098:	d003      	beq.n	800e0a2 <_scanf_float+0x15e>
 800e09a:	3201      	adds	r2, #1
 800e09c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e0a0:	60a2      	str	r2, [r4, #8]
 800e0a2:	68a3      	ldr	r3, [r4, #8]
 800e0a4:	3b01      	subs	r3, #1
 800e0a6:	60a3      	str	r3, [r4, #8]
 800e0a8:	6923      	ldr	r3, [r4, #16]
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	6123      	str	r3, [r4, #16]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	3b01      	subs	r3, #1
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	607b      	str	r3, [r7, #4]
 800e0b6:	f340 8087 	ble.w	800e1c8 <_scanf_float+0x284>
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	3301      	adds	r3, #1
 800e0be:	603b      	str	r3, [r7, #0]
 800e0c0:	e765      	b.n	800df8e <_scanf_float+0x4a>
 800e0c2:	eb1a 0105 	adds.w	r1, sl, r5
 800e0c6:	f47f af6f 	bne.w	800dfa8 <_scanf_float+0x64>
 800e0ca:	6822      	ldr	r2, [r4, #0]
 800e0cc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e0d0:	6022      	str	r2, [r4, #0]
 800e0d2:	460d      	mov	r5, r1
 800e0d4:	468a      	mov	sl, r1
 800e0d6:	f806 3b01 	strb.w	r3, [r6], #1
 800e0da:	e7e2      	b.n	800e0a2 <_scanf_float+0x15e>
 800e0dc:	6822      	ldr	r2, [r4, #0]
 800e0de:	0610      	lsls	r0, r2, #24
 800e0e0:	f57f af62 	bpl.w	800dfa8 <_scanf_float+0x64>
 800e0e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e0e8:	6022      	str	r2, [r4, #0]
 800e0ea:	e7f4      	b.n	800e0d6 <_scanf_float+0x192>
 800e0ec:	f1ba 0f00 	cmp.w	sl, #0
 800e0f0:	d10e      	bne.n	800e110 <_scanf_float+0x1cc>
 800e0f2:	f1b9 0f00 	cmp.w	r9, #0
 800e0f6:	d10e      	bne.n	800e116 <_scanf_float+0x1d2>
 800e0f8:	6822      	ldr	r2, [r4, #0]
 800e0fa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e0fe:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e102:	d108      	bne.n	800e116 <_scanf_float+0x1d2>
 800e104:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e108:	6022      	str	r2, [r4, #0]
 800e10a:	f04f 0a01 	mov.w	sl, #1
 800e10e:	e7e2      	b.n	800e0d6 <_scanf_float+0x192>
 800e110:	f1ba 0f02 	cmp.w	sl, #2
 800e114:	d055      	beq.n	800e1c2 <_scanf_float+0x27e>
 800e116:	2d01      	cmp	r5, #1
 800e118:	d002      	beq.n	800e120 <_scanf_float+0x1dc>
 800e11a:	2d04      	cmp	r5, #4
 800e11c:	f47f af44 	bne.w	800dfa8 <_scanf_float+0x64>
 800e120:	3501      	adds	r5, #1
 800e122:	b2ed      	uxtb	r5, r5
 800e124:	e7d7      	b.n	800e0d6 <_scanf_float+0x192>
 800e126:	f1ba 0f01 	cmp.w	sl, #1
 800e12a:	f47f af3d 	bne.w	800dfa8 <_scanf_float+0x64>
 800e12e:	f04f 0a02 	mov.w	sl, #2
 800e132:	e7d0      	b.n	800e0d6 <_scanf_float+0x192>
 800e134:	b97d      	cbnz	r5, 800e156 <_scanf_float+0x212>
 800e136:	f1b9 0f00 	cmp.w	r9, #0
 800e13a:	f47f af38 	bne.w	800dfae <_scanf_float+0x6a>
 800e13e:	6822      	ldr	r2, [r4, #0]
 800e140:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e144:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e148:	f040 8108 	bne.w	800e35c <_scanf_float+0x418>
 800e14c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e150:	6022      	str	r2, [r4, #0]
 800e152:	2501      	movs	r5, #1
 800e154:	e7bf      	b.n	800e0d6 <_scanf_float+0x192>
 800e156:	2d03      	cmp	r5, #3
 800e158:	d0e2      	beq.n	800e120 <_scanf_float+0x1dc>
 800e15a:	2d05      	cmp	r5, #5
 800e15c:	e7de      	b.n	800e11c <_scanf_float+0x1d8>
 800e15e:	2d02      	cmp	r5, #2
 800e160:	f47f af22 	bne.w	800dfa8 <_scanf_float+0x64>
 800e164:	2503      	movs	r5, #3
 800e166:	e7b6      	b.n	800e0d6 <_scanf_float+0x192>
 800e168:	2d06      	cmp	r5, #6
 800e16a:	f47f af1d 	bne.w	800dfa8 <_scanf_float+0x64>
 800e16e:	2507      	movs	r5, #7
 800e170:	e7b1      	b.n	800e0d6 <_scanf_float+0x192>
 800e172:	6822      	ldr	r2, [r4, #0]
 800e174:	0591      	lsls	r1, r2, #22
 800e176:	f57f af17 	bpl.w	800dfa8 <_scanf_float+0x64>
 800e17a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e17e:	6022      	str	r2, [r4, #0]
 800e180:	f8cd 9008 	str.w	r9, [sp, #8]
 800e184:	e7a7      	b.n	800e0d6 <_scanf_float+0x192>
 800e186:	6822      	ldr	r2, [r4, #0]
 800e188:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e18c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e190:	d006      	beq.n	800e1a0 <_scanf_float+0x25c>
 800e192:	0550      	lsls	r0, r2, #21
 800e194:	f57f af08 	bpl.w	800dfa8 <_scanf_float+0x64>
 800e198:	f1b9 0f00 	cmp.w	r9, #0
 800e19c:	f000 80de 	beq.w	800e35c <_scanf_float+0x418>
 800e1a0:	0591      	lsls	r1, r2, #22
 800e1a2:	bf58      	it	pl
 800e1a4:	9902      	ldrpl	r1, [sp, #8]
 800e1a6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e1aa:	bf58      	it	pl
 800e1ac:	eba9 0101 	subpl.w	r1, r9, r1
 800e1b0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e1b4:	bf58      	it	pl
 800e1b6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e1ba:	6022      	str	r2, [r4, #0]
 800e1bc:	f04f 0900 	mov.w	r9, #0
 800e1c0:	e789      	b.n	800e0d6 <_scanf_float+0x192>
 800e1c2:	f04f 0a03 	mov.w	sl, #3
 800e1c6:	e786      	b.n	800e0d6 <_scanf_float+0x192>
 800e1c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e1cc:	4639      	mov	r1, r7
 800e1ce:	4640      	mov	r0, r8
 800e1d0:	4798      	blx	r3
 800e1d2:	2800      	cmp	r0, #0
 800e1d4:	f43f aedb 	beq.w	800df8e <_scanf_float+0x4a>
 800e1d8:	e6e6      	b.n	800dfa8 <_scanf_float+0x64>
 800e1da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e1de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e1e2:	463a      	mov	r2, r7
 800e1e4:	4640      	mov	r0, r8
 800e1e6:	4798      	blx	r3
 800e1e8:	6923      	ldr	r3, [r4, #16]
 800e1ea:	3b01      	subs	r3, #1
 800e1ec:	6123      	str	r3, [r4, #16]
 800e1ee:	e6e8      	b.n	800dfc2 <_scanf_float+0x7e>
 800e1f0:	1e6b      	subs	r3, r5, #1
 800e1f2:	2b06      	cmp	r3, #6
 800e1f4:	d824      	bhi.n	800e240 <_scanf_float+0x2fc>
 800e1f6:	2d02      	cmp	r5, #2
 800e1f8:	d836      	bhi.n	800e268 <_scanf_float+0x324>
 800e1fa:	9b01      	ldr	r3, [sp, #4]
 800e1fc:	429e      	cmp	r6, r3
 800e1fe:	f67f aee4 	bls.w	800dfca <_scanf_float+0x86>
 800e202:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e206:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e20a:	463a      	mov	r2, r7
 800e20c:	4640      	mov	r0, r8
 800e20e:	4798      	blx	r3
 800e210:	6923      	ldr	r3, [r4, #16]
 800e212:	3b01      	subs	r3, #1
 800e214:	6123      	str	r3, [r4, #16]
 800e216:	e7f0      	b.n	800e1fa <_scanf_float+0x2b6>
 800e218:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e21c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e220:	463a      	mov	r2, r7
 800e222:	4640      	mov	r0, r8
 800e224:	4798      	blx	r3
 800e226:	6923      	ldr	r3, [r4, #16]
 800e228:	3b01      	subs	r3, #1
 800e22a:	6123      	str	r3, [r4, #16]
 800e22c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e230:	fa5f fa8a 	uxtb.w	sl, sl
 800e234:	f1ba 0f02 	cmp.w	sl, #2
 800e238:	d1ee      	bne.n	800e218 <_scanf_float+0x2d4>
 800e23a:	3d03      	subs	r5, #3
 800e23c:	b2ed      	uxtb	r5, r5
 800e23e:	1b76      	subs	r6, r6, r5
 800e240:	6823      	ldr	r3, [r4, #0]
 800e242:	05da      	lsls	r2, r3, #23
 800e244:	d530      	bpl.n	800e2a8 <_scanf_float+0x364>
 800e246:	055b      	lsls	r3, r3, #21
 800e248:	d511      	bpl.n	800e26e <_scanf_float+0x32a>
 800e24a:	9b01      	ldr	r3, [sp, #4]
 800e24c:	429e      	cmp	r6, r3
 800e24e:	f67f aebc 	bls.w	800dfca <_scanf_float+0x86>
 800e252:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e256:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e25a:	463a      	mov	r2, r7
 800e25c:	4640      	mov	r0, r8
 800e25e:	4798      	blx	r3
 800e260:	6923      	ldr	r3, [r4, #16]
 800e262:	3b01      	subs	r3, #1
 800e264:	6123      	str	r3, [r4, #16]
 800e266:	e7f0      	b.n	800e24a <_scanf_float+0x306>
 800e268:	46aa      	mov	sl, r5
 800e26a:	46b3      	mov	fp, r6
 800e26c:	e7de      	b.n	800e22c <_scanf_float+0x2e8>
 800e26e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e272:	6923      	ldr	r3, [r4, #16]
 800e274:	2965      	cmp	r1, #101	@ 0x65
 800e276:	f103 33ff 	add.w	r3, r3, #4294967295
 800e27a:	f106 35ff 	add.w	r5, r6, #4294967295
 800e27e:	6123      	str	r3, [r4, #16]
 800e280:	d00c      	beq.n	800e29c <_scanf_float+0x358>
 800e282:	2945      	cmp	r1, #69	@ 0x45
 800e284:	d00a      	beq.n	800e29c <_scanf_float+0x358>
 800e286:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e28a:	463a      	mov	r2, r7
 800e28c:	4640      	mov	r0, r8
 800e28e:	4798      	blx	r3
 800e290:	6923      	ldr	r3, [r4, #16]
 800e292:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e296:	3b01      	subs	r3, #1
 800e298:	1eb5      	subs	r5, r6, #2
 800e29a:	6123      	str	r3, [r4, #16]
 800e29c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e2a0:	463a      	mov	r2, r7
 800e2a2:	4640      	mov	r0, r8
 800e2a4:	4798      	blx	r3
 800e2a6:	462e      	mov	r6, r5
 800e2a8:	6822      	ldr	r2, [r4, #0]
 800e2aa:	f012 0210 	ands.w	r2, r2, #16
 800e2ae:	d001      	beq.n	800e2b4 <_scanf_float+0x370>
 800e2b0:	2000      	movs	r0, #0
 800e2b2:	e68b      	b.n	800dfcc <_scanf_float+0x88>
 800e2b4:	7032      	strb	r2, [r6, #0]
 800e2b6:	6823      	ldr	r3, [r4, #0]
 800e2b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e2bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e2c0:	d11c      	bne.n	800e2fc <_scanf_float+0x3b8>
 800e2c2:	9b02      	ldr	r3, [sp, #8]
 800e2c4:	454b      	cmp	r3, r9
 800e2c6:	eba3 0209 	sub.w	r2, r3, r9
 800e2ca:	d123      	bne.n	800e314 <_scanf_float+0x3d0>
 800e2cc:	9901      	ldr	r1, [sp, #4]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	4640      	mov	r0, r8
 800e2d2:	f7ff f9cd 	bl	800d670 <_strtod_r>
 800e2d6:	9b03      	ldr	r3, [sp, #12]
 800e2d8:	6821      	ldr	r1, [r4, #0]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	f011 0f02 	tst.w	r1, #2
 800e2e0:	ec57 6b10 	vmov	r6, r7, d0
 800e2e4:	f103 0204 	add.w	r2, r3, #4
 800e2e8:	d01f      	beq.n	800e32a <_scanf_float+0x3e6>
 800e2ea:	9903      	ldr	r1, [sp, #12]
 800e2ec:	600a      	str	r2, [r1, #0]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	e9c3 6700 	strd	r6, r7, [r3]
 800e2f4:	68e3      	ldr	r3, [r4, #12]
 800e2f6:	3301      	adds	r3, #1
 800e2f8:	60e3      	str	r3, [r4, #12]
 800e2fa:	e7d9      	b.n	800e2b0 <_scanf_float+0x36c>
 800e2fc:	9b04      	ldr	r3, [sp, #16]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d0e4      	beq.n	800e2cc <_scanf_float+0x388>
 800e302:	9905      	ldr	r1, [sp, #20]
 800e304:	230a      	movs	r3, #10
 800e306:	3101      	adds	r1, #1
 800e308:	4640      	mov	r0, r8
 800e30a:	f002 f9e9 	bl	80106e0 <_strtol_r>
 800e30e:	9b04      	ldr	r3, [sp, #16]
 800e310:	9e05      	ldr	r6, [sp, #20]
 800e312:	1ac2      	subs	r2, r0, r3
 800e314:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e318:	429e      	cmp	r6, r3
 800e31a:	bf28      	it	cs
 800e31c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e320:	4910      	ldr	r1, [pc, #64]	@ (800e364 <_scanf_float+0x420>)
 800e322:	4630      	mov	r0, r6
 800e324:	f000 f8e4 	bl	800e4f0 <siprintf>
 800e328:	e7d0      	b.n	800e2cc <_scanf_float+0x388>
 800e32a:	f011 0f04 	tst.w	r1, #4
 800e32e:	9903      	ldr	r1, [sp, #12]
 800e330:	600a      	str	r2, [r1, #0]
 800e332:	d1dc      	bne.n	800e2ee <_scanf_float+0x3aa>
 800e334:	681d      	ldr	r5, [r3, #0]
 800e336:	4632      	mov	r2, r6
 800e338:	463b      	mov	r3, r7
 800e33a:	4630      	mov	r0, r6
 800e33c:	4639      	mov	r1, r7
 800e33e:	f7f2 fc1d 	bl	8000b7c <__aeabi_dcmpun>
 800e342:	b128      	cbz	r0, 800e350 <_scanf_float+0x40c>
 800e344:	4808      	ldr	r0, [pc, #32]	@ (800e368 <_scanf_float+0x424>)
 800e346:	f000 f9ff 	bl	800e748 <nanf>
 800e34a:	ed85 0a00 	vstr	s0, [r5]
 800e34e:	e7d1      	b.n	800e2f4 <_scanf_float+0x3b0>
 800e350:	4630      	mov	r0, r6
 800e352:	4639      	mov	r1, r7
 800e354:	f7f2 fc70 	bl	8000c38 <__aeabi_d2f>
 800e358:	6028      	str	r0, [r5, #0]
 800e35a:	e7cb      	b.n	800e2f4 <_scanf_float+0x3b0>
 800e35c:	f04f 0900 	mov.w	r9, #0
 800e360:	e629      	b.n	800dfb6 <_scanf_float+0x72>
 800e362:	bf00      	nop
 800e364:	080115ec 	.word	0x080115ec
 800e368:	0801198d 	.word	0x0801198d

0800e36c <std>:
 800e36c:	2300      	movs	r3, #0
 800e36e:	b510      	push	{r4, lr}
 800e370:	4604      	mov	r4, r0
 800e372:	e9c0 3300 	strd	r3, r3, [r0]
 800e376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e37a:	6083      	str	r3, [r0, #8]
 800e37c:	8181      	strh	r1, [r0, #12]
 800e37e:	6643      	str	r3, [r0, #100]	@ 0x64
 800e380:	81c2      	strh	r2, [r0, #14]
 800e382:	6183      	str	r3, [r0, #24]
 800e384:	4619      	mov	r1, r3
 800e386:	2208      	movs	r2, #8
 800e388:	305c      	adds	r0, #92	@ 0x5c
 800e38a:	f000 f935 	bl	800e5f8 <memset>
 800e38e:	4b0d      	ldr	r3, [pc, #52]	@ (800e3c4 <std+0x58>)
 800e390:	6263      	str	r3, [r4, #36]	@ 0x24
 800e392:	4b0d      	ldr	r3, [pc, #52]	@ (800e3c8 <std+0x5c>)
 800e394:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e396:	4b0d      	ldr	r3, [pc, #52]	@ (800e3cc <std+0x60>)
 800e398:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e39a:	4b0d      	ldr	r3, [pc, #52]	@ (800e3d0 <std+0x64>)
 800e39c:	6323      	str	r3, [r4, #48]	@ 0x30
 800e39e:	4b0d      	ldr	r3, [pc, #52]	@ (800e3d4 <std+0x68>)
 800e3a0:	6224      	str	r4, [r4, #32]
 800e3a2:	429c      	cmp	r4, r3
 800e3a4:	d006      	beq.n	800e3b4 <std+0x48>
 800e3a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e3aa:	4294      	cmp	r4, r2
 800e3ac:	d002      	beq.n	800e3b4 <std+0x48>
 800e3ae:	33d0      	adds	r3, #208	@ 0xd0
 800e3b0:	429c      	cmp	r4, r3
 800e3b2:	d105      	bne.n	800e3c0 <std+0x54>
 800e3b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3bc:	f000 b9aa 	b.w	800e714 <__retarget_lock_init_recursive>
 800e3c0:	bd10      	pop	{r4, pc}
 800e3c2:	bf00      	nop
 800e3c4:	0800e531 	.word	0x0800e531
 800e3c8:	0800e553 	.word	0x0800e553
 800e3cc:	0800e58b 	.word	0x0800e58b
 800e3d0:	0800e5af 	.word	0x0800e5af
 800e3d4:	200008f8 	.word	0x200008f8

0800e3d8 <stdio_exit_handler>:
 800e3d8:	4a02      	ldr	r2, [pc, #8]	@ (800e3e4 <stdio_exit_handler+0xc>)
 800e3da:	4903      	ldr	r1, [pc, #12]	@ (800e3e8 <stdio_exit_handler+0x10>)
 800e3dc:	4803      	ldr	r0, [pc, #12]	@ (800e3ec <stdio_exit_handler+0x14>)
 800e3de:	f000 b869 	b.w	800e4b4 <_fwalk_sglue>
 800e3e2:	bf00      	nop
 800e3e4:	20000090 	.word	0x20000090
 800e3e8:	08010ab5 	.word	0x08010ab5
 800e3ec:	2000020c 	.word	0x2000020c

0800e3f0 <cleanup_stdio>:
 800e3f0:	6841      	ldr	r1, [r0, #4]
 800e3f2:	4b0c      	ldr	r3, [pc, #48]	@ (800e424 <cleanup_stdio+0x34>)
 800e3f4:	4299      	cmp	r1, r3
 800e3f6:	b510      	push	{r4, lr}
 800e3f8:	4604      	mov	r4, r0
 800e3fa:	d001      	beq.n	800e400 <cleanup_stdio+0x10>
 800e3fc:	f002 fb5a 	bl	8010ab4 <_fflush_r>
 800e400:	68a1      	ldr	r1, [r4, #8]
 800e402:	4b09      	ldr	r3, [pc, #36]	@ (800e428 <cleanup_stdio+0x38>)
 800e404:	4299      	cmp	r1, r3
 800e406:	d002      	beq.n	800e40e <cleanup_stdio+0x1e>
 800e408:	4620      	mov	r0, r4
 800e40a:	f002 fb53 	bl	8010ab4 <_fflush_r>
 800e40e:	68e1      	ldr	r1, [r4, #12]
 800e410:	4b06      	ldr	r3, [pc, #24]	@ (800e42c <cleanup_stdio+0x3c>)
 800e412:	4299      	cmp	r1, r3
 800e414:	d004      	beq.n	800e420 <cleanup_stdio+0x30>
 800e416:	4620      	mov	r0, r4
 800e418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e41c:	f002 bb4a 	b.w	8010ab4 <_fflush_r>
 800e420:	bd10      	pop	{r4, pc}
 800e422:	bf00      	nop
 800e424:	200008f8 	.word	0x200008f8
 800e428:	20000960 	.word	0x20000960
 800e42c:	200009c8 	.word	0x200009c8

0800e430 <global_stdio_init.part.0>:
 800e430:	b510      	push	{r4, lr}
 800e432:	4b0b      	ldr	r3, [pc, #44]	@ (800e460 <global_stdio_init.part.0+0x30>)
 800e434:	4c0b      	ldr	r4, [pc, #44]	@ (800e464 <global_stdio_init.part.0+0x34>)
 800e436:	4a0c      	ldr	r2, [pc, #48]	@ (800e468 <global_stdio_init.part.0+0x38>)
 800e438:	601a      	str	r2, [r3, #0]
 800e43a:	4620      	mov	r0, r4
 800e43c:	2200      	movs	r2, #0
 800e43e:	2104      	movs	r1, #4
 800e440:	f7ff ff94 	bl	800e36c <std>
 800e444:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e448:	2201      	movs	r2, #1
 800e44a:	2109      	movs	r1, #9
 800e44c:	f7ff ff8e 	bl	800e36c <std>
 800e450:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e454:	2202      	movs	r2, #2
 800e456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e45a:	2112      	movs	r1, #18
 800e45c:	f7ff bf86 	b.w	800e36c <std>
 800e460:	20000a30 	.word	0x20000a30
 800e464:	200008f8 	.word	0x200008f8
 800e468:	0800e3d9 	.word	0x0800e3d9

0800e46c <__sfp_lock_acquire>:
 800e46c:	4801      	ldr	r0, [pc, #4]	@ (800e474 <__sfp_lock_acquire+0x8>)
 800e46e:	f000 b952 	b.w	800e716 <__retarget_lock_acquire_recursive>
 800e472:	bf00      	nop
 800e474:	20000a39 	.word	0x20000a39

0800e478 <__sfp_lock_release>:
 800e478:	4801      	ldr	r0, [pc, #4]	@ (800e480 <__sfp_lock_release+0x8>)
 800e47a:	f000 b94d 	b.w	800e718 <__retarget_lock_release_recursive>
 800e47e:	bf00      	nop
 800e480:	20000a39 	.word	0x20000a39

0800e484 <__sinit>:
 800e484:	b510      	push	{r4, lr}
 800e486:	4604      	mov	r4, r0
 800e488:	f7ff fff0 	bl	800e46c <__sfp_lock_acquire>
 800e48c:	6a23      	ldr	r3, [r4, #32]
 800e48e:	b11b      	cbz	r3, 800e498 <__sinit+0x14>
 800e490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e494:	f7ff bff0 	b.w	800e478 <__sfp_lock_release>
 800e498:	4b04      	ldr	r3, [pc, #16]	@ (800e4ac <__sinit+0x28>)
 800e49a:	6223      	str	r3, [r4, #32]
 800e49c:	4b04      	ldr	r3, [pc, #16]	@ (800e4b0 <__sinit+0x2c>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d1f5      	bne.n	800e490 <__sinit+0xc>
 800e4a4:	f7ff ffc4 	bl	800e430 <global_stdio_init.part.0>
 800e4a8:	e7f2      	b.n	800e490 <__sinit+0xc>
 800e4aa:	bf00      	nop
 800e4ac:	0800e3f1 	.word	0x0800e3f1
 800e4b0:	20000a30 	.word	0x20000a30

0800e4b4 <_fwalk_sglue>:
 800e4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4b8:	4607      	mov	r7, r0
 800e4ba:	4688      	mov	r8, r1
 800e4bc:	4614      	mov	r4, r2
 800e4be:	2600      	movs	r6, #0
 800e4c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e4c4:	f1b9 0901 	subs.w	r9, r9, #1
 800e4c8:	d505      	bpl.n	800e4d6 <_fwalk_sglue+0x22>
 800e4ca:	6824      	ldr	r4, [r4, #0]
 800e4cc:	2c00      	cmp	r4, #0
 800e4ce:	d1f7      	bne.n	800e4c0 <_fwalk_sglue+0xc>
 800e4d0:	4630      	mov	r0, r6
 800e4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4d6:	89ab      	ldrh	r3, [r5, #12]
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d907      	bls.n	800e4ec <_fwalk_sglue+0x38>
 800e4dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e4e0:	3301      	adds	r3, #1
 800e4e2:	d003      	beq.n	800e4ec <_fwalk_sglue+0x38>
 800e4e4:	4629      	mov	r1, r5
 800e4e6:	4638      	mov	r0, r7
 800e4e8:	47c0      	blx	r8
 800e4ea:	4306      	orrs	r6, r0
 800e4ec:	3568      	adds	r5, #104	@ 0x68
 800e4ee:	e7e9      	b.n	800e4c4 <_fwalk_sglue+0x10>

0800e4f0 <siprintf>:
 800e4f0:	b40e      	push	{r1, r2, r3}
 800e4f2:	b500      	push	{lr}
 800e4f4:	b09c      	sub	sp, #112	@ 0x70
 800e4f6:	ab1d      	add	r3, sp, #116	@ 0x74
 800e4f8:	9002      	str	r0, [sp, #8]
 800e4fa:	9006      	str	r0, [sp, #24]
 800e4fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e500:	4809      	ldr	r0, [pc, #36]	@ (800e528 <siprintf+0x38>)
 800e502:	9107      	str	r1, [sp, #28]
 800e504:	9104      	str	r1, [sp, #16]
 800e506:	4909      	ldr	r1, [pc, #36]	@ (800e52c <siprintf+0x3c>)
 800e508:	f853 2b04 	ldr.w	r2, [r3], #4
 800e50c:	9105      	str	r1, [sp, #20]
 800e50e:	6800      	ldr	r0, [r0, #0]
 800e510:	9301      	str	r3, [sp, #4]
 800e512:	a902      	add	r1, sp, #8
 800e514:	f002 f94e 	bl	80107b4 <_svfiprintf_r>
 800e518:	9b02      	ldr	r3, [sp, #8]
 800e51a:	2200      	movs	r2, #0
 800e51c:	701a      	strb	r2, [r3, #0]
 800e51e:	b01c      	add	sp, #112	@ 0x70
 800e520:	f85d eb04 	ldr.w	lr, [sp], #4
 800e524:	b003      	add	sp, #12
 800e526:	4770      	bx	lr
 800e528:	20000208 	.word	0x20000208
 800e52c:	ffff0208 	.word	0xffff0208

0800e530 <__sread>:
 800e530:	b510      	push	{r4, lr}
 800e532:	460c      	mov	r4, r1
 800e534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e538:	f000 f89e 	bl	800e678 <_read_r>
 800e53c:	2800      	cmp	r0, #0
 800e53e:	bfab      	itete	ge
 800e540:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e542:	89a3      	ldrhlt	r3, [r4, #12]
 800e544:	181b      	addge	r3, r3, r0
 800e546:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e54a:	bfac      	ite	ge
 800e54c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e54e:	81a3      	strhlt	r3, [r4, #12]
 800e550:	bd10      	pop	{r4, pc}

0800e552 <__swrite>:
 800e552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e556:	461f      	mov	r7, r3
 800e558:	898b      	ldrh	r3, [r1, #12]
 800e55a:	05db      	lsls	r3, r3, #23
 800e55c:	4605      	mov	r5, r0
 800e55e:	460c      	mov	r4, r1
 800e560:	4616      	mov	r6, r2
 800e562:	d505      	bpl.n	800e570 <__swrite+0x1e>
 800e564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e568:	2302      	movs	r3, #2
 800e56a:	2200      	movs	r2, #0
 800e56c:	f000 f872 	bl	800e654 <_lseek_r>
 800e570:	89a3      	ldrh	r3, [r4, #12]
 800e572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e576:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e57a:	81a3      	strh	r3, [r4, #12]
 800e57c:	4632      	mov	r2, r6
 800e57e:	463b      	mov	r3, r7
 800e580:	4628      	mov	r0, r5
 800e582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e586:	f000 b889 	b.w	800e69c <_write_r>

0800e58a <__sseek>:
 800e58a:	b510      	push	{r4, lr}
 800e58c:	460c      	mov	r4, r1
 800e58e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e592:	f000 f85f 	bl	800e654 <_lseek_r>
 800e596:	1c43      	adds	r3, r0, #1
 800e598:	89a3      	ldrh	r3, [r4, #12]
 800e59a:	bf15      	itete	ne
 800e59c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e59e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e5a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e5a6:	81a3      	strheq	r3, [r4, #12]
 800e5a8:	bf18      	it	ne
 800e5aa:	81a3      	strhne	r3, [r4, #12]
 800e5ac:	bd10      	pop	{r4, pc}

0800e5ae <__sclose>:
 800e5ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5b2:	f000 b83f 	b.w	800e634 <_close_r>
	...

0800e5b8 <_vsiprintf_r>:
 800e5b8:	b500      	push	{lr}
 800e5ba:	b09b      	sub	sp, #108	@ 0x6c
 800e5bc:	9100      	str	r1, [sp, #0]
 800e5be:	9104      	str	r1, [sp, #16]
 800e5c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e5c4:	9105      	str	r1, [sp, #20]
 800e5c6:	9102      	str	r1, [sp, #8]
 800e5c8:	4905      	ldr	r1, [pc, #20]	@ (800e5e0 <_vsiprintf_r+0x28>)
 800e5ca:	9103      	str	r1, [sp, #12]
 800e5cc:	4669      	mov	r1, sp
 800e5ce:	f002 f8f1 	bl	80107b4 <_svfiprintf_r>
 800e5d2:	9b00      	ldr	r3, [sp, #0]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	701a      	strb	r2, [r3, #0]
 800e5d8:	b01b      	add	sp, #108	@ 0x6c
 800e5da:	f85d fb04 	ldr.w	pc, [sp], #4
 800e5de:	bf00      	nop
 800e5e0:	ffff0208 	.word	0xffff0208

0800e5e4 <vsiprintf>:
 800e5e4:	4613      	mov	r3, r2
 800e5e6:	460a      	mov	r2, r1
 800e5e8:	4601      	mov	r1, r0
 800e5ea:	4802      	ldr	r0, [pc, #8]	@ (800e5f4 <vsiprintf+0x10>)
 800e5ec:	6800      	ldr	r0, [r0, #0]
 800e5ee:	f7ff bfe3 	b.w	800e5b8 <_vsiprintf_r>
 800e5f2:	bf00      	nop
 800e5f4:	20000208 	.word	0x20000208

0800e5f8 <memset>:
 800e5f8:	4402      	add	r2, r0
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	d100      	bne.n	800e602 <memset+0xa>
 800e600:	4770      	bx	lr
 800e602:	f803 1b01 	strb.w	r1, [r3], #1
 800e606:	e7f9      	b.n	800e5fc <memset+0x4>

0800e608 <strncmp>:
 800e608:	b510      	push	{r4, lr}
 800e60a:	b16a      	cbz	r2, 800e628 <strncmp+0x20>
 800e60c:	3901      	subs	r1, #1
 800e60e:	1884      	adds	r4, r0, r2
 800e610:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e614:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e618:	429a      	cmp	r2, r3
 800e61a:	d103      	bne.n	800e624 <strncmp+0x1c>
 800e61c:	42a0      	cmp	r0, r4
 800e61e:	d001      	beq.n	800e624 <strncmp+0x1c>
 800e620:	2a00      	cmp	r2, #0
 800e622:	d1f5      	bne.n	800e610 <strncmp+0x8>
 800e624:	1ad0      	subs	r0, r2, r3
 800e626:	bd10      	pop	{r4, pc}
 800e628:	4610      	mov	r0, r2
 800e62a:	e7fc      	b.n	800e626 <strncmp+0x1e>

0800e62c <_localeconv_r>:
 800e62c:	4800      	ldr	r0, [pc, #0]	@ (800e630 <_localeconv_r+0x4>)
 800e62e:	4770      	bx	lr
 800e630:	2000018c 	.word	0x2000018c

0800e634 <_close_r>:
 800e634:	b538      	push	{r3, r4, r5, lr}
 800e636:	4d06      	ldr	r5, [pc, #24]	@ (800e650 <_close_r+0x1c>)
 800e638:	2300      	movs	r3, #0
 800e63a:	4604      	mov	r4, r0
 800e63c:	4608      	mov	r0, r1
 800e63e:	602b      	str	r3, [r5, #0]
 800e640:	f7f3 fb54 	bl	8001cec <_close>
 800e644:	1c43      	adds	r3, r0, #1
 800e646:	d102      	bne.n	800e64e <_close_r+0x1a>
 800e648:	682b      	ldr	r3, [r5, #0]
 800e64a:	b103      	cbz	r3, 800e64e <_close_r+0x1a>
 800e64c:	6023      	str	r3, [r4, #0]
 800e64e:	bd38      	pop	{r3, r4, r5, pc}
 800e650:	20000a34 	.word	0x20000a34

0800e654 <_lseek_r>:
 800e654:	b538      	push	{r3, r4, r5, lr}
 800e656:	4d07      	ldr	r5, [pc, #28]	@ (800e674 <_lseek_r+0x20>)
 800e658:	4604      	mov	r4, r0
 800e65a:	4608      	mov	r0, r1
 800e65c:	4611      	mov	r1, r2
 800e65e:	2200      	movs	r2, #0
 800e660:	602a      	str	r2, [r5, #0]
 800e662:	461a      	mov	r2, r3
 800e664:	f7f3 fb69 	bl	8001d3a <_lseek>
 800e668:	1c43      	adds	r3, r0, #1
 800e66a:	d102      	bne.n	800e672 <_lseek_r+0x1e>
 800e66c:	682b      	ldr	r3, [r5, #0]
 800e66e:	b103      	cbz	r3, 800e672 <_lseek_r+0x1e>
 800e670:	6023      	str	r3, [r4, #0]
 800e672:	bd38      	pop	{r3, r4, r5, pc}
 800e674:	20000a34 	.word	0x20000a34

0800e678 <_read_r>:
 800e678:	b538      	push	{r3, r4, r5, lr}
 800e67a:	4d07      	ldr	r5, [pc, #28]	@ (800e698 <_read_r+0x20>)
 800e67c:	4604      	mov	r4, r0
 800e67e:	4608      	mov	r0, r1
 800e680:	4611      	mov	r1, r2
 800e682:	2200      	movs	r2, #0
 800e684:	602a      	str	r2, [r5, #0]
 800e686:	461a      	mov	r2, r3
 800e688:	f7f3 faf7 	bl	8001c7a <_read>
 800e68c:	1c43      	adds	r3, r0, #1
 800e68e:	d102      	bne.n	800e696 <_read_r+0x1e>
 800e690:	682b      	ldr	r3, [r5, #0]
 800e692:	b103      	cbz	r3, 800e696 <_read_r+0x1e>
 800e694:	6023      	str	r3, [r4, #0]
 800e696:	bd38      	pop	{r3, r4, r5, pc}
 800e698:	20000a34 	.word	0x20000a34

0800e69c <_write_r>:
 800e69c:	b538      	push	{r3, r4, r5, lr}
 800e69e:	4d07      	ldr	r5, [pc, #28]	@ (800e6bc <_write_r+0x20>)
 800e6a0:	4604      	mov	r4, r0
 800e6a2:	4608      	mov	r0, r1
 800e6a4:	4611      	mov	r1, r2
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	602a      	str	r2, [r5, #0]
 800e6aa:	461a      	mov	r2, r3
 800e6ac:	f7f3 fb02 	bl	8001cb4 <_write>
 800e6b0:	1c43      	adds	r3, r0, #1
 800e6b2:	d102      	bne.n	800e6ba <_write_r+0x1e>
 800e6b4:	682b      	ldr	r3, [r5, #0]
 800e6b6:	b103      	cbz	r3, 800e6ba <_write_r+0x1e>
 800e6b8:	6023      	str	r3, [r4, #0]
 800e6ba:	bd38      	pop	{r3, r4, r5, pc}
 800e6bc:	20000a34 	.word	0x20000a34

0800e6c0 <__errno>:
 800e6c0:	4b01      	ldr	r3, [pc, #4]	@ (800e6c8 <__errno+0x8>)
 800e6c2:	6818      	ldr	r0, [r3, #0]
 800e6c4:	4770      	bx	lr
 800e6c6:	bf00      	nop
 800e6c8:	20000208 	.word	0x20000208

0800e6cc <__libc_init_array>:
 800e6cc:	b570      	push	{r4, r5, r6, lr}
 800e6ce:	4d0d      	ldr	r5, [pc, #52]	@ (800e704 <__libc_init_array+0x38>)
 800e6d0:	4c0d      	ldr	r4, [pc, #52]	@ (800e708 <__libc_init_array+0x3c>)
 800e6d2:	1b64      	subs	r4, r4, r5
 800e6d4:	10a4      	asrs	r4, r4, #2
 800e6d6:	2600      	movs	r6, #0
 800e6d8:	42a6      	cmp	r6, r4
 800e6da:	d109      	bne.n	800e6f0 <__libc_init_array+0x24>
 800e6dc:	4d0b      	ldr	r5, [pc, #44]	@ (800e70c <__libc_init_array+0x40>)
 800e6de:	4c0c      	ldr	r4, [pc, #48]	@ (800e710 <__libc_init_array+0x44>)
 800e6e0:	f002 fe90 	bl	8011404 <_init>
 800e6e4:	1b64      	subs	r4, r4, r5
 800e6e6:	10a4      	asrs	r4, r4, #2
 800e6e8:	2600      	movs	r6, #0
 800e6ea:	42a6      	cmp	r6, r4
 800e6ec:	d105      	bne.n	800e6fa <__libc_init_array+0x2e>
 800e6ee:	bd70      	pop	{r4, r5, r6, pc}
 800e6f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6f4:	4798      	blx	r3
 800e6f6:	3601      	adds	r6, #1
 800e6f8:	e7ee      	b.n	800e6d8 <__libc_init_array+0xc>
 800e6fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6fe:	4798      	blx	r3
 800e700:	3601      	adds	r6, #1
 800e702:	e7f2      	b.n	800e6ea <__libc_init_array+0x1e>
 800e704:	080119a8 	.word	0x080119a8
 800e708:	080119a8 	.word	0x080119a8
 800e70c:	080119a8 	.word	0x080119a8
 800e710:	080119ac 	.word	0x080119ac

0800e714 <__retarget_lock_init_recursive>:
 800e714:	4770      	bx	lr

0800e716 <__retarget_lock_acquire_recursive>:
 800e716:	4770      	bx	lr

0800e718 <__retarget_lock_release_recursive>:
 800e718:	4770      	bx	lr

0800e71a <memcpy>:
 800e71a:	440a      	add	r2, r1
 800e71c:	4291      	cmp	r1, r2
 800e71e:	f100 33ff 	add.w	r3, r0, #4294967295
 800e722:	d100      	bne.n	800e726 <memcpy+0xc>
 800e724:	4770      	bx	lr
 800e726:	b510      	push	{r4, lr}
 800e728:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e72c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e730:	4291      	cmp	r1, r2
 800e732:	d1f9      	bne.n	800e728 <memcpy+0xe>
 800e734:	bd10      	pop	{r4, pc}
	...

0800e738 <nan>:
 800e738:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e740 <nan+0x8>
 800e73c:	4770      	bx	lr
 800e73e:	bf00      	nop
 800e740:	00000000 	.word	0x00000000
 800e744:	7ff80000 	.word	0x7ff80000

0800e748 <nanf>:
 800e748:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e750 <nanf+0x8>
 800e74c:	4770      	bx	lr
 800e74e:	bf00      	nop
 800e750:	7fc00000 	.word	0x7fc00000

0800e754 <quorem>:
 800e754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e758:	6903      	ldr	r3, [r0, #16]
 800e75a:	690c      	ldr	r4, [r1, #16]
 800e75c:	42a3      	cmp	r3, r4
 800e75e:	4607      	mov	r7, r0
 800e760:	db7e      	blt.n	800e860 <quorem+0x10c>
 800e762:	3c01      	subs	r4, #1
 800e764:	f101 0814 	add.w	r8, r1, #20
 800e768:	00a3      	lsls	r3, r4, #2
 800e76a:	f100 0514 	add.w	r5, r0, #20
 800e76e:	9300      	str	r3, [sp, #0]
 800e770:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e774:	9301      	str	r3, [sp, #4]
 800e776:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e77a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e77e:	3301      	adds	r3, #1
 800e780:	429a      	cmp	r2, r3
 800e782:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e786:	fbb2 f6f3 	udiv	r6, r2, r3
 800e78a:	d32e      	bcc.n	800e7ea <quorem+0x96>
 800e78c:	f04f 0a00 	mov.w	sl, #0
 800e790:	46c4      	mov	ip, r8
 800e792:	46ae      	mov	lr, r5
 800e794:	46d3      	mov	fp, sl
 800e796:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e79a:	b298      	uxth	r0, r3
 800e79c:	fb06 a000 	mla	r0, r6, r0, sl
 800e7a0:	0c02      	lsrs	r2, r0, #16
 800e7a2:	0c1b      	lsrs	r3, r3, #16
 800e7a4:	fb06 2303 	mla	r3, r6, r3, r2
 800e7a8:	f8de 2000 	ldr.w	r2, [lr]
 800e7ac:	b280      	uxth	r0, r0
 800e7ae:	b292      	uxth	r2, r2
 800e7b0:	1a12      	subs	r2, r2, r0
 800e7b2:	445a      	add	r2, fp
 800e7b4:	f8de 0000 	ldr.w	r0, [lr]
 800e7b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e7bc:	b29b      	uxth	r3, r3
 800e7be:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e7c2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e7c6:	b292      	uxth	r2, r2
 800e7c8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e7cc:	45e1      	cmp	r9, ip
 800e7ce:	f84e 2b04 	str.w	r2, [lr], #4
 800e7d2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e7d6:	d2de      	bcs.n	800e796 <quorem+0x42>
 800e7d8:	9b00      	ldr	r3, [sp, #0]
 800e7da:	58eb      	ldr	r3, [r5, r3]
 800e7dc:	b92b      	cbnz	r3, 800e7ea <quorem+0x96>
 800e7de:	9b01      	ldr	r3, [sp, #4]
 800e7e0:	3b04      	subs	r3, #4
 800e7e2:	429d      	cmp	r5, r3
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	d32f      	bcc.n	800e848 <quorem+0xf4>
 800e7e8:	613c      	str	r4, [r7, #16]
 800e7ea:	4638      	mov	r0, r7
 800e7ec:	f001 fd10 	bl	8010210 <__mcmp>
 800e7f0:	2800      	cmp	r0, #0
 800e7f2:	db25      	blt.n	800e840 <quorem+0xec>
 800e7f4:	4629      	mov	r1, r5
 800e7f6:	2000      	movs	r0, #0
 800e7f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800e7fc:	f8d1 c000 	ldr.w	ip, [r1]
 800e800:	fa1f fe82 	uxth.w	lr, r2
 800e804:	fa1f f38c 	uxth.w	r3, ip
 800e808:	eba3 030e 	sub.w	r3, r3, lr
 800e80c:	4403      	add	r3, r0
 800e80e:	0c12      	lsrs	r2, r2, #16
 800e810:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e814:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e818:	b29b      	uxth	r3, r3
 800e81a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e81e:	45c1      	cmp	r9, r8
 800e820:	f841 3b04 	str.w	r3, [r1], #4
 800e824:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e828:	d2e6      	bcs.n	800e7f8 <quorem+0xa4>
 800e82a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e82e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e832:	b922      	cbnz	r2, 800e83e <quorem+0xea>
 800e834:	3b04      	subs	r3, #4
 800e836:	429d      	cmp	r5, r3
 800e838:	461a      	mov	r2, r3
 800e83a:	d30b      	bcc.n	800e854 <quorem+0x100>
 800e83c:	613c      	str	r4, [r7, #16]
 800e83e:	3601      	adds	r6, #1
 800e840:	4630      	mov	r0, r6
 800e842:	b003      	add	sp, #12
 800e844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e848:	6812      	ldr	r2, [r2, #0]
 800e84a:	3b04      	subs	r3, #4
 800e84c:	2a00      	cmp	r2, #0
 800e84e:	d1cb      	bne.n	800e7e8 <quorem+0x94>
 800e850:	3c01      	subs	r4, #1
 800e852:	e7c6      	b.n	800e7e2 <quorem+0x8e>
 800e854:	6812      	ldr	r2, [r2, #0]
 800e856:	3b04      	subs	r3, #4
 800e858:	2a00      	cmp	r2, #0
 800e85a:	d1ef      	bne.n	800e83c <quorem+0xe8>
 800e85c:	3c01      	subs	r4, #1
 800e85e:	e7ea      	b.n	800e836 <quorem+0xe2>
 800e860:	2000      	movs	r0, #0
 800e862:	e7ee      	b.n	800e842 <quorem+0xee>
 800e864:	0000      	movs	r0, r0
	...

0800e868 <_dtoa_r>:
 800e868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e86c:	69c7      	ldr	r7, [r0, #28]
 800e86e:	b099      	sub	sp, #100	@ 0x64
 800e870:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e874:	ec55 4b10 	vmov	r4, r5, d0
 800e878:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e87a:	9109      	str	r1, [sp, #36]	@ 0x24
 800e87c:	4683      	mov	fp, r0
 800e87e:	920e      	str	r2, [sp, #56]	@ 0x38
 800e880:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e882:	b97f      	cbnz	r7, 800e8a4 <_dtoa_r+0x3c>
 800e884:	2010      	movs	r0, #16
 800e886:	f001 f937 	bl	800faf8 <malloc>
 800e88a:	4602      	mov	r2, r0
 800e88c:	f8cb 001c 	str.w	r0, [fp, #28]
 800e890:	b920      	cbnz	r0, 800e89c <_dtoa_r+0x34>
 800e892:	4ba7      	ldr	r3, [pc, #668]	@ (800eb30 <_dtoa_r+0x2c8>)
 800e894:	21ef      	movs	r1, #239	@ 0xef
 800e896:	48a7      	ldr	r0, [pc, #668]	@ (800eb34 <_dtoa_r+0x2cc>)
 800e898:	f002 f95e 	bl	8010b58 <__assert_func>
 800e89c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e8a0:	6007      	str	r7, [r0, #0]
 800e8a2:	60c7      	str	r7, [r0, #12]
 800e8a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e8a8:	6819      	ldr	r1, [r3, #0]
 800e8aa:	b159      	cbz	r1, 800e8c4 <_dtoa_r+0x5c>
 800e8ac:	685a      	ldr	r2, [r3, #4]
 800e8ae:	604a      	str	r2, [r1, #4]
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	4093      	lsls	r3, r2
 800e8b4:	608b      	str	r3, [r1, #8]
 800e8b6:	4658      	mov	r0, fp
 800e8b8:	f001 fa26 	bl	800fd08 <_Bfree>
 800e8bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	601a      	str	r2, [r3, #0]
 800e8c4:	1e2b      	subs	r3, r5, #0
 800e8c6:	bfb9      	ittee	lt
 800e8c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e8cc:	9303      	strlt	r3, [sp, #12]
 800e8ce:	2300      	movge	r3, #0
 800e8d0:	6033      	strge	r3, [r6, #0]
 800e8d2:	9f03      	ldr	r7, [sp, #12]
 800e8d4:	4b98      	ldr	r3, [pc, #608]	@ (800eb38 <_dtoa_r+0x2d0>)
 800e8d6:	bfbc      	itt	lt
 800e8d8:	2201      	movlt	r2, #1
 800e8da:	6032      	strlt	r2, [r6, #0]
 800e8dc:	43bb      	bics	r3, r7
 800e8de:	d112      	bne.n	800e906 <_dtoa_r+0x9e>
 800e8e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e8e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e8e6:	6013      	str	r3, [r2, #0]
 800e8e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e8ec:	4323      	orrs	r3, r4
 800e8ee:	f000 854d 	beq.w	800f38c <_dtoa_r+0xb24>
 800e8f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e8f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800eb4c <_dtoa_r+0x2e4>
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	f000 854f 	beq.w	800f39c <_dtoa_r+0xb34>
 800e8fe:	f10a 0303 	add.w	r3, sl, #3
 800e902:	f000 bd49 	b.w	800f398 <_dtoa_r+0xb30>
 800e906:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e90a:	2200      	movs	r2, #0
 800e90c:	ec51 0b17 	vmov	r0, r1, d7
 800e910:	2300      	movs	r3, #0
 800e912:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e916:	f7f2 f8ff 	bl	8000b18 <__aeabi_dcmpeq>
 800e91a:	4680      	mov	r8, r0
 800e91c:	b158      	cbz	r0, 800e936 <_dtoa_r+0xce>
 800e91e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e920:	2301      	movs	r3, #1
 800e922:	6013      	str	r3, [r2, #0]
 800e924:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e926:	b113      	cbz	r3, 800e92e <_dtoa_r+0xc6>
 800e928:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e92a:	4b84      	ldr	r3, [pc, #528]	@ (800eb3c <_dtoa_r+0x2d4>)
 800e92c:	6013      	str	r3, [r2, #0]
 800e92e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800eb50 <_dtoa_r+0x2e8>
 800e932:	f000 bd33 	b.w	800f39c <_dtoa_r+0xb34>
 800e936:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e93a:	aa16      	add	r2, sp, #88	@ 0x58
 800e93c:	a917      	add	r1, sp, #92	@ 0x5c
 800e93e:	4658      	mov	r0, fp
 800e940:	f001 fd86 	bl	8010450 <__d2b>
 800e944:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e948:	4681      	mov	r9, r0
 800e94a:	2e00      	cmp	r6, #0
 800e94c:	d077      	beq.n	800ea3e <_dtoa_r+0x1d6>
 800e94e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e950:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e958:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e95c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e960:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e964:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e968:	4619      	mov	r1, r3
 800e96a:	2200      	movs	r2, #0
 800e96c:	4b74      	ldr	r3, [pc, #464]	@ (800eb40 <_dtoa_r+0x2d8>)
 800e96e:	f7f1 fcb3 	bl	80002d8 <__aeabi_dsub>
 800e972:	a369      	add	r3, pc, #420	@ (adr r3, 800eb18 <_dtoa_r+0x2b0>)
 800e974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e978:	f7f1 fe66 	bl	8000648 <__aeabi_dmul>
 800e97c:	a368      	add	r3, pc, #416	@ (adr r3, 800eb20 <_dtoa_r+0x2b8>)
 800e97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e982:	f7f1 fcab 	bl	80002dc <__adddf3>
 800e986:	4604      	mov	r4, r0
 800e988:	4630      	mov	r0, r6
 800e98a:	460d      	mov	r5, r1
 800e98c:	f7f1 fdf2 	bl	8000574 <__aeabi_i2d>
 800e990:	a365      	add	r3, pc, #404	@ (adr r3, 800eb28 <_dtoa_r+0x2c0>)
 800e992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e996:	f7f1 fe57 	bl	8000648 <__aeabi_dmul>
 800e99a:	4602      	mov	r2, r0
 800e99c:	460b      	mov	r3, r1
 800e99e:	4620      	mov	r0, r4
 800e9a0:	4629      	mov	r1, r5
 800e9a2:	f7f1 fc9b 	bl	80002dc <__adddf3>
 800e9a6:	4604      	mov	r4, r0
 800e9a8:	460d      	mov	r5, r1
 800e9aa:	f7f2 f8fd 	bl	8000ba8 <__aeabi_d2iz>
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	4607      	mov	r7, r0
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	4620      	mov	r0, r4
 800e9b6:	4629      	mov	r1, r5
 800e9b8:	f7f2 f8b8 	bl	8000b2c <__aeabi_dcmplt>
 800e9bc:	b140      	cbz	r0, 800e9d0 <_dtoa_r+0x168>
 800e9be:	4638      	mov	r0, r7
 800e9c0:	f7f1 fdd8 	bl	8000574 <__aeabi_i2d>
 800e9c4:	4622      	mov	r2, r4
 800e9c6:	462b      	mov	r3, r5
 800e9c8:	f7f2 f8a6 	bl	8000b18 <__aeabi_dcmpeq>
 800e9cc:	b900      	cbnz	r0, 800e9d0 <_dtoa_r+0x168>
 800e9ce:	3f01      	subs	r7, #1
 800e9d0:	2f16      	cmp	r7, #22
 800e9d2:	d851      	bhi.n	800ea78 <_dtoa_r+0x210>
 800e9d4:	4b5b      	ldr	r3, [pc, #364]	@ (800eb44 <_dtoa_r+0x2dc>)
 800e9d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e9e2:	f7f2 f8a3 	bl	8000b2c <__aeabi_dcmplt>
 800e9e6:	2800      	cmp	r0, #0
 800e9e8:	d048      	beq.n	800ea7c <_dtoa_r+0x214>
 800e9ea:	3f01      	subs	r7, #1
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	9312      	str	r3, [sp, #72]	@ 0x48
 800e9f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e9f2:	1b9b      	subs	r3, r3, r6
 800e9f4:	1e5a      	subs	r2, r3, #1
 800e9f6:	bf44      	itt	mi
 800e9f8:	f1c3 0801 	rsbmi	r8, r3, #1
 800e9fc:	2300      	movmi	r3, #0
 800e9fe:	9208      	str	r2, [sp, #32]
 800ea00:	bf54      	ite	pl
 800ea02:	f04f 0800 	movpl.w	r8, #0
 800ea06:	9308      	strmi	r3, [sp, #32]
 800ea08:	2f00      	cmp	r7, #0
 800ea0a:	db39      	blt.n	800ea80 <_dtoa_r+0x218>
 800ea0c:	9b08      	ldr	r3, [sp, #32]
 800ea0e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ea10:	443b      	add	r3, r7
 800ea12:	9308      	str	r3, [sp, #32]
 800ea14:	2300      	movs	r3, #0
 800ea16:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea1a:	2b09      	cmp	r3, #9
 800ea1c:	d864      	bhi.n	800eae8 <_dtoa_r+0x280>
 800ea1e:	2b05      	cmp	r3, #5
 800ea20:	bfc4      	itt	gt
 800ea22:	3b04      	subgt	r3, #4
 800ea24:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ea26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea28:	f1a3 0302 	sub.w	r3, r3, #2
 800ea2c:	bfcc      	ite	gt
 800ea2e:	2400      	movgt	r4, #0
 800ea30:	2401      	movle	r4, #1
 800ea32:	2b03      	cmp	r3, #3
 800ea34:	d863      	bhi.n	800eafe <_dtoa_r+0x296>
 800ea36:	e8df f003 	tbb	[pc, r3]
 800ea3a:	372a      	.short	0x372a
 800ea3c:	5535      	.short	0x5535
 800ea3e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ea42:	441e      	add	r6, r3
 800ea44:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ea48:	2b20      	cmp	r3, #32
 800ea4a:	bfc1      	itttt	gt
 800ea4c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ea50:	409f      	lslgt	r7, r3
 800ea52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ea56:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ea5a:	bfd6      	itet	le
 800ea5c:	f1c3 0320 	rsble	r3, r3, #32
 800ea60:	ea47 0003 	orrgt.w	r0, r7, r3
 800ea64:	fa04 f003 	lslle.w	r0, r4, r3
 800ea68:	f7f1 fd74 	bl	8000554 <__aeabi_ui2d>
 800ea6c:	2201      	movs	r2, #1
 800ea6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ea72:	3e01      	subs	r6, #1
 800ea74:	9214      	str	r2, [sp, #80]	@ 0x50
 800ea76:	e777      	b.n	800e968 <_dtoa_r+0x100>
 800ea78:	2301      	movs	r3, #1
 800ea7a:	e7b8      	b.n	800e9ee <_dtoa_r+0x186>
 800ea7c:	9012      	str	r0, [sp, #72]	@ 0x48
 800ea7e:	e7b7      	b.n	800e9f0 <_dtoa_r+0x188>
 800ea80:	427b      	negs	r3, r7
 800ea82:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea84:	2300      	movs	r3, #0
 800ea86:	eba8 0807 	sub.w	r8, r8, r7
 800ea8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ea8c:	e7c4      	b.n	800ea18 <_dtoa_r+0x1b0>
 800ea8e:	2300      	movs	r3, #0
 800ea90:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ea92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	dc35      	bgt.n	800eb04 <_dtoa_r+0x29c>
 800ea98:	2301      	movs	r3, #1
 800ea9a:	9300      	str	r3, [sp, #0]
 800ea9c:	9307      	str	r3, [sp, #28]
 800ea9e:	461a      	mov	r2, r3
 800eaa0:	920e      	str	r2, [sp, #56]	@ 0x38
 800eaa2:	e00b      	b.n	800eabc <_dtoa_r+0x254>
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	e7f3      	b.n	800ea90 <_dtoa_r+0x228>
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eaac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eaae:	18fb      	adds	r3, r7, r3
 800eab0:	9300      	str	r3, [sp, #0]
 800eab2:	3301      	adds	r3, #1
 800eab4:	2b01      	cmp	r3, #1
 800eab6:	9307      	str	r3, [sp, #28]
 800eab8:	bfb8      	it	lt
 800eaba:	2301      	movlt	r3, #1
 800eabc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800eac0:	2100      	movs	r1, #0
 800eac2:	2204      	movs	r2, #4
 800eac4:	f102 0514 	add.w	r5, r2, #20
 800eac8:	429d      	cmp	r5, r3
 800eaca:	d91f      	bls.n	800eb0c <_dtoa_r+0x2a4>
 800eacc:	6041      	str	r1, [r0, #4]
 800eace:	4658      	mov	r0, fp
 800ead0:	f001 f8da 	bl	800fc88 <_Balloc>
 800ead4:	4682      	mov	sl, r0
 800ead6:	2800      	cmp	r0, #0
 800ead8:	d13c      	bne.n	800eb54 <_dtoa_r+0x2ec>
 800eada:	4b1b      	ldr	r3, [pc, #108]	@ (800eb48 <_dtoa_r+0x2e0>)
 800eadc:	4602      	mov	r2, r0
 800eade:	f240 11af 	movw	r1, #431	@ 0x1af
 800eae2:	e6d8      	b.n	800e896 <_dtoa_r+0x2e>
 800eae4:	2301      	movs	r3, #1
 800eae6:	e7e0      	b.n	800eaaa <_dtoa_r+0x242>
 800eae8:	2401      	movs	r4, #1
 800eaea:	2300      	movs	r3, #0
 800eaec:	9309      	str	r3, [sp, #36]	@ 0x24
 800eaee:	940b      	str	r4, [sp, #44]	@ 0x2c
 800eaf0:	f04f 33ff 	mov.w	r3, #4294967295
 800eaf4:	9300      	str	r3, [sp, #0]
 800eaf6:	9307      	str	r3, [sp, #28]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	2312      	movs	r3, #18
 800eafc:	e7d0      	b.n	800eaa0 <_dtoa_r+0x238>
 800eafe:	2301      	movs	r3, #1
 800eb00:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eb02:	e7f5      	b.n	800eaf0 <_dtoa_r+0x288>
 800eb04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb06:	9300      	str	r3, [sp, #0]
 800eb08:	9307      	str	r3, [sp, #28]
 800eb0a:	e7d7      	b.n	800eabc <_dtoa_r+0x254>
 800eb0c:	3101      	adds	r1, #1
 800eb0e:	0052      	lsls	r2, r2, #1
 800eb10:	e7d8      	b.n	800eac4 <_dtoa_r+0x25c>
 800eb12:	bf00      	nop
 800eb14:	f3af 8000 	nop.w
 800eb18:	636f4361 	.word	0x636f4361
 800eb1c:	3fd287a7 	.word	0x3fd287a7
 800eb20:	8b60c8b3 	.word	0x8b60c8b3
 800eb24:	3fc68a28 	.word	0x3fc68a28
 800eb28:	509f79fb 	.word	0x509f79fb
 800eb2c:	3fd34413 	.word	0x3fd34413
 800eb30:	08011606 	.word	0x08011606
 800eb34:	0801161d 	.word	0x0801161d
 800eb38:	7ff00000 	.word	0x7ff00000
 800eb3c:	080115c9 	.word	0x080115c9
 800eb40:	3ff80000 	.word	0x3ff80000
 800eb44:	08011778 	.word	0x08011778
 800eb48:	08011675 	.word	0x08011675
 800eb4c:	08011602 	.word	0x08011602
 800eb50:	080115c8 	.word	0x080115c8
 800eb54:	f8db 301c 	ldr.w	r3, [fp, #28]
 800eb58:	6018      	str	r0, [r3, #0]
 800eb5a:	9b07      	ldr	r3, [sp, #28]
 800eb5c:	2b0e      	cmp	r3, #14
 800eb5e:	f200 80a4 	bhi.w	800ecaa <_dtoa_r+0x442>
 800eb62:	2c00      	cmp	r4, #0
 800eb64:	f000 80a1 	beq.w	800ecaa <_dtoa_r+0x442>
 800eb68:	2f00      	cmp	r7, #0
 800eb6a:	dd33      	ble.n	800ebd4 <_dtoa_r+0x36c>
 800eb6c:	4bad      	ldr	r3, [pc, #692]	@ (800ee24 <_dtoa_r+0x5bc>)
 800eb6e:	f007 020f 	and.w	r2, r7, #15
 800eb72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eb76:	ed93 7b00 	vldr	d7, [r3]
 800eb7a:	05f8      	lsls	r0, r7, #23
 800eb7c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800eb80:	ea4f 1427 	mov.w	r4, r7, asr #4
 800eb84:	d516      	bpl.n	800ebb4 <_dtoa_r+0x34c>
 800eb86:	4ba8      	ldr	r3, [pc, #672]	@ (800ee28 <_dtoa_r+0x5c0>)
 800eb88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eb8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800eb90:	f7f1 fe84 	bl	800089c <__aeabi_ddiv>
 800eb94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb98:	f004 040f 	and.w	r4, r4, #15
 800eb9c:	2603      	movs	r6, #3
 800eb9e:	4da2      	ldr	r5, [pc, #648]	@ (800ee28 <_dtoa_r+0x5c0>)
 800eba0:	b954      	cbnz	r4, 800ebb8 <_dtoa_r+0x350>
 800eba2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eba6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebaa:	f7f1 fe77 	bl	800089c <__aeabi_ddiv>
 800ebae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebb2:	e028      	b.n	800ec06 <_dtoa_r+0x39e>
 800ebb4:	2602      	movs	r6, #2
 800ebb6:	e7f2      	b.n	800eb9e <_dtoa_r+0x336>
 800ebb8:	07e1      	lsls	r1, r4, #31
 800ebba:	d508      	bpl.n	800ebce <_dtoa_r+0x366>
 800ebbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ebc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ebc4:	f7f1 fd40 	bl	8000648 <__aeabi_dmul>
 800ebc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ebcc:	3601      	adds	r6, #1
 800ebce:	1064      	asrs	r4, r4, #1
 800ebd0:	3508      	adds	r5, #8
 800ebd2:	e7e5      	b.n	800eba0 <_dtoa_r+0x338>
 800ebd4:	f000 80d2 	beq.w	800ed7c <_dtoa_r+0x514>
 800ebd8:	427c      	negs	r4, r7
 800ebda:	4b92      	ldr	r3, [pc, #584]	@ (800ee24 <_dtoa_r+0x5bc>)
 800ebdc:	4d92      	ldr	r5, [pc, #584]	@ (800ee28 <_dtoa_r+0x5c0>)
 800ebde:	f004 020f 	and.w	r2, r4, #15
 800ebe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ebe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ebee:	f7f1 fd2b 	bl	8000648 <__aeabi_dmul>
 800ebf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebf6:	1124      	asrs	r4, r4, #4
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	2602      	movs	r6, #2
 800ebfc:	2c00      	cmp	r4, #0
 800ebfe:	f040 80b2 	bne.w	800ed66 <_dtoa_r+0x4fe>
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d1d3      	bne.n	800ebae <_dtoa_r+0x346>
 800ec06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ec08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	f000 80b7 	beq.w	800ed80 <_dtoa_r+0x518>
 800ec12:	4b86      	ldr	r3, [pc, #536]	@ (800ee2c <_dtoa_r+0x5c4>)
 800ec14:	2200      	movs	r2, #0
 800ec16:	4620      	mov	r0, r4
 800ec18:	4629      	mov	r1, r5
 800ec1a:	f7f1 ff87 	bl	8000b2c <__aeabi_dcmplt>
 800ec1e:	2800      	cmp	r0, #0
 800ec20:	f000 80ae 	beq.w	800ed80 <_dtoa_r+0x518>
 800ec24:	9b07      	ldr	r3, [sp, #28]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	f000 80aa 	beq.w	800ed80 <_dtoa_r+0x518>
 800ec2c:	9b00      	ldr	r3, [sp, #0]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	dd37      	ble.n	800eca2 <_dtoa_r+0x43a>
 800ec32:	1e7b      	subs	r3, r7, #1
 800ec34:	9304      	str	r3, [sp, #16]
 800ec36:	4620      	mov	r0, r4
 800ec38:	4b7d      	ldr	r3, [pc, #500]	@ (800ee30 <_dtoa_r+0x5c8>)
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	4629      	mov	r1, r5
 800ec3e:	f7f1 fd03 	bl	8000648 <__aeabi_dmul>
 800ec42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec46:	9c00      	ldr	r4, [sp, #0]
 800ec48:	3601      	adds	r6, #1
 800ec4a:	4630      	mov	r0, r6
 800ec4c:	f7f1 fc92 	bl	8000574 <__aeabi_i2d>
 800ec50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec54:	f7f1 fcf8 	bl	8000648 <__aeabi_dmul>
 800ec58:	4b76      	ldr	r3, [pc, #472]	@ (800ee34 <_dtoa_r+0x5cc>)
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	f7f1 fb3e 	bl	80002dc <__adddf3>
 800ec60:	4605      	mov	r5, r0
 800ec62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ec66:	2c00      	cmp	r4, #0
 800ec68:	f040 808d 	bne.w	800ed86 <_dtoa_r+0x51e>
 800ec6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec70:	4b71      	ldr	r3, [pc, #452]	@ (800ee38 <_dtoa_r+0x5d0>)
 800ec72:	2200      	movs	r2, #0
 800ec74:	f7f1 fb30 	bl	80002d8 <__aeabi_dsub>
 800ec78:	4602      	mov	r2, r0
 800ec7a:	460b      	mov	r3, r1
 800ec7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ec80:	462a      	mov	r2, r5
 800ec82:	4633      	mov	r3, r6
 800ec84:	f7f1 ff70 	bl	8000b68 <__aeabi_dcmpgt>
 800ec88:	2800      	cmp	r0, #0
 800ec8a:	f040 828b 	bne.w	800f1a4 <_dtoa_r+0x93c>
 800ec8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec92:	462a      	mov	r2, r5
 800ec94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ec98:	f7f1 ff48 	bl	8000b2c <__aeabi_dcmplt>
 800ec9c:	2800      	cmp	r0, #0
 800ec9e:	f040 8128 	bne.w	800eef2 <_dtoa_r+0x68a>
 800eca2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800eca6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ecaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	f2c0 815a 	blt.w	800ef66 <_dtoa_r+0x6fe>
 800ecb2:	2f0e      	cmp	r7, #14
 800ecb4:	f300 8157 	bgt.w	800ef66 <_dtoa_r+0x6fe>
 800ecb8:	4b5a      	ldr	r3, [pc, #360]	@ (800ee24 <_dtoa_r+0x5bc>)
 800ecba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ecbe:	ed93 7b00 	vldr	d7, [r3]
 800ecc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	ed8d 7b00 	vstr	d7, [sp]
 800ecca:	da03      	bge.n	800ecd4 <_dtoa_r+0x46c>
 800eccc:	9b07      	ldr	r3, [sp, #28]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	f340 8101 	ble.w	800eed6 <_dtoa_r+0x66e>
 800ecd4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ecd8:	4656      	mov	r6, sl
 800ecda:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ecde:	4620      	mov	r0, r4
 800ece0:	4629      	mov	r1, r5
 800ece2:	f7f1 fddb 	bl	800089c <__aeabi_ddiv>
 800ece6:	f7f1 ff5f 	bl	8000ba8 <__aeabi_d2iz>
 800ecea:	4680      	mov	r8, r0
 800ecec:	f7f1 fc42 	bl	8000574 <__aeabi_i2d>
 800ecf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ecf4:	f7f1 fca8 	bl	8000648 <__aeabi_dmul>
 800ecf8:	4602      	mov	r2, r0
 800ecfa:	460b      	mov	r3, r1
 800ecfc:	4620      	mov	r0, r4
 800ecfe:	4629      	mov	r1, r5
 800ed00:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ed04:	f7f1 fae8 	bl	80002d8 <__aeabi_dsub>
 800ed08:	f806 4b01 	strb.w	r4, [r6], #1
 800ed0c:	9d07      	ldr	r5, [sp, #28]
 800ed0e:	eba6 040a 	sub.w	r4, r6, sl
 800ed12:	42a5      	cmp	r5, r4
 800ed14:	4602      	mov	r2, r0
 800ed16:	460b      	mov	r3, r1
 800ed18:	f040 8117 	bne.w	800ef4a <_dtoa_r+0x6e2>
 800ed1c:	f7f1 fade 	bl	80002dc <__adddf3>
 800ed20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed24:	4604      	mov	r4, r0
 800ed26:	460d      	mov	r5, r1
 800ed28:	f7f1 ff1e 	bl	8000b68 <__aeabi_dcmpgt>
 800ed2c:	2800      	cmp	r0, #0
 800ed2e:	f040 80f9 	bne.w	800ef24 <_dtoa_r+0x6bc>
 800ed32:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed36:	4620      	mov	r0, r4
 800ed38:	4629      	mov	r1, r5
 800ed3a:	f7f1 feed 	bl	8000b18 <__aeabi_dcmpeq>
 800ed3e:	b118      	cbz	r0, 800ed48 <_dtoa_r+0x4e0>
 800ed40:	f018 0f01 	tst.w	r8, #1
 800ed44:	f040 80ee 	bne.w	800ef24 <_dtoa_r+0x6bc>
 800ed48:	4649      	mov	r1, r9
 800ed4a:	4658      	mov	r0, fp
 800ed4c:	f000 ffdc 	bl	800fd08 <_Bfree>
 800ed50:	2300      	movs	r3, #0
 800ed52:	7033      	strb	r3, [r6, #0]
 800ed54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ed56:	3701      	adds	r7, #1
 800ed58:	601f      	str	r7, [r3, #0]
 800ed5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	f000 831d 	beq.w	800f39c <_dtoa_r+0xb34>
 800ed62:	601e      	str	r6, [r3, #0]
 800ed64:	e31a      	b.n	800f39c <_dtoa_r+0xb34>
 800ed66:	07e2      	lsls	r2, r4, #31
 800ed68:	d505      	bpl.n	800ed76 <_dtoa_r+0x50e>
 800ed6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ed6e:	f7f1 fc6b 	bl	8000648 <__aeabi_dmul>
 800ed72:	3601      	adds	r6, #1
 800ed74:	2301      	movs	r3, #1
 800ed76:	1064      	asrs	r4, r4, #1
 800ed78:	3508      	adds	r5, #8
 800ed7a:	e73f      	b.n	800ebfc <_dtoa_r+0x394>
 800ed7c:	2602      	movs	r6, #2
 800ed7e:	e742      	b.n	800ec06 <_dtoa_r+0x39e>
 800ed80:	9c07      	ldr	r4, [sp, #28]
 800ed82:	9704      	str	r7, [sp, #16]
 800ed84:	e761      	b.n	800ec4a <_dtoa_r+0x3e2>
 800ed86:	4b27      	ldr	r3, [pc, #156]	@ (800ee24 <_dtoa_r+0x5bc>)
 800ed88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ed8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ed8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ed92:	4454      	add	r4, sl
 800ed94:	2900      	cmp	r1, #0
 800ed96:	d053      	beq.n	800ee40 <_dtoa_r+0x5d8>
 800ed98:	4928      	ldr	r1, [pc, #160]	@ (800ee3c <_dtoa_r+0x5d4>)
 800ed9a:	2000      	movs	r0, #0
 800ed9c:	f7f1 fd7e 	bl	800089c <__aeabi_ddiv>
 800eda0:	4633      	mov	r3, r6
 800eda2:	462a      	mov	r2, r5
 800eda4:	f7f1 fa98 	bl	80002d8 <__aeabi_dsub>
 800eda8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800edac:	4656      	mov	r6, sl
 800edae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800edb2:	f7f1 fef9 	bl	8000ba8 <__aeabi_d2iz>
 800edb6:	4605      	mov	r5, r0
 800edb8:	f7f1 fbdc 	bl	8000574 <__aeabi_i2d>
 800edbc:	4602      	mov	r2, r0
 800edbe:	460b      	mov	r3, r1
 800edc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800edc4:	f7f1 fa88 	bl	80002d8 <__aeabi_dsub>
 800edc8:	3530      	adds	r5, #48	@ 0x30
 800edca:	4602      	mov	r2, r0
 800edcc:	460b      	mov	r3, r1
 800edce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800edd2:	f806 5b01 	strb.w	r5, [r6], #1
 800edd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800edda:	f7f1 fea7 	bl	8000b2c <__aeabi_dcmplt>
 800edde:	2800      	cmp	r0, #0
 800ede0:	d171      	bne.n	800eec6 <_dtoa_r+0x65e>
 800ede2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ede6:	4911      	ldr	r1, [pc, #68]	@ (800ee2c <_dtoa_r+0x5c4>)
 800ede8:	2000      	movs	r0, #0
 800edea:	f7f1 fa75 	bl	80002d8 <__aeabi_dsub>
 800edee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800edf2:	f7f1 fe9b 	bl	8000b2c <__aeabi_dcmplt>
 800edf6:	2800      	cmp	r0, #0
 800edf8:	f040 8095 	bne.w	800ef26 <_dtoa_r+0x6be>
 800edfc:	42a6      	cmp	r6, r4
 800edfe:	f43f af50 	beq.w	800eca2 <_dtoa_r+0x43a>
 800ee02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ee06:	4b0a      	ldr	r3, [pc, #40]	@ (800ee30 <_dtoa_r+0x5c8>)
 800ee08:	2200      	movs	r2, #0
 800ee0a:	f7f1 fc1d 	bl	8000648 <__aeabi_dmul>
 800ee0e:	4b08      	ldr	r3, [pc, #32]	@ (800ee30 <_dtoa_r+0x5c8>)
 800ee10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ee14:	2200      	movs	r2, #0
 800ee16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee1a:	f7f1 fc15 	bl	8000648 <__aeabi_dmul>
 800ee1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee22:	e7c4      	b.n	800edae <_dtoa_r+0x546>
 800ee24:	08011778 	.word	0x08011778
 800ee28:	08011750 	.word	0x08011750
 800ee2c:	3ff00000 	.word	0x3ff00000
 800ee30:	40240000 	.word	0x40240000
 800ee34:	401c0000 	.word	0x401c0000
 800ee38:	40140000 	.word	0x40140000
 800ee3c:	3fe00000 	.word	0x3fe00000
 800ee40:	4631      	mov	r1, r6
 800ee42:	4628      	mov	r0, r5
 800ee44:	f7f1 fc00 	bl	8000648 <__aeabi_dmul>
 800ee48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ee4c:	9415      	str	r4, [sp, #84]	@ 0x54
 800ee4e:	4656      	mov	r6, sl
 800ee50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee54:	f7f1 fea8 	bl	8000ba8 <__aeabi_d2iz>
 800ee58:	4605      	mov	r5, r0
 800ee5a:	f7f1 fb8b 	bl	8000574 <__aeabi_i2d>
 800ee5e:	4602      	mov	r2, r0
 800ee60:	460b      	mov	r3, r1
 800ee62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee66:	f7f1 fa37 	bl	80002d8 <__aeabi_dsub>
 800ee6a:	3530      	adds	r5, #48	@ 0x30
 800ee6c:	f806 5b01 	strb.w	r5, [r6], #1
 800ee70:	4602      	mov	r2, r0
 800ee72:	460b      	mov	r3, r1
 800ee74:	42a6      	cmp	r6, r4
 800ee76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ee7a:	f04f 0200 	mov.w	r2, #0
 800ee7e:	d124      	bne.n	800eeca <_dtoa_r+0x662>
 800ee80:	4bac      	ldr	r3, [pc, #688]	@ (800f134 <_dtoa_r+0x8cc>)
 800ee82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ee86:	f7f1 fa29 	bl	80002dc <__adddf3>
 800ee8a:	4602      	mov	r2, r0
 800ee8c:	460b      	mov	r3, r1
 800ee8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee92:	f7f1 fe69 	bl	8000b68 <__aeabi_dcmpgt>
 800ee96:	2800      	cmp	r0, #0
 800ee98:	d145      	bne.n	800ef26 <_dtoa_r+0x6be>
 800ee9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ee9e:	49a5      	ldr	r1, [pc, #660]	@ (800f134 <_dtoa_r+0x8cc>)
 800eea0:	2000      	movs	r0, #0
 800eea2:	f7f1 fa19 	bl	80002d8 <__aeabi_dsub>
 800eea6:	4602      	mov	r2, r0
 800eea8:	460b      	mov	r3, r1
 800eeaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eeae:	f7f1 fe3d 	bl	8000b2c <__aeabi_dcmplt>
 800eeb2:	2800      	cmp	r0, #0
 800eeb4:	f43f aef5 	beq.w	800eca2 <_dtoa_r+0x43a>
 800eeb8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800eeba:	1e73      	subs	r3, r6, #1
 800eebc:	9315      	str	r3, [sp, #84]	@ 0x54
 800eebe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eec2:	2b30      	cmp	r3, #48	@ 0x30
 800eec4:	d0f8      	beq.n	800eeb8 <_dtoa_r+0x650>
 800eec6:	9f04      	ldr	r7, [sp, #16]
 800eec8:	e73e      	b.n	800ed48 <_dtoa_r+0x4e0>
 800eeca:	4b9b      	ldr	r3, [pc, #620]	@ (800f138 <_dtoa_r+0x8d0>)
 800eecc:	f7f1 fbbc 	bl	8000648 <__aeabi_dmul>
 800eed0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eed4:	e7bc      	b.n	800ee50 <_dtoa_r+0x5e8>
 800eed6:	d10c      	bne.n	800eef2 <_dtoa_r+0x68a>
 800eed8:	4b98      	ldr	r3, [pc, #608]	@ (800f13c <_dtoa_r+0x8d4>)
 800eeda:	2200      	movs	r2, #0
 800eedc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eee0:	f7f1 fbb2 	bl	8000648 <__aeabi_dmul>
 800eee4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eee8:	f7f1 fe34 	bl	8000b54 <__aeabi_dcmpge>
 800eeec:	2800      	cmp	r0, #0
 800eeee:	f000 8157 	beq.w	800f1a0 <_dtoa_r+0x938>
 800eef2:	2400      	movs	r4, #0
 800eef4:	4625      	mov	r5, r4
 800eef6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eef8:	43db      	mvns	r3, r3
 800eefa:	9304      	str	r3, [sp, #16]
 800eefc:	4656      	mov	r6, sl
 800eefe:	2700      	movs	r7, #0
 800ef00:	4621      	mov	r1, r4
 800ef02:	4658      	mov	r0, fp
 800ef04:	f000 ff00 	bl	800fd08 <_Bfree>
 800ef08:	2d00      	cmp	r5, #0
 800ef0a:	d0dc      	beq.n	800eec6 <_dtoa_r+0x65e>
 800ef0c:	b12f      	cbz	r7, 800ef1a <_dtoa_r+0x6b2>
 800ef0e:	42af      	cmp	r7, r5
 800ef10:	d003      	beq.n	800ef1a <_dtoa_r+0x6b2>
 800ef12:	4639      	mov	r1, r7
 800ef14:	4658      	mov	r0, fp
 800ef16:	f000 fef7 	bl	800fd08 <_Bfree>
 800ef1a:	4629      	mov	r1, r5
 800ef1c:	4658      	mov	r0, fp
 800ef1e:	f000 fef3 	bl	800fd08 <_Bfree>
 800ef22:	e7d0      	b.n	800eec6 <_dtoa_r+0x65e>
 800ef24:	9704      	str	r7, [sp, #16]
 800ef26:	4633      	mov	r3, r6
 800ef28:	461e      	mov	r6, r3
 800ef2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef2e:	2a39      	cmp	r2, #57	@ 0x39
 800ef30:	d107      	bne.n	800ef42 <_dtoa_r+0x6da>
 800ef32:	459a      	cmp	sl, r3
 800ef34:	d1f8      	bne.n	800ef28 <_dtoa_r+0x6c0>
 800ef36:	9a04      	ldr	r2, [sp, #16]
 800ef38:	3201      	adds	r2, #1
 800ef3a:	9204      	str	r2, [sp, #16]
 800ef3c:	2230      	movs	r2, #48	@ 0x30
 800ef3e:	f88a 2000 	strb.w	r2, [sl]
 800ef42:	781a      	ldrb	r2, [r3, #0]
 800ef44:	3201      	adds	r2, #1
 800ef46:	701a      	strb	r2, [r3, #0]
 800ef48:	e7bd      	b.n	800eec6 <_dtoa_r+0x65e>
 800ef4a:	4b7b      	ldr	r3, [pc, #492]	@ (800f138 <_dtoa_r+0x8d0>)
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	f7f1 fb7b 	bl	8000648 <__aeabi_dmul>
 800ef52:	2200      	movs	r2, #0
 800ef54:	2300      	movs	r3, #0
 800ef56:	4604      	mov	r4, r0
 800ef58:	460d      	mov	r5, r1
 800ef5a:	f7f1 fddd 	bl	8000b18 <__aeabi_dcmpeq>
 800ef5e:	2800      	cmp	r0, #0
 800ef60:	f43f aebb 	beq.w	800ecda <_dtoa_r+0x472>
 800ef64:	e6f0      	b.n	800ed48 <_dtoa_r+0x4e0>
 800ef66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ef68:	2a00      	cmp	r2, #0
 800ef6a:	f000 80db 	beq.w	800f124 <_dtoa_r+0x8bc>
 800ef6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef70:	2a01      	cmp	r2, #1
 800ef72:	f300 80bf 	bgt.w	800f0f4 <_dtoa_r+0x88c>
 800ef76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ef78:	2a00      	cmp	r2, #0
 800ef7a:	f000 80b7 	beq.w	800f0ec <_dtoa_r+0x884>
 800ef7e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ef82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ef84:	4646      	mov	r6, r8
 800ef86:	9a08      	ldr	r2, [sp, #32]
 800ef88:	2101      	movs	r1, #1
 800ef8a:	441a      	add	r2, r3
 800ef8c:	4658      	mov	r0, fp
 800ef8e:	4498      	add	r8, r3
 800ef90:	9208      	str	r2, [sp, #32]
 800ef92:	f000 ffb7 	bl	800ff04 <__i2b>
 800ef96:	4605      	mov	r5, r0
 800ef98:	b15e      	cbz	r6, 800efb2 <_dtoa_r+0x74a>
 800ef9a:	9b08      	ldr	r3, [sp, #32]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	dd08      	ble.n	800efb2 <_dtoa_r+0x74a>
 800efa0:	42b3      	cmp	r3, r6
 800efa2:	9a08      	ldr	r2, [sp, #32]
 800efa4:	bfa8      	it	ge
 800efa6:	4633      	movge	r3, r6
 800efa8:	eba8 0803 	sub.w	r8, r8, r3
 800efac:	1af6      	subs	r6, r6, r3
 800efae:	1ad3      	subs	r3, r2, r3
 800efb0:	9308      	str	r3, [sp, #32]
 800efb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800efb4:	b1f3      	cbz	r3, 800eff4 <_dtoa_r+0x78c>
 800efb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800efb8:	2b00      	cmp	r3, #0
 800efba:	f000 80b7 	beq.w	800f12c <_dtoa_r+0x8c4>
 800efbe:	b18c      	cbz	r4, 800efe4 <_dtoa_r+0x77c>
 800efc0:	4629      	mov	r1, r5
 800efc2:	4622      	mov	r2, r4
 800efc4:	4658      	mov	r0, fp
 800efc6:	f001 f85d 	bl	8010084 <__pow5mult>
 800efca:	464a      	mov	r2, r9
 800efcc:	4601      	mov	r1, r0
 800efce:	4605      	mov	r5, r0
 800efd0:	4658      	mov	r0, fp
 800efd2:	f000 ffad 	bl	800ff30 <__multiply>
 800efd6:	4649      	mov	r1, r9
 800efd8:	9004      	str	r0, [sp, #16]
 800efda:	4658      	mov	r0, fp
 800efdc:	f000 fe94 	bl	800fd08 <_Bfree>
 800efe0:	9b04      	ldr	r3, [sp, #16]
 800efe2:	4699      	mov	r9, r3
 800efe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800efe6:	1b1a      	subs	r2, r3, r4
 800efe8:	d004      	beq.n	800eff4 <_dtoa_r+0x78c>
 800efea:	4649      	mov	r1, r9
 800efec:	4658      	mov	r0, fp
 800efee:	f001 f849 	bl	8010084 <__pow5mult>
 800eff2:	4681      	mov	r9, r0
 800eff4:	2101      	movs	r1, #1
 800eff6:	4658      	mov	r0, fp
 800eff8:	f000 ff84 	bl	800ff04 <__i2b>
 800effc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800effe:	4604      	mov	r4, r0
 800f000:	2b00      	cmp	r3, #0
 800f002:	f000 81cf 	beq.w	800f3a4 <_dtoa_r+0xb3c>
 800f006:	461a      	mov	r2, r3
 800f008:	4601      	mov	r1, r0
 800f00a:	4658      	mov	r0, fp
 800f00c:	f001 f83a 	bl	8010084 <__pow5mult>
 800f010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f012:	2b01      	cmp	r3, #1
 800f014:	4604      	mov	r4, r0
 800f016:	f300 8095 	bgt.w	800f144 <_dtoa_r+0x8dc>
 800f01a:	9b02      	ldr	r3, [sp, #8]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	f040 8087 	bne.w	800f130 <_dtoa_r+0x8c8>
 800f022:	9b03      	ldr	r3, [sp, #12]
 800f024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f028:	2b00      	cmp	r3, #0
 800f02a:	f040 8089 	bne.w	800f140 <_dtoa_r+0x8d8>
 800f02e:	9b03      	ldr	r3, [sp, #12]
 800f030:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f034:	0d1b      	lsrs	r3, r3, #20
 800f036:	051b      	lsls	r3, r3, #20
 800f038:	b12b      	cbz	r3, 800f046 <_dtoa_r+0x7de>
 800f03a:	9b08      	ldr	r3, [sp, #32]
 800f03c:	3301      	adds	r3, #1
 800f03e:	9308      	str	r3, [sp, #32]
 800f040:	f108 0801 	add.w	r8, r8, #1
 800f044:	2301      	movs	r3, #1
 800f046:	930a      	str	r3, [sp, #40]	@ 0x28
 800f048:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	f000 81b0 	beq.w	800f3b0 <_dtoa_r+0xb48>
 800f050:	6923      	ldr	r3, [r4, #16]
 800f052:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f056:	6918      	ldr	r0, [r3, #16]
 800f058:	f000 ff08 	bl	800fe6c <__hi0bits>
 800f05c:	f1c0 0020 	rsb	r0, r0, #32
 800f060:	9b08      	ldr	r3, [sp, #32]
 800f062:	4418      	add	r0, r3
 800f064:	f010 001f 	ands.w	r0, r0, #31
 800f068:	d077      	beq.n	800f15a <_dtoa_r+0x8f2>
 800f06a:	f1c0 0320 	rsb	r3, r0, #32
 800f06e:	2b04      	cmp	r3, #4
 800f070:	dd6b      	ble.n	800f14a <_dtoa_r+0x8e2>
 800f072:	9b08      	ldr	r3, [sp, #32]
 800f074:	f1c0 001c 	rsb	r0, r0, #28
 800f078:	4403      	add	r3, r0
 800f07a:	4480      	add	r8, r0
 800f07c:	4406      	add	r6, r0
 800f07e:	9308      	str	r3, [sp, #32]
 800f080:	f1b8 0f00 	cmp.w	r8, #0
 800f084:	dd05      	ble.n	800f092 <_dtoa_r+0x82a>
 800f086:	4649      	mov	r1, r9
 800f088:	4642      	mov	r2, r8
 800f08a:	4658      	mov	r0, fp
 800f08c:	f001 f854 	bl	8010138 <__lshift>
 800f090:	4681      	mov	r9, r0
 800f092:	9b08      	ldr	r3, [sp, #32]
 800f094:	2b00      	cmp	r3, #0
 800f096:	dd05      	ble.n	800f0a4 <_dtoa_r+0x83c>
 800f098:	4621      	mov	r1, r4
 800f09a:	461a      	mov	r2, r3
 800f09c:	4658      	mov	r0, fp
 800f09e:	f001 f84b 	bl	8010138 <__lshift>
 800f0a2:	4604      	mov	r4, r0
 800f0a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d059      	beq.n	800f15e <_dtoa_r+0x8f6>
 800f0aa:	4621      	mov	r1, r4
 800f0ac:	4648      	mov	r0, r9
 800f0ae:	f001 f8af 	bl	8010210 <__mcmp>
 800f0b2:	2800      	cmp	r0, #0
 800f0b4:	da53      	bge.n	800f15e <_dtoa_r+0x8f6>
 800f0b6:	1e7b      	subs	r3, r7, #1
 800f0b8:	9304      	str	r3, [sp, #16]
 800f0ba:	4649      	mov	r1, r9
 800f0bc:	2300      	movs	r3, #0
 800f0be:	220a      	movs	r2, #10
 800f0c0:	4658      	mov	r0, fp
 800f0c2:	f000 fe43 	bl	800fd4c <__multadd>
 800f0c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f0c8:	4681      	mov	r9, r0
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	f000 8172 	beq.w	800f3b4 <_dtoa_r+0xb4c>
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	4629      	mov	r1, r5
 800f0d4:	220a      	movs	r2, #10
 800f0d6:	4658      	mov	r0, fp
 800f0d8:	f000 fe38 	bl	800fd4c <__multadd>
 800f0dc:	9b00      	ldr	r3, [sp, #0]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	4605      	mov	r5, r0
 800f0e2:	dc67      	bgt.n	800f1b4 <_dtoa_r+0x94c>
 800f0e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0e6:	2b02      	cmp	r3, #2
 800f0e8:	dc41      	bgt.n	800f16e <_dtoa_r+0x906>
 800f0ea:	e063      	b.n	800f1b4 <_dtoa_r+0x94c>
 800f0ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f0ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f0f2:	e746      	b.n	800ef82 <_dtoa_r+0x71a>
 800f0f4:	9b07      	ldr	r3, [sp, #28]
 800f0f6:	1e5c      	subs	r4, r3, #1
 800f0f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f0fa:	42a3      	cmp	r3, r4
 800f0fc:	bfbf      	itttt	lt
 800f0fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f100:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f102:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f104:	1ae3      	sublt	r3, r4, r3
 800f106:	bfb4      	ite	lt
 800f108:	18d2      	addlt	r2, r2, r3
 800f10a:	1b1c      	subge	r4, r3, r4
 800f10c:	9b07      	ldr	r3, [sp, #28]
 800f10e:	bfbc      	itt	lt
 800f110:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f112:	2400      	movlt	r4, #0
 800f114:	2b00      	cmp	r3, #0
 800f116:	bfb5      	itete	lt
 800f118:	eba8 0603 	sublt.w	r6, r8, r3
 800f11c:	9b07      	ldrge	r3, [sp, #28]
 800f11e:	2300      	movlt	r3, #0
 800f120:	4646      	movge	r6, r8
 800f122:	e730      	b.n	800ef86 <_dtoa_r+0x71e>
 800f124:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f126:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f128:	4646      	mov	r6, r8
 800f12a:	e735      	b.n	800ef98 <_dtoa_r+0x730>
 800f12c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f12e:	e75c      	b.n	800efea <_dtoa_r+0x782>
 800f130:	2300      	movs	r3, #0
 800f132:	e788      	b.n	800f046 <_dtoa_r+0x7de>
 800f134:	3fe00000 	.word	0x3fe00000
 800f138:	40240000 	.word	0x40240000
 800f13c:	40140000 	.word	0x40140000
 800f140:	9b02      	ldr	r3, [sp, #8]
 800f142:	e780      	b.n	800f046 <_dtoa_r+0x7de>
 800f144:	2300      	movs	r3, #0
 800f146:	930a      	str	r3, [sp, #40]	@ 0x28
 800f148:	e782      	b.n	800f050 <_dtoa_r+0x7e8>
 800f14a:	d099      	beq.n	800f080 <_dtoa_r+0x818>
 800f14c:	9a08      	ldr	r2, [sp, #32]
 800f14e:	331c      	adds	r3, #28
 800f150:	441a      	add	r2, r3
 800f152:	4498      	add	r8, r3
 800f154:	441e      	add	r6, r3
 800f156:	9208      	str	r2, [sp, #32]
 800f158:	e792      	b.n	800f080 <_dtoa_r+0x818>
 800f15a:	4603      	mov	r3, r0
 800f15c:	e7f6      	b.n	800f14c <_dtoa_r+0x8e4>
 800f15e:	9b07      	ldr	r3, [sp, #28]
 800f160:	9704      	str	r7, [sp, #16]
 800f162:	2b00      	cmp	r3, #0
 800f164:	dc20      	bgt.n	800f1a8 <_dtoa_r+0x940>
 800f166:	9300      	str	r3, [sp, #0]
 800f168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f16a:	2b02      	cmp	r3, #2
 800f16c:	dd1e      	ble.n	800f1ac <_dtoa_r+0x944>
 800f16e:	9b00      	ldr	r3, [sp, #0]
 800f170:	2b00      	cmp	r3, #0
 800f172:	f47f aec0 	bne.w	800eef6 <_dtoa_r+0x68e>
 800f176:	4621      	mov	r1, r4
 800f178:	2205      	movs	r2, #5
 800f17a:	4658      	mov	r0, fp
 800f17c:	f000 fde6 	bl	800fd4c <__multadd>
 800f180:	4601      	mov	r1, r0
 800f182:	4604      	mov	r4, r0
 800f184:	4648      	mov	r0, r9
 800f186:	f001 f843 	bl	8010210 <__mcmp>
 800f18a:	2800      	cmp	r0, #0
 800f18c:	f77f aeb3 	ble.w	800eef6 <_dtoa_r+0x68e>
 800f190:	4656      	mov	r6, sl
 800f192:	2331      	movs	r3, #49	@ 0x31
 800f194:	f806 3b01 	strb.w	r3, [r6], #1
 800f198:	9b04      	ldr	r3, [sp, #16]
 800f19a:	3301      	adds	r3, #1
 800f19c:	9304      	str	r3, [sp, #16]
 800f19e:	e6ae      	b.n	800eefe <_dtoa_r+0x696>
 800f1a0:	9c07      	ldr	r4, [sp, #28]
 800f1a2:	9704      	str	r7, [sp, #16]
 800f1a4:	4625      	mov	r5, r4
 800f1a6:	e7f3      	b.n	800f190 <_dtoa_r+0x928>
 800f1a8:	9b07      	ldr	r3, [sp, #28]
 800f1aa:	9300      	str	r3, [sp, #0]
 800f1ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	f000 8104 	beq.w	800f3bc <_dtoa_r+0xb54>
 800f1b4:	2e00      	cmp	r6, #0
 800f1b6:	dd05      	ble.n	800f1c4 <_dtoa_r+0x95c>
 800f1b8:	4629      	mov	r1, r5
 800f1ba:	4632      	mov	r2, r6
 800f1bc:	4658      	mov	r0, fp
 800f1be:	f000 ffbb 	bl	8010138 <__lshift>
 800f1c2:	4605      	mov	r5, r0
 800f1c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d05a      	beq.n	800f280 <_dtoa_r+0xa18>
 800f1ca:	6869      	ldr	r1, [r5, #4]
 800f1cc:	4658      	mov	r0, fp
 800f1ce:	f000 fd5b 	bl	800fc88 <_Balloc>
 800f1d2:	4606      	mov	r6, r0
 800f1d4:	b928      	cbnz	r0, 800f1e2 <_dtoa_r+0x97a>
 800f1d6:	4b84      	ldr	r3, [pc, #528]	@ (800f3e8 <_dtoa_r+0xb80>)
 800f1d8:	4602      	mov	r2, r0
 800f1da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f1de:	f7ff bb5a 	b.w	800e896 <_dtoa_r+0x2e>
 800f1e2:	692a      	ldr	r2, [r5, #16]
 800f1e4:	3202      	adds	r2, #2
 800f1e6:	0092      	lsls	r2, r2, #2
 800f1e8:	f105 010c 	add.w	r1, r5, #12
 800f1ec:	300c      	adds	r0, #12
 800f1ee:	f7ff fa94 	bl	800e71a <memcpy>
 800f1f2:	2201      	movs	r2, #1
 800f1f4:	4631      	mov	r1, r6
 800f1f6:	4658      	mov	r0, fp
 800f1f8:	f000 ff9e 	bl	8010138 <__lshift>
 800f1fc:	f10a 0301 	add.w	r3, sl, #1
 800f200:	9307      	str	r3, [sp, #28]
 800f202:	9b00      	ldr	r3, [sp, #0]
 800f204:	4453      	add	r3, sl
 800f206:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f208:	9b02      	ldr	r3, [sp, #8]
 800f20a:	f003 0301 	and.w	r3, r3, #1
 800f20e:	462f      	mov	r7, r5
 800f210:	930a      	str	r3, [sp, #40]	@ 0x28
 800f212:	4605      	mov	r5, r0
 800f214:	9b07      	ldr	r3, [sp, #28]
 800f216:	4621      	mov	r1, r4
 800f218:	3b01      	subs	r3, #1
 800f21a:	4648      	mov	r0, r9
 800f21c:	9300      	str	r3, [sp, #0]
 800f21e:	f7ff fa99 	bl	800e754 <quorem>
 800f222:	4639      	mov	r1, r7
 800f224:	9002      	str	r0, [sp, #8]
 800f226:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f22a:	4648      	mov	r0, r9
 800f22c:	f000 fff0 	bl	8010210 <__mcmp>
 800f230:	462a      	mov	r2, r5
 800f232:	9008      	str	r0, [sp, #32]
 800f234:	4621      	mov	r1, r4
 800f236:	4658      	mov	r0, fp
 800f238:	f001 f806 	bl	8010248 <__mdiff>
 800f23c:	68c2      	ldr	r2, [r0, #12]
 800f23e:	4606      	mov	r6, r0
 800f240:	bb02      	cbnz	r2, 800f284 <_dtoa_r+0xa1c>
 800f242:	4601      	mov	r1, r0
 800f244:	4648      	mov	r0, r9
 800f246:	f000 ffe3 	bl	8010210 <__mcmp>
 800f24a:	4602      	mov	r2, r0
 800f24c:	4631      	mov	r1, r6
 800f24e:	4658      	mov	r0, fp
 800f250:	920e      	str	r2, [sp, #56]	@ 0x38
 800f252:	f000 fd59 	bl	800fd08 <_Bfree>
 800f256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f258:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f25a:	9e07      	ldr	r6, [sp, #28]
 800f25c:	ea43 0102 	orr.w	r1, r3, r2
 800f260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f262:	4319      	orrs	r1, r3
 800f264:	d110      	bne.n	800f288 <_dtoa_r+0xa20>
 800f266:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f26a:	d029      	beq.n	800f2c0 <_dtoa_r+0xa58>
 800f26c:	9b08      	ldr	r3, [sp, #32]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	dd02      	ble.n	800f278 <_dtoa_r+0xa10>
 800f272:	9b02      	ldr	r3, [sp, #8]
 800f274:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f278:	9b00      	ldr	r3, [sp, #0]
 800f27a:	f883 8000 	strb.w	r8, [r3]
 800f27e:	e63f      	b.n	800ef00 <_dtoa_r+0x698>
 800f280:	4628      	mov	r0, r5
 800f282:	e7bb      	b.n	800f1fc <_dtoa_r+0x994>
 800f284:	2201      	movs	r2, #1
 800f286:	e7e1      	b.n	800f24c <_dtoa_r+0x9e4>
 800f288:	9b08      	ldr	r3, [sp, #32]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	db04      	blt.n	800f298 <_dtoa_r+0xa30>
 800f28e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f290:	430b      	orrs	r3, r1
 800f292:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f294:	430b      	orrs	r3, r1
 800f296:	d120      	bne.n	800f2da <_dtoa_r+0xa72>
 800f298:	2a00      	cmp	r2, #0
 800f29a:	dded      	ble.n	800f278 <_dtoa_r+0xa10>
 800f29c:	4649      	mov	r1, r9
 800f29e:	2201      	movs	r2, #1
 800f2a0:	4658      	mov	r0, fp
 800f2a2:	f000 ff49 	bl	8010138 <__lshift>
 800f2a6:	4621      	mov	r1, r4
 800f2a8:	4681      	mov	r9, r0
 800f2aa:	f000 ffb1 	bl	8010210 <__mcmp>
 800f2ae:	2800      	cmp	r0, #0
 800f2b0:	dc03      	bgt.n	800f2ba <_dtoa_r+0xa52>
 800f2b2:	d1e1      	bne.n	800f278 <_dtoa_r+0xa10>
 800f2b4:	f018 0f01 	tst.w	r8, #1
 800f2b8:	d0de      	beq.n	800f278 <_dtoa_r+0xa10>
 800f2ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f2be:	d1d8      	bne.n	800f272 <_dtoa_r+0xa0a>
 800f2c0:	9a00      	ldr	r2, [sp, #0]
 800f2c2:	2339      	movs	r3, #57	@ 0x39
 800f2c4:	7013      	strb	r3, [r2, #0]
 800f2c6:	4633      	mov	r3, r6
 800f2c8:	461e      	mov	r6, r3
 800f2ca:	3b01      	subs	r3, #1
 800f2cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f2d0:	2a39      	cmp	r2, #57	@ 0x39
 800f2d2:	d052      	beq.n	800f37a <_dtoa_r+0xb12>
 800f2d4:	3201      	adds	r2, #1
 800f2d6:	701a      	strb	r2, [r3, #0]
 800f2d8:	e612      	b.n	800ef00 <_dtoa_r+0x698>
 800f2da:	2a00      	cmp	r2, #0
 800f2dc:	dd07      	ble.n	800f2ee <_dtoa_r+0xa86>
 800f2de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f2e2:	d0ed      	beq.n	800f2c0 <_dtoa_r+0xa58>
 800f2e4:	9a00      	ldr	r2, [sp, #0]
 800f2e6:	f108 0301 	add.w	r3, r8, #1
 800f2ea:	7013      	strb	r3, [r2, #0]
 800f2ec:	e608      	b.n	800ef00 <_dtoa_r+0x698>
 800f2ee:	9b07      	ldr	r3, [sp, #28]
 800f2f0:	9a07      	ldr	r2, [sp, #28]
 800f2f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f2f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f2f8:	4293      	cmp	r3, r2
 800f2fa:	d028      	beq.n	800f34e <_dtoa_r+0xae6>
 800f2fc:	4649      	mov	r1, r9
 800f2fe:	2300      	movs	r3, #0
 800f300:	220a      	movs	r2, #10
 800f302:	4658      	mov	r0, fp
 800f304:	f000 fd22 	bl	800fd4c <__multadd>
 800f308:	42af      	cmp	r7, r5
 800f30a:	4681      	mov	r9, r0
 800f30c:	f04f 0300 	mov.w	r3, #0
 800f310:	f04f 020a 	mov.w	r2, #10
 800f314:	4639      	mov	r1, r7
 800f316:	4658      	mov	r0, fp
 800f318:	d107      	bne.n	800f32a <_dtoa_r+0xac2>
 800f31a:	f000 fd17 	bl	800fd4c <__multadd>
 800f31e:	4607      	mov	r7, r0
 800f320:	4605      	mov	r5, r0
 800f322:	9b07      	ldr	r3, [sp, #28]
 800f324:	3301      	adds	r3, #1
 800f326:	9307      	str	r3, [sp, #28]
 800f328:	e774      	b.n	800f214 <_dtoa_r+0x9ac>
 800f32a:	f000 fd0f 	bl	800fd4c <__multadd>
 800f32e:	4629      	mov	r1, r5
 800f330:	4607      	mov	r7, r0
 800f332:	2300      	movs	r3, #0
 800f334:	220a      	movs	r2, #10
 800f336:	4658      	mov	r0, fp
 800f338:	f000 fd08 	bl	800fd4c <__multadd>
 800f33c:	4605      	mov	r5, r0
 800f33e:	e7f0      	b.n	800f322 <_dtoa_r+0xaba>
 800f340:	9b00      	ldr	r3, [sp, #0]
 800f342:	2b00      	cmp	r3, #0
 800f344:	bfcc      	ite	gt
 800f346:	461e      	movgt	r6, r3
 800f348:	2601      	movle	r6, #1
 800f34a:	4456      	add	r6, sl
 800f34c:	2700      	movs	r7, #0
 800f34e:	4649      	mov	r1, r9
 800f350:	2201      	movs	r2, #1
 800f352:	4658      	mov	r0, fp
 800f354:	f000 fef0 	bl	8010138 <__lshift>
 800f358:	4621      	mov	r1, r4
 800f35a:	4681      	mov	r9, r0
 800f35c:	f000 ff58 	bl	8010210 <__mcmp>
 800f360:	2800      	cmp	r0, #0
 800f362:	dcb0      	bgt.n	800f2c6 <_dtoa_r+0xa5e>
 800f364:	d102      	bne.n	800f36c <_dtoa_r+0xb04>
 800f366:	f018 0f01 	tst.w	r8, #1
 800f36a:	d1ac      	bne.n	800f2c6 <_dtoa_r+0xa5e>
 800f36c:	4633      	mov	r3, r6
 800f36e:	461e      	mov	r6, r3
 800f370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f374:	2a30      	cmp	r2, #48	@ 0x30
 800f376:	d0fa      	beq.n	800f36e <_dtoa_r+0xb06>
 800f378:	e5c2      	b.n	800ef00 <_dtoa_r+0x698>
 800f37a:	459a      	cmp	sl, r3
 800f37c:	d1a4      	bne.n	800f2c8 <_dtoa_r+0xa60>
 800f37e:	9b04      	ldr	r3, [sp, #16]
 800f380:	3301      	adds	r3, #1
 800f382:	9304      	str	r3, [sp, #16]
 800f384:	2331      	movs	r3, #49	@ 0x31
 800f386:	f88a 3000 	strb.w	r3, [sl]
 800f38a:	e5b9      	b.n	800ef00 <_dtoa_r+0x698>
 800f38c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f38e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f3ec <_dtoa_r+0xb84>
 800f392:	b11b      	cbz	r3, 800f39c <_dtoa_r+0xb34>
 800f394:	f10a 0308 	add.w	r3, sl, #8
 800f398:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f39a:	6013      	str	r3, [r2, #0]
 800f39c:	4650      	mov	r0, sl
 800f39e:	b019      	add	sp, #100	@ 0x64
 800f3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3a6:	2b01      	cmp	r3, #1
 800f3a8:	f77f ae37 	ble.w	800f01a <_dtoa_r+0x7b2>
 800f3ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800f3b0:	2001      	movs	r0, #1
 800f3b2:	e655      	b.n	800f060 <_dtoa_r+0x7f8>
 800f3b4:	9b00      	ldr	r3, [sp, #0]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	f77f aed6 	ble.w	800f168 <_dtoa_r+0x900>
 800f3bc:	4656      	mov	r6, sl
 800f3be:	4621      	mov	r1, r4
 800f3c0:	4648      	mov	r0, r9
 800f3c2:	f7ff f9c7 	bl	800e754 <quorem>
 800f3c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f3ca:	f806 8b01 	strb.w	r8, [r6], #1
 800f3ce:	9b00      	ldr	r3, [sp, #0]
 800f3d0:	eba6 020a 	sub.w	r2, r6, sl
 800f3d4:	4293      	cmp	r3, r2
 800f3d6:	ddb3      	ble.n	800f340 <_dtoa_r+0xad8>
 800f3d8:	4649      	mov	r1, r9
 800f3da:	2300      	movs	r3, #0
 800f3dc:	220a      	movs	r2, #10
 800f3de:	4658      	mov	r0, fp
 800f3e0:	f000 fcb4 	bl	800fd4c <__multadd>
 800f3e4:	4681      	mov	r9, r0
 800f3e6:	e7ea      	b.n	800f3be <_dtoa_r+0xb56>
 800f3e8:	08011675 	.word	0x08011675
 800f3ec:	080115f9 	.word	0x080115f9

0800f3f0 <_free_r>:
 800f3f0:	b538      	push	{r3, r4, r5, lr}
 800f3f2:	4605      	mov	r5, r0
 800f3f4:	2900      	cmp	r1, #0
 800f3f6:	d041      	beq.n	800f47c <_free_r+0x8c>
 800f3f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3fc:	1f0c      	subs	r4, r1, #4
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	bfb8      	it	lt
 800f402:	18e4      	addlt	r4, r4, r3
 800f404:	f000 fc34 	bl	800fc70 <__malloc_lock>
 800f408:	4a1d      	ldr	r2, [pc, #116]	@ (800f480 <_free_r+0x90>)
 800f40a:	6813      	ldr	r3, [r2, #0]
 800f40c:	b933      	cbnz	r3, 800f41c <_free_r+0x2c>
 800f40e:	6063      	str	r3, [r4, #4]
 800f410:	6014      	str	r4, [r2, #0]
 800f412:	4628      	mov	r0, r5
 800f414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f418:	f000 bc30 	b.w	800fc7c <__malloc_unlock>
 800f41c:	42a3      	cmp	r3, r4
 800f41e:	d908      	bls.n	800f432 <_free_r+0x42>
 800f420:	6820      	ldr	r0, [r4, #0]
 800f422:	1821      	adds	r1, r4, r0
 800f424:	428b      	cmp	r3, r1
 800f426:	bf01      	itttt	eq
 800f428:	6819      	ldreq	r1, [r3, #0]
 800f42a:	685b      	ldreq	r3, [r3, #4]
 800f42c:	1809      	addeq	r1, r1, r0
 800f42e:	6021      	streq	r1, [r4, #0]
 800f430:	e7ed      	b.n	800f40e <_free_r+0x1e>
 800f432:	461a      	mov	r2, r3
 800f434:	685b      	ldr	r3, [r3, #4]
 800f436:	b10b      	cbz	r3, 800f43c <_free_r+0x4c>
 800f438:	42a3      	cmp	r3, r4
 800f43a:	d9fa      	bls.n	800f432 <_free_r+0x42>
 800f43c:	6811      	ldr	r1, [r2, #0]
 800f43e:	1850      	adds	r0, r2, r1
 800f440:	42a0      	cmp	r0, r4
 800f442:	d10b      	bne.n	800f45c <_free_r+0x6c>
 800f444:	6820      	ldr	r0, [r4, #0]
 800f446:	4401      	add	r1, r0
 800f448:	1850      	adds	r0, r2, r1
 800f44a:	4283      	cmp	r3, r0
 800f44c:	6011      	str	r1, [r2, #0]
 800f44e:	d1e0      	bne.n	800f412 <_free_r+0x22>
 800f450:	6818      	ldr	r0, [r3, #0]
 800f452:	685b      	ldr	r3, [r3, #4]
 800f454:	6053      	str	r3, [r2, #4]
 800f456:	4408      	add	r0, r1
 800f458:	6010      	str	r0, [r2, #0]
 800f45a:	e7da      	b.n	800f412 <_free_r+0x22>
 800f45c:	d902      	bls.n	800f464 <_free_r+0x74>
 800f45e:	230c      	movs	r3, #12
 800f460:	602b      	str	r3, [r5, #0]
 800f462:	e7d6      	b.n	800f412 <_free_r+0x22>
 800f464:	6820      	ldr	r0, [r4, #0]
 800f466:	1821      	adds	r1, r4, r0
 800f468:	428b      	cmp	r3, r1
 800f46a:	bf04      	itt	eq
 800f46c:	6819      	ldreq	r1, [r3, #0]
 800f46e:	685b      	ldreq	r3, [r3, #4]
 800f470:	6063      	str	r3, [r4, #4]
 800f472:	bf04      	itt	eq
 800f474:	1809      	addeq	r1, r1, r0
 800f476:	6021      	streq	r1, [r4, #0]
 800f478:	6054      	str	r4, [r2, #4]
 800f47a:	e7ca      	b.n	800f412 <_free_r+0x22>
 800f47c:	bd38      	pop	{r3, r4, r5, pc}
 800f47e:	bf00      	nop
 800f480:	20000a40 	.word	0x20000a40

0800f484 <rshift>:
 800f484:	6903      	ldr	r3, [r0, #16]
 800f486:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f48a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f48e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f492:	f100 0414 	add.w	r4, r0, #20
 800f496:	dd45      	ble.n	800f524 <rshift+0xa0>
 800f498:	f011 011f 	ands.w	r1, r1, #31
 800f49c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f4a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f4a4:	d10c      	bne.n	800f4c0 <rshift+0x3c>
 800f4a6:	f100 0710 	add.w	r7, r0, #16
 800f4aa:	4629      	mov	r1, r5
 800f4ac:	42b1      	cmp	r1, r6
 800f4ae:	d334      	bcc.n	800f51a <rshift+0x96>
 800f4b0:	1a9b      	subs	r3, r3, r2
 800f4b2:	009b      	lsls	r3, r3, #2
 800f4b4:	1eea      	subs	r2, r5, #3
 800f4b6:	4296      	cmp	r6, r2
 800f4b8:	bf38      	it	cc
 800f4ba:	2300      	movcc	r3, #0
 800f4bc:	4423      	add	r3, r4
 800f4be:	e015      	b.n	800f4ec <rshift+0x68>
 800f4c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f4c4:	f1c1 0820 	rsb	r8, r1, #32
 800f4c8:	40cf      	lsrs	r7, r1
 800f4ca:	f105 0e04 	add.w	lr, r5, #4
 800f4ce:	46a1      	mov	r9, r4
 800f4d0:	4576      	cmp	r6, lr
 800f4d2:	46f4      	mov	ip, lr
 800f4d4:	d815      	bhi.n	800f502 <rshift+0x7e>
 800f4d6:	1a9a      	subs	r2, r3, r2
 800f4d8:	0092      	lsls	r2, r2, #2
 800f4da:	3a04      	subs	r2, #4
 800f4dc:	3501      	adds	r5, #1
 800f4de:	42ae      	cmp	r6, r5
 800f4e0:	bf38      	it	cc
 800f4e2:	2200      	movcc	r2, #0
 800f4e4:	18a3      	adds	r3, r4, r2
 800f4e6:	50a7      	str	r7, [r4, r2]
 800f4e8:	b107      	cbz	r7, 800f4ec <rshift+0x68>
 800f4ea:	3304      	adds	r3, #4
 800f4ec:	1b1a      	subs	r2, r3, r4
 800f4ee:	42a3      	cmp	r3, r4
 800f4f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f4f4:	bf08      	it	eq
 800f4f6:	2300      	moveq	r3, #0
 800f4f8:	6102      	str	r2, [r0, #16]
 800f4fa:	bf08      	it	eq
 800f4fc:	6143      	streq	r3, [r0, #20]
 800f4fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f502:	f8dc c000 	ldr.w	ip, [ip]
 800f506:	fa0c fc08 	lsl.w	ip, ip, r8
 800f50a:	ea4c 0707 	orr.w	r7, ip, r7
 800f50e:	f849 7b04 	str.w	r7, [r9], #4
 800f512:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f516:	40cf      	lsrs	r7, r1
 800f518:	e7da      	b.n	800f4d0 <rshift+0x4c>
 800f51a:	f851 cb04 	ldr.w	ip, [r1], #4
 800f51e:	f847 cf04 	str.w	ip, [r7, #4]!
 800f522:	e7c3      	b.n	800f4ac <rshift+0x28>
 800f524:	4623      	mov	r3, r4
 800f526:	e7e1      	b.n	800f4ec <rshift+0x68>

0800f528 <__hexdig_fun>:
 800f528:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f52c:	2b09      	cmp	r3, #9
 800f52e:	d802      	bhi.n	800f536 <__hexdig_fun+0xe>
 800f530:	3820      	subs	r0, #32
 800f532:	b2c0      	uxtb	r0, r0
 800f534:	4770      	bx	lr
 800f536:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f53a:	2b05      	cmp	r3, #5
 800f53c:	d801      	bhi.n	800f542 <__hexdig_fun+0x1a>
 800f53e:	3847      	subs	r0, #71	@ 0x47
 800f540:	e7f7      	b.n	800f532 <__hexdig_fun+0xa>
 800f542:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f546:	2b05      	cmp	r3, #5
 800f548:	d801      	bhi.n	800f54e <__hexdig_fun+0x26>
 800f54a:	3827      	subs	r0, #39	@ 0x27
 800f54c:	e7f1      	b.n	800f532 <__hexdig_fun+0xa>
 800f54e:	2000      	movs	r0, #0
 800f550:	4770      	bx	lr
	...

0800f554 <__gethex>:
 800f554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f558:	b085      	sub	sp, #20
 800f55a:	468a      	mov	sl, r1
 800f55c:	9302      	str	r3, [sp, #8]
 800f55e:	680b      	ldr	r3, [r1, #0]
 800f560:	9001      	str	r0, [sp, #4]
 800f562:	4690      	mov	r8, r2
 800f564:	1c9c      	adds	r4, r3, #2
 800f566:	46a1      	mov	r9, r4
 800f568:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f56c:	2830      	cmp	r0, #48	@ 0x30
 800f56e:	d0fa      	beq.n	800f566 <__gethex+0x12>
 800f570:	eba9 0303 	sub.w	r3, r9, r3
 800f574:	f1a3 0b02 	sub.w	fp, r3, #2
 800f578:	f7ff ffd6 	bl	800f528 <__hexdig_fun>
 800f57c:	4605      	mov	r5, r0
 800f57e:	2800      	cmp	r0, #0
 800f580:	d168      	bne.n	800f654 <__gethex+0x100>
 800f582:	49a0      	ldr	r1, [pc, #640]	@ (800f804 <__gethex+0x2b0>)
 800f584:	2201      	movs	r2, #1
 800f586:	4648      	mov	r0, r9
 800f588:	f7ff f83e 	bl	800e608 <strncmp>
 800f58c:	4607      	mov	r7, r0
 800f58e:	2800      	cmp	r0, #0
 800f590:	d167      	bne.n	800f662 <__gethex+0x10e>
 800f592:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f596:	4626      	mov	r6, r4
 800f598:	f7ff ffc6 	bl	800f528 <__hexdig_fun>
 800f59c:	2800      	cmp	r0, #0
 800f59e:	d062      	beq.n	800f666 <__gethex+0x112>
 800f5a0:	4623      	mov	r3, r4
 800f5a2:	7818      	ldrb	r0, [r3, #0]
 800f5a4:	2830      	cmp	r0, #48	@ 0x30
 800f5a6:	4699      	mov	r9, r3
 800f5a8:	f103 0301 	add.w	r3, r3, #1
 800f5ac:	d0f9      	beq.n	800f5a2 <__gethex+0x4e>
 800f5ae:	f7ff ffbb 	bl	800f528 <__hexdig_fun>
 800f5b2:	fab0 f580 	clz	r5, r0
 800f5b6:	096d      	lsrs	r5, r5, #5
 800f5b8:	f04f 0b01 	mov.w	fp, #1
 800f5bc:	464a      	mov	r2, r9
 800f5be:	4616      	mov	r6, r2
 800f5c0:	3201      	adds	r2, #1
 800f5c2:	7830      	ldrb	r0, [r6, #0]
 800f5c4:	f7ff ffb0 	bl	800f528 <__hexdig_fun>
 800f5c8:	2800      	cmp	r0, #0
 800f5ca:	d1f8      	bne.n	800f5be <__gethex+0x6a>
 800f5cc:	498d      	ldr	r1, [pc, #564]	@ (800f804 <__gethex+0x2b0>)
 800f5ce:	2201      	movs	r2, #1
 800f5d0:	4630      	mov	r0, r6
 800f5d2:	f7ff f819 	bl	800e608 <strncmp>
 800f5d6:	2800      	cmp	r0, #0
 800f5d8:	d13f      	bne.n	800f65a <__gethex+0x106>
 800f5da:	b944      	cbnz	r4, 800f5ee <__gethex+0x9a>
 800f5dc:	1c74      	adds	r4, r6, #1
 800f5de:	4622      	mov	r2, r4
 800f5e0:	4616      	mov	r6, r2
 800f5e2:	3201      	adds	r2, #1
 800f5e4:	7830      	ldrb	r0, [r6, #0]
 800f5e6:	f7ff ff9f 	bl	800f528 <__hexdig_fun>
 800f5ea:	2800      	cmp	r0, #0
 800f5ec:	d1f8      	bne.n	800f5e0 <__gethex+0x8c>
 800f5ee:	1ba4      	subs	r4, r4, r6
 800f5f0:	00a7      	lsls	r7, r4, #2
 800f5f2:	7833      	ldrb	r3, [r6, #0]
 800f5f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f5f8:	2b50      	cmp	r3, #80	@ 0x50
 800f5fa:	d13e      	bne.n	800f67a <__gethex+0x126>
 800f5fc:	7873      	ldrb	r3, [r6, #1]
 800f5fe:	2b2b      	cmp	r3, #43	@ 0x2b
 800f600:	d033      	beq.n	800f66a <__gethex+0x116>
 800f602:	2b2d      	cmp	r3, #45	@ 0x2d
 800f604:	d034      	beq.n	800f670 <__gethex+0x11c>
 800f606:	1c71      	adds	r1, r6, #1
 800f608:	2400      	movs	r4, #0
 800f60a:	7808      	ldrb	r0, [r1, #0]
 800f60c:	f7ff ff8c 	bl	800f528 <__hexdig_fun>
 800f610:	1e43      	subs	r3, r0, #1
 800f612:	b2db      	uxtb	r3, r3
 800f614:	2b18      	cmp	r3, #24
 800f616:	d830      	bhi.n	800f67a <__gethex+0x126>
 800f618:	f1a0 0210 	sub.w	r2, r0, #16
 800f61c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f620:	f7ff ff82 	bl	800f528 <__hexdig_fun>
 800f624:	f100 3cff 	add.w	ip, r0, #4294967295
 800f628:	fa5f fc8c 	uxtb.w	ip, ip
 800f62c:	f1bc 0f18 	cmp.w	ip, #24
 800f630:	f04f 030a 	mov.w	r3, #10
 800f634:	d91e      	bls.n	800f674 <__gethex+0x120>
 800f636:	b104      	cbz	r4, 800f63a <__gethex+0xe6>
 800f638:	4252      	negs	r2, r2
 800f63a:	4417      	add	r7, r2
 800f63c:	f8ca 1000 	str.w	r1, [sl]
 800f640:	b1ed      	cbz	r5, 800f67e <__gethex+0x12a>
 800f642:	f1bb 0f00 	cmp.w	fp, #0
 800f646:	bf0c      	ite	eq
 800f648:	2506      	moveq	r5, #6
 800f64a:	2500      	movne	r5, #0
 800f64c:	4628      	mov	r0, r5
 800f64e:	b005      	add	sp, #20
 800f650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f654:	2500      	movs	r5, #0
 800f656:	462c      	mov	r4, r5
 800f658:	e7b0      	b.n	800f5bc <__gethex+0x68>
 800f65a:	2c00      	cmp	r4, #0
 800f65c:	d1c7      	bne.n	800f5ee <__gethex+0x9a>
 800f65e:	4627      	mov	r7, r4
 800f660:	e7c7      	b.n	800f5f2 <__gethex+0x9e>
 800f662:	464e      	mov	r6, r9
 800f664:	462f      	mov	r7, r5
 800f666:	2501      	movs	r5, #1
 800f668:	e7c3      	b.n	800f5f2 <__gethex+0x9e>
 800f66a:	2400      	movs	r4, #0
 800f66c:	1cb1      	adds	r1, r6, #2
 800f66e:	e7cc      	b.n	800f60a <__gethex+0xb6>
 800f670:	2401      	movs	r4, #1
 800f672:	e7fb      	b.n	800f66c <__gethex+0x118>
 800f674:	fb03 0002 	mla	r0, r3, r2, r0
 800f678:	e7ce      	b.n	800f618 <__gethex+0xc4>
 800f67a:	4631      	mov	r1, r6
 800f67c:	e7de      	b.n	800f63c <__gethex+0xe8>
 800f67e:	eba6 0309 	sub.w	r3, r6, r9
 800f682:	3b01      	subs	r3, #1
 800f684:	4629      	mov	r1, r5
 800f686:	2b07      	cmp	r3, #7
 800f688:	dc0a      	bgt.n	800f6a0 <__gethex+0x14c>
 800f68a:	9801      	ldr	r0, [sp, #4]
 800f68c:	f000 fafc 	bl	800fc88 <_Balloc>
 800f690:	4604      	mov	r4, r0
 800f692:	b940      	cbnz	r0, 800f6a6 <__gethex+0x152>
 800f694:	4b5c      	ldr	r3, [pc, #368]	@ (800f808 <__gethex+0x2b4>)
 800f696:	4602      	mov	r2, r0
 800f698:	21e4      	movs	r1, #228	@ 0xe4
 800f69a:	485c      	ldr	r0, [pc, #368]	@ (800f80c <__gethex+0x2b8>)
 800f69c:	f001 fa5c 	bl	8010b58 <__assert_func>
 800f6a0:	3101      	adds	r1, #1
 800f6a2:	105b      	asrs	r3, r3, #1
 800f6a4:	e7ef      	b.n	800f686 <__gethex+0x132>
 800f6a6:	f100 0a14 	add.w	sl, r0, #20
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	4655      	mov	r5, sl
 800f6ae:	469b      	mov	fp, r3
 800f6b0:	45b1      	cmp	r9, r6
 800f6b2:	d337      	bcc.n	800f724 <__gethex+0x1d0>
 800f6b4:	f845 bb04 	str.w	fp, [r5], #4
 800f6b8:	eba5 050a 	sub.w	r5, r5, sl
 800f6bc:	10ad      	asrs	r5, r5, #2
 800f6be:	6125      	str	r5, [r4, #16]
 800f6c0:	4658      	mov	r0, fp
 800f6c2:	f000 fbd3 	bl	800fe6c <__hi0bits>
 800f6c6:	016d      	lsls	r5, r5, #5
 800f6c8:	f8d8 6000 	ldr.w	r6, [r8]
 800f6cc:	1a2d      	subs	r5, r5, r0
 800f6ce:	42b5      	cmp	r5, r6
 800f6d0:	dd54      	ble.n	800f77c <__gethex+0x228>
 800f6d2:	1bad      	subs	r5, r5, r6
 800f6d4:	4629      	mov	r1, r5
 800f6d6:	4620      	mov	r0, r4
 800f6d8:	f000 ff67 	bl	80105aa <__any_on>
 800f6dc:	4681      	mov	r9, r0
 800f6de:	b178      	cbz	r0, 800f700 <__gethex+0x1ac>
 800f6e0:	1e6b      	subs	r3, r5, #1
 800f6e2:	1159      	asrs	r1, r3, #5
 800f6e4:	f003 021f 	and.w	r2, r3, #31
 800f6e8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f6ec:	f04f 0901 	mov.w	r9, #1
 800f6f0:	fa09 f202 	lsl.w	r2, r9, r2
 800f6f4:	420a      	tst	r2, r1
 800f6f6:	d003      	beq.n	800f700 <__gethex+0x1ac>
 800f6f8:	454b      	cmp	r3, r9
 800f6fa:	dc36      	bgt.n	800f76a <__gethex+0x216>
 800f6fc:	f04f 0902 	mov.w	r9, #2
 800f700:	4629      	mov	r1, r5
 800f702:	4620      	mov	r0, r4
 800f704:	f7ff febe 	bl	800f484 <rshift>
 800f708:	442f      	add	r7, r5
 800f70a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f70e:	42bb      	cmp	r3, r7
 800f710:	da42      	bge.n	800f798 <__gethex+0x244>
 800f712:	9801      	ldr	r0, [sp, #4]
 800f714:	4621      	mov	r1, r4
 800f716:	f000 faf7 	bl	800fd08 <_Bfree>
 800f71a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f71c:	2300      	movs	r3, #0
 800f71e:	6013      	str	r3, [r2, #0]
 800f720:	25a3      	movs	r5, #163	@ 0xa3
 800f722:	e793      	b.n	800f64c <__gethex+0xf8>
 800f724:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f728:	2a2e      	cmp	r2, #46	@ 0x2e
 800f72a:	d012      	beq.n	800f752 <__gethex+0x1fe>
 800f72c:	2b20      	cmp	r3, #32
 800f72e:	d104      	bne.n	800f73a <__gethex+0x1e6>
 800f730:	f845 bb04 	str.w	fp, [r5], #4
 800f734:	f04f 0b00 	mov.w	fp, #0
 800f738:	465b      	mov	r3, fp
 800f73a:	7830      	ldrb	r0, [r6, #0]
 800f73c:	9303      	str	r3, [sp, #12]
 800f73e:	f7ff fef3 	bl	800f528 <__hexdig_fun>
 800f742:	9b03      	ldr	r3, [sp, #12]
 800f744:	f000 000f 	and.w	r0, r0, #15
 800f748:	4098      	lsls	r0, r3
 800f74a:	ea4b 0b00 	orr.w	fp, fp, r0
 800f74e:	3304      	adds	r3, #4
 800f750:	e7ae      	b.n	800f6b0 <__gethex+0x15c>
 800f752:	45b1      	cmp	r9, r6
 800f754:	d8ea      	bhi.n	800f72c <__gethex+0x1d8>
 800f756:	492b      	ldr	r1, [pc, #172]	@ (800f804 <__gethex+0x2b0>)
 800f758:	9303      	str	r3, [sp, #12]
 800f75a:	2201      	movs	r2, #1
 800f75c:	4630      	mov	r0, r6
 800f75e:	f7fe ff53 	bl	800e608 <strncmp>
 800f762:	9b03      	ldr	r3, [sp, #12]
 800f764:	2800      	cmp	r0, #0
 800f766:	d1e1      	bne.n	800f72c <__gethex+0x1d8>
 800f768:	e7a2      	b.n	800f6b0 <__gethex+0x15c>
 800f76a:	1ea9      	subs	r1, r5, #2
 800f76c:	4620      	mov	r0, r4
 800f76e:	f000 ff1c 	bl	80105aa <__any_on>
 800f772:	2800      	cmp	r0, #0
 800f774:	d0c2      	beq.n	800f6fc <__gethex+0x1a8>
 800f776:	f04f 0903 	mov.w	r9, #3
 800f77a:	e7c1      	b.n	800f700 <__gethex+0x1ac>
 800f77c:	da09      	bge.n	800f792 <__gethex+0x23e>
 800f77e:	1b75      	subs	r5, r6, r5
 800f780:	4621      	mov	r1, r4
 800f782:	9801      	ldr	r0, [sp, #4]
 800f784:	462a      	mov	r2, r5
 800f786:	f000 fcd7 	bl	8010138 <__lshift>
 800f78a:	1b7f      	subs	r7, r7, r5
 800f78c:	4604      	mov	r4, r0
 800f78e:	f100 0a14 	add.w	sl, r0, #20
 800f792:	f04f 0900 	mov.w	r9, #0
 800f796:	e7b8      	b.n	800f70a <__gethex+0x1b6>
 800f798:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f79c:	42bd      	cmp	r5, r7
 800f79e:	dd6f      	ble.n	800f880 <__gethex+0x32c>
 800f7a0:	1bed      	subs	r5, r5, r7
 800f7a2:	42ae      	cmp	r6, r5
 800f7a4:	dc34      	bgt.n	800f810 <__gethex+0x2bc>
 800f7a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f7aa:	2b02      	cmp	r3, #2
 800f7ac:	d022      	beq.n	800f7f4 <__gethex+0x2a0>
 800f7ae:	2b03      	cmp	r3, #3
 800f7b0:	d024      	beq.n	800f7fc <__gethex+0x2a8>
 800f7b2:	2b01      	cmp	r3, #1
 800f7b4:	d115      	bne.n	800f7e2 <__gethex+0x28e>
 800f7b6:	42ae      	cmp	r6, r5
 800f7b8:	d113      	bne.n	800f7e2 <__gethex+0x28e>
 800f7ba:	2e01      	cmp	r6, #1
 800f7bc:	d10b      	bne.n	800f7d6 <__gethex+0x282>
 800f7be:	9a02      	ldr	r2, [sp, #8]
 800f7c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f7c4:	6013      	str	r3, [r2, #0]
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	6123      	str	r3, [r4, #16]
 800f7ca:	f8ca 3000 	str.w	r3, [sl]
 800f7ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f7d0:	2562      	movs	r5, #98	@ 0x62
 800f7d2:	601c      	str	r4, [r3, #0]
 800f7d4:	e73a      	b.n	800f64c <__gethex+0xf8>
 800f7d6:	1e71      	subs	r1, r6, #1
 800f7d8:	4620      	mov	r0, r4
 800f7da:	f000 fee6 	bl	80105aa <__any_on>
 800f7de:	2800      	cmp	r0, #0
 800f7e0:	d1ed      	bne.n	800f7be <__gethex+0x26a>
 800f7e2:	9801      	ldr	r0, [sp, #4]
 800f7e4:	4621      	mov	r1, r4
 800f7e6:	f000 fa8f 	bl	800fd08 <_Bfree>
 800f7ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	6013      	str	r3, [r2, #0]
 800f7f0:	2550      	movs	r5, #80	@ 0x50
 800f7f2:	e72b      	b.n	800f64c <__gethex+0xf8>
 800f7f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d1f3      	bne.n	800f7e2 <__gethex+0x28e>
 800f7fa:	e7e0      	b.n	800f7be <__gethex+0x26a>
 800f7fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d1dd      	bne.n	800f7be <__gethex+0x26a>
 800f802:	e7ee      	b.n	800f7e2 <__gethex+0x28e>
 800f804:	08011564 	.word	0x08011564
 800f808:	08011675 	.word	0x08011675
 800f80c:	08011686 	.word	0x08011686
 800f810:	1e6f      	subs	r7, r5, #1
 800f812:	f1b9 0f00 	cmp.w	r9, #0
 800f816:	d130      	bne.n	800f87a <__gethex+0x326>
 800f818:	b127      	cbz	r7, 800f824 <__gethex+0x2d0>
 800f81a:	4639      	mov	r1, r7
 800f81c:	4620      	mov	r0, r4
 800f81e:	f000 fec4 	bl	80105aa <__any_on>
 800f822:	4681      	mov	r9, r0
 800f824:	117a      	asrs	r2, r7, #5
 800f826:	2301      	movs	r3, #1
 800f828:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f82c:	f007 071f 	and.w	r7, r7, #31
 800f830:	40bb      	lsls	r3, r7
 800f832:	4213      	tst	r3, r2
 800f834:	4629      	mov	r1, r5
 800f836:	4620      	mov	r0, r4
 800f838:	bf18      	it	ne
 800f83a:	f049 0902 	orrne.w	r9, r9, #2
 800f83e:	f7ff fe21 	bl	800f484 <rshift>
 800f842:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f846:	1b76      	subs	r6, r6, r5
 800f848:	2502      	movs	r5, #2
 800f84a:	f1b9 0f00 	cmp.w	r9, #0
 800f84e:	d047      	beq.n	800f8e0 <__gethex+0x38c>
 800f850:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f854:	2b02      	cmp	r3, #2
 800f856:	d015      	beq.n	800f884 <__gethex+0x330>
 800f858:	2b03      	cmp	r3, #3
 800f85a:	d017      	beq.n	800f88c <__gethex+0x338>
 800f85c:	2b01      	cmp	r3, #1
 800f85e:	d109      	bne.n	800f874 <__gethex+0x320>
 800f860:	f019 0f02 	tst.w	r9, #2
 800f864:	d006      	beq.n	800f874 <__gethex+0x320>
 800f866:	f8da 3000 	ldr.w	r3, [sl]
 800f86a:	ea49 0903 	orr.w	r9, r9, r3
 800f86e:	f019 0f01 	tst.w	r9, #1
 800f872:	d10e      	bne.n	800f892 <__gethex+0x33e>
 800f874:	f045 0510 	orr.w	r5, r5, #16
 800f878:	e032      	b.n	800f8e0 <__gethex+0x38c>
 800f87a:	f04f 0901 	mov.w	r9, #1
 800f87e:	e7d1      	b.n	800f824 <__gethex+0x2d0>
 800f880:	2501      	movs	r5, #1
 800f882:	e7e2      	b.n	800f84a <__gethex+0x2f6>
 800f884:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f886:	f1c3 0301 	rsb	r3, r3, #1
 800f88a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f88c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d0f0      	beq.n	800f874 <__gethex+0x320>
 800f892:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f896:	f104 0314 	add.w	r3, r4, #20
 800f89a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f89e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f8a2:	f04f 0c00 	mov.w	ip, #0
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f8b0:	d01b      	beq.n	800f8ea <__gethex+0x396>
 800f8b2:	3201      	adds	r2, #1
 800f8b4:	6002      	str	r2, [r0, #0]
 800f8b6:	2d02      	cmp	r5, #2
 800f8b8:	f104 0314 	add.w	r3, r4, #20
 800f8bc:	d13c      	bne.n	800f938 <__gethex+0x3e4>
 800f8be:	f8d8 2000 	ldr.w	r2, [r8]
 800f8c2:	3a01      	subs	r2, #1
 800f8c4:	42b2      	cmp	r2, r6
 800f8c6:	d109      	bne.n	800f8dc <__gethex+0x388>
 800f8c8:	1171      	asrs	r1, r6, #5
 800f8ca:	2201      	movs	r2, #1
 800f8cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f8d0:	f006 061f 	and.w	r6, r6, #31
 800f8d4:	fa02 f606 	lsl.w	r6, r2, r6
 800f8d8:	421e      	tst	r6, r3
 800f8da:	d13a      	bne.n	800f952 <__gethex+0x3fe>
 800f8dc:	f045 0520 	orr.w	r5, r5, #32
 800f8e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f8e2:	601c      	str	r4, [r3, #0]
 800f8e4:	9b02      	ldr	r3, [sp, #8]
 800f8e6:	601f      	str	r7, [r3, #0]
 800f8e8:	e6b0      	b.n	800f64c <__gethex+0xf8>
 800f8ea:	4299      	cmp	r1, r3
 800f8ec:	f843 cc04 	str.w	ip, [r3, #-4]
 800f8f0:	d8d9      	bhi.n	800f8a6 <__gethex+0x352>
 800f8f2:	68a3      	ldr	r3, [r4, #8]
 800f8f4:	459b      	cmp	fp, r3
 800f8f6:	db17      	blt.n	800f928 <__gethex+0x3d4>
 800f8f8:	6861      	ldr	r1, [r4, #4]
 800f8fa:	9801      	ldr	r0, [sp, #4]
 800f8fc:	3101      	adds	r1, #1
 800f8fe:	f000 f9c3 	bl	800fc88 <_Balloc>
 800f902:	4681      	mov	r9, r0
 800f904:	b918      	cbnz	r0, 800f90e <__gethex+0x3ba>
 800f906:	4b1a      	ldr	r3, [pc, #104]	@ (800f970 <__gethex+0x41c>)
 800f908:	4602      	mov	r2, r0
 800f90a:	2184      	movs	r1, #132	@ 0x84
 800f90c:	e6c5      	b.n	800f69a <__gethex+0x146>
 800f90e:	6922      	ldr	r2, [r4, #16]
 800f910:	3202      	adds	r2, #2
 800f912:	f104 010c 	add.w	r1, r4, #12
 800f916:	0092      	lsls	r2, r2, #2
 800f918:	300c      	adds	r0, #12
 800f91a:	f7fe fefe 	bl	800e71a <memcpy>
 800f91e:	4621      	mov	r1, r4
 800f920:	9801      	ldr	r0, [sp, #4]
 800f922:	f000 f9f1 	bl	800fd08 <_Bfree>
 800f926:	464c      	mov	r4, r9
 800f928:	6923      	ldr	r3, [r4, #16]
 800f92a:	1c5a      	adds	r2, r3, #1
 800f92c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f930:	6122      	str	r2, [r4, #16]
 800f932:	2201      	movs	r2, #1
 800f934:	615a      	str	r2, [r3, #20]
 800f936:	e7be      	b.n	800f8b6 <__gethex+0x362>
 800f938:	6922      	ldr	r2, [r4, #16]
 800f93a:	455a      	cmp	r2, fp
 800f93c:	dd0b      	ble.n	800f956 <__gethex+0x402>
 800f93e:	2101      	movs	r1, #1
 800f940:	4620      	mov	r0, r4
 800f942:	f7ff fd9f 	bl	800f484 <rshift>
 800f946:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f94a:	3701      	adds	r7, #1
 800f94c:	42bb      	cmp	r3, r7
 800f94e:	f6ff aee0 	blt.w	800f712 <__gethex+0x1be>
 800f952:	2501      	movs	r5, #1
 800f954:	e7c2      	b.n	800f8dc <__gethex+0x388>
 800f956:	f016 061f 	ands.w	r6, r6, #31
 800f95a:	d0fa      	beq.n	800f952 <__gethex+0x3fe>
 800f95c:	4453      	add	r3, sl
 800f95e:	f1c6 0620 	rsb	r6, r6, #32
 800f962:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f966:	f000 fa81 	bl	800fe6c <__hi0bits>
 800f96a:	42b0      	cmp	r0, r6
 800f96c:	dbe7      	blt.n	800f93e <__gethex+0x3ea>
 800f96e:	e7f0      	b.n	800f952 <__gethex+0x3fe>
 800f970:	08011675 	.word	0x08011675

0800f974 <L_shift>:
 800f974:	f1c2 0208 	rsb	r2, r2, #8
 800f978:	0092      	lsls	r2, r2, #2
 800f97a:	b570      	push	{r4, r5, r6, lr}
 800f97c:	f1c2 0620 	rsb	r6, r2, #32
 800f980:	6843      	ldr	r3, [r0, #4]
 800f982:	6804      	ldr	r4, [r0, #0]
 800f984:	fa03 f506 	lsl.w	r5, r3, r6
 800f988:	432c      	orrs	r4, r5
 800f98a:	40d3      	lsrs	r3, r2
 800f98c:	6004      	str	r4, [r0, #0]
 800f98e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f992:	4288      	cmp	r0, r1
 800f994:	d3f4      	bcc.n	800f980 <L_shift+0xc>
 800f996:	bd70      	pop	{r4, r5, r6, pc}

0800f998 <__match>:
 800f998:	b530      	push	{r4, r5, lr}
 800f99a:	6803      	ldr	r3, [r0, #0]
 800f99c:	3301      	adds	r3, #1
 800f99e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9a2:	b914      	cbnz	r4, 800f9aa <__match+0x12>
 800f9a4:	6003      	str	r3, [r0, #0]
 800f9a6:	2001      	movs	r0, #1
 800f9a8:	bd30      	pop	{r4, r5, pc}
 800f9aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9ae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f9b2:	2d19      	cmp	r5, #25
 800f9b4:	bf98      	it	ls
 800f9b6:	3220      	addls	r2, #32
 800f9b8:	42a2      	cmp	r2, r4
 800f9ba:	d0f0      	beq.n	800f99e <__match+0x6>
 800f9bc:	2000      	movs	r0, #0
 800f9be:	e7f3      	b.n	800f9a8 <__match+0x10>

0800f9c0 <__hexnan>:
 800f9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9c4:	680b      	ldr	r3, [r1, #0]
 800f9c6:	6801      	ldr	r1, [r0, #0]
 800f9c8:	115e      	asrs	r6, r3, #5
 800f9ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f9ce:	f013 031f 	ands.w	r3, r3, #31
 800f9d2:	b087      	sub	sp, #28
 800f9d4:	bf18      	it	ne
 800f9d6:	3604      	addne	r6, #4
 800f9d8:	2500      	movs	r5, #0
 800f9da:	1f37      	subs	r7, r6, #4
 800f9dc:	4682      	mov	sl, r0
 800f9de:	4690      	mov	r8, r2
 800f9e0:	9301      	str	r3, [sp, #4]
 800f9e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800f9e6:	46b9      	mov	r9, r7
 800f9e8:	463c      	mov	r4, r7
 800f9ea:	9502      	str	r5, [sp, #8]
 800f9ec:	46ab      	mov	fp, r5
 800f9ee:	784a      	ldrb	r2, [r1, #1]
 800f9f0:	1c4b      	adds	r3, r1, #1
 800f9f2:	9303      	str	r3, [sp, #12]
 800f9f4:	b342      	cbz	r2, 800fa48 <__hexnan+0x88>
 800f9f6:	4610      	mov	r0, r2
 800f9f8:	9105      	str	r1, [sp, #20]
 800f9fa:	9204      	str	r2, [sp, #16]
 800f9fc:	f7ff fd94 	bl	800f528 <__hexdig_fun>
 800fa00:	2800      	cmp	r0, #0
 800fa02:	d151      	bne.n	800faa8 <__hexnan+0xe8>
 800fa04:	9a04      	ldr	r2, [sp, #16]
 800fa06:	9905      	ldr	r1, [sp, #20]
 800fa08:	2a20      	cmp	r2, #32
 800fa0a:	d818      	bhi.n	800fa3e <__hexnan+0x7e>
 800fa0c:	9b02      	ldr	r3, [sp, #8]
 800fa0e:	459b      	cmp	fp, r3
 800fa10:	dd13      	ble.n	800fa3a <__hexnan+0x7a>
 800fa12:	454c      	cmp	r4, r9
 800fa14:	d206      	bcs.n	800fa24 <__hexnan+0x64>
 800fa16:	2d07      	cmp	r5, #7
 800fa18:	dc04      	bgt.n	800fa24 <__hexnan+0x64>
 800fa1a:	462a      	mov	r2, r5
 800fa1c:	4649      	mov	r1, r9
 800fa1e:	4620      	mov	r0, r4
 800fa20:	f7ff ffa8 	bl	800f974 <L_shift>
 800fa24:	4544      	cmp	r4, r8
 800fa26:	d952      	bls.n	800face <__hexnan+0x10e>
 800fa28:	2300      	movs	r3, #0
 800fa2a:	f1a4 0904 	sub.w	r9, r4, #4
 800fa2e:	f844 3c04 	str.w	r3, [r4, #-4]
 800fa32:	f8cd b008 	str.w	fp, [sp, #8]
 800fa36:	464c      	mov	r4, r9
 800fa38:	461d      	mov	r5, r3
 800fa3a:	9903      	ldr	r1, [sp, #12]
 800fa3c:	e7d7      	b.n	800f9ee <__hexnan+0x2e>
 800fa3e:	2a29      	cmp	r2, #41	@ 0x29
 800fa40:	d157      	bne.n	800faf2 <__hexnan+0x132>
 800fa42:	3102      	adds	r1, #2
 800fa44:	f8ca 1000 	str.w	r1, [sl]
 800fa48:	f1bb 0f00 	cmp.w	fp, #0
 800fa4c:	d051      	beq.n	800faf2 <__hexnan+0x132>
 800fa4e:	454c      	cmp	r4, r9
 800fa50:	d206      	bcs.n	800fa60 <__hexnan+0xa0>
 800fa52:	2d07      	cmp	r5, #7
 800fa54:	dc04      	bgt.n	800fa60 <__hexnan+0xa0>
 800fa56:	462a      	mov	r2, r5
 800fa58:	4649      	mov	r1, r9
 800fa5a:	4620      	mov	r0, r4
 800fa5c:	f7ff ff8a 	bl	800f974 <L_shift>
 800fa60:	4544      	cmp	r4, r8
 800fa62:	d936      	bls.n	800fad2 <__hexnan+0x112>
 800fa64:	f1a8 0204 	sub.w	r2, r8, #4
 800fa68:	4623      	mov	r3, r4
 800fa6a:	f853 1b04 	ldr.w	r1, [r3], #4
 800fa6e:	f842 1f04 	str.w	r1, [r2, #4]!
 800fa72:	429f      	cmp	r7, r3
 800fa74:	d2f9      	bcs.n	800fa6a <__hexnan+0xaa>
 800fa76:	1b3b      	subs	r3, r7, r4
 800fa78:	f023 0303 	bic.w	r3, r3, #3
 800fa7c:	3304      	adds	r3, #4
 800fa7e:	3401      	adds	r4, #1
 800fa80:	3e03      	subs	r6, #3
 800fa82:	42b4      	cmp	r4, r6
 800fa84:	bf88      	it	hi
 800fa86:	2304      	movhi	r3, #4
 800fa88:	4443      	add	r3, r8
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	f843 2b04 	str.w	r2, [r3], #4
 800fa90:	429f      	cmp	r7, r3
 800fa92:	d2fb      	bcs.n	800fa8c <__hexnan+0xcc>
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	b91b      	cbnz	r3, 800faa0 <__hexnan+0xe0>
 800fa98:	4547      	cmp	r7, r8
 800fa9a:	d128      	bne.n	800faee <__hexnan+0x12e>
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	603b      	str	r3, [r7, #0]
 800faa0:	2005      	movs	r0, #5
 800faa2:	b007      	add	sp, #28
 800faa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faa8:	3501      	adds	r5, #1
 800faaa:	2d08      	cmp	r5, #8
 800faac:	f10b 0b01 	add.w	fp, fp, #1
 800fab0:	dd06      	ble.n	800fac0 <__hexnan+0x100>
 800fab2:	4544      	cmp	r4, r8
 800fab4:	d9c1      	bls.n	800fa3a <__hexnan+0x7a>
 800fab6:	2300      	movs	r3, #0
 800fab8:	f844 3c04 	str.w	r3, [r4, #-4]
 800fabc:	2501      	movs	r5, #1
 800fabe:	3c04      	subs	r4, #4
 800fac0:	6822      	ldr	r2, [r4, #0]
 800fac2:	f000 000f 	and.w	r0, r0, #15
 800fac6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800faca:	6020      	str	r0, [r4, #0]
 800facc:	e7b5      	b.n	800fa3a <__hexnan+0x7a>
 800face:	2508      	movs	r5, #8
 800fad0:	e7b3      	b.n	800fa3a <__hexnan+0x7a>
 800fad2:	9b01      	ldr	r3, [sp, #4]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d0dd      	beq.n	800fa94 <__hexnan+0xd4>
 800fad8:	f1c3 0320 	rsb	r3, r3, #32
 800fadc:	f04f 32ff 	mov.w	r2, #4294967295
 800fae0:	40da      	lsrs	r2, r3
 800fae2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800fae6:	4013      	ands	r3, r2
 800fae8:	f846 3c04 	str.w	r3, [r6, #-4]
 800faec:	e7d2      	b.n	800fa94 <__hexnan+0xd4>
 800faee:	3f04      	subs	r7, #4
 800faf0:	e7d0      	b.n	800fa94 <__hexnan+0xd4>
 800faf2:	2004      	movs	r0, #4
 800faf4:	e7d5      	b.n	800faa2 <__hexnan+0xe2>
	...

0800faf8 <malloc>:
 800faf8:	4b02      	ldr	r3, [pc, #8]	@ (800fb04 <malloc+0xc>)
 800fafa:	4601      	mov	r1, r0
 800fafc:	6818      	ldr	r0, [r3, #0]
 800fafe:	f000 b825 	b.w	800fb4c <_malloc_r>
 800fb02:	bf00      	nop
 800fb04:	20000208 	.word	0x20000208

0800fb08 <sbrk_aligned>:
 800fb08:	b570      	push	{r4, r5, r6, lr}
 800fb0a:	4e0f      	ldr	r6, [pc, #60]	@ (800fb48 <sbrk_aligned+0x40>)
 800fb0c:	460c      	mov	r4, r1
 800fb0e:	6831      	ldr	r1, [r6, #0]
 800fb10:	4605      	mov	r5, r0
 800fb12:	b911      	cbnz	r1, 800fb1a <sbrk_aligned+0x12>
 800fb14:	f001 f810 	bl	8010b38 <_sbrk_r>
 800fb18:	6030      	str	r0, [r6, #0]
 800fb1a:	4621      	mov	r1, r4
 800fb1c:	4628      	mov	r0, r5
 800fb1e:	f001 f80b 	bl	8010b38 <_sbrk_r>
 800fb22:	1c43      	adds	r3, r0, #1
 800fb24:	d103      	bne.n	800fb2e <sbrk_aligned+0x26>
 800fb26:	f04f 34ff 	mov.w	r4, #4294967295
 800fb2a:	4620      	mov	r0, r4
 800fb2c:	bd70      	pop	{r4, r5, r6, pc}
 800fb2e:	1cc4      	adds	r4, r0, #3
 800fb30:	f024 0403 	bic.w	r4, r4, #3
 800fb34:	42a0      	cmp	r0, r4
 800fb36:	d0f8      	beq.n	800fb2a <sbrk_aligned+0x22>
 800fb38:	1a21      	subs	r1, r4, r0
 800fb3a:	4628      	mov	r0, r5
 800fb3c:	f000 fffc 	bl	8010b38 <_sbrk_r>
 800fb40:	3001      	adds	r0, #1
 800fb42:	d1f2      	bne.n	800fb2a <sbrk_aligned+0x22>
 800fb44:	e7ef      	b.n	800fb26 <sbrk_aligned+0x1e>
 800fb46:	bf00      	nop
 800fb48:	20000a3c 	.word	0x20000a3c

0800fb4c <_malloc_r>:
 800fb4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb50:	1ccd      	adds	r5, r1, #3
 800fb52:	f025 0503 	bic.w	r5, r5, #3
 800fb56:	3508      	adds	r5, #8
 800fb58:	2d0c      	cmp	r5, #12
 800fb5a:	bf38      	it	cc
 800fb5c:	250c      	movcc	r5, #12
 800fb5e:	2d00      	cmp	r5, #0
 800fb60:	4606      	mov	r6, r0
 800fb62:	db01      	blt.n	800fb68 <_malloc_r+0x1c>
 800fb64:	42a9      	cmp	r1, r5
 800fb66:	d904      	bls.n	800fb72 <_malloc_r+0x26>
 800fb68:	230c      	movs	r3, #12
 800fb6a:	6033      	str	r3, [r6, #0]
 800fb6c:	2000      	movs	r0, #0
 800fb6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fc48 <_malloc_r+0xfc>
 800fb76:	f000 f87b 	bl	800fc70 <__malloc_lock>
 800fb7a:	f8d8 3000 	ldr.w	r3, [r8]
 800fb7e:	461c      	mov	r4, r3
 800fb80:	bb44      	cbnz	r4, 800fbd4 <_malloc_r+0x88>
 800fb82:	4629      	mov	r1, r5
 800fb84:	4630      	mov	r0, r6
 800fb86:	f7ff ffbf 	bl	800fb08 <sbrk_aligned>
 800fb8a:	1c43      	adds	r3, r0, #1
 800fb8c:	4604      	mov	r4, r0
 800fb8e:	d158      	bne.n	800fc42 <_malloc_r+0xf6>
 800fb90:	f8d8 4000 	ldr.w	r4, [r8]
 800fb94:	4627      	mov	r7, r4
 800fb96:	2f00      	cmp	r7, #0
 800fb98:	d143      	bne.n	800fc22 <_malloc_r+0xd6>
 800fb9a:	2c00      	cmp	r4, #0
 800fb9c:	d04b      	beq.n	800fc36 <_malloc_r+0xea>
 800fb9e:	6823      	ldr	r3, [r4, #0]
 800fba0:	4639      	mov	r1, r7
 800fba2:	4630      	mov	r0, r6
 800fba4:	eb04 0903 	add.w	r9, r4, r3
 800fba8:	f000 ffc6 	bl	8010b38 <_sbrk_r>
 800fbac:	4581      	cmp	r9, r0
 800fbae:	d142      	bne.n	800fc36 <_malloc_r+0xea>
 800fbb0:	6821      	ldr	r1, [r4, #0]
 800fbb2:	1a6d      	subs	r5, r5, r1
 800fbb4:	4629      	mov	r1, r5
 800fbb6:	4630      	mov	r0, r6
 800fbb8:	f7ff ffa6 	bl	800fb08 <sbrk_aligned>
 800fbbc:	3001      	adds	r0, #1
 800fbbe:	d03a      	beq.n	800fc36 <_malloc_r+0xea>
 800fbc0:	6823      	ldr	r3, [r4, #0]
 800fbc2:	442b      	add	r3, r5
 800fbc4:	6023      	str	r3, [r4, #0]
 800fbc6:	f8d8 3000 	ldr.w	r3, [r8]
 800fbca:	685a      	ldr	r2, [r3, #4]
 800fbcc:	bb62      	cbnz	r2, 800fc28 <_malloc_r+0xdc>
 800fbce:	f8c8 7000 	str.w	r7, [r8]
 800fbd2:	e00f      	b.n	800fbf4 <_malloc_r+0xa8>
 800fbd4:	6822      	ldr	r2, [r4, #0]
 800fbd6:	1b52      	subs	r2, r2, r5
 800fbd8:	d420      	bmi.n	800fc1c <_malloc_r+0xd0>
 800fbda:	2a0b      	cmp	r2, #11
 800fbdc:	d917      	bls.n	800fc0e <_malloc_r+0xc2>
 800fbde:	1961      	adds	r1, r4, r5
 800fbe0:	42a3      	cmp	r3, r4
 800fbe2:	6025      	str	r5, [r4, #0]
 800fbe4:	bf18      	it	ne
 800fbe6:	6059      	strne	r1, [r3, #4]
 800fbe8:	6863      	ldr	r3, [r4, #4]
 800fbea:	bf08      	it	eq
 800fbec:	f8c8 1000 	streq.w	r1, [r8]
 800fbf0:	5162      	str	r2, [r4, r5]
 800fbf2:	604b      	str	r3, [r1, #4]
 800fbf4:	4630      	mov	r0, r6
 800fbf6:	f000 f841 	bl	800fc7c <__malloc_unlock>
 800fbfa:	f104 000b 	add.w	r0, r4, #11
 800fbfe:	1d23      	adds	r3, r4, #4
 800fc00:	f020 0007 	bic.w	r0, r0, #7
 800fc04:	1ac2      	subs	r2, r0, r3
 800fc06:	bf1c      	itt	ne
 800fc08:	1a1b      	subne	r3, r3, r0
 800fc0a:	50a3      	strne	r3, [r4, r2]
 800fc0c:	e7af      	b.n	800fb6e <_malloc_r+0x22>
 800fc0e:	6862      	ldr	r2, [r4, #4]
 800fc10:	42a3      	cmp	r3, r4
 800fc12:	bf0c      	ite	eq
 800fc14:	f8c8 2000 	streq.w	r2, [r8]
 800fc18:	605a      	strne	r2, [r3, #4]
 800fc1a:	e7eb      	b.n	800fbf4 <_malloc_r+0xa8>
 800fc1c:	4623      	mov	r3, r4
 800fc1e:	6864      	ldr	r4, [r4, #4]
 800fc20:	e7ae      	b.n	800fb80 <_malloc_r+0x34>
 800fc22:	463c      	mov	r4, r7
 800fc24:	687f      	ldr	r7, [r7, #4]
 800fc26:	e7b6      	b.n	800fb96 <_malloc_r+0x4a>
 800fc28:	461a      	mov	r2, r3
 800fc2a:	685b      	ldr	r3, [r3, #4]
 800fc2c:	42a3      	cmp	r3, r4
 800fc2e:	d1fb      	bne.n	800fc28 <_malloc_r+0xdc>
 800fc30:	2300      	movs	r3, #0
 800fc32:	6053      	str	r3, [r2, #4]
 800fc34:	e7de      	b.n	800fbf4 <_malloc_r+0xa8>
 800fc36:	230c      	movs	r3, #12
 800fc38:	6033      	str	r3, [r6, #0]
 800fc3a:	4630      	mov	r0, r6
 800fc3c:	f000 f81e 	bl	800fc7c <__malloc_unlock>
 800fc40:	e794      	b.n	800fb6c <_malloc_r+0x20>
 800fc42:	6005      	str	r5, [r0, #0]
 800fc44:	e7d6      	b.n	800fbf4 <_malloc_r+0xa8>
 800fc46:	bf00      	nop
 800fc48:	20000a40 	.word	0x20000a40

0800fc4c <__ascii_mbtowc>:
 800fc4c:	b082      	sub	sp, #8
 800fc4e:	b901      	cbnz	r1, 800fc52 <__ascii_mbtowc+0x6>
 800fc50:	a901      	add	r1, sp, #4
 800fc52:	b142      	cbz	r2, 800fc66 <__ascii_mbtowc+0x1a>
 800fc54:	b14b      	cbz	r3, 800fc6a <__ascii_mbtowc+0x1e>
 800fc56:	7813      	ldrb	r3, [r2, #0]
 800fc58:	600b      	str	r3, [r1, #0]
 800fc5a:	7812      	ldrb	r2, [r2, #0]
 800fc5c:	1e10      	subs	r0, r2, #0
 800fc5e:	bf18      	it	ne
 800fc60:	2001      	movne	r0, #1
 800fc62:	b002      	add	sp, #8
 800fc64:	4770      	bx	lr
 800fc66:	4610      	mov	r0, r2
 800fc68:	e7fb      	b.n	800fc62 <__ascii_mbtowc+0x16>
 800fc6a:	f06f 0001 	mvn.w	r0, #1
 800fc6e:	e7f8      	b.n	800fc62 <__ascii_mbtowc+0x16>

0800fc70 <__malloc_lock>:
 800fc70:	4801      	ldr	r0, [pc, #4]	@ (800fc78 <__malloc_lock+0x8>)
 800fc72:	f7fe bd50 	b.w	800e716 <__retarget_lock_acquire_recursive>
 800fc76:	bf00      	nop
 800fc78:	20000a38 	.word	0x20000a38

0800fc7c <__malloc_unlock>:
 800fc7c:	4801      	ldr	r0, [pc, #4]	@ (800fc84 <__malloc_unlock+0x8>)
 800fc7e:	f7fe bd4b 	b.w	800e718 <__retarget_lock_release_recursive>
 800fc82:	bf00      	nop
 800fc84:	20000a38 	.word	0x20000a38

0800fc88 <_Balloc>:
 800fc88:	b570      	push	{r4, r5, r6, lr}
 800fc8a:	69c6      	ldr	r6, [r0, #28]
 800fc8c:	4604      	mov	r4, r0
 800fc8e:	460d      	mov	r5, r1
 800fc90:	b976      	cbnz	r6, 800fcb0 <_Balloc+0x28>
 800fc92:	2010      	movs	r0, #16
 800fc94:	f7ff ff30 	bl	800faf8 <malloc>
 800fc98:	4602      	mov	r2, r0
 800fc9a:	61e0      	str	r0, [r4, #28]
 800fc9c:	b920      	cbnz	r0, 800fca8 <_Balloc+0x20>
 800fc9e:	4b18      	ldr	r3, [pc, #96]	@ (800fd00 <_Balloc+0x78>)
 800fca0:	4818      	ldr	r0, [pc, #96]	@ (800fd04 <_Balloc+0x7c>)
 800fca2:	216b      	movs	r1, #107	@ 0x6b
 800fca4:	f000 ff58 	bl	8010b58 <__assert_func>
 800fca8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fcac:	6006      	str	r6, [r0, #0]
 800fcae:	60c6      	str	r6, [r0, #12]
 800fcb0:	69e6      	ldr	r6, [r4, #28]
 800fcb2:	68f3      	ldr	r3, [r6, #12]
 800fcb4:	b183      	cbz	r3, 800fcd8 <_Balloc+0x50>
 800fcb6:	69e3      	ldr	r3, [r4, #28]
 800fcb8:	68db      	ldr	r3, [r3, #12]
 800fcba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fcbe:	b9b8      	cbnz	r0, 800fcf0 <_Balloc+0x68>
 800fcc0:	2101      	movs	r1, #1
 800fcc2:	fa01 f605 	lsl.w	r6, r1, r5
 800fcc6:	1d72      	adds	r2, r6, #5
 800fcc8:	0092      	lsls	r2, r2, #2
 800fcca:	4620      	mov	r0, r4
 800fccc:	f000 ff62 	bl	8010b94 <_calloc_r>
 800fcd0:	b160      	cbz	r0, 800fcec <_Balloc+0x64>
 800fcd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fcd6:	e00e      	b.n	800fcf6 <_Balloc+0x6e>
 800fcd8:	2221      	movs	r2, #33	@ 0x21
 800fcda:	2104      	movs	r1, #4
 800fcdc:	4620      	mov	r0, r4
 800fcde:	f000 ff59 	bl	8010b94 <_calloc_r>
 800fce2:	69e3      	ldr	r3, [r4, #28]
 800fce4:	60f0      	str	r0, [r6, #12]
 800fce6:	68db      	ldr	r3, [r3, #12]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d1e4      	bne.n	800fcb6 <_Balloc+0x2e>
 800fcec:	2000      	movs	r0, #0
 800fcee:	bd70      	pop	{r4, r5, r6, pc}
 800fcf0:	6802      	ldr	r2, [r0, #0]
 800fcf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fcfc:	e7f7      	b.n	800fcee <_Balloc+0x66>
 800fcfe:	bf00      	nop
 800fd00:	08011606 	.word	0x08011606
 800fd04:	080116e6 	.word	0x080116e6

0800fd08 <_Bfree>:
 800fd08:	b570      	push	{r4, r5, r6, lr}
 800fd0a:	69c6      	ldr	r6, [r0, #28]
 800fd0c:	4605      	mov	r5, r0
 800fd0e:	460c      	mov	r4, r1
 800fd10:	b976      	cbnz	r6, 800fd30 <_Bfree+0x28>
 800fd12:	2010      	movs	r0, #16
 800fd14:	f7ff fef0 	bl	800faf8 <malloc>
 800fd18:	4602      	mov	r2, r0
 800fd1a:	61e8      	str	r0, [r5, #28]
 800fd1c:	b920      	cbnz	r0, 800fd28 <_Bfree+0x20>
 800fd1e:	4b09      	ldr	r3, [pc, #36]	@ (800fd44 <_Bfree+0x3c>)
 800fd20:	4809      	ldr	r0, [pc, #36]	@ (800fd48 <_Bfree+0x40>)
 800fd22:	218f      	movs	r1, #143	@ 0x8f
 800fd24:	f000 ff18 	bl	8010b58 <__assert_func>
 800fd28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd2c:	6006      	str	r6, [r0, #0]
 800fd2e:	60c6      	str	r6, [r0, #12]
 800fd30:	b13c      	cbz	r4, 800fd42 <_Bfree+0x3a>
 800fd32:	69eb      	ldr	r3, [r5, #28]
 800fd34:	6862      	ldr	r2, [r4, #4]
 800fd36:	68db      	ldr	r3, [r3, #12]
 800fd38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fd3c:	6021      	str	r1, [r4, #0]
 800fd3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fd42:	bd70      	pop	{r4, r5, r6, pc}
 800fd44:	08011606 	.word	0x08011606
 800fd48:	080116e6 	.word	0x080116e6

0800fd4c <__multadd>:
 800fd4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd50:	690d      	ldr	r5, [r1, #16]
 800fd52:	4607      	mov	r7, r0
 800fd54:	460c      	mov	r4, r1
 800fd56:	461e      	mov	r6, r3
 800fd58:	f101 0c14 	add.w	ip, r1, #20
 800fd5c:	2000      	movs	r0, #0
 800fd5e:	f8dc 3000 	ldr.w	r3, [ip]
 800fd62:	b299      	uxth	r1, r3
 800fd64:	fb02 6101 	mla	r1, r2, r1, r6
 800fd68:	0c1e      	lsrs	r6, r3, #16
 800fd6a:	0c0b      	lsrs	r3, r1, #16
 800fd6c:	fb02 3306 	mla	r3, r2, r6, r3
 800fd70:	b289      	uxth	r1, r1
 800fd72:	3001      	adds	r0, #1
 800fd74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fd78:	4285      	cmp	r5, r0
 800fd7a:	f84c 1b04 	str.w	r1, [ip], #4
 800fd7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fd82:	dcec      	bgt.n	800fd5e <__multadd+0x12>
 800fd84:	b30e      	cbz	r6, 800fdca <__multadd+0x7e>
 800fd86:	68a3      	ldr	r3, [r4, #8]
 800fd88:	42ab      	cmp	r3, r5
 800fd8a:	dc19      	bgt.n	800fdc0 <__multadd+0x74>
 800fd8c:	6861      	ldr	r1, [r4, #4]
 800fd8e:	4638      	mov	r0, r7
 800fd90:	3101      	adds	r1, #1
 800fd92:	f7ff ff79 	bl	800fc88 <_Balloc>
 800fd96:	4680      	mov	r8, r0
 800fd98:	b928      	cbnz	r0, 800fda6 <__multadd+0x5a>
 800fd9a:	4602      	mov	r2, r0
 800fd9c:	4b0c      	ldr	r3, [pc, #48]	@ (800fdd0 <__multadd+0x84>)
 800fd9e:	480d      	ldr	r0, [pc, #52]	@ (800fdd4 <__multadd+0x88>)
 800fda0:	21ba      	movs	r1, #186	@ 0xba
 800fda2:	f000 fed9 	bl	8010b58 <__assert_func>
 800fda6:	6922      	ldr	r2, [r4, #16]
 800fda8:	3202      	adds	r2, #2
 800fdaa:	f104 010c 	add.w	r1, r4, #12
 800fdae:	0092      	lsls	r2, r2, #2
 800fdb0:	300c      	adds	r0, #12
 800fdb2:	f7fe fcb2 	bl	800e71a <memcpy>
 800fdb6:	4621      	mov	r1, r4
 800fdb8:	4638      	mov	r0, r7
 800fdba:	f7ff ffa5 	bl	800fd08 <_Bfree>
 800fdbe:	4644      	mov	r4, r8
 800fdc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fdc4:	3501      	adds	r5, #1
 800fdc6:	615e      	str	r6, [r3, #20]
 800fdc8:	6125      	str	r5, [r4, #16]
 800fdca:	4620      	mov	r0, r4
 800fdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdd0:	08011675 	.word	0x08011675
 800fdd4:	080116e6 	.word	0x080116e6

0800fdd8 <__s2b>:
 800fdd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fddc:	460c      	mov	r4, r1
 800fdde:	4615      	mov	r5, r2
 800fde0:	461f      	mov	r7, r3
 800fde2:	2209      	movs	r2, #9
 800fde4:	3308      	adds	r3, #8
 800fde6:	4606      	mov	r6, r0
 800fde8:	fb93 f3f2 	sdiv	r3, r3, r2
 800fdec:	2100      	movs	r1, #0
 800fdee:	2201      	movs	r2, #1
 800fdf0:	429a      	cmp	r2, r3
 800fdf2:	db09      	blt.n	800fe08 <__s2b+0x30>
 800fdf4:	4630      	mov	r0, r6
 800fdf6:	f7ff ff47 	bl	800fc88 <_Balloc>
 800fdfa:	b940      	cbnz	r0, 800fe0e <__s2b+0x36>
 800fdfc:	4602      	mov	r2, r0
 800fdfe:	4b19      	ldr	r3, [pc, #100]	@ (800fe64 <__s2b+0x8c>)
 800fe00:	4819      	ldr	r0, [pc, #100]	@ (800fe68 <__s2b+0x90>)
 800fe02:	21d3      	movs	r1, #211	@ 0xd3
 800fe04:	f000 fea8 	bl	8010b58 <__assert_func>
 800fe08:	0052      	lsls	r2, r2, #1
 800fe0a:	3101      	adds	r1, #1
 800fe0c:	e7f0      	b.n	800fdf0 <__s2b+0x18>
 800fe0e:	9b08      	ldr	r3, [sp, #32]
 800fe10:	6143      	str	r3, [r0, #20]
 800fe12:	2d09      	cmp	r5, #9
 800fe14:	f04f 0301 	mov.w	r3, #1
 800fe18:	6103      	str	r3, [r0, #16]
 800fe1a:	dd16      	ble.n	800fe4a <__s2b+0x72>
 800fe1c:	f104 0909 	add.w	r9, r4, #9
 800fe20:	46c8      	mov	r8, r9
 800fe22:	442c      	add	r4, r5
 800fe24:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fe28:	4601      	mov	r1, r0
 800fe2a:	3b30      	subs	r3, #48	@ 0x30
 800fe2c:	220a      	movs	r2, #10
 800fe2e:	4630      	mov	r0, r6
 800fe30:	f7ff ff8c 	bl	800fd4c <__multadd>
 800fe34:	45a0      	cmp	r8, r4
 800fe36:	d1f5      	bne.n	800fe24 <__s2b+0x4c>
 800fe38:	f1a5 0408 	sub.w	r4, r5, #8
 800fe3c:	444c      	add	r4, r9
 800fe3e:	1b2d      	subs	r5, r5, r4
 800fe40:	1963      	adds	r3, r4, r5
 800fe42:	42bb      	cmp	r3, r7
 800fe44:	db04      	blt.n	800fe50 <__s2b+0x78>
 800fe46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe4a:	340a      	adds	r4, #10
 800fe4c:	2509      	movs	r5, #9
 800fe4e:	e7f6      	b.n	800fe3e <__s2b+0x66>
 800fe50:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fe54:	4601      	mov	r1, r0
 800fe56:	3b30      	subs	r3, #48	@ 0x30
 800fe58:	220a      	movs	r2, #10
 800fe5a:	4630      	mov	r0, r6
 800fe5c:	f7ff ff76 	bl	800fd4c <__multadd>
 800fe60:	e7ee      	b.n	800fe40 <__s2b+0x68>
 800fe62:	bf00      	nop
 800fe64:	08011675 	.word	0x08011675
 800fe68:	080116e6 	.word	0x080116e6

0800fe6c <__hi0bits>:
 800fe6c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fe70:	4603      	mov	r3, r0
 800fe72:	bf36      	itet	cc
 800fe74:	0403      	lslcc	r3, r0, #16
 800fe76:	2000      	movcs	r0, #0
 800fe78:	2010      	movcc	r0, #16
 800fe7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fe7e:	bf3c      	itt	cc
 800fe80:	021b      	lslcc	r3, r3, #8
 800fe82:	3008      	addcc	r0, #8
 800fe84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fe88:	bf3c      	itt	cc
 800fe8a:	011b      	lslcc	r3, r3, #4
 800fe8c:	3004      	addcc	r0, #4
 800fe8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fe92:	bf3c      	itt	cc
 800fe94:	009b      	lslcc	r3, r3, #2
 800fe96:	3002      	addcc	r0, #2
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	db05      	blt.n	800fea8 <__hi0bits+0x3c>
 800fe9c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fea0:	f100 0001 	add.w	r0, r0, #1
 800fea4:	bf08      	it	eq
 800fea6:	2020      	moveq	r0, #32
 800fea8:	4770      	bx	lr

0800feaa <__lo0bits>:
 800feaa:	6803      	ldr	r3, [r0, #0]
 800feac:	4602      	mov	r2, r0
 800feae:	f013 0007 	ands.w	r0, r3, #7
 800feb2:	d00b      	beq.n	800fecc <__lo0bits+0x22>
 800feb4:	07d9      	lsls	r1, r3, #31
 800feb6:	d421      	bmi.n	800fefc <__lo0bits+0x52>
 800feb8:	0798      	lsls	r0, r3, #30
 800feba:	bf49      	itett	mi
 800febc:	085b      	lsrmi	r3, r3, #1
 800febe:	089b      	lsrpl	r3, r3, #2
 800fec0:	2001      	movmi	r0, #1
 800fec2:	6013      	strmi	r3, [r2, #0]
 800fec4:	bf5c      	itt	pl
 800fec6:	6013      	strpl	r3, [r2, #0]
 800fec8:	2002      	movpl	r0, #2
 800feca:	4770      	bx	lr
 800fecc:	b299      	uxth	r1, r3
 800fece:	b909      	cbnz	r1, 800fed4 <__lo0bits+0x2a>
 800fed0:	0c1b      	lsrs	r3, r3, #16
 800fed2:	2010      	movs	r0, #16
 800fed4:	b2d9      	uxtb	r1, r3
 800fed6:	b909      	cbnz	r1, 800fedc <__lo0bits+0x32>
 800fed8:	3008      	adds	r0, #8
 800feda:	0a1b      	lsrs	r3, r3, #8
 800fedc:	0719      	lsls	r1, r3, #28
 800fede:	bf04      	itt	eq
 800fee0:	091b      	lsreq	r3, r3, #4
 800fee2:	3004      	addeq	r0, #4
 800fee4:	0799      	lsls	r1, r3, #30
 800fee6:	bf04      	itt	eq
 800fee8:	089b      	lsreq	r3, r3, #2
 800feea:	3002      	addeq	r0, #2
 800feec:	07d9      	lsls	r1, r3, #31
 800feee:	d403      	bmi.n	800fef8 <__lo0bits+0x4e>
 800fef0:	085b      	lsrs	r3, r3, #1
 800fef2:	f100 0001 	add.w	r0, r0, #1
 800fef6:	d003      	beq.n	800ff00 <__lo0bits+0x56>
 800fef8:	6013      	str	r3, [r2, #0]
 800fefa:	4770      	bx	lr
 800fefc:	2000      	movs	r0, #0
 800fefe:	4770      	bx	lr
 800ff00:	2020      	movs	r0, #32
 800ff02:	4770      	bx	lr

0800ff04 <__i2b>:
 800ff04:	b510      	push	{r4, lr}
 800ff06:	460c      	mov	r4, r1
 800ff08:	2101      	movs	r1, #1
 800ff0a:	f7ff febd 	bl	800fc88 <_Balloc>
 800ff0e:	4602      	mov	r2, r0
 800ff10:	b928      	cbnz	r0, 800ff1e <__i2b+0x1a>
 800ff12:	4b05      	ldr	r3, [pc, #20]	@ (800ff28 <__i2b+0x24>)
 800ff14:	4805      	ldr	r0, [pc, #20]	@ (800ff2c <__i2b+0x28>)
 800ff16:	f240 1145 	movw	r1, #325	@ 0x145
 800ff1a:	f000 fe1d 	bl	8010b58 <__assert_func>
 800ff1e:	2301      	movs	r3, #1
 800ff20:	6144      	str	r4, [r0, #20]
 800ff22:	6103      	str	r3, [r0, #16]
 800ff24:	bd10      	pop	{r4, pc}
 800ff26:	bf00      	nop
 800ff28:	08011675 	.word	0x08011675
 800ff2c:	080116e6 	.word	0x080116e6

0800ff30 <__multiply>:
 800ff30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff34:	4614      	mov	r4, r2
 800ff36:	690a      	ldr	r2, [r1, #16]
 800ff38:	6923      	ldr	r3, [r4, #16]
 800ff3a:	429a      	cmp	r2, r3
 800ff3c:	bfa8      	it	ge
 800ff3e:	4623      	movge	r3, r4
 800ff40:	460f      	mov	r7, r1
 800ff42:	bfa4      	itt	ge
 800ff44:	460c      	movge	r4, r1
 800ff46:	461f      	movge	r7, r3
 800ff48:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ff4c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ff50:	68a3      	ldr	r3, [r4, #8]
 800ff52:	6861      	ldr	r1, [r4, #4]
 800ff54:	eb0a 0609 	add.w	r6, sl, r9
 800ff58:	42b3      	cmp	r3, r6
 800ff5a:	b085      	sub	sp, #20
 800ff5c:	bfb8      	it	lt
 800ff5e:	3101      	addlt	r1, #1
 800ff60:	f7ff fe92 	bl	800fc88 <_Balloc>
 800ff64:	b930      	cbnz	r0, 800ff74 <__multiply+0x44>
 800ff66:	4602      	mov	r2, r0
 800ff68:	4b44      	ldr	r3, [pc, #272]	@ (801007c <__multiply+0x14c>)
 800ff6a:	4845      	ldr	r0, [pc, #276]	@ (8010080 <__multiply+0x150>)
 800ff6c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ff70:	f000 fdf2 	bl	8010b58 <__assert_func>
 800ff74:	f100 0514 	add.w	r5, r0, #20
 800ff78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ff7c:	462b      	mov	r3, r5
 800ff7e:	2200      	movs	r2, #0
 800ff80:	4543      	cmp	r3, r8
 800ff82:	d321      	bcc.n	800ffc8 <__multiply+0x98>
 800ff84:	f107 0114 	add.w	r1, r7, #20
 800ff88:	f104 0214 	add.w	r2, r4, #20
 800ff8c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ff90:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ff94:	9302      	str	r3, [sp, #8]
 800ff96:	1b13      	subs	r3, r2, r4
 800ff98:	3b15      	subs	r3, #21
 800ff9a:	f023 0303 	bic.w	r3, r3, #3
 800ff9e:	3304      	adds	r3, #4
 800ffa0:	f104 0715 	add.w	r7, r4, #21
 800ffa4:	42ba      	cmp	r2, r7
 800ffa6:	bf38      	it	cc
 800ffa8:	2304      	movcc	r3, #4
 800ffaa:	9301      	str	r3, [sp, #4]
 800ffac:	9b02      	ldr	r3, [sp, #8]
 800ffae:	9103      	str	r1, [sp, #12]
 800ffb0:	428b      	cmp	r3, r1
 800ffb2:	d80c      	bhi.n	800ffce <__multiply+0x9e>
 800ffb4:	2e00      	cmp	r6, #0
 800ffb6:	dd03      	ble.n	800ffc0 <__multiply+0x90>
 800ffb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d05b      	beq.n	8010078 <__multiply+0x148>
 800ffc0:	6106      	str	r6, [r0, #16]
 800ffc2:	b005      	add	sp, #20
 800ffc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffc8:	f843 2b04 	str.w	r2, [r3], #4
 800ffcc:	e7d8      	b.n	800ff80 <__multiply+0x50>
 800ffce:	f8b1 a000 	ldrh.w	sl, [r1]
 800ffd2:	f1ba 0f00 	cmp.w	sl, #0
 800ffd6:	d024      	beq.n	8010022 <__multiply+0xf2>
 800ffd8:	f104 0e14 	add.w	lr, r4, #20
 800ffdc:	46a9      	mov	r9, r5
 800ffde:	f04f 0c00 	mov.w	ip, #0
 800ffe2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ffe6:	f8d9 3000 	ldr.w	r3, [r9]
 800ffea:	fa1f fb87 	uxth.w	fp, r7
 800ffee:	b29b      	uxth	r3, r3
 800fff0:	fb0a 330b 	mla	r3, sl, fp, r3
 800fff4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fff8:	f8d9 7000 	ldr.w	r7, [r9]
 800fffc:	4463      	add	r3, ip
 800fffe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010002:	fb0a c70b 	mla	r7, sl, fp, ip
 8010006:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801000a:	b29b      	uxth	r3, r3
 801000c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010010:	4572      	cmp	r2, lr
 8010012:	f849 3b04 	str.w	r3, [r9], #4
 8010016:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801001a:	d8e2      	bhi.n	800ffe2 <__multiply+0xb2>
 801001c:	9b01      	ldr	r3, [sp, #4]
 801001e:	f845 c003 	str.w	ip, [r5, r3]
 8010022:	9b03      	ldr	r3, [sp, #12]
 8010024:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010028:	3104      	adds	r1, #4
 801002a:	f1b9 0f00 	cmp.w	r9, #0
 801002e:	d021      	beq.n	8010074 <__multiply+0x144>
 8010030:	682b      	ldr	r3, [r5, #0]
 8010032:	f104 0c14 	add.w	ip, r4, #20
 8010036:	46ae      	mov	lr, r5
 8010038:	f04f 0a00 	mov.w	sl, #0
 801003c:	f8bc b000 	ldrh.w	fp, [ip]
 8010040:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010044:	fb09 770b 	mla	r7, r9, fp, r7
 8010048:	4457      	add	r7, sl
 801004a:	b29b      	uxth	r3, r3
 801004c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010050:	f84e 3b04 	str.w	r3, [lr], #4
 8010054:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010058:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801005c:	f8be 3000 	ldrh.w	r3, [lr]
 8010060:	fb09 330a 	mla	r3, r9, sl, r3
 8010064:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010068:	4562      	cmp	r2, ip
 801006a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801006e:	d8e5      	bhi.n	801003c <__multiply+0x10c>
 8010070:	9f01      	ldr	r7, [sp, #4]
 8010072:	51eb      	str	r3, [r5, r7]
 8010074:	3504      	adds	r5, #4
 8010076:	e799      	b.n	800ffac <__multiply+0x7c>
 8010078:	3e01      	subs	r6, #1
 801007a:	e79b      	b.n	800ffb4 <__multiply+0x84>
 801007c:	08011675 	.word	0x08011675
 8010080:	080116e6 	.word	0x080116e6

08010084 <__pow5mult>:
 8010084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010088:	4615      	mov	r5, r2
 801008a:	f012 0203 	ands.w	r2, r2, #3
 801008e:	4607      	mov	r7, r0
 8010090:	460e      	mov	r6, r1
 8010092:	d007      	beq.n	80100a4 <__pow5mult+0x20>
 8010094:	4c25      	ldr	r4, [pc, #148]	@ (801012c <__pow5mult+0xa8>)
 8010096:	3a01      	subs	r2, #1
 8010098:	2300      	movs	r3, #0
 801009a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801009e:	f7ff fe55 	bl	800fd4c <__multadd>
 80100a2:	4606      	mov	r6, r0
 80100a4:	10ad      	asrs	r5, r5, #2
 80100a6:	d03d      	beq.n	8010124 <__pow5mult+0xa0>
 80100a8:	69fc      	ldr	r4, [r7, #28]
 80100aa:	b97c      	cbnz	r4, 80100cc <__pow5mult+0x48>
 80100ac:	2010      	movs	r0, #16
 80100ae:	f7ff fd23 	bl	800faf8 <malloc>
 80100b2:	4602      	mov	r2, r0
 80100b4:	61f8      	str	r0, [r7, #28]
 80100b6:	b928      	cbnz	r0, 80100c4 <__pow5mult+0x40>
 80100b8:	4b1d      	ldr	r3, [pc, #116]	@ (8010130 <__pow5mult+0xac>)
 80100ba:	481e      	ldr	r0, [pc, #120]	@ (8010134 <__pow5mult+0xb0>)
 80100bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80100c0:	f000 fd4a 	bl	8010b58 <__assert_func>
 80100c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80100c8:	6004      	str	r4, [r0, #0]
 80100ca:	60c4      	str	r4, [r0, #12]
 80100cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80100d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80100d4:	b94c      	cbnz	r4, 80100ea <__pow5mult+0x66>
 80100d6:	f240 2171 	movw	r1, #625	@ 0x271
 80100da:	4638      	mov	r0, r7
 80100dc:	f7ff ff12 	bl	800ff04 <__i2b>
 80100e0:	2300      	movs	r3, #0
 80100e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80100e6:	4604      	mov	r4, r0
 80100e8:	6003      	str	r3, [r0, #0]
 80100ea:	f04f 0900 	mov.w	r9, #0
 80100ee:	07eb      	lsls	r3, r5, #31
 80100f0:	d50a      	bpl.n	8010108 <__pow5mult+0x84>
 80100f2:	4631      	mov	r1, r6
 80100f4:	4622      	mov	r2, r4
 80100f6:	4638      	mov	r0, r7
 80100f8:	f7ff ff1a 	bl	800ff30 <__multiply>
 80100fc:	4631      	mov	r1, r6
 80100fe:	4680      	mov	r8, r0
 8010100:	4638      	mov	r0, r7
 8010102:	f7ff fe01 	bl	800fd08 <_Bfree>
 8010106:	4646      	mov	r6, r8
 8010108:	106d      	asrs	r5, r5, #1
 801010a:	d00b      	beq.n	8010124 <__pow5mult+0xa0>
 801010c:	6820      	ldr	r0, [r4, #0]
 801010e:	b938      	cbnz	r0, 8010120 <__pow5mult+0x9c>
 8010110:	4622      	mov	r2, r4
 8010112:	4621      	mov	r1, r4
 8010114:	4638      	mov	r0, r7
 8010116:	f7ff ff0b 	bl	800ff30 <__multiply>
 801011a:	6020      	str	r0, [r4, #0]
 801011c:	f8c0 9000 	str.w	r9, [r0]
 8010120:	4604      	mov	r4, r0
 8010122:	e7e4      	b.n	80100ee <__pow5mult+0x6a>
 8010124:	4630      	mov	r0, r6
 8010126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801012a:	bf00      	nop
 801012c:	08011740 	.word	0x08011740
 8010130:	08011606 	.word	0x08011606
 8010134:	080116e6 	.word	0x080116e6

08010138 <__lshift>:
 8010138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801013c:	460c      	mov	r4, r1
 801013e:	6849      	ldr	r1, [r1, #4]
 8010140:	6923      	ldr	r3, [r4, #16]
 8010142:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010146:	68a3      	ldr	r3, [r4, #8]
 8010148:	4607      	mov	r7, r0
 801014a:	4691      	mov	r9, r2
 801014c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010150:	f108 0601 	add.w	r6, r8, #1
 8010154:	42b3      	cmp	r3, r6
 8010156:	db0b      	blt.n	8010170 <__lshift+0x38>
 8010158:	4638      	mov	r0, r7
 801015a:	f7ff fd95 	bl	800fc88 <_Balloc>
 801015e:	4605      	mov	r5, r0
 8010160:	b948      	cbnz	r0, 8010176 <__lshift+0x3e>
 8010162:	4602      	mov	r2, r0
 8010164:	4b28      	ldr	r3, [pc, #160]	@ (8010208 <__lshift+0xd0>)
 8010166:	4829      	ldr	r0, [pc, #164]	@ (801020c <__lshift+0xd4>)
 8010168:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801016c:	f000 fcf4 	bl	8010b58 <__assert_func>
 8010170:	3101      	adds	r1, #1
 8010172:	005b      	lsls	r3, r3, #1
 8010174:	e7ee      	b.n	8010154 <__lshift+0x1c>
 8010176:	2300      	movs	r3, #0
 8010178:	f100 0114 	add.w	r1, r0, #20
 801017c:	f100 0210 	add.w	r2, r0, #16
 8010180:	4618      	mov	r0, r3
 8010182:	4553      	cmp	r3, sl
 8010184:	db33      	blt.n	80101ee <__lshift+0xb6>
 8010186:	6920      	ldr	r0, [r4, #16]
 8010188:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801018c:	f104 0314 	add.w	r3, r4, #20
 8010190:	f019 091f 	ands.w	r9, r9, #31
 8010194:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010198:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801019c:	d02b      	beq.n	80101f6 <__lshift+0xbe>
 801019e:	f1c9 0e20 	rsb	lr, r9, #32
 80101a2:	468a      	mov	sl, r1
 80101a4:	2200      	movs	r2, #0
 80101a6:	6818      	ldr	r0, [r3, #0]
 80101a8:	fa00 f009 	lsl.w	r0, r0, r9
 80101ac:	4310      	orrs	r0, r2
 80101ae:	f84a 0b04 	str.w	r0, [sl], #4
 80101b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80101b6:	459c      	cmp	ip, r3
 80101b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80101bc:	d8f3      	bhi.n	80101a6 <__lshift+0x6e>
 80101be:	ebac 0304 	sub.w	r3, ip, r4
 80101c2:	3b15      	subs	r3, #21
 80101c4:	f023 0303 	bic.w	r3, r3, #3
 80101c8:	3304      	adds	r3, #4
 80101ca:	f104 0015 	add.w	r0, r4, #21
 80101ce:	4584      	cmp	ip, r0
 80101d0:	bf38      	it	cc
 80101d2:	2304      	movcc	r3, #4
 80101d4:	50ca      	str	r2, [r1, r3]
 80101d6:	b10a      	cbz	r2, 80101dc <__lshift+0xa4>
 80101d8:	f108 0602 	add.w	r6, r8, #2
 80101dc:	3e01      	subs	r6, #1
 80101de:	4638      	mov	r0, r7
 80101e0:	612e      	str	r6, [r5, #16]
 80101e2:	4621      	mov	r1, r4
 80101e4:	f7ff fd90 	bl	800fd08 <_Bfree>
 80101e8:	4628      	mov	r0, r5
 80101ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80101f2:	3301      	adds	r3, #1
 80101f4:	e7c5      	b.n	8010182 <__lshift+0x4a>
 80101f6:	3904      	subs	r1, #4
 80101f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80101fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8010200:	459c      	cmp	ip, r3
 8010202:	d8f9      	bhi.n	80101f8 <__lshift+0xc0>
 8010204:	e7ea      	b.n	80101dc <__lshift+0xa4>
 8010206:	bf00      	nop
 8010208:	08011675 	.word	0x08011675
 801020c:	080116e6 	.word	0x080116e6

08010210 <__mcmp>:
 8010210:	690a      	ldr	r2, [r1, #16]
 8010212:	4603      	mov	r3, r0
 8010214:	6900      	ldr	r0, [r0, #16]
 8010216:	1a80      	subs	r0, r0, r2
 8010218:	b530      	push	{r4, r5, lr}
 801021a:	d10e      	bne.n	801023a <__mcmp+0x2a>
 801021c:	3314      	adds	r3, #20
 801021e:	3114      	adds	r1, #20
 8010220:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010224:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010228:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801022c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010230:	4295      	cmp	r5, r2
 8010232:	d003      	beq.n	801023c <__mcmp+0x2c>
 8010234:	d205      	bcs.n	8010242 <__mcmp+0x32>
 8010236:	f04f 30ff 	mov.w	r0, #4294967295
 801023a:	bd30      	pop	{r4, r5, pc}
 801023c:	42a3      	cmp	r3, r4
 801023e:	d3f3      	bcc.n	8010228 <__mcmp+0x18>
 8010240:	e7fb      	b.n	801023a <__mcmp+0x2a>
 8010242:	2001      	movs	r0, #1
 8010244:	e7f9      	b.n	801023a <__mcmp+0x2a>
	...

08010248 <__mdiff>:
 8010248:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801024c:	4689      	mov	r9, r1
 801024e:	4606      	mov	r6, r0
 8010250:	4611      	mov	r1, r2
 8010252:	4648      	mov	r0, r9
 8010254:	4614      	mov	r4, r2
 8010256:	f7ff ffdb 	bl	8010210 <__mcmp>
 801025a:	1e05      	subs	r5, r0, #0
 801025c:	d112      	bne.n	8010284 <__mdiff+0x3c>
 801025e:	4629      	mov	r1, r5
 8010260:	4630      	mov	r0, r6
 8010262:	f7ff fd11 	bl	800fc88 <_Balloc>
 8010266:	4602      	mov	r2, r0
 8010268:	b928      	cbnz	r0, 8010276 <__mdiff+0x2e>
 801026a:	4b3f      	ldr	r3, [pc, #252]	@ (8010368 <__mdiff+0x120>)
 801026c:	f240 2137 	movw	r1, #567	@ 0x237
 8010270:	483e      	ldr	r0, [pc, #248]	@ (801036c <__mdiff+0x124>)
 8010272:	f000 fc71 	bl	8010b58 <__assert_func>
 8010276:	2301      	movs	r3, #1
 8010278:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801027c:	4610      	mov	r0, r2
 801027e:	b003      	add	sp, #12
 8010280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010284:	bfbc      	itt	lt
 8010286:	464b      	movlt	r3, r9
 8010288:	46a1      	movlt	r9, r4
 801028a:	4630      	mov	r0, r6
 801028c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010290:	bfba      	itte	lt
 8010292:	461c      	movlt	r4, r3
 8010294:	2501      	movlt	r5, #1
 8010296:	2500      	movge	r5, #0
 8010298:	f7ff fcf6 	bl	800fc88 <_Balloc>
 801029c:	4602      	mov	r2, r0
 801029e:	b918      	cbnz	r0, 80102a8 <__mdiff+0x60>
 80102a0:	4b31      	ldr	r3, [pc, #196]	@ (8010368 <__mdiff+0x120>)
 80102a2:	f240 2145 	movw	r1, #581	@ 0x245
 80102a6:	e7e3      	b.n	8010270 <__mdiff+0x28>
 80102a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80102ac:	6926      	ldr	r6, [r4, #16]
 80102ae:	60c5      	str	r5, [r0, #12]
 80102b0:	f109 0310 	add.w	r3, r9, #16
 80102b4:	f109 0514 	add.w	r5, r9, #20
 80102b8:	f104 0e14 	add.w	lr, r4, #20
 80102bc:	f100 0b14 	add.w	fp, r0, #20
 80102c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80102c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80102c8:	9301      	str	r3, [sp, #4]
 80102ca:	46d9      	mov	r9, fp
 80102cc:	f04f 0c00 	mov.w	ip, #0
 80102d0:	9b01      	ldr	r3, [sp, #4]
 80102d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80102d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80102da:	9301      	str	r3, [sp, #4]
 80102dc:	fa1f f38a 	uxth.w	r3, sl
 80102e0:	4619      	mov	r1, r3
 80102e2:	b283      	uxth	r3, r0
 80102e4:	1acb      	subs	r3, r1, r3
 80102e6:	0c00      	lsrs	r0, r0, #16
 80102e8:	4463      	add	r3, ip
 80102ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80102ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80102f2:	b29b      	uxth	r3, r3
 80102f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80102f8:	4576      	cmp	r6, lr
 80102fa:	f849 3b04 	str.w	r3, [r9], #4
 80102fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010302:	d8e5      	bhi.n	80102d0 <__mdiff+0x88>
 8010304:	1b33      	subs	r3, r6, r4
 8010306:	3b15      	subs	r3, #21
 8010308:	f023 0303 	bic.w	r3, r3, #3
 801030c:	3415      	adds	r4, #21
 801030e:	3304      	adds	r3, #4
 8010310:	42a6      	cmp	r6, r4
 8010312:	bf38      	it	cc
 8010314:	2304      	movcc	r3, #4
 8010316:	441d      	add	r5, r3
 8010318:	445b      	add	r3, fp
 801031a:	461e      	mov	r6, r3
 801031c:	462c      	mov	r4, r5
 801031e:	4544      	cmp	r4, r8
 8010320:	d30e      	bcc.n	8010340 <__mdiff+0xf8>
 8010322:	f108 0103 	add.w	r1, r8, #3
 8010326:	1b49      	subs	r1, r1, r5
 8010328:	f021 0103 	bic.w	r1, r1, #3
 801032c:	3d03      	subs	r5, #3
 801032e:	45a8      	cmp	r8, r5
 8010330:	bf38      	it	cc
 8010332:	2100      	movcc	r1, #0
 8010334:	440b      	add	r3, r1
 8010336:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801033a:	b191      	cbz	r1, 8010362 <__mdiff+0x11a>
 801033c:	6117      	str	r7, [r2, #16]
 801033e:	e79d      	b.n	801027c <__mdiff+0x34>
 8010340:	f854 1b04 	ldr.w	r1, [r4], #4
 8010344:	46e6      	mov	lr, ip
 8010346:	0c08      	lsrs	r0, r1, #16
 8010348:	fa1c fc81 	uxtah	ip, ip, r1
 801034c:	4471      	add	r1, lr
 801034e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010352:	b289      	uxth	r1, r1
 8010354:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010358:	f846 1b04 	str.w	r1, [r6], #4
 801035c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010360:	e7dd      	b.n	801031e <__mdiff+0xd6>
 8010362:	3f01      	subs	r7, #1
 8010364:	e7e7      	b.n	8010336 <__mdiff+0xee>
 8010366:	bf00      	nop
 8010368:	08011675 	.word	0x08011675
 801036c:	080116e6 	.word	0x080116e6

08010370 <__ulp>:
 8010370:	b082      	sub	sp, #8
 8010372:	ed8d 0b00 	vstr	d0, [sp]
 8010376:	9a01      	ldr	r2, [sp, #4]
 8010378:	4b0f      	ldr	r3, [pc, #60]	@ (80103b8 <__ulp+0x48>)
 801037a:	4013      	ands	r3, r2
 801037c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010380:	2b00      	cmp	r3, #0
 8010382:	dc08      	bgt.n	8010396 <__ulp+0x26>
 8010384:	425b      	negs	r3, r3
 8010386:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801038a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801038e:	da04      	bge.n	801039a <__ulp+0x2a>
 8010390:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010394:	4113      	asrs	r3, r2
 8010396:	2200      	movs	r2, #0
 8010398:	e008      	b.n	80103ac <__ulp+0x3c>
 801039a:	f1a2 0314 	sub.w	r3, r2, #20
 801039e:	2b1e      	cmp	r3, #30
 80103a0:	bfda      	itte	le
 80103a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80103a6:	40da      	lsrle	r2, r3
 80103a8:	2201      	movgt	r2, #1
 80103aa:	2300      	movs	r3, #0
 80103ac:	4619      	mov	r1, r3
 80103ae:	4610      	mov	r0, r2
 80103b0:	ec41 0b10 	vmov	d0, r0, r1
 80103b4:	b002      	add	sp, #8
 80103b6:	4770      	bx	lr
 80103b8:	7ff00000 	.word	0x7ff00000

080103bc <__b2d>:
 80103bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103c0:	6906      	ldr	r6, [r0, #16]
 80103c2:	f100 0814 	add.w	r8, r0, #20
 80103c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80103ca:	1f37      	subs	r7, r6, #4
 80103cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80103d0:	4610      	mov	r0, r2
 80103d2:	f7ff fd4b 	bl	800fe6c <__hi0bits>
 80103d6:	f1c0 0320 	rsb	r3, r0, #32
 80103da:	280a      	cmp	r0, #10
 80103dc:	600b      	str	r3, [r1, #0]
 80103de:	491b      	ldr	r1, [pc, #108]	@ (801044c <__b2d+0x90>)
 80103e0:	dc15      	bgt.n	801040e <__b2d+0x52>
 80103e2:	f1c0 0c0b 	rsb	ip, r0, #11
 80103e6:	fa22 f30c 	lsr.w	r3, r2, ip
 80103ea:	45b8      	cmp	r8, r7
 80103ec:	ea43 0501 	orr.w	r5, r3, r1
 80103f0:	bf34      	ite	cc
 80103f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80103f6:	2300      	movcs	r3, #0
 80103f8:	3015      	adds	r0, #21
 80103fa:	fa02 f000 	lsl.w	r0, r2, r0
 80103fe:	fa23 f30c 	lsr.w	r3, r3, ip
 8010402:	4303      	orrs	r3, r0
 8010404:	461c      	mov	r4, r3
 8010406:	ec45 4b10 	vmov	d0, r4, r5
 801040a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801040e:	45b8      	cmp	r8, r7
 8010410:	bf3a      	itte	cc
 8010412:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010416:	f1a6 0708 	subcc.w	r7, r6, #8
 801041a:	2300      	movcs	r3, #0
 801041c:	380b      	subs	r0, #11
 801041e:	d012      	beq.n	8010446 <__b2d+0x8a>
 8010420:	f1c0 0120 	rsb	r1, r0, #32
 8010424:	fa23 f401 	lsr.w	r4, r3, r1
 8010428:	4082      	lsls	r2, r0
 801042a:	4322      	orrs	r2, r4
 801042c:	4547      	cmp	r7, r8
 801042e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010432:	bf8c      	ite	hi
 8010434:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010438:	2200      	movls	r2, #0
 801043a:	4083      	lsls	r3, r0
 801043c:	40ca      	lsrs	r2, r1
 801043e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010442:	4313      	orrs	r3, r2
 8010444:	e7de      	b.n	8010404 <__b2d+0x48>
 8010446:	ea42 0501 	orr.w	r5, r2, r1
 801044a:	e7db      	b.n	8010404 <__b2d+0x48>
 801044c:	3ff00000 	.word	0x3ff00000

08010450 <__d2b>:
 8010450:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010454:	460f      	mov	r7, r1
 8010456:	2101      	movs	r1, #1
 8010458:	ec59 8b10 	vmov	r8, r9, d0
 801045c:	4616      	mov	r6, r2
 801045e:	f7ff fc13 	bl	800fc88 <_Balloc>
 8010462:	4604      	mov	r4, r0
 8010464:	b930      	cbnz	r0, 8010474 <__d2b+0x24>
 8010466:	4602      	mov	r2, r0
 8010468:	4b23      	ldr	r3, [pc, #140]	@ (80104f8 <__d2b+0xa8>)
 801046a:	4824      	ldr	r0, [pc, #144]	@ (80104fc <__d2b+0xac>)
 801046c:	f240 310f 	movw	r1, #783	@ 0x30f
 8010470:	f000 fb72 	bl	8010b58 <__assert_func>
 8010474:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010478:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801047c:	b10d      	cbz	r5, 8010482 <__d2b+0x32>
 801047e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010482:	9301      	str	r3, [sp, #4]
 8010484:	f1b8 0300 	subs.w	r3, r8, #0
 8010488:	d023      	beq.n	80104d2 <__d2b+0x82>
 801048a:	4668      	mov	r0, sp
 801048c:	9300      	str	r3, [sp, #0]
 801048e:	f7ff fd0c 	bl	800feaa <__lo0bits>
 8010492:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010496:	b1d0      	cbz	r0, 80104ce <__d2b+0x7e>
 8010498:	f1c0 0320 	rsb	r3, r0, #32
 801049c:	fa02 f303 	lsl.w	r3, r2, r3
 80104a0:	430b      	orrs	r3, r1
 80104a2:	40c2      	lsrs	r2, r0
 80104a4:	6163      	str	r3, [r4, #20]
 80104a6:	9201      	str	r2, [sp, #4]
 80104a8:	9b01      	ldr	r3, [sp, #4]
 80104aa:	61a3      	str	r3, [r4, #24]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	bf0c      	ite	eq
 80104b0:	2201      	moveq	r2, #1
 80104b2:	2202      	movne	r2, #2
 80104b4:	6122      	str	r2, [r4, #16]
 80104b6:	b1a5      	cbz	r5, 80104e2 <__d2b+0x92>
 80104b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80104bc:	4405      	add	r5, r0
 80104be:	603d      	str	r5, [r7, #0]
 80104c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80104c4:	6030      	str	r0, [r6, #0]
 80104c6:	4620      	mov	r0, r4
 80104c8:	b003      	add	sp, #12
 80104ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104ce:	6161      	str	r1, [r4, #20]
 80104d0:	e7ea      	b.n	80104a8 <__d2b+0x58>
 80104d2:	a801      	add	r0, sp, #4
 80104d4:	f7ff fce9 	bl	800feaa <__lo0bits>
 80104d8:	9b01      	ldr	r3, [sp, #4]
 80104da:	6163      	str	r3, [r4, #20]
 80104dc:	3020      	adds	r0, #32
 80104de:	2201      	movs	r2, #1
 80104e0:	e7e8      	b.n	80104b4 <__d2b+0x64>
 80104e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80104e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80104ea:	6038      	str	r0, [r7, #0]
 80104ec:	6918      	ldr	r0, [r3, #16]
 80104ee:	f7ff fcbd 	bl	800fe6c <__hi0bits>
 80104f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80104f6:	e7e5      	b.n	80104c4 <__d2b+0x74>
 80104f8:	08011675 	.word	0x08011675
 80104fc:	080116e6 	.word	0x080116e6

08010500 <__ratio>:
 8010500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010504:	b085      	sub	sp, #20
 8010506:	e9cd 1000 	strd	r1, r0, [sp]
 801050a:	a902      	add	r1, sp, #8
 801050c:	f7ff ff56 	bl	80103bc <__b2d>
 8010510:	9800      	ldr	r0, [sp, #0]
 8010512:	a903      	add	r1, sp, #12
 8010514:	ec55 4b10 	vmov	r4, r5, d0
 8010518:	f7ff ff50 	bl	80103bc <__b2d>
 801051c:	9b01      	ldr	r3, [sp, #4]
 801051e:	6919      	ldr	r1, [r3, #16]
 8010520:	9b00      	ldr	r3, [sp, #0]
 8010522:	691b      	ldr	r3, [r3, #16]
 8010524:	1ac9      	subs	r1, r1, r3
 8010526:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801052a:	1a9b      	subs	r3, r3, r2
 801052c:	ec5b ab10 	vmov	sl, fp, d0
 8010530:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010534:	2b00      	cmp	r3, #0
 8010536:	bfce      	itee	gt
 8010538:	462a      	movgt	r2, r5
 801053a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801053e:	465a      	movle	r2, fp
 8010540:	462f      	mov	r7, r5
 8010542:	46d9      	mov	r9, fp
 8010544:	bfcc      	ite	gt
 8010546:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801054a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801054e:	464b      	mov	r3, r9
 8010550:	4652      	mov	r2, sl
 8010552:	4620      	mov	r0, r4
 8010554:	4639      	mov	r1, r7
 8010556:	f7f0 f9a1 	bl	800089c <__aeabi_ddiv>
 801055a:	ec41 0b10 	vmov	d0, r0, r1
 801055e:	b005      	add	sp, #20
 8010560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010564 <__copybits>:
 8010564:	3901      	subs	r1, #1
 8010566:	b570      	push	{r4, r5, r6, lr}
 8010568:	1149      	asrs	r1, r1, #5
 801056a:	6914      	ldr	r4, [r2, #16]
 801056c:	3101      	adds	r1, #1
 801056e:	f102 0314 	add.w	r3, r2, #20
 8010572:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010576:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801057a:	1f05      	subs	r5, r0, #4
 801057c:	42a3      	cmp	r3, r4
 801057e:	d30c      	bcc.n	801059a <__copybits+0x36>
 8010580:	1aa3      	subs	r3, r4, r2
 8010582:	3b11      	subs	r3, #17
 8010584:	f023 0303 	bic.w	r3, r3, #3
 8010588:	3211      	adds	r2, #17
 801058a:	42a2      	cmp	r2, r4
 801058c:	bf88      	it	hi
 801058e:	2300      	movhi	r3, #0
 8010590:	4418      	add	r0, r3
 8010592:	2300      	movs	r3, #0
 8010594:	4288      	cmp	r0, r1
 8010596:	d305      	bcc.n	80105a4 <__copybits+0x40>
 8010598:	bd70      	pop	{r4, r5, r6, pc}
 801059a:	f853 6b04 	ldr.w	r6, [r3], #4
 801059e:	f845 6f04 	str.w	r6, [r5, #4]!
 80105a2:	e7eb      	b.n	801057c <__copybits+0x18>
 80105a4:	f840 3b04 	str.w	r3, [r0], #4
 80105a8:	e7f4      	b.n	8010594 <__copybits+0x30>

080105aa <__any_on>:
 80105aa:	f100 0214 	add.w	r2, r0, #20
 80105ae:	6900      	ldr	r0, [r0, #16]
 80105b0:	114b      	asrs	r3, r1, #5
 80105b2:	4298      	cmp	r0, r3
 80105b4:	b510      	push	{r4, lr}
 80105b6:	db11      	blt.n	80105dc <__any_on+0x32>
 80105b8:	dd0a      	ble.n	80105d0 <__any_on+0x26>
 80105ba:	f011 011f 	ands.w	r1, r1, #31
 80105be:	d007      	beq.n	80105d0 <__any_on+0x26>
 80105c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80105c4:	fa24 f001 	lsr.w	r0, r4, r1
 80105c8:	fa00 f101 	lsl.w	r1, r0, r1
 80105cc:	428c      	cmp	r4, r1
 80105ce:	d10b      	bne.n	80105e8 <__any_on+0x3e>
 80105d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80105d4:	4293      	cmp	r3, r2
 80105d6:	d803      	bhi.n	80105e0 <__any_on+0x36>
 80105d8:	2000      	movs	r0, #0
 80105da:	bd10      	pop	{r4, pc}
 80105dc:	4603      	mov	r3, r0
 80105de:	e7f7      	b.n	80105d0 <__any_on+0x26>
 80105e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80105e4:	2900      	cmp	r1, #0
 80105e6:	d0f5      	beq.n	80105d4 <__any_on+0x2a>
 80105e8:	2001      	movs	r0, #1
 80105ea:	e7f6      	b.n	80105da <__any_on+0x30>

080105ec <_strtol_l.constprop.0>:
 80105ec:	2b24      	cmp	r3, #36	@ 0x24
 80105ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105f2:	4686      	mov	lr, r0
 80105f4:	4690      	mov	r8, r2
 80105f6:	d801      	bhi.n	80105fc <_strtol_l.constprop.0+0x10>
 80105f8:	2b01      	cmp	r3, #1
 80105fa:	d106      	bne.n	801060a <_strtol_l.constprop.0+0x1e>
 80105fc:	f7fe f860 	bl	800e6c0 <__errno>
 8010600:	2316      	movs	r3, #22
 8010602:	6003      	str	r3, [r0, #0]
 8010604:	2000      	movs	r0, #0
 8010606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801060a:	4834      	ldr	r0, [pc, #208]	@ (80106dc <_strtol_l.constprop.0+0xf0>)
 801060c:	460d      	mov	r5, r1
 801060e:	462a      	mov	r2, r5
 8010610:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010614:	5d06      	ldrb	r6, [r0, r4]
 8010616:	f016 0608 	ands.w	r6, r6, #8
 801061a:	d1f8      	bne.n	801060e <_strtol_l.constprop.0+0x22>
 801061c:	2c2d      	cmp	r4, #45	@ 0x2d
 801061e:	d12d      	bne.n	801067c <_strtol_l.constprop.0+0x90>
 8010620:	782c      	ldrb	r4, [r5, #0]
 8010622:	2601      	movs	r6, #1
 8010624:	1c95      	adds	r5, r2, #2
 8010626:	f033 0210 	bics.w	r2, r3, #16
 801062a:	d109      	bne.n	8010640 <_strtol_l.constprop.0+0x54>
 801062c:	2c30      	cmp	r4, #48	@ 0x30
 801062e:	d12a      	bne.n	8010686 <_strtol_l.constprop.0+0x9a>
 8010630:	782a      	ldrb	r2, [r5, #0]
 8010632:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010636:	2a58      	cmp	r2, #88	@ 0x58
 8010638:	d125      	bne.n	8010686 <_strtol_l.constprop.0+0x9a>
 801063a:	786c      	ldrb	r4, [r5, #1]
 801063c:	2310      	movs	r3, #16
 801063e:	3502      	adds	r5, #2
 8010640:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010644:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010648:	2200      	movs	r2, #0
 801064a:	fbbc f9f3 	udiv	r9, ip, r3
 801064e:	4610      	mov	r0, r2
 8010650:	fb03 ca19 	mls	sl, r3, r9, ip
 8010654:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010658:	2f09      	cmp	r7, #9
 801065a:	d81b      	bhi.n	8010694 <_strtol_l.constprop.0+0xa8>
 801065c:	463c      	mov	r4, r7
 801065e:	42a3      	cmp	r3, r4
 8010660:	dd27      	ble.n	80106b2 <_strtol_l.constprop.0+0xc6>
 8010662:	1c57      	adds	r7, r2, #1
 8010664:	d007      	beq.n	8010676 <_strtol_l.constprop.0+0x8a>
 8010666:	4581      	cmp	r9, r0
 8010668:	d320      	bcc.n	80106ac <_strtol_l.constprop.0+0xc0>
 801066a:	d101      	bne.n	8010670 <_strtol_l.constprop.0+0x84>
 801066c:	45a2      	cmp	sl, r4
 801066e:	db1d      	blt.n	80106ac <_strtol_l.constprop.0+0xc0>
 8010670:	fb00 4003 	mla	r0, r0, r3, r4
 8010674:	2201      	movs	r2, #1
 8010676:	f815 4b01 	ldrb.w	r4, [r5], #1
 801067a:	e7eb      	b.n	8010654 <_strtol_l.constprop.0+0x68>
 801067c:	2c2b      	cmp	r4, #43	@ 0x2b
 801067e:	bf04      	itt	eq
 8010680:	782c      	ldrbeq	r4, [r5, #0]
 8010682:	1c95      	addeq	r5, r2, #2
 8010684:	e7cf      	b.n	8010626 <_strtol_l.constprop.0+0x3a>
 8010686:	2b00      	cmp	r3, #0
 8010688:	d1da      	bne.n	8010640 <_strtol_l.constprop.0+0x54>
 801068a:	2c30      	cmp	r4, #48	@ 0x30
 801068c:	bf0c      	ite	eq
 801068e:	2308      	moveq	r3, #8
 8010690:	230a      	movne	r3, #10
 8010692:	e7d5      	b.n	8010640 <_strtol_l.constprop.0+0x54>
 8010694:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010698:	2f19      	cmp	r7, #25
 801069a:	d801      	bhi.n	80106a0 <_strtol_l.constprop.0+0xb4>
 801069c:	3c37      	subs	r4, #55	@ 0x37
 801069e:	e7de      	b.n	801065e <_strtol_l.constprop.0+0x72>
 80106a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80106a4:	2f19      	cmp	r7, #25
 80106a6:	d804      	bhi.n	80106b2 <_strtol_l.constprop.0+0xc6>
 80106a8:	3c57      	subs	r4, #87	@ 0x57
 80106aa:	e7d8      	b.n	801065e <_strtol_l.constprop.0+0x72>
 80106ac:	f04f 32ff 	mov.w	r2, #4294967295
 80106b0:	e7e1      	b.n	8010676 <_strtol_l.constprop.0+0x8a>
 80106b2:	1c53      	adds	r3, r2, #1
 80106b4:	d108      	bne.n	80106c8 <_strtol_l.constprop.0+0xdc>
 80106b6:	2322      	movs	r3, #34	@ 0x22
 80106b8:	f8ce 3000 	str.w	r3, [lr]
 80106bc:	4660      	mov	r0, ip
 80106be:	f1b8 0f00 	cmp.w	r8, #0
 80106c2:	d0a0      	beq.n	8010606 <_strtol_l.constprop.0+0x1a>
 80106c4:	1e69      	subs	r1, r5, #1
 80106c6:	e006      	b.n	80106d6 <_strtol_l.constprop.0+0xea>
 80106c8:	b106      	cbz	r6, 80106cc <_strtol_l.constprop.0+0xe0>
 80106ca:	4240      	negs	r0, r0
 80106cc:	f1b8 0f00 	cmp.w	r8, #0
 80106d0:	d099      	beq.n	8010606 <_strtol_l.constprop.0+0x1a>
 80106d2:	2a00      	cmp	r2, #0
 80106d4:	d1f6      	bne.n	80106c4 <_strtol_l.constprop.0+0xd8>
 80106d6:	f8c8 1000 	str.w	r1, [r8]
 80106da:	e794      	b.n	8010606 <_strtol_l.constprop.0+0x1a>
 80106dc:	08011841 	.word	0x08011841

080106e0 <_strtol_r>:
 80106e0:	f7ff bf84 	b.w	80105ec <_strtol_l.constprop.0>

080106e4 <__ascii_wctomb>:
 80106e4:	4603      	mov	r3, r0
 80106e6:	4608      	mov	r0, r1
 80106e8:	b141      	cbz	r1, 80106fc <__ascii_wctomb+0x18>
 80106ea:	2aff      	cmp	r2, #255	@ 0xff
 80106ec:	d904      	bls.n	80106f8 <__ascii_wctomb+0x14>
 80106ee:	228a      	movs	r2, #138	@ 0x8a
 80106f0:	601a      	str	r2, [r3, #0]
 80106f2:	f04f 30ff 	mov.w	r0, #4294967295
 80106f6:	4770      	bx	lr
 80106f8:	700a      	strb	r2, [r1, #0]
 80106fa:	2001      	movs	r0, #1
 80106fc:	4770      	bx	lr

080106fe <__ssputs_r>:
 80106fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010702:	688e      	ldr	r6, [r1, #8]
 8010704:	461f      	mov	r7, r3
 8010706:	42be      	cmp	r6, r7
 8010708:	680b      	ldr	r3, [r1, #0]
 801070a:	4682      	mov	sl, r0
 801070c:	460c      	mov	r4, r1
 801070e:	4690      	mov	r8, r2
 8010710:	d82d      	bhi.n	801076e <__ssputs_r+0x70>
 8010712:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010716:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801071a:	d026      	beq.n	801076a <__ssputs_r+0x6c>
 801071c:	6965      	ldr	r5, [r4, #20]
 801071e:	6909      	ldr	r1, [r1, #16]
 8010720:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010724:	eba3 0901 	sub.w	r9, r3, r1
 8010728:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801072c:	1c7b      	adds	r3, r7, #1
 801072e:	444b      	add	r3, r9
 8010730:	106d      	asrs	r5, r5, #1
 8010732:	429d      	cmp	r5, r3
 8010734:	bf38      	it	cc
 8010736:	461d      	movcc	r5, r3
 8010738:	0553      	lsls	r3, r2, #21
 801073a:	d527      	bpl.n	801078c <__ssputs_r+0x8e>
 801073c:	4629      	mov	r1, r5
 801073e:	f7ff fa05 	bl	800fb4c <_malloc_r>
 8010742:	4606      	mov	r6, r0
 8010744:	b360      	cbz	r0, 80107a0 <__ssputs_r+0xa2>
 8010746:	6921      	ldr	r1, [r4, #16]
 8010748:	464a      	mov	r2, r9
 801074a:	f7fd ffe6 	bl	800e71a <memcpy>
 801074e:	89a3      	ldrh	r3, [r4, #12]
 8010750:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010758:	81a3      	strh	r3, [r4, #12]
 801075a:	6126      	str	r6, [r4, #16]
 801075c:	6165      	str	r5, [r4, #20]
 801075e:	444e      	add	r6, r9
 8010760:	eba5 0509 	sub.w	r5, r5, r9
 8010764:	6026      	str	r6, [r4, #0]
 8010766:	60a5      	str	r5, [r4, #8]
 8010768:	463e      	mov	r6, r7
 801076a:	42be      	cmp	r6, r7
 801076c:	d900      	bls.n	8010770 <__ssputs_r+0x72>
 801076e:	463e      	mov	r6, r7
 8010770:	6820      	ldr	r0, [r4, #0]
 8010772:	4632      	mov	r2, r6
 8010774:	4641      	mov	r1, r8
 8010776:	f000 f9c5 	bl	8010b04 <memmove>
 801077a:	68a3      	ldr	r3, [r4, #8]
 801077c:	1b9b      	subs	r3, r3, r6
 801077e:	60a3      	str	r3, [r4, #8]
 8010780:	6823      	ldr	r3, [r4, #0]
 8010782:	4433      	add	r3, r6
 8010784:	6023      	str	r3, [r4, #0]
 8010786:	2000      	movs	r0, #0
 8010788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801078c:	462a      	mov	r2, r5
 801078e:	f000 fa15 	bl	8010bbc <_realloc_r>
 8010792:	4606      	mov	r6, r0
 8010794:	2800      	cmp	r0, #0
 8010796:	d1e0      	bne.n	801075a <__ssputs_r+0x5c>
 8010798:	6921      	ldr	r1, [r4, #16]
 801079a:	4650      	mov	r0, sl
 801079c:	f7fe fe28 	bl	800f3f0 <_free_r>
 80107a0:	230c      	movs	r3, #12
 80107a2:	f8ca 3000 	str.w	r3, [sl]
 80107a6:	89a3      	ldrh	r3, [r4, #12]
 80107a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80107ac:	81a3      	strh	r3, [r4, #12]
 80107ae:	f04f 30ff 	mov.w	r0, #4294967295
 80107b2:	e7e9      	b.n	8010788 <__ssputs_r+0x8a>

080107b4 <_svfiprintf_r>:
 80107b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107b8:	4698      	mov	r8, r3
 80107ba:	898b      	ldrh	r3, [r1, #12]
 80107bc:	061b      	lsls	r3, r3, #24
 80107be:	b09d      	sub	sp, #116	@ 0x74
 80107c0:	4607      	mov	r7, r0
 80107c2:	460d      	mov	r5, r1
 80107c4:	4614      	mov	r4, r2
 80107c6:	d510      	bpl.n	80107ea <_svfiprintf_r+0x36>
 80107c8:	690b      	ldr	r3, [r1, #16]
 80107ca:	b973      	cbnz	r3, 80107ea <_svfiprintf_r+0x36>
 80107cc:	2140      	movs	r1, #64	@ 0x40
 80107ce:	f7ff f9bd 	bl	800fb4c <_malloc_r>
 80107d2:	6028      	str	r0, [r5, #0]
 80107d4:	6128      	str	r0, [r5, #16]
 80107d6:	b930      	cbnz	r0, 80107e6 <_svfiprintf_r+0x32>
 80107d8:	230c      	movs	r3, #12
 80107da:	603b      	str	r3, [r7, #0]
 80107dc:	f04f 30ff 	mov.w	r0, #4294967295
 80107e0:	b01d      	add	sp, #116	@ 0x74
 80107e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107e6:	2340      	movs	r3, #64	@ 0x40
 80107e8:	616b      	str	r3, [r5, #20]
 80107ea:	2300      	movs	r3, #0
 80107ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80107ee:	2320      	movs	r3, #32
 80107f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80107f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80107f8:	2330      	movs	r3, #48	@ 0x30
 80107fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010998 <_svfiprintf_r+0x1e4>
 80107fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010802:	f04f 0901 	mov.w	r9, #1
 8010806:	4623      	mov	r3, r4
 8010808:	469a      	mov	sl, r3
 801080a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801080e:	b10a      	cbz	r2, 8010814 <_svfiprintf_r+0x60>
 8010810:	2a25      	cmp	r2, #37	@ 0x25
 8010812:	d1f9      	bne.n	8010808 <_svfiprintf_r+0x54>
 8010814:	ebba 0b04 	subs.w	fp, sl, r4
 8010818:	d00b      	beq.n	8010832 <_svfiprintf_r+0x7e>
 801081a:	465b      	mov	r3, fp
 801081c:	4622      	mov	r2, r4
 801081e:	4629      	mov	r1, r5
 8010820:	4638      	mov	r0, r7
 8010822:	f7ff ff6c 	bl	80106fe <__ssputs_r>
 8010826:	3001      	adds	r0, #1
 8010828:	f000 80a7 	beq.w	801097a <_svfiprintf_r+0x1c6>
 801082c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801082e:	445a      	add	r2, fp
 8010830:	9209      	str	r2, [sp, #36]	@ 0x24
 8010832:	f89a 3000 	ldrb.w	r3, [sl]
 8010836:	2b00      	cmp	r3, #0
 8010838:	f000 809f 	beq.w	801097a <_svfiprintf_r+0x1c6>
 801083c:	2300      	movs	r3, #0
 801083e:	f04f 32ff 	mov.w	r2, #4294967295
 8010842:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010846:	f10a 0a01 	add.w	sl, sl, #1
 801084a:	9304      	str	r3, [sp, #16]
 801084c:	9307      	str	r3, [sp, #28]
 801084e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010852:	931a      	str	r3, [sp, #104]	@ 0x68
 8010854:	4654      	mov	r4, sl
 8010856:	2205      	movs	r2, #5
 8010858:	f814 1b01 	ldrb.w	r1, [r4], #1
 801085c:	484e      	ldr	r0, [pc, #312]	@ (8010998 <_svfiprintf_r+0x1e4>)
 801085e:	f7ef fcdf 	bl	8000220 <memchr>
 8010862:	9a04      	ldr	r2, [sp, #16]
 8010864:	b9d8      	cbnz	r0, 801089e <_svfiprintf_r+0xea>
 8010866:	06d0      	lsls	r0, r2, #27
 8010868:	bf44      	itt	mi
 801086a:	2320      	movmi	r3, #32
 801086c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010870:	0711      	lsls	r1, r2, #28
 8010872:	bf44      	itt	mi
 8010874:	232b      	movmi	r3, #43	@ 0x2b
 8010876:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801087a:	f89a 3000 	ldrb.w	r3, [sl]
 801087e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010880:	d015      	beq.n	80108ae <_svfiprintf_r+0xfa>
 8010882:	9a07      	ldr	r2, [sp, #28]
 8010884:	4654      	mov	r4, sl
 8010886:	2000      	movs	r0, #0
 8010888:	f04f 0c0a 	mov.w	ip, #10
 801088c:	4621      	mov	r1, r4
 801088e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010892:	3b30      	subs	r3, #48	@ 0x30
 8010894:	2b09      	cmp	r3, #9
 8010896:	d94b      	bls.n	8010930 <_svfiprintf_r+0x17c>
 8010898:	b1b0      	cbz	r0, 80108c8 <_svfiprintf_r+0x114>
 801089a:	9207      	str	r2, [sp, #28]
 801089c:	e014      	b.n	80108c8 <_svfiprintf_r+0x114>
 801089e:	eba0 0308 	sub.w	r3, r0, r8
 80108a2:	fa09 f303 	lsl.w	r3, r9, r3
 80108a6:	4313      	orrs	r3, r2
 80108a8:	9304      	str	r3, [sp, #16]
 80108aa:	46a2      	mov	sl, r4
 80108ac:	e7d2      	b.n	8010854 <_svfiprintf_r+0xa0>
 80108ae:	9b03      	ldr	r3, [sp, #12]
 80108b0:	1d19      	adds	r1, r3, #4
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	9103      	str	r1, [sp, #12]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	bfbb      	ittet	lt
 80108ba:	425b      	neglt	r3, r3
 80108bc:	f042 0202 	orrlt.w	r2, r2, #2
 80108c0:	9307      	strge	r3, [sp, #28]
 80108c2:	9307      	strlt	r3, [sp, #28]
 80108c4:	bfb8      	it	lt
 80108c6:	9204      	strlt	r2, [sp, #16]
 80108c8:	7823      	ldrb	r3, [r4, #0]
 80108ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80108cc:	d10a      	bne.n	80108e4 <_svfiprintf_r+0x130>
 80108ce:	7863      	ldrb	r3, [r4, #1]
 80108d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80108d2:	d132      	bne.n	801093a <_svfiprintf_r+0x186>
 80108d4:	9b03      	ldr	r3, [sp, #12]
 80108d6:	1d1a      	adds	r2, r3, #4
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	9203      	str	r2, [sp, #12]
 80108dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80108e0:	3402      	adds	r4, #2
 80108e2:	9305      	str	r3, [sp, #20]
 80108e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80109a8 <_svfiprintf_r+0x1f4>
 80108e8:	7821      	ldrb	r1, [r4, #0]
 80108ea:	2203      	movs	r2, #3
 80108ec:	4650      	mov	r0, sl
 80108ee:	f7ef fc97 	bl	8000220 <memchr>
 80108f2:	b138      	cbz	r0, 8010904 <_svfiprintf_r+0x150>
 80108f4:	9b04      	ldr	r3, [sp, #16]
 80108f6:	eba0 000a 	sub.w	r0, r0, sl
 80108fa:	2240      	movs	r2, #64	@ 0x40
 80108fc:	4082      	lsls	r2, r0
 80108fe:	4313      	orrs	r3, r2
 8010900:	3401      	adds	r4, #1
 8010902:	9304      	str	r3, [sp, #16]
 8010904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010908:	4824      	ldr	r0, [pc, #144]	@ (801099c <_svfiprintf_r+0x1e8>)
 801090a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801090e:	2206      	movs	r2, #6
 8010910:	f7ef fc86 	bl	8000220 <memchr>
 8010914:	2800      	cmp	r0, #0
 8010916:	d036      	beq.n	8010986 <_svfiprintf_r+0x1d2>
 8010918:	4b21      	ldr	r3, [pc, #132]	@ (80109a0 <_svfiprintf_r+0x1ec>)
 801091a:	bb1b      	cbnz	r3, 8010964 <_svfiprintf_r+0x1b0>
 801091c:	9b03      	ldr	r3, [sp, #12]
 801091e:	3307      	adds	r3, #7
 8010920:	f023 0307 	bic.w	r3, r3, #7
 8010924:	3308      	adds	r3, #8
 8010926:	9303      	str	r3, [sp, #12]
 8010928:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801092a:	4433      	add	r3, r6
 801092c:	9309      	str	r3, [sp, #36]	@ 0x24
 801092e:	e76a      	b.n	8010806 <_svfiprintf_r+0x52>
 8010930:	fb0c 3202 	mla	r2, ip, r2, r3
 8010934:	460c      	mov	r4, r1
 8010936:	2001      	movs	r0, #1
 8010938:	e7a8      	b.n	801088c <_svfiprintf_r+0xd8>
 801093a:	2300      	movs	r3, #0
 801093c:	3401      	adds	r4, #1
 801093e:	9305      	str	r3, [sp, #20]
 8010940:	4619      	mov	r1, r3
 8010942:	f04f 0c0a 	mov.w	ip, #10
 8010946:	4620      	mov	r0, r4
 8010948:	f810 2b01 	ldrb.w	r2, [r0], #1
 801094c:	3a30      	subs	r2, #48	@ 0x30
 801094e:	2a09      	cmp	r2, #9
 8010950:	d903      	bls.n	801095a <_svfiprintf_r+0x1a6>
 8010952:	2b00      	cmp	r3, #0
 8010954:	d0c6      	beq.n	80108e4 <_svfiprintf_r+0x130>
 8010956:	9105      	str	r1, [sp, #20]
 8010958:	e7c4      	b.n	80108e4 <_svfiprintf_r+0x130>
 801095a:	fb0c 2101 	mla	r1, ip, r1, r2
 801095e:	4604      	mov	r4, r0
 8010960:	2301      	movs	r3, #1
 8010962:	e7f0      	b.n	8010946 <_svfiprintf_r+0x192>
 8010964:	ab03      	add	r3, sp, #12
 8010966:	9300      	str	r3, [sp, #0]
 8010968:	462a      	mov	r2, r5
 801096a:	4b0e      	ldr	r3, [pc, #56]	@ (80109a4 <_svfiprintf_r+0x1f0>)
 801096c:	a904      	add	r1, sp, #16
 801096e:	4638      	mov	r0, r7
 8010970:	f7fc ff30 	bl	800d7d4 <_printf_float>
 8010974:	1c42      	adds	r2, r0, #1
 8010976:	4606      	mov	r6, r0
 8010978:	d1d6      	bne.n	8010928 <_svfiprintf_r+0x174>
 801097a:	89ab      	ldrh	r3, [r5, #12]
 801097c:	065b      	lsls	r3, r3, #25
 801097e:	f53f af2d 	bmi.w	80107dc <_svfiprintf_r+0x28>
 8010982:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010984:	e72c      	b.n	80107e0 <_svfiprintf_r+0x2c>
 8010986:	ab03      	add	r3, sp, #12
 8010988:	9300      	str	r3, [sp, #0]
 801098a:	462a      	mov	r2, r5
 801098c:	4b05      	ldr	r3, [pc, #20]	@ (80109a4 <_svfiprintf_r+0x1f0>)
 801098e:	a904      	add	r1, sp, #16
 8010990:	4638      	mov	r0, r7
 8010992:	f7fd f9b7 	bl	800dd04 <_printf_i>
 8010996:	e7ed      	b.n	8010974 <_svfiprintf_r+0x1c0>
 8010998:	08011941 	.word	0x08011941
 801099c:	0801194b 	.word	0x0801194b
 80109a0:	0800d7d5 	.word	0x0800d7d5
 80109a4:	080106ff 	.word	0x080106ff
 80109a8:	08011947 	.word	0x08011947

080109ac <__sflush_r>:
 80109ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80109b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109b4:	0716      	lsls	r6, r2, #28
 80109b6:	4605      	mov	r5, r0
 80109b8:	460c      	mov	r4, r1
 80109ba:	d454      	bmi.n	8010a66 <__sflush_r+0xba>
 80109bc:	684b      	ldr	r3, [r1, #4]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	dc02      	bgt.n	80109c8 <__sflush_r+0x1c>
 80109c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	dd48      	ble.n	8010a5a <__sflush_r+0xae>
 80109c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80109ca:	2e00      	cmp	r6, #0
 80109cc:	d045      	beq.n	8010a5a <__sflush_r+0xae>
 80109ce:	2300      	movs	r3, #0
 80109d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80109d4:	682f      	ldr	r7, [r5, #0]
 80109d6:	6a21      	ldr	r1, [r4, #32]
 80109d8:	602b      	str	r3, [r5, #0]
 80109da:	d030      	beq.n	8010a3e <__sflush_r+0x92>
 80109dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80109de:	89a3      	ldrh	r3, [r4, #12]
 80109e0:	0759      	lsls	r1, r3, #29
 80109e2:	d505      	bpl.n	80109f0 <__sflush_r+0x44>
 80109e4:	6863      	ldr	r3, [r4, #4]
 80109e6:	1ad2      	subs	r2, r2, r3
 80109e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80109ea:	b10b      	cbz	r3, 80109f0 <__sflush_r+0x44>
 80109ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80109ee:	1ad2      	subs	r2, r2, r3
 80109f0:	2300      	movs	r3, #0
 80109f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80109f4:	6a21      	ldr	r1, [r4, #32]
 80109f6:	4628      	mov	r0, r5
 80109f8:	47b0      	blx	r6
 80109fa:	1c43      	adds	r3, r0, #1
 80109fc:	89a3      	ldrh	r3, [r4, #12]
 80109fe:	d106      	bne.n	8010a0e <__sflush_r+0x62>
 8010a00:	6829      	ldr	r1, [r5, #0]
 8010a02:	291d      	cmp	r1, #29
 8010a04:	d82b      	bhi.n	8010a5e <__sflush_r+0xb2>
 8010a06:	4a2a      	ldr	r2, [pc, #168]	@ (8010ab0 <__sflush_r+0x104>)
 8010a08:	410a      	asrs	r2, r1
 8010a0a:	07d6      	lsls	r6, r2, #31
 8010a0c:	d427      	bmi.n	8010a5e <__sflush_r+0xb2>
 8010a0e:	2200      	movs	r2, #0
 8010a10:	6062      	str	r2, [r4, #4]
 8010a12:	04d9      	lsls	r1, r3, #19
 8010a14:	6922      	ldr	r2, [r4, #16]
 8010a16:	6022      	str	r2, [r4, #0]
 8010a18:	d504      	bpl.n	8010a24 <__sflush_r+0x78>
 8010a1a:	1c42      	adds	r2, r0, #1
 8010a1c:	d101      	bne.n	8010a22 <__sflush_r+0x76>
 8010a1e:	682b      	ldr	r3, [r5, #0]
 8010a20:	b903      	cbnz	r3, 8010a24 <__sflush_r+0x78>
 8010a22:	6560      	str	r0, [r4, #84]	@ 0x54
 8010a24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010a26:	602f      	str	r7, [r5, #0]
 8010a28:	b1b9      	cbz	r1, 8010a5a <__sflush_r+0xae>
 8010a2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010a2e:	4299      	cmp	r1, r3
 8010a30:	d002      	beq.n	8010a38 <__sflush_r+0x8c>
 8010a32:	4628      	mov	r0, r5
 8010a34:	f7fe fcdc 	bl	800f3f0 <_free_r>
 8010a38:	2300      	movs	r3, #0
 8010a3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8010a3c:	e00d      	b.n	8010a5a <__sflush_r+0xae>
 8010a3e:	2301      	movs	r3, #1
 8010a40:	4628      	mov	r0, r5
 8010a42:	47b0      	blx	r6
 8010a44:	4602      	mov	r2, r0
 8010a46:	1c50      	adds	r0, r2, #1
 8010a48:	d1c9      	bne.n	80109de <__sflush_r+0x32>
 8010a4a:	682b      	ldr	r3, [r5, #0]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d0c6      	beq.n	80109de <__sflush_r+0x32>
 8010a50:	2b1d      	cmp	r3, #29
 8010a52:	d001      	beq.n	8010a58 <__sflush_r+0xac>
 8010a54:	2b16      	cmp	r3, #22
 8010a56:	d11e      	bne.n	8010a96 <__sflush_r+0xea>
 8010a58:	602f      	str	r7, [r5, #0]
 8010a5a:	2000      	movs	r0, #0
 8010a5c:	e022      	b.n	8010aa4 <__sflush_r+0xf8>
 8010a5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a62:	b21b      	sxth	r3, r3
 8010a64:	e01b      	b.n	8010a9e <__sflush_r+0xf2>
 8010a66:	690f      	ldr	r7, [r1, #16]
 8010a68:	2f00      	cmp	r7, #0
 8010a6a:	d0f6      	beq.n	8010a5a <__sflush_r+0xae>
 8010a6c:	0793      	lsls	r3, r2, #30
 8010a6e:	680e      	ldr	r6, [r1, #0]
 8010a70:	bf08      	it	eq
 8010a72:	694b      	ldreq	r3, [r1, #20]
 8010a74:	600f      	str	r7, [r1, #0]
 8010a76:	bf18      	it	ne
 8010a78:	2300      	movne	r3, #0
 8010a7a:	eba6 0807 	sub.w	r8, r6, r7
 8010a7e:	608b      	str	r3, [r1, #8]
 8010a80:	f1b8 0f00 	cmp.w	r8, #0
 8010a84:	dde9      	ble.n	8010a5a <__sflush_r+0xae>
 8010a86:	6a21      	ldr	r1, [r4, #32]
 8010a88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010a8a:	4643      	mov	r3, r8
 8010a8c:	463a      	mov	r2, r7
 8010a8e:	4628      	mov	r0, r5
 8010a90:	47b0      	blx	r6
 8010a92:	2800      	cmp	r0, #0
 8010a94:	dc08      	bgt.n	8010aa8 <__sflush_r+0xfc>
 8010a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a9e:	81a3      	strh	r3, [r4, #12]
 8010aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8010aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010aa8:	4407      	add	r7, r0
 8010aaa:	eba8 0800 	sub.w	r8, r8, r0
 8010aae:	e7e7      	b.n	8010a80 <__sflush_r+0xd4>
 8010ab0:	dfbffffe 	.word	0xdfbffffe

08010ab4 <_fflush_r>:
 8010ab4:	b538      	push	{r3, r4, r5, lr}
 8010ab6:	690b      	ldr	r3, [r1, #16]
 8010ab8:	4605      	mov	r5, r0
 8010aba:	460c      	mov	r4, r1
 8010abc:	b913      	cbnz	r3, 8010ac4 <_fflush_r+0x10>
 8010abe:	2500      	movs	r5, #0
 8010ac0:	4628      	mov	r0, r5
 8010ac2:	bd38      	pop	{r3, r4, r5, pc}
 8010ac4:	b118      	cbz	r0, 8010ace <_fflush_r+0x1a>
 8010ac6:	6a03      	ldr	r3, [r0, #32]
 8010ac8:	b90b      	cbnz	r3, 8010ace <_fflush_r+0x1a>
 8010aca:	f7fd fcdb 	bl	800e484 <__sinit>
 8010ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d0f3      	beq.n	8010abe <_fflush_r+0xa>
 8010ad6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010ad8:	07d0      	lsls	r0, r2, #31
 8010ada:	d404      	bmi.n	8010ae6 <_fflush_r+0x32>
 8010adc:	0599      	lsls	r1, r3, #22
 8010ade:	d402      	bmi.n	8010ae6 <_fflush_r+0x32>
 8010ae0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010ae2:	f7fd fe18 	bl	800e716 <__retarget_lock_acquire_recursive>
 8010ae6:	4628      	mov	r0, r5
 8010ae8:	4621      	mov	r1, r4
 8010aea:	f7ff ff5f 	bl	80109ac <__sflush_r>
 8010aee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010af0:	07da      	lsls	r2, r3, #31
 8010af2:	4605      	mov	r5, r0
 8010af4:	d4e4      	bmi.n	8010ac0 <_fflush_r+0xc>
 8010af6:	89a3      	ldrh	r3, [r4, #12]
 8010af8:	059b      	lsls	r3, r3, #22
 8010afa:	d4e1      	bmi.n	8010ac0 <_fflush_r+0xc>
 8010afc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010afe:	f7fd fe0b 	bl	800e718 <__retarget_lock_release_recursive>
 8010b02:	e7dd      	b.n	8010ac0 <_fflush_r+0xc>

08010b04 <memmove>:
 8010b04:	4288      	cmp	r0, r1
 8010b06:	b510      	push	{r4, lr}
 8010b08:	eb01 0402 	add.w	r4, r1, r2
 8010b0c:	d902      	bls.n	8010b14 <memmove+0x10>
 8010b0e:	4284      	cmp	r4, r0
 8010b10:	4623      	mov	r3, r4
 8010b12:	d807      	bhi.n	8010b24 <memmove+0x20>
 8010b14:	1e43      	subs	r3, r0, #1
 8010b16:	42a1      	cmp	r1, r4
 8010b18:	d008      	beq.n	8010b2c <memmove+0x28>
 8010b1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010b1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010b22:	e7f8      	b.n	8010b16 <memmove+0x12>
 8010b24:	4402      	add	r2, r0
 8010b26:	4601      	mov	r1, r0
 8010b28:	428a      	cmp	r2, r1
 8010b2a:	d100      	bne.n	8010b2e <memmove+0x2a>
 8010b2c:	bd10      	pop	{r4, pc}
 8010b2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010b32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010b36:	e7f7      	b.n	8010b28 <memmove+0x24>

08010b38 <_sbrk_r>:
 8010b38:	b538      	push	{r3, r4, r5, lr}
 8010b3a:	4d06      	ldr	r5, [pc, #24]	@ (8010b54 <_sbrk_r+0x1c>)
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	4604      	mov	r4, r0
 8010b40:	4608      	mov	r0, r1
 8010b42:	602b      	str	r3, [r5, #0]
 8010b44:	f7f1 f906 	bl	8001d54 <_sbrk>
 8010b48:	1c43      	adds	r3, r0, #1
 8010b4a:	d102      	bne.n	8010b52 <_sbrk_r+0x1a>
 8010b4c:	682b      	ldr	r3, [r5, #0]
 8010b4e:	b103      	cbz	r3, 8010b52 <_sbrk_r+0x1a>
 8010b50:	6023      	str	r3, [r4, #0]
 8010b52:	bd38      	pop	{r3, r4, r5, pc}
 8010b54:	20000a34 	.word	0x20000a34

08010b58 <__assert_func>:
 8010b58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010b5a:	4614      	mov	r4, r2
 8010b5c:	461a      	mov	r2, r3
 8010b5e:	4b09      	ldr	r3, [pc, #36]	@ (8010b84 <__assert_func+0x2c>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	4605      	mov	r5, r0
 8010b64:	68d8      	ldr	r0, [r3, #12]
 8010b66:	b954      	cbnz	r4, 8010b7e <__assert_func+0x26>
 8010b68:	4b07      	ldr	r3, [pc, #28]	@ (8010b88 <__assert_func+0x30>)
 8010b6a:	461c      	mov	r4, r3
 8010b6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010b70:	9100      	str	r1, [sp, #0]
 8010b72:	462b      	mov	r3, r5
 8010b74:	4905      	ldr	r1, [pc, #20]	@ (8010b8c <__assert_func+0x34>)
 8010b76:	f000 f84f 	bl	8010c18 <fiprintf>
 8010b7a:	f000 f85f 	bl	8010c3c <abort>
 8010b7e:	4b04      	ldr	r3, [pc, #16]	@ (8010b90 <__assert_func+0x38>)
 8010b80:	e7f4      	b.n	8010b6c <__assert_func+0x14>
 8010b82:	bf00      	nop
 8010b84:	20000208 	.word	0x20000208
 8010b88:	0801198d 	.word	0x0801198d
 8010b8c:	0801195f 	.word	0x0801195f
 8010b90:	08011952 	.word	0x08011952

08010b94 <_calloc_r>:
 8010b94:	b570      	push	{r4, r5, r6, lr}
 8010b96:	fba1 5402 	umull	r5, r4, r1, r2
 8010b9a:	b93c      	cbnz	r4, 8010bac <_calloc_r+0x18>
 8010b9c:	4629      	mov	r1, r5
 8010b9e:	f7fe ffd5 	bl	800fb4c <_malloc_r>
 8010ba2:	4606      	mov	r6, r0
 8010ba4:	b928      	cbnz	r0, 8010bb2 <_calloc_r+0x1e>
 8010ba6:	2600      	movs	r6, #0
 8010ba8:	4630      	mov	r0, r6
 8010baa:	bd70      	pop	{r4, r5, r6, pc}
 8010bac:	220c      	movs	r2, #12
 8010bae:	6002      	str	r2, [r0, #0]
 8010bb0:	e7f9      	b.n	8010ba6 <_calloc_r+0x12>
 8010bb2:	462a      	mov	r2, r5
 8010bb4:	4621      	mov	r1, r4
 8010bb6:	f7fd fd1f 	bl	800e5f8 <memset>
 8010bba:	e7f5      	b.n	8010ba8 <_calloc_r+0x14>

08010bbc <_realloc_r>:
 8010bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bc0:	4680      	mov	r8, r0
 8010bc2:	4615      	mov	r5, r2
 8010bc4:	460c      	mov	r4, r1
 8010bc6:	b921      	cbnz	r1, 8010bd2 <_realloc_r+0x16>
 8010bc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010bcc:	4611      	mov	r1, r2
 8010bce:	f7fe bfbd 	b.w	800fb4c <_malloc_r>
 8010bd2:	b92a      	cbnz	r2, 8010be0 <_realloc_r+0x24>
 8010bd4:	f7fe fc0c 	bl	800f3f0 <_free_r>
 8010bd8:	2400      	movs	r4, #0
 8010bda:	4620      	mov	r0, r4
 8010bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010be0:	f000 f833 	bl	8010c4a <_malloc_usable_size_r>
 8010be4:	4285      	cmp	r5, r0
 8010be6:	4606      	mov	r6, r0
 8010be8:	d802      	bhi.n	8010bf0 <_realloc_r+0x34>
 8010bea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010bee:	d8f4      	bhi.n	8010bda <_realloc_r+0x1e>
 8010bf0:	4629      	mov	r1, r5
 8010bf2:	4640      	mov	r0, r8
 8010bf4:	f7fe ffaa 	bl	800fb4c <_malloc_r>
 8010bf8:	4607      	mov	r7, r0
 8010bfa:	2800      	cmp	r0, #0
 8010bfc:	d0ec      	beq.n	8010bd8 <_realloc_r+0x1c>
 8010bfe:	42b5      	cmp	r5, r6
 8010c00:	462a      	mov	r2, r5
 8010c02:	4621      	mov	r1, r4
 8010c04:	bf28      	it	cs
 8010c06:	4632      	movcs	r2, r6
 8010c08:	f7fd fd87 	bl	800e71a <memcpy>
 8010c0c:	4621      	mov	r1, r4
 8010c0e:	4640      	mov	r0, r8
 8010c10:	f7fe fbee 	bl	800f3f0 <_free_r>
 8010c14:	463c      	mov	r4, r7
 8010c16:	e7e0      	b.n	8010bda <_realloc_r+0x1e>

08010c18 <fiprintf>:
 8010c18:	b40e      	push	{r1, r2, r3}
 8010c1a:	b503      	push	{r0, r1, lr}
 8010c1c:	4601      	mov	r1, r0
 8010c1e:	ab03      	add	r3, sp, #12
 8010c20:	4805      	ldr	r0, [pc, #20]	@ (8010c38 <fiprintf+0x20>)
 8010c22:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c26:	6800      	ldr	r0, [r0, #0]
 8010c28:	9301      	str	r3, [sp, #4]
 8010c2a:	f000 f83f 	bl	8010cac <_vfiprintf_r>
 8010c2e:	b002      	add	sp, #8
 8010c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c34:	b003      	add	sp, #12
 8010c36:	4770      	bx	lr
 8010c38:	20000208 	.word	0x20000208

08010c3c <abort>:
 8010c3c:	b508      	push	{r3, lr}
 8010c3e:	2006      	movs	r0, #6
 8010c40:	f000 fa08 	bl	8011054 <raise>
 8010c44:	2001      	movs	r0, #1
 8010c46:	f7f1 f80d 	bl	8001c64 <_exit>

08010c4a <_malloc_usable_size_r>:
 8010c4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c4e:	1f18      	subs	r0, r3, #4
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	bfbc      	itt	lt
 8010c54:	580b      	ldrlt	r3, [r1, r0]
 8010c56:	18c0      	addlt	r0, r0, r3
 8010c58:	4770      	bx	lr

08010c5a <__sfputc_r>:
 8010c5a:	6893      	ldr	r3, [r2, #8]
 8010c5c:	3b01      	subs	r3, #1
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	b410      	push	{r4}
 8010c62:	6093      	str	r3, [r2, #8]
 8010c64:	da08      	bge.n	8010c78 <__sfputc_r+0x1e>
 8010c66:	6994      	ldr	r4, [r2, #24]
 8010c68:	42a3      	cmp	r3, r4
 8010c6a:	db01      	blt.n	8010c70 <__sfputc_r+0x16>
 8010c6c:	290a      	cmp	r1, #10
 8010c6e:	d103      	bne.n	8010c78 <__sfputc_r+0x1e>
 8010c70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c74:	f000 b932 	b.w	8010edc <__swbuf_r>
 8010c78:	6813      	ldr	r3, [r2, #0]
 8010c7a:	1c58      	adds	r0, r3, #1
 8010c7c:	6010      	str	r0, [r2, #0]
 8010c7e:	7019      	strb	r1, [r3, #0]
 8010c80:	4608      	mov	r0, r1
 8010c82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c86:	4770      	bx	lr

08010c88 <__sfputs_r>:
 8010c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c8a:	4606      	mov	r6, r0
 8010c8c:	460f      	mov	r7, r1
 8010c8e:	4614      	mov	r4, r2
 8010c90:	18d5      	adds	r5, r2, r3
 8010c92:	42ac      	cmp	r4, r5
 8010c94:	d101      	bne.n	8010c9a <__sfputs_r+0x12>
 8010c96:	2000      	movs	r0, #0
 8010c98:	e007      	b.n	8010caa <__sfputs_r+0x22>
 8010c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c9e:	463a      	mov	r2, r7
 8010ca0:	4630      	mov	r0, r6
 8010ca2:	f7ff ffda 	bl	8010c5a <__sfputc_r>
 8010ca6:	1c43      	adds	r3, r0, #1
 8010ca8:	d1f3      	bne.n	8010c92 <__sfputs_r+0xa>
 8010caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010cac <_vfiprintf_r>:
 8010cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cb0:	460d      	mov	r5, r1
 8010cb2:	b09d      	sub	sp, #116	@ 0x74
 8010cb4:	4614      	mov	r4, r2
 8010cb6:	4698      	mov	r8, r3
 8010cb8:	4606      	mov	r6, r0
 8010cba:	b118      	cbz	r0, 8010cc4 <_vfiprintf_r+0x18>
 8010cbc:	6a03      	ldr	r3, [r0, #32]
 8010cbe:	b90b      	cbnz	r3, 8010cc4 <_vfiprintf_r+0x18>
 8010cc0:	f7fd fbe0 	bl	800e484 <__sinit>
 8010cc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010cc6:	07d9      	lsls	r1, r3, #31
 8010cc8:	d405      	bmi.n	8010cd6 <_vfiprintf_r+0x2a>
 8010cca:	89ab      	ldrh	r3, [r5, #12]
 8010ccc:	059a      	lsls	r2, r3, #22
 8010cce:	d402      	bmi.n	8010cd6 <_vfiprintf_r+0x2a>
 8010cd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010cd2:	f7fd fd20 	bl	800e716 <__retarget_lock_acquire_recursive>
 8010cd6:	89ab      	ldrh	r3, [r5, #12]
 8010cd8:	071b      	lsls	r3, r3, #28
 8010cda:	d501      	bpl.n	8010ce0 <_vfiprintf_r+0x34>
 8010cdc:	692b      	ldr	r3, [r5, #16]
 8010cde:	b99b      	cbnz	r3, 8010d08 <_vfiprintf_r+0x5c>
 8010ce0:	4629      	mov	r1, r5
 8010ce2:	4630      	mov	r0, r6
 8010ce4:	f000 f938 	bl	8010f58 <__swsetup_r>
 8010ce8:	b170      	cbz	r0, 8010d08 <_vfiprintf_r+0x5c>
 8010cea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010cec:	07dc      	lsls	r4, r3, #31
 8010cee:	d504      	bpl.n	8010cfa <_vfiprintf_r+0x4e>
 8010cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8010cf4:	b01d      	add	sp, #116	@ 0x74
 8010cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cfa:	89ab      	ldrh	r3, [r5, #12]
 8010cfc:	0598      	lsls	r0, r3, #22
 8010cfe:	d4f7      	bmi.n	8010cf0 <_vfiprintf_r+0x44>
 8010d00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010d02:	f7fd fd09 	bl	800e718 <__retarget_lock_release_recursive>
 8010d06:	e7f3      	b.n	8010cf0 <_vfiprintf_r+0x44>
 8010d08:	2300      	movs	r3, #0
 8010d0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d0c:	2320      	movs	r3, #32
 8010d0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010d12:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d16:	2330      	movs	r3, #48	@ 0x30
 8010d18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010ec8 <_vfiprintf_r+0x21c>
 8010d1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010d20:	f04f 0901 	mov.w	r9, #1
 8010d24:	4623      	mov	r3, r4
 8010d26:	469a      	mov	sl, r3
 8010d28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d2c:	b10a      	cbz	r2, 8010d32 <_vfiprintf_r+0x86>
 8010d2e:	2a25      	cmp	r2, #37	@ 0x25
 8010d30:	d1f9      	bne.n	8010d26 <_vfiprintf_r+0x7a>
 8010d32:	ebba 0b04 	subs.w	fp, sl, r4
 8010d36:	d00b      	beq.n	8010d50 <_vfiprintf_r+0xa4>
 8010d38:	465b      	mov	r3, fp
 8010d3a:	4622      	mov	r2, r4
 8010d3c:	4629      	mov	r1, r5
 8010d3e:	4630      	mov	r0, r6
 8010d40:	f7ff ffa2 	bl	8010c88 <__sfputs_r>
 8010d44:	3001      	adds	r0, #1
 8010d46:	f000 80a7 	beq.w	8010e98 <_vfiprintf_r+0x1ec>
 8010d4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d4c:	445a      	add	r2, fp
 8010d4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010d50:	f89a 3000 	ldrb.w	r3, [sl]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	f000 809f 	beq.w	8010e98 <_vfiprintf_r+0x1ec>
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8010d60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d64:	f10a 0a01 	add.w	sl, sl, #1
 8010d68:	9304      	str	r3, [sp, #16]
 8010d6a:	9307      	str	r3, [sp, #28]
 8010d6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010d70:	931a      	str	r3, [sp, #104]	@ 0x68
 8010d72:	4654      	mov	r4, sl
 8010d74:	2205      	movs	r2, #5
 8010d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d7a:	4853      	ldr	r0, [pc, #332]	@ (8010ec8 <_vfiprintf_r+0x21c>)
 8010d7c:	f7ef fa50 	bl	8000220 <memchr>
 8010d80:	9a04      	ldr	r2, [sp, #16]
 8010d82:	b9d8      	cbnz	r0, 8010dbc <_vfiprintf_r+0x110>
 8010d84:	06d1      	lsls	r1, r2, #27
 8010d86:	bf44      	itt	mi
 8010d88:	2320      	movmi	r3, #32
 8010d8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d8e:	0713      	lsls	r3, r2, #28
 8010d90:	bf44      	itt	mi
 8010d92:	232b      	movmi	r3, #43	@ 0x2b
 8010d94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d98:	f89a 3000 	ldrb.w	r3, [sl]
 8010d9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d9e:	d015      	beq.n	8010dcc <_vfiprintf_r+0x120>
 8010da0:	9a07      	ldr	r2, [sp, #28]
 8010da2:	4654      	mov	r4, sl
 8010da4:	2000      	movs	r0, #0
 8010da6:	f04f 0c0a 	mov.w	ip, #10
 8010daa:	4621      	mov	r1, r4
 8010dac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010db0:	3b30      	subs	r3, #48	@ 0x30
 8010db2:	2b09      	cmp	r3, #9
 8010db4:	d94b      	bls.n	8010e4e <_vfiprintf_r+0x1a2>
 8010db6:	b1b0      	cbz	r0, 8010de6 <_vfiprintf_r+0x13a>
 8010db8:	9207      	str	r2, [sp, #28]
 8010dba:	e014      	b.n	8010de6 <_vfiprintf_r+0x13a>
 8010dbc:	eba0 0308 	sub.w	r3, r0, r8
 8010dc0:	fa09 f303 	lsl.w	r3, r9, r3
 8010dc4:	4313      	orrs	r3, r2
 8010dc6:	9304      	str	r3, [sp, #16]
 8010dc8:	46a2      	mov	sl, r4
 8010dca:	e7d2      	b.n	8010d72 <_vfiprintf_r+0xc6>
 8010dcc:	9b03      	ldr	r3, [sp, #12]
 8010dce:	1d19      	adds	r1, r3, #4
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	9103      	str	r1, [sp, #12]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	bfbb      	ittet	lt
 8010dd8:	425b      	neglt	r3, r3
 8010dda:	f042 0202 	orrlt.w	r2, r2, #2
 8010dde:	9307      	strge	r3, [sp, #28]
 8010de0:	9307      	strlt	r3, [sp, #28]
 8010de2:	bfb8      	it	lt
 8010de4:	9204      	strlt	r2, [sp, #16]
 8010de6:	7823      	ldrb	r3, [r4, #0]
 8010de8:	2b2e      	cmp	r3, #46	@ 0x2e
 8010dea:	d10a      	bne.n	8010e02 <_vfiprintf_r+0x156>
 8010dec:	7863      	ldrb	r3, [r4, #1]
 8010dee:	2b2a      	cmp	r3, #42	@ 0x2a
 8010df0:	d132      	bne.n	8010e58 <_vfiprintf_r+0x1ac>
 8010df2:	9b03      	ldr	r3, [sp, #12]
 8010df4:	1d1a      	adds	r2, r3, #4
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	9203      	str	r2, [sp, #12]
 8010dfa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010dfe:	3402      	adds	r4, #2
 8010e00:	9305      	str	r3, [sp, #20]
 8010e02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010ed8 <_vfiprintf_r+0x22c>
 8010e06:	7821      	ldrb	r1, [r4, #0]
 8010e08:	2203      	movs	r2, #3
 8010e0a:	4650      	mov	r0, sl
 8010e0c:	f7ef fa08 	bl	8000220 <memchr>
 8010e10:	b138      	cbz	r0, 8010e22 <_vfiprintf_r+0x176>
 8010e12:	9b04      	ldr	r3, [sp, #16]
 8010e14:	eba0 000a 	sub.w	r0, r0, sl
 8010e18:	2240      	movs	r2, #64	@ 0x40
 8010e1a:	4082      	lsls	r2, r0
 8010e1c:	4313      	orrs	r3, r2
 8010e1e:	3401      	adds	r4, #1
 8010e20:	9304      	str	r3, [sp, #16]
 8010e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e26:	4829      	ldr	r0, [pc, #164]	@ (8010ecc <_vfiprintf_r+0x220>)
 8010e28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010e2c:	2206      	movs	r2, #6
 8010e2e:	f7ef f9f7 	bl	8000220 <memchr>
 8010e32:	2800      	cmp	r0, #0
 8010e34:	d03f      	beq.n	8010eb6 <_vfiprintf_r+0x20a>
 8010e36:	4b26      	ldr	r3, [pc, #152]	@ (8010ed0 <_vfiprintf_r+0x224>)
 8010e38:	bb1b      	cbnz	r3, 8010e82 <_vfiprintf_r+0x1d6>
 8010e3a:	9b03      	ldr	r3, [sp, #12]
 8010e3c:	3307      	adds	r3, #7
 8010e3e:	f023 0307 	bic.w	r3, r3, #7
 8010e42:	3308      	adds	r3, #8
 8010e44:	9303      	str	r3, [sp, #12]
 8010e46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e48:	443b      	add	r3, r7
 8010e4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e4c:	e76a      	b.n	8010d24 <_vfiprintf_r+0x78>
 8010e4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e52:	460c      	mov	r4, r1
 8010e54:	2001      	movs	r0, #1
 8010e56:	e7a8      	b.n	8010daa <_vfiprintf_r+0xfe>
 8010e58:	2300      	movs	r3, #0
 8010e5a:	3401      	adds	r4, #1
 8010e5c:	9305      	str	r3, [sp, #20]
 8010e5e:	4619      	mov	r1, r3
 8010e60:	f04f 0c0a 	mov.w	ip, #10
 8010e64:	4620      	mov	r0, r4
 8010e66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e6a:	3a30      	subs	r2, #48	@ 0x30
 8010e6c:	2a09      	cmp	r2, #9
 8010e6e:	d903      	bls.n	8010e78 <_vfiprintf_r+0x1cc>
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d0c6      	beq.n	8010e02 <_vfiprintf_r+0x156>
 8010e74:	9105      	str	r1, [sp, #20]
 8010e76:	e7c4      	b.n	8010e02 <_vfiprintf_r+0x156>
 8010e78:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e7c:	4604      	mov	r4, r0
 8010e7e:	2301      	movs	r3, #1
 8010e80:	e7f0      	b.n	8010e64 <_vfiprintf_r+0x1b8>
 8010e82:	ab03      	add	r3, sp, #12
 8010e84:	9300      	str	r3, [sp, #0]
 8010e86:	462a      	mov	r2, r5
 8010e88:	4b12      	ldr	r3, [pc, #72]	@ (8010ed4 <_vfiprintf_r+0x228>)
 8010e8a:	a904      	add	r1, sp, #16
 8010e8c:	4630      	mov	r0, r6
 8010e8e:	f7fc fca1 	bl	800d7d4 <_printf_float>
 8010e92:	4607      	mov	r7, r0
 8010e94:	1c78      	adds	r0, r7, #1
 8010e96:	d1d6      	bne.n	8010e46 <_vfiprintf_r+0x19a>
 8010e98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010e9a:	07d9      	lsls	r1, r3, #31
 8010e9c:	d405      	bmi.n	8010eaa <_vfiprintf_r+0x1fe>
 8010e9e:	89ab      	ldrh	r3, [r5, #12]
 8010ea0:	059a      	lsls	r2, r3, #22
 8010ea2:	d402      	bmi.n	8010eaa <_vfiprintf_r+0x1fe>
 8010ea4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010ea6:	f7fd fc37 	bl	800e718 <__retarget_lock_release_recursive>
 8010eaa:	89ab      	ldrh	r3, [r5, #12]
 8010eac:	065b      	lsls	r3, r3, #25
 8010eae:	f53f af1f 	bmi.w	8010cf0 <_vfiprintf_r+0x44>
 8010eb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010eb4:	e71e      	b.n	8010cf4 <_vfiprintf_r+0x48>
 8010eb6:	ab03      	add	r3, sp, #12
 8010eb8:	9300      	str	r3, [sp, #0]
 8010eba:	462a      	mov	r2, r5
 8010ebc:	4b05      	ldr	r3, [pc, #20]	@ (8010ed4 <_vfiprintf_r+0x228>)
 8010ebe:	a904      	add	r1, sp, #16
 8010ec0:	4630      	mov	r0, r6
 8010ec2:	f7fc ff1f 	bl	800dd04 <_printf_i>
 8010ec6:	e7e4      	b.n	8010e92 <_vfiprintf_r+0x1e6>
 8010ec8:	08011941 	.word	0x08011941
 8010ecc:	0801194b 	.word	0x0801194b
 8010ed0:	0800d7d5 	.word	0x0800d7d5
 8010ed4:	08010c89 	.word	0x08010c89
 8010ed8:	08011947 	.word	0x08011947

08010edc <__swbuf_r>:
 8010edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ede:	460e      	mov	r6, r1
 8010ee0:	4614      	mov	r4, r2
 8010ee2:	4605      	mov	r5, r0
 8010ee4:	b118      	cbz	r0, 8010eee <__swbuf_r+0x12>
 8010ee6:	6a03      	ldr	r3, [r0, #32]
 8010ee8:	b90b      	cbnz	r3, 8010eee <__swbuf_r+0x12>
 8010eea:	f7fd facb 	bl	800e484 <__sinit>
 8010eee:	69a3      	ldr	r3, [r4, #24]
 8010ef0:	60a3      	str	r3, [r4, #8]
 8010ef2:	89a3      	ldrh	r3, [r4, #12]
 8010ef4:	071a      	lsls	r2, r3, #28
 8010ef6:	d501      	bpl.n	8010efc <__swbuf_r+0x20>
 8010ef8:	6923      	ldr	r3, [r4, #16]
 8010efa:	b943      	cbnz	r3, 8010f0e <__swbuf_r+0x32>
 8010efc:	4621      	mov	r1, r4
 8010efe:	4628      	mov	r0, r5
 8010f00:	f000 f82a 	bl	8010f58 <__swsetup_r>
 8010f04:	b118      	cbz	r0, 8010f0e <__swbuf_r+0x32>
 8010f06:	f04f 37ff 	mov.w	r7, #4294967295
 8010f0a:	4638      	mov	r0, r7
 8010f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f0e:	6823      	ldr	r3, [r4, #0]
 8010f10:	6922      	ldr	r2, [r4, #16]
 8010f12:	1a98      	subs	r0, r3, r2
 8010f14:	6963      	ldr	r3, [r4, #20]
 8010f16:	b2f6      	uxtb	r6, r6
 8010f18:	4283      	cmp	r3, r0
 8010f1a:	4637      	mov	r7, r6
 8010f1c:	dc05      	bgt.n	8010f2a <__swbuf_r+0x4e>
 8010f1e:	4621      	mov	r1, r4
 8010f20:	4628      	mov	r0, r5
 8010f22:	f7ff fdc7 	bl	8010ab4 <_fflush_r>
 8010f26:	2800      	cmp	r0, #0
 8010f28:	d1ed      	bne.n	8010f06 <__swbuf_r+0x2a>
 8010f2a:	68a3      	ldr	r3, [r4, #8]
 8010f2c:	3b01      	subs	r3, #1
 8010f2e:	60a3      	str	r3, [r4, #8]
 8010f30:	6823      	ldr	r3, [r4, #0]
 8010f32:	1c5a      	adds	r2, r3, #1
 8010f34:	6022      	str	r2, [r4, #0]
 8010f36:	701e      	strb	r6, [r3, #0]
 8010f38:	6962      	ldr	r2, [r4, #20]
 8010f3a:	1c43      	adds	r3, r0, #1
 8010f3c:	429a      	cmp	r2, r3
 8010f3e:	d004      	beq.n	8010f4a <__swbuf_r+0x6e>
 8010f40:	89a3      	ldrh	r3, [r4, #12]
 8010f42:	07db      	lsls	r3, r3, #31
 8010f44:	d5e1      	bpl.n	8010f0a <__swbuf_r+0x2e>
 8010f46:	2e0a      	cmp	r6, #10
 8010f48:	d1df      	bne.n	8010f0a <__swbuf_r+0x2e>
 8010f4a:	4621      	mov	r1, r4
 8010f4c:	4628      	mov	r0, r5
 8010f4e:	f7ff fdb1 	bl	8010ab4 <_fflush_r>
 8010f52:	2800      	cmp	r0, #0
 8010f54:	d0d9      	beq.n	8010f0a <__swbuf_r+0x2e>
 8010f56:	e7d6      	b.n	8010f06 <__swbuf_r+0x2a>

08010f58 <__swsetup_r>:
 8010f58:	b538      	push	{r3, r4, r5, lr}
 8010f5a:	4b29      	ldr	r3, [pc, #164]	@ (8011000 <__swsetup_r+0xa8>)
 8010f5c:	4605      	mov	r5, r0
 8010f5e:	6818      	ldr	r0, [r3, #0]
 8010f60:	460c      	mov	r4, r1
 8010f62:	b118      	cbz	r0, 8010f6c <__swsetup_r+0x14>
 8010f64:	6a03      	ldr	r3, [r0, #32]
 8010f66:	b90b      	cbnz	r3, 8010f6c <__swsetup_r+0x14>
 8010f68:	f7fd fa8c 	bl	800e484 <__sinit>
 8010f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f70:	0719      	lsls	r1, r3, #28
 8010f72:	d422      	bmi.n	8010fba <__swsetup_r+0x62>
 8010f74:	06da      	lsls	r2, r3, #27
 8010f76:	d407      	bmi.n	8010f88 <__swsetup_r+0x30>
 8010f78:	2209      	movs	r2, #9
 8010f7a:	602a      	str	r2, [r5, #0]
 8010f7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f80:	81a3      	strh	r3, [r4, #12]
 8010f82:	f04f 30ff 	mov.w	r0, #4294967295
 8010f86:	e033      	b.n	8010ff0 <__swsetup_r+0x98>
 8010f88:	0758      	lsls	r0, r3, #29
 8010f8a:	d512      	bpl.n	8010fb2 <__swsetup_r+0x5a>
 8010f8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010f8e:	b141      	cbz	r1, 8010fa2 <__swsetup_r+0x4a>
 8010f90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010f94:	4299      	cmp	r1, r3
 8010f96:	d002      	beq.n	8010f9e <__swsetup_r+0x46>
 8010f98:	4628      	mov	r0, r5
 8010f9a:	f7fe fa29 	bl	800f3f0 <_free_r>
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	6363      	str	r3, [r4, #52]	@ 0x34
 8010fa2:	89a3      	ldrh	r3, [r4, #12]
 8010fa4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010fa8:	81a3      	strh	r3, [r4, #12]
 8010faa:	2300      	movs	r3, #0
 8010fac:	6063      	str	r3, [r4, #4]
 8010fae:	6923      	ldr	r3, [r4, #16]
 8010fb0:	6023      	str	r3, [r4, #0]
 8010fb2:	89a3      	ldrh	r3, [r4, #12]
 8010fb4:	f043 0308 	orr.w	r3, r3, #8
 8010fb8:	81a3      	strh	r3, [r4, #12]
 8010fba:	6923      	ldr	r3, [r4, #16]
 8010fbc:	b94b      	cbnz	r3, 8010fd2 <__swsetup_r+0x7a>
 8010fbe:	89a3      	ldrh	r3, [r4, #12]
 8010fc0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010fc8:	d003      	beq.n	8010fd2 <__swsetup_r+0x7a>
 8010fca:	4621      	mov	r1, r4
 8010fcc:	4628      	mov	r0, r5
 8010fce:	f000 f883 	bl	80110d8 <__smakebuf_r>
 8010fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010fd6:	f013 0201 	ands.w	r2, r3, #1
 8010fda:	d00a      	beq.n	8010ff2 <__swsetup_r+0x9a>
 8010fdc:	2200      	movs	r2, #0
 8010fde:	60a2      	str	r2, [r4, #8]
 8010fe0:	6962      	ldr	r2, [r4, #20]
 8010fe2:	4252      	negs	r2, r2
 8010fe4:	61a2      	str	r2, [r4, #24]
 8010fe6:	6922      	ldr	r2, [r4, #16]
 8010fe8:	b942      	cbnz	r2, 8010ffc <__swsetup_r+0xa4>
 8010fea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010fee:	d1c5      	bne.n	8010f7c <__swsetup_r+0x24>
 8010ff0:	bd38      	pop	{r3, r4, r5, pc}
 8010ff2:	0799      	lsls	r1, r3, #30
 8010ff4:	bf58      	it	pl
 8010ff6:	6962      	ldrpl	r2, [r4, #20]
 8010ff8:	60a2      	str	r2, [r4, #8]
 8010ffa:	e7f4      	b.n	8010fe6 <__swsetup_r+0x8e>
 8010ffc:	2000      	movs	r0, #0
 8010ffe:	e7f7      	b.n	8010ff0 <__swsetup_r+0x98>
 8011000:	20000208 	.word	0x20000208

08011004 <_raise_r>:
 8011004:	291f      	cmp	r1, #31
 8011006:	b538      	push	{r3, r4, r5, lr}
 8011008:	4605      	mov	r5, r0
 801100a:	460c      	mov	r4, r1
 801100c:	d904      	bls.n	8011018 <_raise_r+0x14>
 801100e:	2316      	movs	r3, #22
 8011010:	6003      	str	r3, [r0, #0]
 8011012:	f04f 30ff 	mov.w	r0, #4294967295
 8011016:	bd38      	pop	{r3, r4, r5, pc}
 8011018:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801101a:	b112      	cbz	r2, 8011022 <_raise_r+0x1e>
 801101c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011020:	b94b      	cbnz	r3, 8011036 <_raise_r+0x32>
 8011022:	4628      	mov	r0, r5
 8011024:	f000 f830 	bl	8011088 <_getpid_r>
 8011028:	4622      	mov	r2, r4
 801102a:	4601      	mov	r1, r0
 801102c:	4628      	mov	r0, r5
 801102e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011032:	f000 b817 	b.w	8011064 <_kill_r>
 8011036:	2b01      	cmp	r3, #1
 8011038:	d00a      	beq.n	8011050 <_raise_r+0x4c>
 801103a:	1c59      	adds	r1, r3, #1
 801103c:	d103      	bne.n	8011046 <_raise_r+0x42>
 801103e:	2316      	movs	r3, #22
 8011040:	6003      	str	r3, [r0, #0]
 8011042:	2001      	movs	r0, #1
 8011044:	e7e7      	b.n	8011016 <_raise_r+0x12>
 8011046:	2100      	movs	r1, #0
 8011048:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801104c:	4620      	mov	r0, r4
 801104e:	4798      	blx	r3
 8011050:	2000      	movs	r0, #0
 8011052:	e7e0      	b.n	8011016 <_raise_r+0x12>

08011054 <raise>:
 8011054:	4b02      	ldr	r3, [pc, #8]	@ (8011060 <raise+0xc>)
 8011056:	4601      	mov	r1, r0
 8011058:	6818      	ldr	r0, [r3, #0]
 801105a:	f7ff bfd3 	b.w	8011004 <_raise_r>
 801105e:	bf00      	nop
 8011060:	20000208 	.word	0x20000208

08011064 <_kill_r>:
 8011064:	b538      	push	{r3, r4, r5, lr}
 8011066:	4d07      	ldr	r5, [pc, #28]	@ (8011084 <_kill_r+0x20>)
 8011068:	2300      	movs	r3, #0
 801106a:	4604      	mov	r4, r0
 801106c:	4608      	mov	r0, r1
 801106e:	4611      	mov	r1, r2
 8011070:	602b      	str	r3, [r5, #0]
 8011072:	f7f0 fde7 	bl	8001c44 <_kill>
 8011076:	1c43      	adds	r3, r0, #1
 8011078:	d102      	bne.n	8011080 <_kill_r+0x1c>
 801107a:	682b      	ldr	r3, [r5, #0]
 801107c:	b103      	cbz	r3, 8011080 <_kill_r+0x1c>
 801107e:	6023      	str	r3, [r4, #0]
 8011080:	bd38      	pop	{r3, r4, r5, pc}
 8011082:	bf00      	nop
 8011084:	20000a34 	.word	0x20000a34

08011088 <_getpid_r>:
 8011088:	f7f0 bdd4 	b.w	8001c34 <_getpid>

0801108c <__swhatbuf_r>:
 801108c:	b570      	push	{r4, r5, r6, lr}
 801108e:	460c      	mov	r4, r1
 8011090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011094:	2900      	cmp	r1, #0
 8011096:	b096      	sub	sp, #88	@ 0x58
 8011098:	4615      	mov	r5, r2
 801109a:	461e      	mov	r6, r3
 801109c:	da0d      	bge.n	80110ba <__swhatbuf_r+0x2e>
 801109e:	89a3      	ldrh	r3, [r4, #12]
 80110a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80110a4:	f04f 0100 	mov.w	r1, #0
 80110a8:	bf14      	ite	ne
 80110aa:	2340      	movne	r3, #64	@ 0x40
 80110ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80110b0:	2000      	movs	r0, #0
 80110b2:	6031      	str	r1, [r6, #0]
 80110b4:	602b      	str	r3, [r5, #0]
 80110b6:	b016      	add	sp, #88	@ 0x58
 80110b8:	bd70      	pop	{r4, r5, r6, pc}
 80110ba:	466a      	mov	r2, sp
 80110bc:	f000 f848 	bl	8011150 <_fstat_r>
 80110c0:	2800      	cmp	r0, #0
 80110c2:	dbec      	blt.n	801109e <__swhatbuf_r+0x12>
 80110c4:	9901      	ldr	r1, [sp, #4]
 80110c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80110ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80110ce:	4259      	negs	r1, r3
 80110d0:	4159      	adcs	r1, r3
 80110d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80110d6:	e7eb      	b.n	80110b0 <__swhatbuf_r+0x24>

080110d8 <__smakebuf_r>:
 80110d8:	898b      	ldrh	r3, [r1, #12]
 80110da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80110dc:	079d      	lsls	r5, r3, #30
 80110de:	4606      	mov	r6, r0
 80110e0:	460c      	mov	r4, r1
 80110e2:	d507      	bpl.n	80110f4 <__smakebuf_r+0x1c>
 80110e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80110e8:	6023      	str	r3, [r4, #0]
 80110ea:	6123      	str	r3, [r4, #16]
 80110ec:	2301      	movs	r3, #1
 80110ee:	6163      	str	r3, [r4, #20]
 80110f0:	b003      	add	sp, #12
 80110f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110f4:	ab01      	add	r3, sp, #4
 80110f6:	466a      	mov	r2, sp
 80110f8:	f7ff ffc8 	bl	801108c <__swhatbuf_r>
 80110fc:	9f00      	ldr	r7, [sp, #0]
 80110fe:	4605      	mov	r5, r0
 8011100:	4639      	mov	r1, r7
 8011102:	4630      	mov	r0, r6
 8011104:	f7fe fd22 	bl	800fb4c <_malloc_r>
 8011108:	b948      	cbnz	r0, 801111e <__smakebuf_r+0x46>
 801110a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801110e:	059a      	lsls	r2, r3, #22
 8011110:	d4ee      	bmi.n	80110f0 <__smakebuf_r+0x18>
 8011112:	f023 0303 	bic.w	r3, r3, #3
 8011116:	f043 0302 	orr.w	r3, r3, #2
 801111a:	81a3      	strh	r3, [r4, #12]
 801111c:	e7e2      	b.n	80110e4 <__smakebuf_r+0xc>
 801111e:	89a3      	ldrh	r3, [r4, #12]
 8011120:	6020      	str	r0, [r4, #0]
 8011122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011126:	81a3      	strh	r3, [r4, #12]
 8011128:	9b01      	ldr	r3, [sp, #4]
 801112a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801112e:	b15b      	cbz	r3, 8011148 <__smakebuf_r+0x70>
 8011130:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011134:	4630      	mov	r0, r6
 8011136:	f000 f81d 	bl	8011174 <_isatty_r>
 801113a:	b128      	cbz	r0, 8011148 <__smakebuf_r+0x70>
 801113c:	89a3      	ldrh	r3, [r4, #12]
 801113e:	f023 0303 	bic.w	r3, r3, #3
 8011142:	f043 0301 	orr.w	r3, r3, #1
 8011146:	81a3      	strh	r3, [r4, #12]
 8011148:	89a3      	ldrh	r3, [r4, #12]
 801114a:	431d      	orrs	r5, r3
 801114c:	81a5      	strh	r5, [r4, #12]
 801114e:	e7cf      	b.n	80110f0 <__smakebuf_r+0x18>

08011150 <_fstat_r>:
 8011150:	b538      	push	{r3, r4, r5, lr}
 8011152:	4d07      	ldr	r5, [pc, #28]	@ (8011170 <_fstat_r+0x20>)
 8011154:	2300      	movs	r3, #0
 8011156:	4604      	mov	r4, r0
 8011158:	4608      	mov	r0, r1
 801115a:	4611      	mov	r1, r2
 801115c:	602b      	str	r3, [r5, #0]
 801115e:	f7f0 fdd1 	bl	8001d04 <_fstat>
 8011162:	1c43      	adds	r3, r0, #1
 8011164:	d102      	bne.n	801116c <_fstat_r+0x1c>
 8011166:	682b      	ldr	r3, [r5, #0]
 8011168:	b103      	cbz	r3, 801116c <_fstat_r+0x1c>
 801116a:	6023      	str	r3, [r4, #0]
 801116c:	bd38      	pop	{r3, r4, r5, pc}
 801116e:	bf00      	nop
 8011170:	20000a34 	.word	0x20000a34

08011174 <_isatty_r>:
 8011174:	b538      	push	{r3, r4, r5, lr}
 8011176:	4d06      	ldr	r5, [pc, #24]	@ (8011190 <_isatty_r+0x1c>)
 8011178:	2300      	movs	r3, #0
 801117a:	4604      	mov	r4, r0
 801117c:	4608      	mov	r0, r1
 801117e:	602b      	str	r3, [r5, #0]
 8011180:	f7f0 fdd0 	bl	8001d24 <_isatty>
 8011184:	1c43      	adds	r3, r0, #1
 8011186:	d102      	bne.n	801118e <_isatty_r+0x1a>
 8011188:	682b      	ldr	r3, [r5, #0]
 801118a:	b103      	cbz	r3, 801118e <_isatty_r+0x1a>
 801118c:	6023      	str	r3, [r4, #0]
 801118e:	bd38      	pop	{r3, r4, r5, pc}
 8011190:	20000a34 	.word	0x20000a34

08011194 <fmod>:
 8011194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011196:	ed2d 8b02 	vpush	{d8}
 801119a:	ec57 6b10 	vmov	r6, r7, d0
 801119e:	ec55 4b11 	vmov	r4, r5, d1
 80111a2:	f000 f825 	bl	80111f0 <__ieee754_fmod>
 80111a6:	4622      	mov	r2, r4
 80111a8:	462b      	mov	r3, r5
 80111aa:	4630      	mov	r0, r6
 80111ac:	4639      	mov	r1, r7
 80111ae:	eeb0 8a40 	vmov.f32	s16, s0
 80111b2:	eef0 8a60 	vmov.f32	s17, s1
 80111b6:	f7ef fce1 	bl	8000b7c <__aeabi_dcmpun>
 80111ba:	b990      	cbnz	r0, 80111e2 <fmod+0x4e>
 80111bc:	2200      	movs	r2, #0
 80111be:	2300      	movs	r3, #0
 80111c0:	4620      	mov	r0, r4
 80111c2:	4629      	mov	r1, r5
 80111c4:	f7ef fca8 	bl	8000b18 <__aeabi_dcmpeq>
 80111c8:	b158      	cbz	r0, 80111e2 <fmod+0x4e>
 80111ca:	f7fd fa79 	bl	800e6c0 <__errno>
 80111ce:	2321      	movs	r3, #33	@ 0x21
 80111d0:	6003      	str	r3, [r0, #0]
 80111d2:	2200      	movs	r2, #0
 80111d4:	2300      	movs	r3, #0
 80111d6:	4610      	mov	r0, r2
 80111d8:	4619      	mov	r1, r3
 80111da:	f7ef fb5f 	bl	800089c <__aeabi_ddiv>
 80111de:	ec41 0b18 	vmov	d8, r0, r1
 80111e2:	eeb0 0a48 	vmov.f32	s0, s16
 80111e6:	eef0 0a68 	vmov.f32	s1, s17
 80111ea:	ecbd 8b02 	vpop	{d8}
 80111ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080111f0 <__ieee754_fmod>:
 80111f0:	ec53 2b11 	vmov	r2, r3, d1
 80111f4:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 80111f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111fc:	ea52 040c 	orrs.w	r4, r2, ip
 8011200:	ec51 0b10 	vmov	r0, r1, d0
 8011204:	461e      	mov	r6, r3
 8011206:	4617      	mov	r7, r2
 8011208:	4696      	mov	lr, r2
 801120a:	d00c      	beq.n	8011226 <__ieee754_fmod+0x36>
 801120c:	4c77      	ldr	r4, [pc, #476]	@ (80113ec <__ieee754_fmod+0x1fc>)
 801120e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8011212:	45a0      	cmp	r8, r4
 8011214:	4689      	mov	r9, r1
 8011216:	d806      	bhi.n	8011226 <__ieee754_fmod+0x36>
 8011218:	4254      	negs	r4, r2
 801121a:	4d75      	ldr	r5, [pc, #468]	@ (80113f0 <__ieee754_fmod+0x200>)
 801121c:	4314      	orrs	r4, r2
 801121e:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8011222:	42ac      	cmp	r4, r5
 8011224:	d909      	bls.n	801123a <__ieee754_fmod+0x4a>
 8011226:	f7ef fa0f 	bl	8000648 <__aeabi_dmul>
 801122a:	4602      	mov	r2, r0
 801122c:	460b      	mov	r3, r1
 801122e:	f7ef fb35 	bl	800089c <__aeabi_ddiv>
 8011232:	ec41 0b10 	vmov	d0, r0, r1
 8011236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801123a:	45e0      	cmp	r8, ip
 801123c:	4682      	mov	sl, r0
 801123e:	4604      	mov	r4, r0
 8011240:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8011244:	dc09      	bgt.n	801125a <__ieee754_fmod+0x6a>
 8011246:	dbf4      	blt.n	8011232 <__ieee754_fmod+0x42>
 8011248:	4282      	cmp	r2, r0
 801124a:	d8f2      	bhi.n	8011232 <__ieee754_fmod+0x42>
 801124c:	d105      	bne.n	801125a <__ieee754_fmod+0x6a>
 801124e:	4b69      	ldr	r3, [pc, #420]	@ (80113f4 <__ieee754_fmod+0x204>)
 8011250:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8011254:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011258:	e7eb      	b.n	8011232 <__ieee754_fmod+0x42>
 801125a:	4a65      	ldr	r2, [pc, #404]	@ (80113f0 <__ieee754_fmod+0x200>)
 801125c:	ea19 0f02 	tst.w	r9, r2
 8011260:	d148      	bne.n	80112f4 <__ieee754_fmod+0x104>
 8011262:	f1b8 0f00 	cmp.w	r8, #0
 8011266:	d13d      	bne.n	80112e4 <__ieee754_fmod+0xf4>
 8011268:	4963      	ldr	r1, [pc, #396]	@ (80113f8 <__ieee754_fmod+0x208>)
 801126a:	4653      	mov	r3, sl
 801126c:	2b00      	cmp	r3, #0
 801126e:	dc36      	bgt.n	80112de <__ieee754_fmod+0xee>
 8011270:	4216      	tst	r6, r2
 8011272:	d14f      	bne.n	8011314 <__ieee754_fmod+0x124>
 8011274:	f1bc 0f00 	cmp.w	ip, #0
 8011278:	d144      	bne.n	8011304 <__ieee754_fmod+0x114>
 801127a:	4a5f      	ldr	r2, [pc, #380]	@ (80113f8 <__ieee754_fmod+0x208>)
 801127c:	463b      	mov	r3, r7
 801127e:	2b00      	cmp	r3, #0
 8011280:	dc3d      	bgt.n	80112fe <__ieee754_fmod+0x10e>
 8011282:	485e      	ldr	r0, [pc, #376]	@ (80113fc <__ieee754_fmod+0x20c>)
 8011284:	4281      	cmp	r1, r0
 8011286:	db4a      	blt.n	801131e <__ieee754_fmod+0x12e>
 8011288:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801128c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011290:	485a      	ldr	r0, [pc, #360]	@ (80113fc <__ieee754_fmod+0x20c>)
 8011292:	4282      	cmp	r2, r0
 8011294:	db57      	blt.n	8011346 <__ieee754_fmod+0x156>
 8011296:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801129a:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 801129e:	1a89      	subs	r1, r1, r2
 80112a0:	1b98      	subs	r0, r3, r6
 80112a2:	eba4 070e 	sub.w	r7, r4, lr
 80112a6:	2900      	cmp	r1, #0
 80112a8:	d162      	bne.n	8011370 <__ieee754_fmod+0x180>
 80112aa:	4574      	cmp	r4, lr
 80112ac:	bf38      	it	cc
 80112ae:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80112b2:	2800      	cmp	r0, #0
 80112b4:	bfa4      	itt	ge
 80112b6:	463c      	movge	r4, r7
 80112b8:	4603      	movge	r3, r0
 80112ba:	ea53 0104 	orrs.w	r1, r3, r4
 80112be:	d0c6      	beq.n	801124e <__ieee754_fmod+0x5e>
 80112c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80112c4:	db69      	blt.n	801139a <__ieee754_fmod+0x1aa>
 80112c6:	494d      	ldr	r1, [pc, #308]	@ (80113fc <__ieee754_fmod+0x20c>)
 80112c8:	428a      	cmp	r2, r1
 80112ca:	db6c      	blt.n	80113a6 <__ieee754_fmod+0x1b6>
 80112cc:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80112d0:	432b      	orrs	r3, r5
 80112d2:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 80112d6:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80112da:	4620      	mov	r0, r4
 80112dc:	e7a9      	b.n	8011232 <__ieee754_fmod+0x42>
 80112de:	3901      	subs	r1, #1
 80112e0:	005b      	lsls	r3, r3, #1
 80112e2:	e7c3      	b.n	801126c <__ieee754_fmod+0x7c>
 80112e4:	4945      	ldr	r1, [pc, #276]	@ (80113fc <__ieee754_fmod+0x20c>)
 80112e6:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	ddc0      	ble.n	8011270 <__ieee754_fmod+0x80>
 80112ee:	3901      	subs	r1, #1
 80112f0:	005b      	lsls	r3, r3, #1
 80112f2:	e7fa      	b.n	80112ea <__ieee754_fmod+0xfa>
 80112f4:	ea4f 5128 	mov.w	r1, r8, asr #20
 80112f8:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80112fc:	e7b8      	b.n	8011270 <__ieee754_fmod+0x80>
 80112fe:	3a01      	subs	r2, #1
 8011300:	005b      	lsls	r3, r3, #1
 8011302:	e7bc      	b.n	801127e <__ieee754_fmod+0x8e>
 8011304:	4a3d      	ldr	r2, [pc, #244]	@ (80113fc <__ieee754_fmod+0x20c>)
 8011306:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 801130a:	2b00      	cmp	r3, #0
 801130c:	ddb9      	ble.n	8011282 <__ieee754_fmod+0x92>
 801130e:	3a01      	subs	r2, #1
 8011310:	005b      	lsls	r3, r3, #1
 8011312:	e7fa      	b.n	801130a <__ieee754_fmod+0x11a>
 8011314:	ea4f 522c 	mov.w	r2, ip, asr #20
 8011318:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801131c:	e7b1      	b.n	8011282 <__ieee754_fmod+0x92>
 801131e:	1a40      	subs	r0, r0, r1
 8011320:	281f      	cmp	r0, #31
 8011322:	dc0a      	bgt.n	801133a <__ieee754_fmod+0x14a>
 8011324:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 8011328:	fa08 f800 	lsl.w	r8, r8, r0
 801132c:	fa2a f303 	lsr.w	r3, sl, r3
 8011330:	ea43 0308 	orr.w	r3, r3, r8
 8011334:	fa0a f400 	lsl.w	r4, sl, r0
 8011338:	e7aa      	b.n	8011290 <__ieee754_fmod+0xa0>
 801133a:	4b31      	ldr	r3, [pc, #196]	@ (8011400 <__ieee754_fmod+0x210>)
 801133c:	1a5b      	subs	r3, r3, r1
 801133e:	fa0a f303 	lsl.w	r3, sl, r3
 8011342:	2400      	movs	r4, #0
 8011344:	e7a4      	b.n	8011290 <__ieee754_fmod+0xa0>
 8011346:	1a80      	subs	r0, r0, r2
 8011348:	281f      	cmp	r0, #31
 801134a:	dc0a      	bgt.n	8011362 <__ieee754_fmod+0x172>
 801134c:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 8011350:	fa0c fc00 	lsl.w	ip, ip, r0
 8011354:	fa27 f606 	lsr.w	r6, r7, r6
 8011358:	ea46 060c 	orr.w	r6, r6, ip
 801135c:	fa07 fe00 	lsl.w	lr, r7, r0
 8011360:	e79d      	b.n	801129e <__ieee754_fmod+0xae>
 8011362:	4e27      	ldr	r6, [pc, #156]	@ (8011400 <__ieee754_fmod+0x210>)
 8011364:	1ab6      	subs	r6, r6, r2
 8011366:	fa07 f606 	lsl.w	r6, r7, r6
 801136a:	f04f 0e00 	mov.w	lr, #0
 801136e:	e796      	b.n	801129e <__ieee754_fmod+0xae>
 8011370:	4574      	cmp	r4, lr
 8011372:	bf38      	it	cc
 8011374:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8011378:	2800      	cmp	r0, #0
 801137a:	da05      	bge.n	8011388 <__ieee754_fmod+0x198>
 801137c:	0fe0      	lsrs	r0, r4, #31
 801137e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8011382:	0064      	lsls	r4, r4, #1
 8011384:	3901      	subs	r1, #1
 8011386:	e78b      	b.n	80112a0 <__ieee754_fmod+0xb0>
 8011388:	ea50 0307 	orrs.w	r3, r0, r7
 801138c:	f43f af5f 	beq.w	801124e <__ieee754_fmod+0x5e>
 8011390:	0ffb      	lsrs	r3, r7, #31
 8011392:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8011396:	007c      	lsls	r4, r7, #1
 8011398:	e7f4      	b.n	8011384 <__ieee754_fmod+0x194>
 801139a:	0fe1      	lsrs	r1, r4, #31
 801139c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80113a0:	0064      	lsls	r4, r4, #1
 80113a2:	3a01      	subs	r2, #1
 80113a4:	e78c      	b.n	80112c0 <__ieee754_fmod+0xd0>
 80113a6:	1a89      	subs	r1, r1, r2
 80113a8:	2914      	cmp	r1, #20
 80113aa:	dc0a      	bgt.n	80113c2 <__ieee754_fmod+0x1d2>
 80113ac:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 80113b0:	fa03 f202 	lsl.w	r2, r3, r2
 80113b4:	40cc      	lsrs	r4, r1
 80113b6:	4322      	orrs	r2, r4
 80113b8:	410b      	asrs	r3, r1
 80113ba:	ea43 0105 	orr.w	r1, r3, r5
 80113be:	4610      	mov	r0, r2
 80113c0:	e737      	b.n	8011232 <__ieee754_fmod+0x42>
 80113c2:	291f      	cmp	r1, #31
 80113c4:	dc07      	bgt.n	80113d6 <__ieee754_fmod+0x1e6>
 80113c6:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 80113ca:	40cc      	lsrs	r4, r1
 80113cc:	fa03 f202 	lsl.w	r2, r3, r2
 80113d0:	4322      	orrs	r2, r4
 80113d2:	462b      	mov	r3, r5
 80113d4:	e7f1      	b.n	80113ba <__ieee754_fmod+0x1ca>
 80113d6:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 80113da:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 80113de:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 80113e2:	32e2      	adds	r2, #226	@ 0xe2
 80113e4:	fa43 f202 	asr.w	r2, r3, r2
 80113e8:	e7f3      	b.n	80113d2 <__ieee754_fmod+0x1e2>
 80113ea:	bf00      	nop
 80113ec:	7fefffff 	.word	0x7fefffff
 80113f0:	7ff00000 	.word	0x7ff00000
 80113f4:	08011990 	.word	0x08011990
 80113f8:	fffffbed 	.word	0xfffffbed
 80113fc:	fffffc02 	.word	0xfffffc02
 8011400:	fffffbe2 	.word	0xfffffbe2

08011404 <_init>:
 8011404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011406:	bf00      	nop
 8011408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801140a:	bc08      	pop	{r3}
 801140c:	469e      	mov	lr, r3
 801140e:	4770      	bx	lr

08011410 <_fini>:
 8011410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011412:	bf00      	nop
 8011414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011416:	bc08      	pop	{r3}
 8011418:	469e      	mov	lr, r3
 801141a:	4770      	bx	lr
