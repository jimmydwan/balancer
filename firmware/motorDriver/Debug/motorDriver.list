
motorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013328  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  08013508  08013508  00014508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013b70  08013b70  00015280  2**0
                  CONTENTS
  4 .ARM          00000008  08013b70  08013b70  00014b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013b78  08013b78  00015280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013b78  08013b78  00014b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013b7c  08013b7c  00014b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000280  20000000  08013b80  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000994  20000280  08013e00  00015280  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c14  08013e00  00015c14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015280  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024dcd  00000000  00000000  000152b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a16  00000000  00000000  0003a07d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d10  00000000  00000000  0003fa98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001622  00000000  00000000  000417a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000276fe  00000000  00000000  00042dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a6ec  00000000  00000000  0006a4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5060  00000000  00000000  00094bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00179c14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008db8  00000000  00000000  00179c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00182a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000280 	.word	0x20000280
 80001fc:	00000000 	.word	0x00000000
 8000200:	080134f0 	.word	0x080134f0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000284 	.word	0x20000284
 800021c:	080134f0 	.word	0x080134f0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09a      	sub	sp, #104	@ 0x68
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800104a:	2220      	movs	r2, #32
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00e fda2 	bl	800fb98 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	223c      	movs	r2, #60	@ 0x3c
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f00e fd9c 	bl	800fb98 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001060:	4b4d      	ldr	r3, [pc, #308]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001062:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001068:	4b4b      	ldr	r3, [pc, #300]	@ (8001198 <MX_ADC1_Init+0x164>)
 800106a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800106e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001070:	4b49      	ldr	r3, [pc, #292]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b48      	ldr	r3, [pc, #288]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800107c:	4b46      	ldr	r3, [pc, #280]	@ (8001198 <MX_ADC1_Init+0x164>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001082:	4b45      	ldr	r3, [pc, #276]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001084:	2201      	movs	r2, #1
 8001086:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001088:	4b43      	ldr	r3, [pc, #268]	@ (8001198 <MX_ADC1_Init+0x164>)
 800108a:	2204      	movs	r2, #4
 800108c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800108e:	4b42      	ldr	r3, [pc, #264]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001090:	2200      	movs	r2, #0
 8001092:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001094:	4b40      	ldr	r3, [pc, #256]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001096:	2200      	movs	r2, #0
 8001098:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800109a:	4b3f      	ldr	r3, [pc, #252]	@ (8001198 <MX_ADC1_Init+0x164>)
 800109c:	2201      	movs	r2, #1
 800109e:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b4:	4b38      	ldr	r3, [pc, #224]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010bc:	4b36      	ldr	r3, [pc, #216]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010be:	2200      	movs	r2, #0
 80010c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c2:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ca:	4833      	ldr	r0, [pc, #204]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010cc:	f001 fc9c 	bl	8002a08 <HAL_ADC_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010d6:	f000 fbb8 	bl	800184a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010da:	2300      	movs	r3, #0
 80010dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010e2:	4619      	mov	r1, r3
 80010e4:	482c      	ldr	r0, [pc, #176]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010e6:	f003 fdc5 	bl	8004c74 <HAL_ADCEx_MultiModeConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80010f0:	f000 fbab 	bl	800184a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010f4:	4b29      	ldr	r3, [pc, #164]	@ (800119c <MX_ADC1_Init+0x168>)
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f8:	2306      	movs	r3, #6
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010fc:	2300      	movs	r3, #0
 80010fe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001100:	237f      	movs	r3, #127	@ 0x7f
 8001102:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001104:	2304      	movs	r3, #4
 8001106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.Offset = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001110:	4619      	mov	r1, r3
 8001112:	4821      	ldr	r0, [pc, #132]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001114:	f002 f834 	bl	8003180 <HAL_ADC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800111e:	f000 fb94 	bl	800184a <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8001122:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <MX_ADC1_Init+0x16c>)
 8001124:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001126:	2309      	movs	r3, #9
 8001128:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800112a:	2301      	movs	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800112e:	237f      	movs	r3, #127	@ 0x7f
 8001130:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001132:	2304      	movs	r3, #4
 8001134:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800113a:	2302      	movs	r3, #2
 800113c:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001150:	2384      	movs	r3, #132	@ 0x84
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001164:	f003 f8a6 	bl	80042b4 <HAL_ADCEx_InjectedConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 800116e:	f000 fb6c 	bl	800184a <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <MX_ADC1_Init+0x170>)
 8001174:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001176:	f240 130f 	movw	r3, #271	@ 0x10f
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001182:	f003 f897 	bl	80042b4 <HAL_ADCEx_InjectedConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 800118c:	f000 fb5d 	bl	800184a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3768      	adds	r7, #104	@ 0x68
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	2000029c 	.word	0x2000029c
 800119c:	08600004 	.word	0x08600004
 80011a0:	14f00020 	.word	0x14f00020
 80011a4:	2e300800 	.word	0x2e300800

080011a8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b090      	sub	sp, #64	@ 0x40
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	223c      	movs	r2, #60	@ 0x3c
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00e fcef 	bl	800fb98 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011ba:	4b38      	ldr	r3, [pc, #224]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011bc:	4a38      	ldr	r2, [pc, #224]	@ (80012a0 <MX_ADC2_Init+0xf8>)
 80011be:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80011c0:	4b36      	ldr	r3, [pc, #216]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011c2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011c6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011c8:	4b34      	ldr	r3, [pc, #208]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ce:	4b33      	ldr	r3, [pc, #204]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80011d4:	4b31      	ldr	r3, [pc, #196]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011da:	4b30      	ldr	r3, [pc, #192]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011dc:	2201      	movs	r2, #1
 80011de:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011e0:	4b2e      	ldr	r3, [pc, #184]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011e2:	2204      	movs	r2, #4
 80011e4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80011e6:	4b2d      	ldr	r3, [pc, #180]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011ec:	4b2b      	ldr	r3, [pc, #172]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80011f2:	4b2a      	ldr	r3, [pc, #168]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011f8:	4b28      	ldr	r3, [pc, #160]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001200:	4b26      	ldr	r3, [pc, #152]	@ (800129c <MX_ADC2_Init+0xf4>)
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001208:	4b24      	ldr	r3, [pc, #144]	@ (800129c <MX_ADC2_Init+0xf4>)
 800120a:	2200      	movs	r2, #0
 800120c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800120e:	4b23      	ldr	r3, [pc, #140]	@ (800129c <MX_ADC2_Init+0xf4>)
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001216:	4821      	ldr	r0, [pc, #132]	@ (800129c <MX_ADC2_Init+0xf4>)
 8001218:	f001 fbf6 	bl	8002a08 <HAL_ADC_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8001222:	f000 fb12 	bl	800184a <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 8001226:	4b1f      	ldr	r3, [pc, #124]	@ (80012a4 <MX_ADC2_Init+0xfc>)
 8001228:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800122a:	2309      	movs	r3, #9
 800122c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800122e:	2301      	movs	r3, #1
 8001230:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001232:	237f      	movs	r3, #127	@ 0x7f
 8001234:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001236:	2304      	movs	r3, #4
 8001238:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800123e:	2302      	movs	r3, #2
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001242:	2300      	movs	r3, #0
 8001244:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T8_CC4;
 8001254:	239c      	movs	r3, #156	@ 0x9c
 8001256:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001258:	2380      	movs	r3, #128	@ 0x80
 800125a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	4619      	mov	r1, r3
 8001266:	480d      	ldr	r0, [pc, #52]	@ (800129c <MX_ADC2_Init+0xf4>)
 8001268:	f003 f824 	bl	80042b4 <HAL_ADCEx_InjectedConfigChannel>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 8001272:	f000 faea 	bl	800184a <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8001276:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <MX_ADC2_Init+0x100>)
 8001278:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800127a:	f240 130f 	movw	r3, #271	@ 0x10f
 800127e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	4619      	mov	r1, r3
 8001284:	4805      	ldr	r0, [pc, #20]	@ (800129c <MX_ADC2_Init+0xf4>)
 8001286:	f003 f815 	bl	80042b4 <HAL_ADCEx_InjectedConfigChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_ADC2_Init+0xec>
  {
    Error_Handler();
 8001290:	f000 fadb 	bl	800184a <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	3740      	adds	r7, #64	@ 0x40
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000308 	.word	0x20000308
 80012a0:	50000100 	.word	0x50000100
 80012a4:	3ef08000 	.word	0x3ef08000
 80012a8:	32601000 	.word	0x32601000

080012ac <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b09e      	sub	sp, #120	@ 0x78
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c4:	f107 0320 	add.w	r3, r7, #32
 80012c8:	2244      	movs	r2, #68	@ 0x44
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f00e fc63 	bl	800fb98 <memset>
  if(adcHandle->Instance==ADC1)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012da:	d15f      	bne.n	800139c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012e0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012e2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80012e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e8:	f107 0320 	add.w	r3, r7, #32
 80012ec:	4618      	mov	r0, r3
 80012ee:	f005 fb15 	bl	800691c <HAL_RCCEx_PeriphCLKConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80012f8:	f000 faa7 	bl	800184a <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012fc:	4b4f      	ldr	r3, [pc, #316]	@ (800143c <HAL_ADC_MspInit+0x190>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	3301      	adds	r3, #1
 8001302:	4a4e      	ldr	r2, [pc, #312]	@ (800143c <HAL_ADC_MspInit+0x190>)
 8001304:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001306:	4b4d      	ldr	r3, [pc, #308]	@ (800143c <HAL_ADC_MspInit+0x190>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d10b      	bne.n	8001326 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800130e:	4b4c      	ldr	r3, [pc, #304]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001312:	4a4b      	ldr	r2, [pc, #300]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 8001314:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001318:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131a:	4b49      	ldr	r3, [pc, #292]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001322:	61fb      	str	r3, [r7, #28]
 8001324:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	4b46      	ldr	r3, [pc, #280]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	4a45      	ldr	r2, [pc, #276]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001332:	4b43      	ldr	r3, [pc, #268]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	61bb      	str	r3, [r7, #24]
 800133c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	4b40      	ldr	r3, [pc, #256]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001342:	4a3f      	ldr	r2, [pc, #252]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134a:	4b3d      	ldr	r3, [pc, #244]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001356:	2302      	movs	r3, #2
 8001358:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800135a:	2303      	movs	r3, #3
 800135c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001366:	4619      	mov	r1, r3
 8001368:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800136c:	f004 fb42 	bl	80059f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8001370:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001374:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001376:	2303      	movs	r3, #3
 8001378:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001382:	4619      	mov	r1, r3
 8001384:	482f      	ldr	r0, [pc, #188]	@ (8001444 <HAL_ADC_MspInit+0x198>)
 8001386:	f004 fb35 	bl	80059f4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	2012      	movs	r0, #18
 8001390:	f003 fdef 	bl	8004f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001394:	2012      	movs	r0, #18
 8001396:	f003 fe06 	bl	8004fa6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800139a:	e04a      	b.n	8001432 <HAL_ADC_MspInit+0x186>
  else if(adcHandle->Instance==ADC2)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a29      	ldr	r2, [pc, #164]	@ (8001448 <HAL_ADC_MspInit+0x19c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d145      	bne.n	8001432 <HAL_ADC_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013aa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013ac:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80013b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b2:	f107 0320 	add.w	r3, r7, #32
 80013b6:	4618      	mov	r0, r3
 80013b8:	f005 fab0 	bl	800691c <HAL_RCCEx_PeriphCLKConfig>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 80013c2:	f000 fa42 	bl	800184a <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013c6:	4b1d      	ldr	r3, [pc, #116]	@ (800143c <HAL_ADC_MspInit+0x190>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	3301      	adds	r3, #1
 80013cc:	4a1b      	ldr	r2, [pc, #108]	@ (800143c <HAL_ADC_MspInit+0x190>)
 80013ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013d0:	4b1a      	ldr	r3, [pc, #104]	@ (800143c <HAL_ADC_MspInit+0x190>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d10b      	bne.n	80013f0 <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013d8:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 80013da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013dc:	4a18      	ldr	r2, [pc, #96]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 80013de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e4:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 80013e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f0:	4b13      	ldr	r3, [pc, #76]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 80013f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f4:	4a12      	ldr	r2, [pc, #72]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 80013f6:	f043 0302 	orr.w	r3, r3, #2
 80013fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013fc:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 80013fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001408:	f248 0304 	movw	r3, #32772	@ 0x8004
 800140c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140e:	2303      	movs	r3, #3
 8001410:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001416:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800141a:	4619      	mov	r1, r3
 800141c:	4809      	ldr	r0, [pc, #36]	@ (8001444 <HAL_ADC_MspInit+0x198>)
 800141e:	f004 fae9 	bl	80059f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	2012      	movs	r0, #18
 8001428:	f003 fda3 	bl	8004f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800142c:	2012      	movs	r0, #18
 800142e:	f003 fdba 	bl	8004fa6 <HAL_NVIC_EnableIRQ>
}
 8001432:	bf00      	nop
 8001434:	3778      	adds	r7, #120	@ 0x78
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000374 	.word	0x20000374
 8001440:	40021000 	.word	0x40021000
 8001444:	48000400 	.word	0x48000400
 8001448:	50000100 	.word	0x50000100

0800144c <MX_DAC3_Init>:

DAC_HandleTypeDef hdac3;

/* DAC3 init function */
void MX_DAC3_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08c      	sub	sp, #48	@ 0x30
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001452:	463b      	mov	r3, r7
 8001454:	2230      	movs	r2, #48	@ 0x30
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f00e fb9d 	bl	800fb98 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 800145e:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <MX_DAC3_Init+0x6c>)
 8001460:	4a16      	ldr	r2, [pc, #88]	@ (80014bc <MX_DAC3_Init+0x70>)
 8001462:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001464:	4814      	ldr	r0, [pc, #80]	@ (80014b8 <MX_DAC3_Init+0x6c>)
 8001466:	f003 fdb8 	bl	8004fda <HAL_DAC_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8001470:	f000 f9eb 	bl	800184a <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001474:	2302      	movs	r3, #2
 8001476:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800148c:	2302      	movs	r3, #2
 800148e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001490:	2302      	movs	r3, #2
 8001492:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001498:	463b      	mov	r3, r7
 800149a:	2200      	movs	r2, #0
 800149c:	4619      	mov	r1, r3
 800149e:	4806      	ldr	r0, [pc, #24]	@ (80014b8 <MX_DAC3_Init+0x6c>)
 80014a0:	f003 fdbe 	bl	8005020 <HAL_DAC_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 80014aa:	f000 f9ce 	bl	800184a <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	3730      	adds	r7, #48	@ 0x30
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000378 	.word	0x20000378
 80014bc:	50001000 	.word	0x50001000

080014c0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC3)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0a      	ldr	r2, [pc, #40]	@ (80014f8 <HAL_DAC_MspInit+0x38>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d10b      	bne.n	80014ea <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* DAC3 clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 80014d2:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <HAL_DAC_MspInit+0x3c>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d6:	4a09      	ldr	r2, [pc, #36]	@ (80014fc <HAL_DAC_MspInit+0x3c>)
 80014d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014de:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <HAL_DAC_MspInit+0x3c>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }
}
 80014ea:	bf00      	nop
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	50001000 	.word	0x50001000
 80014fc:	40021000 	.word	0x40021000

08001500 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001506:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <MX_DMA_Init+0x60>)
 8001508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800150a:	4a15      	ldr	r2, [pc, #84]	@ (8001560 <MX_DMA_Init+0x60>)
 800150c:	f043 0304 	orr.w	r3, r3, #4
 8001510:	6493      	str	r3, [r2, #72]	@ 0x48
 8001512:	4b13      	ldr	r3, [pc, #76]	@ (8001560 <MX_DMA_Init+0x60>)
 8001514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800151e:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <MX_DMA_Init+0x60>)
 8001520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001522:	4a0f      	ldr	r2, [pc, #60]	@ (8001560 <MX_DMA_Init+0x60>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6493      	str	r3, [r2, #72]	@ 0x48
 800152a:	4b0d      	ldr	r3, [pc, #52]	@ (8001560 <MX_DMA_Init+0x60>)
 800152c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2101      	movs	r1, #1
 800153a:	200b      	movs	r0, #11
 800153c:	f003 fd19 	bl	8004f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001540:	200b      	movs	r0, #11
 8001542:	f003 fd30 	bl	8004fa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 1, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2101      	movs	r1, #1
 800154a:	200c      	movs	r0, #12
 800154c:	f003 fd11 	bl	8004f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001550:	200c      	movs	r0, #12
 8001552:	f003 fd28 	bl	8004fa6 <HAL_NVIC_EnableIRQ>

}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40021000 	.word	0x40021000

08001564 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	@ 0x28
 8001568:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157a:	4b54      	ldr	r3, [pc, #336]	@ (80016cc <MX_GPIO_Init+0x168>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157e:	4a53      	ldr	r2, [pc, #332]	@ (80016cc <MX_GPIO_Init+0x168>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001586:	4b51      	ldr	r3, [pc, #324]	@ (80016cc <MX_GPIO_Init+0x168>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001592:	4b4e      	ldr	r3, [pc, #312]	@ (80016cc <MX_GPIO_Init+0x168>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001596:	4a4d      	ldr	r2, [pc, #308]	@ (80016cc <MX_GPIO_Init+0x168>)
 8001598:	f043 0320 	orr.w	r3, r3, #32
 800159c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800159e:	4b4b      	ldr	r3, [pc, #300]	@ (80016cc <MX_GPIO_Init+0x168>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a2:	f003 0320 	and.w	r3, r3, #32
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	4b48      	ldr	r3, [pc, #288]	@ (80016cc <MX_GPIO_Init+0x168>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ae:	4a47      	ldr	r2, [pc, #284]	@ (80016cc <MX_GPIO_Init+0x168>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015b6:	4b45      	ldr	r3, [pc, #276]	@ (80016cc <MX_GPIO_Init+0x168>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c2:	4b42      	ldr	r3, [pc, #264]	@ (80016cc <MX_GPIO_Init+0x168>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c6:	4a41      	ldr	r2, [pc, #260]	@ (80016cc <MX_GPIO_Init+0x168>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ce:	4b3f      	ldr	r3, [pc, #252]	@ (80016cc <MX_GPIO_Init+0x168>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|TEST_Pin, GPIO_PIN_SET);
 80015da:	2201      	movs	r2, #1
 80015dc:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 80015e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e4:	f004 fba0 	bl	8005d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS2_GPIO_Port, NSS2_Pin, GPIO_PIN_SET);
 80015e8:	2201      	movs	r2, #1
 80015ea:	2110      	movs	r1, #16
 80015ec:	4838      	ldr	r0, [pc, #224]	@ (80016d0 <MX_GPIO_Init+0x16c>)
 80015ee:	f004 fb9b 	bl	8005d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|NSS1_Pin, GPIO_PIN_SET);
 80015f2:	2201      	movs	r2, #1
 80015f4:	2109      	movs	r1, #9
 80015f6:	4837      	ldr	r0, [pc, #220]	@ (80016d4 <MX_GPIO_Init+0x170>)
 80015f8:	f004 fb96 	bl	8005d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	482f      	ldr	r0, [pc, #188]	@ (80016d0 <MX_GPIO_Init+0x16c>)
 8001612:	f004 f9ef 	bl	80059f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8001616:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800161a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161c:	2300      	movs	r3, #0
 800161e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001620:	2301      	movs	r3, #1
 8001622:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4619      	mov	r1, r3
 800162a:	4829      	ldr	r0, [pc, #164]	@ (80016d0 <MX_GPIO_Init+0x16c>)
 800162c:	f004 f9e2 	bl	80059f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001630:	2310      	movs	r3, #16
 8001632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001634:	2301      	movs	r3, #1
 8001636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800164a:	f004 f9d3 	bl	80059f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS2_Pin;
 800164e:	2310      	movs	r3, #16
 8001650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001652:	2301      	movs	r3, #1
 8001654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800165a:	2302      	movs	r3, #2
 800165c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS2_GPIO_Port, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	481a      	ldr	r0, [pc, #104]	@ (80016d0 <MX_GPIO_Init+0x16c>)
 8001666:	f004 f9c5 	bl	80059f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800166a:	2301      	movs	r3, #1
 800166c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166e:	2301      	movs	r3, #1
 8001670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	4814      	ldr	r0, [pc, #80]	@ (80016d4 <MX_GPIO_Init+0x170>)
 8001682:	f004 f9b7 	bl	80059f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8001686:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001694:	2302      	movs	r3, #2
 8001696:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a2:	f004 f9a7 	bl	80059f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS1_Pin;
 80016a6:	2308      	movs	r3, #8
 80016a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b2:	2302      	movs	r3, #2
 80016b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS1_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	4805      	ldr	r0, [pc, #20]	@ (80016d4 <MX_GPIO_Init+0x170>)
 80016be:	f004 f999 	bl	80059f4 <HAL_GPIO_Init>

}
 80016c2:	bf00      	nop
 80016c4:	3728      	adds	r7, #40	@ 0x28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000
 80016d0:	48000800 	.word	0x48000800
 80016d4:	48000400 	.word	0x48000400

080016d8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016dc:	f000 feaf 	bl	800243e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e0:	f000 f86a 	bl	80017b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016e4:	f7ff ff3e 	bl	8001564 <MX_GPIO_Init>
  MX_DMA_Init();
 80016e8:	f7ff ff0a 	bl	8001500 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80016ec:	f000 fd74 	bl	80021d8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80016f0:	f7ff fca0 	bl	8001034 <MX_ADC1_Init>
  MX_ADC2_Init();
 80016f4:	f7ff fd58 	bl	80011a8 <MX_ADC2_Init>
  MX_TIM1_Init();
 80016f8:	f000 fb16 	bl	8001d28 <MX_TIM1_Init>
  MX_DAC3_Init();
 80016fc:	f7ff fea6 	bl	800144c <MX_DAC3_Init>
  MX_SPI1_Init();
 8001700:	f000 f8aa 	bl	8001858 <MX_SPI1_Init>
  MX_TIM8_Init();
 8001704:	f000 fbec 	bl	8001ee0 <MX_TIM8_Init>
  MX_SPI3_Init();
 8001708:	f000 f8e4 	bl	80018d4 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  appInit();
 800170c:	f00a fbba 	bl	800be84 <appInit>
#if 1
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 8001710:	2264      	movs	r2, #100	@ 0x64
 8001712:	4923      	ldr	r1, [pc, #140]	@ (80017a0 <main+0xc8>)
 8001714:	4823      	ldr	r0, [pc, #140]	@ (80017a4 <main+0xcc>)
 8001716:	f008 fe54 	bl	800a3c2 <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800171a:	217f      	movs	r1, #127	@ 0x7f
 800171c:	4822      	ldr	r0, [pc, #136]	@ (80017a8 <main+0xd0>)
 800171e:	f002 fba9 	bl	8003e74 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001722:	217f      	movs	r1, #127	@ 0x7f
 8001724:	4821      	ldr	r0, [pc, #132]	@ (80017ac <main+0xd4>)
 8001726:	f002 fba5 	bl	8003e74 <HAL_ADCEx_Calibration_Start>
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_JEOC);
 800172a:	4b1f      	ldr	r3, [pc, #124]	@ (80017a8 <main+0xd0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2220      	movs	r2, #32
 8001730:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOC);
 8001732:	4b1d      	ldr	r3, [pc, #116]	@ (80017a8 <main+0xd0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2204      	movs	r2, #4
 8001738:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_JEOC);
 800173a:	4b1c      	ldr	r3, [pc, #112]	@ (80017ac <main+0xd4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2220      	movs	r2, #32
 8001740:	601a      	str	r2, [r3, #0]
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001742:	4819      	ldr	r0, [pc, #100]	@ (80017a8 <main+0xd0>)
 8001744:	f002 fca8 	bl	8004098 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart(&hadc2);
 8001748:	4818      	ldr	r0, [pc, #96]	@ (80017ac <main+0xd4>)
 800174a:	f002 fbf5 	bl	8003f38 <HAL_ADCEx_InjectedStart>
  HAL_TIM_Base_Start(&htim8);
 800174e:	4818      	ldr	r0, [pc, #96]	@ (80017b0 <main+0xd8>)
 8001750:	f005 ff6c 	bl	800762c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001754:	210c      	movs	r1, #12
 8001756:	4816      	ldr	r0, [pc, #88]	@ (80017b0 <main+0xd8>)
 8001758:	f006 f82c 	bl	80077b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800175c:	2100      	movs	r1, #0
 800175e:	4814      	ldr	r0, [pc, #80]	@ (80017b0 <main+0xd8>)
 8001760:	f006 f828 	bl	80077b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001764:	2104      	movs	r1, #4
 8001766:	4812      	ldr	r0, [pc, #72]	@ (80017b0 <main+0xd8>)
 8001768:	f006 f824 	bl	80077b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800176c:	2108      	movs	r1, #8
 800176e:	4810      	ldr	r0, [pc, #64]	@ (80017b0 <main+0xd8>)
 8001770:	f006 f820 	bl	80077b4 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim1);
 8001774:	480f      	ldr	r0, [pc, #60]	@ (80017b4 <main+0xdc>)
 8001776:	f005 ff59 	bl	800762c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800177a:	210c      	movs	r1, #12
 800177c:	480d      	ldr	r0, [pc, #52]	@ (80017b4 <main+0xdc>)
 800177e:	f006 f819 	bl	80077b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001782:	2100      	movs	r1, #0
 8001784:	480b      	ldr	r0, [pc, #44]	@ (80017b4 <main+0xdc>)
 8001786:	f006 f815 	bl	80077b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800178a:	2104      	movs	r1, #4
 800178c:	4809      	ldr	r0, [pc, #36]	@ (80017b4 <main+0xdc>)
 800178e:	f006 f811 	bl	80077b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001792:	2108      	movs	r1, #8
 8001794:	4807      	ldr	r0, [pc, #28]	@ (80017b4 <main+0xdc>)
 8001796:	f006 f80d 	bl	80077b4 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    userMain();
 800179a:	f00c fadd 	bl	800dd58 <userMain>
 800179e:	e7fc      	b.n	800179a <main+0xc2>
 80017a0:	2000095c 	.word	0x2000095c
 80017a4:	200004f0 	.word	0x200004f0
 80017a8:	2000029c 	.word	0x2000029c
 80017ac:	20000308 	.word	0x20000308
 80017b0:	200004a4 	.word	0x200004a4
 80017b4:	20000458 	.word	0x20000458

080017b8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b094      	sub	sp, #80	@ 0x50
 80017bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017be:	f107 0318 	add.w	r3, r7, #24
 80017c2:	2238      	movs	r2, #56	@ 0x38
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f00e f9e6 	bl	800fb98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
 80017d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80017da:	2000      	movs	r0, #0
 80017dc:	f004 fabc 	bl	8005d58 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017e0:	2301      	movs	r3, #1
 80017e2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017e8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ea:	2302      	movs	r3, #2
 80017ec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017ee:	2303      	movs	r3, #3
 80017f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 80017f2:	2303      	movs	r3, #3
 80017f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80017f6:	2328      	movs	r3, #40	@ 0x28
 80017f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017fa:	2302      	movs	r3, #2
 80017fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017fe:	2302      	movs	r3, #2
 8001800:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001802:	2302      	movs	r3, #2
 8001804:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001806:	f107 0318 	add.w	r3, r7, #24
 800180a:	4618      	mov	r0, r3
 800180c:	f004 fb58 	bl	8005ec0 <HAL_RCC_OscConfig>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001816:	f000 f818 	bl	800184a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800181a:	230f      	movs	r3, #15
 800181c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800181e:	2303      	movs	r3, #3
 8001820:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2104      	movs	r1, #4
 8001832:	4618      	mov	r0, r3
 8001834:	f004 fe56 	bl	80064e4 <HAL_RCC_ClockConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800183e:	f000 f804 	bl	800184a <Error_Handler>
  }
}
 8001842:	bf00      	nop
 8001844:	3750      	adds	r7, #80	@ 0x50
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800184e:	b672      	cpsid	i
}
 8001850:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001852:	bf00      	nop
 8001854:	e7fd      	b.n	8001852 <Error_Handler+0x8>
	...

08001858 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800185c:	4b1b      	ldr	r3, [pc, #108]	@ (80018cc <MX_SPI1_Init+0x74>)
 800185e:	4a1c      	ldr	r2, [pc, #112]	@ (80018d0 <MX_SPI1_Init+0x78>)
 8001860:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001862:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <MX_SPI1_Init+0x74>)
 8001864:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001868:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800186a:	4b18      	ldr	r3, [pc, #96]	@ (80018cc <MX_SPI1_Init+0x74>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001870:	4b16      	ldr	r3, [pc, #88]	@ (80018cc <MX_SPI1_Init+0x74>)
 8001872:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001876:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001878:	4b14      	ldr	r3, [pc, #80]	@ (80018cc <MX_SPI1_Init+0x74>)
 800187a:	2202      	movs	r2, #2
 800187c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800187e:	4b13      	ldr	r3, [pc, #76]	@ (80018cc <MX_SPI1_Init+0x74>)
 8001880:	2201      	movs	r2, #1
 8001882:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001884:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <MX_SPI1_Init+0x74>)
 8001886:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800188a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800188c:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <MX_SPI1_Init+0x74>)
 800188e:	2238      	movs	r2, #56	@ 0x38
 8001890:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001892:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <MX_SPI1_Init+0x74>)
 8001894:	2200      	movs	r2, #0
 8001896:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001898:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <MX_SPI1_Init+0x74>)
 800189a:	2200      	movs	r2, #0
 800189c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800189e:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <MX_SPI1_Init+0x74>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80018a4:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <MX_SPI1_Init+0x74>)
 80018a6:	2207      	movs	r2, #7
 80018a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018aa:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <MX_SPI1_Init+0x74>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <MX_SPI1_Init+0x74>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018b6:	4805      	ldr	r0, [pc, #20]	@ (80018cc <MX_SPI1_Init+0x74>)
 80018b8:	f005 fa20 	bl	8006cfc <HAL_SPI_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80018c2:	f7ff ffc2 	bl	800184a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	2000038c 	.word	0x2000038c
 80018d0:	40013000 	.word	0x40013000

080018d4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80018d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001948 <MX_SPI3_Init+0x74>)
 80018da:	4a1c      	ldr	r2, [pc, #112]	@ (800194c <MX_SPI3_Init+0x78>)
 80018dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018de:	4b1a      	ldr	r3, [pc, #104]	@ (8001948 <MX_SPI3_Init+0x74>)
 80018e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018e4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80018e6:	4b18      	ldr	r3, [pc, #96]	@ (8001948 <MX_SPI3_Init+0x74>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80018ec:	4b16      	ldr	r3, [pc, #88]	@ (8001948 <MX_SPI3_Init+0x74>)
 80018ee:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80018f2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018f4:	4b14      	ldr	r3, [pc, #80]	@ (8001948 <MX_SPI3_Init+0x74>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80018fa:	4b13      	ldr	r3, [pc, #76]	@ (8001948 <MX_SPI3_Init+0x74>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001900:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <MX_SPI3_Init+0x74>)
 8001902:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001906:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001908:	4b0f      	ldr	r3, [pc, #60]	@ (8001948 <MX_SPI3_Init+0x74>)
 800190a:	2210      	movs	r2, #16
 800190c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800190e:	4b0e      	ldr	r3, [pc, #56]	@ (8001948 <MX_SPI3_Init+0x74>)
 8001910:	2200      	movs	r2, #0
 8001912:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001914:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <MX_SPI3_Init+0x74>)
 8001916:	2200      	movs	r2, #0
 8001918:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800191a:	4b0b      	ldr	r3, [pc, #44]	@ (8001948 <MX_SPI3_Init+0x74>)
 800191c:	2200      	movs	r2, #0
 800191e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001920:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <MX_SPI3_Init+0x74>)
 8001922:	2207      	movs	r2, #7
 8001924:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001926:	4b08      	ldr	r3, [pc, #32]	@ (8001948 <MX_SPI3_Init+0x74>)
 8001928:	2200      	movs	r2, #0
 800192a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800192c:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <MX_SPI3_Init+0x74>)
 800192e:	2200      	movs	r2, #0
 8001930:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001932:	4805      	ldr	r0, [pc, #20]	@ (8001948 <MX_SPI3_Init+0x74>)
 8001934:	f005 f9e2 	bl	8006cfc <HAL_SPI_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800193e:	f7ff ff84 	bl	800184a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200003f0 	.word	0x200003f0
 800194c:	40003c00 	.word	0x40003c00

08001950 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08c      	sub	sp, #48	@ 0x30
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 031c 	add.w	r3, r7, #28
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a3d      	ldr	r2, [pc, #244]	@ (8001a64 <HAL_SPI_MspInit+0x114>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d129      	bne.n	80019c6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001972:	4b3d      	ldr	r3, [pc, #244]	@ (8001a68 <HAL_SPI_MspInit+0x118>)
 8001974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001976:	4a3c      	ldr	r2, [pc, #240]	@ (8001a68 <HAL_SPI_MspInit+0x118>)
 8001978:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800197c:	6613      	str	r3, [r2, #96]	@ 0x60
 800197e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a68 <HAL_SPI_MspInit+0x118>)
 8001980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001982:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001986:	61bb      	str	r3, [r7, #24]
 8001988:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	4b37      	ldr	r3, [pc, #220]	@ (8001a68 <HAL_SPI_MspInit+0x118>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198e:	4a36      	ldr	r2, [pc, #216]	@ (8001a68 <HAL_SPI_MspInit+0x118>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001996:	4b34      	ldr	r3, [pc, #208]	@ (8001a68 <HAL_SPI_MspInit+0x118>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019a2:	23e0      	movs	r3, #224	@ 0xe0
 80019a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019b2:	2305      	movs	r3, #5
 80019b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b6:	f107 031c 	add.w	r3, r7, #28
 80019ba:	4619      	mov	r1, r3
 80019bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019c0:	f004 f818 	bl	80059f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80019c4:	e049      	b.n	8001a5a <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a28      	ldr	r2, [pc, #160]	@ (8001a6c <HAL_SPI_MspInit+0x11c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d144      	bne.n	8001a5a <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019d0:	4b25      	ldr	r3, [pc, #148]	@ (8001a68 <HAL_SPI_MspInit+0x118>)
 80019d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d4:	4a24      	ldr	r2, [pc, #144]	@ (8001a68 <HAL_SPI_MspInit+0x118>)
 80019d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019da:	6593      	str	r3, [r2, #88]	@ 0x58
 80019dc:	4b22      	ldr	r3, [pc, #136]	@ (8001a68 <HAL_SPI_MspInit+0x118>)
 80019de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a68 <HAL_SPI_MspInit+0x118>)
 80019ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001a68 <HAL_SPI_MspInit+0x118>)
 80019ee:	f043 0304 	orr.w	r3, r3, #4
 80019f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a68 <HAL_SPI_MspInit+0x118>)
 80019f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a00:	4b19      	ldr	r3, [pc, #100]	@ (8001a68 <HAL_SPI_MspInit+0x118>)
 8001a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a04:	4a18      	ldr	r2, [pc, #96]	@ (8001a68 <HAL_SPI_MspInit+0x118>)
 8001a06:	f043 0302 	orr.w	r3, r3, #2
 8001a0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a0c:	4b16      	ldr	r3, [pc, #88]	@ (8001a68 <HAL_SPI_MspInit+0x118>)
 8001a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a18:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a2a:	2306      	movs	r3, #6
 8001a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	4619      	mov	r1, r3
 8001a34:	480e      	ldr	r0, [pc, #56]	@ (8001a70 <HAL_SPI_MspInit+0x120>)
 8001a36:	f003 ffdd 	bl	80059f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a3a:	2320      	movs	r3, #32
 8001a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	2300      	movs	r3, #0
 8001a48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a4a:	2306      	movs	r3, #6
 8001a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4e:	f107 031c 	add.w	r3, r7, #28
 8001a52:	4619      	mov	r1, r3
 8001a54:	4807      	ldr	r0, [pc, #28]	@ (8001a74 <HAL_SPI_MspInit+0x124>)
 8001a56:	f003 ffcd 	bl	80059f4 <HAL_GPIO_Init>
}
 8001a5a:	bf00      	nop
 8001a5c:	3730      	adds	r7, #48	@ 0x30
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40013000 	.word	0x40013000
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40003c00 	.word	0x40003c00
 8001a70:	48000800 	.word	0x48000800
 8001a74:	48000400 	.word	0x48000400

08001a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001abc <HAL_MspInit+0x44>)
 8001a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a82:	4a0e      	ldr	r2, [pc, #56]	@ (8001abc <HAL_MspInit+0x44>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001abc <HAL_MspInit+0x44>)
 8001a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a96:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <HAL_MspInit+0x44>)
 8001a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9a:	4a08      	ldr	r2, [pc, #32]	@ (8001abc <HAL_MspInit+0x44>)
 8001a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aa2:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <HAL_MspInit+0x44>)
 8001aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001aae:	f004 f9f7 	bl	8005ea0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000

08001ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <NMI_Handler+0x4>

08001ac8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <HardFault_Handler+0x4>

08001ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <MemManage_Handler+0x4>

08001ad8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <BusFault_Handler+0x4>

08001ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <UsageFault_Handler+0x4>

08001ae8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b16:	f000 fce5 	bl	80024e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001b24:	4802      	ldr	r0, [pc, #8]	@ (8001b30 <DMA1_Channel1_IRQHandler+0x10>)
 8001b26:	f003 fe16 	bl	8005756 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000584 	.word	0x20000584

08001b34 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001b38:	4802      	ldr	r0, [pc, #8]	@ (8001b44 <DMA1_Channel2_IRQHandler+0x10>)
 8001b3a:	f003 fe0c 	bl	8005756 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200005e4 	.word	0x200005e4

08001b48 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b4c:	4803      	ldr	r0, [pc, #12]	@ (8001b5c <ADC1_2_IRQHandler+0x14>)
 8001b4e:	f001 f8df 	bl	8002d10 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001b52:	4803      	ldr	r0, [pc, #12]	@ (8001b60 <ADC1_2_IRQHandler+0x18>)
 8001b54:	f001 f8dc 	bl	8002d10 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	2000029c 	.word	0x2000029c
 8001b60:	20000308 	.word	0x20000308

08001b64 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b68:	4802      	ldr	r0, [pc, #8]	@ (8001b74 <USART3_IRQHandler+0x10>)
 8001b6a:	f007 f887 	bl	8008c7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200004f0 	.word	0x200004f0

08001b78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return 1;
 8001b7c:	2301      	movs	r3, #1
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <_kill>:

int _kill(int pid, int sig)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b92:	f00e f865 	bl	800fc60 <__errno>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2216      	movs	r2, #22
 8001b9a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_exit>:

void _exit (int status)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ffe7 	bl	8001b88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bba:	bf00      	nop
 8001bbc:	e7fd      	b.n	8001bba <_exit+0x12>

08001bbe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	e00a      	b.n	8001be6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bd0:	f3af 8000 	nop.w
 8001bd4:	4601      	mov	r1, r0
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	60ba      	str	r2, [r7, #8]
 8001bdc:	b2ca      	uxtb	r2, r1
 8001bde:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	3301      	adds	r3, #1
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	dbf0      	blt.n	8001bd0 <_read+0x12>
  }

  return len;
 8001bee:	687b      	ldr	r3, [r7, #4]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	e009      	b.n	8001c1e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	60ba      	str	r2, [r7, #8]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	dbf1      	blt.n	8001c0a <_write+0x12>
  }
  return len;
 8001c26:	687b      	ldr	r3, [r7, #4]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <_close>:

int _close(int file)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c58:	605a      	str	r2, [r3, #4]
  return 0;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <_isatty>:

int _isatty(int file)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c70:	2301      	movs	r3, #1
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b085      	sub	sp, #20
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ca0:	4a14      	ldr	r2, [pc, #80]	@ (8001cf4 <_sbrk+0x5c>)
 8001ca2:	4b15      	ldr	r3, [pc, #84]	@ (8001cf8 <_sbrk+0x60>)
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cac:	4b13      	ldr	r3, [pc, #76]	@ (8001cfc <_sbrk+0x64>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d102      	bne.n	8001cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cb4:	4b11      	ldr	r3, [pc, #68]	@ (8001cfc <_sbrk+0x64>)
 8001cb6:	4a12      	ldr	r2, [pc, #72]	@ (8001d00 <_sbrk+0x68>)
 8001cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cba:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <_sbrk+0x64>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d207      	bcs.n	8001cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cc8:	f00d ffca 	bl	800fc60 <__errno>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	220c      	movs	r2, #12
 8001cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd6:	e009      	b.n	8001cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cd8:	4b08      	ldr	r3, [pc, #32]	@ (8001cfc <_sbrk+0x64>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cde:	4b07      	ldr	r3, [pc, #28]	@ (8001cfc <_sbrk+0x64>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	4a05      	ldr	r2, [pc, #20]	@ (8001cfc <_sbrk+0x64>)
 8001ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cea:	68fb      	ldr	r3, [r7, #12]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20008000 	.word	0x20008000
 8001cf8:	00000400 	.word	0x00000400
 8001cfc:	20000454 	.word	0x20000454
 8001d00:	20000c18 	.word	0x20000c18

08001d04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d08:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <SystemInit+0x20>)
 8001d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d0e:	4a05      	ldr	r2, [pc, #20]	@ (8001d24 <SystemInit+0x20>)
 8001d10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b09c      	sub	sp, #112	@ 0x70
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d2e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d48:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
 8001d58:	615a      	str	r2, [r3, #20]
 8001d5a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	2234      	movs	r2, #52	@ 0x34
 8001d60:	2100      	movs	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f00d ff18 	bl	800fb98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d68:	4b5b      	ldr	r3, [pc, #364]	@ (8001ed8 <MX_TIM1_Init+0x1b0>)
 8001d6a:	4a5c      	ldr	r2, [pc, #368]	@ (8001edc <MX_TIM1_Init+0x1b4>)
 8001d6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8001d6e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ed8 <MX_TIM1_Init+0x1b0>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001d74:	4b58      	ldr	r3, [pc, #352]	@ (8001ed8 <MX_TIM1_Init+0x1b0>)
 8001d76:	2220      	movs	r2, #32
 8001d78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 8001d7a:	4b57      	ldr	r3, [pc, #348]	@ (8001ed8 <MX_TIM1_Init+0x1b0>)
 8001d7c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001d80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001d82:	4b55      	ldr	r3, [pc, #340]	@ (8001ed8 <MX_TIM1_Init+0x1b0>)
 8001d84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001d8a:	4b53      	ldr	r3, [pc, #332]	@ (8001ed8 <MX_TIM1_Init+0x1b0>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d90:	4b51      	ldr	r3, [pc, #324]	@ (8001ed8 <MX_TIM1_Init+0x1b0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d96:	4850      	ldr	r0, [pc, #320]	@ (8001ed8 <MX_TIM1_Init+0x1b0>)
 8001d98:	f005 fbf0 	bl	800757c <HAL_TIM_Base_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001da2:	f7ff fd52 	bl	800184a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001daa:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dac:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001db0:	4619      	mov	r1, r3
 8001db2:	4849      	ldr	r0, [pc, #292]	@ (8001ed8 <MX_TIM1_Init+0x1b0>)
 8001db4:	f005 ffa8 	bl	8007d08 <HAL_TIM_ConfigClockSource>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001dbe:	f7ff fd44 	bl	800184a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001dc2:	4845      	ldr	r0, [pc, #276]	@ (8001ed8 <MX_TIM1_Init+0x1b0>)
 8001dc4:	f005 fc94 	bl	80076f0 <HAL_TIM_PWM_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001dce:	f7ff fd3c 	bl	800184a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001dd2:	2370      	movs	r3, #112	@ 0x70
 8001dd4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dde:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001de2:	4619      	mov	r1, r3
 8001de4:	483c      	ldr	r0, [pc, #240]	@ (8001ed8 <MX_TIM1_Init+0x1b0>)
 8001de6:	f006 fcdd 	bl	80087a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001df0:	f7ff fd2b 	bl	800184a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001df4:	2360      	movs	r3, #96	@ 0x60
 8001df6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e00:	2300      	movs	r3, #0
 8001e02:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e04:	2300      	movs	r3, #0
 8001e06:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e10:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e14:	2200      	movs	r2, #0
 8001e16:	4619      	mov	r1, r3
 8001e18:	482f      	ldr	r0, [pc, #188]	@ (8001ed8 <MX_TIM1_Init+0x1b0>)
 8001e1a:	f005 fe61 	bl	8007ae0 <HAL_TIM_PWM_ConfigChannel>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001e24:	f7ff fd11 	bl	800184a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e28:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4829      	ldr	r0, [pc, #164]	@ (8001ed8 <MX_TIM1_Init+0x1b0>)
 8001e32:	f005 fe55 	bl	8007ae0 <HAL_TIM_PWM_ConfigChannel>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001e3c:	f7ff fd05 	bl	800184a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e40:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e44:	2208      	movs	r2, #8
 8001e46:	4619      	mov	r1, r3
 8001e48:	4823      	ldr	r0, [pc, #140]	@ (8001ed8 <MX_TIM1_Init+0x1b0>)
 8001e4a:	f005 fe49 	bl	8007ae0 <HAL_TIM_PWM_ConfigChannel>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001e54:	f7ff fcf9 	bl	800184a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001e58:	2370      	movs	r3, #112	@ 0x70
 8001e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 7998;
 8001e5c:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 8001e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e62:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e66:	220c      	movs	r2, #12
 8001e68:	4619      	mov	r1, r3
 8001e6a:	481b      	ldr	r0, [pc, #108]	@ (8001ed8 <MX_TIM1_Init+0x1b0>)
 8001e6c:	f005 fe38 	bl	8007ae0 <HAL_TIM_PWM_ConfigChannel>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8001e76:	f7ff fce8 	bl	800184a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001e8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 2;
 8001e96:	2302      	movs	r3, #2
 8001e98:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ea2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001eac:	2300      	movs	r3, #0
 8001eae:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4807      	ldr	r0, [pc, #28]	@ (8001ed8 <MX_TIM1_Init+0x1b0>)
 8001eba:	f006 fcf5 	bl	80088a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM1_Init+0x1a0>
  {
    Error_Handler();
 8001ec4:	f7ff fcc1 	bl	800184a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ec8:	4803      	ldr	r0, [pc, #12]	@ (8001ed8 <MX_TIM1_Init+0x1b0>)
 8001eca:	f000 f917 	bl	80020fc <HAL_TIM_MspPostInit>

}
 8001ece:	bf00      	nop
 8001ed0:	3770      	adds	r7, #112	@ 0x70
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000458 	.word	0x20000458
 8001edc:	40012c00 	.word	0x40012c00

08001ee0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b09c      	sub	sp, #112	@ 0x70
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ee6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	609a      	str	r2, [r3, #8]
 8001ef2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f00:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
 8001f10:	615a      	str	r2, [r3, #20]
 8001f12:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	2234      	movs	r2, #52	@ 0x34
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f00d fe3c 	bl	800fb98 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f20:	4b5a      	ldr	r3, [pc, #360]	@ (800208c <MX_TIM8_Init+0x1ac>)
 8001f22:	4a5b      	ldr	r2, [pc, #364]	@ (8002090 <MX_TIM8_Init+0x1b0>)
 8001f24:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001f26:	4b59      	ldr	r3, [pc, #356]	@ (800208c <MX_TIM8_Init+0x1ac>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001f2c:	4b57      	ldr	r3, [pc, #348]	@ (800208c <MX_TIM8_Init+0x1ac>)
 8001f2e:	2220      	movs	r2, #32
 8001f30:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7999;
 8001f32:	4b56      	ldr	r3, [pc, #344]	@ (800208c <MX_TIM8_Init+0x1ac>)
 8001f34:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001f38:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001f3a:	4b54      	ldr	r3, [pc, #336]	@ (800208c <MX_TIM8_Init+0x1ac>)
 8001f3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f40:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 1;
 8001f42:	4b52      	ldr	r3, [pc, #328]	@ (800208c <MX_TIM8_Init+0x1ac>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f48:	4b50      	ldr	r3, [pc, #320]	@ (800208c <MX_TIM8_Init+0x1ac>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001f4e:	484f      	ldr	r0, [pc, #316]	@ (800208c <MX_TIM8_Init+0x1ac>)
 8001f50:	f005 fb14 	bl	800757c <HAL_TIM_Base_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8001f5a:	f7ff fc76 	bl	800184a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f62:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001f64:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4848      	ldr	r0, [pc, #288]	@ (800208c <MX_TIM8_Init+0x1ac>)
 8001f6c:	f005 fecc 	bl	8007d08 <HAL_TIM_ConfigClockSource>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001f76:	f7ff fc68 	bl	800184a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001f7a:	4844      	ldr	r0, [pc, #272]	@ (800208c <MX_TIM8_Init+0x1ac>)
 8001f7c:	f005 fbb8 	bl	80076f0 <HAL_TIM_PWM_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001f86:	f7ff fc60 	bl	800184a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001f8a:	2370      	movs	r3, #112	@ 0x70
 8001f8c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f96:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	483b      	ldr	r0, [pc, #236]	@ (800208c <MX_TIM8_Init+0x1ac>)
 8001f9e:	f006 fc01 	bl	80087a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8001fa8:	f7ff fc4f 	bl	800184a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fac:	2360      	movs	r3, #96	@ 0x60
 8001fae:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fc8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001fcc:	2200      	movs	r2, #0
 8001fce:	4619      	mov	r1, r3
 8001fd0:	482e      	ldr	r0, [pc, #184]	@ (800208c <MX_TIM8_Init+0x1ac>)
 8001fd2:	f005 fd85 	bl	8007ae0 <HAL_TIM_PWM_ConfigChannel>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001fdc:	f7ff fc35 	bl	800184a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fe0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001fe4:	2204      	movs	r2, #4
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4828      	ldr	r0, [pc, #160]	@ (800208c <MX_TIM8_Init+0x1ac>)
 8001fea:	f005 fd79 	bl	8007ae0 <HAL_TIM_PWM_ConfigChannel>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8001ff4:	f7ff fc29 	bl	800184a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ff8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ffc:	2208      	movs	r2, #8
 8001ffe:	4619      	mov	r1, r3
 8002000:	4822      	ldr	r0, [pc, #136]	@ (800208c <MX_TIM8_Init+0x1ac>)
 8002002:	f005 fd6d 	bl	8007ae0 <HAL_TIM_PWM_ConfigChannel>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 800200c:	f7ff fc1d 	bl	800184a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002010:	2370      	movs	r3, #112	@ 0x70
 8002012:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 7998;
 8002014:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 8002018:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800201a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800201e:	220c      	movs	r2, #12
 8002020:	4619      	mov	r1, r3
 8002022:	481a      	ldr	r0, [pc, #104]	@ (800208c <MX_TIM8_Init+0x1ac>)
 8002024:	f005 fd5c 	bl	8007ae0 <HAL_TIM_PWM_ConfigChannel>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM8_Init+0x152>
  {
    Error_Handler();
 800202e:	f7ff fc0c 	bl	800184a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002036:	2300      	movs	r3, #0
 8002038:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002046:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800204a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002050:	2300      	movs	r3, #0
 8002052:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002058:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800205c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002062:	2300      	movs	r3, #0
 8002064:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	4619      	mov	r1, r3
 800206e:	4807      	ldr	r0, [pc, #28]	@ (800208c <MX_TIM8_Init+0x1ac>)
 8002070:	f006 fc1a 	bl	80088a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_TIM8_Init+0x19e>
  {
    Error_Handler();
 800207a:	f7ff fbe6 	bl	800184a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800207e:	4803      	ldr	r0, [pc, #12]	@ (800208c <MX_TIM8_Init+0x1ac>)
 8002080:	f000 f83c 	bl	80020fc <HAL_TIM_MspPostInit>

}
 8002084:	bf00      	nop
 8002086:	3770      	adds	r7, #112	@ 0x70
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	200004a4 	.word	0x200004a4
 8002090:	40013400 	.word	0x40013400

08002094 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a13      	ldr	r2, [pc, #76]	@ (80020f0 <HAL_TIM_Base_MspInit+0x5c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d10c      	bne.n	80020c0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020a6:	4b13      	ldr	r3, [pc, #76]	@ (80020f4 <HAL_TIM_Base_MspInit+0x60>)
 80020a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020aa:	4a12      	ldr	r2, [pc, #72]	@ (80020f4 <HAL_TIM_Base_MspInit+0x60>)
 80020ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80020b2:	4b10      	ldr	r3, [pc, #64]	@ (80020f4 <HAL_TIM_Base_MspInit+0x60>)
 80020b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80020be:	e010      	b.n	80020e2 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM8)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a0c      	ldr	r2, [pc, #48]	@ (80020f8 <HAL_TIM_Base_MspInit+0x64>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d10b      	bne.n	80020e2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80020ca:	4b0a      	ldr	r3, [pc, #40]	@ (80020f4 <HAL_TIM_Base_MspInit+0x60>)
 80020cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ce:	4a09      	ldr	r2, [pc, #36]	@ (80020f4 <HAL_TIM_Base_MspInit+0x60>)
 80020d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80020d6:	4b07      	ldr	r3, [pc, #28]	@ (80020f4 <HAL_TIM_Base_MspInit+0x60>)
 80020d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40012c00 	.word	0x40012c00
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40013400 	.word	0x40013400

080020fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	@ 0x28
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a2b      	ldr	r2, [pc, #172]	@ (80021c8 <HAL_TIM_MspPostInit+0xcc>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d11e      	bne.n	800215c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211e:	4b2b      	ldr	r3, [pc, #172]	@ (80021cc <HAL_TIM_MspPostInit+0xd0>)
 8002120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002122:	4a2a      	ldr	r2, [pc, #168]	@ (80021cc <HAL_TIM_MspPostInit+0xd0>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800212a:	4b28      	ldr	r3, [pc, #160]	@ (80021cc <HAL_TIM_MspPostInit+0xd0>)
 800212c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002136:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800213a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2302      	movs	r3, #2
 800213e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002144:	2300      	movs	r3, #0
 8002146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002148:	2306      	movs	r3, #6
 800214a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214c:	f107 0314 	add.w	r3, r7, #20
 8002150:	4619      	mov	r1, r3
 8002152:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002156:	f003 fc4d 	bl	80059f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800215a:	e031      	b.n	80021c0 <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM8)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1b      	ldr	r2, [pc, #108]	@ (80021d0 <HAL_TIM_MspPostInit+0xd4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d12c      	bne.n	80021c0 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002166:	4b19      	ldr	r3, [pc, #100]	@ (80021cc <HAL_TIM_MspPostInit+0xd0>)
 8002168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216a:	4a18      	ldr	r2, [pc, #96]	@ (80021cc <HAL_TIM_MspPostInit+0xd0>)
 800216c:	f043 0302 	orr.w	r3, r3, #2
 8002170:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002172:	4b16      	ldr	r3, [pc, #88]	@ (80021cc <HAL_TIM_MspPostInit+0xd0>)
 8002174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800217e:	2340      	movs	r3, #64	@ 0x40
 8002180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218a:	2300      	movs	r3, #0
 800218c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 800218e:	2305      	movs	r3, #5
 8002190:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002192:	f107 0314 	add.w	r3, r7, #20
 8002196:	4619      	mov	r1, r3
 8002198:	480e      	ldr	r0, [pc, #56]	@ (80021d4 <HAL_TIM_MspPostInit+0xd8>)
 800219a:	f003 fc2b 	bl	80059f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800219e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80021a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80021b0:	230a      	movs	r3, #10
 80021b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4619      	mov	r1, r3
 80021ba:	4806      	ldr	r0, [pc, #24]	@ (80021d4 <HAL_TIM_MspPostInit+0xd8>)
 80021bc:	f003 fc1a 	bl	80059f4 <HAL_GPIO_Init>
}
 80021c0:	bf00      	nop
 80021c2:	3728      	adds	r7, #40	@ 0x28
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40012c00 	.word	0x40012c00
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40013400 	.word	0x40013400
 80021d4:	48000400 	.word	0x48000400

080021d8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021dc:	4b22      	ldr	r3, [pc, #136]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 80021de:	4a23      	ldr	r2, [pc, #140]	@ (800226c <MX_USART3_UART_Init+0x94>)
 80021e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 80021e2:	4b21      	ldr	r3, [pc, #132]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 80021e4:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80021e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 80021fe:	220c      	movs	r2, #12
 8002200:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002202:	4b19      	ldr	r3, [pc, #100]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 8002204:	2200      	movs	r2, #0
 8002206:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002208:	4b17      	ldr	r3, [pc, #92]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 800220a:	2200      	movs	r2, #0
 800220c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800220e:	4b16      	ldr	r3, [pc, #88]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 8002210:	2200      	movs	r2, #0
 8002212:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002214:	4b14      	ldr	r3, [pc, #80]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 8002216:	2200      	movs	r2, #0
 8002218:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800221a:	4b13      	ldr	r3, [pc, #76]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 800221c:	2200      	movs	r2, #0
 800221e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002220:	4811      	ldr	r0, [pc, #68]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 8002222:	f006 fbcd 	bl	80089c0 <HAL_UART_Init>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800222c:	f7ff fb0d 	bl	800184a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002230:	2100      	movs	r1, #0
 8002232:	480d      	ldr	r0, [pc, #52]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 8002234:	f008 f849 	bl	800a2ca <HAL_UARTEx_SetTxFifoThreshold>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800223e:	f7ff fb04 	bl	800184a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002242:	2100      	movs	r1, #0
 8002244:	4808      	ldr	r0, [pc, #32]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 8002246:	f008 f87e 	bl	800a346 <HAL_UARTEx_SetRxFifoThreshold>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002250:	f7ff fafb 	bl	800184a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002254:	4804      	ldr	r0, [pc, #16]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 8002256:	f007 ffff 	bl	800a258 <HAL_UARTEx_DisableFifoMode>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002260:	f7ff faf3 	bl	800184a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002264:	bf00      	nop
 8002266:	bd80      	pop	{r7, pc}
 8002268:	200004f0 	.word	0x200004f0
 800226c:	40004800 	.word	0x40004800

08002270 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b09a      	sub	sp, #104	@ 0x68
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002288:	f107 0310 	add.w	r3, r7, #16
 800228c:	2244      	movs	r2, #68	@ 0x44
 800228e:	2100      	movs	r1, #0
 8002290:	4618      	mov	r0, r3
 8002292:	f00d fc81 	bl	800fb98 <memset>
  if(uartHandle->Instance==USART3)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a4d      	ldr	r2, [pc, #308]	@ (80023d0 <HAL_UART_MspInit+0x160>)
 800229c:	4293      	cmp	r3, r2
 800229e:	f040 8092 	bne.w	80023c6 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022a2:	2304      	movs	r3, #4
 80022a4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022aa:	f107 0310 	add.w	r3, r7, #16
 80022ae:	4618      	mov	r0, r3
 80022b0:	f004 fb34 	bl	800691c <HAL_RCCEx_PeriphCLKConfig>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80022ba:	f7ff fac6 	bl	800184a <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80022be:	4b45      	ldr	r3, [pc, #276]	@ (80023d4 <HAL_UART_MspInit+0x164>)
 80022c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c2:	4a44      	ldr	r2, [pc, #272]	@ (80023d4 <HAL_UART_MspInit+0x164>)
 80022c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80022ca:	4b42      	ldr	r3, [pc, #264]	@ (80023d4 <HAL_UART_MspInit+0x164>)
 80022cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d6:	4b3f      	ldr	r3, [pc, #252]	@ (80023d4 <HAL_UART_MspInit+0x164>)
 80022d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022da:	4a3e      	ldr	r2, [pc, #248]	@ (80023d4 <HAL_UART_MspInit+0x164>)
 80022dc:	f043 0302 	orr.w	r3, r3, #2
 80022e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022e2:	4b3c      	ldr	r3, [pc, #240]	@ (80023d4 <HAL_UART_MspInit+0x164>)
 80022e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022ee:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80022f2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f4:	2302      	movs	r3, #2
 80022f6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fc:	2300      	movs	r3, #0
 80022fe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002300:	2307      	movs	r3, #7
 8002302:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002304:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002308:	4619      	mov	r1, r3
 800230a:	4833      	ldr	r0, [pc, #204]	@ (80023d8 <HAL_UART_MspInit+0x168>)
 800230c:	f003 fb72 	bl	80059f4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel1;
 8002310:	4b32      	ldr	r3, [pc, #200]	@ (80023dc <HAL_UART_MspInit+0x16c>)
 8002312:	4a33      	ldr	r2, [pc, #204]	@ (80023e0 <HAL_UART_MspInit+0x170>)
 8002314:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002316:	4b31      	ldr	r3, [pc, #196]	@ (80023dc <HAL_UART_MspInit+0x16c>)
 8002318:	221d      	movs	r2, #29
 800231a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800231c:	4b2f      	ldr	r3, [pc, #188]	@ (80023dc <HAL_UART_MspInit+0x16c>)
 800231e:	2210      	movs	r2, #16
 8002320:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002322:	4b2e      	ldr	r3, [pc, #184]	@ (80023dc <HAL_UART_MspInit+0x16c>)
 8002324:	2200      	movs	r2, #0
 8002326:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002328:	4b2c      	ldr	r3, [pc, #176]	@ (80023dc <HAL_UART_MspInit+0x16c>)
 800232a:	2280      	movs	r2, #128	@ 0x80
 800232c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800232e:	4b2b      	ldr	r3, [pc, #172]	@ (80023dc <HAL_UART_MspInit+0x16c>)
 8002330:	2200      	movs	r2, #0
 8002332:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002334:	4b29      	ldr	r3, [pc, #164]	@ (80023dc <HAL_UART_MspInit+0x16c>)
 8002336:	2200      	movs	r2, #0
 8002338:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800233a:	4b28      	ldr	r3, [pc, #160]	@ (80023dc <HAL_UART_MspInit+0x16c>)
 800233c:	2200      	movs	r2, #0
 800233e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002340:	4b26      	ldr	r3, [pc, #152]	@ (80023dc <HAL_UART_MspInit+0x16c>)
 8002342:	2200      	movs	r2, #0
 8002344:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002346:	4825      	ldr	r0, [pc, #148]	@ (80023dc <HAL_UART_MspInit+0x16c>)
 8002348:	f003 f822 	bl	8005390 <HAL_DMA_Init>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002352:	f7ff fa7a 	bl	800184a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a20      	ldr	r2, [pc, #128]	@ (80023dc <HAL_UART_MspInit+0x16c>)
 800235a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800235c:	4a1f      	ldr	r2, [pc, #124]	@ (80023dc <HAL_UART_MspInit+0x16c>)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel2;
 8002362:	4b20      	ldr	r3, [pc, #128]	@ (80023e4 <HAL_UART_MspInit+0x174>)
 8002364:	4a20      	ldr	r2, [pc, #128]	@ (80023e8 <HAL_UART_MspInit+0x178>)
 8002366:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002368:	4b1e      	ldr	r3, [pc, #120]	@ (80023e4 <HAL_UART_MspInit+0x174>)
 800236a:	221c      	movs	r2, #28
 800236c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800236e:	4b1d      	ldr	r3, [pc, #116]	@ (80023e4 <HAL_UART_MspInit+0x174>)
 8002370:	2200      	movs	r2, #0
 8002372:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002374:	4b1b      	ldr	r3, [pc, #108]	@ (80023e4 <HAL_UART_MspInit+0x174>)
 8002376:	2200      	movs	r2, #0
 8002378:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800237a:	4b1a      	ldr	r3, [pc, #104]	@ (80023e4 <HAL_UART_MspInit+0x174>)
 800237c:	2280      	movs	r2, #128	@ 0x80
 800237e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002380:	4b18      	ldr	r3, [pc, #96]	@ (80023e4 <HAL_UART_MspInit+0x174>)
 8002382:	2200      	movs	r2, #0
 8002384:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002386:	4b17      	ldr	r3, [pc, #92]	@ (80023e4 <HAL_UART_MspInit+0x174>)
 8002388:	2200      	movs	r2, #0
 800238a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800238c:	4b15      	ldr	r3, [pc, #84]	@ (80023e4 <HAL_UART_MspInit+0x174>)
 800238e:	2200      	movs	r2, #0
 8002390:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002392:	4b14      	ldr	r3, [pc, #80]	@ (80023e4 <HAL_UART_MspInit+0x174>)
 8002394:	2200      	movs	r2, #0
 8002396:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002398:	4812      	ldr	r0, [pc, #72]	@ (80023e4 <HAL_UART_MspInit+0x174>)
 800239a:	f002 fff9 	bl	8005390 <HAL_DMA_Init>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 80023a4:	f7ff fa51 	bl	800184a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a0e      	ldr	r2, [pc, #56]	@ (80023e4 <HAL_UART_MspInit+0x174>)
 80023ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80023b0:	4a0c      	ldr	r2, [pc, #48]	@ (80023e4 <HAL_UART_MspInit+0x174>)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80023b6:	2200      	movs	r2, #0
 80023b8:	2101      	movs	r1, #1
 80023ba:	2027      	movs	r0, #39	@ 0x27
 80023bc:	f002 fdd9 	bl	8004f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80023c0:	2027      	movs	r0, #39	@ 0x27
 80023c2:	f002 fdf0 	bl	8004fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80023c6:	bf00      	nop
 80023c8:	3768      	adds	r7, #104	@ 0x68
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40004800 	.word	0x40004800
 80023d4:	40021000 	.word	0x40021000
 80023d8:	48000400 	.word	0x48000400
 80023dc:	20000584 	.word	0x20000584
 80023e0:	40020008 	.word	0x40020008
 80023e4:	200005e4 	.word	0x200005e4
 80023e8:	4002001c 	.word	0x4002001c

080023ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023ec:	480d      	ldr	r0, [pc, #52]	@ (8002424 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023ee:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80023f0:	f7ff fc88 	bl	8001d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023f4:	480c      	ldr	r0, [pc, #48]	@ (8002428 <LoopForever+0x6>)
  ldr r1, =_edata
 80023f6:	490d      	ldr	r1, [pc, #52]	@ (800242c <LoopForever+0xa>)
  ldr r2, =_sidata
 80023f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002430 <LoopForever+0xe>)
  movs r3, #0
 80023fa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80023fc:	e002      	b.n	8002404 <LoopCopyDataInit>

080023fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002402:	3304      	adds	r3, #4

08002404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002408:	d3f9      	bcc.n	80023fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800240a:	4a0a      	ldr	r2, [pc, #40]	@ (8002434 <LoopForever+0x12>)
  ldr r4, =_ebss
 800240c:	4c0a      	ldr	r4, [pc, #40]	@ (8002438 <LoopForever+0x16>)
  movs r3, #0
 800240e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002410:	e001      	b.n	8002416 <LoopFillZerobss>

08002412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002414:	3204      	adds	r2, #4

08002416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002418:	d3fb      	bcc.n	8002412 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800241a:	f00d fc27 	bl	800fc6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800241e:	f7ff f95b 	bl	80016d8 <main>

08002422 <LoopForever>:

LoopForever:
    b LoopForever
 8002422:	e7fe      	b.n	8002422 <LoopForever>
  ldr   r0, =_estack
 8002424:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800242c:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 8002430:	08013b80 	.word	0x08013b80
  ldr r2, =_sbss
 8002434:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 8002438:	20000c14 	.word	0x20000c14

0800243c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800243c:	e7fe      	b.n	800243c <COMP1_2_3_IRQHandler>

0800243e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002448:	2003      	movs	r0, #3
 800244a:	f002 fd87 	bl	8004f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800244e:	200f      	movs	r0, #15
 8002450:	f000 f80e 	bl	8002470 <HAL_InitTick>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d002      	beq.n	8002460 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	71fb      	strb	r3, [r7, #7]
 800245e:	e001      	b.n	8002464 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002460:	f7ff fb0a 	bl	8001a78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002464:	79fb      	ldrb	r3, [r7, #7]

}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800247c:	4b16      	ldr	r3, [pc, #88]	@ (80024d8 <HAL_InitTick+0x68>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d022      	beq.n	80024ca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002484:	4b15      	ldr	r3, [pc, #84]	@ (80024dc <HAL_InitTick+0x6c>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b13      	ldr	r3, [pc, #76]	@ (80024d8 <HAL_InitTick+0x68>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002490:	fbb1 f3f3 	udiv	r3, r1, r3
 8002494:	fbb2 f3f3 	udiv	r3, r2, r3
 8002498:	4618      	mov	r0, r3
 800249a:	f002 fd92 	bl	8004fc2 <HAL_SYSTICK_Config>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10f      	bne.n	80024c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b0f      	cmp	r3, #15
 80024a8:	d809      	bhi.n	80024be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024aa:	2200      	movs	r2, #0
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	f04f 30ff 	mov.w	r0, #4294967295
 80024b2:	f002 fd5e 	bl	8004f72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024b6:	4a0a      	ldr	r2, [pc, #40]	@ (80024e0 <HAL_InitTick+0x70>)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	e007      	b.n	80024ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	73fb      	strb	r3, [r7, #15]
 80024c2:	e004      	b.n	80024ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	73fb      	strb	r3, [r7, #15]
 80024c8:	e001      	b.n	80024ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000008 	.word	0x20000008
 80024dc:	20000000 	.word	0x20000000
 80024e0:	20000004 	.word	0x20000004

080024e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024e8:	4b05      	ldr	r3, [pc, #20]	@ (8002500 <HAL_IncTick+0x1c>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b05      	ldr	r3, [pc, #20]	@ (8002504 <HAL_IncTick+0x20>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4413      	add	r3, r2
 80024f2:	4a03      	ldr	r2, [pc, #12]	@ (8002500 <HAL_IncTick+0x1c>)
 80024f4:	6013      	str	r3, [r2, #0]
}
 80024f6:	bf00      	nop
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	20000644 	.word	0x20000644
 8002504:	20000008 	.word	0x20000008

08002508 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return uwTick;
 800250c:	4b03      	ldr	r3, [pc, #12]	@ (800251c <HAL_GetTick+0x14>)
 800250e:	681b      	ldr	r3, [r3, #0]
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000644 	.word	0x20000644

08002520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002528:	f7ff ffee 	bl	8002508 <HAL_GetTick>
 800252c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002538:	d004      	beq.n	8002544 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800253a:	4b09      	ldr	r3, [pc, #36]	@ (8002560 <HAL_Delay+0x40>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	4413      	add	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002544:	bf00      	nop
 8002546:	f7ff ffdf 	bl	8002508 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	429a      	cmp	r2, r3
 8002554:	d8f7      	bhi.n	8002546 <HAL_Delay+0x26>
  {
  }
}
 8002556:	bf00      	nop
 8002558:	bf00      	nop
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20000008 	.word	0x20000008

08002564 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	609a      	str	r2, [r3, #8]
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	609a      	str	r2, [r3, #8]
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
 80025d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	3360      	adds	r3, #96	@ 0x60
 80025de:	461a      	mov	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4b08      	ldr	r3, [pc, #32]	@ (8002610 <LL_ADC_SetOffset+0x44>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002604:	bf00      	nop
 8002606:	371c      	adds	r7, #28
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	03fff000 	.word	0x03fff000

08002614 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3360      	adds	r3, #96	@ 0x60
 8002622:	461a      	mov	r2, r3
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002640:	b480      	push	{r7}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	3360      	adds	r3, #96	@ 0x60
 8002650:	461a      	mov	r2, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	431a      	orrs	r2, r3
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800266a:	bf00      	nop
 800266c:	371c      	adds	r7, #28
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002676:	b480      	push	{r7}
 8002678:	b087      	sub	sp, #28
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	3360      	adds	r3, #96	@ 0x60
 8002686:	461a      	mov	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	431a      	orrs	r2, r3
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80026a0:	bf00      	nop
 80026a2:	371c      	adds	r7, #28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b087      	sub	sp, #28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	3360      	adds	r3, #96	@ 0x60
 80026bc:	461a      	mov	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	431a      	orrs	r2, r3
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80026d6:	bf00      	nop
 80026d8:	371c      	adds	r7, #28
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	615a      	str	r2, [r3, #20]
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800271c:	2301      	movs	r3, #1
 800271e:	e000      	b.n	8002722 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800272e:	b480      	push	{r7}
 8002730:	b087      	sub	sp, #28
 8002732:	af00      	add	r7, sp, #0
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	3330      	adds	r3, #48	@ 0x30
 800273e:	461a      	mov	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	0a1b      	lsrs	r3, r3, #8
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	4413      	add	r3, r2
 800274c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	211f      	movs	r1, #31
 800275a:	fa01 f303 	lsl.w	r3, r1, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	401a      	ands	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	0e9b      	lsrs	r3, r3, #26
 8002766:	f003 011f 	and.w	r1, r3, #31
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	f003 031f 	and.w	r3, r3, #31
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	431a      	orrs	r2, r3
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800277a:	bf00      	nop
 800277c:	371c      	adds	r7, #28
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002792:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	3314      	adds	r3, #20
 80027bc:	461a      	mov	r2, r3
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	0e5b      	lsrs	r3, r3, #25
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	4413      	add	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	0d1b      	lsrs	r3, r3, #20
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	2107      	movs	r1, #7
 80027da:	fa01 f303 	lsl.w	r3, r1, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	401a      	ands	r2, r3
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	0d1b      	lsrs	r3, r3, #20
 80027e6:	f003 031f 	and.w	r3, r3, #31
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	fa01 f303 	lsl.w	r3, r1, r3
 80027f0:	431a      	orrs	r2, r3
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80027f6:	bf00      	nop
 80027f8:	371c      	adds	r7, #28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281c:	43db      	mvns	r3, r3
 800281e:	401a      	ands	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f003 0318 	and.w	r3, r3, #24
 8002826:	4908      	ldr	r1, [pc, #32]	@ (8002848 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002828:	40d9      	lsrs	r1, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	400b      	ands	r3, r1
 800282e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002832:	431a      	orrs	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800283a:	bf00      	nop
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	0007ffff 	.word	0x0007ffff

0800284c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 031f 	and.w	r3, r3, #31
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002878:	4618      	mov	r0, r3
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002894:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6093      	str	r3, [r2, #8]
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028bc:	d101      	bne.n	80028c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80028e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028e4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002908:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800290c:	d101      	bne.n	8002912 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002930:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002934:	f043 0201 	orr.w	r2, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002958:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800295c:	f043 0202 	orr.w	r2, r3, #2
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <LL_ADC_IsEnabled+0x18>
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <LL_ADC_IsEnabled+0x1a>
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d101      	bne.n	80029ae <LL_ADC_IsDisableOngoing+0x18>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <LL_ADC_IsDisableOngoing+0x1a>
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d101      	bne.n	80029d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029d0:	2301      	movs	r3, #1
 80029d2:	e000      	b.n	80029d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d101      	bne.n	80029fa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029f6:	2301      	movs	r3, #1
 80029f8:	e000      	b.n	80029fc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a08:	b590      	push	{r4, r7, lr}
 8002a0a:	b089      	sub	sp, #36	@ 0x24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e167      	b.n	8002cf2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d109      	bne.n	8002a44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7fe fc3b 	bl	80012ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff2d 	bl	80028a8 <LL_ADC_IsDeepPowerDownEnabled>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d004      	beq.n	8002a5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff ff13 	bl	8002884 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff ff48 	bl	80028f8 <LL_ADC_IsInternalRegulatorEnabled>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d115      	bne.n	8002a9a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff ff2c 	bl	80028d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a78:	4ba0      	ldr	r3, [pc, #640]	@ (8002cfc <HAL_ADC_Init+0x2f4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	099b      	lsrs	r3, r3, #6
 8002a7e:	4aa0      	ldr	r2, [pc, #640]	@ (8002d00 <HAL_ADC_Init+0x2f8>)
 8002a80:	fba2 2303 	umull	r2, r3, r2, r3
 8002a84:	099b      	lsrs	r3, r3, #6
 8002a86:	3301      	adds	r3, #1
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a8c:	e002      	b.n	8002a94 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f9      	bne.n	8002a8e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff ff2a 	bl	80028f8 <LL_ADC_IsInternalRegulatorEnabled>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10d      	bne.n	8002ac6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aae:	f043 0210 	orr.w	r2, r3, #16
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aba:	f043 0201 	orr.w	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff ff76 	bl	80029bc <LL_ADC_REG_IsConversionOngoing>
 8002ad0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f040 8100 	bne.w	8002ce0 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f040 80fc 	bne.w	8002ce0 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aec:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002af0:	f043 0202 	orr.w	r2, r3, #2
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ff37 	bl	8002970 <LL_ADC_IsEnabled>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d111      	bne.n	8002b2c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b08:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002b0c:	f7ff ff30 	bl	8002970 <LL_ADC_IsEnabled>
 8002b10:	4604      	mov	r4, r0
 8002b12:	487c      	ldr	r0, [pc, #496]	@ (8002d04 <HAL_ADC_Init+0x2fc>)
 8002b14:	f7ff ff2c 	bl	8002970 <LL_ADC_IsEnabled>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	4323      	orrs	r3, r4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d105      	bne.n	8002b2c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4619      	mov	r1, r3
 8002b26:	4878      	ldr	r0, [pc, #480]	@ (8002d08 <HAL_ADC_Init+0x300>)
 8002b28:	f7ff fd1c 	bl	8002564 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	7f5b      	ldrb	r3, [r3, #29]
 8002b30:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b36:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002b3c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002b42:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b4a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d106      	bne.n	8002b68 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	045b      	lsls	r3, r3, #17
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d009      	beq.n	8002b84 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b74:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	4b60      	ldr	r3, [pc, #384]	@ (8002d0c <HAL_ADC_Init+0x304>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	69b9      	ldr	r1, [r7, #24]
 8002b94:	430b      	orrs	r3, r1
 8002b96:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff ff15 	bl	80029e2 <LL_ADC_INJ_IsConversionOngoing>
 8002bb8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d16d      	bne.n	8002c9c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d16a      	bne.n	8002c9c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002bca:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002bd2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002be2:	f023 0302 	bic.w	r3, r3, #2
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6812      	ldr	r2, [r2, #0]
 8002bea:	69b9      	ldr	r1, [r7, #24]
 8002bec:	430b      	orrs	r3, r1
 8002bee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d017      	beq.n	8002c28 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002c06:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002c10:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002c14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6911      	ldr	r1, [r2, #16]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	430b      	orrs	r3, r1
 8002c22:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002c26:	e013      	b.n	8002c50 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002c36:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002c48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c4c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d118      	bne.n	8002c8c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002c64:	f023 0304 	bic.w	r3, r3, #4
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c70:	4311      	orrs	r1, r2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002c76:	4311      	orrs	r1, r2
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 0201 	orr.w	r2, r2, #1
 8002c88:	611a      	str	r2, [r3, #16]
 8002c8a:	e007      	b.n	8002c9c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0201 	bic.w	r2, r2, #1
 8002c9a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d10c      	bne.n	8002cbe <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	f023 010f 	bic.w	r1, r3, #15
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	1e5a      	subs	r2, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cbc:	e007      	b.n	8002cce <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 020f 	bic.w	r2, r2, #15
 8002ccc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd2:	f023 0303 	bic.w	r3, r3, #3
 8002cd6:	f043 0201 	orr.w	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002cde:	e007      	b.n	8002cf0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce4:	f043 0210 	orr.w	r2, r3, #16
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cf0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3724      	adds	r7, #36	@ 0x24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd90      	pop	{r4, r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000000 	.word	0x20000000
 8002d00:	053e2d63 	.word	0x053e2d63
 8002d04:	50000100 	.word	0x50000100
 8002d08:	50000300 	.word	0x50000300
 8002d0c:	fff04007 	.word	0xfff04007

08002d10 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08a      	sub	sp, #40	@ 0x28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002d18:	2300      	movs	r3, #0
 8002d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d2c:	4883      	ldr	r0, [pc, #524]	@ (8002f3c <HAL_ADC_IRQHandler+0x22c>)
 8002d2e:	f7ff fd8d 	bl	800284c <LL_ADC_GetMultimode>
 8002d32:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d017      	beq.n	8002d6e <HAL_ADC_IRQHandler+0x5e>
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d012      	beq.n	8002d6e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d105      	bne.n	8002d60 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d58:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f001 fa9d 	bl	80042a0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d004      	beq.n	8002d82 <HAL_ADC_IRQHandler+0x72>
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10a      	bne.n	8002d98 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 8085 	beq.w	8002e98 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d07f      	beq.n	8002e98 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d105      	bne.n	8002db0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff fca7 	bl	8002708 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d064      	beq.n	8002e8a <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a5e      	ldr	r2, [pc, #376]	@ (8002f40 <HAL_ADC_IRQHandler+0x230>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d002      	beq.n	8002dd0 <HAL_ADC_IRQHandler+0xc0>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	e001      	b.n	8002dd4 <HAL_ADC_IRQHandler+0xc4>
 8002dd0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6812      	ldr	r2, [r2, #0]
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d008      	beq.n	8002dee <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2b05      	cmp	r3, #5
 8002de6:	d002      	beq.n	8002dee <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	2b09      	cmp	r3, #9
 8002dec:	d104      	bne.n	8002df8 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	623b      	str	r3, [r7, #32]
 8002df6:	e00d      	b.n	8002e14 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a50      	ldr	r2, [pc, #320]	@ (8002f40 <HAL_ADC_IRQHandler+0x230>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d002      	beq.n	8002e08 <HAL_ADC_IRQHandler+0xf8>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	e001      	b.n	8002e0c <HAL_ADC_IRQHandler+0xfc>
 8002e08:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e0c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d135      	bne.n	8002e8a <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d12e      	bne.n	8002e8a <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff fdc3 	bl	80029bc <LL_ADC_REG_IsConversionOngoing>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d11a      	bne.n	8002e72 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 020c 	bic.w	r2, r2, #12
 8002e4a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d112      	bne.n	8002e8a <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e68:	f043 0201 	orr.w	r2, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e70:	e00b      	b.n	8002e8a <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e76:	f043 0210 	orr.w	r2, r3, #16
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e82:	f043 0201 	orr.w	r2, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f95a 	bl	8003144 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	220c      	movs	r2, #12
 8002e96:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d004      	beq.n	8002eac <HAL_ADC_IRQHandler+0x19c>
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10b      	bne.n	8002ec4 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 809e 	beq.w	8002ff4 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 8098 	beq.w	8002ff4 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d105      	bne.n	8002edc <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff fc50 	bl	8002786 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002ee6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fc0b 	bl	8002708 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ef2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a11      	ldr	r2, [pc, #68]	@ (8002f40 <HAL_ADC_IRQHandler+0x230>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d002      	beq.n	8002f04 <HAL_ADC_IRQHandler+0x1f4>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	e001      	b.n	8002f08 <HAL_ADC_IRQHandler+0x1f8>
 8002f04:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6812      	ldr	r2, [r2, #0]
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d008      	beq.n	8002f22 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d005      	beq.n	8002f22 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2b06      	cmp	r3, #6
 8002f1a:	d002      	beq.n	8002f22 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2b07      	cmp	r3, #7
 8002f20:	d104      	bne.n	8002f2c <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	623b      	str	r3, [r7, #32]
 8002f2a:	e011      	b.n	8002f50 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a03      	ldr	r2, [pc, #12]	@ (8002f40 <HAL_ADC_IRQHandler+0x230>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d006      	beq.n	8002f44 <HAL_ADC_IRQHandler+0x234>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	e005      	b.n	8002f48 <HAL_ADC_IRQHandler+0x238>
 8002f3c:	50000300 	.word	0x50000300
 8002f40:	50000100 	.word	0x50000100
 8002f44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f48:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d047      	beq.n	8002fe6 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d007      	beq.n	8002f70 <HAL_ADC_IRQHandler+0x260>
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d03f      	beq.n	8002fe6 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d13a      	bne.n	8002fe6 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f7a:	2b40      	cmp	r3, #64	@ 0x40
 8002f7c:	d133      	bne.n	8002fe6 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d12e      	bne.n	8002fe6 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fd28 	bl	80029e2 <LL_ADC_INJ_IsConversionOngoing>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d11a      	bne.n	8002fce <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002fa6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d112      	bne.n	8002fe6 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc4:	f043 0201 	orr.w	r2, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fcc:	e00b      	b.n	8002fe6 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd2:	f043 0210 	orr.w	r2, r3, #16
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fde:	f043 0201 	orr.w	r2, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f009 f856 	bl	800c098 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2260      	movs	r2, #96	@ 0x60
 8002ff2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d011      	beq.n	8003022 <HAL_ADC_IRQHandler+0x312>
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00c      	beq.n	8003022 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800300c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f89f 	bl	8003158 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2280      	movs	r2, #128	@ 0x80
 8003020:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003028:	2b00      	cmp	r3, #0
 800302a:	d012      	beq.n	8003052 <HAL_ADC_IRQHandler+0x342>
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00d      	beq.n	8003052 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f001 f918 	bl	8004278 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003050:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003058:	2b00      	cmp	r3, #0
 800305a:	d012      	beq.n	8003082 <HAL_ADC_IRQHandler+0x372>
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00d      	beq.n	8003082 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800306a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f001 f90a 	bl	800428c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003080:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b00      	cmp	r3, #0
 800308a:	d036      	beq.n	80030fa <HAL_ADC_IRQHandler+0x3ea>
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	2b00      	cmp	r3, #0
 8003094:	d031      	beq.n	80030fa <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800309a:	2b00      	cmp	r3, #0
 800309c:	d102      	bne.n	80030a4 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800309e:	2301      	movs	r3, #1
 80030a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030a2:	e014      	b.n	80030ce <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d008      	beq.n	80030bc <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80030aa:	4825      	ldr	r0, [pc, #148]	@ (8003140 <HAL_ADC_IRQHandler+0x430>)
 80030ac:	f7ff fbdc 	bl	8002868 <LL_ADC_GetMultiDMATransfer>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00b      	beq.n	80030ce <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80030b6:	2301      	movs	r3, #1
 80030b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ba:	e008      	b.n	80030ce <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80030ca:	2301      	movs	r3, #1
 80030cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d10e      	bne.n	80030f2 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030e4:	f043 0202 	orr.w	r2, r3, #2
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f83d 	bl	800316c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2210      	movs	r2, #16
 80030f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003100:	2b00      	cmp	r3, #0
 8003102:	d018      	beq.n	8003136 <HAL_ADC_IRQHandler+0x426>
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800310a:	2b00      	cmp	r3, #0
 800310c:	d013      	beq.n	8003136 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003112:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800311e:	f043 0208 	orr.w	r2, r3, #8
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800312e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f001 f897 	bl	8004264 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003136:	bf00      	nop
 8003138:	3728      	adds	r7, #40	@ 0x28
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	50000300 	.word	0x50000300

08003144 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b0b6      	sub	sp, #216	@ 0xd8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800318a:	2300      	movs	r3, #0
 800318c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003190:	2300      	movs	r3, #0
 8003192:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x22>
 800319e:	2302      	movs	r3, #2
 80031a0:	e3c8      	b.n	8003934 <HAL_ADC_ConfigChannel+0x7b4>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff fc04 	bl	80029bc <LL_ADC_REG_IsConversionOngoing>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f040 83ad 	bne.w	8003916 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6818      	ldr	r0, [r3, #0]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	6859      	ldr	r1, [r3, #4]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	461a      	mov	r2, r3
 80031ca:	f7ff fab0 	bl	800272e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff fbf2 	bl	80029bc <LL_ADC_REG_IsConversionOngoing>
 80031d8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff fbfe 	bl	80029e2 <LL_ADC_INJ_IsConversionOngoing>
 80031e6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f040 81d9 	bne.w	80035a6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f040 81d4 	bne.w	80035a6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003206:	d10f      	bne.n	8003228 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2200      	movs	r2, #0
 8003212:	4619      	mov	r1, r3
 8003214:	f7ff faca 	bl	80027ac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff fa5e 	bl	80026e2 <LL_ADC_SetSamplingTimeCommonConfig>
 8003226:	e00e      	b.n	8003246 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6818      	ldr	r0, [r3, #0]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	6819      	ldr	r1, [r3, #0]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	461a      	mov	r2, r3
 8003236:	f7ff fab9 	bl	80027ac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2100      	movs	r1, #0
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff fa4e 	bl	80026e2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	695a      	ldr	r2, [r3, #20]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	08db      	lsrs	r3, r3, #3
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	2b04      	cmp	r3, #4
 8003266:	d022      	beq.n	80032ae <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6818      	ldr	r0, [r3, #0]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	6919      	ldr	r1, [r3, #16]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003278:	f7ff f9a8 	bl	80025cc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	6919      	ldr	r1, [r3, #16]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	461a      	mov	r2, r3
 800328a:	f7ff f9f4 	bl	8002676 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800329a:	2b01      	cmp	r3, #1
 800329c:	d102      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x124>
 800329e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032a2:	e000      	b.n	80032a6 <HAL_ADC_ConfigChannel+0x126>
 80032a4:	2300      	movs	r3, #0
 80032a6:	461a      	mov	r2, r3
 80032a8:	f7ff fa00 	bl	80026ac <LL_ADC_SetOffsetSaturation>
 80032ac:	e17b      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2100      	movs	r1, #0
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff f9ad 	bl	8002614 <LL_ADC_GetOffsetChannel>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10a      	bne.n	80032da <HAL_ADC_ConfigChannel+0x15a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2100      	movs	r1, #0
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff f9a2 	bl	8002614 <LL_ADC_GetOffsetChannel>
 80032d0:	4603      	mov	r3, r0
 80032d2:	0e9b      	lsrs	r3, r3, #26
 80032d4:	f003 021f 	and.w	r2, r3, #31
 80032d8:	e01e      	b.n	8003318 <HAL_ADC_ConfigChannel+0x198>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2100      	movs	r1, #0
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff f997 	bl	8002614 <LL_ADC_GetOffsetChannel>
 80032e6:	4603      	mov	r3, r0
 80032e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80032f0:	fa93 f3a3 	rbit	r3, r3
 80032f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80032fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003300:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003308:	2320      	movs	r3, #32
 800330a:	e004      	b.n	8003316 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800330c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003310:	fab3 f383 	clz	r3, r3
 8003314:	b2db      	uxtb	r3, r3
 8003316:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003320:	2b00      	cmp	r3, #0
 8003322:	d105      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x1b0>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	0e9b      	lsrs	r3, r3, #26
 800332a:	f003 031f 	and.w	r3, r3, #31
 800332e:	e018      	b.n	8003362 <HAL_ADC_ConfigChannel+0x1e2>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003338:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800333c:	fa93 f3a3 	rbit	r3, r3
 8003340:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003344:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003348:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800334c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003354:	2320      	movs	r3, #32
 8003356:	e004      	b.n	8003362 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003358:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800335c:	fab3 f383 	clz	r3, r3
 8003360:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003362:	429a      	cmp	r2, r3
 8003364:	d106      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2200      	movs	r2, #0
 800336c:	2100      	movs	r1, #0
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff f966 	bl	8002640 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2101      	movs	r1, #1
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff f94a 	bl	8002614 <LL_ADC_GetOffsetChannel>
 8003380:	4603      	mov	r3, r0
 8003382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10a      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x220>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2101      	movs	r1, #1
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff f93f 	bl	8002614 <LL_ADC_GetOffsetChannel>
 8003396:	4603      	mov	r3, r0
 8003398:	0e9b      	lsrs	r3, r3, #26
 800339a:	f003 021f 	and.w	r2, r3, #31
 800339e:	e01e      	b.n	80033de <HAL_ADC_ConfigChannel+0x25e>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2101      	movs	r1, #1
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff f934 	bl	8002614 <LL_ADC_GetOffsetChannel>
 80033ac:	4603      	mov	r3, r0
 80033ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80033be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80033c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80033ce:	2320      	movs	r3, #32
 80033d0:	e004      	b.n	80033dc <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80033d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80033d6:	fab3 f383 	clz	r3, r3
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d105      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x276>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	0e9b      	lsrs	r3, r3, #26
 80033f0:	f003 031f 	and.w	r3, r3, #31
 80033f4:	e018      	b.n	8003428 <HAL_ADC_ConfigChannel+0x2a8>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003402:	fa93 f3a3 	rbit	r3, r3
 8003406:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800340a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800340e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003412:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800341a:	2320      	movs	r3, #32
 800341c:	e004      	b.n	8003428 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800341e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003422:	fab3 f383 	clz	r3, r3
 8003426:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003428:	429a      	cmp	r2, r3
 800342a:	d106      	bne.n	800343a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2200      	movs	r2, #0
 8003432:	2101      	movs	r1, #1
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff f903 	bl	8002640 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2102      	movs	r1, #2
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff f8e7 	bl	8002614 <LL_ADC_GetOffsetChannel>
 8003446:	4603      	mov	r3, r0
 8003448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10a      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x2e6>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2102      	movs	r1, #2
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff f8dc 	bl	8002614 <LL_ADC_GetOffsetChannel>
 800345c:	4603      	mov	r3, r0
 800345e:	0e9b      	lsrs	r3, r3, #26
 8003460:	f003 021f 	and.w	r2, r3, #31
 8003464:	e01e      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x324>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2102      	movs	r1, #2
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff f8d1 	bl	8002614 <LL_ADC_GetOffsetChannel>
 8003472:	4603      	mov	r3, r0
 8003474:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003478:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800347c:	fa93 f3a3 	rbit	r3, r3
 8003480:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003484:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003488:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800348c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003494:	2320      	movs	r3, #32
 8003496:	e004      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003498:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800349c:	fab3 f383 	clz	r3, r3
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d105      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x33c>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	0e9b      	lsrs	r3, r3, #26
 80034b6:	f003 031f 	and.w	r3, r3, #31
 80034ba:	e016      	b.n	80034ea <HAL_ADC_ConfigChannel+0x36a>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034c8:	fa93 f3a3 	rbit	r3, r3
 80034cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80034ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80034d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80034dc:	2320      	movs	r3, #32
 80034de:	e004      	b.n	80034ea <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80034e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034e4:	fab3 f383 	clz	r3, r3
 80034e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d106      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2200      	movs	r2, #0
 80034f4:	2102      	movs	r1, #2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff f8a2 	bl	8002640 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2103      	movs	r1, #3
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff f886 	bl	8002614 <LL_ADC_GetOffsetChannel>
 8003508:	4603      	mov	r3, r0
 800350a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10a      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x3a8>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2103      	movs	r1, #3
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff f87b 	bl	8002614 <LL_ADC_GetOffsetChannel>
 800351e:	4603      	mov	r3, r0
 8003520:	0e9b      	lsrs	r3, r3, #26
 8003522:	f003 021f 	and.w	r2, r3, #31
 8003526:	e017      	b.n	8003558 <HAL_ADC_ConfigChannel+0x3d8>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2103      	movs	r1, #3
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff f870 	bl	8002614 <LL_ADC_GetOffsetChannel>
 8003534:	4603      	mov	r3, r0
 8003536:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003538:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800353a:	fa93 f3a3 	rbit	r3, r3
 800353e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003540:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003542:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003544:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800354a:	2320      	movs	r3, #32
 800354c:	e003      	b.n	8003556 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800354e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003550:	fab3 f383 	clz	r3, r3
 8003554:	b2db      	uxtb	r3, r3
 8003556:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003560:	2b00      	cmp	r3, #0
 8003562:	d105      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x3f0>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	0e9b      	lsrs	r3, r3, #26
 800356a:	f003 031f 	and.w	r3, r3, #31
 800356e:	e011      	b.n	8003594 <HAL_ADC_ConfigChannel+0x414>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003576:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003578:	fa93 f3a3 	rbit	r3, r3
 800357c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800357e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003580:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003582:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003588:	2320      	movs	r3, #32
 800358a:	e003      	b.n	8003594 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800358c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800358e:	fab3 f383 	clz	r3, r3
 8003592:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003594:	429a      	cmp	r2, r3
 8003596:	d106      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2200      	movs	r2, #0
 800359e:	2103      	movs	r1, #3
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff f84d 	bl	8002640 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff f9e0 	bl	8002970 <LL_ADC_IsEnabled>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f040 8140 	bne.w	8003838 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6818      	ldr	r0, [r3, #0]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	6819      	ldr	r1, [r3, #0]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	461a      	mov	r2, r3
 80035c6:	f7ff f91d 	bl	8002804 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	4a8f      	ldr	r2, [pc, #572]	@ (800380c <HAL_ADC_ConfigChannel+0x68c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	f040 8131 	bne.w	8003838 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10b      	bne.n	80035fe <HAL_ADC_ConfigChannel+0x47e>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	0e9b      	lsrs	r3, r3, #26
 80035ec:	3301      	adds	r3, #1
 80035ee:	f003 031f 	and.w	r3, r3, #31
 80035f2:	2b09      	cmp	r3, #9
 80035f4:	bf94      	ite	ls
 80035f6:	2301      	movls	r3, #1
 80035f8:	2300      	movhi	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	e019      	b.n	8003632 <HAL_ADC_ConfigChannel+0x4b2>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003604:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003606:	fa93 f3a3 	rbit	r3, r3
 800360a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800360c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800360e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003610:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003616:	2320      	movs	r3, #32
 8003618:	e003      	b.n	8003622 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800361a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800361c:	fab3 f383 	clz	r3, r3
 8003620:	b2db      	uxtb	r3, r3
 8003622:	3301      	adds	r3, #1
 8003624:	f003 031f 	and.w	r3, r3, #31
 8003628:	2b09      	cmp	r3, #9
 800362a:	bf94      	ite	ls
 800362c:	2301      	movls	r3, #1
 800362e:	2300      	movhi	r3, #0
 8003630:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003632:	2b00      	cmp	r3, #0
 8003634:	d079      	beq.n	800372a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800363e:	2b00      	cmp	r3, #0
 8003640:	d107      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x4d2>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	0e9b      	lsrs	r3, r3, #26
 8003648:	3301      	adds	r3, #1
 800364a:	069b      	lsls	r3, r3, #26
 800364c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003650:	e015      	b.n	800367e <HAL_ADC_ConfigChannel+0x4fe>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003658:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800365a:	fa93 f3a3 	rbit	r3, r3
 800365e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003660:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003662:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800366a:	2320      	movs	r3, #32
 800366c:	e003      	b.n	8003676 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800366e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003670:	fab3 f383 	clz	r3, r3
 8003674:	b2db      	uxtb	r3, r3
 8003676:	3301      	adds	r3, #1
 8003678:	069b      	lsls	r3, r3, #26
 800367a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003686:	2b00      	cmp	r3, #0
 8003688:	d109      	bne.n	800369e <HAL_ADC_ConfigChannel+0x51e>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	0e9b      	lsrs	r3, r3, #26
 8003690:	3301      	adds	r3, #1
 8003692:	f003 031f 	and.w	r3, r3, #31
 8003696:	2101      	movs	r1, #1
 8003698:	fa01 f303 	lsl.w	r3, r1, r3
 800369c:	e017      	b.n	80036ce <HAL_ADC_ConfigChannel+0x54e>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036a6:	fa93 f3a3 	rbit	r3, r3
 80036aa:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80036ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80036b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80036b6:	2320      	movs	r3, #32
 80036b8:	e003      	b.n	80036c2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80036ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036bc:	fab3 f383 	clz	r3, r3
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	3301      	adds	r3, #1
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	2101      	movs	r1, #1
 80036ca:	fa01 f303 	lsl.w	r3, r1, r3
 80036ce:	ea42 0103 	orr.w	r1, r2, r3
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10a      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x574>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	0e9b      	lsrs	r3, r3, #26
 80036e4:	3301      	adds	r3, #1
 80036e6:	f003 021f 	and.w	r2, r3, #31
 80036ea:	4613      	mov	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	4413      	add	r3, r2
 80036f0:	051b      	lsls	r3, r3, #20
 80036f2:	e018      	b.n	8003726 <HAL_ADC_ConfigChannel+0x5a6>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036fc:	fa93 f3a3 	rbit	r3, r3
 8003700:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003704:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800370c:	2320      	movs	r3, #32
 800370e:	e003      	b.n	8003718 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003712:	fab3 f383 	clz	r3, r3
 8003716:	b2db      	uxtb	r3, r3
 8003718:	3301      	adds	r3, #1
 800371a:	f003 021f 	and.w	r2, r3, #31
 800371e:	4613      	mov	r3, r2
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	4413      	add	r3, r2
 8003724:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003726:	430b      	orrs	r3, r1
 8003728:	e081      	b.n	800382e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003732:	2b00      	cmp	r3, #0
 8003734:	d107      	bne.n	8003746 <HAL_ADC_ConfigChannel+0x5c6>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	0e9b      	lsrs	r3, r3, #26
 800373c:	3301      	adds	r3, #1
 800373e:	069b      	lsls	r3, r3, #26
 8003740:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003744:	e015      	b.n	8003772 <HAL_ADC_ConfigChannel+0x5f2>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800374e:	fa93 f3a3 	rbit	r3, r3
 8003752:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003756:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800375e:	2320      	movs	r3, #32
 8003760:	e003      	b.n	800376a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003764:	fab3 f383 	clz	r3, r3
 8003768:	b2db      	uxtb	r3, r3
 800376a:	3301      	adds	r3, #1
 800376c:	069b      	lsls	r3, r3, #26
 800376e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800377a:	2b00      	cmp	r3, #0
 800377c:	d109      	bne.n	8003792 <HAL_ADC_ConfigChannel+0x612>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	0e9b      	lsrs	r3, r3, #26
 8003784:	3301      	adds	r3, #1
 8003786:	f003 031f 	and.w	r3, r3, #31
 800378a:	2101      	movs	r1, #1
 800378c:	fa01 f303 	lsl.w	r3, r1, r3
 8003790:	e017      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x642>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	fa93 f3a3 	rbit	r3, r3
 800379e:	61fb      	str	r3, [r7, #28]
  return result;
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80037a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80037aa:	2320      	movs	r3, #32
 80037ac:	e003      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80037ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b0:	fab3 f383 	clz	r3, r3
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	3301      	adds	r3, #1
 80037b8:	f003 031f 	and.w	r3, r3, #31
 80037bc:	2101      	movs	r1, #1
 80037be:	fa01 f303 	lsl.w	r3, r1, r3
 80037c2:	ea42 0103 	orr.w	r1, r2, r3
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10d      	bne.n	80037ee <HAL_ADC_ConfigChannel+0x66e>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	0e9b      	lsrs	r3, r3, #26
 80037d8:	3301      	adds	r3, #1
 80037da:	f003 021f 	and.w	r2, r3, #31
 80037de:	4613      	mov	r3, r2
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	4413      	add	r3, r2
 80037e4:	3b1e      	subs	r3, #30
 80037e6:	051b      	lsls	r3, r3, #20
 80037e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80037ec:	e01e      	b.n	800382c <HAL_ADC_ConfigChannel+0x6ac>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	fa93 f3a3 	rbit	r3, r3
 80037fa:	613b      	str	r3, [r7, #16]
  return result;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d104      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003806:	2320      	movs	r3, #32
 8003808:	e006      	b.n	8003818 <HAL_ADC_ConfigChannel+0x698>
 800380a:	bf00      	nop
 800380c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	fab3 f383 	clz	r3, r3
 8003816:	b2db      	uxtb	r3, r3
 8003818:	3301      	adds	r3, #1
 800381a:	f003 021f 	and.w	r2, r3, #31
 800381e:	4613      	mov	r3, r2
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	4413      	add	r3, r2
 8003824:	3b1e      	subs	r3, #30
 8003826:	051b      	lsls	r3, r3, #20
 8003828:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800382c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003832:	4619      	mov	r1, r3
 8003834:	f7fe ffba 	bl	80027ac <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	4b3f      	ldr	r3, [pc, #252]	@ (800393c <HAL_ADC_ConfigChannel+0x7bc>)
 800383e:	4013      	ands	r3, r2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d071      	beq.n	8003928 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003844:	483e      	ldr	r0, [pc, #248]	@ (8003940 <HAL_ADC_ConfigChannel+0x7c0>)
 8003846:	f7fe feb3 	bl	80025b0 <LL_ADC_GetCommonPathInternalCh>
 800384a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a3c      	ldr	r2, [pc, #240]	@ (8003944 <HAL_ADC_ConfigChannel+0x7c4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d004      	beq.n	8003862 <HAL_ADC_ConfigChannel+0x6e2>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a3a      	ldr	r2, [pc, #232]	@ (8003948 <HAL_ADC_ConfigChannel+0x7c8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d127      	bne.n	80038b2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003862:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003866:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d121      	bne.n	80038b2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003876:	d157      	bne.n	8003928 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003878:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800387c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003880:	4619      	mov	r1, r3
 8003882:	482f      	ldr	r0, [pc, #188]	@ (8003940 <HAL_ADC_ConfigChannel+0x7c0>)
 8003884:	f7fe fe81 	bl	800258a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003888:	4b30      	ldr	r3, [pc, #192]	@ (800394c <HAL_ADC_ConfigChannel+0x7cc>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	099b      	lsrs	r3, r3, #6
 800388e:	4a30      	ldr	r2, [pc, #192]	@ (8003950 <HAL_ADC_ConfigChannel+0x7d0>)
 8003890:	fba2 2303 	umull	r2, r3, r2, r3
 8003894:	099b      	lsrs	r3, r3, #6
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	4613      	mov	r3, r2
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	4413      	add	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80038a2:	e002      	b.n	80038aa <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1f9      	bne.n	80038a4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038b0:	e03a      	b.n	8003928 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a27      	ldr	r2, [pc, #156]	@ (8003954 <HAL_ADC_ConfigChannel+0x7d4>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d113      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10d      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a22      	ldr	r2, [pc, #136]	@ (8003958 <HAL_ADC_ConfigChannel+0x7d8>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d02a      	beq.n	8003928 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038da:	4619      	mov	r1, r3
 80038dc:	4818      	ldr	r0, [pc, #96]	@ (8003940 <HAL_ADC_ConfigChannel+0x7c0>)
 80038de:	f7fe fe54 	bl	800258a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038e2:	e021      	b.n	8003928 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a1c      	ldr	r2, [pc, #112]	@ (800395c <HAL_ADC_ConfigChannel+0x7dc>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d11c      	bne.n	8003928 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d116      	bne.n	8003928 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a16      	ldr	r2, [pc, #88]	@ (8003958 <HAL_ADC_ConfigChannel+0x7d8>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d011      	beq.n	8003928 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003904:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003908:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800390c:	4619      	mov	r1, r3
 800390e:	480c      	ldr	r0, [pc, #48]	@ (8003940 <HAL_ADC_ConfigChannel+0x7c0>)
 8003910:	f7fe fe3b 	bl	800258a <LL_ADC_SetCommonPathInternalCh>
 8003914:	e008      	b.n	8003928 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391a:	f043 0220 	orr.w	r2, r3, #32
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003930:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003934:	4618      	mov	r0, r3
 8003936:	37d8      	adds	r7, #216	@ 0xd8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	80080000 	.word	0x80080000
 8003940:	50000300 	.word	0x50000300
 8003944:	c3210000 	.word	0xc3210000
 8003948:	90c00010 	.word	0x90c00010
 800394c:	20000000 	.word	0x20000000
 8003950:	053e2d63 	.word	0x053e2d63
 8003954:	c7520000 	.word	0xc7520000
 8003958:	50000100 	.word	0x50000100
 800395c:	cb840000 	.word	0xcb840000

08003960 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003968:	2300      	movs	r3, #0
 800396a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f7fe fffd 	bl	8002970 <LL_ADC_IsEnabled>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d169      	bne.n	8003a50 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	4b36      	ldr	r3, [pc, #216]	@ (8003a5c <ADC_Enable+0xfc>)
 8003984:	4013      	ands	r3, r2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00d      	beq.n	80039a6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800398e:	f043 0210 	orr.w	r2, r3, #16
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800399a:	f043 0201 	orr.w	r2, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e055      	b.n	8003a52 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fe ffb8 	bl	8002920 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80039b0:	482b      	ldr	r0, [pc, #172]	@ (8003a60 <ADC_Enable+0x100>)
 80039b2:	f7fe fdfd 	bl	80025b0 <LL_ADC_GetCommonPathInternalCh>
 80039b6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80039b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d013      	beq.n	80039e8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039c0:	4b28      	ldr	r3, [pc, #160]	@ (8003a64 <ADC_Enable+0x104>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	099b      	lsrs	r3, r3, #6
 80039c6:	4a28      	ldr	r2, [pc, #160]	@ (8003a68 <ADC_Enable+0x108>)
 80039c8:	fba2 2303 	umull	r2, r3, r2, r3
 80039cc:	099b      	lsrs	r3, r3, #6
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	4613      	mov	r3, r2
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	4413      	add	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80039da:	e002      	b.n	80039e2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	3b01      	subs	r3, #1
 80039e0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1f9      	bne.n	80039dc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80039e8:	f7fe fd8e 	bl	8002508 <HAL_GetTick>
 80039ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039ee:	e028      	b.n	8003a42 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fe ffbb 	bl	8002970 <LL_ADC_IsEnabled>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d104      	bne.n	8003a0a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fe ff8b 	bl	8002920 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a0a:	f7fe fd7d 	bl	8002508 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d914      	bls.n	8003a42 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d00d      	beq.n	8003a42 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a2a:	f043 0210 	orr.w	r2, r3, #16
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a36:	f043 0201 	orr.w	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e007      	b.n	8003a52 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d1cf      	bne.n	80039f0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	8000003f 	.word	0x8000003f
 8003a60:	50000300 	.word	0x50000300
 8003a64:	20000000 	.word	0x20000000
 8003a68:	053e2d63 	.word	0x053e2d63

08003a6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fe ff8c 	bl	8002996 <LL_ADC_IsDisableOngoing>
 8003a7e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fe ff73 	bl	8002970 <LL_ADC_IsEnabled>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d047      	beq.n	8003b20 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d144      	bne.n	8003b20 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 030d 	and.w	r3, r3, #13
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d10c      	bne.n	8003abe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fe ff4d 	bl	8002948 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2203      	movs	r2, #3
 8003ab4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ab6:	f7fe fd27 	bl	8002508 <HAL_GetTick>
 8003aba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003abc:	e029      	b.n	8003b12 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac2:	f043 0210 	orr.w	r2, r3, #16
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ace:	f043 0201 	orr.w	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e023      	b.n	8003b22 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ada:	f7fe fd15 	bl	8002508 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d914      	bls.n	8003b12 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00d      	beq.n	8003b12 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afa:	f043 0210 	orr.w	r2, r3, #16
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b06:	f043 0201 	orr.w	r2, r3, #1
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e007      	b.n	8003b22 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1dc      	bne.n	8003ada <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <LL_ADC_SetCommonPathInternalCh>:
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	609a      	str	r2, [r3, #8]
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <LL_ADC_GetCommonPathInternalCh>:
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <LL_ADC_SetOffset>:
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	3360      	adds	r3, #96	@ 0x60
 8003b7e:	461a      	mov	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	4b08      	ldr	r3, [pc, #32]	@ (8003bb0 <LL_ADC_SetOffset+0x44>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	601a      	str	r2, [r3, #0]
}
 8003ba4:	bf00      	nop
 8003ba6:	371c      	adds	r7, #28
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	03fff000 	.word	0x03fff000

08003bb4 <LL_ADC_GetOffsetChannel>:
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3360      	adds	r3, #96	@ 0x60
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <LL_ADC_SetOffsetState>:
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	3360      	adds	r3, #96	@ 0x60
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	431a      	orrs	r2, r3
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	601a      	str	r2, [r3, #0]
}
 8003c0a:	bf00      	nop
 8003c0c:	371c      	adds	r7, #28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <LL_ADC_SetOffsetSign>:
{
 8003c16:	b480      	push	{r7}
 8003c18:	b087      	sub	sp, #28
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	60f8      	str	r0, [r7, #12]
 8003c1e:	60b9      	str	r1, [r7, #8]
 8003c20:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	3360      	adds	r3, #96	@ 0x60
 8003c26:	461a      	mov	r2, r3
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	601a      	str	r2, [r3, #0]
}
 8003c40:	bf00      	nop
 8003c42:	371c      	adds	r7, #28
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <LL_ADC_SetOffsetSaturation>:
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	3360      	adds	r3, #96	@ 0x60
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	431a      	orrs	r2, r3
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	601a      	str	r2, [r3, #0]
}
 8003c76:	bf00      	nop
 8003c78:	371c      	adds	r7, #28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	615a      	str	r2, [r3, #20]
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <LL_ADC_INJ_GetTrigAuto>:
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <LL_ADC_SetChannelSamplingTime>:
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	3314      	adds	r3, #20
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	0e5b      	lsrs	r3, r3, #25
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	4413      	add	r3, r2
 8003ce2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	0d1b      	lsrs	r3, r3, #20
 8003cec:	f003 031f 	and.w	r3, r3, #31
 8003cf0:	2107      	movs	r1, #7
 8003cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	401a      	ands	r2, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	0d1b      	lsrs	r3, r3, #20
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	fa01 f303 	lsl.w	r3, r1, r3
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	601a      	str	r2, [r3, #0]
}
 8003d0e:	bf00      	nop
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
	...

08003d1c <LL_ADC_SetChannelSingleDiff>:
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d34:	43db      	mvns	r3, r3
 8003d36:	401a      	ands	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f003 0318 	and.w	r3, r3, #24
 8003d3e:	4908      	ldr	r1, [pc, #32]	@ (8003d60 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003d40:	40d9      	lsrs	r1, r3
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	400b      	ands	r3, r1
 8003d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8003d52:	bf00      	nop
 8003d54:	3714      	adds	r7, #20
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	0007ffff 	.word	0x0007ffff

08003d64 <LL_ADC_GetMultimode>:
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 031f 	and.w	r3, r3, #31
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <LL_ADC_IsEnabled>:
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d101      	bne.n	8003d98 <LL_ADC_IsEnabled+0x18>
 8003d94:	2301      	movs	r3, #1
 8003d96:	e000      	b.n	8003d9a <LL_ADC_IsEnabled+0x1a>
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <LL_ADC_StartCalibration>:
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003db8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	609a      	str	r2, [r3, #8]
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <LL_ADC_IsCalibrationOnGoing>:
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003de8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003dec:	d101      	bne.n	8003df2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <LL_ADC_REG_IsConversionOngoing>:
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d101      	bne.n	8003e18 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <LL_ADC_INJ_StartConversion>:
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e36:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e3a:	f043 0208 	orr.w	r2, r3, #8
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	609a      	str	r2, [r3, #8]
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <LL_ADC_INJ_IsConversionOngoing>:
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b08      	cmp	r3, #8
 8003e60:	d101      	bne.n	8003e66 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_ADCEx_Calibration_Start+0x1c>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e04d      	b.n	8003f2c <HAL_ADCEx_Calibration_Start+0xb8>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff fde7 	bl	8003a6c <ADC_Disable>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d136      	bne.n	8003f16 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eac:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003eb0:	f023 0302 	bic.w	r3, r3, #2
 8003eb4:	f043 0202 	orr.w	r2, r3, #2
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6839      	ldr	r1, [r7, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff ff6f 	bl	8003da6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ec8:	e014      	b.n	8003ef4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	4a18      	ldr	r2, [pc, #96]	@ (8003f34 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d90d      	bls.n	8003ef4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003edc:	f023 0312 	bic.w	r3, r3, #18
 8003ee0:	f043 0210 	orr.w	r2, r3, #16
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e01b      	b.n	8003f2c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff ff6d 	bl	8003dd8 <LL_ADC_IsCalibrationOnGoing>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e2      	bne.n	8003eca <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f08:	f023 0303 	bic.w	r3, r3, #3
 8003f0c:	f043 0201 	orr.w	r2, r3, #1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f14:	e005      	b.n	8003f22 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f1a:	f043 0210 	orr.w	r2, r3, #16
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	0004de01 	.word	0x0004de01

08003f38 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f40:	4853      	ldr	r0, [pc, #332]	@ (8004090 <HAL_ADCEx_InjectedStart+0x158>)
 8003f42:	f7ff ff0f 	bl	8003d64 <LL_ADC_GetMultimode>
 8003f46:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff ff7e 	bl	8003e4e <LL_ADC_INJ_IsConversionOngoing>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 8003f58:	2302      	movs	r3, #2
 8003f5a:	e094      	b.n	8004086 <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f66:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f6e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10a      	bne.n	8003f8c <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d107      	bne.n	8003f8c <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f80:	f043 0220 	orr.w	r2, r3, #32
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e07c      	b.n	8004086 <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_ADCEx_InjectedStart+0x62>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e075      	b.n	8004086 <HAL_ADCEx_InjectedStart+0x14e>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff fcdc 	bl	8003960 <ADC_Enable>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d164      	bne.n	800407c <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d006      	beq.n	8003fcc <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fc2:	f023 0208 	bic.w	r2, r3, #8
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	661a      	str	r2, [r3, #96]	@ 0x60
 8003fca:	e002      	b.n	8003fd2 <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003fda:	f023 0301 	bic.w	r3, r3, #1
 8003fde:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a2a      	ldr	r2, [pc, #168]	@ (8004094 <HAL_ADCEx_InjectedStart+0x15c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d002      	beq.n	8003ff6 <HAL_ADCEx_InjectedStart+0xbe>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	e001      	b.n	8003ffa <HAL_ADCEx_InjectedStart+0xc2>
 8003ff6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6812      	ldr	r2, [r2, #0]
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d002      	beq.n	8004008 <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d105      	bne.n	8004014 <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800400c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2260      	movs	r2, #96	@ 0x60
 800401a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a1a      	ldr	r2, [pc, #104]	@ (8004094 <HAL_ADCEx_InjectedStart+0x15c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d002      	beq.n	8004034 <HAL_ADCEx_InjectedStart+0xfc>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	e001      	b.n	8004038 <HAL_ADCEx_InjectedStart+0x100>
 8004034:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	4293      	cmp	r3, r2
 800403e:	d008      	beq.n	8004052 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d005      	beq.n	8004052 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2b06      	cmp	r3, #6
 800404a:	d002      	beq.n	8004052 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	2b07      	cmp	r3, #7
 8004050:	d10d      	bne.n	800406e <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff fe26 	bl	8003ca8 <LL_ADC_INJ_GetTrigAuto>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d110      	bne.n	8004084 <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff fedd 	bl	8003e26 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800406c:	e00a      	b.n	8004084 <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004072:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	65da      	str	r2, [r3, #92]	@ 0x5c
 800407a:	e003      	b.n	8004084 <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8004084:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004086:	4618      	mov	r0, r3
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	50000300 	.word	0x50000300
 8004094:	50000100 	.word	0x50000100

08004098 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040a0:	486e      	ldr	r0, [pc, #440]	@ (800425c <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 80040a2:	f7ff fe5f 	bl	8003d64 <LL_ADC_GetMultimode>
 80040a6:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff fece 	bl	8003e4e <LL_ADC_INJ_IsConversionOngoing>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 80040b8:	2302      	movs	r3, #2
 80040ba:	e0ca      	b.n	8004252 <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040c6:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ce:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10a      	bne.n	80040ec <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d107      	bne.n	80040ec <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e0:	f043 0220 	orr.w	r2, r3, #32
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0b2      	b.n	8004252 <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d101      	bne.n	80040fa <HAL_ADCEx_InjectedStart_IT+0x62>
 80040f6:	2302      	movs	r3, #2
 80040f8:	e0ab      	b.n	8004252 <HAL_ADCEx_InjectedStart_IT+0x1ba>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff fc2c 	bl	8003960 <ADC_Enable>
 8004108:	4603      	mov	r3, r0
 800410a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800410c:	7bfb      	ldrb	r3, [r7, #15]
 800410e:	2b00      	cmp	r3, #0
 8004110:	f040 809a 	bne.w	8004248 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d006      	beq.n	800412e <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004124:	f023 0208 	bic.w	r2, r3, #8
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	661a      	str	r2, [r3, #96]	@ 0x60
 800412c:	e002      	b.n	8004134 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004138:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800413c:	f023 0301 	bic.w	r3, r3, #1
 8004140:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a44      	ldr	r2, [pc, #272]	@ (8004260 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d002      	beq.n	8004158 <HAL_ADCEx_InjectedStart_IT+0xc0>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	e001      	b.n	800415c <HAL_ADCEx_InjectedStart_IT+0xc4>
 8004158:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	4293      	cmp	r3, r2
 8004162:	d002      	beq.n	800416a <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d105      	bne.n	8004176 <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800416e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2260      	movs	r2, #96	@ 0x60
 800417c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d007      	beq.n	80041a4 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041a2:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d110      	bne.n	80041ce <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0220 	bic.w	r2, r2, #32
 80041ba:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041ca:	605a      	str	r2, [r3, #4]
          break;
 80041cc:	e010      	b.n	80041f0 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041dc:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f042 0220 	orr.w	r2, r2, #32
 80041ec:	605a      	str	r2, [r3, #4]
          break;
 80041ee:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004260 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d002      	beq.n	8004200 <HAL_ADCEx_InjectedStart_IT+0x168>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	e001      	b.n	8004204 <HAL_ADCEx_InjectedStart_IT+0x16c>
 8004200:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6812      	ldr	r2, [r2, #0]
 8004208:	4293      	cmp	r3, r2
 800420a:	d008      	beq.n	800421e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d005      	beq.n	800421e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	2b06      	cmp	r3, #6
 8004216:	d002      	beq.n	800421e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2b07      	cmp	r3, #7
 800421c:	d10d      	bne.n	800423a <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff fd40 	bl	8003ca8 <LL_ADC_INJ_GetTrigAuto>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d110      	bne.n	8004250 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff fdf7 	bl	8003e26 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004238:	e00a      	b.n	8004250 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800423e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004246:	e003      	b.n	8004250 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8004250:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004252:	4618      	mov	r0, r3
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	50000300 	.word	0x50000300
 8004260:	50000100 	.word	0x50000100

08004264 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b0b6      	sub	sp, #216	@ 0xd8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d102      	bne.n	80042de <HAL_ADCEx_InjectedConfigChannel+0x2a>
 80042d8:	2302      	movs	r3, #2
 80042da:	f000 bcb5 	b.w	8004c48 <HAL_ADCEx_InjectedConfigChannel+0x994>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d130      	bne.n	8004358 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b09      	cmp	r3, #9
 80042fc:	d179      	bne.n	80043f2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004302:	2b00      	cmp	r3, #0
 8004304:	d010      	beq.n	8004328 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	0e9b      	lsrs	r3, r3, #26
 800430c:	025b      	lsls	r3, r3, #9
 800430e:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004316:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800431a:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004326:	e007      	b.n	8004338 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	0e9b      	lsrs	r3, r3, #26
 800432e:	025b      	lsls	r3, r3, #9
 8004330:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 8004334:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800433e:	4b84      	ldr	r3, [pc, #528]	@ (8004550 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004340:	4013      	ands	r3, r2
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6812      	ldr	r2, [r2, #0]
 8004346:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800434a:	430b      	orrs	r3, r1
 800434c:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004354:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004356:	e04c      	b.n	80043f2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800435c:	2b00      	cmp	r3, #0
 800435e:	d11d      	bne.n	800439c <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	6a1a      	ldr	r2, [r3, #32]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00d      	beq.n	8004392 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004380:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8004384:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004390:	e004      	b.n	800439c <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	3b01      	subs	r3, #1
 8004398:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	0e9b      	lsrs	r3, r3, #26
 80043a2:	f003 021f 	and.w	r2, r3, #31
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f003 031f 	and.w	r3, r3, #31
 80043ae:	fa02 f303 	lsl.w	r3, r2, r3
 80043b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043c0:	1e5a      	subs	r2, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80043ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10a      	bne.n	80043f2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043e2:	4b5b      	ldr	r3, [pc, #364]	@ (8004550 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6812      	ldr	r2, [r2, #0]
 80043ee:	430b      	orrs	r3, r1
 80043f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff fd29 	bl	8003e4e <LL_ADC_INJ_IsConversionOngoing>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d124      	bne.n	800444c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004408:	2b00      	cmp	r3, #0
 800440a:	d112      	bne.n	8004432 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800441c:	055a      	lsls	r2, r3, #21
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004424:	051b      	lsls	r3, r3, #20
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	60da      	str	r2, [r3, #12]
 8004430:	e00c      	b.n	800444c <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8004442:	055a      	lsls	r2, r3, #21
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff fcd5 	bl	8003e00 <LL_ADC_REG_IsConversionOngoing>
 8004456:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff fcf5 	bl	8003e4e <LL_ADC_INJ_IsConversionOngoing>
 8004464:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004468:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800446c:	2b00      	cmp	r3, #0
 800446e:	f040 822e 	bne.w	80048ce <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004472:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004476:	2b00      	cmp	r3, #0
 8004478:	f040 8229 	bne.w	80048ce <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004488:	2b00      	cmp	r3, #0
 800448a:	d116      	bne.n	80044ba <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004492:	2b01      	cmp	r3, #1
 8004494:	d108      	bne.n	80044a8 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80044a4:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80044a6:	e01f      	b.n	80044e8 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80044b6:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80044b8:	e016      	b.n	80044e8 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d109      	bne.n	80044d8 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c8:	f043 0220 	orr.w	r2, r3, #32
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80044d6:	e007      	b.n	80044e8 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80044e6:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d110      	bne.n	8004514 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004504:	430b      	orrs	r3, r1
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f042 0202 	orr.w	r2, r2, #2
 8004510:	611a      	str	r2, [r3, #16]
 8004512:	e007      	b.n	8004524 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691a      	ldr	r2, [r3, #16]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0202 	bic.w	r2, r2, #2
 8004522:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800452c:	d112      	bne.n	8004554 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2200      	movs	r2, #0
 8004538:	4619      	mov	r1, r3
 800453a:	f7ff fbc3 	bl	8003cc4 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff fb9b 	bl	8003c82 <LL_ADC_SetSamplingTimeCommonConfig>
 800454c:	e011      	b.n	8004572 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 800454e:	bf00      	nop
 8004550:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6818      	ldr	r0, [r3, #0]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8004560:	461a      	mov	r2, r3
 8004562:	f7ff fbaf 	bl	8003cc4 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2100      	movs	r1, #0
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff fb88 	bl	8003c82 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	695a      	ldr	r2, [r3, #20]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	08db      	lsrs	r3, r3, #3
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	2b04      	cmp	r3, #4
 8004592:	d022      	beq.n	80045da <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	6919      	ldr	r1, [r3, #16]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045a4:	f7ff fae2 	bl	8003b6c <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6818      	ldr	r0, [r3, #0]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	6919      	ldr	r1, [r3, #16]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	461a      	mov	r2, r3
 80045b6:	f7ff fb2e 	bl	8003c16 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6818      	ldr	r0, [r3, #0]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d102      	bne.n	80045d0 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 80045ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045ce:	e000      	b.n	80045d2 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 80045d0:	2300      	movs	r3, #0
 80045d2:	461a      	mov	r2, r3
 80045d4:	f7ff fb3a 	bl	8003c4c <LL_ADC_SetOffsetSaturation>
 80045d8:	e179      	b.n	80048ce <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2100      	movs	r1, #0
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff fae7 	bl	8003bb4 <LL_ADC_GetOffsetChannel>
 80045e6:	4603      	mov	r3, r0
 80045e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <HAL_ADCEx_InjectedConfigChannel+0x352>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2100      	movs	r1, #0
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff fadc 	bl	8003bb4 <LL_ADC_GetOffsetChannel>
 80045fc:	4603      	mov	r3, r0
 80045fe:	0e9b      	lsrs	r3, r3, #26
 8004600:	f003 021f 	and.w	r2, r3, #31
 8004604:	e01e      	b.n	8004644 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2100      	movs	r1, #0
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff fad1 	bl	8003bb4 <LL_ADC_GetOffsetChannel>
 8004612:	4603      	mov	r3, r0
 8004614:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004618:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800461c:	fa93 f3a3 	rbit	r3, r3
 8004620:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004624:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004628:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 800462c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8004634:	2320      	movs	r3, #32
 8004636:	e004      	b.n	8004642 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8004638:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800463c:	fab3 f383 	clz	r3, r3
 8004640:	b2db      	uxtb	r3, r3
 8004642:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800464c:	2b00      	cmp	r3, #0
 800464e:	d105      	bne.n	800465c <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	0e9b      	lsrs	r3, r3, #26
 8004656:	f003 031f 	and.w	r3, r3, #31
 800465a:	e018      	b.n	800468e <HAL_ADCEx_InjectedConfigChannel+0x3da>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004664:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004668:	fa93 f3a3 	rbit	r3, r3
 800466c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004670:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004674:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004678:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8004680:	2320      	movs	r3, #32
 8004682:	e004      	b.n	800468e <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8004684:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004688:	fab3 f383 	clz	r3, r3
 800468c:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800468e:	429a      	cmp	r2, r3
 8004690:	d106      	bne.n	80046a0 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2200      	movs	r2, #0
 8004698:	2100      	movs	r1, #0
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff faa0 	bl	8003be0 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2101      	movs	r1, #1
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff fa84 	bl	8003bb4 <LL_ADC_GetOffsetChannel>
 80046ac:	4603      	mov	r3, r0
 80046ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10a      	bne.n	80046cc <HAL_ADCEx_InjectedConfigChannel+0x418>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2101      	movs	r1, #1
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff fa79 	bl	8003bb4 <LL_ADC_GetOffsetChannel>
 80046c2:	4603      	mov	r3, r0
 80046c4:	0e9b      	lsrs	r3, r3, #26
 80046c6:	f003 021f 	and.w	r2, r3, #31
 80046ca:	e01e      	b.n	800470a <HAL_ADCEx_InjectedConfigChannel+0x456>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2101      	movs	r1, #1
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fa6e 	bl	8003bb4 <LL_ADC_GetOffsetChannel>
 80046d8:	4603      	mov	r3, r0
 80046da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046e2:	fa93 f3a3 	rbit	r3, r3
 80046e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80046ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80046f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 80046fa:	2320      	movs	r3, #32
 80046fc:	e004      	b.n	8004708 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 80046fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004702:	fab3 f383 	clz	r3, r3
 8004706:	b2db      	uxtb	r3, r3
 8004708:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004712:	2b00      	cmp	r3, #0
 8004714:	d105      	bne.n	8004722 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	0e9b      	lsrs	r3, r3, #26
 800471c:	f003 031f 	and.w	r3, r3, #31
 8004720:	e018      	b.n	8004754 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800472e:	fa93 f3a3 	rbit	r3, r3
 8004732:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004736:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800473a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800473e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8004746:	2320      	movs	r3, #32
 8004748:	e004      	b.n	8004754 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 800474a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800474e:	fab3 f383 	clz	r3, r3
 8004752:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004754:	429a      	cmp	r2, r3
 8004756:	d106      	bne.n	8004766 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2200      	movs	r2, #0
 800475e:	2101      	movs	r1, #1
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff fa3d 	bl	8003be0 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2102      	movs	r1, #2
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff fa21 	bl	8003bb4 <LL_ADC_GetOffsetChannel>
 8004772:	4603      	mov	r3, r0
 8004774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10a      	bne.n	8004792 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2102      	movs	r1, #2
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff fa16 	bl	8003bb4 <LL_ADC_GetOffsetChannel>
 8004788:	4603      	mov	r3, r0
 800478a:	0e9b      	lsrs	r3, r3, #26
 800478c:	f003 021f 	and.w	r2, r3, #31
 8004790:	e01e      	b.n	80047d0 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2102      	movs	r1, #2
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff fa0b 	bl	8003bb4 <LL_ADC_GetOffsetChannel>
 800479e:	4603      	mov	r3, r0
 80047a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047a8:	fa93 f3a3 	rbit	r3, r3
 80047ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80047b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80047b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 80047c0:	2320      	movs	r3, #32
 80047c2:	e004      	b.n	80047ce <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 80047c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047c8:	fab3 f383 	clz	r3, r3
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d105      	bne.n	80047e8 <HAL_ADCEx_InjectedConfigChannel+0x534>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	0e9b      	lsrs	r3, r3, #26
 80047e2:	f003 031f 	and.w	r3, r3, #31
 80047e6:	e014      	b.n	8004812 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047f0:	fa93 f3a3 	rbit	r3, r3
 80047f4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80047f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80047fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8004804:	2320      	movs	r3, #32
 8004806:	e004      	b.n	8004812 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004808:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800480c:	fab3 f383 	clz	r3, r3
 8004810:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004812:	429a      	cmp	r2, r3
 8004814:	d106      	bne.n	8004824 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2200      	movs	r2, #0
 800481c:	2102      	movs	r1, #2
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff f9de 	bl	8003be0 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2103      	movs	r1, #3
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff f9c2 	bl	8003bb4 <LL_ADC_GetOffsetChannel>
 8004830:	4603      	mov	r3, r0
 8004832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10a      	bne.n	8004850 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2103      	movs	r1, #3
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff f9b7 	bl	8003bb4 <LL_ADC_GetOffsetChannel>
 8004846:	4603      	mov	r3, r0
 8004848:	0e9b      	lsrs	r3, r3, #26
 800484a:	f003 021f 	and.w	r2, r3, #31
 800484e:	e017      	b.n	8004880 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2103      	movs	r1, #3
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff f9ac 	bl	8003bb4 <LL_ADC_GetOffsetChannel>
 800485c:	4603      	mov	r3, r0
 800485e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004860:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004862:	fa93 f3a3 	rbit	r3, r3
 8004866:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004868:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800486a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800486c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8004872:	2320      	movs	r3, #32
 8004874:	e003      	b.n	800487e <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8004876:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004878:	fab3 f383 	clz	r3, r3
 800487c:	b2db      	uxtb	r3, r3
 800487e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004888:	2b00      	cmp	r3, #0
 800488a:	d105      	bne.n	8004898 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	0e9b      	lsrs	r3, r3, #26
 8004892:	f003 031f 	and.w	r3, r3, #31
 8004896:	e011      	b.n	80048bc <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048a0:	fa93 f3a3 	rbit	r3, r3
 80048a4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80048a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048a8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80048aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 80048b0:	2320      	movs	r3, #32
 80048b2:	e003      	b.n	80048bc <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 80048b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048b6:	fab3 f383 	clz	r3, r3
 80048ba:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80048bc:	429a      	cmp	r2, r3
 80048be:	d106      	bne.n	80048ce <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2200      	movs	r2, #0
 80048c6:	2103      	movs	r1, #3
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7ff f989 	bl	8003be0 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff fa54 	bl	8003d80 <LL_ADC_IsEnabled>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f040 8140 	bne.w	8004b60 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6818      	ldr	r0, [r3, #0]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	6819      	ldr	r1, [r3, #0]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	461a      	mov	r2, r3
 80048ee:	f7ff fa15 	bl	8003d1c <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	4a8f      	ldr	r2, [pc, #572]	@ (8004b34 <HAL_ADCEx_InjectedConfigChannel+0x880>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	f040 8131 	bne.w	8004b60 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10b      	bne.n	8004926 <HAL_ADCEx_InjectedConfigChannel+0x672>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	0e9b      	lsrs	r3, r3, #26
 8004914:	3301      	adds	r3, #1
 8004916:	f003 031f 	and.w	r3, r3, #31
 800491a:	2b09      	cmp	r3, #9
 800491c:	bf94      	ite	ls
 800491e:	2301      	movls	r3, #1
 8004920:	2300      	movhi	r3, #0
 8004922:	b2db      	uxtb	r3, r3
 8004924:	e019      	b.n	800495a <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800492e:	fa93 f3a3 	rbit	r3, r3
 8004932:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004934:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004936:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004938:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 800493e:	2320      	movs	r3, #32
 8004940:	e003      	b.n	800494a <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8004942:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004944:	fab3 f383 	clz	r3, r3
 8004948:	b2db      	uxtb	r3, r3
 800494a:	3301      	adds	r3, #1
 800494c:	f003 031f 	and.w	r3, r3, #31
 8004950:	2b09      	cmp	r3, #9
 8004952:	bf94      	ite	ls
 8004954:	2301      	movls	r3, #1
 8004956:	2300      	movhi	r3, #0
 8004958:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800495a:	2b00      	cmp	r3, #0
 800495c:	d079      	beq.n	8004a52 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004966:	2b00      	cmp	r3, #0
 8004968:	d107      	bne.n	800497a <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	0e9b      	lsrs	r3, r3, #26
 8004970:	3301      	adds	r3, #1
 8004972:	069b      	lsls	r3, r3, #26
 8004974:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004978:	e015      	b.n	80049a6 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004982:	fa93 f3a3 	rbit	r3, r3
 8004986:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004988:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800498a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800498c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8004992:	2320      	movs	r3, #32
 8004994:	e003      	b.n	800499e <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8004996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004998:	fab3 f383 	clz	r3, r3
 800499c:	b2db      	uxtb	r3, r3
 800499e:	3301      	adds	r3, #1
 80049a0:	069b      	lsls	r3, r3, #26
 80049a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d109      	bne.n	80049c6 <HAL_ADCEx_InjectedConfigChannel+0x712>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	0e9b      	lsrs	r3, r3, #26
 80049b8:	3301      	adds	r3, #1
 80049ba:	f003 031f 	and.w	r3, r3, #31
 80049be:	2101      	movs	r1, #1
 80049c0:	fa01 f303 	lsl.w	r3, r1, r3
 80049c4:	e017      	b.n	80049f6 <HAL_ADCEx_InjectedConfigChannel+0x742>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049ce:	fa93 f3a3 	rbit	r3, r3
 80049d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80049d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049d6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80049d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 80049de:	2320      	movs	r3, #32
 80049e0:	e003      	b.n	80049ea <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 80049e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049e4:	fab3 f383 	clz	r3, r3
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	3301      	adds	r3, #1
 80049ec:	f003 031f 	and.w	r3, r3, #31
 80049f0:	2101      	movs	r1, #1
 80049f2:	fa01 f303 	lsl.w	r3, r1, r3
 80049f6:	ea42 0103 	orr.w	r1, r2, r3
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10a      	bne.n	8004a1c <HAL_ADCEx_InjectedConfigChannel+0x768>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	0e9b      	lsrs	r3, r3, #26
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	f003 021f 	and.w	r2, r3, #31
 8004a12:	4613      	mov	r3, r2
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	4413      	add	r3, r2
 8004a18:	051b      	lsls	r3, r3, #20
 8004a1a:	e018      	b.n	8004a4e <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a24:	fa93 f3a3 	rbit	r3, r3
 8004a28:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8004a34:	2320      	movs	r3, #32
 8004a36:	e003      	b.n	8004a40 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8004a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a3a:	fab3 f383 	clz	r3, r3
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	3301      	adds	r3, #1
 8004a42:	f003 021f 	and.w	r2, r3, #31
 8004a46:	4613      	mov	r3, r2
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	4413      	add	r3, r2
 8004a4c:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a4e:	430b      	orrs	r3, r1
 8004a50:	e081      	b.n	8004b56 <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d107      	bne.n	8004a6e <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	0e9b      	lsrs	r3, r3, #26
 8004a64:	3301      	adds	r3, #1
 8004a66:	069b      	lsls	r3, r3, #26
 8004a68:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a6c:	e015      	b.n	8004a9a <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a76:	fa93 f3a3 	rbit	r3, r3
 8004a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8004a86:	2320      	movs	r3, #32
 8004a88:	e003      	b.n	8004a92 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8004a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a8c:	fab3 f383 	clz	r3, r3
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	3301      	adds	r3, #1
 8004a94:	069b      	lsls	r3, r3, #26
 8004a96:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d109      	bne.n	8004aba <HAL_ADCEx_InjectedConfigChannel+0x806>
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	0e9b      	lsrs	r3, r3, #26
 8004aac:	3301      	adds	r3, #1
 8004aae:	f003 031f 	and.w	r3, r3, #31
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab8:	e017      	b.n	8004aea <HAL_ADCEx_InjectedConfigChannel+0x836>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	fa93 f3a3 	rbit	r3, r3
 8004ac6:	61bb      	str	r3, [r7, #24]
  return result;
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8004ad2:	2320      	movs	r3, #32
 8004ad4:	e003      	b.n	8004ade <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	fab3 f383 	clz	r3, r3
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	3301      	adds	r3, #1
 8004ae0:	f003 031f 	and.w	r3, r3, #31
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aea:	ea42 0103 	orr.w	r1, r2, r3
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10d      	bne.n	8004b16 <HAL_ADCEx_InjectedConfigChannel+0x862>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	0e9b      	lsrs	r3, r3, #26
 8004b00:	3301      	adds	r3, #1
 8004b02:	f003 021f 	and.w	r2, r3, #31
 8004b06:	4613      	mov	r3, r2
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3b1e      	subs	r3, #30
 8004b0e:	051b      	lsls	r3, r3, #20
 8004b10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004b14:	e01e      	b.n	8004b54 <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	fa93 f3a3 	rbit	r3, r3
 8004b22:	60fb      	str	r3, [r7, #12]
  return result;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d104      	bne.n	8004b38 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 8004b2e:	2320      	movs	r3, #32
 8004b30:	e006      	b.n	8004b40 <HAL_ADCEx_InjectedConfigChannel+0x88c>
 8004b32:	bf00      	nop
 8004b34:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	fab3 f383 	clz	r3, r3
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	3301      	adds	r3, #1
 8004b42:	f003 021f 	and.w	r2, r3, #31
 8004b46:	4613      	mov	r3, r2
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	4413      	add	r3, r2
 8004b4c:	3b1e      	subs	r3, #30
 8004b4e:	051b      	lsls	r3, r3, #20
 8004b50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b54:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	f7ff f8b2 	bl	8003cc4 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	4b3a      	ldr	r3, [pc, #232]	@ (8004c50 <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 8004b66:	4013      	ands	r3, r2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d067      	beq.n	8004c3c <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b6c:	4839      	ldr	r0, [pc, #228]	@ (8004c54 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004b6e:	f7fe ffef 	bl	8003b50 <LL_ADC_GetCommonPathInternalCh>
 8004b72:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a37      	ldr	r2, [pc, #220]	@ (8004c58 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d004      	beq.n	8004b8a <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a35      	ldr	r2, [pc, #212]	@ (8004c5c <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d127      	bne.n	8004bda <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d121      	bne.n	8004bda <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b9e:	d14d      	bne.n	8004c3c <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ba0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ba4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ba8:	4619      	mov	r1, r3
 8004baa:	482a      	ldr	r0, [pc, #168]	@ (8004c54 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004bac:	f7fe ffbd 	bl	8003b2a <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8004c60 <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	099b      	lsrs	r3, r3, #6
 8004bb6:	4a2b      	ldr	r2, [pc, #172]	@ (8004c64 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8004bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbc:	099a      	lsrs	r2, r3, #6
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004bc8:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004bca:	e002      	b.n	8004bd2 <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1f9      	bne.n	8004bcc <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bd8:	e030      	b.n	8004c3c <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a22      	ldr	r2, [pc, #136]	@ (8004c68 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d113      	bne.n	8004c0c <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004be4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004be8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10d      	bne.n	8004c0c <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c6c <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d020      	beq.n	8004c3c <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004bfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c02:	4619      	mov	r1, r3
 8004c04:	4813      	ldr	r0, [pc, #76]	@ (8004c54 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004c06:	f7fe ff90 	bl	8003b2a <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c0a:	e017      	b.n	8004c3c <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a17      	ldr	r2, [pc, #92]	@ (8004c70 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d112      	bne.n	8004c3c <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10c      	bne.n	8004c3c <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a11      	ldr	r2, [pc, #68]	@ (8004c6c <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d007      	beq.n	8004c3c <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004c34:	4619      	mov	r1, r3
 8004c36:	4807      	ldr	r0, [pc, #28]	@ (8004c54 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004c38:	f7fe ff77 	bl	8003b2a <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004c44:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	37d8      	adds	r7, #216	@ 0xd8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	80080000 	.word	0x80080000
 8004c54:	50000300 	.word	0x50000300
 8004c58:	c3210000 	.word	0xc3210000
 8004c5c:	90c00010 	.word	0x90c00010
 8004c60:	20000000 	.word	0x20000000
 8004c64:	053e2d63 	.word	0x053e2d63
 8004c68:	c7520000 	.word	0xc7520000
 8004c6c:	50000100 	.word	0x50000100
 8004c70:	cb840000 	.word	0xcb840000

08004c74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004c74:	b590      	push	{r4, r7, lr}
 8004c76:	b0a1      	sub	sp, #132	@ 0x84
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d101      	bne.n	8004c92 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004c8e:	2302      	movs	r3, #2
 8004c90:	e08b      	b.n	8004daa <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004caa:	d102      	bne.n	8004cb2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004cac:	4b41      	ldr	r3, [pc, #260]	@ (8004db4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004cae:	60bb      	str	r3, [r7, #8]
 8004cb0:	e001      	b.n	8004cb6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10b      	bne.n	8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc0:	f043 0220 	orr.w	r2, r3, #32
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e06a      	b.n	8004daa <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff f892 	bl	8003e00 <LL_ADC_REG_IsConversionOngoing>
 8004cdc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff f88c 	bl	8003e00 <LL_ADC_REG_IsConversionOngoing>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d14c      	bne.n	8004d88 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004cee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d149      	bne.n	8004d88 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004cf4:	4b30      	ldr	r3, [pc, #192]	@ (8004db8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004cf6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d028      	beq.n	8004d52 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004d00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	6859      	ldr	r1, [r3, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d12:	035b      	lsls	r3, r3, #13
 8004d14:	430b      	orrs	r3, r1
 8004d16:	431a      	orrs	r2, r3
 8004d18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d1a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d1c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004d20:	f7ff f82e 	bl	8003d80 <LL_ADC_IsEnabled>
 8004d24:	4604      	mov	r4, r0
 8004d26:	4823      	ldr	r0, [pc, #140]	@ (8004db4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004d28:	f7ff f82a 	bl	8003d80 <LL_ADC_IsEnabled>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	4323      	orrs	r3, r4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d133      	bne.n	8004d9c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004d34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004d3c:	f023 030f 	bic.w	r3, r3, #15
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	6811      	ldr	r1, [r2, #0]
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	6892      	ldr	r2, [r2, #8]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d4e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d50:	e024      	b.n	8004d9c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004d52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d5c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d5e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004d62:	f7ff f80d 	bl	8003d80 <LL_ADC_IsEnabled>
 8004d66:	4604      	mov	r4, r0
 8004d68:	4812      	ldr	r0, [pc, #72]	@ (8004db4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004d6a:	f7ff f809 	bl	8003d80 <LL_ADC_IsEnabled>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	4323      	orrs	r3, r4
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d112      	bne.n	8004d9c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004d76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004d7e:	f023 030f 	bic.w	r3, r3, #15
 8004d82:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004d84:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d86:	e009      	b.n	8004d9c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d8c:	f043 0220 	orr.w	r2, r3, #32
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004d9a:	e000      	b.n	8004d9e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004da6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3784      	adds	r7, #132	@ 0x84
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd90      	pop	{r4, r7, pc}
 8004db2:	bf00      	nop
 8004db4:	50000100 	.word	0x50000100
 8004db8:	50000300 	.word	0x50000300

08004dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8004e00 <__NVIC_SetPriorityGrouping+0x44>)
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004dd8:	4013      	ands	r3, r2
 8004dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004de4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004de8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dee:	4a04      	ldr	r2, [pc, #16]	@ (8004e00 <__NVIC_SetPriorityGrouping+0x44>)
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	60d3      	str	r3, [r2, #12]
}
 8004df4:	bf00      	nop
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	e000ed00 	.word	0xe000ed00

08004e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e08:	4b04      	ldr	r3, [pc, #16]	@ (8004e1c <__NVIC_GetPriorityGrouping+0x18>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	0a1b      	lsrs	r3, r3, #8
 8004e0e:	f003 0307 	and.w	r3, r3, #7
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	e000ed00 	.word	0xe000ed00

08004e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	4603      	mov	r3, r0
 8004e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	db0b      	blt.n	8004e4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e32:	79fb      	ldrb	r3, [r7, #7]
 8004e34:	f003 021f 	and.w	r2, r3, #31
 8004e38:	4907      	ldr	r1, [pc, #28]	@ (8004e58 <__NVIC_EnableIRQ+0x38>)
 8004e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	2001      	movs	r0, #1
 8004e42:	fa00 f202 	lsl.w	r2, r0, r2
 8004e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	e000e100 	.word	0xe000e100

08004e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	4603      	mov	r3, r0
 8004e64:	6039      	str	r1, [r7, #0]
 8004e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	db0a      	blt.n	8004e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	490c      	ldr	r1, [pc, #48]	@ (8004ea8 <__NVIC_SetPriority+0x4c>)
 8004e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e7a:	0112      	lsls	r2, r2, #4
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	440b      	add	r3, r1
 8004e80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e84:	e00a      	b.n	8004e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	4908      	ldr	r1, [pc, #32]	@ (8004eac <__NVIC_SetPriority+0x50>)
 8004e8c:	79fb      	ldrb	r3, [r7, #7]
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	3b04      	subs	r3, #4
 8004e94:	0112      	lsls	r2, r2, #4
 8004e96:	b2d2      	uxtb	r2, r2
 8004e98:	440b      	add	r3, r1
 8004e9a:	761a      	strb	r2, [r3, #24]
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	e000e100 	.word	0xe000e100
 8004eac:	e000ed00 	.word	0xe000ed00

08004eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b089      	sub	sp, #36	@ 0x24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	f1c3 0307 	rsb	r3, r3, #7
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	bf28      	it	cs
 8004ece:	2304      	movcs	r3, #4
 8004ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	2b06      	cmp	r3, #6
 8004ed8:	d902      	bls.n	8004ee0 <NVIC_EncodePriority+0x30>
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	3b03      	subs	r3, #3
 8004ede:	e000      	b.n	8004ee2 <NVIC_EncodePriority+0x32>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	fa02 f303 	lsl.w	r3, r2, r3
 8004eee:	43da      	mvns	r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	401a      	ands	r2, r3
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	fa01 f303 	lsl.w	r3, r1, r3
 8004f02:	43d9      	mvns	r1, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f08:	4313      	orrs	r3, r2
         );
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3724      	adds	r7, #36	@ 0x24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
	...

08004f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3b01      	subs	r3, #1
 8004f24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f28:	d301      	bcc.n	8004f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e00f      	b.n	8004f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8004f58 <SysTick_Config+0x40>)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f36:	210f      	movs	r1, #15
 8004f38:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3c:	f7ff ff8e 	bl	8004e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f40:	4b05      	ldr	r3, [pc, #20]	@ (8004f58 <SysTick_Config+0x40>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f46:	4b04      	ldr	r3, [pc, #16]	@ (8004f58 <SysTick_Config+0x40>)
 8004f48:	2207      	movs	r2, #7
 8004f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	e000e010 	.word	0xe000e010

08004f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7ff ff29 	bl	8004dbc <__NVIC_SetPriorityGrouping>
}
 8004f6a:	bf00      	nop
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b086      	sub	sp, #24
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	4603      	mov	r3, r0
 8004f7a:	60b9      	str	r1, [r7, #8]
 8004f7c:	607a      	str	r2, [r7, #4]
 8004f7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f80:	f7ff ff40 	bl	8004e04 <__NVIC_GetPriorityGrouping>
 8004f84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	68b9      	ldr	r1, [r7, #8]
 8004f8a:	6978      	ldr	r0, [r7, #20]
 8004f8c:	f7ff ff90 	bl	8004eb0 <NVIC_EncodePriority>
 8004f90:	4602      	mov	r2, r0
 8004f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f96:	4611      	mov	r1, r2
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff ff5f 	bl	8004e5c <__NVIC_SetPriority>
}
 8004f9e:	bf00      	nop
 8004fa0:	3718      	adds	r7, #24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b082      	sub	sp, #8
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	4603      	mov	r3, r0
 8004fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7ff ff33 	bl	8004e20 <__NVIC_EnableIRQ>
}
 8004fba:	bf00      	nop
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b082      	sub	sp, #8
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff ffa4 	bl	8004f18 <SysTick_Config>
 8004fd0:	4603      	mov	r3, r0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b082      	sub	sp, #8
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e014      	b.n	8005016 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	791b      	ldrb	r3, [r3, #4]
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d105      	bne.n	8005002 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7fc fa5f 	bl	80014c0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2202      	movs	r2, #2
 8005006:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
	...

08005020 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b08a      	sub	sp, #40	@ 0x28
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800502c:	2300      	movs	r3, #0
 800502e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <HAL_DAC_ConfigChannel+0x1c>
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e19e      	b.n	800537e <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	795b      	ldrb	r3, [r3, #5]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d101      	bne.n	800504c <HAL_DAC_ConfigChannel+0x2c>
 8005048:	2302      	movs	r3, #2
 800504a:	e198      	b.n	800537e <HAL_DAC_ConfigChannel+0x35e>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2201      	movs	r2, #1
 8005050:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2202      	movs	r2, #2
 8005056:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	2b04      	cmp	r3, #4
 800505e:	d17a      	bne.n	8005156 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005060:	f7fd fa52 	bl	8002508 <HAL_GetTick>
 8005064:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d13d      	bne.n	80050e8 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800506c:	e018      	b.n	80050a0 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800506e:	f7fd fa4b 	bl	8002508 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b01      	cmp	r3, #1
 800507a:	d911      	bls.n	80050a0 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005082:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	f043 0208 	orr.w	r2, r3, #8
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2203      	movs	r2, #3
 800509a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e16e      	b.n	800537e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1df      	bne.n	800506e <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050b6:	641a      	str	r2, [r3, #64]	@ 0x40
 80050b8:	e020      	b.n	80050fc <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80050ba:	f7fd fa25 	bl	8002508 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d90f      	bls.n	80050e8 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	da0a      	bge.n	80050e8 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f043 0208 	orr.w	r2, r3, #8
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2203      	movs	r2, #3
 80050e2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e14a      	b.n	800537e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	dbe3      	blt.n	80050ba <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050fa:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f003 0310 	and.w	r3, r3, #16
 8005108:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800510c:	fa01 f303 	lsl.w	r3, r1, r3
 8005110:	43db      	mvns	r3, r3
 8005112:	ea02 0103 	and.w	r1, r2, r3
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f003 0310 	and.w	r3, r3, #16
 8005120:	409a      	lsls	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f003 0310 	and.w	r3, r3, #16
 8005136:	21ff      	movs	r1, #255	@ 0xff
 8005138:	fa01 f303 	lsl.w	r3, r1, r3
 800513c:	43db      	mvns	r3, r3
 800513e:	ea02 0103 	and.w	r1, r2, r3
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f003 0310 	and.w	r3, r3, #16
 800514c:	409a      	lsls	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	430a      	orrs	r2, r1
 8005154:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d11d      	bne.n	800519a <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005164:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f003 0310 	and.w	r3, r3, #16
 800516c:	221f      	movs	r2, #31
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	43db      	mvns	r3, r3
 8005174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005176:	4013      	ands	r3, r2
 8005178:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f003 0310 	and.w	r3, r3, #16
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	fa02 f303 	lsl.w	r3, r2, r3
 800518c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800518e:	4313      	orrs	r3, r2
 8005190:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005198:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f003 0310 	and.w	r3, r3, #16
 80051a8:	2207      	movs	r2, #7
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	43db      	mvns	r3, r3
 80051b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051b2:	4013      	ands	r3, r2
 80051b4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d102      	bne.n	80051c4 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80051be:	2300      	movs	r3, #0
 80051c0:	623b      	str	r3, [r7, #32]
 80051c2:	e00f      	b.n	80051e4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d102      	bne.n	80051d2 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80051cc:	2301      	movs	r3, #1
 80051ce:	623b      	str	r3, [r7, #32]
 80051d0:	e008      	b.n	80051e4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d102      	bne.n	80051e0 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80051da:	2301      	movs	r3, #1
 80051dc:	623b      	str	r3, [r7, #32]
 80051de:	e001      	b.n	80051e4 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80051e0:	2300      	movs	r3, #0
 80051e2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	6a3a      	ldr	r2, [r7, #32]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f003 0310 	and.w	r3, r3, #16
 80051fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80051fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005202:	43db      	mvns	r3, r3
 8005204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005206:	4013      	ands	r3, r2
 8005208:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	791b      	ldrb	r3, [r3, #4]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d102      	bne.n	8005218 <HAL_DAC_ConfigChannel+0x1f8>
 8005212:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005216:	e000      	b.n	800521a <HAL_DAC_ConfigChannel+0x1fa>
 8005218:	2300      	movs	r3, #0
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	4313      	orrs	r3, r2
 800521e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f003 0310 	and.w	r3, r3, #16
 8005226:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800522a:	fa02 f303 	lsl.w	r3, r2, r3
 800522e:	43db      	mvns	r3, r3
 8005230:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005232:	4013      	ands	r3, r2
 8005234:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	795b      	ldrb	r3, [r3, #5]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d102      	bne.n	8005244 <HAL_DAC_ConfigChannel+0x224>
 800523e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005242:	e000      	b.n	8005246 <HAL_DAC_ConfigChannel+0x226>
 8005244:	2300      	movs	r3, #0
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	4313      	orrs	r3, r2
 800524a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800524c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005252:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b02      	cmp	r3, #2
 800525a:	d114      	bne.n	8005286 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800525c:	f001 fae0 	bl	8006820 <HAL_RCC_GetHCLKFreq>
 8005260:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	4a48      	ldr	r2, [pc, #288]	@ (8005388 <HAL_DAC_ConfigChannel+0x368>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d904      	bls.n	8005274 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800526a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005270:	627b      	str	r3, [r7, #36]	@ 0x24
 8005272:	e00f      	b.n	8005294 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	4a45      	ldr	r2, [pc, #276]	@ (800538c <HAL_DAC_ConfigChannel+0x36c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d90a      	bls.n	8005292 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800527c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005282:	627b      	str	r3, [r7, #36]	@ 0x24
 8005284:	e006      	b.n	8005294 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800528c:	4313      	orrs	r3, r2
 800528e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005290:	e000      	b.n	8005294 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005292:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f003 0310 	and.w	r3, r3, #16
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	fa02 f303 	lsl.w	r3, r2, r3
 80052a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052a2:	4313      	orrs	r3, r2
 80052a4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6819      	ldr	r1, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f003 0310 	and.w	r3, r3, #16
 80052ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80052be:	fa02 f303 	lsl.w	r3, r2, r3
 80052c2:	43da      	mvns	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	400a      	ands	r2, r1
 80052ca:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f003 0310 	and.w	r3, r3, #16
 80052da:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80052de:	fa02 f303 	lsl.w	r3, r2, r3
 80052e2:	43db      	mvns	r3, r3
 80052e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052e6:	4013      	ands	r3, r2
 80052e8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f003 0310 	and.w	r3, r3, #16
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	fa02 f303 	lsl.w	r3, r2, r3
 80052fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052fe:	4313      	orrs	r3, r2
 8005300:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005308:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6819      	ldr	r1, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f003 0310 	and.w	r3, r3, #16
 8005316:	22c0      	movs	r2, #192	@ 0xc0
 8005318:	fa02 f303 	lsl.w	r3, r2, r3
 800531c:	43da      	mvns	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	400a      	ands	r2, r1
 8005324:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	089b      	lsrs	r3, r3, #2
 800532c:	f003 030f 	and.w	r3, r3, #15
 8005330:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	089b      	lsrs	r3, r3, #2
 8005338:	021b      	lsls	r3, r3, #8
 800533a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	4313      	orrs	r3, r2
 8005342:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f003 0310 	and.w	r3, r3, #16
 8005350:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8005354:	fa01 f303 	lsl.w	r3, r1, r3
 8005358:	43db      	mvns	r3, r3
 800535a:	ea02 0103 	and.w	r1, r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f003 0310 	and.w	r3, r3, #16
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	409a      	lsls	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	430a      	orrs	r2, r1
 800536e:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2201      	movs	r2, #1
 8005374:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800537c:	7ffb      	ldrb	r3, [r7, #31]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3728      	adds	r7, #40	@ 0x28
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	09896800 	.word	0x09896800
 800538c:	04c4b400 	.word	0x04c4b400

08005390 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e08d      	b.n	80054be <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	461a      	mov	r2, r3
 80053a8:	4b47      	ldr	r3, [pc, #284]	@ (80054c8 <HAL_DMA_Init+0x138>)
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d80f      	bhi.n	80053ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	4b45      	ldr	r3, [pc, #276]	@ (80054cc <HAL_DMA_Init+0x13c>)
 80053b6:	4413      	add	r3, r2
 80053b8:	4a45      	ldr	r2, [pc, #276]	@ (80054d0 <HAL_DMA_Init+0x140>)
 80053ba:	fba2 2303 	umull	r2, r3, r2, r3
 80053be:	091b      	lsrs	r3, r3, #4
 80053c0:	009a      	lsls	r2, r3, #2
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a42      	ldr	r2, [pc, #264]	@ (80054d4 <HAL_DMA_Init+0x144>)
 80053ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80053cc:	e00e      	b.n	80053ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	4b40      	ldr	r3, [pc, #256]	@ (80054d8 <HAL_DMA_Init+0x148>)
 80053d6:	4413      	add	r3, r2
 80053d8:	4a3d      	ldr	r2, [pc, #244]	@ (80054d0 <HAL_DMA_Init+0x140>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	091b      	lsrs	r3, r3, #4
 80053e0:	009a      	lsls	r2, r3, #2
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a3c      	ldr	r2, [pc, #240]	@ (80054dc <HAL_DMA_Init+0x14c>)
 80053ea:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005402:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005406:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005410:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800541c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005428:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fa76 	bl	8005930 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800544c:	d102      	bne.n	8005454 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005468:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d010      	beq.n	8005494 <HAL_DMA_Init+0x104>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	2b04      	cmp	r3, #4
 8005478:	d80c      	bhi.n	8005494 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fa96 	bl	80059ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005490:	605a      	str	r2, [r3, #4]
 8005492:	e008      	b.n	80054a6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	40020407 	.word	0x40020407
 80054cc:	bffdfff8 	.word	0xbffdfff8
 80054d0:	cccccccd 	.word	0xcccccccd
 80054d4:	40020000 	.word	0x40020000
 80054d8:	bffdfbf8 	.word	0xbffdfbf8
 80054dc:	40020400 	.word	0x40020400

080054e0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d101      	bne.n	8005500 <HAL_DMA_Start_IT+0x20>
 80054fc:	2302      	movs	r3, #2
 80054fe:	e066      	b.n	80055ce <HAL_DMA_Start_IT+0xee>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b01      	cmp	r3, #1
 8005512:	d155      	bne.n	80055c0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0201 	bic.w	r2, r2, #1
 8005530:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	68b9      	ldr	r1, [r7, #8]
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 f9bb 	bl	80058b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005542:	2b00      	cmp	r3, #0
 8005544:	d008      	beq.n	8005558 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f042 020e 	orr.w	r2, r2, #14
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	e00f      	b.n	8005578 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0204 	bic.w	r2, r2, #4
 8005566:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 020a 	orr.w	r2, r2, #10
 8005576:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d007      	beq.n	8005596 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005590:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005594:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800559a:	2b00      	cmp	r3, #0
 800559c:	d007      	beq.n	80055ae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055ac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f042 0201 	orr.w	r2, r2, #1
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	e005      	b.n	80055cc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80055c8:	2302      	movs	r3, #2
 80055ca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80055cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b085      	sub	sp, #20
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d005      	beq.n	80055fa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2204      	movs	r2, #4
 80055f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	73fb      	strb	r3, [r7, #15]
 80055f8:	e037      	b.n	800566a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 020e 	bic.w	r2, r2, #14
 8005608:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005614:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005618:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0201 	bic.w	r2, r2, #1
 8005628:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800562e:	f003 021f 	and.w	r2, r3, #31
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005636:	2101      	movs	r1, #1
 8005638:	fa01 f202 	lsl.w	r2, r1, r2
 800563c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005646:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00c      	beq.n	800566a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800565a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800565e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005668:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800567a:	7bfb      	ldrb	r3, [r7, #15]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005690:	2300      	movs	r3, #0
 8005692:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d00d      	beq.n	80056bc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2204      	movs	r2, #4
 80056a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	73fb      	strb	r3, [r7, #15]
 80056ba:	e047      	b.n	800574c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 020e 	bic.w	r2, r2, #14
 80056ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 0201 	bic.w	r2, r2, #1
 80056da:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f0:	f003 021f 	and.w	r2, r3, #31
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f8:	2101      	movs	r1, #1
 80056fa:	fa01 f202 	lsl.w	r2, r1, r2
 80056fe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005708:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00c      	beq.n	800572c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800571c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005720:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800572a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	4798      	blx	r3
    }
  }
  return status;
 800574c:	7bfb      	ldrb	r3, [r7, #15]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b084      	sub	sp, #16
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005772:	f003 031f 	and.w	r3, r3, #31
 8005776:	2204      	movs	r2, #4
 8005778:	409a      	lsls	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4013      	ands	r3, r2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d026      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x7a>
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	2b00      	cmp	r3, #0
 800578a:	d021      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0320 	and.w	r3, r3, #32
 8005796:	2b00      	cmp	r3, #0
 8005798:	d107      	bne.n	80057aa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0204 	bic.w	r2, r2, #4
 80057a8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ae:	f003 021f 	and.w	r2, r3, #31
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b6:	2104      	movs	r1, #4
 80057b8:	fa01 f202 	lsl.w	r2, r1, r2
 80057bc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d071      	beq.n	80058aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80057ce:	e06c      	b.n	80058aa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d4:	f003 031f 	and.w	r3, r3, #31
 80057d8:	2202      	movs	r2, #2
 80057da:	409a      	lsls	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4013      	ands	r3, r2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d02e      	beq.n	8005842 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d029      	beq.n	8005842 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0320 	and.w	r3, r3, #32
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10b      	bne.n	8005814 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 020a 	bic.w	r2, r2, #10
 800580a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005818:	f003 021f 	and.w	r2, r3, #31
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005820:	2102      	movs	r1, #2
 8005822:	fa01 f202 	lsl.w	r2, r1, r2
 8005826:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005834:	2b00      	cmp	r3, #0
 8005836:	d038      	beq.n	80058aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005840:	e033      	b.n	80058aa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005846:	f003 031f 	and.w	r3, r3, #31
 800584a:	2208      	movs	r2, #8
 800584c:	409a      	lsls	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	4013      	ands	r3, r2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d02a      	beq.n	80058ac <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	f003 0308 	and.w	r3, r3, #8
 800585c:	2b00      	cmp	r3, #0
 800585e:	d025      	beq.n	80058ac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 020e 	bic.w	r2, r2, #14
 800586e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005874:	f003 021f 	and.w	r2, r3, #31
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587c:	2101      	movs	r1, #1
 800587e:	fa01 f202 	lsl.w	r2, r1, r2
 8005882:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d004      	beq.n	80058ac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80058aa:	bf00      	nop
 80058ac:	bf00      	nop
}
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
 80058c0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80058ca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d004      	beq.n	80058de <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80058dc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e2:	f003 021f 	and.w	r2, r3, #31
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ea:	2101      	movs	r1, #1
 80058ec:	fa01 f202 	lsl.w	r2, r1, r2
 80058f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	2b10      	cmp	r3, #16
 8005900:	d108      	bne.n	8005914 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005912:	e007      	b.n	8005924 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	60da      	str	r2, [r3, #12]
}
 8005924:	bf00      	nop
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005930:	b480      	push	{r7}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	461a      	mov	r2, r3
 800593e:	4b16      	ldr	r3, [pc, #88]	@ (8005998 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005940:	429a      	cmp	r2, r3
 8005942:	d802      	bhi.n	800594a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005944:	4b15      	ldr	r3, [pc, #84]	@ (800599c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	e001      	b.n	800594e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800594a:	4b15      	ldr	r3, [pc, #84]	@ (80059a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800594c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	b2db      	uxtb	r3, r3
 8005958:	3b08      	subs	r3, #8
 800595a:	4a12      	ldr	r2, [pc, #72]	@ (80059a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800595c:	fba2 2303 	umull	r2, r3, r2, r3
 8005960:	091b      	lsrs	r3, r3, #4
 8005962:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005968:	089b      	lsrs	r3, r3, #2
 800596a:	009a      	lsls	r2, r3, #2
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	4413      	add	r3, r2
 8005970:	461a      	mov	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a0b      	ldr	r2, [pc, #44]	@ (80059a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800597a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f003 031f 	and.w	r3, r3, #31
 8005982:	2201      	movs	r2, #1
 8005984:	409a      	lsls	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800598a:	bf00      	nop
 800598c:	371c      	adds	r7, #28
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	40020407 	.word	0x40020407
 800599c:	40020800 	.word	0x40020800
 80059a0:	40020820 	.word	0x40020820
 80059a4:	cccccccd 	.word	0xcccccccd
 80059a8:	40020880 	.word	0x40020880

080059ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4b0b      	ldr	r3, [pc, #44]	@ (80059ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80059c0:	4413      	add	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	461a      	mov	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a08      	ldr	r2, [pc, #32]	@ (80059f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80059ce:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	f003 031f 	and.w	r3, r3, #31
 80059d8:	2201      	movs	r2, #1
 80059da:	409a      	lsls	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80059e0:	bf00      	nop
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	1000823f 	.word	0x1000823f
 80059f0:	40020940 	.word	0x40020940

080059f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005a02:	e15a      	b.n	8005cba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	2101      	movs	r1, #1
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a10:	4013      	ands	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 814c 	beq.w	8005cb4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f003 0303 	and.w	r3, r3, #3
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d005      	beq.n	8005a34 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d130      	bne.n	8005a96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	2203      	movs	r2, #3
 8005a40:	fa02 f303 	lsl.w	r3, r2, r3
 8005a44:	43db      	mvns	r3, r3
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	68da      	ldr	r2, [r3, #12]
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	fa02 f303 	lsl.w	r3, r2, r3
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a72:	43db      	mvns	r3, r3
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	4013      	ands	r3, r2
 8005a78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	091b      	lsrs	r3, r3, #4
 8005a80:	f003 0201 	and.w	r2, r3, #1
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f003 0303 	and.w	r3, r3, #3
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	d017      	beq.n	8005ad2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	005b      	lsls	r3, r3, #1
 8005aac:	2203      	movs	r2, #3
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	43db      	mvns	r3, r3
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	689a      	ldr	r2, [r3, #8]
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f003 0303 	and.w	r3, r3, #3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d123      	bne.n	8005b26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	08da      	lsrs	r2, r3, #3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	3208      	adds	r2, #8
 8005ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f003 0307 	and.w	r3, r3, #7
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	220f      	movs	r2, #15
 8005af6:	fa02 f303 	lsl.w	r3, r2, r3
 8005afa:	43db      	mvns	r3, r3
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	4013      	ands	r3, r2
 8005b00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	691a      	ldr	r2, [r3, #16]
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	08da      	lsrs	r2, r3, #3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	3208      	adds	r2, #8
 8005b20:	6939      	ldr	r1, [r7, #16]
 8005b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	2203      	movs	r2, #3
 8005b32:	fa02 f303 	lsl.w	r3, r2, r3
 8005b36:	43db      	mvns	r3, r3
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f003 0203 	and.w	r2, r3, #3
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 80a6 	beq.w	8005cb4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b68:	4b5b      	ldr	r3, [pc, #364]	@ (8005cd8 <HAL_GPIO_Init+0x2e4>)
 8005b6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b6c:	4a5a      	ldr	r2, [pc, #360]	@ (8005cd8 <HAL_GPIO_Init+0x2e4>)
 8005b6e:	f043 0301 	orr.w	r3, r3, #1
 8005b72:	6613      	str	r3, [r2, #96]	@ 0x60
 8005b74:	4b58      	ldr	r3, [pc, #352]	@ (8005cd8 <HAL_GPIO_Init+0x2e4>)
 8005b76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	60bb      	str	r3, [r7, #8]
 8005b7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b80:	4a56      	ldr	r2, [pc, #344]	@ (8005cdc <HAL_GPIO_Init+0x2e8>)
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	089b      	lsrs	r3, r3, #2
 8005b86:	3302      	adds	r3, #2
 8005b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f003 0303 	and.w	r3, r3, #3
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	220f      	movs	r2, #15
 8005b98:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9c:	43db      	mvns	r3, r3
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005baa:	d01f      	beq.n	8005bec <HAL_GPIO_Init+0x1f8>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a4c      	ldr	r2, [pc, #304]	@ (8005ce0 <HAL_GPIO_Init+0x2ec>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d019      	beq.n	8005be8 <HAL_GPIO_Init+0x1f4>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a4b      	ldr	r2, [pc, #300]	@ (8005ce4 <HAL_GPIO_Init+0x2f0>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d013      	beq.n	8005be4 <HAL_GPIO_Init+0x1f0>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a4a      	ldr	r2, [pc, #296]	@ (8005ce8 <HAL_GPIO_Init+0x2f4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d00d      	beq.n	8005be0 <HAL_GPIO_Init+0x1ec>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a49      	ldr	r2, [pc, #292]	@ (8005cec <HAL_GPIO_Init+0x2f8>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d007      	beq.n	8005bdc <HAL_GPIO_Init+0x1e8>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a48      	ldr	r2, [pc, #288]	@ (8005cf0 <HAL_GPIO_Init+0x2fc>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d101      	bne.n	8005bd8 <HAL_GPIO_Init+0x1e4>
 8005bd4:	2305      	movs	r3, #5
 8005bd6:	e00a      	b.n	8005bee <HAL_GPIO_Init+0x1fa>
 8005bd8:	2306      	movs	r3, #6
 8005bda:	e008      	b.n	8005bee <HAL_GPIO_Init+0x1fa>
 8005bdc:	2304      	movs	r3, #4
 8005bde:	e006      	b.n	8005bee <HAL_GPIO_Init+0x1fa>
 8005be0:	2303      	movs	r3, #3
 8005be2:	e004      	b.n	8005bee <HAL_GPIO_Init+0x1fa>
 8005be4:	2302      	movs	r3, #2
 8005be6:	e002      	b.n	8005bee <HAL_GPIO_Init+0x1fa>
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <HAL_GPIO_Init+0x1fa>
 8005bec:	2300      	movs	r3, #0
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	f002 0203 	and.w	r2, r2, #3
 8005bf4:	0092      	lsls	r2, r2, #2
 8005bf6:	4093      	lsls	r3, r2
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bfe:	4937      	ldr	r1, [pc, #220]	@ (8005cdc <HAL_GPIO_Init+0x2e8>)
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	089b      	lsrs	r3, r3, #2
 8005c04:	3302      	adds	r3, #2
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c0c:	4b39      	ldr	r3, [pc, #228]	@ (8005cf4 <HAL_GPIO_Init+0x300>)
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	43db      	mvns	r3, r3
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005c30:	4a30      	ldr	r2, [pc, #192]	@ (8005cf4 <HAL_GPIO_Init+0x300>)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005c36:	4b2f      	ldr	r3, [pc, #188]	@ (8005cf4 <HAL_GPIO_Init+0x300>)
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	43db      	mvns	r3, r3
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	4013      	ands	r3, r2
 8005c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005c5a:	4a26      	ldr	r2, [pc, #152]	@ (8005cf4 <HAL_GPIO_Init+0x300>)
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005c60:	4b24      	ldr	r3, [pc, #144]	@ (8005cf4 <HAL_GPIO_Init+0x300>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	43db      	mvns	r3, r3
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005c84:	4a1b      	ldr	r2, [pc, #108]	@ (8005cf4 <HAL_GPIO_Init+0x300>)
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8005cf4 <HAL_GPIO_Init+0x300>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	43db      	mvns	r3, r3
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	4013      	ands	r3, r2
 8005c98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005cae:	4a11      	ldr	r2, [pc, #68]	@ (8005cf4 <HAL_GPIO_Init+0x300>)
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f47f ae9d 	bne.w	8005a04 <HAL_GPIO_Init+0x10>
  }
}
 8005cca:	bf00      	nop
 8005ccc:	bf00      	nop
 8005cce:	371c      	adds	r7, #28
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	40021000 	.word	0x40021000
 8005cdc:	40010000 	.word	0x40010000
 8005ce0:	48000400 	.word	0x48000400
 8005ce4:	48000800 	.word	0x48000800
 8005ce8:	48000c00 	.word	0x48000c00
 8005cec:	48001000 	.word	0x48001000
 8005cf0:	48001400 	.word	0x48001400
 8005cf4:	40010400 	.word	0x40010400

08005cf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	460b      	mov	r3, r1
 8005d02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691a      	ldr	r2, [r3, #16]
 8005d08:	887b      	ldrh	r3, [r7, #2]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d10:	2301      	movs	r3, #1
 8005d12:	73fb      	strb	r3, [r7, #15]
 8005d14:	e001      	b.n	8005d1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d16:	2300      	movs	r3, #0
 8005d18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	807b      	strh	r3, [r7, #2]
 8005d34:	4613      	mov	r3, r2
 8005d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d38:	787b      	ldrb	r3, [r7, #1]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d003      	beq.n	8005d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005d3e:	887a      	ldrh	r2, [r7, #2]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005d44:	e002      	b.n	8005d4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005d46:	887a      	ldrh	r2, [r7, #2]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d141      	bne.n	8005dea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d66:	4b4b      	ldr	r3, [pc, #300]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d72:	d131      	bne.n	8005dd8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d74:	4b47      	ldr	r3, [pc, #284]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d7a:	4a46      	ldr	r2, [pc, #280]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d84:	4b43      	ldr	r3, [pc, #268]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d8c:	4a41      	ldr	r2, [pc, #260]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d94:	4b40      	ldr	r3, [pc, #256]	@ (8005e98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2232      	movs	r2, #50	@ 0x32
 8005d9a:	fb02 f303 	mul.w	r3, r2, r3
 8005d9e:	4a3f      	ldr	r2, [pc, #252]	@ (8005e9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005da0:	fba2 2303 	umull	r2, r3, r2, r3
 8005da4:	0c9b      	lsrs	r3, r3, #18
 8005da6:	3301      	adds	r3, #1
 8005da8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005daa:	e002      	b.n	8005db2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	3b01      	subs	r3, #1
 8005db0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005db2:	4b38      	ldr	r3, [pc, #224]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dbe:	d102      	bne.n	8005dc6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1f2      	bne.n	8005dac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005dc6:	4b33      	ldr	r3, [pc, #204]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dd2:	d158      	bne.n	8005e86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e057      	b.n	8005e88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005dd8:	4b2e      	ldr	r3, [pc, #184]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dde:	4a2d      	ldr	r2, [pc, #180]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005de0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005de4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005de8:	e04d      	b.n	8005e86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005df0:	d141      	bne.n	8005e76 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005df2:	4b28      	ldr	r3, [pc, #160]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005dfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dfe:	d131      	bne.n	8005e64 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e00:	4b24      	ldr	r3, [pc, #144]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e06:	4a23      	ldr	r2, [pc, #140]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e10:	4b20      	ldr	r3, [pc, #128]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e18:	4a1e      	ldr	r2, [pc, #120]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e20:	4b1d      	ldr	r3, [pc, #116]	@ (8005e98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2232      	movs	r2, #50	@ 0x32
 8005e26:	fb02 f303 	mul.w	r3, r2, r3
 8005e2a:	4a1c      	ldr	r2, [pc, #112]	@ (8005e9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e30:	0c9b      	lsrs	r3, r3, #18
 8005e32:	3301      	adds	r3, #1
 8005e34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e36:	e002      	b.n	8005e3e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e3e:	4b15      	ldr	r3, [pc, #84]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e4a:	d102      	bne.n	8005e52 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1f2      	bne.n	8005e38 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e52:	4b10      	ldr	r3, [pc, #64]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e5e:	d112      	bne.n	8005e86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e011      	b.n	8005e88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e64:	4b0b      	ldr	r3, [pc, #44]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005e74:	e007      	b.n	8005e86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e76:	4b07      	ldr	r3, [pc, #28]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e7e:	4a05      	ldr	r2, [pc, #20]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e80:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005e84:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	40007000 	.word	0x40007000
 8005e98:	20000000 	.word	0x20000000
 8005e9c:	431bde83 	.word	0x431bde83

08005ea0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005ea4:	4b05      	ldr	r3, [pc, #20]	@ (8005ebc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	4a04      	ldr	r2, [pc, #16]	@ (8005ebc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005eaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005eae:	6093      	str	r3, [r2, #8]
}
 8005eb0:	bf00      	nop
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	40007000 	.word	0x40007000

08005ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b088      	sub	sp, #32
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e2fe      	b.n	80064d0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d075      	beq.n	8005fca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ede:	4b97      	ldr	r3, [pc, #604]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f003 030c 	and.w	r3, r3, #12
 8005ee6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ee8:	4b94      	ldr	r3, [pc, #592]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f003 0303 	and.w	r3, r3, #3
 8005ef0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	2b0c      	cmp	r3, #12
 8005ef6:	d102      	bne.n	8005efe <HAL_RCC_OscConfig+0x3e>
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	d002      	beq.n	8005f04 <HAL_RCC_OscConfig+0x44>
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	2b08      	cmp	r3, #8
 8005f02:	d10b      	bne.n	8005f1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f04:	4b8d      	ldr	r3, [pc, #564]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d05b      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x108>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d157      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e2d9      	b.n	80064d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f24:	d106      	bne.n	8005f34 <HAL_RCC_OscConfig+0x74>
 8005f26:	4b85      	ldr	r3, [pc, #532]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a84      	ldr	r2, [pc, #528]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 8005f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f30:	6013      	str	r3, [r2, #0]
 8005f32:	e01d      	b.n	8005f70 <HAL_RCC_OscConfig+0xb0>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f3c:	d10c      	bne.n	8005f58 <HAL_RCC_OscConfig+0x98>
 8005f3e:	4b7f      	ldr	r3, [pc, #508]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a7e      	ldr	r2, [pc, #504]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 8005f44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f48:	6013      	str	r3, [r2, #0]
 8005f4a:	4b7c      	ldr	r3, [pc, #496]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a7b      	ldr	r2, [pc, #492]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 8005f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f54:	6013      	str	r3, [r2, #0]
 8005f56:	e00b      	b.n	8005f70 <HAL_RCC_OscConfig+0xb0>
 8005f58:	4b78      	ldr	r3, [pc, #480]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a77      	ldr	r2, [pc, #476]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 8005f5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f62:	6013      	str	r3, [r2, #0]
 8005f64:	4b75      	ldr	r3, [pc, #468]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a74      	ldr	r2, [pc, #464]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 8005f6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d013      	beq.n	8005fa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f78:	f7fc fac6 	bl	8002508 <HAL_GetTick>
 8005f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f7e:	e008      	b.n	8005f92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f80:	f7fc fac2 	bl	8002508 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	2b64      	cmp	r3, #100	@ 0x64
 8005f8c:	d901      	bls.n	8005f92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e29e      	b.n	80064d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f92:	4b6a      	ldr	r3, [pc, #424]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d0f0      	beq.n	8005f80 <HAL_RCC_OscConfig+0xc0>
 8005f9e:	e014      	b.n	8005fca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa0:	f7fc fab2 	bl	8002508 <HAL_GetTick>
 8005fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005fa6:	e008      	b.n	8005fba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fa8:	f7fc faae 	bl	8002508 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b64      	cmp	r3, #100	@ 0x64
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e28a      	b.n	80064d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005fba:	4b60      	ldr	r3, [pc, #384]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1f0      	bne.n	8005fa8 <HAL_RCC_OscConfig+0xe8>
 8005fc6:	e000      	b.n	8005fca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d075      	beq.n	80060c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fd6:	4b59      	ldr	r3, [pc, #356]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f003 030c 	and.w	r3, r3, #12
 8005fde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fe0:	4b56      	ldr	r3, [pc, #344]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f003 0303 	and.w	r3, r3, #3
 8005fe8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	2b0c      	cmp	r3, #12
 8005fee:	d102      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x136>
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d002      	beq.n	8005ffc <HAL_RCC_OscConfig+0x13c>
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	2b04      	cmp	r3, #4
 8005ffa:	d11f      	bne.n	800603c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ffc:	4b4f      	ldr	r3, [pc, #316]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006004:	2b00      	cmp	r3, #0
 8006006:	d005      	beq.n	8006014 <HAL_RCC_OscConfig+0x154>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e25d      	b.n	80064d0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006014:	4b49      	ldr	r3, [pc, #292]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	061b      	lsls	r3, r3, #24
 8006022:	4946      	ldr	r1, [pc, #280]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 8006024:	4313      	orrs	r3, r2
 8006026:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006028:	4b45      	ldr	r3, [pc, #276]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4618      	mov	r0, r3
 800602e:	f7fc fa1f 	bl	8002470 <HAL_InitTick>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d043      	beq.n	80060c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e249      	b.n	80064d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d023      	beq.n	800608c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006044:	4b3d      	ldr	r3, [pc, #244]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a3c      	ldr	r2, [pc, #240]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 800604a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800604e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006050:	f7fc fa5a 	bl	8002508 <HAL_GetTick>
 8006054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006056:	e008      	b.n	800606a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006058:	f7fc fa56 	bl	8002508 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b02      	cmp	r3, #2
 8006064:	d901      	bls.n	800606a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e232      	b.n	80064d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800606a:	4b34      	ldr	r3, [pc, #208]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006072:	2b00      	cmp	r3, #0
 8006074:	d0f0      	beq.n	8006058 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006076:	4b31      	ldr	r3, [pc, #196]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	061b      	lsls	r3, r3, #24
 8006084:	492d      	ldr	r1, [pc, #180]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 8006086:	4313      	orrs	r3, r2
 8006088:	604b      	str	r3, [r1, #4]
 800608a:	e01a      	b.n	80060c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800608c:	4b2b      	ldr	r3, [pc, #172]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a2a      	ldr	r2, [pc, #168]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 8006092:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006098:	f7fc fa36 	bl	8002508 <HAL_GetTick>
 800609c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800609e:	e008      	b.n	80060b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060a0:	f7fc fa32 	bl	8002508 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e20e      	b.n	80064d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80060b2:	4b22      	ldr	r3, [pc, #136]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1f0      	bne.n	80060a0 <HAL_RCC_OscConfig+0x1e0>
 80060be:	e000      	b.n	80060c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0308 	and.w	r3, r3, #8
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d041      	beq.n	8006152 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d01c      	beq.n	8006110 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060d6:	4b19      	ldr	r3, [pc, #100]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 80060d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060dc:	4a17      	ldr	r2, [pc, #92]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 80060de:	f043 0301 	orr.w	r3, r3, #1
 80060e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060e6:	f7fc fa0f 	bl	8002508 <HAL_GetTick>
 80060ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060ec:	e008      	b.n	8006100 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060ee:	f7fc fa0b 	bl	8002508 <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d901      	bls.n	8006100 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e1e7      	b.n	80064d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006100:	4b0e      	ldr	r3, [pc, #56]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 8006102:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d0ef      	beq.n	80060ee <HAL_RCC_OscConfig+0x22e>
 800610e:	e020      	b.n	8006152 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006110:	4b0a      	ldr	r3, [pc, #40]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 8006112:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006116:	4a09      	ldr	r2, [pc, #36]	@ (800613c <HAL_RCC_OscConfig+0x27c>)
 8006118:	f023 0301 	bic.w	r3, r3, #1
 800611c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006120:	f7fc f9f2 	bl	8002508 <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006126:	e00d      	b.n	8006144 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006128:	f7fc f9ee 	bl	8002508 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d906      	bls.n	8006144 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e1ca      	b.n	80064d0 <HAL_RCC_OscConfig+0x610>
 800613a:	bf00      	nop
 800613c:	40021000 	.word	0x40021000
 8006140:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006144:	4b8c      	ldr	r3, [pc, #560]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 8006146:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1ea      	bne.n	8006128 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0304 	and.w	r3, r3, #4
 800615a:	2b00      	cmp	r3, #0
 800615c:	f000 80a6 	beq.w	80062ac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006160:	2300      	movs	r3, #0
 8006162:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006164:	4b84      	ldr	r3, [pc, #528]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 8006166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <HAL_RCC_OscConfig+0x2b4>
 8006170:	2301      	movs	r3, #1
 8006172:	e000      	b.n	8006176 <HAL_RCC_OscConfig+0x2b6>
 8006174:	2300      	movs	r3, #0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00d      	beq.n	8006196 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800617a:	4b7f      	ldr	r3, [pc, #508]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 800617c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800617e:	4a7e      	ldr	r2, [pc, #504]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 8006180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006184:	6593      	str	r3, [r2, #88]	@ 0x58
 8006186:	4b7c      	ldr	r3, [pc, #496]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 8006188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800618a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800618e:	60fb      	str	r3, [r7, #12]
 8006190:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006192:	2301      	movs	r3, #1
 8006194:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006196:	4b79      	ldr	r3, [pc, #484]	@ (800637c <HAL_RCC_OscConfig+0x4bc>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d118      	bne.n	80061d4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061a2:	4b76      	ldr	r3, [pc, #472]	@ (800637c <HAL_RCC_OscConfig+0x4bc>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a75      	ldr	r2, [pc, #468]	@ (800637c <HAL_RCC_OscConfig+0x4bc>)
 80061a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061ae:	f7fc f9ab 	bl	8002508 <HAL_GetTick>
 80061b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061b4:	e008      	b.n	80061c8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061b6:	f7fc f9a7 	bl	8002508 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d901      	bls.n	80061c8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e183      	b.n	80064d0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061c8:	4b6c      	ldr	r3, [pc, #432]	@ (800637c <HAL_RCC_OscConfig+0x4bc>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d0f0      	beq.n	80061b6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d108      	bne.n	80061ee <HAL_RCC_OscConfig+0x32e>
 80061dc:	4b66      	ldr	r3, [pc, #408]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 80061de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061e2:	4a65      	ldr	r2, [pc, #404]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 80061e4:	f043 0301 	orr.w	r3, r3, #1
 80061e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80061ec:	e024      	b.n	8006238 <HAL_RCC_OscConfig+0x378>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	2b05      	cmp	r3, #5
 80061f4:	d110      	bne.n	8006218 <HAL_RCC_OscConfig+0x358>
 80061f6:	4b60      	ldr	r3, [pc, #384]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 80061f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061fc:	4a5e      	ldr	r2, [pc, #376]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 80061fe:	f043 0304 	orr.w	r3, r3, #4
 8006202:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006206:	4b5c      	ldr	r3, [pc, #368]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 8006208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800620c:	4a5a      	ldr	r2, [pc, #360]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 800620e:	f043 0301 	orr.w	r3, r3, #1
 8006212:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006216:	e00f      	b.n	8006238 <HAL_RCC_OscConfig+0x378>
 8006218:	4b57      	ldr	r3, [pc, #348]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 800621a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800621e:	4a56      	ldr	r2, [pc, #344]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 8006220:	f023 0301 	bic.w	r3, r3, #1
 8006224:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006228:	4b53      	ldr	r3, [pc, #332]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 800622a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800622e:	4a52      	ldr	r2, [pc, #328]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 8006230:	f023 0304 	bic.w	r3, r3, #4
 8006234:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d016      	beq.n	800626e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006240:	f7fc f962 	bl	8002508 <HAL_GetTick>
 8006244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006246:	e00a      	b.n	800625e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006248:	f7fc f95e 	bl	8002508 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006256:	4293      	cmp	r3, r2
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e138      	b.n	80064d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800625e:	4b46      	ldr	r3, [pc, #280]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 8006260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b00      	cmp	r3, #0
 800626a:	d0ed      	beq.n	8006248 <HAL_RCC_OscConfig+0x388>
 800626c:	e015      	b.n	800629a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800626e:	f7fc f94b 	bl	8002508 <HAL_GetTick>
 8006272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006274:	e00a      	b.n	800628c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006276:	f7fc f947 	bl	8002508 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006284:	4293      	cmp	r3, r2
 8006286:	d901      	bls.n	800628c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e121      	b.n	80064d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800628c:	4b3a      	ldr	r3, [pc, #232]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 800628e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1ed      	bne.n	8006276 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800629a:	7ffb      	ldrb	r3, [r7, #31]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d105      	bne.n	80062ac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062a0:	4b35      	ldr	r3, [pc, #212]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 80062a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062a4:	4a34      	ldr	r2, [pc, #208]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 80062a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062aa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0320 	and.w	r3, r3, #32
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d03c      	beq.n	8006332 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d01c      	beq.n	80062fa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062c0:	4b2d      	ldr	r3, [pc, #180]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 80062c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062c6:	4a2c      	ldr	r2, [pc, #176]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 80062c8:	f043 0301 	orr.w	r3, r3, #1
 80062cc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062d0:	f7fc f91a 	bl	8002508 <HAL_GetTick>
 80062d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80062d6:	e008      	b.n	80062ea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062d8:	f7fc f916 	bl	8002508 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d901      	bls.n	80062ea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e0f2      	b.n	80064d0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80062ea:	4b23      	ldr	r3, [pc, #140]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 80062ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d0ef      	beq.n	80062d8 <HAL_RCC_OscConfig+0x418>
 80062f8:	e01b      	b.n	8006332 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80062fa:	4b1f      	ldr	r3, [pc, #124]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 80062fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006300:	4a1d      	ldr	r2, [pc, #116]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 8006302:	f023 0301 	bic.w	r3, r3, #1
 8006306:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800630a:	f7fc f8fd 	bl	8002508 <HAL_GetTick>
 800630e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006310:	e008      	b.n	8006324 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006312:	f7fc f8f9 	bl	8002508 <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	2b02      	cmp	r3, #2
 800631e:	d901      	bls.n	8006324 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e0d5      	b.n	80064d0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006324:	4b14      	ldr	r3, [pc, #80]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 8006326:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1ef      	bne.n	8006312 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	2b00      	cmp	r3, #0
 8006338:	f000 80c9 	beq.w	80064ce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800633c:	4b0e      	ldr	r3, [pc, #56]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f003 030c 	and.w	r3, r3, #12
 8006344:	2b0c      	cmp	r3, #12
 8006346:	f000 8083 	beq.w	8006450 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	69db      	ldr	r3, [r3, #28]
 800634e:	2b02      	cmp	r3, #2
 8006350:	d15e      	bne.n	8006410 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006352:	4b09      	ldr	r3, [pc, #36]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a08      	ldr	r2, [pc, #32]	@ (8006378 <HAL_RCC_OscConfig+0x4b8>)
 8006358:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800635c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800635e:	f7fc f8d3 	bl	8002508 <HAL_GetTick>
 8006362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006364:	e00c      	b.n	8006380 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006366:	f7fc f8cf 	bl	8002508 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	2b02      	cmp	r3, #2
 8006372:	d905      	bls.n	8006380 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e0ab      	b.n	80064d0 <HAL_RCC_OscConfig+0x610>
 8006378:	40021000 	.word	0x40021000
 800637c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006380:	4b55      	ldr	r3, [pc, #340]	@ (80064d8 <HAL_RCC_OscConfig+0x618>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1ec      	bne.n	8006366 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800638c:	4b52      	ldr	r3, [pc, #328]	@ (80064d8 <HAL_RCC_OscConfig+0x618>)
 800638e:	68da      	ldr	r2, [r3, #12]
 8006390:	4b52      	ldr	r3, [pc, #328]	@ (80064dc <HAL_RCC_OscConfig+0x61c>)
 8006392:	4013      	ands	r3, r2
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	6a11      	ldr	r1, [r2, #32]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800639c:	3a01      	subs	r2, #1
 800639e:	0112      	lsls	r2, r2, #4
 80063a0:	4311      	orrs	r1, r2
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80063a6:	0212      	lsls	r2, r2, #8
 80063a8:	4311      	orrs	r1, r2
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80063ae:	0852      	lsrs	r2, r2, #1
 80063b0:	3a01      	subs	r2, #1
 80063b2:	0552      	lsls	r2, r2, #21
 80063b4:	4311      	orrs	r1, r2
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80063ba:	0852      	lsrs	r2, r2, #1
 80063bc:	3a01      	subs	r2, #1
 80063be:	0652      	lsls	r2, r2, #25
 80063c0:	4311      	orrs	r1, r2
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80063c6:	06d2      	lsls	r2, r2, #27
 80063c8:	430a      	orrs	r2, r1
 80063ca:	4943      	ldr	r1, [pc, #268]	@ (80064d8 <HAL_RCC_OscConfig+0x618>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063d0:	4b41      	ldr	r3, [pc, #260]	@ (80064d8 <HAL_RCC_OscConfig+0x618>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a40      	ldr	r2, [pc, #256]	@ (80064d8 <HAL_RCC_OscConfig+0x618>)
 80063d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063da:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063dc:	4b3e      	ldr	r3, [pc, #248]	@ (80064d8 <HAL_RCC_OscConfig+0x618>)
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	4a3d      	ldr	r2, [pc, #244]	@ (80064d8 <HAL_RCC_OscConfig+0x618>)
 80063e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e8:	f7fc f88e 	bl	8002508 <HAL_GetTick>
 80063ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063ee:	e008      	b.n	8006402 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063f0:	f7fc f88a 	bl	8002508 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e066      	b.n	80064d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006402:	4b35      	ldr	r3, [pc, #212]	@ (80064d8 <HAL_RCC_OscConfig+0x618>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0f0      	beq.n	80063f0 <HAL_RCC_OscConfig+0x530>
 800640e:	e05e      	b.n	80064ce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006410:	4b31      	ldr	r3, [pc, #196]	@ (80064d8 <HAL_RCC_OscConfig+0x618>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a30      	ldr	r2, [pc, #192]	@ (80064d8 <HAL_RCC_OscConfig+0x618>)
 8006416:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800641a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800641c:	f7fc f874 	bl	8002508 <HAL_GetTick>
 8006420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006422:	e008      	b.n	8006436 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006424:	f7fc f870 	bl	8002508 <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	2b02      	cmp	r3, #2
 8006430:	d901      	bls.n	8006436 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e04c      	b.n	80064d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006436:	4b28      	ldr	r3, [pc, #160]	@ (80064d8 <HAL_RCC_OscConfig+0x618>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1f0      	bne.n	8006424 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006442:	4b25      	ldr	r3, [pc, #148]	@ (80064d8 <HAL_RCC_OscConfig+0x618>)
 8006444:	68da      	ldr	r2, [r3, #12]
 8006446:	4924      	ldr	r1, [pc, #144]	@ (80064d8 <HAL_RCC_OscConfig+0x618>)
 8006448:	4b25      	ldr	r3, [pc, #148]	@ (80064e0 <HAL_RCC_OscConfig+0x620>)
 800644a:	4013      	ands	r3, r2
 800644c:	60cb      	str	r3, [r1, #12]
 800644e:	e03e      	b.n	80064ce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d101      	bne.n	800645c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e039      	b.n	80064d0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800645c:	4b1e      	ldr	r3, [pc, #120]	@ (80064d8 <HAL_RCC_OscConfig+0x618>)
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f003 0203 	and.w	r2, r3, #3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	429a      	cmp	r2, r3
 800646e:	d12c      	bne.n	80064ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647a:	3b01      	subs	r3, #1
 800647c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800647e:	429a      	cmp	r2, r3
 8006480:	d123      	bne.n	80064ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800648c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800648e:	429a      	cmp	r2, r3
 8006490:	d11b      	bne.n	80064ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800649e:	429a      	cmp	r2, r3
 80064a0:	d113      	bne.n	80064ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ac:	085b      	lsrs	r3, r3, #1
 80064ae:	3b01      	subs	r3, #1
 80064b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d109      	bne.n	80064ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064c0:	085b      	lsrs	r3, r3, #1
 80064c2:	3b01      	subs	r3, #1
 80064c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d001      	beq.n	80064ce <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e000      	b.n	80064d0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3720      	adds	r7, #32
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	40021000 	.word	0x40021000
 80064dc:	019f800c 	.word	0x019f800c
 80064e0:	feeefffc 	.word	0xfeeefffc

080064e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80064ee:	2300      	movs	r3, #0
 80064f0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e11e      	b.n	800673a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064fc:	4b91      	ldr	r3, [pc, #580]	@ (8006744 <HAL_RCC_ClockConfig+0x260>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 030f 	and.w	r3, r3, #15
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	429a      	cmp	r2, r3
 8006508:	d910      	bls.n	800652c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800650a:	4b8e      	ldr	r3, [pc, #568]	@ (8006744 <HAL_RCC_ClockConfig+0x260>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f023 020f 	bic.w	r2, r3, #15
 8006512:	498c      	ldr	r1, [pc, #560]	@ (8006744 <HAL_RCC_ClockConfig+0x260>)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	4313      	orrs	r3, r2
 8006518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800651a:	4b8a      	ldr	r3, [pc, #552]	@ (8006744 <HAL_RCC_ClockConfig+0x260>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 030f 	and.w	r3, r3, #15
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	429a      	cmp	r2, r3
 8006526:	d001      	beq.n	800652c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e106      	b.n	800673a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b00      	cmp	r3, #0
 8006536:	d073      	beq.n	8006620 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	2b03      	cmp	r3, #3
 800653e:	d129      	bne.n	8006594 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006540:	4b81      	ldr	r3, [pc, #516]	@ (8006748 <HAL_RCC_ClockConfig+0x264>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e0f4      	b.n	800673a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006550:	f000 f99e 	bl	8006890 <RCC_GetSysClockFreqFromPLLSource>
 8006554:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	4a7c      	ldr	r2, [pc, #496]	@ (800674c <HAL_RCC_ClockConfig+0x268>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d93f      	bls.n	80065de <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800655e:	4b7a      	ldr	r3, [pc, #488]	@ (8006748 <HAL_RCC_ClockConfig+0x264>)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d009      	beq.n	800657e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006572:	2b00      	cmp	r3, #0
 8006574:	d033      	beq.n	80065de <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800657a:	2b00      	cmp	r3, #0
 800657c:	d12f      	bne.n	80065de <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800657e:	4b72      	ldr	r3, [pc, #456]	@ (8006748 <HAL_RCC_ClockConfig+0x264>)
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006586:	4a70      	ldr	r2, [pc, #448]	@ (8006748 <HAL_RCC_ClockConfig+0x264>)
 8006588:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800658c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800658e:	2380      	movs	r3, #128	@ 0x80
 8006590:	617b      	str	r3, [r7, #20]
 8006592:	e024      	b.n	80065de <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	2b02      	cmp	r3, #2
 800659a:	d107      	bne.n	80065ac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800659c:	4b6a      	ldr	r3, [pc, #424]	@ (8006748 <HAL_RCC_ClockConfig+0x264>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d109      	bne.n	80065bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e0c6      	b.n	800673a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065ac:	4b66      	ldr	r3, [pc, #408]	@ (8006748 <HAL_RCC_ClockConfig+0x264>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e0be      	b.n	800673a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80065bc:	f000 f8ce 	bl	800675c <HAL_RCC_GetSysClockFreq>
 80065c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	4a61      	ldr	r2, [pc, #388]	@ (800674c <HAL_RCC_ClockConfig+0x268>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d909      	bls.n	80065de <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80065ca:	4b5f      	ldr	r3, [pc, #380]	@ (8006748 <HAL_RCC_ClockConfig+0x264>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065d2:	4a5d      	ldr	r2, [pc, #372]	@ (8006748 <HAL_RCC_ClockConfig+0x264>)
 80065d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80065da:	2380      	movs	r3, #128	@ 0x80
 80065dc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065de:	4b5a      	ldr	r3, [pc, #360]	@ (8006748 <HAL_RCC_ClockConfig+0x264>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f023 0203 	bic.w	r2, r3, #3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	4957      	ldr	r1, [pc, #348]	@ (8006748 <HAL_RCC_ClockConfig+0x264>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065f0:	f7fb ff8a 	bl	8002508 <HAL_GetTick>
 80065f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065f6:	e00a      	b.n	800660e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065f8:	f7fb ff86 	bl	8002508 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006606:	4293      	cmp	r3, r2
 8006608:	d901      	bls.n	800660e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e095      	b.n	800673a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800660e:	4b4e      	ldr	r3, [pc, #312]	@ (8006748 <HAL_RCC_ClockConfig+0x264>)
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f003 020c 	and.w	r2, r3, #12
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	429a      	cmp	r2, r3
 800661e:	d1eb      	bne.n	80065f8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d023      	beq.n	8006674 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0304 	and.w	r3, r3, #4
 8006634:	2b00      	cmp	r3, #0
 8006636:	d005      	beq.n	8006644 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006638:	4b43      	ldr	r3, [pc, #268]	@ (8006748 <HAL_RCC_ClockConfig+0x264>)
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	4a42      	ldr	r2, [pc, #264]	@ (8006748 <HAL_RCC_ClockConfig+0x264>)
 800663e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006642:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0308 	and.w	r3, r3, #8
 800664c:	2b00      	cmp	r3, #0
 800664e:	d007      	beq.n	8006660 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006650:	4b3d      	ldr	r3, [pc, #244]	@ (8006748 <HAL_RCC_ClockConfig+0x264>)
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006658:	4a3b      	ldr	r2, [pc, #236]	@ (8006748 <HAL_RCC_ClockConfig+0x264>)
 800665a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800665e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006660:	4b39      	ldr	r3, [pc, #228]	@ (8006748 <HAL_RCC_ClockConfig+0x264>)
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	4936      	ldr	r1, [pc, #216]	@ (8006748 <HAL_RCC_ClockConfig+0x264>)
 800666e:	4313      	orrs	r3, r2
 8006670:	608b      	str	r3, [r1, #8]
 8006672:	e008      	b.n	8006686 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	2b80      	cmp	r3, #128	@ 0x80
 8006678:	d105      	bne.n	8006686 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800667a:	4b33      	ldr	r3, [pc, #204]	@ (8006748 <HAL_RCC_ClockConfig+0x264>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	4a32      	ldr	r2, [pc, #200]	@ (8006748 <HAL_RCC_ClockConfig+0x264>)
 8006680:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006684:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006686:	4b2f      	ldr	r3, [pc, #188]	@ (8006744 <HAL_RCC_ClockConfig+0x260>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 030f 	and.w	r3, r3, #15
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	429a      	cmp	r2, r3
 8006692:	d21d      	bcs.n	80066d0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006694:	4b2b      	ldr	r3, [pc, #172]	@ (8006744 <HAL_RCC_ClockConfig+0x260>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f023 020f 	bic.w	r2, r3, #15
 800669c:	4929      	ldr	r1, [pc, #164]	@ (8006744 <HAL_RCC_ClockConfig+0x260>)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80066a4:	f7fb ff30 	bl	8002508 <HAL_GetTick>
 80066a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066aa:	e00a      	b.n	80066c2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066ac:	f7fb ff2c 	bl	8002508 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d901      	bls.n	80066c2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e03b      	b.n	800673a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066c2:	4b20      	ldr	r3, [pc, #128]	@ (8006744 <HAL_RCC_ClockConfig+0x260>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 030f 	and.w	r3, r3, #15
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d1ed      	bne.n	80066ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0304 	and.w	r3, r3, #4
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d008      	beq.n	80066ee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066dc:	4b1a      	ldr	r3, [pc, #104]	@ (8006748 <HAL_RCC_ClockConfig+0x264>)
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	4917      	ldr	r1, [pc, #92]	@ (8006748 <HAL_RCC_ClockConfig+0x264>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0308 	and.w	r3, r3, #8
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d009      	beq.n	800670e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066fa:	4b13      	ldr	r3, [pc, #76]	@ (8006748 <HAL_RCC_ClockConfig+0x264>)
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	00db      	lsls	r3, r3, #3
 8006708:	490f      	ldr	r1, [pc, #60]	@ (8006748 <HAL_RCC_ClockConfig+0x264>)
 800670a:	4313      	orrs	r3, r2
 800670c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800670e:	f000 f825 	bl	800675c <HAL_RCC_GetSysClockFreq>
 8006712:	4602      	mov	r2, r0
 8006714:	4b0c      	ldr	r3, [pc, #48]	@ (8006748 <HAL_RCC_ClockConfig+0x264>)
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	091b      	lsrs	r3, r3, #4
 800671a:	f003 030f 	and.w	r3, r3, #15
 800671e:	490c      	ldr	r1, [pc, #48]	@ (8006750 <HAL_RCC_ClockConfig+0x26c>)
 8006720:	5ccb      	ldrb	r3, [r1, r3]
 8006722:	f003 031f 	and.w	r3, r3, #31
 8006726:	fa22 f303 	lsr.w	r3, r2, r3
 800672a:	4a0a      	ldr	r2, [pc, #40]	@ (8006754 <HAL_RCC_ClockConfig+0x270>)
 800672c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800672e:	4b0a      	ldr	r3, [pc, #40]	@ (8006758 <HAL_RCC_ClockConfig+0x274>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4618      	mov	r0, r3
 8006734:	f7fb fe9c 	bl	8002470 <HAL_InitTick>
 8006738:	4603      	mov	r3, r0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3718      	adds	r7, #24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	40022000 	.word	0x40022000
 8006748:	40021000 	.word	0x40021000
 800674c:	04c4b400 	.word	0x04c4b400
 8006750:	08013680 	.word	0x08013680
 8006754:	20000000 	.word	0x20000000
 8006758:	20000004 	.word	0x20000004

0800675c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800675c:	b480      	push	{r7}
 800675e:	b087      	sub	sp, #28
 8006760:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006762:	4b2c      	ldr	r3, [pc, #176]	@ (8006814 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f003 030c 	and.w	r3, r3, #12
 800676a:	2b04      	cmp	r3, #4
 800676c:	d102      	bne.n	8006774 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800676e:	4b2a      	ldr	r3, [pc, #168]	@ (8006818 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006770:	613b      	str	r3, [r7, #16]
 8006772:	e047      	b.n	8006804 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006774:	4b27      	ldr	r3, [pc, #156]	@ (8006814 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f003 030c 	and.w	r3, r3, #12
 800677c:	2b08      	cmp	r3, #8
 800677e:	d102      	bne.n	8006786 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006780:	4b26      	ldr	r3, [pc, #152]	@ (800681c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006782:	613b      	str	r3, [r7, #16]
 8006784:	e03e      	b.n	8006804 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006786:	4b23      	ldr	r3, [pc, #140]	@ (8006814 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f003 030c 	and.w	r3, r3, #12
 800678e:	2b0c      	cmp	r3, #12
 8006790:	d136      	bne.n	8006800 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006792:	4b20      	ldr	r3, [pc, #128]	@ (8006814 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	f003 0303 	and.w	r3, r3, #3
 800679a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800679c:	4b1d      	ldr	r3, [pc, #116]	@ (8006814 <HAL_RCC_GetSysClockFreq+0xb8>)
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	091b      	lsrs	r3, r3, #4
 80067a2:	f003 030f 	and.w	r3, r3, #15
 80067a6:	3301      	adds	r3, #1
 80067a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2b03      	cmp	r3, #3
 80067ae:	d10c      	bne.n	80067ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067b0:	4a1a      	ldr	r2, [pc, #104]	@ (800681c <HAL_RCC_GetSysClockFreq+0xc0>)
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b8:	4a16      	ldr	r2, [pc, #88]	@ (8006814 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067ba:	68d2      	ldr	r2, [r2, #12]
 80067bc:	0a12      	lsrs	r2, r2, #8
 80067be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80067c2:	fb02 f303 	mul.w	r3, r2, r3
 80067c6:	617b      	str	r3, [r7, #20]
      break;
 80067c8:	e00c      	b.n	80067e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067ca:	4a13      	ldr	r2, [pc, #76]	@ (8006818 <HAL_RCC_GetSysClockFreq+0xbc>)
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d2:	4a10      	ldr	r2, [pc, #64]	@ (8006814 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067d4:	68d2      	ldr	r2, [r2, #12]
 80067d6:	0a12      	lsrs	r2, r2, #8
 80067d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80067dc:	fb02 f303 	mul.w	r3, r2, r3
 80067e0:	617b      	str	r3, [r7, #20]
      break;
 80067e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80067e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006814 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	0e5b      	lsrs	r3, r3, #25
 80067ea:	f003 0303 	and.w	r3, r3, #3
 80067ee:	3301      	adds	r3, #1
 80067f0:	005b      	lsls	r3, r3, #1
 80067f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067fc:	613b      	str	r3, [r7, #16]
 80067fe:	e001      	b.n	8006804 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006800:	2300      	movs	r3, #0
 8006802:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006804:	693b      	ldr	r3, [r7, #16]
}
 8006806:	4618      	mov	r0, r3
 8006808:	371c      	adds	r7, #28
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	40021000 	.word	0x40021000
 8006818:	00f42400 	.word	0x00f42400
 800681c:	016e3600 	.word	0x016e3600

08006820 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006820:	b480      	push	{r7}
 8006822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006824:	4b03      	ldr	r3, [pc, #12]	@ (8006834 <HAL_RCC_GetHCLKFreq+0x14>)
 8006826:	681b      	ldr	r3, [r3, #0]
}
 8006828:	4618      	mov	r0, r3
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	20000000 	.word	0x20000000

08006838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800683c:	f7ff fff0 	bl	8006820 <HAL_RCC_GetHCLKFreq>
 8006840:	4602      	mov	r2, r0
 8006842:	4b06      	ldr	r3, [pc, #24]	@ (800685c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	0a1b      	lsrs	r3, r3, #8
 8006848:	f003 0307 	and.w	r3, r3, #7
 800684c:	4904      	ldr	r1, [pc, #16]	@ (8006860 <HAL_RCC_GetPCLK1Freq+0x28>)
 800684e:	5ccb      	ldrb	r3, [r1, r3]
 8006850:	f003 031f 	and.w	r3, r3, #31
 8006854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006858:	4618      	mov	r0, r3
 800685a:	bd80      	pop	{r7, pc}
 800685c:	40021000 	.word	0x40021000
 8006860:	08013690 	.word	0x08013690

08006864 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006868:	f7ff ffda 	bl	8006820 <HAL_RCC_GetHCLKFreq>
 800686c:	4602      	mov	r2, r0
 800686e:	4b06      	ldr	r3, [pc, #24]	@ (8006888 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	0adb      	lsrs	r3, r3, #11
 8006874:	f003 0307 	and.w	r3, r3, #7
 8006878:	4904      	ldr	r1, [pc, #16]	@ (800688c <HAL_RCC_GetPCLK2Freq+0x28>)
 800687a:	5ccb      	ldrb	r3, [r1, r3]
 800687c:	f003 031f 	and.w	r3, r3, #31
 8006880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006884:	4618      	mov	r0, r3
 8006886:	bd80      	pop	{r7, pc}
 8006888:	40021000 	.word	0x40021000
 800688c:	08013690 	.word	0x08013690

08006890 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006890:	b480      	push	{r7}
 8006892:	b087      	sub	sp, #28
 8006894:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006896:	4b1e      	ldr	r3, [pc, #120]	@ (8006910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f003 0303 	and.w	r3, r3, #3
 800689e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80068a0:	4b1b      	ldr	r3, [pc, #108]	@ (8006910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	091b      	lsrs	r3, r3, #4
 80068a6:	f003 030f 	and.w	r3, r3, #15
 80068aa:	3301      	adds	r3, #1
 80068ac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	2b03      	cmp	r3, #3
 80068b2:	d10c      	bne.n	80068ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80068b4:	4a17      	ldr	r2, [pc, #92]	@ (8006914 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068bc:	4a14      	ldr	r2, [pc, #80]	@ (8006910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80068be:	68d2      	ldr	r2, [r2, #12]
 80068c0:	0a12      	lsrs	r2, r2, #8
 80068c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80068c6:	fb02 f303 	mul.w	r3, r2, r3
 80068ca:	617b      	str	r3, [r7, #20]
    break;
 80068cc:	e00c      	b.n	80068e8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80068ce:	4a12      	ldr	r2, [pc, #72]	@ (8006918 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d6:	4a0e      	ldr	r2, [pc, #56]	@ (8006910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80068d8:	68d2      	ldr	r2, [r2, #12]
 80068da:	0a12      	lsrs	r2, r2, #8
 80068dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80068e0:	fb02 f303 	mul.w	r3, r2, r3
 80068e4:	617b      	str	r3, [r7, #20]
    break;
 80068e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80068e8:	4b09      	ldr	r3, [pc, #36]	@ (8006910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	0e5b      	lsrs	r3, r3, #25
 80068ee:	f003 0303 	and.w	r3, r3, #3
 80068f2:	3301      	adds	r3, #1
 80068f4:	005b      	lsls	r3, r3, #1
 80068f6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006900:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006902:	687b      	ldr	r3, [r7, #4]
}
 8006904:	4618      	mov	r0, r3
 8006906:	371c      	adds	r7, #28
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	40021000 	.word	0x40021000
 8006914:	016e3600 	.word	0x016e3600
 8006918:	00f42400 	.word	0x00f42400

0800691c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006924:	2300      	movs	r3, #0
 8006926:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006928:	2300      	movs	r3, #0
 800692a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006934:	2b00      	cmp	r3, #0
 8006936:	f000 8098 	beq.w	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800693a:	2300      	movs	r3, #0
 800693c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800693e:	4b43      	ldr	r3, [pc, #268]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10d      	bne.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800694a:	4b40      	ldr	r3, [pc, #256]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800694c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800694e:	4a3f      	ldr	r2, [pc, #252]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006954:	6593      	str	r3, [r2, #88]	@ 0x58
 8006956:	4b3d      	ldr	r3, [pc, #244]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800695a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800695e:	60bb      	str	r3, [r7, #8]
 8006960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006962:	2301      	movs	r3, #1
 8006964:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006966:	4b3a      	ldr	r3, [pc, #232]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a39      	ldr	r2, [pc, #228]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800696c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006970:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006972:	f7fb fdc9 	bl	8002508 <HAL_GetTick>
 8006976:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006978:	e009      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800697a:	f7fb fdc5 	bl	8002508 <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2b02      	cmp	r3, #2
 8006986:	d902      	bls.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	74fb      	strb	r3, [r7, #19]
        break;
 800698c:	e005      	b.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800698e:	4b30      	ldr	r3, [pc, #192]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006996:	2b00      	cmp	r3, #0
 8006998:	d0ef      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800699a:	7cfb      	ldrb	r3, [r7, #19]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d159      	bne.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80069a0:	4b2a      	ldr	r3, [pc, #168]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069aa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d01e      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d019      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80069bc:	4b23      	ldr	r3, [pc, #140]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80069c8:	4b20      	ldr	r3, [pc, #128]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069ce:	4a1f      	ldr	r2, [pc, #124]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069d8:	4b1c      	ldr	r3, [pc, #112]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069de:	4a1b      	ldr	r2, [pc, #108]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80069e8:	4a18      	ldr	r2, [pc, #96]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d016      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069fa:	f7fb fd85 	bl	8002508 <HAL_GetTick>
 80069fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a00:	e00b      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a02:	f7fb fd81 	bl	8002508 <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d902      	bls.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	74fb      	strb	r3, [r7, #19]
            break;
 8006a18:	e006      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d0ec      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006a28:	7cfb      	ldrb	r3, [r7, #19]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10b      	bne.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a2e:	4b07      	ldr	r3, [pc, #28]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3c:	4903      	ldr	r1, [pc, #12]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006a44:	e008      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a46:	7cfb      	ldrb	r3, [r7, #19]
 8006a48:	74bb      	strb	r3, [r7, #18]
 8006a4a:	e005      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006a4c:	40021000 	.word	0x40021000
 8006a50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a54:	7cfb      	ldrb	r3, [r7, #19]
 8006a56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a58:	7c7b      	ldrb	r3, [r7, #17]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d105      	bne.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a5e:	4ba6      	ldr	r3, [pc, #664]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a62:	4aa5      	ldr	r2, [pc, #660]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a68:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00a      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a76:	4ba0      	ldr	r3, [pc, #640]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a7c:	f023 0203 	bic.w	r2, r3, #3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	499c      	ldr	r1, [pc, #624]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0302 	and.w	r3, r3, #2
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00a      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a98:	4b97      	ldr	r3, [pc, #604]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a9e:	f023 020c 	bic.w	r2, r3, #12
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	4994      	ldr	r1, [pc, #592]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0304 	and.w	r3, r3, #4
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00a      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006aba:	4b8f      	ldr	r3, [pc, #572]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ac0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	498b      	ldr	r1, [pc, #556]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aca:	4313      	orrs	r3, r2
 8006acc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0308 	and.w	r3, r3, #8
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00a      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006adc:	4b86      	ldr	r3, [pc, #536]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ae2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	4983      	ldr	r1, [pc, #524]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0320 	and.w	r3, r3, #32
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00a      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006afe:	4b7e      	ldr	r3, [pc, #504]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b04:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	695b      	ldr	r3, [r3, #20]
 8006b0c:	497a      	ldr	r1, [pc, #488]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00a      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b20:	4b75      	ldr	r3, [pc, #468]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b26:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	4972      	ldr	r1, [pc, #456]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00a      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b42:	4b6d      	ldr	r3, [pc, #436]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b48:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	4969      	ldr	r1, [pc, #420]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00a      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b64:	4b64      	ldr	r3, [pc, #400]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b6a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	4961      	ldr	r1, [pc, #388]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00a      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b86:	4b5c      	ldr	r3, [pc, #368]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b8c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b94:	4958      	ldr	r1, [pc, #352]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d015      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ba8:	4b53      	ldr	r3, [pc, #332]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb6:	4950      	ldr	r1, [pc, #320]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bc6:	d105      	bne.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bc8:	4b4b      	ldr	r3, [pc, #300]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	4a4a      	ldr	r2, [pc, #296]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bd2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d015      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006be0:	4b45      	ldr	r3, [pc, #276]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006be6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bee:	4942      	ldr	r1, [pc, #264]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bfe:	d105      	bne.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c00:	4b3d      	ldr	r3, [pc, #244]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	4a3c      	ldr	r2, [pc, #240]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c0a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d015      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c18:	4b37      	ldr	r3, [pc, #220]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c1e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c26:	4934      	ldr	r1, [pc, #208]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c36:	d105      	bne.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c38:	4b2f      	ldr	r3, [pc, #188]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	4a2e      	ldr	r2, [pc, #184]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c42:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d015      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c50:	4b29      	ldr	r3, [pc, #164]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c5e:	4926      	ldr	r1, [pc, #152]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c6e:	d105      	bne.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c70:	4b21      	ldr	r3, [pc, #132]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	4a20      	ldr	r2, [pc, #128]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c7a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d015      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c88:	4b1b      	ldr	r3, [pc, #108]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c96:	4918      	ldr	r1, [pc, #96]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ca6:	d105      	bne.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ca8:	4b13      	ldr	r3, [pc, #76]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	4a12      	ldr	r2, [pc, #72]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cb2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d015      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cc6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cce:	490a      	ldr	r1, [pc, #40]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cde:	d105      	bne.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006ce0:	4b05      	ldr	r3, [pc, #20]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	4a04      	ldr	r2, [pc, #16]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ce6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006cec:	7cbb      	ldrb	r3, [r7, #18]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	40021000 	.word	0x40021000

08006cfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e09d      	b.n	8006e4a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d108      	bne.n	8006d28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d1e:	d009      	beq.n	8006d34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	61da      	str	r2, [r3, #28]
 8006d26:	e005      	b.n	8006d34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d106      	bne.n	8006d54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7fa fdfe 	bl	8001950 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2202      	movs	r2, #2
 8006d58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d74:	d902      	bls.n	8006d7c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d76:	2300      	movs	r3, #0
 8006d78:	60fb      	str	r3, [r7, #12]
 8006d7a:	e002      	b.n	8006d82 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006d7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006d80:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006d8a:	d007      	beq.n	8006d9c <HAL_SPI_Init+0xa0>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d94:	d002      	beq.n	8006d9c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006dac:	431a      	orrs	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	f003 0302 	and.w	r3, r3, #2
 8006db6:	431a      	orrs	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	f003 0301 	and.w	r3, r3, #1
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dca:	431a      	orrs	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	69db      	ldr	r3, [r3, #28]
 8006dd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dde:	ea42 0103 	orr.w	r1, r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	430a      	orrs	r2, r1
 8006df0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	0c1b      	lsrs	r3, r3, #16
 8006df8:	f003 0204 	and.w	r2, r3, #4
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e00:	f003 0310 	and.w	r3, r3, #16
 8006e04:	431a      	orrs	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e0a:	f003 0308 	and.w	r3, r3, #8
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006e18:	ea42 0103 	orr.w	r1, r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	69da      	ldr	r2, [r3, #28]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b08a      	sub	sp, #40	@ 0x28
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	60f8      	str	r0, [r7, #12]
 8006e5a:	60b9      	str	r1, [r7, #8]
 8006e5c:	607a      	str	r2, [r7, #4]
 8006e5e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e60:	2301      	movs	r3, #1
 8006e62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e64:	2300      	movs	r3, #0
 8006e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d101      	bne.n	8006e78 <HAL_SPI_TransmitReceive+0x26>
 8006e74:	2302      	movs	r3, #2
 8006e76:	e20a      	b.n	800728e <HAL_SPI_TransmitReceive+0x43c>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e80:	f7fb fb42 	bl	8002508 <HAL_GetTick>
 8006e84:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e8c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006e94:	887b      	ldrh	r3, [r7, #2]
 8006e96:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006e98:	887b      	ldrh	r3, [r7, #2]
 8006e9a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e9c:	7efb      	ldrb	r3, [r7, #27]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d00e      	beq.n	8006ec0 <HAL_SPI_TransmitReceive+0x6e>
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ea8:	d106      	bne.n	8006eb8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d102      	bne.n	8006eb8 <HAL_SPI_TransmitReceive+0x66>
 8006eb2:	7efb      	ldrb	r3, [r7, #27]
 8006eb4:	2b04      	cmp	r3, #4
 8006eb6:	d003      	beq.n	8006ec0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006eb8:	2302      	movs	r3, #2
 8006eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006ebe:	e1e0      	b.n	8007282 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d005      	beq.n	8006ed2 <HAL_SPI_TransmitReceive+0x80>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d002      	beq.n	8006ed2 <HAL_SPI_TransmitReceive+0x80>
 8006ecc:	887b      	ldrh	r3, [r7, #2]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d103      	bne.n	8006eda <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006ed8:	e1d3      	b.n	8007282 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b04      	cmp	r3, #4
 8006ee4:	d003      	beq.n	8006eee <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2205      	movs	r2, #5
 8006eea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	887a      	ldrh	r2, [r7, #2]
 8006efe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	887a      	ldrh	r2, [r7, #2]
 8006f06:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	887a      	ldrh	r2, [r7, #2]
 8006f14:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	887a      	ldrh	r2, [r7, #2]
 8006f1a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006f30:	d802      	bhi.n	8006f38 <HAL_SPI_TransmitReceive+0xe6>
 8006f32:	8a3b      	ldrh	r3, [r7, #16]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d908      	bls.n	8006f4a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006f46:	605a      	str	r2, [r3, #4]
 8006f48:	e007      	b.n	8006f5a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006f58:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f64:	2b40      	cmp	r3, #64	@ 0x40
 8006f66:	d007      	beq.n	8006f78 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006f80:	f240 8081 	bls.w	8007086 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <HAL_SPI_TransmitReceive+0x140>
 8006f8c:	8a7b      	ldrh	r3, [r7, #18]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d16d      	bne.n	800706e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f96:	881a      	ldrh	r2, [r3, #0]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa2:	1c9a      	adds	r2, r3, #2
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fb6:	e05a      	b.n	800706e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f003 0302 	and.w	r3, r3, #2
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d11b      	bne.n	8006ffe <HAL_SPI_TransmitReceive+0x1ac>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d016      	beq.n	8006ffe <HAL_SPI_TransmitReceive+0x1ac>
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d113      	bne.n	8006ffe <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fda:	881a      	ldrh	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe6:	1c9a      	adds	r2, r3, #2
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	2b01      	cmp	r3, #1
 800700a:	d11c      	bne.n	8007046 <HAL_SPI_TransmitReceive+0x1f4>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007012:	b29b      	uxth	r3, r3
 8007014:	2b00      	cmp	r3, #0
 8007016:	d016      	beq.n	8007046 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68da      	ldr	r2, [r3, #12]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007022:	b292      	uxth	r2, r2
 8007024:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800702a:	1c9a      	adds	r2, r3, #2
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007036:	b29b      	uxth	r3, r3
 8007038:	3b01      	subs	r3, #1
 800703a:	b29a      	uxth	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007042:	2301      	movs	r3, #1
 8007044:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007046:	f7fb fa5f 	bl	8002508 <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007052:	429a      	cmp	r2, r3
 8007054:	d80b      	bhi.n	800706e <HAL_SPI_TransmitReceive+0x21c>
 8007056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800705c:	d007      	beq.n	800706e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800706c:	e109      	b.n	8007282 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007072:	b29b      	uxth	r3, r3
 8007074:	2b00      	cmp	r3, #0
 8007076:	d19f      	bne.n	8006fb8 <HAL_SPI_TransmitReceive+0x166>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800707e:	b29b      	uxth	r3, r3
 8007080:	2b00      	cmp	r3, #0
 8007082:	d199      	bne.n	8006fb8 <HAL_SPI_TransmitReceive+0x166>
 8007084:	e0e3      	b.n	800724e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d003      	beq.n	8007096 <HAL_SPI_TransmitReceive+0x244>
 800708e:	8a7b      	ldrh	r3, [r7, #18]
 8007090:	2b01      	cmp	r3, #1
 8007092:	f040 80cf 	bne.w	8007234 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800709a:	b29b      	uxth	r3, r3
 800709c:	2b01      	cmp	r3, #1
 800709e:	d912      	bls.n	80070c6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a4:	881a      	ldrh	r2, [r3, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b0:	1c9a      	adds	r2, r3, #2
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	3b02      	subs	r3, #2
 80070be:	b29a      	uxth	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80070c4:	e0b6      	b.n	8007234 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	330c      	adds	r3, #12
 80070d0:	7812      	ldrb	r2, [r2, #0]
 80070d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d8:	1c5a      	adds	r2, r3, #1
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	3b01      	subs	r3, #1
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070ec:	e0a2      	b.n	8007234 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	f003 0302 	and.w	r3, r3, #2
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d134      	bne.n	8007166 <HAL_SPI_TransmitReceive+0x314>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007100:	b29b      	uxth	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d02f      	beq.n	8007166 <HAL_SPI_TransmitReceive+0x314>
 8007106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007108:	2b01      	cmp	r3, #1
 800710a:	d12c      	bne.n	8007166 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007110:	b29b      	uxth	r3, r3
 8007112:	2b01      	cmp	r3, #1
 8007114:	d912      	bls.n	800713c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800711a:	881a      	ldrh	r2, [r3, #0]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007126:	1c9a      	adds	r2, r3, #2
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007130:	b29b      	uxth	r3, r3
 8007132:	3b02      	subs	r3, #2
 8007134:	b29a      	uxth	r2, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800713a:	e012      	b.n	8007162 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	330c      	adds	r3, #12
 8007146:	7812      	ldrb	r2, [r2, #0]
 8007148:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714e:	1c5a      	adds	r2, r3, #1
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007158:	b29b      	uxth	r3, r3
 800715a:	3b01      	subs	r3, #1
 800715c:	b29a      	uxth	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007162:	2300      	movs	r3, #0
 8007164:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f003 0301 	and.w	r3, r3, #1
 8007170:	2b01      	cmp	r3, #1
 8007172:	d148      	bne.n	8007206 <HAL_SPI_TransmitReceive+0x3b4>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800717a:	b29b      	uxth	r3, r3
 800717c:	2b00      	cmp	r3, #0
 800717e:	d042      	beq.n	8007206 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007186:	b29b      	uxth	r3, r3
 8007188:	2b01      	cmp	r3, #1
 800718a:	d923      	bls.n	80071d4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68da      	ldr	r2, [r3, #12]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007196:	b292      	uxth	r2, r2
 8007198:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800719e:	1c9a      	adds	r2, r3, #2
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	3b02      	subs	r3, #2
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071bc:	b29b      	uxth	r3, r3
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d81f      	bhi.n	8007202 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80071d0:	605a      	str	r2, [r3, #4]
 80071d2:	e016      	b.n	8007202 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f103 020c 	add.w	r2, r3, #12
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e0:	7812      	ldrb	r2, [r2, #0]
 80071e2:	b2d2      	uxtb	r2, r2
 80071e4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ea:	1c5a      	adds	r2, r3, #1
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	3b01      	subs	r3, #1
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007202:	2301      	movs	r3, #1
 8007204:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007206:	f7fb f97f 	bl	8002508 <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007212:	429a      	cmp	r2, r3
 8007214:	d803      	bhi.n	800721e <HAL_SPI_TransmitReceive+0x3cc>
 8007216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721c:	d102      	bne.n	8007224 <HAL_SPI_TransmitReceive+0x3d2>
 800721e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007220:	2b00      	cmp	r3, #0
 8007222:	d107      	bne.n	8007234 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007232:	e026      	b.n	8007282 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007238:	b29b      	uxth	r3, r3
 800723a:	2b00      	cmp	r3, #0
 800723c:	f47f af57 	bne.w	80070ee <HAL_SPI_TransmitReceive+0x29c>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007246:	b29b      	uxth	r3, r3
 8007248:	2b00      	cmp	r3, #0
 800724a:	f47f af50 	bne.w	80070ee <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800724e:	69fa      	ldr	r2, [r7, #28]
 8007250:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f000 f94c 	bl	80074f0 <SPI_EndRxTxTransaction>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d005      	beq.n	800726a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2220      	movs	r2, #32
 8007268:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800726e:	2b00      	cmp	r3, #0
 8007270:	d003      	beq.n	800727a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007278:	e003      	b.n	8007282 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800728a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800728e:	4618      	mov	r0, r3
 8007290:	3728      	adds	r7, #40	@ 0x28
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007296:	b480      	push	{r7}
 8007298:	b083      	sub	sp, #12
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80072a4:	b2db      	uxtb	r3, r3
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
	...

080072b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b088      	sub	sp, #32
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	603b      	str	r3, [r7, #0]
 80072c0:	4613      	mov	r3, r2
 80072c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80072c4:	f7fb f920 	bl	8002508 <HAL_GetTick>
 80072c8:	4602      	mov	r2, r0
 80072ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072cc:	1a9b      	subs	r3, r3, r2
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	4413      	add	r3, r2
 80072d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80072d4:	f7fb f918 	bl	8002508 <HAL_GetTick>
 80072d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80072da:	4b39      	ldr	r3, [pc, #228]	@ (80073c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	015b      	lsls	r3, r3, #5
 80072e0:	0d1b      	lsrs	r3, r3, #20
 80072e2:	69fa      	ldr	r2, [r7, #28]
 80072e4:	fb02 f303 	mul.w	r3, r2, r3
 80072e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072ea:	e054      	b.n	8007396 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f2:	d050      	beq.n	8007396 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80072f4:	f7fb f908 	bl	8002508 <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	69fa      	ldr	r2, [r7, #28]
 8007300:	429a      	cmp	r2, r3
 8007302:	d902      	bls.n	800730a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d13d      	bne.n	8007386 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007318:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007322:	d111      	bne.n	8007348 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800732c:	d004      	beq.n	8007338 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007336:	d107      	bne.n	8007348 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007346:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800734c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007350:	d10f      	bne.n	8007372 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007370:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e017      	b.n	80073b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800738c:	2300      	movs	r3, #0
 800738e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	3b01      	subs	r3, #1
 8007394:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689a      	ldr	r2, [r3, #8]
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	4013      	ands	r3, r2
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	bf0c      	ite	eq
 80073a6:	2301      	moveq	r3, #1
 80073a8:	2300      	movne	r3, #0
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	461a      	mov	r2, r3
 80073ae:	79fb      	ldrb	r3, [r7, #7]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d19b      	bne.n	80072ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3720      	adds	r7, #32
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	20000000 	.word	0x20000000

080073c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b08a      	sub	sp, #40	@ 0x28
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
 80073d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80073d2:	2300      	movs	r3, #0
 80073d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80073d6:	f7fb f897 	bl	8002508 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073de:	1a9b      	subs	r3, r3, r2
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	4413      	add	r3, r2
 80073e4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80073e6:	f7fb f88f 	bl	8002508 <HAL_GetTick>
 80073ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	330c      	adds	r3, #12
 80073f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80073f4:	4b3d      	ldr	r3, [pc, #244]	@ (80074ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	4613      	mov	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	00da      	lsls	r2, r3, #3
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	0d1b      	lsrs	r3, r3, #20
 8007404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007406:	fb02 f303 	mul.w	r3, r2, r3
 800740a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800740c:	e060      	b.n	80074d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007414:	d107      	bne.n	8007426 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d104      	bne.n	8007426 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	b2db      	uxtb	r3, r3
 8007422:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007424:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742c:	d050      	beq.n	80074d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800742e:	f7fb f86b 	bl	8002508 <HAL_GetTick>
 8007432:	4602      	mov	r2, r0
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800743a:	429a      	cmp	r2, r3
 800743c:	d902      	bls.n	8007444 <SPI_WaitFifoStateUntilTimeout+0x80>
 800743e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007440:	2b00      	cmp	r3, #0
 8007442:	d13d      	bne.n	80074c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007452:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800745c:	d111      	bne.n	8007482 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007466:	d004      	beq.n	8007472 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007470:	d107      	bne.n	8007482 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007480:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007486:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800748a:	d10f      	bne.n	80074ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800749a:	601a      	str	r2, [r3, #0]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80074aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	e010      	b.n	80074e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	3b01      	subs	r3, #1
 80074ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	689a      	ldr	r2, [r3, #8]
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	4013      	ands	r3, r2
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d196      	bne.n	800740e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3728      	adds	r7, #40	@ 0x28
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	20000000 	.word	0x20000000

080074f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af02      	add	r7, sp, #8
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	2200      	movs	r2, #0
 8007504:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f7ff ff5b 	bl	80073c4 <SPI_WaitFifoStateUntilTimeout>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d007      	beq.n	8007524 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007518:	f043 0220 	orr.w	r2, r3, #32
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007520:	2303      	movs	r3, #3
 8007522:	e027      	b.n	8007574 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	9300      	str	r3, [sp, #0]
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	2200      	movs	r2, #0
 800752c:	2180      	movs	r1, #128	@ 0x80
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f7ff fec0 	bl	80072b4 <SPI_WaitFlagStateUntilTimeout>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d007      	beq.n	800754a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800753e:	f043 0220 	orr.w	r2, r3, #32
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e014      	b.n	8007574 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	9300      	str	r3, [sp, #0]
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2200      	movs	r2, #0
 8007552:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f7ff ff34 	bl	80073c4 <SPI_WaitFifoStateUntilTimeout>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d007      	beq.n	8007572 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007566:	f043 0220 	orr.w	r2, r3, #32
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e000      	b.n	8007574 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d101      	bne.n	800758e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e049      	b.n	8007622 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007594:	b2db      	uxtb	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	d106      	bne.n	80075a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7fa fd76 	bl	8002094 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2202      	movs	r2, #2
 80075ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	3304      	adds	r3, #4
 80075b8:	4619      	mov	r1, r3
 80075ba:	4610      	mov	r0, r2
 80075bc:	f000 fc9e 	bl	8007efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
	...

0800762c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b01      	cmp	r3, #1
 800763e:	d001      	beq.n	8007644 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e042      	b.n	80076ca <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2202      	movs	r2, #2
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a21      	ldr	r2, [pc, #132]	@ (80076d8 <HAL_TIM_Base_Start+0xac>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d018      	beq.n	8007688 <HAL_TIM_Base_Start+0x5c>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800765e:	d013      	beq.n	8007688 <HAL_TIM_Base_Start+0x5c>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a1d      	ldr	r2, [pc, #116]	@ (80076dc <HAL_TIM_Base_Start+0xb0>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d00e      	beq.n	8007688 <HAL_TIM_Base_Start+0x5c>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a1c      	ldr	r2, [pc, #112]	@ (80076e0 <HAL_TIM_Base_Start+0xb4>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d009      	beq.n	8007688 <HAL_TIM_Base_Start+0x5c>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a1a      	ldr	r2, [pc, #104]	@ (80076e4 <HAL_TIM_Base_Start+0xb8>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d004      	beq.n	8007688 <HAL_TIM_Base_Start+0x5c>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a19      	ldr	r2, [pc, #100]	@ (80076e8 <HAL_TIM_Base_Start+0xbc>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d115      	bne.n	80076b4 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	689a      	ldr	r2, [r3, #8]
 800768e:	4b17      	ldr	r3, [pc, #92]	@ (80076ec <HAL_TIM_Base_Start+0xc0>)
 8007690:	4013      	ands	r3, r2
 8007692:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2b06      	cmp	r3, #6
 8007698:	d015      	beq.n	80076c6 <HAL_TIM_Base_Start+0x9a>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076a0:	d011      	beq.n	80076c6 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f042 0201 	orr.w	r2, r2, #1
 80076b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076b2:	e008      	b.n	80076c6 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f042 0201 	orr.w	r2, r2, #1
 80076c2:	601a      	str	r2, [r3, #0]
 80076c4:	e000      	b.n	80076c8 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3714      	adds	r7, #20
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	40012c00 	.word	0x40012c00
 80076dc:	40000400 	.word	0x40000400
 80076e0:	40000800 	.word	0x40000800
 80076e4:	40013400 	.word	0x40013400
 80076e8:	40014000 	.word	0x40014000
 80076ec:	00010007 	.word	0x00010007

080076f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d101      	bne.n	8007702 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e049      	b.n	8007796 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007708:	b2db      	uxtb	r3, r3
 800770a:	2b00      	cmp	r3, #0
 800770c:	d106      	bne.n	800771c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f841 	bl	800779e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2202      	movs	r2, #2
 8007720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	3304      	adds	r3, #4
 800772c:	4619      	mov	r1, r3
 800772e:	4610      	mov	r0, r2
 8007730:	f000 fbe4 	bl	8007efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800779e:	b480      	push	{r7}
 80077a0:	b083      	sub	sp, #12
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80077a6:	bf00      	nop
 80077a8:	370c      	adds	r7, #12
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
	...

080077b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d109      	bne.n	80077d8 <HAL_TIM_PWM_Start+0x24>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	bf14      	ite	ne
 80077d0:	2301      	movne	r3, #1
 80077d2:	2300      	moveq	r3, #0
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	e03c      	b.n	8007852 <HAL_TIM_PWM_Start+0x9e>
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	2b04      	cmp	r3, #4
 80077dc:	d109      	bne.n	80077f2 <HAL_TIM_PWM_Start+0x3e>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	bf14      	ite	ne
 80077ea:	2301      	movne	r3, #1
 80077ec:	2300      	moveq	r3, #0
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	e02f      	b.n	8007852 <HAL_TIM_PWM_Start+0x9e>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b08      	cmp	r3, #8
 80077f6:	d109      	bne.n	800780c <HAL_TIM_PWM_Start+0x58>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	2b01      	cmp	r3, #1
 8007802:	bf14      	ite	ne
 8007804:	2301      	movne	r3, #1
 8007806:	2300      	moveq	r3, #0
 8007808:	b2db      	uxtb	r3, r3
 800780a:	e022      	b.n	8007852 <HAL_TIM_PWM_Start+0x9e>
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	2b0c      	cmp	r3, #12
 8007810:	d109      	bne.n	8007826 <HAL_TIM_PWM_Start+0x72>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b01      	cmp	r3, #1
 800781c:	bf14      	ite	ne
 800781e:	2301      	movne	r3, #1
 8007820:	2300      	moveq	r3, #0
 8007822:	b2db      	uxtb	r3, r3
 8007824:	e015      	b.n	8007852 <HAL_TIM_PWM_Start+0x9e>
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	2b10      	cmp	r3, #16
 800782a:	d109      	bne.n	8007840 <HAL_TIM_PWM_Start+0x8c>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b01      	cmp	r3, #1
 8007836:	bf14      	ite	ne
 8007838:	2301      	movne	r3, #1
 800783a:	2300      	moveq	r3, #0
 800783c:	b2db      	uxtb	r3, r3
 800783e:	e008      	b.n	8007852 <HAL_TIM_PWM_Start+0x9e>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007846:	b2db      	uxtb	r3, r3
 8007848:	2b01      	cmp	r3, #1
 800784a:	bf14      	ite	ne
 800784c:	2301      	movne	r3, #1
 800784e:	2300      	moveq	r3, #0
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e097      	b.n	800798a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d104      	bne.n	800786a <HAL_TIM_PWM_Start+0xb6>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2202      	movs	r2, #2
 8007864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007868:	e023      	b.n	80078b2 <HAL_TIM_PWM_Start+0xfe>
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2b04      	cmp	r3, #4
 800786e:	d104      	bne.n	800787a <HAL_TIM_PWM_Start+0xc6>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2202      	movs	r2, #2
 8007874:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007878:	e01b      	b.n	80078b2 <HAL_TIM_PWM_Start+0xfe>
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	2b08      	cmp	r3, #8
 800787e:	d104      	bne.n	800788a <HAL_TIM_PWM_Start+0xd6>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2202      	movs	r2, #2
 8007884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007888:	e013      	b.n	80078b2 <HAL_TIM_PWM_Start+0xfe>
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	2b0c      	cmp	r3, #12
 800788e:	d104      	bne.n	800789a <HAL_TIM_PWM_Start+0xe6>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2202      	movs	r2, #2
 8007894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007898:	e00b      	b.n	80078b2 <HAL_TIM_PWM_Start+0xfe>
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	2b10      	cmp	r3, #16
 800789e:	d104      	bne.n	80078aa <HAL_TIM_PWM_Start+0xf6>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2202      	movs	r2, #2
 80078a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078a8:	e003      	b.n	80078b2 <HAL_TIM_PWM_Start+0xfe>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2202      	movs	r2, #2
 80078ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2201      	movs	r2, #1
 80078b8:	6839      	ldr	r1, [r7, #0]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 ff4c 	bl	8008758 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a33      	ldr	r2, [pc, #204]	@ (8007994 <HAL_TIM_PWM_Start+0x1e0>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d013      	beq.n	80078f2 <HAL_TIM_PWM_Start+0x13e>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a32      	ldr	r2, [pc, #200]	@ (8007998 <HAL_TIM_PWM_Start+0x1e4>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d00e      	beq.n	80078f2 <HAL_TIM_PWM_Start+0x13e>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a30      	ldr	r2, [pc, #192]	@ (800799c <HAL_TIM_PWM_Start+0x1e8>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d009      	beq.n	80078f2 <HAL_TIM_PWM_Start+0x13e>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a2f      	ldr	r2, [pc, #188]	@ (80079a0 <HAL_TIM_PWM_Start+0x1ec>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d004      	beq.n	80078f2 <HAL_TIM_PWM_Start+0x13e>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a2d      	ldr	r2, [pc, #180]	@ (80079a4 <HAL_TIM_PWM_Start+0x1f0>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d101      	bne.n	80078f6 <HAL_TIM_PWM_Start+0x142>
 80078f2:	2301      	movs	r3, #1
 80078f4:	e000      	b.n	80078f8 <HAL_TIM_PWM_Start+0x144>
 80078f6:	2300      	movs	r3, #0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d007      	beq.n	800790c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800790a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a20      	ldr	r2, [pc, #128]	@ (8007994 <HAL_TIM_PWM_Start+0x1e0>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d018      	beq.n	8007948 <HAL_TIM_PWM_Start+0x194>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800791e:	d013      	beq.n	8007948 <HAL_TIM_PWM_Start+0x194>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a20      	ldr	r2, [pc, #128]	@ (80079a8 <HAL_TIM_PWM_Start+0x1f4>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d00e      	beq.n	8007948 <HAL_TIM_PWM_Start+0x194>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a1f      	ldr	r2, [pc, #124]	@ (80079ac <HAL_TIM_PWM_Start+0x1f8>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d009      	beq.n	8007948 <HAL_TIM_PWM_Start+0x194>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a17      	ldr	r2, [pc, #92]	@ (8007998 <HAL_TIM_PWM_Start+0x1e4>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d004      	beq.n	8007948 <HAL_TIM_PWM_Start+0x194>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a16      	ldr	r2, [pc, #88]	@ (800799c <HAL_TIM_PWM_Start+0x1e8>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d115      	bne.n	8007974 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	689a      	ldr	r2, [r3, #8]
 800794e:	4b18      	ldr	r3, [pc, #96]	@ (80079b0 <HAL_TIM_PWM_Start+0x1fc>)
 8007950:	4013      	ands	r3, r2
 8007952:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2b06      	cmp	r3, #6
 8007958:	d015      	beq.n	8007986 <HAL_TIM_PWM_Start+0x1d2>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007960:	d011      	beq.n	8007986 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f042 0201 	orr.w	r2, r2, #1
 8007970:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007972:	e008      	b.n	8007986 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f042 0201 	orr.w	r2, r2, #1
 8007982:	601a      	str	r2, [r3, #0]
 8007984:	e000      	b.n	8007988 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007986:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	40012c00 	.word	0x40012c00
 8007998:	40013400 	.word	0x40013400
 800799c:	40014000 	.word	0x40014000
 80079a0:	40014400 	.word	0x40014400
 80079a4:	40014800 	.word	0x40014800
 80079a8:	40000400 	.word	0x40000400
 80079ac:	40000800 	.word	0x40000800
 80079b0:	00010007 	.word	0x00010007

080079b4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2200      	movs	r2, #0
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 fec6 	bl	8008758 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a3e      	ldr	r2, [pc, #248]	@ (8007acc <HAL_TIM_PWM_Stop+0x118>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d013      	beq.n	80079fe <HAL_TIM_PWM_Stop+0x4a>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a3d      	ldr	r2, [pc, #244]	@ (8007ad0 <HAL_TIM_PWM_Stop+0x11c>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d00e      	beq.n	80079fe <HAL_TIM_PWM_Stop+0x4a>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a3b      	ldr	r2, [pc, #236]	@ (8007ad4 <HAL_TIM_PWM_Stop+0x120>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d009      	beq.n	80079fe <HAL_TIM_PWM_Stop+0x4a>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a3a      	ldr	r2, [pc, #232]	@ (8007ad8 <HAL_TIM_PWM_Stop+0x124>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d004      	beq.n	80079fe <HAL_TIM_PWM_Stop+0x4a>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a38      	ldr	r2, [pc, #224]	@ (8007adc <HAL_TIM_PWM_Stop+0x128>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d101      	bne.n	8007a02 <HAL_TIM_PWM_Stop+0x4e>
 80079fe:	2301      	movs	r3, #1
 8007a00:	e000      	b.n	8007a04 <HAL_TIM_PWM_Stop+0x50>
 8007a02:	2300      	movs	r3, #0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d017      	beq.n	8007a38 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	6a1a      	ldr	r2, [r3, #32]
 8007a0e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007a12:	4013      	ands	r3, r2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10f      	bne.n	8007a38 <HAL_TIM_PWM_Stop+0x84>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6a1a      	ldr	r2, [r3, #32]
 8007a1e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007a22:	4013      	ands	r3, r2
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d107      	bne.n	8007a38 <HAL_TIM_PWM_Stop+0x84>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007a36:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6a1a      	ldr	r2, [r3, #32]
 8007a3e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007a42:	4013      	ands	r3, r2
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10f      	bne.n	8007a68 <HAL_TIM_PWM_Stop+0xb4>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6a1a      	ldr	r2, [r3, #32]
 8007a4e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007a52:	4013      	ands	r3, r2
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d107      	bne.n	8007a68 <HAL_TIM_PWM_Stop+0xb4>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f022 0201 	bic.w	r2, r2, #1
 8007a66:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d104      	bne.n	8007a78 <HAL_TIM_PWM_Stop+0xc4>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a76:	e023      	b.n	8007ac0 <HAL_TIM_PWM_Stop+0x10c>
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	d104      	bne.n	8007a88 <HAL_TIM_PWM_Stop+0xd4>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a86:	e01b      	b.n	8007ac0 <HAL_TIM_PWM_Stop+0x10c>
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	2b08      	cmp	r3, #8
 8007a8c:	d104      	bne.n	8007a98 <HAL_TIM_PWM_Stop+0xe4>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a96:	e013      	b.n	8007ac0 <HAL_TIM_PWM_Stop+0x10c>
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	2b0c      	cmp	r3, #12
 8007a9c:	d104      	bne.n	8007aa8 <HAL_TIM_PWM_Stop+0xf4>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007aa6:	e00b      	b.n	8007ac0 <HAL_TIM_PWM_Stop+0x10c>
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	2b10      	cmp	r3, #16
 8007aac:	d104      	bne.n	8007ab8 <HAL_TIM_PWM_Stop+0x104>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ab6:	e003      	b.n	8007ac0 <HAL_TIM_PWM_Stop+0x10c>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	40012c00 	.word	0x40012c00
 8007ad0:	40013400 	.word	0x40013400
 8007ad4:	40014000 	.word	0x40014000
 8007ad8:	40014400 	.word	0x40014400
 8007adc:	40014800 	.word	0x40014800

08007ae0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007aec:	2300      	movs	r3, #0
 8007aee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d101      	bne.n	8007afe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007afa:	2302      	movs	r3, #2
 8007afc:	e0ff      	b.n	8007cfe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2b14      	cmp	r3, #20
 8007b0a:	f200 80f0 	bhi.w	8007cee <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b14:	08007b69 	.word	0x08007b69
 8007b18:	08007cef 	.word	0x08007cef
 8007b1c:	08007cef 	.word	0x08007cef
 8007b20:	08007cef 	.word	0x08007cef
 8007b24:	08007ba9 	.word	0x08007ba9
 8007b28:	08007cef 	.word	0x08007cef
 8007b2c:	08007cef 	.word	0x08007cef
 8007b30:	08007cef 	.word	0x08007cef
 8007b34:	08007beb 	.word	0x08007beb
 8007b38:	08007cef 	.word	0x08007cef
 8007b3c:	08007cef 	.word	0x08007cef
 8007b40:	08007cef 	.word	0x08007cef
 8007b44:	08007c2b 	.word	0x08007c2b
 8007b48:	08007cef 	.word	0x08007cef
 8007b4c:	08007cef 	.word	0x08007cef
 8007b50:	08007cef 	.word	0x08007cef
 8007b54:	08007c6d 	.word	0x08007c6d
 8007b58:	08007cef 	.word	0x08007cef
 8007b5c:	08007cef 	.word	0x08007cef
 8007b60:	08007cef 	.word	0x08007cef
 8007b64:	08007cad 	.word	0x08007cad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68b9      	ldr	r1, [r7, #8]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 fa60 	bl	8008034 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	699a      	ldr	r2, [r3, #24]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f042 0208 	orr.w	r2, r2, #8
 8007b82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	699a      	ldr	r2, [r3, #24]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f022 0204 	bic.w	r2, r2, #4
 8007b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6999      	ldr	r1, [r3, #24]
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	691a      	ldr	r2, [r3, #16]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	619a      	str	r2, [r3, #24]
      break;
 8007ba6:	e0a5      	b.n	8007cf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68b9      	ldr	r1, [r7, #8]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 fad0 	bl	8008154 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	699a      	ldr	r2, [r3, #24]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	699a      	ldr	r2, [r3, #24]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6999      	ldr	r1, [r3, #24]
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	021a      	lsls	r2, r3, #8
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	430a      	orrs	r2, r1
 8007be6:	619a      	str	r2, [r3, #24]
      break;
 8007be8:	e084      	b.n	8007cf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68b9      	ldr	r1, [r7, #8]
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f000 fb39 	bl	8008268 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	69da      	ldr	r2, [r3, #28]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f042 0208 	orr.w	r2, r2, #8
 8007c04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	69da      	ldr	r2, [r3, #28]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f022 0204 	bic.w	r2, r2, #4
 8007c14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	69d9      	ldr	r1, [r3, #28]
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	691a      	ldr	r2, [r3, #16]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	430a      	orrs	r2, r1
 8007c26:	61da      	str	r2, [r3, #28]
      break;
 8007c28:	e064      	b.n	8007cf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68b9      	ldr	r1, [r7, #8]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 fba1 	bl	8008378 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	69da      	ldr	r2, [r3, #28]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	69da      	ldr	r2, [r3, #28]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	69d9      	ldr	r1, [r3, #28]
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	021a      	lsls	r2, r3, #8
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	61da      	str	r2, [r3, #28]
      break;
 8007c6a:	e043      	b.n	8007cf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68b9      	ldr	r1, [r7, #8]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 fc0a 	bl	800848c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f042 0208 	orr.w	r2, r2, #8
 8007c86:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f022 0204 	bic.w	r2, r2, #4
 8007c96:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	691a      	ldr	r2, [r3, #16]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007caa:	e023      	b.n	8007cf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68b9      	ldr	r1, [r7, #8]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 fc4e 	bl	8008554 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007cc6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007cd6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	021a      	lsls	r2, r3, #8
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007cec:	e002      	b.n	8007cf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	75fb      	strb	r3, [r7, #23]
      break;
 8007cf2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3718      	adds	r7, #24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop

08007d08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d12:	2300      	movs	r3, #0
 8007d14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d101      	bne.n	8007d24 <HAL_TIM_ConfigClockSource+0x1c>
 8007d20:	2302      	movs	r3, #2
 8007d22:	e0de      	b.n	8007ee2 <HAL_TIM_ConfigClockSource+0x1da>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2202      	movs	r2, #2
 8007d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007d42:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007d46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68ba      	ldr	r2, [r7, #8]
 8007d56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a63      	ldr	r2, [pc, #396]	@ (8007eec <HAL_TIM_ConfigClockSource+0x1e4>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	f000 80a9 	beq.w	8007eb6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007d64:	4a61      	ldr	r2, [pc, #388]	@ (8007eec <HAL_TIM_ConfigClockSource+0x1e4>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	f200 80ae 	bhi.w	8007ec8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007d6c:	4a60      	ldr	r2, [pc, #384]	@ (8007ef0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	f000 80a1 	beq.w	8007eb6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007d74:	4a5e      	ldr	r2, [pc, #376]	@ (8007ef0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	f200 80a6 	bhi.w	8007ec8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007d7c:	4a5d      	ldr	r2, [pc, #372]	@ (8007ef4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	f000 8099 	beq.w	8007eb6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007d84:	4a5b      	ldr	r2, [pc, #364]	@ (8007ef4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	f200 809e 	bhi.w	8007ec8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007d8c:	4a5a      	ldr	r2, [pc, #360]	@ (8007ef8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	f000 8091 	beq.w	8007eb6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007d94:	4a58      	ldr	r2, [pc, #352]	@ (8007ef8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	f200 8096 	bhi.w	8007ec8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007d9c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007da0:	f000 8089 	beq.w	8007eb6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007da4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007da8:	f200 808e 	bhi.w	8007ec8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007dac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007db0:	d03e      	beq.n	8007e30 <HAL_TIM_ConfigClockSource+0x128>
 8007db2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007db6:	f200 8087 	bhi.w	8007ec8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007dba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dbe:	f000 8086 	beq.w	8007ece <HAL_TIM_ConfigClockSource+0x1c6>
 8007dc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dc6:	d87f      	bhi.n	8007ec8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007dc8:	2b70      	cmp	r3, #112	@ 0x70
 8007dca:	d01a      	beq.n	8007e02 <HAL_TIM_ConfigClockSource+0xfa>
 8007dcc:	2b70      	cmp	r3, #112	@ 0x70
 8007dce:	d87b      	bhi.n	8007ec8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007dd0:	2b60      	cmp	r3, #96	@ 0x60
 8007dd2:	d050      	beq.n	8007e76 <HAL_TIM_ConfigClockSource+0x16e>
 8007dd4:	2b60      	cmp	r3, #96	@ 0x60
 8007dd6:	d877      	bhi.n	8007ec8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007dd8:	2b50      	cmp	r3, #80	@ 0x50
 8007dda:	d03c      	beq.n	8007e56 <HAL_TIM_ConfigClockSource+0x14e>
 8007ddc:	2b50      	cmp	r3, #80	@ 0x50
 8007dde:	d873      	bhi.n	8007ec8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007de0:	2b40      	cmp	r3, #64	@ 0x40
 8007de2:	d058      	beq.n	8007e96 <HAL_TIM_ConfigClockSource+0x18e>
 8007de4:	2b40      	cmp	r3, #64	@ 0x40
 8007de6:	d86f      	bhi.n	8007ec8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007de8:	2b30      	cmp	r3, #48	@ 0x30
 8007dea:	d064      	beq.n	8007eb6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007dec:	2b30      	cmp	r3, #48	@ 0x30
 8007dee:	d86b      	bhi.n	8007ec8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007df0:	2b20      	cmp	r3, #32
 8007df2:	d060      	beq.n	8007eb6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007df4:	2b20      	cmp	r3, #32
 8007df6:	d867      	bhi.n	8007ec8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d05c      	beq.n	8007eb6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007dfc:	2b10      	cmp	r3, #16
 8007dfe:	d05a      	beq.n	8007eb6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007e00:	e062      	b.n	8007ec8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e12:	f000 fc81 	bl	8008718 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007e24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	609a      	str	r2, [r3, #8]
      break;
 8007e2e:	e04f      	b.n	8007ed0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e40:	f000 fc6a 	bl	8008718 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	689a      	ldr	r2, [r3, #8]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e52:	609a      	str	r2, [r3, #8]
      break;
 8007e54:	e03c      	b.n	8007ed0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e62:	461a      	mov	r2, r3
 8007e64:	f000 fbdc 	bl	8008620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2150      	movs	r1, #80	@ 0x50
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 fc35 	bl	80086de <TIM_ITRx_SetConfig>
      break;
 8007e74:	e02c      	b.n	8007ed0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e82:	461a      	mov	r2, r3
 8007e84:	f000 fbfb 	bl	800867e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2160      	movs	r1, #96	@ 0x60
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 fc25 	bl	80086de <TIM_ITRx_SetConfig>
      break;
 8007e94:	e01c      	b.n	8007ed0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	f000 fbbc 	bl	8008620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2140      	movs	r1, #64	@ 0x40
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 fc15 	bl	80086de <TIM_ITRx_SetConfig>
      break;
 8007eb4:	e00c      	b.n	8007ed0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	f000 fc0c 	bl	80086de <TIM_ITRx_SetConfig>
      break;
 8007ec6:	e003      	b.n	8007ed0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	73fb      	strb	r3, [r7, #15]
      break;
 8007ecc:	e000      	b.n	8007ed0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8007ece:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	00100070 	.word	0x00100070
 8007ef0:	00100040 	.word	0x00100040
 8007ef4:	00100030 	.word	0x00100030
 8007ef8:	00100020 	.word	0x00100020

08007efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a42      	ldr	r2, [pc, #264]	@ (8008018 <TIM_Base_SetConfig+0x11c>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d00f      	beq.n	8007f34 <TIM_Base_SetConfig+0x38>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f1a:	d00b      	beq.n	8007f34 <TIM_Base_SetConfig+0x38>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a3f      	ldr	r2, [pc, #252]	@ (800801c <TIM_Base_SetConfig+0x120>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d007      	beq.n	8007f34 <TIM_Base_SetConfig+0x38>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a3e      	ldr	r2, [pc, #248]	@ (8008020 <TIM_Base_SetConfig+0x124>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d003      	beq.n	8007f34 <TIM_Base_SetConfig+0x38>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a3d      	ldr	r2, [pc, #244]	@ (8008024 <TIM_Base_SetConfig+0x128>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d108      	bne.n	8007f46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a33      	ldr	r2, [pc, #204]	@ (8008018 <TIM_Base_SetConfig+0x11c>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d01b      	beq.n	8007f86 <TIM_Base_SetConfig+0x8a>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f54:	d017      	beq.n	8007f86 <TIM_Base_SetConfig+0x8a>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a30      	ldr	r2, [pc, #192]	@ (800801c <TIM_Base_SetConfig+0x120>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d013      	beq.n	8007f86 <TIM_Base_SetConfig+0x8a>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a2f      	ldr	r2, [pc, #188]	@ (8008020 <TIM_Base_SetConfig+0x124>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d00f      	beq.n	8007f86 <TIM_Base_SetConfig+0x8a>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a2e      	ldr	r2, [pc, #184]	@ (8008024 <TIM_Base_SetConfig+0x128>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d00b      	beq.n	8007f86 <TIM_Base_SetConfig+0x8a>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a2d      	ldr	r2, [pc, #180]	@ (8008028 <TIM_Base_SetConfig+0x12c>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d007      	beq.n	8007f86 <TIM_Base_SetConfig+0x8a>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a2c      	ldr	r2, [pc, #176]	@ (800802c <TIM_Base_SetConfig+0x130>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d003      	beq.n	8007f86 <TIM_Base_SetConfig+0x8a>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a2b      	ldr	r2, [pc, #172]	@ (8008030 <TIM_Base_SetConfig+0x134>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d108      	bne.n	8007f98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	689a      	ldr	r2, [r3, #8]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a16      	ldr	r2, [pc, #88]	@ (8008018 <TIM_Base_SetConfig+0x11c>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d00f      	beq.n	8007fe4 <TIM_Base_SetConfig+0xe8>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a17      	ldr	r2, [pc, #92]	@ (8008024 <TIM_Base_SetConfig+0x128>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d00b      	beq.n	8007fe4 <TIM_Base_SetConfig+0xe8>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a16      	ldr	r2, [pc, #88]	@ (8008028 <TIM_Base_SetConfig+0x12c>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d007      	beq.n	8007fe4 <TIM_Base_SetConfig+0xe8>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a15      	ldr	r2, [pc, #84]	@ (800802c <TIM_Base_SetConfig+0x130>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d003      	beq.n	8007fe4 <TIM_Base_SetConfig+0xe8>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a14      	ldr	r2, [pc, #80]	@ (8008030 <TIM_Base_SetConfig+0x134>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d103      	bne.n	8007fec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	691a      	ldr	r2, [r3, #16]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d105      	bne.n	800800a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	f023 0201 	bic.w	r2, r3, #1
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	611a      	str	r2, [r3, #16]
  }
}
 800800a:	bf00      	nop
 800800c:	3714      	adds	r7, #20
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	40012c00 	.word	0x40012c00
 800801c:	40000400 	.word	0x40000400
 8008020:	40000800 	.word	0x40000800
 8008024:	40013400 	.word	0x40013400
 8008028:	40014000 	.word	0x40014000
 800802c:	40014400 	.word	0x40014400
 8008030:	40014800 	.word	0x40014800

08008034 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008034:	b480      	push	{r7}
 8008036:	b087      	sub	sp, #28
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a1b      	ldr	r3, [r3, #32]
 8008042:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a1b      	ldr	r3, [r3, #32]
 8008048:	f023 0201 	bic.w	r2, r3, #1
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f023 0303 	bic.w	r3, r3, #3
 800806e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	4313      	orrs	r3, r2
 8008078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	f023 0302 	bic.w	r3, r3, #2
 8008080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	4313      	orrs	r3, r2
 800808a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a2c      	ldr	r2, [pc, #176]	@ (8008140 <TIM_OC1_SetConfig+0x10c>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d00f      	beq.n	80080b4 <TIM_OC1_SetConfig+0x80>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a2b      	ldr	r2, [pc, #172]	@ (8008144 <TIM_OC1_SetConfig+0x110>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d00b      	beq.n	80080b4 <TIM_OC1_SetConfig+0x80>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a2a      	ldr	r2, [pc, #168]	@ (8008148 <TIM_OC1_SetConfig+0x114>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d007      	beq.n	80080b4 <TIM_OC1_SetConfig+0x80>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a29      	ldr	r2, [pc, #164]	@ (800814c <TIM_OC1_SetConfig+0x118>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d003      	beq.n	80080b4 <TIM_OC1_SetConfig+0x80>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a28      	ldr	r2, [pc, #160]	@ (8008150 <TIM_OC1_SetConfig+0x11c>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d10c      	bne.n	80080ce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	f023 0308 	bic.w	r3, r3, #8
 80080ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	f023 0304 	bic.w	r3, r3, #4
 80080cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a1b      	ldr	r2, [pc, #108]	@ (8008140 <TIM_OC1_SetConfig+0x10c>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d00f      	beq.n	80080f6 <TIM_OC1_SetConfig+0xc2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a1a      	ldr	r2, [pc, #104]	@ (8008144 <TIM_OC1_SetConfig+0x110>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d00b      	beq.n	80080f6 <TIM_OC1_SetConfig+0xc2>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a19      	ldr	r2, [pc, #100]	@ (8008148 <TIM_OC1_SetConfig+0x114>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d007      	beq.n	80080f6 <TIM_OC1_SetConfig+0xc2>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a18      	ldr	r2, [pc, #96]	@ (800814c <TIM_OC1_SetConfig+0x118>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d003      	beq.n	80080f6 <TIM_OC1_SetConfig+0xc2>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a17      	ldr	r2, [pc, #92]	@ (8008150 <TIM_OC1_SetConfig+0x11c>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d111      	bne.n	800811a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008104:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	695b      	ldr	r3, [r3, #20]
 800810a:	693a      	ldr	r2, [r7, #16]
 800810c:	4313      	orrs	r3, r2
 800810e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	4313      	orrs	r3, r2
 8008118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	693a      	ldr	r2, [r7, #16]
 800811e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	685a      	ldr	r2, [r3, #4]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	621a      	str	r2, [r3, #32]
}
 8008134:	bf00      	nop
 8008136:	371c      	adds	r7, #28
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	40012c00 	.word	0x40012c00
 8008144:	40013400 	.word	0x40013400
 8008148:	40014000 	.word	0x40014000
 800814c:	40014400 	.word	0x40014400
 8008150:	40014800 	.word	0x40014800

08008154 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008154:	b480      	push	{r7}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a1b      	ldr	r3, [r3, #32]
 8008162:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a1b      	ldr	r3, [r3, #32]
 8008168:	f023 0210 	bic.w	r2, r3, #16
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008182:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800818e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	021b      	lsls	r3, r3, #8
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	4313      	orrs	r3, r2
 800819a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	f023 0320 	bic.w	r3, r3, #32
 80081a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	011b      	lsls	r3, r3, #4
 80081aa:	697a      	ldr	r2, [r7, #20]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a28      	ldr	r2, [pc, #160]	@ (8008254 <TIM_OC2_SetConfig+0x100>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d003      	beq.n	80081c0 <TIM_OC2_SetConfig+0x6c>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a27      	ldr	r2, [pc, #156]	@ (8008258 <TIM_OC2_SetConfig+0x104>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d10d      	bne.n	80081dc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	011b      	lsls	r3, r3, #4
 80081ce:	697a      	ldr	r2, [r7, #20]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a1d      	ldr	r2, [pc, #116]	@ (8008254 <TIM_OC2_SetConfig+0x100>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d00f      	beq.n	8008204 <TIM_OC2_SetConfig+0xb0>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a1c      	ldr	r2, [pc, #112]	@ (8008258 <TIM_OC2_SetConfig+0x104>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d00b      	beq.n	8008204 <TIM_OC2_SetConfig+0xb0>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a1b      	ldr	r2, [pc, #108]	@ (800825c <TIM_OC2_SetConfig+0x108>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d007      	beq.n	8008204 <TIM_OC2_SetConfig+0xb0>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a1a      	ldr	r2, [pc, #104]	@ (8008260 <TIM_OC2_SetConfig+0x10c>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d003      	beq.n	8008204 <TIM_OC2_SetConfig+0xb0>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a19      	ldr	r2, [pc, #100]	@ (8008264 <TIM_OC2_SetConfig+0x110>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d113      	bne.n	800822c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800820a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008212:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	695b      	ldr	r3, [r3, #20]
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	693a      	ldr	r2, [r7, #16]
 800821c:	4313      	orrs	r3, r2
 800821e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	699b      	ldr	r3, [r3, #24]
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	4313      	orrs	r3, r2
 800822a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	621a      	str	r2, [r3, #32]
}
 8008246:	bf00      	nop
 8008248:	371c      	adds	r7, #28
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	40012c00 	.word	0x40012c00
 8008258:	40013400 	.word	0x40013400
 800825c:	40014000 	.word	0x40014000
 8008260:	40014400 	.word	0x40014400
 8008264:	40014800 	.word	0x40014800

08008268 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008268:	b480      	push	{r7}
 800826a:	b087      	sub	sp, #28
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a1b      	ldr	r3, [r3, #32]
 800827c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	69db      	ldr	r3, [r3, #28]
 800828e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800829a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f023 0303 	bic.w	r3, r3, #3
 80082a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80082b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	021b      	lsls	r3, r3, #8
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	4313      	orrs	r3, r2
 80082c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a27      	ldr	r2, [pc, #156]	@ (8008364 <TIM_OC3_SetConfig+0xfc>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d003      	beq.n	80082d2 <TIM_OC3_SetConfig+0x6a>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a26      	ldr	r2, [pc, #152]	@ (8008368 <TIM_OC3_SetConfig+0x100>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d10d      	bne.n	80082ee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80082d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	021b      	lsls	r3, r3, #8
 80082e0:	697a      	ldr	r2, [r7, #20]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80082ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a1c      	ldr	r2, [pc, #112]	@ (8008364 <TIM_OC3_SetConfig+0xfc>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d00f      	beq.n	8008316 <TIM_OC3_SetConfig+0xae>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a1b      	ldr	r2, [pc, #108]	@ (8008368 <TIM_OC3_SetConfig+0x100>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d00b      	beq.n	8008316 <TIM_OC3_SetConfig+0xae>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4a1a      	ldr	r2, [pc, #104]	@ (800836c <TIM_OC3_SetConfig+0x104>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d007      	beq.n	8008316 <TIM_OC3_SetConfig+0xae>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a19      	ldr	r2, [pc, #100]	@ (8008370 <TIM_OC3_SetConfig+0x108>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d003      	beq.n	8008316 <TIM_OC3_SetConfig+0xae>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a18      	ldr	r2, [pc, #96]	@ (8008374 <TIM_OC3_SetConfig+0x10c>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d113      	bne.n	800833e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800831c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	695b      	ldr	r3, [r3, #20]
 800832a:	011b      	lsls	r3, r3, #4
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	4313      	orrs	r3, r2
 8008330:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	011b      	lsls	r3, r3, #4
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	4313      	orrs	r3, r2
 800833c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	693a      	ldr	r2, [r7, #16]
 8008342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	685a      	ldr	r2, [r3, #4]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	697a      	ldr	r2, [r7, #20]
 8008356:	621a      	str	r2, [r3, #32]
}
 8008358:	bf00      	nop
 800835a:	371c      	adds	r7, #28
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr
 8008364:	40012c00 	.word	0x40012c00
 8008368:	40013400 	.word	0x40013400
 800836c:	40014000 	.word	0x40014000
 8008370:	40014400 	.word	0x40014400
 8008374:	40014800 	.word	0x40014800

08008378 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008378:	b480      	push	{r7}
 800837a:	b087      	sub	sp, #28
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a1b      	ldr	r3, [r3, #32]
 800838c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	69db      	ldr	r3, [r3, #28]
 800839e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80083a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	021b      	lsls	r3, r3, #8
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	4313      	orrs	r3, r2
 80083be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80083c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	031b      	lsls	r3, r3, #12
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a28      	ldr	r2, [pc, #160]	@ (8008478 <TIM_OC4_SetConfig+0x100>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d003      	beq.n	80083e4 <TIM_OC4_SetConfig+0x6c>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a27      	ldr	r2, [pc, #156]	@ (800847c <TIM_OC4_SetConfig+0x104>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d10d      	bne.n	8008400 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80083ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	031b      	lsls	r3, r3, #12
 80083f2:	697a      	ldr	r2, [r7, #20]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a1d      	ldr	r2, [pc, #116]	@ (8008478 <TIM_OC4_SetConfig+0x100>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d00f      	beq.n	8008428 <TIM_OC4_SetConfig+0xb0>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a1c      	ldr	r2, [pc, #112]	@ (800847c <TIM_OC4_SetConfig+0x104>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d00b      	beq.n	8008428 <TIM_OC4_SetConfig+0xb0>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a1b      	ldr	r2, [pc, #108]	@ (8008480 <TIM_OC4_SetConfig+0x108>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d007      	beq.n	8008428 <TIM_OC4_SetConfig+0xb0>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a1a      	ldr	r2, [pc, #104]	@ (8008484 <TIM_OC4_SetConfig+0x10c>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d003      	beq.n	8008428 <TIM_OC4_SetConfig+0xb0>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a19      	ldr	r2, [pc, #100]	@ (8008488 <TIM_OC4_SetConfig+0x110>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d113      	bne.n	8008450 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800842e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008436:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	695b      	ldr	r3, [r3, #20]
 800843c:	019b      	lsls	r3, r3, #6
 800843e:	693a      	ldr	r2, [r7, #16]
 8008440:	4313      	orrs	r3, r2
 8008442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	019b      	lsls	r3, r3, #6
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	4313      	orrs	r3, r2
 800844e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	685a      	ldr	r2, [r3, #4]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	621a      	str	r2, [r3, #32]
}
 800846a:	bf00      	nop
 800846c:	371c      	adds	r7, #28
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	40012c00 	.word	0x40012c00
 800847c:	40013400 	.word	0x40013400
 8008480:	40014000 	.word	0x40014000
 8008484:	40014400 	.word	0x40014400
 8008488:	40014800 	.word	0x40014800

0800848c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800848c:	b480      	push	{r7}
 800848e:	b087      	sub	sp, #28
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a1b      	ldr	r3, [r3, #32]
 800849a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a1b      	ldr	r3, [r3, #32]
 80084a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80084d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	041b      	lsls	r3, r3, #16
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	4313      	orrs	r3, r2
 80084dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a17      	ldr	r2, [pc, #92]	@ (8008540 <TIM_OC5_SetConfig+0xb4>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d00f      	beq.n	8008506 <TIM_OC5_SetConfig+0x7a>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a16      	ldr	r2, [pc, #88]	@ (8008544 <TIM_OC5_SetConfig+0xb8>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d00b      	beq.n	8008506 <TIM_OC5_SetConfig+0x7a>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a15      	ldr	r2, [pc, #84]	@ (8008548 <TIM_OC5_SetConfig+0xbc>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d007      	beq.n	8008506 <TIM_OC5_SetConfig+0x7a>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a14      	ldr	r2, [pc, #80]	@ (800854c <TIM_OC5_SetConfig+0xc0>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d003      	beq.n	8008506 <TIM_OC5_SetConfig+0x7a>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a13      	ldr	r2, [pc, #76]	@ (8008550 <TIM_OC5_SetConfig+0xc4>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d109      	bne.n	800851a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800850c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	695b      	ldr	r3, [r3, #20]
 8008512:	021b      	lsls	r3, r3, #8
 8008514:	697a      	ldr	r2, [r7, #20]
 8008516:	4313      	orrs	r3, r2
 8008518:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	697a      	ldr	r2, [r7, #20]
 800851e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	685a      	ldr	r2, [r3, #4]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	621a      	str	r2, [r3, #32]
}
 8008534:	bf00      	nop
 8008536:	371c      	adds	r7, #28
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr
 8008540:	40012c00 	.word	0x40012c00
 8008544:	40013400 	.word	0x40013400
 8008548:	40014000 	.word	0x40014000
 800854c:	40014400 	.word	0x40014400
 8008550:	40014800 	.word	0x40014800

08008554 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008554:	b480      	push	{r7}
 8008556:	b087      	sub	sp, #28
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a1b      	ldr	r3, [r3, #32]
 8008568:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800857a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008582:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	021b      	lsls	r3, r3, #8
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	4313      	orrs	r3, r2
 8008592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800859a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	051b      	lsls	r3, r3, #20
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a18      	ldr	r2, [pc, #96]	@ (800860c <TIM_OC6_SetConfig+0xb8>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d00f      	beq.n	80085d0 <TIM_OC6_SetConfig+0x7c>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a17      	ldr	r2, [pc, #92]	@ (8008610 <TIM_OC6_SetConfig+0xbc>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d00b      	beq.n	80085d0 <TIM_OC6_SetConfig+0x7c>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a16      	ldr	r2, [pc, #88]	@ (8008614 <TIM_OC6_SetConfig+0xc0>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d007      	beq.n	80085d0 <TIM_OC6_SetConfig+0x7c>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a15      	ldr	r2, [pc, #84]	@ (8008618 <TIM_OC6_SetConfig+0xc4>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d003      	beq.n	80085d0 <TIM_OC6_SetConfig+0x7c>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a14      	ldr	r2, [pc, #80]	@ (800861c <TIM_OC6_SetConfig+0xc8>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d109      	bne.n	80085e4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80085d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	695b      	ldr	r3, [r3, #20]
 80085dc:	029b      	lsls	r3, r3, #10
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	697a      	ldr	r2, [r7, #20]
 80085e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	685a      	ldr	r2, [r3, #4]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	621a      	str	r2, [r3, #32]
}
 80085fe:	bf00      	nop
 8008600:	371c      	adds	r7, #28
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	40012c00 	.word	0x40012c00
 8008610:	40013400 	.word	0x40013400
 8008614:	40014000 	.word	0x40014000
 8008618:	40014400 	.word	0x40014400
 800861c:	40014800 	.word	0x40014800

08008620 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008620:	b480      	push	{r7}
 8008622:	b087      	sub	sp, #28
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6a1b      	ldr	r3, [r3, #32]
 8008630:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6a1b      	ldr	r3, [r3, #32]
 8008636:	f023 0201 	bic.w	r2, r3, #1
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800864a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	011b      	lsls	r3, r3, #4
 8008650:	693a      	ldr	r2, [r7, #16]
 8008652:	4313      	orrs	r3, r2
 8008654:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	f023 030a 	bic.w	r3, r3, #10
 800865c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800865e:	697a      	ldr	r2, [r7, #20]
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	4313      	orrs	r3, r2
 8008664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	693a      	ldr	r2, [r7, #16]
 800866a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	697a      	ldr	r2, [r7, #20]
 8008670:	621a      	str	r2, [r3, #32]
}
 8008672:	bf00      	nop
 8008674:	371c      	adds	r7, #28
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr

0800867e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800867e:	b480      	push	{r7}
 8008680:	b087      	sub	sp, #28
 8008682:	af00      	add	r7, sp, #0
 8008684:	60f8      	str	r0, [r7, #12]
 8008686:	60b9      	str	r1, [r7, #8]
 8008688:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6a1b      	ldr	r3, [r3, #32]
 8008694:	f023 0210 	bic.w	r2, r3, #16
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80086a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	031b      	lsls	r3, r3, #12
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80086ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	011b      	lsls	r3, r3, #4
 80086c0:	697a      	ldr	r2, [r7, #20]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	693a      	ldr	r2, [r7, #16]
 80086ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	621a      	str	r2, [r3, #32]
}
 80086d2:	bf00      	nop
 80086d4:	371c      	adds	r7, #28
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr

080086de <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086de:	b480      	push	{r7}
 80086e0:	b085      	sub	sp, #20
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
 80086e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80086f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086fa:	683a      	ldr	r2, [r7, #0]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	4313      	orrs	r3, r2
 8008700:	f043 0307 	orr.w	r3, r3, #7
 8008704:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	609a      	str	r2, [r3, #8]
}
 800870c:	bf00      	nop
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008718:	b480      	push	{r7}
 800871a:	b087      	sub	sp, #28
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
 8008724:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008732:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	021a      	lsls	r2, r3, #8
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	431a      	orrs	r2, r3
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	4313      	orrs	r3, r2
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	4313      	orrs	r3, r2
 8008744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	609a      	str	r2, [r3, #8]
}
 800874c:	bf00      	nop
 800874e:	371c      	adds	r7, #28
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008758:	b480      	push	{r7}
 800875a:	b087      	sub	sp, #28
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	f003 031f 	and.w	r3, r3, #31
 800876a:	2201      	movs	r2, #1
 800876c:	fa02 f303 	lsl.w	r3, r2, r3
 8008770:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6a1a      	ldr	r2, [r3, #32]
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	43db      	mvns	r3, r3
 800877a:	401a      	ands	r2, r3
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6a1a      	ldr	r2, [r3, #32]
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	f003 031f 	and.w	r3, r3, #31
 800878a:	6879      	ldr	r1, [r7, #4]
 800878c:	fa01 f303 	lsl.w	r3, r1, r3
 8008790:	431a      	orrs	r2, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	621a      	str	r2, [r3, #32]
}
 8008796:	bf00      	nop
 8008798:	371c      	adds	r7, #28
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
	...

080087a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d101      	bne.n	80087bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087b8:	2302      	movs	r3, #2
 80087ba:	e065      	b.n	8008888 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2202      	movs	r2, #2
 80087c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a2c      	ldr	r2, [pc, #176]	@ (8008894 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d004      	beq.n	80087f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a2b      	ldr	r2, [pc, #172]	@ (8008898 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d108      	bne.n	8008802 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80087f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	4313      	orrs	r3, r2
 8008800:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800880c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	4313      	orrs	r3, r2
 8008816:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a1b      	ldr	r2, [pc, #108]	@ (8008894 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d018      	beq.n	800885c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008832:	d013      	beq.n	800885c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a18      	ldr	r2, [pc, #96]	@ (800889c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d00e      	beq.n	800885c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a17      	ldr	r2, [pc, #92]	@ (80088a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d009      	beq.n	800885c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a12      	ldr	r2, [pc, #72]	@ (8008898 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d004      	beq.n	800885c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a13      	ldr	r2, [pc, #76]	@ (80088a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d10c      	bne.n	8008876 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008862:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	4313      	orrs	r3, r2
 800886c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68ba      	ldr	r2, [r7, #8]
 8008874:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2201      	movs	r2, #1
 800887a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3714      	adds	r7, #20
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr
 8008894:	40012c00 	.word	0x40012c00
 8008898:	40013400 	.word	0x40013400
 800889c:	40000400 	.word	0x40000400
 80088a0:	40000800 	.word	0x40000800
 80088a4:	40014000 	.word	0x40014000

080088a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80088b2:	2300      	movs	r3, #0
 80088b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d101      	bne.n	80088c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80088c0:	2302      	movs	r3, #2
 80088c2:	e073      	b.n	80089ac <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4313      	orrs	r3, r2
 8008902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	4313      	orrs	r3, r2
 8008910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	695b      	ldr	r3, [r3, #20]
 800891c:	4313      	orrs	r3, r2
 800891e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800892a:	4313      	orrs	r3, r2
 800892c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	041b      	lsls	r3, r3, #16
 800893a:	4313      	orrs	r3, r2
 800893c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	69db      	ldr	r3, [r3, #28]
 8008948:	4313      	orrs	r3, r2
 800894a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a19      	ldr	r2, [pc, #100]	@ (80089b8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d004      	beq.n	8008960 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a18      	ldr	r2, [pc, #96]	@ (80089bc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d11c      	bne.n	800899a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800896a:	051b      	lsls	r3, r3, #20
 800896c:	4313      	orrs	r3, r2
 800896e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	4313      	orrs	r3, r2
 800897c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008988:	4313      	orrs	r3, r2
 800898a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008996:	4313      	orrs	r3, r2
 8008998:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr
 80089b8:	40012c00 	.word	0x40012c00
 80089bc:	40013400 	.word	0x40013400

080089c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d101      	bne.n	80089d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e042      	b.n	8008a58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d106      	bne.n	80089ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f7f9 fc43 	bl	8002270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2224      	movs	r2, #36	@ 0x24
 80089ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f022 0201 	bic.w	r2, r2, #1
 8008a00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d002      	beq.n	8008a10 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 ff6e 	bl	80098ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fc9f 	bl	8009354 <UART_SetConfig>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d101      	bne.n	8008a20 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e01b      	b.n	8008a58 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	685a      	ldr	r2, [r3, #4]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008a2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	689a      	ldr	r2, [r3, #8]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008a3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f042 0201 	orr.w	r2, r2, #1
 8008a4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 ffed 	bl	8009a30 <UART_CheckIdleState>
 8008a56:	4603      	mov	r3, r0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b08a      	sub	sp, #40	@ 0x28
 8008a64:	af02      	add	r7, sp, #8
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	603b      	str	r3, [r7, #0]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a76:	2b20      	cmp	r3, #32
 8008a78:	d17b      	bne.n	8008b72 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d002      	beq.n	8008a86 <HAL_UART_Transmit+0x26>
 8008a80:	88fb      	ldrh	r3, [r7, #6]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d101      	bne.n	8008a8a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e074      	b.n	8008b74 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2221      	movs	r2, #33	@ 0x21
 8008a96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a9a:	f7f9 fd35 	bl	8002508 <HAL_GetTick>
 8008a9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	88fa      	ldrh	r2, [r7, #6]
 8008aa4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	88fa      	ldrh	r2, [r7, #6]
 8008aac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ab8:	d108      	bne.n	8008acc <HAL_UART_Transmit+0x6c>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d104      	bne.n	8008acc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	61bb      	str	r3, [r7, #24]
 8008aca:	e003      	b.n	8008ad4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ad4:	e030      	b.n	8008b38 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	9300      	str	r3, [sp, #0]
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	2200      	movs	r2, #0
 8008ade:	2180      	movs	r1, #128	@ 0x80
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f001 f84f 	bl	8009b84 <UART_WaitOnFlagUntilTimeout>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d005      	beq.n	8008af8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2220      	movs	r2, #32
 8008af0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008af4:	2303      	movs	r3, #3
 8008af6:	e03d      	b.n	8008b74 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d10b      	bne.n	8008b16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	881b      	ldrh	r3, [r3, #0]
 8008b02:	461a      	mov	r2, r3
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b0c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	3302      	adds	r3, #2
 8008b12:	61bb      	str	r3, [r7, #24]
 8008b14:	e007      	b.n	8008b26 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	781a      	ldrb	r2, [r3, #0]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	3301      	adds	r3, #1
 8008b24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	b29a      	uxth	r2, r3
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1c8      	bne.n	8008ad6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	2140      	movs	r1, #64	@ 0x40
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f001 f818 	bl	8009b84 <UART_WaitOnFlagUntilTimeout>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d005      	beq.n	8008b66 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2220      	movs	r2, #32
 8008b5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008b62:	2303      	movs	r3, #3
 8008b64:	e006      	b.n	8008b74 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2220      	movs	r2, #32
 8008b6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	e000      	b.n	8008b74 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008b72:	2302      	movs	r3, #2
  }
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3720      	adds	r7, #32
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b08a      	sub	sp, #40	@ 0x28
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	4613      	mov	r3, r2
 8008b88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b90:	2b20      	cmp	r3, #32
 8008b92:	d167      	bne.n	8008c64 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d002      	beq.n	8008ba0 <HAL_UART_Transmit_DMA+0x24>
 8008b9a:	88fb      	ldrh	r3, [r7, #6]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d101      	bne.n	8008ba4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e060      	b.n	8008c66 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	68ba      	ldr	r2, [r7, #8]
 8008ba8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	88fa      	ldrh	r2, [r7, #6]
 8008bae:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	88fa      	ldrh	r2, [r7, #6]
 8008bb6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2221      	movs	r2, #33	@ 0x21
 8008bc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d028      	beq.n	8008c24 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bd6:	4a26      	ldr	r2, [pc, #152]	@ (8008c70 <HAL_UART_Transmit_DMA+0xf4>)
 8008bd8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bde:	4a25      	ldr	r2, [pc, #148]	@ (8008c74 <HAL_UART_Transmit_DMA+0xf8>)
 8008be0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008be6:	4a24      	ldr	r2, [pc, #144]	@ (8008c78 <HAL_UART_Transmit_DMA+0xfc>)
 8008be8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bee:	2200      	movs	r2, #0
 8008bf0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	3328      	adds	r3, #40	@ 0x28
 8008c02:	461a      	mov	r2, r3
 8008c04:	88fb      	ldrh	r3, [r7, #6]
 8008c06:	f7fc fc6b 	bl	80054e0 <HAL_DMA_Start_IT>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d009      	beq.n	8008c24 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2210      	movs	r2, #16
 8008c14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2220      	movs	r2, #32
 8008c1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e020      	b.n	8008c66 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2240      	movs	r2, #64	@ 0x40
 8008c2a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	3308      	adds	r3, #8
 8008c32:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	e853 3f00 	ldrex	r3, [r3]
 8008c3a:	613b      	str	r3, [r7, #16]
   return(result);
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c42:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	3308      	adds	r3, #8
 8008c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c4c:	623a      	str	r2, [r7, #32]
 8008c4e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c50:	69f9      	ldr	r1, [r7, #28]
 8008c52:	6a3a      	ldr	r2, [r7, #32]
 8008c54:	e841 2300 	strex	r3, r2, [r1]
 8008c58:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1e5      	bne.n	8008c2c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	e000      	b.n	8008c66 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008c64:	2302      	movs	r3, #2
  }
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3728      	adds	r7, #40	@ 0x28
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	08009efb 	.word	0x08009efb
 8008c74:	08009f95 	.word	0x08009f95
 8008c78:	0800a11b 	.word	0x0800a11b

08008c7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b0ba      	sub	sp, #232	@ 0xe8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	69db      	ldr	r3, [r3, #28]
 8008c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008ca2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008ca6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008caa:	4013      	ands	r3, r2
 8008cac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008cb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d11b      	bne.n	8008cf0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cbc:	f003 0320 	and.w	r3, r3, #32
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d015      	beq.n	8008cf0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cc8:	f003 0320 	and.w	r3, r3, #32
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d105      	bne.n	8008cdc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d009      	beq.n	8008cf0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f000 82e3 	beq.w	80092ac <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	4798      	blx	r3
      }
      return;
 8008cee:	e2dd      	b.n	80092ac <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008cf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f000 8123 	beq.w	8008f40 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008cfa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008cfe:	4b8d      	ldr	r3, [pc, #564]	@ (8008f34 <HAL_UART_IRQHandler+0x2b8>)
 8008d00:	4013      	ands	r3, r2
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d106      	bne.n	8008d14 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008d06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008d0a:	4b8b      	ldr	r3, [pc, #556]	@ (8008f38 <HAL_UART_IRQHandler+0x2bc>)
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f000 8116 	beq.w	8008f40 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d18:	f003 0301 	and.w	r3, r3, #1
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d011      	beq.n	8008d44 <HAL_UART_IRQHandler+0xc8>
 8008d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d00b      	beq.n	8008d44 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2201      	movs	r2, #1
 8008d32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d3a:	f043 0201 	orr.w	r2, r3, #1
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d48:	f003 0302 	and.w	r3, r3, #2
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d011      	beq.n	8008d74 <HAL_UART_IRQHandler+0xf8>
 8008d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d54:	f003 0301 	and.w	r3, r3, #1
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00b      	beq.n	8008d74 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2202      	movs	r2, #2
 8008d62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d6a:	f043 0204 	orr.w	r2, r3, #4
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d78:	f003 0304 	and.w	r3, r3, #4
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d011      	beq.n	8008da4 <HAL_UART_IRQHandler+0x128>
 8008d80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d84:	f003 0301 	and.w	r3, r3, #1
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00b      	beq.n	8008da4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2204      	movs	r2, #4
 8008d92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d9a:	f043 0202 	orr.w	r2, r3, #2
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008da8:	f003 0308 	and.w	r3, r3, #8
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d017      	beq.n	8008de0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008db4:	f003 0320 	and.w	r3, r3, #32
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d105      	bne.n	8008dc8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008dbc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008dc0:	4b5c      	ldr	r3, [pc, #368]	@ (8008f34 <HAL_UART_IRQHandler+0x2b8>)
 8008dc2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00b      	beq.n	8008de0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2208      	movs	r2, #8
 8008dce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dd6:	f043 0208 	orr.w	r2, r3, #8
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008de4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d012      	beq.n	8008e12 <HAL_UART_IRQHandler+0x196>
 8008dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008df0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00c      	beq.n	8008e12 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e08:	f043 0220 	orr.w	r2, r3, #32
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f000 8249 	beq.w	80092b0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e22:	f003 0320 	and.w	r3, r3, #32
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d013      	beq.n	8008e52 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e2e:	f003 0320 	and.w	r3, r3, #32
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d105      	bne.n	8008e42 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d007      	beq.n	8008e52 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d003      	beq.n	8008e52 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e66:	2b40      	cmp	r3, #64	@ 0x40
 8008e68:	d005      	beq.n	8008e76 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008e6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008e6e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d054      	beq.n	8008f20 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 ffd9 	bl	8009e2e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e86:	2b40      	cmp	r3, #64	@ 0x40
 8008e88:	d146      	bne.n	8008f18 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	3308      	adds	r3, #8
 8008e90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008e98:	e853 3f00 	ldrex	r3, [r3]
 8008e9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008ea0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ea4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	3308      	adds	r3, #8
 8008eb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008eb6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008eba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ebe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008ec2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008ec6:	e841 2300 	strex	r3, r2, [r1]
 8008eca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008ece:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1d9      	bne.n	8008e8a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d017      	beq.n	8008f10 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ee6:	4a15      	ldr	r2, [pc, #84]	@ (8008f3c <HAL_UART_IRQHandler+0x2c0>)
 8008ee8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7fc fbc9 	bl	8005688 <HAL_DMA_Abort_IT>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d019      	beq.n	8008f30 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008f0a:	4610      	mov	r0, r2
 8008f0c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f0e:	e00f      	b.n	8008f30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 f9ff 	bl	8009314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f16:	e00b      	b.n	8008f30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f9fb 	bl	8009314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f1e:	e007      	b.n	8008f30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f9f7 	bl	8009314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008f2e:	e1bf      	b.n	80092b0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f30:	bf00      	nop
    return;
 8008f32:	e1bd      	b.n	80092b0 <HAL_UART_IRQHandler+0x634>
 8008f34:	10000001 	.word	0x10000001
 8008f38:	04000120 	.word	0x04000120
 8008f3c:	0800a19b 	.word	0x0800a19b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	f040 8153 	bne.w	80091f0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f4e:	f003 0310 	and.w	r3, r3, #16
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f000 814c 	beq.w	80091f0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f5c:	f003 0310 	and.w	r3, r3, #16
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	f000 8145 	beq.w	80091f0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2210      	movs	r2, #16
 8008f6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f78:	2b40      	cmp	r3, #64	@ 0x40
 8008f7a:	f040 80bb 	bne.w	80090f4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 818f 	beq.w	80092b4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	f080 8187 	bcs.w	80092b4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 0320 	and.w	r3, r3, #32
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f040 8087 	bne.w	80090d2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008fd0:	e853 3f00 	ldrex	r3, [r3]
 8008fd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008fd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008fdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	461a      	mov	r2, r3
 8008fea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008fee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ff2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008ffa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008ffe:	e841 2300 	strex	r3, r2, [r1]
 8009002:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009006:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800900a:	2b00      	cmp	r3, #0
 800900c:	d1da      	bne.n	8008fc4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	3308      	adds	r3, #8
 8009014:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009016:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009018:	e853 3f00 	ldrex	r3, [r3]
 800901c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800901e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009020:	f023 0301 	bic.w	r3, r3, #1
 8009024:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	3308      	adds	r3, #8
 800902e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009032:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009036:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009038:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800903a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800903e:	e841 2300 	strex	r3, r2, [r1]
 8009042:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009044:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1e1      	bne.n	800900e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3308      	adds	r3, #8
 8009050:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009052:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009054:	e853 3f00 	ldrex	r3, [r3]
 8009058:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800905a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800905c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009060:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3308      	adds	r3, #8
 800906a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800906e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009070:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009072:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009074:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009076:	e841 2300 	strex	r3, r2, [r1]
 800907a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800907c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1e3      	bne.n	800904a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2220      	movs	r2, #32
 8009086:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009096:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009098:	e853 3f00 	ldrex	r3, [r3]
 800909c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800909e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090a0:	f023 0310 	bic.w	r3, r3, #16
 80090a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	461a      	mov	r2, r3
 80090ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80090b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80090b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80090ba:	e841 2300 	strex	r3, r2, [r1]
 80090be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80090c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1e4      	bne.n	8009090 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7fc fa82 	bl	80055d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2202      	movs	r2, #2
 80090d6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f003 f845 	bl	800c17c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090f2:	e0df      	b.n	80092b4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009100:	b29b      	uxth	r3, r3
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800910e:	b29b      	uxth	r3, r3
 8009110:	2b00      	cmp	r3, #0
 8009112:	f000 80d1 	beq.w	80092b8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8009116:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800911a:	2b00      	cmp	r3, #0
 800911c:	f000 80cc 	beq.w	80092b8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009128:	e853 3f00 	ldrex	r3, [r3]
 800912c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800912e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009130:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009134:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	461a      	mov	r2, r3
 800913e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009142:	647b      	str	r3, [r7, #68]	@ 0x44
 8009144:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009146:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009148:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800914a:	e841 2300 	strex	r3, r2, [r1]
 800914e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1e4      	bne.n	8009120 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	3308      	adds	r3, #8
 800915c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009160:	e853 3f00 	ldrex	r3, [r3]
 8009164:	623b      	str	r3, [r7, #32]
   return(result);
 8009166:	6a3b      	ldr	r3, [r7, #32]
 8009168:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800916c:	f023 0301 	bic.w	r3, r3, #1
 8009170:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	3308      	adds	r3, #8
 800917a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800917e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009180:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009182:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009184:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009186:	e841 2300 	strex	r3, r2, [r1]
 800918a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800918c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1e1      	bne.n	8009156 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2220      	movs	r2, #32
 8009196:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	e853 3f00 	ldrex	r3, [r3]
 80091b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f023 0310 	bic.w	r3, r3, #16
 80091ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	461a      	mov	r2, r3
 80091c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80091c8:	61fb      	str	r3, [r7, #28]
 80091ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091cc:	69b9      	ldr	r1, [r7, #24]
 80091ce:	69fa      	ldr	r2, [r7, #28]
 80091d0:	e841 2300 	strex	r3, r2, [r1]
 80091d4:	617b      	str	r3, [r7, #20]
   return(result);
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1e4      	bne.n	80091a6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2202      	movs	r2, #2
 80091e0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80091e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80091e6:	4619      	mov	r1, r3
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f002 ffc7 	bl	800c17c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80091ee:	e063      	b.n	80092b8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80091f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00e      	beq.n	800921a <HAL_UART_IRQHandler+0x59e>
 80091fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009200:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009204:	2b00      	cmp	r3, #0
 8009206:	d008      	beq.n	800921a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009210:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f001 f802 	bl	800a21c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009218:	e051      	b.n	80092be <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800921a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800921e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009222:	2b00      	cmp	r3, #0
 8009224:	d014      	beq.n	8009250 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800922a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800922e:	2b00      	cmp	r3, #0
 8009230:	d105      	bne.n	800923e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009236:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800923a:	2b00      	cmp	r3, #0
 800923c:	d008      	beq.n	8009250 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009242:	2b00      	cmp	r3, #0
 8009244:	d03a      	beq.n	80092bc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	4798      	blx	r3
    }
    return;
 800924e:	e035      	b.n	80092bc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009258:	2b00      	cmp	r3, #0
 800925a:	d009      	beq.n	8009270 <HAL_UART_IRQHandler+0x5f4>
 800925c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009264:	2b00      	cmp	r3, #0
 8009266:	d003      	beq.n	8009270 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 ffac 	bl	800a1c6 <UART_EndTransmit_IT>
    return;
 800926e:	e026      	b.n	80092be <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009274:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d009      	beq.n	8009290 <HAL_UART_IRQHandler+0x614>
 800927c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009280:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009284:	2b00      	cmp	r3, #0
 8009286:	d003      	beq.n	8009290 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 ffdb 	bl	800a244 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800928e:	e016      	b.n	80092be <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009294:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009298:	2b00      	cmp	r3, #0
 800929a:	d010      	beq.n	80092be <HAL_UART_IRQHandler+0x642>
 800929c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	da0c      	bge.n	80092be <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 ffc3 	bl	800a230 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092aa:	e008      	b.n	80092be <HAL_UART_IRQHandler+0x642>
      return;
 80092ac:	bf00      	nop
 80092ae:	e006      	b.n	80092be <HAL_UART_IRQHandler+0x642>
    return;
 80092b0:	bf00      	nop
 80092b2:	e004      	b.n	80092be <HAL_UART_IRQHandler+0x642>
      return;
 80092b4:	bf00      	nop
 80092b6:	e002      	b.n	80092be <HAL_UART_IRQHandler+0x642>
      return;
 80092b8:	bf00      	nop
 80092ba:	e000      	b.n	80092be <HAL_UART_IRQHandler+0x642>
    return;
 80092bc:	bf00      	nop
  }
}
 80092be:	37e8      	adds	r7, #232	@ 0xe8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80092cc:	bf00      	nop
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr

080092d8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80092e0:	bf00      	nop
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80092f4:	bf00      	nop
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009308:	bf00      	nop
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800931c:	bf00      	nop
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009336:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800933e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	4313      	orrs	r3, r2
}
 8009346:	4618      	mov	r0, r3
 8009348:	3714      	adds	r7, #20
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
	...

08009354 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009358:	b08c      	sub	sp, #48	@ 0x30
 800935a:	af00      	add	r7, sp, #0
 800935c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800935e:	2300      	movs	r3, #0
 8009360:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	689a      	ldr	r2, [r3, #8]
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	691b      	ldr	r3, [r3, #16]
 800936c:	431a      	orrs	r2, r3
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	695b      	ldr	r3, [r3, #20]
 8009372:	431a      	orrs	r2, r3
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	69db      	ldr	r3, [r3, #28]
 8009378:	4313      	orrs	r3, r2
 800937a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	4bab      	ldr	r3, [pc, #684]	@ (8009630 <UART_SetConfig+0x2dc>)
 8009384:	4013      	ands	r3, r2
 8009386:	697a      	ldr	r2, [r7, #20]
 8009388:	6812      	ldr	r2, [r2, #0]
 800938a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800938c:	430b      	orrs	r3, r1
 800938e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	68da      	ldr	r2, [r3, #12]
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	430a      	orrs	r2, r1
 80093a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	699b      	ldr	r3, [r3, #24]
 80093aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4aa0      	ldr	r2, [pc, #640]	@ (8009634 <UART_SetConfig+0x2e0>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d004      	beq.n	80093c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	6a1b      	ldr	r3, [r3, #32]
 80093ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093bc:	4313      	orrs	r3, r2
 80093be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80093ca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80093ce:	697a      	ldr	r2, [r7, #20]
 80093d0:	6812      	ldr	r2, [r2, #0]
 80093d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093d4:	430b      	orrs	r3, r1
 80093d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093de:	f023 010f 	bic.w	r1, r3, #15
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	430a      	orrs	r2, r1
 80093ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a91      	ldr	r2, [pc, #580]	@ (8009638 <UART_SetConfig+0x2e4>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d125      	bne.n	8009444 <UART_SetConfig+0xf0>
 80093f8:	4b90      	ldr	r3, [pc, #576]	@ (800963c <UART_SetConfig+0x2e8>)
 80093fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093fe:	f003 0303 	and.w	r3, r3, #3
 8009402:	2b03      	cmp	r3, #3
 8009404:	d81a      	bhi.n	800943c <UART_SetConfig+0xe8>
 8009406:	a201      	add	r2, pc, #4	@ (adr r2, 800940c <UART_SetConfig+0xb8>)
 8009408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800940c:	0800941d 	.word	0x0800941d
 8009410:	0800942d 	.word	0x0800942d
 8009414:	08009425 	.word	0x08009425
 8009418:	08009435 	.word	0x08009435
 800941c:	2301      	movs	r3, #1
 800941e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009422:	e0d6      	b.n	80095d2 <UART_SetConfig+0x27e>
 8009424:	2302      	movs	r3, #2
 8009426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800942a:	e0d2      	b.n	80095d2 <UART_SetConfig+0x27e>
 800942c:	2304      	movs	r3, #4
 800942e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009432:	e0ce      	b.n	80095d2 <UART_SetConfig+0x27e>
 8009434:	2308      	movs	r3, #8
 8009436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800943a:	e0ca      	b.n	80095d2 <UART_SetConfig+0x27e>
 800943c:	2310      	movs	r3, #16
 800943e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009442:	e0c6      	b.n	80095d2 <UART_SetConfig+0x27e>
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a7d      	ldr	r2, [pc, #500]	@ (8009640 <UART_SetConfig+0x2ec>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d138      	bne.n	80094c0 <UART_SetConfig+0x16c>
 800944e:	4b7b      	ldr	r3, [pc, #492]	@ (800963c <UART_SetConfig+0x2e8>)
 8009450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009454:	f003 030c 	and.w	r3, r3, #12
 8009458:	2b0c      	cmp	r3, #12
 800945a:	d82d      	bhi.n	80094b8 <UART_SetConfig+0x164>
 800945c:	a201      	add	r2, pc, #4	@ (adr r2, 8009464 <UART_SetConfig+0x110>)
 800945e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009462:	bf00      	nop
 8009464:	08009499 	.word	0x08009499
 8009468:	080094b9 	.word	0x080094b9
 800946c:	080094b9 	.word	0x080094b9
 8009470:	080094b9 	.word	0x080094b9
 8009474:	080094a9 	.word	0x080094a9
 8009478:	080094b9 	.word	0x080094b9
 800947c:	080094b9 	.word	0x080094b9
 8009480:	080094b9 	.word	0x080094b9
 8009484:	080094a1 	.word	0x080094a1
 8009488:	080094b9 	.word	0x080094b9
 800948c:	080094b9 	.word	0x080094b9
 8009490:	080094b9 	.word	0x080094b9
 8009494:	080094b1 	.word	0x080094b1
 8009498:	2300      	movs	r3, #0
 800949a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800949e:	e098      	b.n	80095d2 <UART_SetConfig+0x27e>
 80094a0:	2302      	movs	r3, #2
 80094a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094a6:	e094      	b.n	80095d2 <UART_SetConfig+0x27e>
 80094a8:	2304      	movs	r3, #4
 80094aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094ae:	e090      	b.n	80095d2 <UART_SetConfig+0x27e>
 80094b0:	2308      	movs	r3, #8
 80094b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094b6:	e08c      	b.n	80095d2 <UART_SetConfig+0x27e>
 80094b8:	2310      	movs	r3, #16
 80094ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094be:	e088      	b.n	80095d2 <UART_SetConfig+0x27e>
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a5f      	ldr	r2, [pc, #380]	@ (8009644 <UART_SetConfig+0x2f0>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d125      	bne.n	8009516 <UART_SetConfig+0x1c2>
 80094ca:	4b5c      	ldr	r3, [pc, #368]	@ (800963c <UART_SetConfig+0x2e8>)
 80094cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80094d4:	2b30      	cmp	r3, #48	@ 0x30
 80094d6:	d016      	beq.n	8009506 <UART_SetConfig+0x1b2>
 80094d8:	2b30      	cmp	r3, #48	@ 0x30
 80094da:	d818      	bhi.n	800950e <UART_SetConfig+0x1ba>
 80094dc:	2b20      	cmp	r3, #32
 80094de:	d00a      	beq.n	80094f6 <UART_SetConfig+0x1a2>
 80094e0:	2b20      	cmp	r3, #32
 80094e2:	d814      	bhi.n	800950e <UART_SetConfig+0x1ba>
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d002      	beq.n	80094ee <UART_SetConfig+0x19a>
 80094e8:	2b10      	cmp	r3, #16
 80094ea:	d008      	beq.n	80094fe <UART_SetConfig+0x1aa>
 80094ec:	e00f      	b.n	800950e <UART_SetConfig+0x1ba>
 80094ee:	2300      	movs	r3, #0
 80094f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094f4:	e06d      	b.n	80095d2 <UART_SetConfig+0x27e>
 80094f6:	2302      	movs	r3, #2
 80094f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094fc:	e069      	b.n	80095d2 <UART_SetConfig+0x27e>
 80094fe:	2304      	movs	r3, #4
 8009500:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009504:	e065      	b.n	80095d2 <UART_SetConfig+0x27e>
 8009506:	2308      	movs	r3, #8
 8009508:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800950c:	e061      	b.n	80095d2 <UART_SetConfig+0x27e>
 800950e:	2310      	movs	r3, #16
 8009510:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009514:	e05d      	b.n	80095d2 <UART_SetConfig+0x27e>
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a4b      	ldr	r2, [pc, #300]	@ (8009648 <UART_SetConfig+0x2f4>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d125      	bne.n	800956c <UART_SetConfig+0x218>
 8009520:	4b46      	ldr	r3, [pc, #280]	@ (800963c <UART_SetConfig+0x2e8>)
 8009522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009526:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800952a:	2bc0      	cmp	r3, #192	@ 0xc0
 800952c:	d016      	beq.n	800955c <UART_SetConfig+0x208>
 800952e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009530:	d818      	bhi.n	8009564 <UART_SetConfig+0x210>
 8009532:	2b80      	cmp	r3, #128	@ 0x80
 8009534:	d00a      	beq.n	800954c <UART_SetConfig+0x1f8>
 8009536:	2b80      	cmp	r3, #128	@ 0x80
 8009538:	d814      	bhi.n	8009564 <UART_SetConfig+0x210>
 800953a:	2b00      	cmp	r3, #0
 800953c:	d002      	beq.n	8009544 <UART_SetConfig+0x1f0>
 800953e:	2b40      	cmp	r3, #64	@ 0x40
 8009540:	d008      	beq.n	8009554 <UART_SetConfig+0x200>
 8009542:	e00f      	b.n	8009564 <UART_SetConfig+0x210>
 8009544:	2300      	movs	r3, #0
 8009546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800954a:	e042      	b.n	80095d2 <UART_SetConfig+0x27e>
 800954c:	2302      	movs	r3, #2
 800954e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009552:	e03e      	b.n	80095d2 <UART_SetConfig+0x27e>
 8009554:	2304      	movs	r3, #4
 8009556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800955a:	e03a      	b.n	80095d2 <UART_SetConfig+0x27e>
 800955c:	2308      	movs	r3, #8
 800955e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009562:	e036      	b.n	80095d2 <UART_SetConfig+0x27e>
 8009564:	2310      	movs	r3, #16
 8009566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800956a:	e032      	b.n	80095d2 <UART_SetConfig+0x27e>
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a30      	ldr	r2, [pc, #192]	@ (8009634 <UART_SetConfig+0x2e0>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d12a      	bne.n	80095cc <UART_SetConfig+0x278>
 8009576:	4b31      	ldr	r3, [pc, #196]	@ (800963c <UART_SetConfig+0x2e8>)
 8009578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800957c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009580:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009584:	d01a      	beq.n	80095bc <UART_SetConfig+0x268>
 8009586:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800958a:	d81b      	bhi.n	80095c4 <UART_SetConfig+0x270>
 800958c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009590:	d00c      	beq.n	80095ac <UART_SetConfig+0x258>
 8009592:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009596:	d815      	bhi.n	80095c4 <UART_SetConfig+0x270>
 8009598:	2b00      	cmp	r3, #0
 800959a:	d003      	beq.n	80095a4 <UART_SetConfig+0x250>
 800959c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095a0:	d008      	beq.n	80095b4 <UART_SetConfig+0x260>
 80095a2:	e00f      	b.n	80095c4 <UART_SetConfig+0x270>
 80095a4:	2300      	movs	r3, #0
 80095a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095aa:	e012      	b.n	80095d2 <UART_SetConfig+0x27e>
 80095ac:	2302      	movs	r3, #2
 80095ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095b2:	e00e      	b.n	80095d2 <UART_SetConfig+0x27e>
 80095b4:	2304      	movs	r3, #4
 80095b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095ba:	e00a      	b.n	80095d2 <UART_SetConfig+0x27e>
 80095bc:	2308      	movs	r3, #8
 80095be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095c2:	e006      	b.n	80095d2 <UART_SetConfig+0x27e>
 80095c4:	2310      	movs	r3, #16
 80095c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095ca:	e002      	b.n	80095d2 <UART_SetConfig+0x27e>
 80095cc:	2310      	movs	r3, #16
 80095ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a17      	ldr	r2, [pc, #92]	@ (8009634 <UART_SetConfig+0x2e0>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	f040 80a8 	bne.w	800972e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80095de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80095e2:	2b08      	cmp	r3, #8
 80095e4:	d834      	bhi.n	8009650 <UART_SetConfig+0x2fc>
 80095e6:	a201      	add	r2, pc, #4	@ (adr r2, 80095ec <UART_SetConfig+0x298>)
 80095e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ec:	08009611 	.word	0x08009611
 80095f0:	08009651 	.word	0x08009651
 80095f4:	08009619 	.word	0x08009619
 80095f8:	08009651 	.word	0x08009651
 80095fc:	0800961f 	.word	0x0800961f
 8009600:	08009651 	.word	0x08009651
 8009604:	08009651 	.word	0x08009651
 8009608:	08009651 	.word	0x08009651
 800960c:	08009627 	.word	0x08009627
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009610:	f7fd f912 	bl	8006838 <HAL_RCC_GetPCLK1Freq>
 8009614:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009616:	e021      	b.n	800965c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009618:	4b0c      	ldr	r3, [pc, #48]	@ (800964c <UART_SetConfig+0x2f8>)
 800961a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800961c:	e01e      	b.n	800965c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800961e:	f7fd f89d 	bl	800675c <HAL_RCC_GetSysClockFreq>
 8009622:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009624:	e01a      	b.n	800965c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009626:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800962a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800962c:	e016      	b.n	800965c <UART_SetConfig+0x308>
 800962e:	bf00      	nop
 8009630:	cfff69f3 	.word	0xcfff69f3
 8009634:	40008000 	.word	0x40008000
 8009638:	40013800 	.word	0x40013800
 800963c:	40021000 	.word	0x40021000
 8009640:	40004400 	.word	0x40004400
 8009644:	40004800 	.word	0x40004800
 8009648:	40004c00 	.word	0x40004c00
 800964c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009650:	2300      	movs	r3, #0
 8009652:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009654:	2301      	movs	r3, #1
 8009656:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800965a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800965c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800965e:	2b00      	cmp	r3, #0
 8009660:	f000 812a 	beq.w	80098b8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009668:	4a9e      	ldr	r2, [pc, #632]	@ (80098e4 <UART_SetConfig+0x590>)
 800966a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800966e:	461a      	mov	r2, r3
 8009670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009672:	fbb3 f3f2 	udiv	r3, r3, r2
 8009676:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	685a      	ldr	r2, [r3, #4]
 800967c:	4613      	mov	r3, r2
 800967e:	005b      	lsls	r3, r3, #1
 8009680:	4413      	add	r3, r2
 8009682:	69ba      	ldr	r2, [r7, #24]
 8009684:	429a      	cmp	r2, r3
 8009686:	d305      	bcc.n	8009694 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800968e:	69ba      	ldr	r2, [r7, #24]
 8009690:	429a      	cmp	r2, r3
 8009692:	d903      	bls.n	800969c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800969a:	e10d      	b.n	80098b8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800969c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800969e:	2200      	movs	r2, #0
 80096a0:	60bb      	str	r3, [r7, #8]
 80096a2:	60fa      	str	r2, [r7, #12]
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096a8:	4a8e      	ldr	r2, [pc, #568]	@ (80098e4 <UART_SetConfig+0x590>)
 80096aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	2200      	movs	r2, #0
 80096b2:	603b      	str	r3, [r7, #0]
 80096b4:	607a      	str	r2, [r7, #4]
 80096b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80096be:	f7f7 fb0b 	bl	8000cd8 <__aeabi_uldivmod>
 80096c2:	4602      	mov	r2, r0
 80096c4:	460b      	mov	r3, r1
 80096c6:	4610      	mov	r0, r2
 80096c8:	4619      	mov	r1, r3
 80096ca:	f04f 0200 	mov.w	r2, #0
 80096ce:	f04f 0300 	mov.w	r3, #0
 80096d2:	020b      	lsls	r3, r1, #8
 80096d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80096d8:	0202      	lsls	r2, r0, #8
 80096da:	6979      	ldr	r1, [r7, #20]
 80096dc:	6849      	ldr	r1, [r1, #4]
 80096de:	0849      	lsrs	r1, r1, #1
 80096e0:	2000      	movs	r0, #0
 80096e2:	460c      	mov	r4, r1
 80096e4:	4605      	mov	r5, r0
 80096e6:	eb12 0804 	adds.w	r8, r2, r4
 80096ea:	eb43 0905 	adc.w	r9, r3, r5
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	469a      	mov	sl, r3
 80096f6:	4693      	mov	fp, r2
 80096f8:	4652      	mov	r2, sl
 80096fa:	465b      	mov	r3, fp
 80096fc:	4640      	mov	r0, r8
 80096fe:	4649      	mov	r1, r9
 8009700:	f7f7 faea 	bl	8000cd8 <__aeabi_uldivmod>
 8009704:	4602      	mov	r2, r0
 8009706:	460b      	mov	r3, r1
 8009708:	4613      	mov	r3, r2
 800970a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800970c:	6a3b      	ldr	r3, [r7, #32]
 800970e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009712:	d308      	bcc.n	8009726 <UART_SetConfig+0x3d2>
 8009714:	6a3b      	ldr	r3, [r7, #32]
 8009716:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800971a:	d204      	bcs.n	8009726 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	6a3a      	ldr	r2, [r7, #32]
 8009722:	60da      	str	r2, [r3, #12]
 8009724:	e0c8      	b.n	80098b8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800972c:	e0c4      	b.n	80098b8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	69db      	ldr	r3, [r3, #28]
 8009732:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009736:	d167      	bne.n	8009808 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009738:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800973c:	2b08      	cmp	r3, #8
 800973e:	d828      	bhi.n	8009792 <UART_SetConfig+0x43e>
 8009740:	a201      	add	r2, pc, #4	@ (adr r2, 8009748 <UART_SetConfig+0x3f4>)
 8009742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009746:	bf00      	nop
 8009748:	0800976d 	.word	0x0800976d
 800974c:	08009775 	.word	0x08009775
 8009750:	0800977d 	.word	0x0800977d
 8009754:	08009793 	.word	0x08009793
 8009758:	08009783 	.word	0x08009783
 800975c:	08009793 	.word	0x08009793
 8009760:	08009793 	.word	0x08009793
 8009764:	08009793 	.word	0x08009793
 8009768:	0800978b 	.word	0x0800978b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800976c:	f7fd f864 	bl	8006838 <HAL_RCC_GetPCLK1Freq>
 8009770:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009772:	e014      	b.n	800979e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009774:	f7fd f876 	bl	8006864 <HAL_RCC_GetPCLK2Freq>
 8009778:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800977a:	e010      	b.n	800979e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800977c:	4b5a      	ldr	r3, [pc, #360]	@ (80098e8 <UART_SetConfig+0x594>)
 800977e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009780:	e00d      	b.n	800979e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009782:	f7fc ffeb 	bl	800675c <HAL_RCC_GetSysClockFreq>
 8009786:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009788:	e009      	b.n	800979e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800978a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800978e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009790:	e005      	b.n	800979e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8009792:	2300      	movs	r3, #0
 8009794:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800979c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800979e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	f000 8089 	beq.w	80098b8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097aa:	4a4e      	ldr	r2, [pc, #312]	@ (80098e4 <UART_SetConfig+0x590>)
 80097ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097b0:	461a      	mov	r2, r3
 80097b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80097b8:	005a      	lsls	r2, r3, #1
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	085b      	lsrs	r3, r3, #1
 80097c0:	441a      	add	r2, r3
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80097ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097cc:	6a3b      	ldr	r3, [r7, #32]
 80097ce:	2b0f      	cmp	r3, #15
 80097d0:	d916      	bls.n	8009800 <UART_SetConfig+0x4ac>
 80097d2:	6a3b      	ldr	r3, [r7, #32]
 80097d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097d8:	d212      	bcs.n	8009800 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80097da:	6a3b      	ldr	r3, [r7, #32]
 80097dc:	b29b      	uxth	r3, r3
 80097de:	f023 030f 	bic.w	r3, r3, #15
 80097e2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80097e4:	6a3b      	ldr	r3, [r7, #32]
 80097e6:	085b      	lsrs	r3, r3, #1
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	f003 0307 	and.w	r3, r3, #7
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	8bfb      	ldrh	r3, [r7, #30]
 80097f2:	4313      	orrs	r3, r2
 80097f4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	8bfa      	ldrh	r2, [r7, #30]
 80097fc:	60da      	str	r2, [r3, #12]
 80097fe:	e05b      	b.n	80098b8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009806:	e057      	b.n	80098b8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009808:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800980c:	2b08      	cmp	r3, #8
 800980e:	d828      	bhi.n	8009862 <UART_SetConfig+0x50e>
 8009810:	a201      	add	r2, pc, #4	@ (adr r2, 8009818 <UART_SetConfig+0x4c4>)
 8009812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009816:	bf00      	nop
 8009818:	0800983d 	.word	0x0800983d
 800981c:	08009845 	.word	0x08009845
 8009820:	0800984d 	.word	0x0800984d
 8009824:	08009863 	.word	0x08009863
 8009828:	08009853 	.word	0x08009853
 800982c:	08009863 	.word	0x08009863
 8009830:	08009863 	.word	0x08009863
 8009834:	08009863 	.word	0x08009863
 8009838:	0800985b 	.word	0x0800985b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800983c:	f7fc fffc 	bl	8006838 <HAL_RCC_GetPCLK1Freq>
 8009840:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009842:	e014      	b.n	800986e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009844:	f7fd f80e 	bl	8006864 <HAL_RCC_GetPCLK2Freq>
 8009848:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800984a:	e010      	b.n	800986e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800984c:	4b26      	ldr	r3, [pc, #152]	@ (80098e8 <UART_SetConfig+0x594>)
 800984e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009850:	e00d      	b.n	800986e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009852:	f7fc ff83 	bl	800675c <HAL_RCC_GetSysClockFreq>
 8009856:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009858:	e009      	b.n	800986e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800985a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800985e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009860:	e005      	b.n	800986e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8009862:	2300      	movs	r3, #0
 8009864:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800986c:	bf00      	nop
    }

    if (pclk != 0U)
 800986e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009870:	2b00      	cmp	r3, #0
 8009872:	d021      	beq.n	80098b8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009878:	4a1a      	ldr	r2, [pc, #104]	@ (80098e4 <UART_SetConfig+0x590>)
 800987a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800987e:	461a      	mov	r2, r3
 8009880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009882:	fbb3 f2f2 	udiv	r2, r3, r2
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	085b      	lsrs	r3, r3, #1
 800988c:	441a      	add	r2, r3
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	fbb2 f3f3 	udiv	r3, r2, r3
 8009896:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009898:	6a3b      	ldr	r3, [r7, #32]
 800989a:	2b0f      	cmp	r3, #15
 800989c:	d909      	bls.n	80098b2 <UART_SetConfig+0x55e>
 800989e:	6a3b      	ldr	r3, [r7, #32]
 80098a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098a4:	d205      	bcs.n	80098b2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80098a6:	6a3b      	ldr	r3, [r7, #32]
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	60da      	str	r2, [r3, #12]
 80098b0:	e002      	b.n	80098b8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	2200      	movs	r2, #0
 80098cc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	2200      	movs	r2, #0
 80098d2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80098d4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3730      	adds	r7, #48	@ 0x30
 80098dc:	46bd      	mov	sp, r7
 80098de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80098e2:	bf00      	nop
 80098e4:	08013698 	.word	0x08013698
 80098e8:	00f42400 	.word	0x00f42400

080098ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098f8:	f003 0308 	and.w	r3, r3, #8
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00a      	beq.n	8009916 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	430a      	orrs	r2, r1
 8009914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800991a:	f003 0301 	and.w	r3, r3, #1
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00a      	beq.n	8009938 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	430a      	orrs	r2, r1
 8009936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800993c:	f003 0302 	and.w	r3, r3, #2
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00a      	beq.n	800995a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	430a      	orrs	r2, r1
 8009958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800995e:	f003 0304 	and.w	r3, r3, #4
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00a      	beq.n	800997c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	430a      	orrs	r2, r1
 800997a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009980:	f003 0310 	and.w	r3, r3, #16
 8009984:	2b00      	cmp	r3, #0
 8009986:	d00a      	beq.n	800999e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	430a      	orrs	r2, r1
 800999c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a2:	f003 0320 	and.w	r3, r3, #32
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00a      	beq.n	80099c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	430a      	orrs	r2, r1
 80099be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d01a      	beq.n	8009a02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	430a      	orrs	r2, r1
 80099e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099ea:	d10a      	bne.n	8009a02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	430a      	orrs	r2, r1
 8009a00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00a      	beq.n	8009a24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	430a      	orrs	r2, r1
 8009a22:	605a      	str	r2, [r3, #4]
  }
}
 8009a24:	bf00      	nop
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b098      	sub	sp, #96	@ 0x60
 8009a34:	af02      	add	r7, sp, #8
 8009a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009a40:	f7f8 fd62 	bl	8002508 <HAL_GetTick>
 8009a44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f003 0308 	and.w	r3, r3, #8
 8009a50:	2b08      	cmp	r3, #8
 8009a52:	d12f      	bne.n	8009ab4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a58:	9300      	str	r3, [sp, #0]
 8009a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 f88e 	bl	8009b84 <UART_WaitOnFlagUntilTimeout>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d022      	beq.n	8009ab4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a76:	e853 3f00 	ldrex	r3, [r3]
 8009a7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a82:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a8e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a94:	e841 2300 	strex	r3, r2, [r1]
 8009a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d1e6      	bne.n	8009a6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2220      	movs	r2, #32
 8009aa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	e063      	b.n	8009b7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f003 0304 	and.w	r3, r3, #4
 8009abe:	2b04      	cmp	r3, #4
 8009ac0:	d149      	bne.n	8009b56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ac2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ac6:	9300      	str	r3, [sp, #0]
 8009ac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009aca:	2200      	movs	r2, #0
 8009acc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f857 	bl	8009b84 <UART_WaitOnFlagUntilTimeout>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d03c      	beq.n	8009b56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae4:	e853 3f00 	ldrex	r3, [r3]
 8009ae8:	623b      	str	r3, [r7, #32]
   return(result);
 8009aea:	6a3b      	ldr	r3, [r7, #32]
 8009aec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009af0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	461a      	mov	r2, r3
 8009af8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009afa:	633b      	str	r3, [r7, #48]	@ 0x30
 8009afc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b02:	e841 2300 	strex	r3, r2, [r1]
 8009b06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1e6      	bne.n	8009adc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	3308      	adds	r3, #8
 8009b14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	e853 3f00 	ldrex	r3, [r3]
 8009b1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f023 0301 	bic.w	r3, r3, #1
 8009b24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	3308      	adds	r3, #8
 8009b2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b2e:	61fa      	str	r2, [r7, #28]
 8009b30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b32:	69b9      	ldr	r1, [r7, #24]
 8009b34:	69fa      	ldr	r2, [r7, #28]
 8009b36:	e841 2300 	strex	r3, r2, [r1]
 8009b3a:	617b      	str	r3, [r7, #20]
   return(result);
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1e5      	bne.n	8009b0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2220      	movs	r2, #32
 8009b46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b52:	2303      	movs	r3, #3
 8009b54:	e012      	b.n	8009b7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2220      	movs	r2, #32
 8009b5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2220      	movs	r2, #32
 8009b62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3758      	adds	r7, #88	@ 0x58
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	603b      	str	r3, [r7, #0]
 8009b90:	4613      	mov	r3, r2
 8009b92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b94:	e04f      	b.n	8009c36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b9c:	d04b      	beq.n	8009c36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b9e:	f7f8 fcb3 	bl	8002508 <HAL_GetTick>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	1ad3      	subs	r3, r2, r3
 8009ba8:	69ba      	ldr	r2, [r7, #24]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d302      	bcc.n	8009bb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d101      	bne.n	8009bb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009bb4:	2303      	movs	r3, #3
 8009bb6:	e04e      	b.n	8009c56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f003 0304 	and.w	r3, r3, #4
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d037      	beq.n	8009c36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	2b80      	cmp	r3, #128	@ 0x80
 8009bca:	d034      	beq.n	8009c36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	2b40      	cmp	r3, #64	@ 0x40
 8009bd0:	d031      	beq.n	8009c36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	69db      	ldr	r3, [r3, #28]
 8009bd8:	f003 0308 	and.w	r3, r3, #8
 8009bdc:	2b08      	cmp	r3, #8
 8009bde:	d110      	bne.n	8009c02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2208      	movs	r2, #8
 8009be6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009be8:	68f8      	ldr	r0, [r7, #12]
 8009bea:	f000 f920 	bl	8009e2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2208      	movs	r2, #8
 8009bf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e029      	b.n	8009c56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	69db      	ldr	r3, [r3, #28]
 8009c08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c10:	d111      	bne.n	8009c36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f000 f906 	bl	8009e2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2220      	movs	r2, #32
 8009c26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009c32:	2303      	movs	r3, #3
 8009c34:	e00f      	b.n	8009c56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	69da      	ldr	r2, [r3, #28]
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	4013      	ands	r3, r2
 8009c40:	68ba      	ldr	r2, [r7, #8]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	bf0c      	ite	eq
 8009c46:	2301      	moveq	r3, #1
 8009c48:	2300      	movne	r3, #0
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	79fb      	ldrb	r3, [r7, #7]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d0a0      	beq.n	8009b96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c54:	2300      	movs	r3, #0
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3710      	adds	r7, #16
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
	...

08009c60 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b096      	sub	sp, #88	@ 0x58
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	68ba      	ldr	r2, [r7, #8]
 8009c72:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	88fa      	ldrh	r2, [r7, #6]
 8009c78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2222      	movs	r2, #34	@ 0x22
 8009c88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d02d      	beq.n	8009cf2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c9c:	4a40      	ldr	r2, [pc, #256]	@ (8009da0 <UART_Start_Receive_DMA+0x140>)
 8009c9e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ca6:	4a3f      	ldr	r2, [pc, #252]	@ (8009da4 <UART_Start_Receive_DMA+0x144>)
 8009ca8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cb0:	4a3d      	ldr	r2, [pc, #244]	@ (8009da8 <UART_Start_Receive_DMA+0x148>)
 8009cb2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cba:	2200      	movs	r2, #0
 8009cbc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	3324      	adds	r3, #36	@ 0x24
 8009cca:	4619      	mov	r1, r3
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	88fb      	ldrh	r3, [r7, #6]
 8009cd4:	f7fb fc04 	bl	80054e0 <HAL_DMA_Start_IT>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d009      	beq.n	8009cf2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2210      	movs	r2, #16
 8009ce2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2220      	movs	r2, #32
 8009cea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e051      	b.n	8009d96 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	691b      	ldr	r3, [r3, #16]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d018      	beq.n	8009d2c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d02:	e853 3f00 	ldrex	r3, [r3]
 8009d06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	461a      	mov	r2, r3
 8009d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d1a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d1c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009d1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d20:	e841 2300 	strex	r3, r2, [r1]
 8009d24:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009d26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1e6      	bne.n	8009cfa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	3308      	adds	r3, #8
 8009d32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d36:	e853 3f00 	ldrex	r3, [r3]
 8009d3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d3e:	f043 0301 	orr.w	r3, r3, #1
 8009d42:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	3308      	adds	r3, #8
 8009d4a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009d4c:	637a      	str	r2, [r7, #52]	@ 0x34
 8009d4e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d50:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009d52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d54:	e841 2300 	strex	r3, r2, [r1]
 8009d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1e5      	bne.n	8009d2c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	3308      	adds	r3, #8
 8009d66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	e853 3f00 	ldrex	r3, [r3]
 8009d6e:	613b      	str	r3, [r7, #16]
   return(result);
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	3308      	adds	r3, #8
 8009d7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009d80:	623a      	str	r2, [r7, #32]
 8009d82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d84:	69f9      	ldr	r1, [r7, #28]
 8009d86:	6a3a      	ldr	r2, [r7, #32]
 8009d88:	e841 2300 	strex	r3, r2, [r1]
 8009d8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d1e5      	bne.n	8009d60 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3758      	adds	r7, #88	@ 0x58
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	08009fb1 	.word	0x08009fb1
 8009da4:	0800a0dd 	.word	0x0800a0dd
 8009da8:	0800a11b 	.word	0x0800a11b

08009dac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b08f      	sub	sp, #60	@ 0x3c
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dba:	6a3b      	ldr	r3, [r7, #32]
 8009dbc:	e853 3f00 	ldrex	r3, [r3]
 8009dc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8009dc2:	69fb      	ldr	r3, [r7, #28]
 8009dc4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009dc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	461a      	mov	r2, r3
 8009dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009dd4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009dd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009dda:	e841 2300 	strex	r3, r2, [r1]
 8009dde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d1e6      	bne.n	8009db4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	3308      	adds	r3, #8
 8009dec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	e853 3f00 	ldrex	r3, [r3]
 8009df4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009dfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	3308      	adds	r3, #8
 8009e04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e06:	61ba      	str	r2, [r7, #24]
 8009e08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0a:	6979      	ldr	r1, [r7, #20]
 8009e0c:	69ba      	ldr	r2, [r7, #24]
 8009e0e:	e841 2300 	strex	r3, r2, [r1]
 8009e12:	613b      	str	r3, [r7, #16]
   return(result);
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d1e5      	bne.n	8009de6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2220      	movs	r2, #32
 8009e1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009e22:	bf00      	nop
 8009e24:	373c      	adds	r7, #60	@ 0x3c
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr

08009e2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e2e:	b480      	push	{r7}
 8009e30:	b095      	sub	sp, #84	@ 0x54
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e3e:	e853 3f00 	ldrex	r3, [r3]
 8009e42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	461a      	mov	r2, r3
 8009e52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e54:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e56:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e5c:	e841 2300 	strex	r3, r2, [r1]
 8009e60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d1e6      	bne.n	8009e36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	3308      	adds	r3, #8
 8009e6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e70:	6a3b      	ldr	r3, [r7, #32]
 8009e72:	e853 3f00 	ldrex	r3, [r3]
 8009e76:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e78:	69fb      	ldr	r3, [r7, #28]
 8009e7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e7e:	f023 0301 	bic.w	r3, r3, #1
 8009e82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	3308      	adds	r3, #8
 8009e8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e94:	e841 2300 	strex	r3, r2, [r1]
 8009e98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d1e3      	bne.n	8009e68 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d118      	bne.n	8009eda <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	e853 3f00 	ldrex	r3, [r3]
 8009eb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	f023 0310 	bic.w	r3, r3, #16
 8009ebc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ec6:	61bb      	str	r3, [r7, #24]
 8009ec8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eca:	6979      	ldr	r1, [r7, #20]
 8009ecc:	69ba      	ldr	r2, [r7, #24]
 8009ece:	e841 2300 	strex	r3, r2, [r1]
 8009ed2:	613b      	str	r3, [r7, #16]
   return(result);
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d1e6      	bne.n	8009ea8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2220      	movs	r2, #32
 8009ede:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009eee:	bf00      	nop
 8009ef0:	3754      	adds	r7, #84	@ 0x54
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b090      	sub	sp, #64	@ 0x40
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f06:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f003 0320 	and.w	r3, r3, #32
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d137      	bne.n	8009f86 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	3308      	adds	r3, #8
 8009f24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f28:	e853 3f00 	ldrex	r3, [r3]
 8009f2c:	623b      	str	r3, [r7, #32]
   return(result);
 8009f2e:	6a3b      	ldr	r3, [r7, #32]
 8009f30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	3308      	adds	r3, #8
 8009f3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f46:	e841 2300 	strex	r3, r2, [r1]
 8009f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d1e5      	bne.n	8009f1e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	e853 3f00 	ldrex	r3, [r3]
 8009f5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f66:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f70:	61fb      	str	r3, [r7, #28]
 8009f72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f74:	69b9      	ldr	r1, [r7, #24]
 8009f76:	69fa      	ldr	r2, [r7, #28]
 8009f78:	e841 2300 	strex	r3, r2, [r1]
 8009f7c:	617b      	str	r3, [r7, #20]
   return(result);
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d1e6      	bne.n	8009f52 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f84:	e002      	b.n	8009f8c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009f86:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009f88:	f7ff f99c 	bl	80092c4 <HAL_UART_TxCpltCallback>
}
 8009f8c:	bf00      	nop
 8009f8e:	3740      	adds	r7, #64	@ 0x40
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	f7ff f998 	bl	80092d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fa8:	bf00      	nop
 8009faa:	3710      	adds	r7, #16
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b09c      	sub	sp, #112	@ 0x70
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fbc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f003 0320 	and.w	r3, r3, #32
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d171      	bne.n	800a0b0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009fcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fdc:	e853 3f00 	ldrex	r3, [r3]
 8009fe0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009fe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fe4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009fe8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009fea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	461a      	mov	r2, r3
 8009ff0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ff2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ff4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ff8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ffa:	e841 2300 	strex	r3, r2, [r1]
 8009ffe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a000:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a002:	2b00      	cmp	r3, #0
 800a004:	d1e6      	bne.n	8009fd4 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a006:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	3308      	adds	r3, #8
 800a00c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a010:	e853 3f00 	ldrex	r3, [r3]
 800a014:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a018:	f023 0301 	bic.w	r3, r3, #1
 800a01c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a01e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	3308      	adds	r3, #8
 800a024:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a026:	647a      	str	r2, [r7, #68]	@ 0x44
 800a028:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a02c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a02e:	e841 2300 	strex	r3, r2, [r1]
 800a032:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a036:	2b00      	cmp	r3, #0
 800a038:	d1e5      	bne.n	800a006 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a03a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	3308      	adds	r3, #8
 800a040:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a044:	e853 3f00 	ldrex	r3, [r3]
 800a048:	623b      	str	r3, [r7, #32]
   return(result);
 800a04a:	6a3b      	ldr	r3, [r7, #32]
 800a04c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a050:	663b      	str	r3, [r7, #96]	@ 0x60
 800a052:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	3308      	adds	r3, #8
 800a058:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a05a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a05c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a060:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a062:	e841 2300 	strex	r3, r2, [r1]
 800a066:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d1e5      	bne.n	800a03a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a06e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a070:	2220      	movs	r2, #32
 800a072:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a076:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a078:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d118      	bne.n	800a0b0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a07e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	e853 3f00 	ldrex	r3, [r3]
 800a08a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f023 0310 	bic.w	r3, r3, #16
 800a092:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a094:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	461a      	mov	r2, r3
 800a09a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a09c:	61fb      	str	r3, [r7, #28]
 800a09e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a0:	69b9      	ldr	r1, [r7, #24]
 800a0a2:	69fa      	ldr	r2, [r7, #28]
 800a0a4:	e841 2300 	strex	r3, r2, [r1]
 800a0a8:	617b      	str	r3, [r7, #20]
   return(result);
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d1e6      	bne.n	800a07e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d107      	bne.n	800a0ce <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a0c8:	f002 f858 	bl	800c17c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a0cc:	e002      	b.n	800a0d4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a0ce:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a0d0:	f7ff f90c 	bl	80092ec <HAL_UART_RxCpltCallback>
}
 800a0d4:	bf00      	nop
 800a0d6:	3770      	adds	r7, #112	@ 0x70
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0e8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d109      	bne.n	800a10c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a0fe:	085b      	lsrs	r3, r3, #1
 800a100:	b29b      	uxth	r3, r3
 800a102:	4619      	mov	r1, r3
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f002 f839 	bl	800c17c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a10a:	e002      	b.n	800a112 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f7ff f8f7 	bl	8009300 <HAL_UART_RxHalfCpltCallback>
}
 800a112:	bf00      	nop
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b086      	sub	sp, #24
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a126:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a12e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a136:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a142:	2b80      	cmp	r3, #128	@ 0x80
 800a144:	d109      	bne.n	800a15a <UART_DMAError+0x40>
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	2b21      	cmp	r3, #33	@ 0x21
 800a14a:	d106      	bne.n	800a15a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	2200      	movs	r2, #0
 800a150:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a154:	6978      	ldr	r0, [r7, #20]
 800a156:	f7ff fe29 	bl	8009dac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a164:	2b40      	cmp	r3, #64	@ 0x40
 800a166:	d109      	bne.n	800a17c <UART_DMAError+0x62>
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2b22      	cmp	r3, #34	@ 0x22
 800a16c:	d106      	bne.n	800a17c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	2200      	movs	r2, #0
 800a172:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a176:	6978      	ldr	r0, [r7, #20]
 800a178:	f7ff fe59 	bl	8009e2e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a182:	f043 0210 	orr.w	r2, r3, #16
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a18c:	6978      	ldr	r0, [r7, #20]
 800a18e:	f7ff f8c1 	bl	8009314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a192:	bf00      	nop
 800a194:	3718      	adds	r7, #24
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b084      	sub	sp, #16
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1b8:	68f8      	ldr	r0, [r7, #12]
 800a1ba:	f7ff f8ab 	bl	8009314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1be:	bf00      	nop
 800a1c0:	3710      	adds	r7, #16
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b088      	sub	sp, #32
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	e853 3f00 	ldrex	r3, [r3]
 800a1da:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1e2:	61fb      	str	r3, [r7, #28]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	61bb      	str	r3, [r7, #24]
 800a1ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f0:	6979      	ldr	r1, [r7, #20]
 800a1f2:	69ba      	ldr	r2, [r7, #24]
 800a1f4:	e841 2300 	strex	r3, r2, [r1]
 800a1f8:	613b      	str	r3, [r7, #16]
   return(result);
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d1e6      	bne.n	800a1ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2220      	movs	r2, #32
 800a204:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f7ff f858 	bl	80092c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a214:	bf00      	nop
 800a216:	3720      	adds	r7, #32
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a224:	bf00      	nop
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a238:	bf00      	nop
 800a23a:	370c      	adds	r7, #12
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a24c:	bf00      	nop
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a266:	2b01      	cmp	r3, #1
 800a268:	d101      	bne.n	800a26e <HAL_UARTEx_DisableFifoMode+0x16>
 800a26a:	2302      	movs	r3, #2
 800a26c:	e027      	b.n	800a2be <HAL_UARTEx_DisableFifoMode+0x66>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2201      	movs	r2, #1
 800a272:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2224      	movs	r2, #36	@ 0x24
 800a27a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f022 0201 	bic.w	r2, r2, #1
 800a294:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a29c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	68fa      	ldr	r2, [r7, #12]
 800a2aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2220      	movs	r2, #32
 800a2b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a2bc:	2300      	movs	r3, #0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3714      	adds	r7, #20
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr

0800a2ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b084      	sub	sp, #16
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d101      	bne.n	800a2e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a2de:	2302      	movs	r3, #2
 800a2e0:	e02d      	b.n	800a33e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2224      	movs	r2, #36	@ 0x24
 800a2ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f022 0201 	bic.w	r2, r2, #1
 800a308:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	683a      	ldr	r2, [r7, #0]
 800a31a:	430a      	orrs	r2, r1
 800a31c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 f8a4 	bl	800a46c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2220      	movs	r2, #32
 800a330:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a346:	b580      	push	{r7, lr}
 800a348:	b084      	sub	sp, #16
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
 800a34e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a356:	2b01      	cmp	r3, #1
 800a358:	d101      	bne.n	800a35e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a35a:	2302      	movs	r3, #2
 800a35c:	e02d      	b.n	800a3ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2201      	movs	r2, #1
 800a362:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2224      	movs	r2, #36	@ 0x24
 800a36a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f022 0201 	bic.w	r2, r2, #1
 800a384:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	683a      	ldr	r2, [r7, #0]
 800a396:	430a      	orrs	r2, r1
 800a398:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 f866 	bl	800a46c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	68fa      	ldr	r2, [r7, #12]
 800a3a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2220      	movs	r2, #32
 800a3ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b08c      	sub	sp, #48	@ 0x30
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	60f8      	str	r0, [r7, #12]
 800a3ca:	60b9      	str	r1, [r7, #8]
 800a3cc:	4613      	mov	r3, r2
 800a3ce:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a3d6:	2b20      	cmp	r3, #32
 800a3d8:	d142      	bne.n	800a460 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d002      	beq.n	800a3e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800a3e0:	88fb      	ldrh	r3, [r7, #6]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d101      	bne.n	800a3ea <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	e03b      	b.n	800a462 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a3f6:	88fb      	ldrh	r3, [r7, #6]
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	68b9      	ldr	r1, [r7, #8]
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	f7ff fc2f 	bl	8009c60 <UART_Start_Receive_DMA>
 800a402:	4603      	mov	r3, r0
 800a404:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a408:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d124      	bne.n	800a45a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a414:	2b01      	cmp	r3, #1
 800a416:	d11d      	bne.n	800a454 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2210      	movs	r2, #16
 800a41e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	e853 3f00 	ldrex	r3, [r3]
 800a42c:	617b      	str	r3, [r7, #20]
   return(result);
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	f043 0310 	orr.w	r3, r3, #16
 800a434:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	461a      	mov	r2, r3
 800a43c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a43e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a440:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a442:	6a39      	ldr	r1, [r7, #32]
 800a444:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a446:	e841 2300 	strex	r3, r2, [r1]
 800a44a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d1e6      	bne.n	800a420 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800a452:	e002      	b.n	800a45a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a454:	2301      	movs	r3, #1
 800a456:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800a45a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a45e:	e000      	b.n	800a462 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a460:	2302      	movs	r3, #2
  }
}
 800a462:	4618      	mov	r0, r3
 800a464:	3730      	adds	r7, #48	@ 0x30
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
	...

0800a46c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d108      	bne.n	800a48e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a48c:	e031      	b.n	800a4f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a48e:	2308      	movs	r3, #8
 800a490:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a492:	2308      	movs	r3, #8
 800a494:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	0e5b      	lsrs	r3, r3, #25
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	f003 0307 	and.w	r3, r3, #7
 800a4a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	0f5b      	lsrs	r3, r3, #29
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	f003 0307 	and.w	r3, r3, #7
 800a4b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4b6:	7bbb      	ldrb	r3, [r7, #14]
 800a4b8:	7b3a      	ldrb	r2, [r7, #12]
 800a4ba:	4911      	ldr	r1, [pc, #68]	@ (800a500 <UARTEx_SetNbDataToProcess+0x94>)
 800a4bc:	5c8a      	ldrb	r2, [r1, r2]
 800a4be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a4c2:	7b3a      	ldrb	r2, [r7, #12]
 800a4c4:	490f      	ldr	r1, [pc, #60]	@ (800a504 <UARTEx_SetNbDataToProcess+0x98>)
 800a4c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4cc:	b29a      	uxth	r2, r3
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4d4:	7bfb      	ldrb	r3, [r7, #15]
 800a4d6:	7b7a      	ldrb	r2, [r7, #13]
 800a4d8:	4909      	ldr	r1, [pc, #36]	@ (800a500 <UARTEx_SetNbDataToProcess+0x94>)
 800a4da:	5c8a      	ldrb	r2, [r1, r2]
 800a4dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a4e0:	7b7a      	ldrb	r2, [r7, #13]
 800a4e2:	4908      	ldr	r1, [pc, #32]	@ (800a504 <UARTEx_SetNbDataToProcess+0x98>)
 800a4e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4e6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a4f2:	bf00      	nop
 800a4f4:	3714      	adds	r7, #20
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	080136b0 	.word	0x080136b0
 800a504:	080136b8 	.word	0x080136b8

0800a508 <goToZeroElecAngle>:
#include "pid.h"
#include "lowpass_filter.h"
#include "focLib.h"

void goToZeroElecAngle(BldcMotor *motor)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
    setTorque(motor, 0, OPEN_LOOP_TORQUE, 0);
 800a510:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 800a534 <goToZeroElecAngle+0x2c>
 800a514:	eddf 0a08 	vldr	s1, [pc, #32]	@ 800a538 <goToZeroElecAngle+0x30>
 800a518:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 800a534 <goToZeroElecAngle+0x2c>
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f001 f84f 	bl	800b5c0 <setTorque>
    delay(700);
 800a522:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800a526:	f003 fb8d 	bl	800dc44 <delay>
}
 800a52a:	bf00      	nop
 800a52c:	3708      	adds	r7, #8
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	00000000 	.word	0x00000000
 800a538:	3fc511a3 	.word	0x3fc511a3

0800a53c <alignSensor>:
int alignSensor(BldcMotor *motor)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b08a      	sub	sp, #40	@ 0x28
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
    // setTorque(motor, OPEN_LOOP_TORQUE, 0, _3PI_2);
    // delay(200);
    // encoderUpdate(&motor->magEncoder);
    // float start_angle = motor->magEncoder.fullAngle;
    // printLog("start_angle:%f\n", start_angle);
    for (int i = 0; i <= 500; i++)
 800a544:	2300      	movs	r3, #0
 800a546:	627b      	str	r3, [r7, #36]	@ 0x24
 800a548:	e025      	b.n	800a596 <alignSensor+0x5a>
    {
        float angle = _3PI_2 + _2PI * i / 500.0f;
 800a54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54c:	ee07 3a90 	vmov	s15, r3
 800a550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a554:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 800a75c <alignSensor+0x220>
 800a558:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a55c:	eddf 6a80 	vldr	s13, [pc, #512]	@ 800a760 <alignSensor+0x224>
 800a560:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a564:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 800a764 <alignSensor+0x228>
 800a568:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a56c:	edc7 7a02 	vstr	s15, [r7, #8]
        setTorque(motor, OPEN_LOOP_TORQUE, 0, angle);
 800a570:	ed97 1a02 	vldr	s2, [r7, #8]
 800a574:	eddf 0a7c 	vldr	s1, [pc, #496]	@ 800a768 <alignSensor+0x22c>
 800a578:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 800a76c <alignSensor+0x230>
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f001 f81f 	bl	800b5c0 <setTorque>
        encoderUpdate(&motor->magEncoder);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	4618      	mov	r0, r3
 800a586:	f000 fcf1 	bl	800af6c <encoderUpdate>
        delay(2);
 800a58a:	2002      	movs	r0, #2
 800a58c:	f003 fb5a 	bl	800dc44 <delay>
    for (int i = 0; i <= 500; i++)
 800a590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a592:	3301      	adds	r3, #1
 800a594:	627b      	str	r3, [r7, #36]	@ 0x24
 800a596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a598:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800a59c:	ddd5      	ble.n	800a54a <alignSensor+0xe>
    }
    // encoderUpdate(&motor->magEncoder);

    float mid_angle = motor->magEncoder.fullAngle;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	695b      	ldr	r3, [r3, #20]
 800a5a2:	61fb      	str	r3, [r7, #28]
    printLog("mid_angle:%f\n", mid_angle);
 800a5a4:	69f8      	ldr	r0, [r7, #28]
 800a5a6:	f7f5 fff7 	bl	8000598 <__aeabi_f2d>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	4870      	ldr	r0, [pc, #448]	@ (800a770 <alignSensor+0x234>)
 800a5b0:	f001 fe00 	bl	800c1b4 <printLog>
    // move one electrical revolution backwards
    for (int i = 500; i >= 0; i--)
 800a5b4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800a5b8:	623b      	str	r3, [r7, #32]
 800a5ba:	e025      	b.n	800a608 <alignSensor+0xcc>
    {
        float angle = _3PI_2 + _2PI * i / 500.0f;
 800a5bc:	6a3b      	ldr	r3, [r7, #32]
 800a5be:	ee07 3a90 	vmov	s15, r3
 800a5c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5c6:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 800a75c <alignSensor+0x220>
 800a5ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a5ce:	eddf 6a64 	vldr	s13, [pc, #400]	@ 800a760 <alignSensor+0x224>
 800a5d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a5d6:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 800a764 <alignSensor+0x228>
 800a5da:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a5de:	edc7 7a03 	vstr	s15, [r7, #12]
        setTorque(motor, OPEN_LOOP_TORQUE, 0, angle);
 800a5e2:	ed97 1a03 	vldr	s2, [r7, #12]
 800a5e6:	eddf 0a60 	vldr	s1, [pc, #384]	@ 800a768 <alignSensor+0x22c>
 800a5ea:	ed9f 0a60 	vldr	s0, [pc, #384]	@ 800a76c <alignSensor+0x230>
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 ffe6 	bl	800b5c0 <setTorque>
        encoderUpdate(&motor->magEncoder);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f000 fcb8 	bl	800af6c <encoderUpdate>
        delay(2);
 800a5fc:	2002      	movs	r0, #2
 800a5fe:	f003 fb21 	bl	800dc44 <delay>
    for (int i = 500; i >= 0; i--)
 800a602:	6a3b      	ldr	r3, [r7, #32]
 800a604:	3b01      	subs	r3, #1
 800a606:	623b      	str	r3, [r7, #32]
 800a608:	6a3b      	ldr	r3, [r7, #32]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	dad6      	bge.n	800a5bc <alignSensor+0x80>
    }
    // encoderUpdate(&motor->magEncoder);

    float end_angle = motor->magEncoder.fullAngle;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	695b      	ldr	r3, [r3, #20]
 800a612:	61bb      	str	r3, [r7, #24]
    printLog("end_angle:%f\n", end_angle);
 800a614:	69b8      	ldr	r0, [r7, #24]
 800a616:	f7f5 ffbf 	bl	8000598 <__aeabi_f2d>
 800a61a:	4602      	mov	r2, r0
 800a61c:	460b      	mov	r3, r1
 800a61e:	4855      	ldr	r0, [pc, #340]	@ (800a774 <alignSensor+0x238>)
 800a620:	f001 fdc8 	bl	800c1b4 <printLog>
    // setPhaseVoltage(0, 0, 0);
    delay(200);
 800a624:	20c8      	movs	r0, #200	@ 0xc8
 800a626:	f003 fb0d 	bl	800dc44 <delay>

    // determine the direction the sensor moved
    float moved = fabsf(mid_angle - end_angle);
 800a62a:	ed97 7a07 	vldr	s14, [r7, #28]
 800a62e:	edd7 7a06 	vldr	s15, [r7, #24]
 800a632:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a636:	eef0 7ae7 	vabs.f32	s15, s15
 800a63a:	edc7 7a05 	vstr	s15, [r7, #20]
    printLog("moved:%f\n", moved);
 800a63e:	6978      	ldr	r0, [r7, #20]
 800a640:	f7f5 ffaa 	bl	8000598 <__aeabi_f2d>
 800a644:	4602      	mov	r2, r0
 800a646:	460b      	mov	r3, r1
 800a648:	484b      	ldr	r0, [pc, #300]	@ (800a778 <alignSensor+0x23c>)
 800a64a:	f001 fdb3 	bl	800c1b4 <printLog>
    if (moved < MIN_ANGLE_DETECT_MOVEMENT)
 800a64e:	edd7 7a05 	vldr	s15, [r7, #20]
 800a652:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800a77c <alignSensor+0x240>
 800a656:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a65e:	d504      	bpl.n	800a66a <alignSensor+0x12e>
    { // minimum angle to detect movement
        printLog("Failed to notice movement\n");
 800a660:	4847      	ldr	r0, [pc, #284]	@ (800a780 <alignSensor+0x244>)
 800a662:	f001 fda7 	bl	800c1b4 <printLog>
        return 0; // failed calibration
 800a666:	2300      	movs	r3, #0
 800a668:	e073      	b.n	800a752 <alignSensor+0x216>
    }
    else if (mid_angle < end_angle)
 800a66a:	ed97 7a07 	vldr	s14, [r7, #28]
 800a66e:	edd7 7a06 	vldr	s15, [r7, #24]
 800a672:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a67a:	d507      	bpl.n	800a68c <alignSensor+0x150>
    {
        printLog("sensor_direction==CCW\n");
 800a67c:	4841      	ldr	r0, [pc, #260]	@ (800a784 <alignSensor+0x248>)
 800a67e:	f001 fd99 	bl	800c1b4 <printLog>
        motor->magEncoder.direction = CCW;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	22ff      	movs	r2, #255	@ 0xff
 800a686:	f883 2020 	strb.w	r2, [r3, #32]
 800a68a:	e006      	b.n	800a69a <alignSensor+0x15e>
    }
    else
    {
        printLog("sensor_direction==CW\n");
 800a68c:	483e      	ldr	r0, [pc, #248]	@ (800a788 <alignSensor+0x24c>)
 800a68e:	f001 fd91 	bl	800c1b4 <printLog>
        motor->magEncoder.direction = CW;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2201      	movs	r2, #1
 800a696:	f883 2020 	strb.w	r2, [r3, #32]
    }
    // check pole pair number
    bool pp_check_result = !(fabsf(moved * motor->pole_pairs - _2PI) > 0.5f); // 0.5f is arbitrary number it can be lower or higher!
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a6a0:	ee07 3a90 	vmov	s15, r3
 800a6a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a6a8:	edd7 7a05 	vldr	s15, [r7, #20]
 800a6ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6b0:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800a75c <alignSensor+0x220>
 800a6b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a6b8:	eef0 7ae7 	vabs.f32	s15, s15
 800a6bc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a6c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6c8:	bfcc      	ite	gt
 800a6ca:	2301      	movgt	r3, #1
 800a6cc:	2300      	movle	r3, #0
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	f083 0301 	eor.w	r3, r3, #1
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	74fb      	strb	r3, [r7, #19]
    if (pp_check_result == false)
 800a6d8:	7cfb      	ldrb	r3, [r7, #19]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d10d      	bne.n	800a6fa <alignSensor+0x1be>
    {
        printLog("PP check: fail - estimated pp: %d\n", (int)(_2PI / moved));
 800a6de:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800a75c <alignSensor+0x220>
 800a6e2:	ed97 7a05 	vldr	s14, [r7, #20]
 800a6e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a6ee:	ee17 1a90 	vmov	r1, s15
 800a6f2:	4826      	ldr	r0, [pc, #152]	@ (800a78c <alignSensor+0x250>)
 800a6f4:	f001 fd5e 	bl	800c1b4 <printLog>
 800a6f8:	e002      	b.n	800a700 <alignSensor+0x1c4>
    }
    else
    {
        printLog("PP check: OK!\n");
 800a6fa:	4825      	ldr	r0, [pc, #148]	@ (800a790 <alignSensor+0x254>)
 800a6fc:	f001 fd5a 	bl	800c1b4 <printLog>
    }

    // align the electrical phases of the motor and sensor
    // set angle -90(270 = 3PI/2) degrees
    goToZeroElecAngle(motor);
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f7ff ff01 	bl	800a508 <goToZeroElecAngle>
    // read the sensor
    encoderUpdate(&motor->magEncoder);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4618      	mov	r0, r3
 800a70a:	f000 fc2f 	bl	800af6c <encoderUpdate>
    // get the current zero electric angle
    motor->zeroElectricAngleOffSet = 0;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f04f 0200 	mov.w	r2, #0
 800a714:	635a      	str	r2, [r3, #52]	@ 0x34
    getElecAngle(motor);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 f840 	bl	800a79c <getElecAngle>
    motor->zeroElectricAngleOffSet = motor->angle_el;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	635a      	str	r2, [r3, #52]	@ 0x34
    // zero_electric_angle =  _normalizeAngle(_electricalAngle(sensor_direction*sensor->getAngle(), pole_pairs));

    // encoderUpdate(&motor->magEncoder);
    getElecAngle(motor);
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 f839 	bl	800a79c <getElecAngle>
    // motor->zeroElectricAngleOffSet = 0;
    // printLog("[zeroAngleOffset]:%f  [zeroAngle]:%f\r\n", motor->zeroElectricAngleOffSet, motor->angle_el);
    printLog("[zeroAngleOffset]:%f\n", motor->zeroElectricAngleOffSet);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a72e:	4618      	mov	r0, r3
 800a730:	f7f5 ff32 	bl	8000598 <__aeabi_f2d>
 800a734:	4602      	mov	r2, r0
 800a736:	460b      	mov	r3, r1
 800a738:	4816      	ldr	r0, [pc, #88]	@ (800a794 <alignSensor+0x258>)
 800a73a:	f001 fd3b 	bl	800c1b4 <printLog>
    printLog("[zeroAngle]:%f\n", motor->angle_el);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a742:	4618      	mov	r0, r3
 800a744:	f7f5 ff28 	bl	8000598 <__aeabi_f2d>
 800a748:	4602      	mov	r2, r0
 800a74a:	460b      	mov	r3, r1
 800a74c:	4812      	ldr	r0, [pc, #72]	@ (800a798 <alignSensor+0x25c>)
 800a74e:	f001 fd31 	bl	800c1b4 <printLog>
    // // make sure the angle_el is about zero

    // delay(200);
}
 800a752:	4618      	mov	r0, r3
 800a754:	3728      	adds	r7, #40	@ 0x28
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	40c90fdb 	.word	0x40c90fdb
 800a760:	43fa0000 	.word	0x43fa0000
 800a764:	4096cbe4 	.word	0x4096cbe4
 800a768:	00000000 	.word	0x00000000
 800a76c:	3fc511a3 	.word	0x3fc511a3
 800a770:	08013508 	.word	0x08013508
 800a774:	08013518 	.word	0x08013518
 800a778:	08013528 	.word	0x08013528
 800a77c:	3d7ecfa9 	.word	0x3d7ecfa9
 800a780:	08013534 	.word	0x08013534
 800a784:	08013550 	.word	0x08013550
 800a788:	08013568 	.word	0x08013568
 800a78c:	08013580 	.word	0x08013580
 800a790:	080135a4 	.word	0x080135a4
 800a794:	080135b4 	.word	0x080135b4
 800a798:	080135cc 	.word	0x080135cc

0800a79c <getElecAngle>:

void getElecAngle(BldcMotor *motor)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
    motor->angle_el = _normalizeAngle(motor->pole_pairs * motor->magEncoder.shaftAngle - motor->zeroElectricAngleOffSet);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a7aa:	ee07 3a90 	vmov	s15, r3
 800a7ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	edd3 7a04 	vldr	s15, [r3, #16]
 800a7b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800a7c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7c6:	eeb0 0a67 	vmov.f32	s0, s15
 800a7ca:	f000 fd71 	bl	800b2b0 <_normalizeAngle>
 800a7ce:	eef0 7a40 	vmov.f32	s15, s0
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
}
 800a7d8:	bf00      	nop
 800a7da:	3708      	adds	r7, #8
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <foc>:

void foc(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b088      	sub	sp, #32
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	60b9      	str	r1, [r7, #8]
 800a7ea:	607a      	str	r2, [r7, #4]

    if (motor->state == MOTOR_CALIBRATE)
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d111      	bne.n	800a81a <foc+0x3a>
    {
        getCurrentOffsets(motor, adc_a, adc_b, 100);
 800a7f6:	2364      	movs	r3, #100	@ 0x64
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	68b9      	ldr	r1, [r7, #8]
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f000 f9af 	bl	800ab60 <getCurrentOffsets>
        alignSensor(motor);
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f7ff fe9a 	bl	800a53c <alignSensor>
        motor->state = MOTOR_READY;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        motor->stopPwm();
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800a816:	4798      	blx	r3
                break;
            }
            setTorque(motor, motor->Uq, motor->Ud, motor->angle_el);
        }
    }
}
 800a818:	e194      	b.n	800ab44 <foc+0x364>
        getPhaseCurrents(motor, adc_a, adc_b);
 800a81a:	687a      	ldr	r2, [r7, #4]
 800a81c:	68b9      	ldr	r1, [r7, #8]
 800a81e:	68f8      	ldr	r0, [r7, #12]
 800a820:	f000 fa6e 	bl	800ad00 <getPhaseCurrents>
        getABCurrents(motor);
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	f000 fb0d 	bl	800ae44 <getABCurrents>
        getDQCurrents(motor);
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	f000 fb30 	bl	800ae90 <getDQCurrents>
        motor->Iq = lpfOperator(&motor->IqFilter, motor->Iq);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f103 02f4 	add.w	r2, r3, #244	@ 0xf4
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800a83c:	eeb0 0a67 	vmov.f32	s0, s15
 800a840:	4610      	mov	r0, r2
 800a842:	f000 fc2d 	bl	800b0a0 <lpfOperator>
 800a846:	eef0 7a40 	vmov.f32	s15, s0
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
        motor->Id = lpfOperator(&motor->IdFilter, motor->Id);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f503 7280 	add.w	r2, r3, #256	@ 0x100
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800a85c:	eeb0 0a67 	vmov.f32	s0, s15
 800a860:	4610      	mov	r0, r2
 800a862:	f000 fc1d 	bl	800b0a0 <lpfOperator>
 800a866:	eef0 7a40 	vmov.f32	s15, s0
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
        encoderUpdate(&motor->magEncoder);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	4618      	mov	r0, r3
 800a874:	f000 fb7a 	bl	800af6c <encoderUpdate>
        motor->magEncoder.velocity = lpfOperator(&motor->velocityFilter, motor->magEncoder.velocity);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f503 7286 	add.w	r2, r3, #268	@ 0x10c
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	edd3 7a06 	vldr	s15, [r3, #24]
 800a884:	eeb0 0a67 	vmov.f32	s0, s15
 800a888:	4610      	mov	r0, r2
 800a88a:	f000 fc09 	bl	800b0a0 <lpfOperator>
 800a88e:	eef0 7a40 	vmov.f32	s15, s0
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	edc3 7a06 	vstr	s15, [r3, #24]
        getElecAngle(motor);
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f7ff ff7f 	bl	800a79c <getElecAngle>
        if (motor->state == MOTOR_READY)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	f000 814d 	beq.w	800ab44 <foc+0x364>
        else if (motor->state == MOTOR_START)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8b0:	2b02      	cmp	r3, #2
 800a8b2:	f040 8147 	bne.w	800ab44 <foc+0x364>
            switch (motor->controlType)
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800a8bc:	2b03      	cmp	r3, #3
 800a8be:	f200 812f 	bhi.w	800ab20 <foc+0x340>
 800a8c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a8c8 <foc+0xe8>)
 800a8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c8:	0800a935 	.word	0x0800a935
 800a8cc:	0800a8d9 	.word	0x0800a8d9
 800a8d0:	0800a99f 	.word	0x0800a99f
 800a8d4:	0800aa4f 	.word	0x0800aa4f
                motor->target = 50;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	4a9c      	ldr	r2, [pc, #624]	@ (800ab4c <foc+0x36c>)
 800a8dc:	631a      	str	r2, [r3, #48]	@ 0x30
                shaftAngle = _normalizeAngle(shaftAngle + motor->target * motor->Ts);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800a8ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a8ee:	4b98      	ldr	r3, [pc, #608]	@ (800ab50 <foc+0x370>)
 800a8f0:	edd3 7a00 	vldr	s15, [r3]
 800a8f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8f8:	eeb0 0a67 	vmov.f32	s0, s15
 800a8fc:	f000 fcd8 	bl	800b2b0 <_normalizeAngle>
 800a900:	eef0 7a40 	vmov.f32	s15, s0
 800a904:	4b92      	ldr	r3, [pc, #584]	@ (800ab50 <foc+0x370>)
 800a906:	edc3 7a00 	vstr	s15, [r3]
                motor->angle_el = _electricalAngle(shaftAngle, motor->pole_pairs);
 800a90a:	4b91      	ldr	r3, [pc, #580]	@ (800ab50 <foc+0x370>)
 800a90c:	edd3 7a00 	vldr	s15, [r3]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a916:	4618      	mov	r0, r3
 800a918:	eeb0 0a67 	vmov.f32	s0, s15
 800a91c:	f000 fcfe 	bl	800b31c <_electricalAngle>
 800a920:	eef0 7a40 	vmov.f32	s15, s0
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                motor->Uq = OPEN_LOOP_TORQUE;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	4a89      	ldr	r2, [pc, #548]	@ (800ab54 <foc+0x374>)
 800a92e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
                break;
 800a932:	e0f5      	b.n	800ab20 <foc+0x340>
                if (motor->torqueType == VOLTAGE)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d105      	bne.n	800a94a <foc+0x16a>
                    motor->Uq = motor->target;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
                break;
 800a948:	e0ea      	b.n	800ab20 <foc+0x340>
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800a956:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800ab58 <foc+0x378>
 800a95a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a95e:	eeb0 0a67 	vmov.f32	s0, s15
 800a962:	4610      	mov	r0, r2
 800a964:	f000 fd24 	bl	800b3b0 <pidOperator>
 800a968:	eef0 7a40 	vmov.f32	s15, s0
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                    motor->Uq = pidOperator(&motor->pidIq, motor->target - motor->Iq);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800a984:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a988:	eeb0 0a67 	vmov.f32	s0, s15
 800a98c:	4610      	mov	r0, r2
 800a98e:	f000 fd0f 	bl	800b3b0 <pidOperator>
 800a992:	eef0 7a40 	vmov.f32	s15, s0
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800a99c:	e0c0      	b.n	800ab20 <foc+0x340>
                if (motor->torqueType == VOLTAGE)
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d116      	bne.n	800a9d6 <foc+0x1f6>
                    velocityErr = motor->target - motor->magEncoder.velocity;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	edd3 7a06 	vldr	s15, [r3, #24]
 800a9b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9b8:	edc7 7a04 	vstr	s15, [r7, #16]
                    motor->Uq = pidOperator(&motor->velocityPID, velocityErr);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	33ac      	adds	r3, #172	@ 0xac
 800a9c0:	ed97 0a04 	vldr	s0, [r7, #16]
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f000 fcf3 	bl	800b3b0 <pidOperator>
 800a9ca:	eef0 7a40 	vmov.f32	s15, s0
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800a9d4:	e0a4      	b.n	800ab20 <foc+0x340>
                    velocityErr = motor->target - motor->magEncoder.velocity;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	edd3 7a06 	vldr	s15, [r3, #24]
 800a9e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9e6:	edc7 7a04 	vstr	s15, [r7, #16]
                    IqRef = pidOperator(&motor->velocityPID, velocityErr);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	33ac      	adds	r3, #172	@ 0xac
 800a9ee:	ed97 0a04 	vldr	s0, [r7, #16]
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f000 fcdc 	bl	800b3b0 <pidOperator>
 800a9f8:	ed87 0a05 	vstr	s0, [r7, #20]
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800aa08:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 800ab58 <foc+0x378>
 800aa0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa10:	eeb0 0a67 	vmov.f32	s0, s15
 800aa14:	4610      	mov	r0, r2
 800aa16:	f000 fccb 	bl	800b3b0 <pidOperator>
 800aa1a:	eef0 7a40 	vmov.f32	s15, s0
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                    motor->Uq = pidOperator(&motor->pidIq, IqRef - motor->Iq);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800aa30:	ed97 7a05 	vldr	s14, [r7, #20]
 800aa34:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa38:	eeb0 0a67 	vmov.f32	s0, s15
 800aa3c:	4610      	mov	r0, r2
 800aa3e:	f000 fcb7 	bl	800b3b0 <pidOperator>
 800aa42:	eef0 7a40 	vmov.f32	s15, s0
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800aa4c:	e068      	b.n	800ab20 <foc+0x340>
                if (motor->torqueType == VOLTAGE)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d116      	bne.n	800aa86 <foc+0x2a6>
                    angleErr = motor->target - motor->magEncoder.fullAngle;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	edd3 7a05 	vldr	s15, [r3, #20]
 800aa64:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa68:	edc7 7a07 	vstr	s15, [r7, #28]
                    motor->Uq = pidOperator(&motor->anglePID, angleErr);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	33d0      	adds	r3, #208	@ 0xd0
 800aa70:	ed97 0a07 	vldr	s0, [r7, #28]
 800aa74:	4618      	mov	r0, r3
 800aa76:	f000 fc9b 	bl	800b3b0 <pidOperator>
 800aa7a:	eef0 7a40 	vmov.f32	s15, s0
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800aa84:	e04b      	b.n	800ab1e <foc+0x33e>
                    angleErr = motor->target - motor->magEncoder.fullAngle;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	edd3 7a05 	vldr	s15, [r3, #20]
 800aa92:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa96:	edc7 7a07 	vstr	s15, [r7, #28]
                    velocityRef = pidOperator(&motor->anglePID, angleErr);
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	33d0      	adds	r3, #208	@ 0xd0
 800aa9e:	ed97 0a07 	vldr	s0, [r7, #28]
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f000 fc84 	bl	800b3b0 <pidOperator>
 800aaa8:	ed87 0a06 	vstr	s0, [r7, #24]
                    IqRef = pidOperator(&motor->velocityPID, velocityRef - motor->magEncoder.velocity);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f103 02ac 	add.w	r2, r3, #172	@ 0xac
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	edd3 7a06 	vldr	s15, [r3, #24]
 800aab8:	ed97 7a06 	vldr	s14, [r7, #24]
 800aabc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aac0:	eeb0 0a67 	vmov.f32	s0, s15
 800aac4:	4610      	mov	r0, r2
 800aac6:	f000 fc73 	bl	800b3b0 <pidOperator>
 800aaca:	ed87 0a05 	vstr	s0, [r7, #20]
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800aada:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800ab58 <foc+0x378>
 800aade:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aae2:	eeb0 0a67 	vmov.f32	s0, s15
 800aae6:	4610      	mov	r0, r2
 800aae8:	f000 fc62 	bl	800b3b0 <pidOperator>
 800aaec:	eef0 7a40 	vmov.f32	s15, s0
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                    motor->Uq = pidOperator(&motor->pidIq, IqRef - motor->Iq);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800ab02:	ed97 7a05 	vldr	s14, [r7, #20]
 800ab06:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab0a:	eeb0 0a67 	vmov.f32	s0, s15
 800ab0e:	4610      	mov	r0, r2
 800ab10:	f000 fc4e 	bl	800b3b0 <pidOperator>
 800ab14:	eef0 7a40 	vmov.f32	s15, s0
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800ab1e:	bf00      	nop
            setTorque(motor, motor->Uq, motor->Ud, motor->angle_el);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	edd3 7a47 	vldr	s15, [r3, #284]	@ 0x11c
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	ed93 7a46 	vldr	s14, [r3, #280]	@ 0x118
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800ab32:	eeb0 1a66 	vmov.f32	s2, s13
 800ab36:	eef0 0a47 	vmov.f32	s1, s14
 800ab3a:	eeb0 0a67 	vmov.f32	s0, s15
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f000 fd3e 	bl	800b5c0 <setTorque>
}
 800ab44:	bf00      	nop
 800ab46:	3720      	adds	r7, #32
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	42480000 	.word	0x42480000
 800ab50:	20000648 	.word	0x20000648
 800ab54:	3fc511a3 	.word	0x3fc511a3
	...

0800ab60 <getCurrentOffsets>:
#include "math_utils.h"
#include "focLib.h"

// Function finding zero offsets of the ADC
void getCurrentOffsets(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b, uint32_t rounds)
{
 800ab60:	b5b0      	push	{r4, r5, r7, lr}
 800ab62:	b086      	sub	sp, #24
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	607a      	str	r2, [r7, #4]
 800ab6c:	603b      	str	r3, [r7, #0]
    // find adc offset = zero current voltage
    motor->offset_ia = 0;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f04f 0200 	mov.w	r2, #0
 800ab74:	641a      	str	r2, [r3, #64]	@ 0x40
    motor->offset_ib = 0;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f04f 0200 	mov.w	r2, #0
 800ab7c:	645a      	str	r2, [r3, #68]	@ 0x44
    // read the adc voltage  times ( arbitrary number )
    for (int i = 0; i < rounds; i++)
 800ab7e:	2300      	movs	r3, #0
 800ab80:	617b      	str	r3, [r7, #20]
 800ab82:	e076      	b.n	800ac72 <getCurrentOffsets+0x112>
    {
        motor->offset_ia += ADC_2_CURRENT(adc_a);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7f5 fd05 	bl	8000598 <__aeabi_f2d>
 800ab8e:	4604      	mov	r4, r0
 800ab90:	460d      	mov	r5, r1
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	ee07 3a90 	vmov	s15, r3
 800ab98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab9c:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 800acf0 <getCurrentOffsets+0x190>
 800aba0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aba4:	ee17 0a90 	vmov	r0, s15
 800aba8:	f7f5 fcf6 	bl	8000598 <__aeabi_f2d>
 800abac:	a34c      	add	r3, pc, #304	@ (adr r3, 800ace0 <getCurrentOffsets+0x180>)
 800abae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb2:	f7f5 fe73 	bl	800089c <__aeabi_ddiv>
 800abb6:	4602      	mov	r2, r0
 800abb8:	460b      	mov	r3, r1
 800abba:	4610      	mov	r0, r2
 800abbc:	4619      	mov	r1, r3
 800abbe:	a34a      	add	r3, pc, #296	@ (adr r3, 800ace8 <getCurrentOffsets+0x188>)
 800abc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc4:	f7f5 fe6a 	bl	800089c <__aeabi_ddiv>
 800abc8:	4602      	mov	r2, r0
 800abca:	460b      	mov	r3, r1
 800abcc:	4610      	mov	r0, r2
 800abce:	4619      	mov	r1, r3
 800abd0:	f04f 0200 	mov.w	r2, #0
 800abd4:	4b47      	ldr	r3, [pc, #284]	@ (800acf4 <getCurrentOffsets+0x194>)
 800abd6:	f7f5 fe61 	bl	800089c <__aeabi_ddiv>
 800abda:	4602      	mov	r2, r0
 800abdc:	460b      	mov	r3, r1
 800abde:	4620      	mov	r0, r4
 800abe0:	4629      	mov	r1, r5
 800abe2:	f7f5 fb7b 	bl	80002dc <__adddf3>
 800abe6:	4602      	mov	r2, r0
 800abe8:	460b      	mov	r3, r1
 800abea:	4610      	mov	r0, r2
 800abec:	4619      	mov	r1, r3
 800abee:	f7f6 f823 	bl	8000c38 <__aeabi_d2f>
 800abf2:	4602      	mov	r2, r0
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	641a      	str	r2, [r3, #64]	@ 0x40
        motor->offset_ib += ADC_2_CURRENT(adc_b);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abfc:	4618      	mov	r0, r3
 800abfe:	f7f5 fccb 	bl	8000598 <__aeabi_f2d>
 800ac02:	4604      	mov	r4, r0
 800ac04:	460d      	mov	r5, r1
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	ee07 3a90 	vmov	s15, r3
 800ac0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac10:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800acf0 <getCurrentOffsets+0x190>
 800ac14:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac18:	ee17 0a90 	vmov	r0, s15
 800ac1c:	f7f5 fcbc 	bl	8000598 <__aeabi_f2d>
 800ac20:	a32f      	add	r3, pc, #188	@ (adr r3, 800ace0 <getCurrentOffsets+0x180>)
 800ac22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac26:	f7f5 fe39 	bl	800089c <__aeabi_ddiv>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	4610      	mov	r0, r2
 800ac30:	4619      	mov	r1, r3
 800ac32:	a32d      	add	r3, pc, #180	@ (adr r3, 800ace8 <getCurrentOffsets+0x188>)
 800ac34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac38:	f7f5 fe30 	bl	800089c <__aeabi_ddiv>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	460b      	mov	r3, r1
 800ac40:	4610      	mov	r0, r2
 800ac42:	4619      	mov	r1, r3
 800ac44:	f04f 0200 	mov.w	r2, #0
 800ac48:	4b2a      	ldr	r3, [pc, #168]	@ (800acf4 <getCurrentOffsets+0x194>)
 800ac4a:	f7f5 fe27 	bl	800089c <__aeabi_ddiv>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	460b      	mov	r3, r1
 800ac52:	4620      	mov	r0, r4
 800ac54:	4629      	mov	r1, r5
 800ac56:	f7f5 fb41 	bl	80002dc <__adddf3>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	4610      	mov	r0, r2
 800ac60:	4619      	mov	r1, r3
 800ac62:	f7f5 ffe9 	bl	8000c38 <__aeabi_d2f>
 800ac66:	4602      	mov	r2, r0
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	645a      	str	r2, [r3, #68]	@ 0x44
    for (int i = 0; i < rounds; i++)
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	3301      	adds	r3, #1
 800ac70:	617b      	str	r3, [r7, #20]
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	683a      	ldr	r2, [r7, #0]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d884      	bhi.n	800ab84 <getCurrentOffsets+0x24>
    }
    // calculate the mean offsets
    motor->offset_ia = motor->offset_ia / rounds;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	ee07 3a90 	vmov	s15, r3
 800ac86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ac8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    motor->offset_ib = motor->offset_ib / rounds;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	ee07 3a90 	vmov	s15, r3
 800aca0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    // printLog("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
    // printf("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
    printLog("[offset_ia]:%f\r\n", motor->offset_ia);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7f5 fc70 	bl	8000598 <__aeabi_f2d>
 800acb8:	4602      	mov	r2, r0
 800acba:	460b      	mov	r3, r1
 800acbc:	480e      	ldr	r0, [pc, #56]	@ (800acf8 <getCurrentOffsets+0x198>)
 800acbe:	f001 fa79 	bl	800c1b4 <printLog>
    printLog("[offset_ib]:%f\r\n", motor->offset_ib);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7f5 fc66 	bl	8000598 <__aeabi_f2d>
 800accc:	4602      	mov	r2, r0
 800acce:	460b      	mov	r3, r1
 800acd0:	480a      	ldr	r0, [pc, #40]	@ (800acfc <getCurrentOffsets+0x19c>)
 800acd2:	f001 fa6f 	bl	800c1b4 <printLog>
    // _dbg_printf("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
}
 800acd6:	bf00      	nop
 800acd8:	3718      	adds	r7, #24
 800acda:	46bd      	mov	sp, r7
 800acdc:	bdb0      	pop	{r4, r5, r7, pc}
 800acde:	bf00      	nop
 800ace0:	00000000 	.word	0x00000000
 800ace4:	40affe00 	.word	0x40affe00
 800ace8:	40000000 	.word	0x40000000
 800acec:	3f847ae1 	.word	0x3f847ae1
 800acf0:	40533333 	.word	0x40533333
 800acf4:	40240000 	.word	0x40240000
 800acf8:	080135dc 	.word	0x080135dc
 800acfc:	080135f0 	.word	0x080135f0

0800ad00 <getPhaseCurrents>:

// read all three phase currents (if possible 2 or 3)
void getPhaseCurrents(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800ad00:	b5b0      	push	{r4, r5, r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	607a      	str	r2, [r7, #4]
    motor->Ia = ADC_2_CURRENT(adc_a) - motor->offset_ia; // amps
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	ee07 3a90 	vmov	s15, r3
 800ad12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad16:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800ae38 <getPhaseCurrents+0x138>
 800ad1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ad1e:	ee17 0a90 	vmov	r0, s15
 800ad22:	f7f5 fc39 	bl	8000598 <__aeabi_f2d>
 800ad26:	a340      	add	r3, pc, #256	@ (adr r3, 800ae28 <getPhaseCurrents+0x128>)
 800ad28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2c:	f7f5 fdb6 	bl	800089c <__aeabi_ddiv>
 800ad30:	4602      	mov	r2, r0
 800ad32:	460b      	mov	r3, r1
 800ad34:	4610      	mov	r0, r2
 800ad36:	4619      	mov	r1, r3
 800ad38:	a33d      	add	r3, pc, #244	@ (adr r3, 800ae30 <getPhaseCurrents+0x130>)
 800ad3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3e:	f7f5 fdad 	bl	800089c <__aeabi_ddiv>
 800ad42:	4602      	mov	r2, r0
 800ad44:	460b      	mov	r3, r1
 800ad46:	4610      	mov	r0, r2
 800ad48:	4619      	mov	r1, r3
 800ad4a:	f04f 0200 	mov.w	r2, #0
 800ad4e:	4b3b      	ldr	r3, [pc, #236]	@ (800ae3c <getPhaseCurrents+0x13c>)
 800ad50:	f7f5 fda4 	bl	800089c <__aeabi_ddiv>
 800ad54:	4602      	mov	r2, r0
 800ad56:	460b      	mov	r3, r1
 800ad58:	4614      	mov	r4, r2
 800ad5a:	461d      	mov	r5, r3
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7f5 fc19 	bl	8000598 <__aeabi_f2d>
 800ad66:	4602      	mov	r2, r0
 800ad68:	460b      	mov	r3, r1
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	4629      	mov	r1, r5
 800ad6e:	f7f5 fab3 	bl	80002d8 <__aeabi_dsub>
 800ad72:	4602      	mov	r2, r0
 800ad74:	460b      	mov	r3, r1
 800ad76:	4610      	mov	r0, r2
 800ad78:	4619      	mov	r1, r3
 800ad7a:	f7f5 ff5d 	bl	8000c38 <__aeabi_d2f>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	649a      	str	r2, [r3, #72]	@ 0x48
    motor->Ic = ADC_2_CURRENT(adc_b) - motor->offset_ib;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	ee07 3a90 	vmov	s15, r3
 800ad8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad8e:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800ae38 <getPhaseCurrents+0x138>
 800ad92:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ad96:	ee17 0a90 	vmov	r0, s15
 800ad9a:	f7f5 fbfd 	bl	8000598 <__aeabi_f2d>
 800ad9e:	a322      	add	r3, pc, #136	@ (adr r3, 800ae28 <getPhaseCurrents+0x128>)
 800ada0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada4:	f7f5 fd7a 	bl	800089c <__aeabi_ddiv>
 800ada8:	4602      	mov	r2, r0
 800adaa:	460b      	mov	r3, r1
 800adac:	4610      	mov	r0, r2
 800adae:	4619      	mov	r1, r3
 800adb0:	a31f      	add	r3, pc, #124	@ (adr r3, 800ae30 <getPhaseCurrents+0x130>)
 800adb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb6:	f7f5 fd71 	bl	800089c <__aeabi_ddiv>
 800adba:	4602      	mov	r2, r0
 800adbc:	460b      	mov	r3, r1
 800adbe:	4610      	mov	r0, r2
 800adc0:	4619      	mov	r1, r3
 800adc2:	f04f 0200 	mov.w	r2, #0
 800adc6:	4b1d      	ldr	r3, [pc, #116]	@ (800ae3c <getPhaseCurrents+0x13c>)
 800adc8:	f7f5 fd68 	bl	800089c <__aeabi_ddiv>
 800adcc:	4602      	mov	r2, r0
 800adce:	460b      	mov	r3, r1
 800add0:	4614      	mov	r4, r2
 800add2:	461d      	mov	r5, r3
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800add8:	4618      	mov	r0, r3
 800adda:	f7f5 fbdd 	bl	8000598 <__aeabi_f2d>
 800adde:	4602      	mov	r2, r0
 800ade0:	460b      	mov	r3, r1
 800ade2:	4620      	mov	r0, r4
 800ade4:	4629      	mov	r1, r5
 800ade6:	f7f5 fa77 	bl	80002d8 <__aeabi_dsub>
 800adea:	4602      	mov	r2, r0
 800adec:	460b      	mov	r3, r1
 800adee:	4610      	mov	r0, r2
 800adf0:	4619      	mov	r1, r3
 800adf2:	f7f5 ff21 	bl	8000c38 <__aeabi_d2f>
 800adf6:	4602      	mov	r2, r0
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	651a      	str	r2, [r3, #80]	@ 0x50
    motor->Ib = 0 - motor->Ia - motor->Ic;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800ae02:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800ae40 <getPhaseCurrents+0x140>
 800ae06:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800ae10:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
}
 800ae1a:	bf00      	nop
 800ae1c:	3710      	adds	r7, #16
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bdb0      	pop	{r4, r5, r7, pc}
 800ae22:	bf00      	nop
 800ae24:	f3af 8000 	nop.w
 800ae28:	00000000 	.word	0x00000000
 800ae2c:	40affe00 	.word	0x40affe00
 800ae30:	40000000 	.word	0x40000000
 800ae34:	3f847ae1 	.word	0x3f847ae1
 800ae38:	40533333 	.word	0x40533333
 800ae3c:	40240000 	.word	0x40240000
 800ae40:	00000000 	.word	0x00000000

0800ae44 <getABCurrents>:
// Ibeta = 1/sqrt(3) * Ia + 1/sqrt(3) * 2Ib
/*============================================================================*/
//   calculating Alpha Beta currents from phase currents
//   - function calculating Clarke transform of the phase currents
void getABCurrents(BldcMotor *motor)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
    motor->Ialpha = motor->Ia;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	655a      	str	r2, [r3, #84]	@ 0x54
    motor->Ibeta = _1_SQRT3 * motor->Ia + _2_SQRT3 * motor->Ib;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800ae5a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800ae88 <getABCurrents+0x44>
 800ae5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800ae68:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800ae8c <getABCurrents+0x48>
 800ae6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ae70:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
}
 800ae7a:	bf00      	nop
 800ae7c:	370c      	adds	r7, #12
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr
 800ae86:	bf00      	nop
 800ae88:	3f13cd3a 	.word	0x3f13cd3a
 800ae8c:	3f93cd3a 	.word	0x3f93cd3a

0800ae90 <getDQCurrents>:
/*============================================================================*/
// function used with the foc algorihtm
//   calculating D and Q currents from Alpha Beta currents and electrical angle
//   - function calculating Clarke transform of the phase currents
void getDQCurrents(BldcMotor *motor)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
    float ct;
    float st;
    _sincos(motor->angle_el, &st, &ct);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800ae9e:	f107 020c 	add.w	r2, r7, #12
 800aea2:	f107 0308 	add.w	r3, r7, #8
 800aea6:	4611      	mov	r1, r2
 800aea8:	4618      	mov	r0, r3
 800aeaa:	eeb0 0a67 	vmov.f32	s0, s15
 800aeae:	f000 f9df 	bl	800b270 <_sincos>
    motor->Id = motor->Ialpha * ct + motor->Ibeta * st;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 800aeb8:	edd7 7a03 	vldr	s15, [r7, #12]
 800aebc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 800aec6:	edd7 7a02 	vldr	s15, [r7, #8]
 800aeca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aece:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
    motor->Iq = motor->Ibeta * ct - motor->Ialpha * st;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 800aede:	edd7 7a03 	vldr	s15, [r7, #12]
 800aee2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 800aeec:	edd7 7a02 	vldr	s15, [r7, #8]
 800aef0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aef4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
 800aefe:	bf00      	nop
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <encoderInit>:

#include "encoder.h"
#include "math_utils.h"
#include "focLib.h"
void encoderInit(MagEncoder *encoder, float _Ts, float (*_getRawAngle)(void), Direction _direction)
{
 800af06:	b480      	push	{r7}
 800af08:	b085      	sub	sp, #20
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	60f8      	str	r0, [r7, #12]
 800af0e:	ed87 0a02 	vstr	s0, [r7, #8]
 800af12:	6079      	str	r1, [r7, #4]
 800af14:	4613      	mov	r3, r2
 800af16:	70fb      	strb	r3, [r7, #3]
    encoder->angle_prev = 0;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f04f 0200 	mov.w	r2, #0
 800af1e:	601a      	str	r2, [r3, #0]
    encoder->vel_angle_prev = 0;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f04f 0200 	mov.w	r2, #0
 800af26:	605a      	str	r2, [r3, #4]
    encoder->full_rotations = 0;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2200      	movs	r2, #0
 800af2c:	609a      	str	r2, [r3, #8]
    encoder->vel_full_rotations = 0;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2200      	movs	r2, #0
 800af32:	60da      	str	r2, [r3, #12]
    encoder->shaftAngle = 0;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f04f 0200 	mov.w	r2, #0
 800af3a:	611a      	str	r2, [r3, #16]
    encoder->fullAngle = 0;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f04f 0200 	mov.w	r2, #0
 800af42:	615a      	str	r2, [r3, #20]
    encoder->velocity = 0;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f04f 0200 	mov.w	r2, #0
 800af4a:	619a      	str	r2, [r3, #24]
    encoder->Ts = _Ts;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	68ba      	ldr	r2, [r7, #8]
 800af50:	61da      	str	r2, [r3, #28]
    encoder->getRawAngle = _getRawAngle;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	625a      	str	r2, [r3, #36]	@ 0x24
    encoder->direction = _direction;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	78fa      	ldrb	r2, [r7, #3]
 800af5c:	f883 2020 	strb.w	r2, [r3, #32]
}
 800af60:	bf00      	nop
 800af62:	3714      	adds	r7, #20
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <encoderUpdate>:

void encoderUpdate(MagEncoder *encoder)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
    float val = encoder->getRawAngle() * encoder->direction;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af78:	4798      	blx	r3
 800af7a:	eeb0 7a40 	vmov.f32	s14, s0
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800af84:	ee07 3a90 	vmov	s15, r3
 800af88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af90:	edc7 7a03 	vstr	s15, [r7, #12]

    float d_angle = val - encoder->angle_prev;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	edd3 7a00 	vldr	s15, [r3]
 800af9a:	ed97 7a03 	vldr	s14, [r7, #12]
 800af9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800afa2:	edc7 7a02 	vstr	s15, [r7, #8]
    // 圈数检测
    if (fabsf(d_angle) > (0.8f * _2PI))
 800afa6:	edd7 7a02 	vldr	s15, [r7, #8]
 800afaa:	eef0 7ae7 	vabs.f32	s15, s15
 800afae:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800b068 <encoderUpdate+0xfc>
 800afb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800afb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afba:	dd0f      	ble.n	800afdc <encoderUpdate+0x70>
        encoder->full_rotations += (d_angle > 0) ? -1 : 1;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	689b      	ldr	r3, [r3, #8]
 800afc0:	edd7 7a02 	vldr	s15, [r7, #8]
 800afc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800afc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afcc:	dd02      	ble.n	800afd4 <encoderUpdate+0x68>
 800afce:	f04f 32ff 	mov.w	r2, #4294967295
 800afd2:	e000      	b.n	800afd6 <encoderUpdate+0x6a>
 800afd4:	2201      	movs	r2, #1
 800afd6:	441a      	add	r2, r3
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	609a      	str	r2, [r3, #8]

    // angle
    encoder->angle_prev = val;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	601a      	str	r2, [r3, #0]
    encoder->shaftAngle = val;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	68fa      	ldr	r2, [r7, #12]
 800afe6:	611a      	str	r2, [r3, #16]
    encoder->fullAngle = (float)encoder->full_rotations * _2PI + encoder->angle_prev;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	689b      	ldr	r3, [r3, #8]
 800afec:	ee07 3a90 	vmov	s15, r3
 800aff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aff4:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800b06c <encoderUpdate+0x100>
 800aff8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	edd3 7a00 	vldr	s15, [r3]
 800b002:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	edc3 7a05 	vstr	s15, [r3, #20]

    // 速度计算
    val = ((float)(encoder->full_rotations - encoder->vel_full_rotations) * _2PI + (encoder->angle_prev - encoder->vel_angle_prev)) / encoder->Ts;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	689a      	ldr	r2, [r3, #8]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	1ad3      	subs	r3, r2, r3
 800b016:	ee07 3a90 	vmov	s15, r3
 800b01a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b01e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800b06c <encoderUpdate+0x100>
 800b022:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	edd3 6a00 	vldr	s13, [r3]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	edd3 7a01 	vldr	s15, [r3, #4]
 800b032:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b036:	ee77 6a27 	vadd.f32	s13, s14, s15
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	ed93 7a07 	vldr	s14, [r3, #28]
 800b040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b044:	edc7 7a03 	vstr	s15, [r7, #12]
    // 保存变量以待将来使用
    encoder->vel_angle_prev = encoder->angle_prev;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	605a      	str	r2, [r3, #4]
    encoder->vel_full_rotations = encoder->full_rotations;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	689a      	ldr	r2, [r3, #8]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	60da      	str	r2, [r3, #12]
    encoder->velocity = val;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	68fa      	ldr	r2, [r7, #12]
 800b05c:	619a      	str	r2, [r3, #24]
}
 800b05e:	bf00      	nop
 800b060:	3710      	adds	r7, #16
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	40a0d97c 	.word	0x40a0d97c
 800b06c:	40c90fdb 	.word	0x40c90fdb

0800b070 <lpfInit>:
#include "lowpass_filter.h"

void lpfInit(LowPassFilter *filter, const float _Tf, const float _dt)
{
 800b070:	b480      	push	{r7}
 800b072:	b085      	sub	sp, #20
 800b074:	af00      	add	r7, sp, #0
 800b076:	60f8      	str	r0, [r7, #12]
 800b078:	ed87 0a02 	vstr	s0, [r7, #8]
 800b07c:	edc7 0a01 	vstr	s1, [r7, #4]
    filter->Tf = _Tf;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	68ba      	ldr	r2, [r7, #8]
 800b084:	601a      	str	r2, [r3, #0]
    filter->dt = _dt;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	605a      	str	r2, [r3, #4]
    filter->y_prev = 0;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f04f 0200 	mov.w	r2, #0
 800b092:	609a      	str	r2, [r3, #8]
}
 800b094:	bf00      	nop
 800b096:	3714      	adds	r7, #20
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <lpfOperator>:

float lpfOperator(LowPassFilter *filter, float x)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b085      	sub	sp, #20
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	ed87 0a00 	vstr	s0, [r7]

    float alpha = filter->Tf / (filter->Tf + filter->dt);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	edd3 6a00 	vldr	s13, [r3]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	ed93 7a00 	vldr	s14, [r3]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	edd3 7a01 	vldr	s15, [r3, #4]
 800b0be:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b0c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0c6:	edc7 7a03 	vstr	s15, [r7, #12]
    float y = alpha * filter->y_prev + (1.0f - alpha) * x;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	ed93 7a02 	vldr	s14, [r3, #8]
 800b0d0:	edd7 7a03 	vldr	s15, [r7, #12]
 800b0d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b0d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0dc:	edd7 7a03 	vldr	s15, [r7, #12]
 800b0e0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b0e4:	edd7 7a00 	vldr	s15, [r7]
 800b0e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b0ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0f0:	edc7 7a02 	vstr	s15, [r7, #8]
    filter->y_prev = y;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	68ba      	ldr	r2, [r7, #8]
 800b0f8:	609a      	str	r2, [r3, #8]

    return y;
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	ee07 3a90 	vmov	s15, r3
}
 800b100:	eeb0 0a67 	vmov.f32	s0, s15
 800b104:	3714      	adds	r7, #20
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr
	...

0800b110 <_sin>:
#include "focLib.h"
// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b086      	sub	sp, #24
 800b114:	af00      	add	r7, sp, #0
 800b116:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0, 804, 1608, 2411, 3212, 4011, 4808, 5602, 6393, 7180, 7962, 8740, 9512, 10279, 11039, 11793, 12540, 13279, 14010, 14733, 15447, 16151, 16846, 17531, 18205, 18868, 19520, 20160, 20788, 21403, 22006, 22595, 23170, 23732, 24279, 24812, 25330, 25833, 26320, 26791, 27246, 27684, 28106, 28511, 28899, 29269, 29622, 29957, 30274, 30572, 30853, 31114, 31357, 31581, 31786, 31972, 32138, 32286, 32413, 32522, 32610, 32679, 32729, 32758, 32768};
  unsigned int i = (unsigned int)(a * (64 * 4 * 256.0 / _2PI));
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f7f5 fa3c 	bl	8000598 <__aeabi_f2d>
 800b120:	a339      	add	r3, pc, #228	@ (adr r3, 800b208 <_sin+0xf8>)
 800b122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b126:	f7f5 fa8f 	bl	8000648 <__aeabi_dmul>
 800b12a:	4602      	mov	r2, r0
 800b12c:	460b      	mov	r3, r1
 800b12e:	4610      	mov	r0, r2
 800b130:	4619      	mov	r1, r3
 800b132:	f7f5 fd61 	bl	8000bf8 <__aeabi_d2uiz>
 800b136:	4603      	mov	r3, r0
 800b138:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	0a1b      	lsrs	r3, r3, #8
 800b144:	b2db      	uxtb	r3, r3
 800b146:	60fb      	str	r3, [r7, #12]
  if (i < 64)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2b3f      	cmp	r3, #63	@ 0x3f
 800b14c:	d80b      	bhi.n	800b166 <_sin+0x56>
  {
    t1 = sine_array[i];
 800b14e:	4a2c      	ldr	r2, [pc, #176]	@ (800b200 <_sin+0xf0>)
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b156:	617b      	str	r3, [r7, #20]
    t2 = sine_array[i + 1];
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	3301      	adds	r3, #1
 800b15c:	4a28      	ldr	r2, [pc, #160]	@ (800b200 <_sin+0xf0>)
 800b15e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b162:	613b      	str	r3, [r7, #16]
 800b164:	e033      	b.n	800b1ce <_sin+0xbe>
  }
  else if (i < 128)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2b7f      	cmp	r3, #127	@ 0x7f
 800b16a:	d80e      	bhi.n	800b18a <_sin+0x7a>
  {
    t1 = sine_array[128 - i];
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800b172:	4a23      	ldr	r2, [pc, #140]	@ (800b200 <_sin+0xf0>)
 800b174:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b178:	617b      	str	r3, [r7, #20]
    t2 = sine_array[127 - i];
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800b180:	4a1f      	ldr	r2, [pc, #124]	@ (800b200 <_sin+0xf0>)
 800b182:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b186:	613b      	str	r3, [r7, #16]
 800b188:	e021      	b.n	800b1ce <_sin+0xbe>
  }
  else if (i < 192)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2bbf      	cmp	r3, #191	@ 0xbf
 800b18e:	d80e      	bhi.n	800b1ae <_sin+0x9e>
  {
    t1 = -sine_array[-128 + i];
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	3b80      	subs	r3, #128	@ 0x80
 800b194:	4a1a      	ldr	r2, [pc, #104]	@ (800b200 <_sin+0xf0>)
 800b196:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b19a:	425b      	negs	r3, r3
 800b19c:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[-127 + i];
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	3b7f      	subs	r3, #127	@ 0x7f
 800b1a2:	4a17      	ldr	r2, [pc, #92]	@ (800b200 <_sin+0xf0>)
 800b1a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1a8:	425b      	negs	r3, r3
 800b1aa:	613b      	str	r3, [r7, #16]
 800b1ac:	e00f      	b.n	800b1ce <_sin+0xbe>
  }
  else
  {
    t1 = -sine_array[256 - i];
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800b1b4:	4a12      	ldr	r2, [pc, #72]	@ (800b200 <_sin+0xf0>)
 800b1b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1ba:	425b      	negs	r3, r3
 800b1bc:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[255 - i];
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800b1c4:	4a0e      	ldr	r2, [pc, #56]	@ (800b200 <_sin+0xf0>)
 800b1c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1ca:	425b      	negs	r3, r3
 800b1cc:	613b      	str	r3, [r7, #16]
  }
  return (1.0f / 32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 800b1ce:	693a      	ldr	r2, [r7, #16]
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	1ad3      	subs	r3, r2, r3
 800b1d4:	68ba      	ldr	r2, [r7, #8]
 800b1d6:	fb02 f303 	mul.w	r3, r2, r3
 800b1da:	121a      	asrs	r2, r3, #8
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	4413      	add	r3, r2
 800b1e0:	ee07 3a90 	vmov	s15, r3
 800b1e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1e8:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800b204 <_sin+0xf4>
 800b1ec:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b1f0:	eeb0 0a67 	vmov.f32	s0, s15
 800b1f4:	3718      	adds	r7, #24
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	f3af 8000 	nop.w
 800b200:	2000000c 	.word	0x2000000c
 800b204:	38000000 	.word	0x38000000
 800b208:	6446f9b4 	.word	0x6446f9b4
 800b20c:	40c45f30 	.word	0x40c45f30

0800b210 <_cos>:
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 800b21a:	edd7 7a01 	vldr	s15, [r7, #4]
 800b21e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800b268 <_cos+0x58>
 800b222:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b226:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 800b22a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b22e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800b26c <_cos+0x5c>
 800b232:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b23a:	dd06      	ble.n	800b24a <_cos+0x3a>
 800b23c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b240:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800b26c <_cos+0x5c>
 800b244:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b248:	e001      	b.n	800b24e <_cos+0x3e>
 800b24a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b24e:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 800b252:	ed97 0a03 	vldr	s0, [r7, #12]
 800b256:	f7ff ff5b 	bl	800b110 <_sin>
 800b25a:	eef0 7a40 	vmov.f32	s15, s0
}
 800b25e:	eeb0 0a67 	vmov.f32	s0, s15
 800b262:	3710      	adds	r7, #16
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}
 800b268:	3fc90fdb 	.word	0x3fc90fdb
 800b26c:	40c90fdb 	.word	0x40c90fdb

0800b270 <_sincos>:

__attribute__((weak)) void _sincos(float a, float *s, float *c)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	ed87 0a03 	vstr	s0, [r7, #12]
 800b27a:	60b8      	str	r0, [r7, #8]
 800b27c:	6079      	str	r1, [r7, #4]
  *s = _sin(a);
 800b27e:	ed97 0a03 	vldr	s0, [r7, #12]
 800b282:	f7ff ff45 	bl	800b110 <_sin>
 800b286:	eef0 7a40 	vmov.f32	s15, s0
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	edc3 7a00 	vstr	s15, [r3]
  *c = _cos(a);
 800b290:	ed97 0a03 	vldr	s0, [r7, #12]
 800b294:	f7ff ffbc 	bl	800b210 <_cos>
 800b298:	eef0 7a40 	vmov.f32	s15, s0
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	edc3 7a00 	vstr	s15, [r3]
}
 800b2a2:	bf00      	nop
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	0000      	movs	r0, r0
 800b2ac:	0000      	movs	r0, r0
	...

0800b2b0 <_normalizeAngle>:
  return r;
}

// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f7f5 f96c 	bl	8000598 <__aeabi_f2d>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 800b310 <_normalizeAngle+0x60>
 800b2c8:	ec43 2b10 	vmov	d0, r2, r3
 800b2cc:	f007 fa68 	bl	80127a0 <fmod>
 800b2d0:	ec53 2b10 	vmov	r2, r3, d0
 800b2d4:	4610      	mov	r0, r2
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	f7f5 fcae 	bl	8000c38 <__aeabi_d2f>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 800b2e0:	edd7 7a03 	vldr	s15, [r7, #12]
 800b2e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b2e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ec:	db02      	blt.n	800b2f4 <_normalizeAngle+0x44>
 800b2ee:	edd7 7a03 	vldr	s15, [r7, #12]
 800b2f2:	e005      	b.n	800b300 <_normalizeAngle+0x50>
 800b2f4:	edd7 7a03 	vldr	s15, [r7, #12]
 800b2f8:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800b318 <_normalizeAngle+0x68>
 800b2fc:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800b300:	eeb0 0a67 	vmov.f32	s0, s15
 800b304:	3710      	adds	r7, #16
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	f3af 8000 	nop.w
 800b310:	60000000 	.word	0x60000000
 800b314:	401921fb 	.word	0x401921fb
 800b318:	40c90fdb 	.word	0x40c90fdb

0800b31c <_electricalAngle>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	ed87 0a01 	vstr	s0, [r7, #4]
 800b326:	6038      	str	r0, [r7, #0]
  return (shaft_angle * pole_pairs);
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	ee07 3a90 	vmov	s15, r3
 800b32e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b332:	edd7 7a01 	vldr	s15, [r7, #4]
 800b336:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800b33a:	eeb0 0a67 	vmov.f32	s0, s15
 800b33e:	370c      	adds	r7, #12
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr

0800b348 <pidInit>:
#include "pid.h"
#include "math_utils.h"

void pidInit(PidController *pidController, float _P, float _I, float _D, float _ramp, float _limit, float _Ts)
{
 800b348:	b480      	push	{r7}
 800b34a:	b089      	sub	sp, #36	@ 0x24
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	61f8      	str	r0, [r7, #28]
 800b350:	ed87 0a06 	vstr	s0, [r7, #24]
 800b354:	edc7 0a05 	vstr	s1, [r7, #20]
 800b358:	ed87 1a04 	vstr	s2, [r7, #16]
 800b35c:	edc7 1a03 	vstr	s3, [r7, #12]
 800b360:	ed87 2a02 	vstr	s4, [r7, #8]
 800b364:	edc7 2a01 	vstr	s5, [r7, #4]
    pidController->P = _P;
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	69ba      	ldr	r2, [r7, #24]
 800b36c:	601a      	str	r2, [r3, #0]
    pidController->I = _I;
 800b36e:	69fb      	ldr	r3, [r7, #28]
 800b370:	697a      	ldr	r2, [r7, #20]
 800b372:	605a      	str	r2, [r3, #4]
    pidController->D = _D;
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	693a      	ldr	r2, [r7, #16]
 800b378:	609a      	str	r2, [r3, #8]
    pidController->output_ramp = _ramp;
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	68fa      	ldr	r2, [r7, #12]
 800b37e:	60da      	str	r2, [r3, #12]
    pidController->limit = _limit;
 800b380:	69fb      	ldr	r3, [r7, #28]
 800b382:	68ba      	ldr	r2, [r7, #8]
 800b384:	611a      	str	r2, [r3, #16]
    pidController->Ts = _Ts;
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	621a      	str	r2, [r3, #32]
    pidController->error_prev = 0;
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	f04f 0200 	mov.w	r2, #0
 800b392:	615a      	str	r2, [r3, #20]
    pidController->output_prev = 0;
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	f04f 0200 	mov.w	r2, #0
 800b39a:	619a      	str	r2, [r3, #24]
    pidController->integral_prev = 0;
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	f04f 0200 	mov.w	r2, #0
 800b3a2:	61da      	str	r2, [r3, #28]
}
 800b3a4:	bf00      	nop
 800b3a6:	3724      	adds	r7, #36	@ 0x24
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr

0800b3b0 <pidOperator>:

// PID controller function
float pidOperator(PidController *pidController, float error)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b08b      	sub	sp, #44	@ 0x2c
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	ed87 0a00 	vstr	s0, [r7]
    // u(s) = (P + I/s + Ds)e(s)
    // Discrete implementations
    // proportional part
    // u_p  = P *e(k)
    float proportional = pidController->P * error;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	edd3 7a00 	vldr	s15, [r3]
 800b3c2:	ed97 7a00 	vldr	s14, [r7]
 800b3c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ca:	edc7 7a08 	vstr	s15, [r7, #32]
    // Tustin transform of the integral part
    // u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
    float a = 0.5f * (error + pidController->error_prev);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	ed93 7a05 	vldr	s14, [r3, #20]
 800b3d4:	edd7 7a00 	vldr	s15, [r7]
 800b3d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3dc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b3e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b3e4:	edc7 7a07 	vstr	s15, [r7, #28]
    float b = pidController->I * pidController->Ts;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	ed93 7a01 	vldr	s14, [r3, #4]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	edd3 7a08 	vldr	s15, [r3, #32]
 800b3f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3f8:	edc7 7a06 	vstr	s15, [r7, #24]
    float integral = pidController->integral_prev + pidController->I * pidController->Ts * 0.5f * (error + pidController->error_prev);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	ed93 7a07 	vldr	s14, [r3, #28]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	edd3 6a01 	vldr	s13, [r3, #4]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	edd3 7a08 	vldr	s15, [r3, #32]
 800b40e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b412:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800b416:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	ed93 6a05 	vldr	s12, [r3, #20]
 800b420:	edd7 7a00 	vldr	s15, [r7]
 800b424:	ee76 7a27 	vadd.f32	s15, s12, s15
 800b428:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b42c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b430:	edc7 7a05 	vstr	s15, [r7, #20]
    // antiwindup - limit the output
    integral = _constrain(integral, -pidController->limit, pidController->limit);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	edd3 7a04 	vldr	s15, [r3, #16]
 800b43a:	eef1 7a67 	vneg.f32	s15, s15
 800b43e:	ed97 7a05 	vldr	s14, [r7, #20]
 800b442:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b44a:	d505      	bpl.n	800b458 <pidOperator+0xa8>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	edd3 7a04 	vldr	s15, [r3, #16]
 800b452:	eef1 7a67 	vneg.f32	s15, s15
 800b456:	e00f      	b.n	800b478 <pidOperator+0xc8>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	edd3 7a04 	vldr	s15, [r3, #16]
 800b45e:	ed97 7a05 	vldr	s14, [r7, #20]
 800b462:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b46a:	dd03      	ble.n	800b474 <pidOperator+0xc4>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	edd3 7a04 	vldr	s15, [r3, #16]
 800b472:	e001      	b.n	800b478 <pidOperator+0xc8>
 800b474:	edd7 7a05 	vldr	s15, [r7, #20]
 800b478:	edc7 7a05 	vstr	s15, [r7, #20]
    // Discrete derivation
    // u_dk = D(ek - ek_1)/Ts
    float derivative = pidController->D * (error - pidController->error_prev) / pidController->Ts;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	ed93 7a02 	vldr	s14, [r3, #8]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	edd3 7a05 	vldr	s15, [r3, #20]
 800b488:	edd7 6a00 	vldr	s13, [r7]
 800b48c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b490:	ee67 6a27 	vmul.f32	s13, s14, s15
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	ed93 7a08 	vldr	s14, [r3, #32]
 800b49a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b49e:	edc7 7a04 	vstr	s15, [r7, #16]

    // sum all the components
    float output = proportional + integral + derivative;
 800b4a2:	ed97 7a08 	vldr	s14, [r7, #32]
 800b4a6:	edd7 7a05 	vldr	s15, [r7, #20]
 800b4aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4ae:	ed97 7a04 	vldr	s14, [r7, #16]
 800b4b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4b6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    // antiwindup - limit the output variable
    output = _constrain(output, -pidController->limit, pidController->limit);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	edd3 7a04 	vldr	s15, [r3, #16]
 800b4c0:	eef1 7a67 	vneg.f32	s15, s15
 800b4c4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b4c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4d0:	d505      	bpl.n	800b4de <pidOperator+0x12e>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	edd3 7a04 	vldr	s15, [r3, #16]
 800b4d8:	eef1 7a67 	vneg.f32	s15, s15
 800b4dc:	e00f      	b.n	800b4fe <pidOperator+0x14e>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	edd3 7a04 	vldr	s15, [r3, #16]
 800b4e4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b4e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b4ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4f0:	dd03      	ble.n	800b4fa <pidOperator+0x14a>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	edd3 7a04 	vldr	s15, [r3, #16]
 800b4f8:	e001      	b.n	800b4fe <pidOperator+0x14e>
 800b4fa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b4fe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // if output ramp defined
    if (pidController->output_ramp > 0)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	edd3 7a03 	vldr	s15, [r3, #12]
 800b508:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b50c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b510:	dd42      	ble.n	800b598 <pidOperator+0x1e8>
    {
        // limit the acceleration by ramping the output
        float output_rate = (output - pidController->output_prev) / pidController->Ts;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	edd3 7a06 	vldr	s15, [r3, #24]
 800b518:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b51c:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	ed93 7a08 	vldr	s14, [r3, #32]
 800b526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b52a:	edc7 7a03 	vstr	s15, [r7, #12]
        if (output_rate > pidController->output_ramp)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	edd3 7a03 	vldr	s15, [r3, #12]
 800b534:	ed97 7a03 	vldr	s14, [r7, #12]
 800b538:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b53c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b540:	dd0f      	ble.n	800b562 <pidOperator+0x1b2>
            output = pidController->output_prev + pidController->output_ramp * pidController->Ts;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	ed93 7a06 	vldr	s14, [r3, #24]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	edd3 6a03 	vldr	s13, [r3, #12]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	edd3 7a08 	vldr	s15, [r3, #32]
 800b554:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b55c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 800b560:	e01a      	b.n	800b598 <pidOperator+0x1e8>
        else if (output_rate < -pidController->output_ramp)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	edd3 7a03 	vldr	s15, [r3, #12]
 800b568:	eef1 7a67 	vneg.f32	s15, s15
 800b56c:	ed97 7a03 	vldr	s14, [r7, #12]
 800b570:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b578:	d50e      	bpl.n	800b598 <pidOperator+0x1e8>
            output = pidController->output_prev - pidController->output_ramp * pidController->Ts;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	ed93 7a06 	vldr	s14, [r3, #24]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	edd3 6a03 	vldr	s13, [r3, #12]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	edd3 7a08 	vldr	s15, [r3, #32]
 800b58c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b590:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b594:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }
    // saving for the next pass
    pidController->integral_prev = integral;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	697a      	ldr	r2, [r7, #20]
 800b59c:	61da      	str	r2, [r3, #28]
    pidController->output_prev = output;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5a2:	619a      	str	r2, [r3, #24]
    pidController->error_prev = error;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	683a      	ldr	r2, [r7, #0]
 800b5a8:	615a      	str	r2, [r3, #20]
    return output;
 800b5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ac:	ee07 3a90 	vmov	s15, r3
}
 800b5b0:	eeb0 0a67 	vmov.f32	s0, s15
 800b5b4:	372c      	adds	r7, #44	@ 0x2c
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr
	...

0800b5c0 <setTorque>:
    motor->updatePwm(HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Tc);
}
#elif 1

void setTorque(BldcMotor *motor, float Uq, float Ud, float angle_el)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b08e      	sub	sp, #56	@ 0x38
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	ed87 0a02 	vstr	s0, [r7, #8]
 800b5cc:	edc7 0a01 	vstr	s1, [r7, #4]
 800b5d0:	ed87 1a00 	vstr	s2, [r7]
    float Ualpha, Ubeta;
    float Ua, Ub, Uc;

    // Sinusoidal PWM modulation
    // Inverse Park + Clarke transformation
    _sincos(angle_el, &_sa, &_ca);
 800b5d4:	f107 0214 	add.w	r2, r7, #20
 800b5d8:	f107 0310 	add.w	r3, r7, #16
 800b5dc:	4611      	mov	r1, r2
 800b5de:	4618      	mov	r0, r3
 800b5e0:	ed97 0a00 	vldr	s0, [r7]
 800b5e4:	f7ff fe44 	bl	800b270 <_sincos>

    // Inverse park transform
    Ualpha = _ca * Ud - _sa * Uq; // -sin(angle) * Uq;
 800b5e8:	ed97 7a05 	vldr	s14, [r7, #20]
 800b5ec:	edd7 7a01 	vldr	s15, [r7, #4]
 800b5f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b5f4:	edd7 6a04 	vldr	s13, [r7, #16]
 800b5f8:	edd7 7a02 	vldr	s15, [r7, #8]
 800b5fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b600:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b604:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    Ubeta = _sa * Ud + _ca * Uq;  //  cos(angle) * Uq;
 800b608:	ed97 7a04 	vldr	s14, [r7, #16]
 800b60c:	edd7 7a01 	vldr	s15, [r7, #4]
 800b610:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b614:	edd7 6a05 	vldr	s13, [r7, #20]
 800b618:	edd7 7a02 	vldr	s15, [r7, #8]
 800b61c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b620:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b624:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Clarke transform
    Ua = Ualpha;
 800b628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b62a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Ub = -0.5f * Ualpha + _SQRT3_2 * Ubeta;
 800b62c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800b630:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800b634:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b638:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800b63c:	eddf 6a95 	vldr	s13, [pc, #596]	@ 800b894 <setTorque+0x2d4>
 800b640:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b644:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b648:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc = -0.5f * Ualpha - _SQRT3_2 * Ubeta;
 800b64c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800b650:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800b654:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b658:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800b65c:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 800b894 <setTorque+0x2d4>
 800b660:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b664:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b668:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    center = U_DC / 2;
 800b66c:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 800b670:	623b      	str	r3, [r7, #32]

    // discussed here: https://community.simplefoc.com/t/embedded-world-2023-stm32-cordic-co-processor/3107/165?u=candas1
    // a bit more info here: https://microchipdeveloper.com/mct5001:which-zsm-is-best
    // Midpoint Clamp
    float Umin = min(Ua, min(Ub, Uc));
 800b672:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b676:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b67a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b67e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b682:	d502      	bpl.n	800b68a <setTorque+0xca>
 800b684:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800b688:	e001      	b.n	800b68e <setTorque+0xce>
 800b68a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b68e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b692:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b69a:	dd01      	ble.n	800b6a0 <setTorque+0xe0>
 800b69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b69e:	e00b      	b.n	800b6b8 <setTorque+0xf8>
 800b6a0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b6a4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b6a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b6ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6b0:	d501      	bpl.n	800b6b6 <setTorque+0xf6>
 800b6b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b4:	e000      	b.n	800b6b8 <setTorque+0xf8>
 800b6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b8:	61fb      	str	r3, [r7, #28]
    float Umax = max(Ua, max(Ub, Uc));
 800b6ba:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b6be:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b6c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ca:	dd02      	ble.n	800b6d2 <setTorque+0x112>
 800b6cc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800b6d0:	e001      	b.n	800b6d6 <setTorque+0x116>
 800b6d2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b6d6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b6da:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b6de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6e2:	d501      	bpl.n	800b6e8 <setTorque+0x128>
 800b6e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6e6:	e00b      	b.n	800b700 <setTorque+0x140>
 800b6e8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b6ec:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b6f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6f8:	dd01      	ble.n	800b6fe <setTorque+0x13e>
 800b6fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6fc:	e000      	b.n	800b700 <setTorque+0x140>
 800b6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b700:	61bb      	str	r3, [r7, #24]
    center -= (Umax + Umin) / 2;
 800b702:	ed97 7a06 	vldr	s14, [r7, #24]
 800b706:	edd7 7a07 	vldr	s15, [r7, #28]
 800b70a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b70e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800b712:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b716:	ed97 7a08 	vldr	s14, [r7, #32]
 800b71a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b71e:	edc7 7a08 	vstr	s15, [r7, #32]

    Ua += center;
 800b722:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b726:	edd7 7a08 	vldr	s15, [r7, #32]
 800b72a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b72e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    Ub += center;
 800b732:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b736:	edd7 7a08 	vldr	s15, [r7, #32]
 800b73a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b73e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc += center;
 800b742:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b746:	edd7 7a08 	vldr	s15, [r7, #32]
 800b74a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b74e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    motor->Ta = _constrain(Ua / U_DC, 0.0f, 1.0f);
 800b752:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b756:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b75a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b75e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b766:	d502      	bpl.n	800b76e <setTorque+0x1ae>
 800b768:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 800b898 <setTorque+0x2d8>
 800b76c:	e015      	b.n	800b79a <setTorque+0x1da>
 800b76e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b772:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b776:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b77a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b77e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b786:	dd02      	ble.n	800b78e <setTorque+0x1ce>
 800b788:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b78c:	e005      	b.n	800b79a <setTorque+0x1da>
 800b78e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b792:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b796:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128
    motor->Tb = _constrain(Ub / U_DC, 0.0f, 1.0f);
 800b7a0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b7a4:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b7a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b7ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7b4:	d502      	bpl.n	800b7bc <setTorque+0x1fc>
 800b7b6:	eddf 7a38 	vldr	s15, [pc, #224]	@ 800b898 <setTorque+0x2d8>
 800b7ba:	e015      	b.n	800b7e8 <setTorque+0x228>
 800b7bc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b7c0:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b7c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b7c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b7cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7d4:	dd02      	ble.n	800b7dc <setTorque+0x21c>
 800b7d6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b7da:	e005      	b.n	800b7e8 <setTorque+0x228>
 800b7dc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b7e0:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b7e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	edc3 7a4b 	vstr	s15, [r3, #300]	@ 0x12c
    motor->Tc = _constrain(Uc / U_DC, 0.0f, 1.0f);
 800b7ee:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b7f2:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b7f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b7fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b802:	d502      	bpl.n	800b80a <setTorque+0x24a>
 800b804:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800b898 <setTorque+0x2d8>
 800b808:	e015      	b.n	800b836 <setTorque+0x276>
 800b80a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b80e:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b812:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b816:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b81a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b822:	dd02      	ble.n	800b82a <setTorque+0x26a>
 800b824:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b828:	e005      	b.n	800b836 <setTorque+0x276>
 800b82a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b82e:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b832:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	edc3 7a4c 	vstr	s15, [r3, #304]	@ 0x130

    motor->updatePwm(HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tc);
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	edd2 7a4b 	vldr	s15, [r2, #300]	@ 0x12c
 800b848:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800b89c <setTorque+0x2dc>
 800b84c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b854:	ee17 2a90 	vmov	r2, s15
 800b858:	b290      	uxth	r0, r2
 800b85a:	68fa      	ldr	r2, [r7, #12]
 800b85c:	edd2 7a4a 	vldr	s15, [r2, #296]	@ 0x128
 800b860:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800b89c <setTorque+0x2dc>
 800b864:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b86c:	ee17 2a90 	vmov	r2, s15
 800b870:	b291      	uxth	r1, r2
 800b872:	68fa      	ldr	r2, [r7, #12]
 800b874:	edd2 7a4c 	vldr	s15, [r2, #304]	@ 0x130
 800b878:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800b89c <setTorque+0x2dc>
 800b87c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b884:	ee17 2a90 	vmov	r2, s15
 800b888:	b292      	uxth	r2, r2
 800b88a:	4798      	blx	r3
    // set the voltages in driver
    // driver->setPwm(Ua, Ub, Uc);
}
 800b88c:	bf00      	nop
 800b88e:	3738      	adds	r7, #56	@ 0x38
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}
 800b894:	3f5db3d7 	.word	0x3f5db3d7
 800b898:	00000000 	.word	0x00000000
 800b89c:	45fa0000 	.word	0x45fa0000

0800b8a0 <motorInit>:
static void working(void);

// should be called before interruption enabled

static void motorInit()
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b08c      	sub	sp, #48	@ 0x30
 800b8a4:	af00      	add	r7, sp, #0
#if 1
    motor1.pole_pairs = 7;
 800b8a6:	4bc6      	ldr	r3, [pc, #792]	@ (800bbc0 <motorInit+0x320>)
 800b8a8:	2207      	movs	r2, #7
 800b8aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    motor1.updatePwm = updatePwm1;
 800b8ae:	4bc4      	ldr	r3, [pc, #784]	@ (800bbc0 <motorInit+0x320>)
 800b8b0:	4ac4      	ldr	r2, [pc, #784]	@ (800bbc4 <motorInit+0x324>)
 800b8b2:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    motor1.startPwm = startPwm1;
 800b8b6:	4bc2      	ldr	r3, [pc, #776]	@ (800bbc0 <motorInit+0x320>)
 800b8b8:	4ac3      	ldr	r2, [pc, #780]	@ (800bbc8 <motorInit+0x328>)
 800b8ba:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor1.stopPwm = stopPwm1;
 800b8be:	4bc0      	ldr	r3, [pc, #768]	@ (800bbc0 <motorInit+0x320>)
 800b8c0:	4ac2      	ldr	r2, [pc, #776]	@ (800bbcc <motorInit+0x32c>)
 800b8c2:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    motor1.zeroElectricAngleOffSet = 0;
 800b8c6:	4bbe      	ldr	r3, [pc, #760]	@ (800bbc0 <motorInit+0x320>)
 800b8c8:	f04f 0200 	mov.w	r2, #0
 800b8cc:	635a      	str	r2, [r3, #52]	@ 0x34
    motor1.Ts = 100 * 1e-6f;
 800b8ce:	4bbc      	ldr	r3, [pc, #752]	@ (800bbc0 <motorInit+0x320>)
 800b8d0:	4abf      	ldr	r2, [pc, #764]	@ (800bbd0 <motorInit+0x330>)
 800b8d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    motor1.torqueType = VOLTAGE;
 800b8d4:	4bba      	ldr	r3, [pc, #744]	@ (800bbc0 <motorInit+0x320>)
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

    motor1.controlType = VELOCITY;
 800b8dc:	4bb8      	ldr	r3, [pc, #736]	@ (800bbc0 <motorInit+0x320>)
 800b8de:	2202      	movs	r2, #2
 800b8e0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

    motor1.state = MOTOR_CALIBRATE;
 800b8e4:	4bb6      	ldr	r3, [pc, #728]	@ (800bbc0 <motorInit+0x320>)
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    encoderInit(&motor1.magEncoder, motor1.Ts, _1_MT6701_GetRawAngle, UNKNOWN);
 800b8ec:	4bb4      	ldr	r3, [pc, #720]	@ (800bbc0 <motorInit+0x320>)
 800b8ee:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	49b7      	ldr	r1, [pc, #732]	@ (800bbd4 <motorInit+0x334>)
 800b8f6:	eeb0 0a67 	vmov.f32	s0, s15
 800b8fa:	48b1      	ldr	r0, [pc, #708]	@ (800bbc0 <motorInit+0x320>)
 800b8fc:	f7ff fb03 	bl	800af06 <encoderInit>

    if (motor1.controlType == TORQUE && motor1.torqueType == CURRENT)
 800b900:	4baf      	ldr	r3, [pc, #700]	@ (800bbc0 <motorInit+0x320>)
 800b902:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800b906:	2b00      	cmp	r3, #0
 800b908:	d11b      	bne.n	800b942 <motorInit+0xa2>
 800b90a:	4bad      	ldr	r3, [pc, #692]	@ (800bbc0 <motorInit+0x320>)
 800b90c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800b910:	2b01      	cmp	r3, #1
 800b912:	d116      	bne.n	800b942 <motorInit+0xa2>
    {
        float kp, ki;
        kp = 500.0f;
 800b914:	4bb0      	ldr	r3, [pc, #704]	@ (800bbd8 <motorInit+0x338>)
 800b916:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ki = 50.0f;
 800b918:	4bb0      	ldr	r3, [pc, #704]	@ (800bbdc <motorInit+0x33c>)
 800b91a:	62bb      	str	r3, [r7, #40]	@ 0x28
        pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800b91c:	4ba8      	ldr	r3, [pc, #672]	@ (800bbc0 <motorInit+0x320>)
 800b91e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b922:	eef0 2a67 	vmov.f32	s5, s15
 800b926:	ed9f 2aae 	vldr	s4, [pc, #696]	@ 800bbe0 <motorInit+0x340>
 800b92a:	eddf 1aae 	vldr	s3, [pc, #696]	@ 800bbe4 <motorInit+0x344>
 800b92e:	ed9f 1aad 	vldr	s2, [pc, #692]	@ 800bbe4 <motorInit+0x344>
 800b932:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 800b936:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 800b93a:	48ab      	ldr	r0, [pc, #684]	@ (800bbe8 <motorInit+0x348>)
 800b93c:	f7ff fd04 	bl	800b348 <pidInit>
    {
 800b940:	e0c0      	b.n	800bac4 <motorInit+0x224>
        // pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
    }
    else if (motor1.controlType == VELOCITY)
 800b942:	4b9f      	ldr	r3, [pc, #636]	@ (800bbc0 <motorInit+0x320>)
 800b944:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800b948:	2b02      	cmp	r3, #2
 800b94a:	d152      	bne.n	800b9f2 <motorInit+0x152>
    {
        if (motor1.torqueType == CURRENT)
 800b94c:	4b9c      	ldr	r3, [pc, #624]	@ (800bbc0 <motorInit+0x320>)
 800b94e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800b952:	2b01      	cmp	r3, #1
 800b954:	d13a      	bne.n	800b9cc <motorInit+0x12c>
        {
            pidInit(&motor1.velocityPID, 0.02, 0.01, 0, 0, CURRENT_MAX, motor1.Ts);
 800b956:	4b9a      	ldr	r3, [pc, #616]	@ (800bbc0 <motorInit+0x320>)
 800b958:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b95c:	eef0 2a67 	vmov.f32	s5, s15
 800b960:	ed9f 2aa2 	vldr	s4, [pc, #648]	@ 800bbec <motorInit+0x34c>
 800b964:	eddf 1a9f 	vldr	s3, [pc, #636]	@ 800bbe4 <motorInit+0x344>
 800b968:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 800bbe4 <motorInit+0x344>
 800b96c:	eddf 0aa0 	vldr	s1, [pc, #640]	@ 800bbf0 <motorInit+0x350>
 800b970:	ed9f 0aa0 	vldr	s0, [pc, #640]	@ 800bbf4 <motorInit+0x354>
 800b974:	48a0      	ldr	r0, [pc, #640]	@ (800bbf8 <motorInit+0x358>)
 800b976:	f7ff fce7 	bl	800b348 <pidInit>

            float kp, ki;
            kp = 500.0f;
 800b97a:	4b97      	ldr	r3, [pc, #604]	@ (800bbd8 <motorInit+0x338>)
 800b97c:	61fb      	str	r3, [r7, #28]
            ki = 50.0f;
 800b97e:	4b97      	ldr	r3, [pc, #604]	@ (800bbdc <motorInit+0x33c>)
 800b980:	61bb      	str	r3, [r7, #24]
            pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800b982:	4b8f      	ldr	r3, [pc, #572]	@ (800bbc0 <motorInit+0x320>)
 800b984:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b988:	eef0 2a67 	vmov.f32	s5, s15
 800b98c:	ed9f 2a94 	vldr	s4, [pc, #592]	@ 800bbe0 <motorInit+0x340>
 800b990:	eddf 1a94 	vldr	s3, [pc, #592]	@ 800bbe4 <motorInit+0x344>
 800b994:	ed9f 1a93 	vldr	s2, [pc, #588]	@ 800bbe4 <motorInit+0x344>
 800b998:	edd7 0a06 	vldr	s1, [r7, #24]
 800b99c:	ed97 0a07 	vldr	s0, [r7, #28]
 800b9a0:	4891      	ldr	r0, [pc, #580]	@ (800bbe8 <motorInit+0x348>)
 800b9a2:	f7ff fcd1 	bl	800b348 <pidInit>
            pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800b9a6:	4b86      	ldr	r3, [pc, #536]	@ (800bbc0 <motorInit+0x320>)
 800b9a8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b9ac:	eef0 2a67 	vmov.f32	s5, s15
 800b9b0:	ed9f 2a8b 	vldr	s4, [pc, #556]	@ 800bbe0 <motorInit+0x340>
 800b9b4:	eddf 1a8b 	vldr	s3, [pc, #556]	@ 800bbe4 <motorInit+0x344>
 800b9b8:	ed9f 1a8a 	vldr	s2, [pc, #552]	@ 800bbe4 <motorInit+0x344>
 800b9bc:	edd7 0a06 	vldr	s1, [r7, #24]
 800b9c0:	ed97 0a07 	vldr	s0, [r7, #28]
 800b9c4:	488d      	ldr	r0, [pc, #564]	@ (800bbfc <motorInit+0x35c>)
 800b9c6:	f7ff fcbf 	bl	800b348 <pidInit>
 800b9ca:	e07b      	b.n	800bac4 <motorInit+0x224>
        }
        else
        {
            pidInit(&motor1.velocityPID, 0.15, 0.05, 0, 0, UqMAX, motor1.Ts);
 800b9cc:	4b7c      	ldr	r3, [pc, #496]	@ (800bbc0 <motorInit+0x320>)
 800b9ce:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b9d2:	eef0 2a67 	vmov.f32	s5, s15
 800b9d6:	ed9f 2a82 	vldr	s4, [pc, #520]	@ 800bbe0 <motorInit+0x340>
 800b9da:	eddf 1a82 	vldr	s3, [pc, #520]	@ 800bbe4 <motorInit+0x344>
 800b9de:	ed9f 1a81 	vldr	s2, [pc, #516]	@ 800bbe4 <motorInit+0x344>
 800b9e2:	eddf 0a87 	vldr	s1, [pc, #540]	@ 800bc00 <motorInit+0x360>
 800b9e6:	ed9f 0a87 	vldr	s0, [pc, #540]	@ 800bc04 <motorInit+0x364>
 800b9ea:	4883      	ldr	r0, [pc, #524]	@ (800bbf8 <motorInit+0x358>)
 800b9ec:	f7ff fcac 	bl	800b348 <pidInit>
 800b9f0:	e068      	b.n	800bac4 <motorInit+0x224>
        }
    }
    else if (motor1.controlType == ANGLE)
 800b9f2:	4b73      	ldr	r3, [pc, #460]	@ (800bbc0 <motorInit+0x320>)
 800b9f4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800b9f8:	2b03      	cmp	r3, #3
 800b9fa:	d163      	bne.n	800bac4 <motorInit+0x224>
    {
        if (motor1.torqueType == CURRENT)
 800b9fc:	4b70      	ldr	r3, [pc, #448]	@ (800bbc0 <motorInit+0x320>)
 800b9fe:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d14c      	bne.n	800baa0 <motorInit+0x200>
        {
            pidInit(&motor1.anglePID, 2, 0, 0, 0, MAX_VELOCITY, motor1.Ts);
 800ba06:	4b6e      	ldr	r3, [pc, #440]	@ (800bbc0 <motorInit+0x320>)
 800ba08:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ba0c:	eef0 2a67 	vmov.f32	s5, s15
 800ba10:	ed9f 2a7d 	vldr	s4, [pc, #500]	@ 800bc08 <motorInit+0x368>
 800ba14:	eddf 1a73 	vldr	s3, [pc, #460]	@ 800bbe4 <motorInit+0x344>
 800ba18:	ed9f 1a72 	vldr	s2, [pc, #456]	@ 800bbe4 <motorInit+0x344>
 800ba1c:	eddf 0a71 	vldr	s1, [pc, #452]	@ 800bbe4 <motorInit+0x344>
 800ba20:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800ba24:	4879      	ldr	r0, [pc, #484]	@ (800bc0c <motorInit+0x36c>)
 800ba26:	f7ff fc8f 	bl	800b348 <pidInit>

            pidInit(&motor1.velocityPID, -0.02, -0.01, 0, 0, CURRENT_MAX, motor1.Ts);
 800ba2a:	4b65      	ldr	r3, [pc, #404]	@ (800bbc0 <motorInit+0x320>)
 800ba2c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ba30:	eef0 2a67 	vmov.f32	s5, s15
 800ba34:	ed9f 2a6d 	vldr	s4, [pc, #436]	@ 800bbec <motorInit+0x34c>
 800ba38:	eddf 1a6a 	vldr	s3, [pc, #424]	@ 800bbe4 <motorInit+0x344>
 800ba3c:	ed9f 1a69 	vldr	s2, [pc, #420]	@ 800bbe4 <motorInit+0x344>
 800ba40:	eddf 0a73 	vldr	s1, [pc, #460]	@ 800bc10 <motorInit+0x370>
 800ba44:	ed9f 0a73 	vldr	s0, [pc, #460]	@ 800bc14 <motorInit+0x374>
 800ba48:	486b      	ldr	r0, [pc, #428]	@ (800bbf8 <motorInit+0x358>)
 800ba4a:	f7ff fc7d 	bl	800b348 <pidInit>

            // pidInit(&motor1.anglePID, -0.001, -0.0001, 0, 0, CURRENT_MAX / 2, motor1.Ts);

            float kp, ki;
            kp = -200;
 800ba4e:	4b72      	ldr	r3, [pc, #456]	@ (800bc18 <motorInit+0x378>)
 800ba50:	627b      	str	r3, [r7, #36]	@ 0x24
            ki = -20;
 800ba52:	4b72      	ldr	r3, [pc, #456]	@ (800bc1c <motorInit+0x37c>)
 800ba54:	623b      	str	r3, [r7, #32]
            pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800ba56:	4b5a      	ldr	r3, [pc, #360]	@ (800bbc0 <motorInit+0x320>)
 800ba58:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ba5c:	eef0 2a67 	vmov.f32	s5, s15
 800ba60:	ed9f 2a5f 	vldr	s4, [pc, #380]	@ 800bbe0 <motorInit+0x340>
 800ba64:	eddf 1a5f 	vldr	s3, [pc, #380]	@ 800bbe4 <motorInit+0x344>
 800ba68:	ed9f 1a5e 	vldr	s2, [pc, #376]	@ 800bbe4 <motorInit+0x344>
 800ba6c:	edd7 0a08 	vldr	s1, [r7, #32]
 800ba70:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 800ba74:	485c      	ldr	r0, [pc, #368]	@ (800bbe8 <motorInit+0x348>)
 800ba76:	f7ff fc67 	bl	800b348 <pidInit>
            pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800ba7a:	4b51      	ldr	r3, [pc, #324]	@ (800bbc0 <motorInit+0x320>)
 800ba7c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ba80:	eef0 2a67 	vmov.f32	s5, s15
 800ba84:	ed9f 2a56 	vldr	s4, [pc, #344]	@ 800bbe0 <motorInit+0x340>
 800ba88:	eddf 1a56 	vldr	s3, [pc, #344]	@ 800bbe4 <motorInit+0x344>
 800ba8c:	ed9f 1a55 	vldr	s2, [pc, #340]	@ 800bbe4 <motorInit+0x344>
 800ba90:	edd7 0a08 	vldr	s1, [r7, #32]
 800ba94:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 800ba98:	4858      	ldr	r0, [pc, #352]	@ (800bbfc <motorInit+0x35c>)
 800ba9a:	f7ff fc55 	bl	800b348 <pidInit>
 800ba9e:	e011      	b.n	800bac4 <motorInit+0x224>
        }
        else
        {
            pidInit(&motor1.anglePID, 0.3, 0.001, 0, 0, UqMAX / 2, motor1.Ts);
 800baa0:	4b47      	ldr	r3, [pc, #284]	@ (800bbc0 <motorInit+0x320>)
 800baa2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800baa6:	eef0 2a67 	vmov.f32	s5, s15
 800baaa:	ed9f 2a5d 	vldr	s4, [pc, #372]	@ 800bc20 <motorInit+0x380>
 800baae:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 800bbe4 <motorInit+0x344>
 800bab2:	ed9f 1a4c 	vldr	s2, [pc, #304]	@ 800bbe4 <motorInit+0x344>
 800bab6:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 800bc24 <motorInit+0x384>
 800baba:	ed9f 0a5b 	vldr	s0, [pc, #364]	@ 800bc28 <motorInit+0x388>
 800babe:	4853      	ldr	r0, [pc, #332]	@ (800bc0c <motorInit+0x36c>)
 800bac0:	f7ff fc42 	bl	800b348 <pidInit>
        }
    }

    lpfInit(&motor1.IqFilter, 0.05, motor1.Ts);
 800bac4:	4b3e      	ldr	r3, [pc, #248]	@ (800bbc0 <motorInit+0x320>)
 800bac6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800baca:	eef0 0a67 	vmov.f32	s1, s15
 800bace:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 800bc00 <motorInit+0x360>
 800bad2:	4856      	ldr	r0, [pc, #344]	@ (800bc2c <motorInit+0x38c>)
 800bad4:	f7ff facc 	bl	800b070 <lpfInit>
    lpfInit(&motor1.IdFilter, 0.05, motor1.Ts);
 800bad8:	4b39      	ldr	r3, [pc, #228]	@ (800bbc0 <motorInit+0x320>)
 800bada:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bade:	eef0 0a67 	vmov.f32	s1, s15
 800bae2:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 800bc00 <motorInit+0x360>
 800bae6:	4852      	ldr	r0, [pc, #328]	@ (800bc30 <motorInit+0x390>)
 800bae8:	f7ff fac2 	bl	800b070 <lpfInit>
    lpfInit(&motor1.velocityFilter, 0.01, motor1.Ts);
 800baec:	4b34      	ldr	r3, [pc, #208]	@ (800bbc0 <motorInit+0x320>)
 800baee:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800baf2:	eef0 0a67 	vmov.f32	s1, s15
 800baf6:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 800bbf0 <motorInit+0x350>
 800bafa:	484e      	ldr	r0, [pc, #312]	@ (800bc34 <motorInit+0x394>)
 800bafc:	f7ff fab8 	bl	800b070 <lpfInit>

#endif
    motor2.pole_pairs = 7;
 800bb00:	4b4d      	ldr	r3, [pc, #308]	@ (800bc38 <motorInit+0x398>)
 800bb02:	2207      	movs	r2, #7
 800bb04:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    motor2.updatePwm = updatePwm2;
 800bb08:	4b4b      	ldr	r3, [pc, #300]	@ (800bc38 <motorInit+0x398>)
 800bb0a:	4a4c      	ldr	r2, [pc, #304]	@ (800bc3c <motorInit+0x39c>)
 800bb0c:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    motor2.startPwm = startPwm2;
 800bb10:	4b49      	ldr	r3, [pc, #292]	@ (800bc38 <motorInit+0x398>)
 800bb12:	4a4b      	ldr	r2, [pc, #300]	@ (800bc40 <motorInit+0x3a0>)
 800bb14:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor2.stopPwm = stopPwm2;
 800bb18:	4b47      	ldr	r3, [pc, #284]	@ (800bc38 <motorInit+0x398>)
 800bb1a:	4a4a      	ldr	r2, [pc, #296]	@ (800bc44 <motorInit+0x3a4>)
 800bb1c:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    motor2.zeroElectricAngleOffSet = 0;
 800bb20:	4b45      	ldr	r3, [pc, #276]	@ (800bc38 <motorInit+0x398>)
 800bb22:	f04f 0200 	mov.w	r2, #0
 800bb26:	635a      	str	r2, [r3, #52]	@ 0x34
    motor2.Ts = 100 * 1e-6f;
 800bb28:	4b43      	ldr	r3, [pc, #268]	@ (800bc38 <motorInit+0x398>)
 800bb2a:	4a29      	ldr	r2, [pc, #164]	@ (800bbd0 <motorInit+0x330>)
 800bb2c:	62da      	str	r2, [r3, #44]	@ 0x2c
    motor2.torqueType = VOLTAGE;
 800bb2e:	4b42      	ldr	r3, [pc, #264]	@ (800bc38 <motorInit+0x398>)
 800bb30:	2200      	movs	r2, #0
 800bb32:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    motor2.controlType = VELOCITY;
 800bb36:	4b40      	ldr	r3, [pc, #256]	@ (800bc38 <motorInit+0x398>)
 800bb38:	2202      	movs	r2, #2
 800bb3a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

    motor2.state = MOTOR_CALIBRATE;
 800bb3e:	4b3e      	ldr	r3, [pc, #248]	@ (800bc38 <motorInit+0x398>)
 800bb40:	2200      	movs	r2, #0
 800bb42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    encoderInit(&motor2.magEncoder, motor2.Ts, _2_MT6701_GetRawAngle, UNKNOWN);
 800bb46:	4b3c      	ldr	r3, [pc, #240]	@ (800bc38 <motorInit+0x398>)
 800bb48:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	493e      	ldr	r1, [pc, #248]	@ (800bc48 <motorInit+0x3a8>)
 800bb50:	eeb0 0a67 	vmov.f32	s0, s15
 800bb54:	4838      	ldr	r0, [pc, #224]	@ (800bc38 <motorInit+0x398>)
 800bb56:	f7ff f9d6 	bl	800af06 <encoderInit>
    if (motor2.controlType == TORQUE && motor2.torqueType == CURRENT)
 800bb5a:	4b37      	ldr	r3, [pc, #220]	@ (800bc38 <motorInit+0x398>)
 800bb5c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d177      	bne.n	800bc54 <motorInit+0x3b4>
 800bb64:	4b34      	ldr	r3, [pc, #208]	@ (800bc38 <motorInit+0x398>)
 800bb66:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	d172      	bne.n	800bc54 <motorInit+0x3b4>
    {
        float kp, ki;
        kp = -200;
 800bb6e:	4b2a      	ldr	r3, [pc, #168]	@ (800bc18 <motorInit+0x378>)
 800bb70:	617b      	str	r3, [r7, #20]
        ki = -20;
 800bb72:	4b2a      	ldr	r3, [pc, #168]	@ (800bc1c <motorInit+0x37c>)
 800bb74:	613b      	str	r3, [r7, #16]
        pidInit(&motor2.pidId, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800bb76:	4b30      	ldr	r3, [pc, #192]	@ (800bc38 <motorInit+0x398>)
 800bb78:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bb7c:	eef0 2a67 	vmov.f32	s5, s15
 800bb80:	ed9f 2a17 	vldr	s4, [pc, #92]	@ 800bbe0 <motorInit+0x340>
 800bb84:	eddf 1a17 	vldr	s3, [pc, #92]	@ 800bbe4 <motorInit+0x344>
 800bb88:	ed9f 1a16 	vldr	s2, [pc, #88]	@ 800bbe4 <motorInit+0x344>
 800bb8c:	edd7 0a04 	vldr	s1, [r7, #16]
 800bb90:	ed97 0a05 	vldr	s0, [r7, #20]
 800bb94:	482d      	ldr	r0, [pc, #180]	@ (800bc4c <motorInit+0x3ac>)
 800bb96:	f7ff fbd7 	bl	800b348 <pidInit>
        pidInit(&motor2.pidIq, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800bb9a:	4b27      	ldr	r3, [pc, #156]	@ (800bc38 <motorInit+0x398>)
 800bb9c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bba0:	eef0 2a67 	vmov.f32	s5, s15
 800bba4:	ed9f 2a0e 	vldr	s4, [pc, #56]	@ 800bbe0 <motorInit+0x340>
 800bba8:	eddf 1a0e 	vldr	s3, [pc, #56]	@ 800bbe4 <motorInit+0x344>
 800bbac:	ed9f 1a0d 	vldr	s2, [pc, #52]	@ 800bbe4 <motorInit+0x344>
 800bbb0:	edd7 0a04 	vldr	s1, [r7, #16]
 800bbb4:	ed97 0a05 	vldr	s0, [r7, #20]
 800bbb8:	4825      	ldr	r0, [pc, #148]	@ (800bc50 <motorInit+0x3b0>)
 800bbba:	f7ff fbc5 	bl	800b348 <pidInit>
    {
 800bbbe:	e10a      	b.n	800bdd6 <motorInit+0x536>
 800bbc0:	20000650 	.word	0x20000650
 800bbc4:	0800db95 	.word	0x0800db95
 800bbc8:	0800db4d 	.word	0x0800db4d
 800bbcc:	0800db71 	.word	0x0800db71
 800bbd0:	38d1b717 	.word	0x38d1b717
 800bbd4:	0800da41 	.word	0x0800da41
 800bbd8:	43fa0000 	.word	0x43fa0000
 800bbdc:	42480000 	.word	0x42480000
 800bbe0:	4093cd3a 	.word	0x4093cd3a
 800bbe4:	00000000 	.word	0x00000000
 800bbe8:	200006b4 	.word	0x200006b4
 800bbec:	3e4ccccd 	.word	0x3e4ccccd
 800bbf0:	3c23d70a 	.word	0x3c23d70a
 800bbf4:	3ca3d70a 	.word	0x3ca3d70a
 800bbf8:	200006fc 	.word	0x200006fc
 800bbfc:	200006d8 	.word	0x200006d8
 800bc00:	3d4ccccd 	.word	0x3d4ccccd
 800bc04:	3e19999a 	.word	0x3e19999a
 800bc08:	43c80000 	.word	0x43c80000
 800bc0c:	20000720 	.word	0x20000720
 800bc10:	bc23d70a 	.word	0xbc23d70a
 800bc14:	bca3d70a 	.word	0xbca3d70a
 800bc18:	c3480000 	.word	0xc3480000
 800bc1c:	c1a00000 	.word	0xc1a00000
 800bc20:	4013cd3a 	.word	0x4013cd3a
 800bc24:	3a83126f 	.word	0x3a83126f
 800bc28:	3e99999a 	.word	0x3e99999a
 800bc2c:	20000744 	.word	0x20000744
 800bc30:	20000750 	.word	0x20000750
 800bc34:	2000075c 	.word	0x2000075c
 800bc38:	20000790 	.word	0x20000790
 800bc3c:	0800dc11 	.word	0x0800dc11
 800bc40:	0800dbc9 	.word	0x0800dbc9
 800bc44:	0800dbed 	.word	0x0800dbed
 800bc48:	0800db11 	.word	0x0800db11
 800bc4c:	200007f4 	.word	0x200007f4
 800bc50:	20000818 	.word	0x20000818
    }
    else if (motor2.controlType == VELOCITY)
 800bc54:	4b71      	ldr	r3, [pc, #452]	@ (800be1c <motorInit+0x57c>)
 800bc56:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800bc5a:	2b02      	cmp	r3, #2
 800bc5c:	d152      	bne.n	800bd04 <motorInit+0x464>
    {
        if (motor2.torqueType == CURRENT)
 800bc5e:	4b6f      	ldr	r3, [pc, #444]	@ (800be1c <motorInit+0x57c>)
 800bc60:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d13a      	bne.n	800bcde <motorInit+0x43e>
        {
            pidInit(&motor2.velocityPID, 0.02, 0.01, 0, 0, CURRENT_MAX, motor2.Ts);
 800bc68:	4b6c      	ldr	r3, [pc, #432]	@ (800be1c <motorInit+0x57c>)
 800bc6a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bc6e:	eef0 2a67 	vmov.f32	s5, s15
 800bc72:	ed9f 2a6b 	vldr	s4, [pc, #428]	@ 800be20 <motorInit+0x580>
 800bc76:	eddf 1a6b 	vldr	s3, [pc, #428]	@ 800be24 <motorInit+0x584>
 800bc7a:	ed9f 1a6a 	vldr	s2, [pc, #424]	@ 800be24 <motorInit+0x584>
 800bc7e:	eddf 0a6a 	vldr	s1, [pc, #424]	@ 800be28 <motorInit+0x588>
 800bc82:	ed9f 0a6a 	vldr	s0, [pc, #424]	@ 800be2c <motorInit+0x58c>
 800bc86:	486a      	ldr	r0, [pc, #424]	@ (800be30 <motorInit+0x590>)
 800bc88:	f7ff fb5e 	bl	800b348 <pidInit>

            float kp, ki;
            kp = 500.0f;
 800bc8c:	4b69      	ldr	r3, [pc, #420]	@ (800be34 <motorInit+0x594>)
 800bc8e:	607b      	str	r3, [r7, #4]
            ki = 50.0f;
 800bc90:	4b69      	ldr	r3, [pc, #420]	@ (800be38 <motorInit+0x598>)
 800bc92:	603b      	str	r3, [r7, #0]
            pidInit(&motor2.pidId, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800bc94:	4b61      	ldr	r3, [pc, #388]	@ (800be1c <motorInit+0x57c>)
 800bc96:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bc9a:	eef0 2a67 	vmov.f32	s5, s15
 800bc9e:	ed9f 2a67 	vldr	s4, [pc, #412]	@ 800be3c <motorInit+0x59c>
 800bca2:	eddf 1a60 	vldr	s3, [pc, #384]	@ 800be24 <motorInit+0x584>
 800bca6:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 800be24 <motorInit+0x584>
 800bcaa:	edd7 0a00 	vldr	s1, [r7]
 800bcae:	ed97 0a01 	vldr	s0, [r7, #4]
 800bcb2:	4863      	ldr	r0, [pc, #396]	@ (800be40 <motorInit+0x5a0>)
 800bcb4:	f7ff fb48 	bl	800b348 <pidInit>
            pidInit(&motor2.pidIq, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800bcb8:	4b58      	ldr	r3, [pc, #352]	@ (800be1c <motorInit+0x57c>)
 800bcba:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bcbe:	eef0 2a67 	vmov.f32	s5, s15
 800bcc2:	ed9f 2a5e 	vldr	s4, [pc, #376]	@ 800be3c <motorInit+0x59c>
 800bcc6:	eddf 1a57 	vldr	s3, [pc, #348]	@ 800be24 <motorInit+0x584>
 800bcca:	ed9f 1a56 	vldr	s2, [pc, #344]	@ 800be24 <motorInit+0x584>
 800bcce:	edd7 0a00 	vldr	s1, [r7]
 800bcd2:	ed97 0a01 	vldr	s0, [r7, #4]
 800bcd6:	485b      	ldr	r0, [pc, #364]	@ (800be44 <motorInit+0x5a4>)
 800bcd8:	f7ff fb36 	bl	800b348 <pidInit>
 800bcdc:	e07b      	b.n	800bdd6 <motorInit+0x536>
        }
        else
        {
            pidInit(&motor2.velocityPID, 0.15, 0.05, 0, 0, UqMAX, motor2.Ts);
 800bcde:	4b4f      	ldr	r3, [pc, #316]	@ (800be1c <motorInit+0x57c>)
 800bce0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bce4:	eef0 2a67 	vmov.f32	s5, s15
 800bce8:	ed9f 2a54 	vldr	s4, [pc, #336]	@ 800be3c <motorInit+0x59c>
 800bcec:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 800be24 <motorInit+0x584>
 800bcf0:	ed9f 1a4c 	vldr	s2, [pc, #304]	@ 800be24 <motorInit+0x584>
 800bcf4:	eddf 0a54 	vldr	s1, [pc, #336]	@ 800be48 <motorInit+0x5a8>
 800bcf8:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 800be4c <motorInit+0x5ac>
 800bcfc:	484c      	ldr	r0, [pc, #304]	@ (800be30 <motorInit+0x590>)
 800bcfe:	f7ff fb23 	bl	800b348 <pidInit>
 800bd02:	e068      	b.n	800bdd6 <motorInit+0x536>
        }
    }
    else if (motor2.controlType == ANGLE)
 800bd04:	4b45      	ldr	r3, [pc, #276]	@ (800be1c <motorInit+0x57c>)
 800bd06:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800bd0a:	2b03      	cmp	r3, #3
 800bd0c:	d163      	bne.n	800bdd6 <motorInit+0x536>
    {
        if (motor2.torqueType == CURRENT)
 800bd0e:	4b43      	ldr	r3, [pc, #268]	@ (800be1c <motorInit+0x57c>)
 800bd10:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800bd14:	2b01      	cmp	r3, #1
 800bd16:	d14c      	bne.n	800bdb2 <motorInit+0x512>
        {
            pidInit(&motor2.anglePID, 2, 0, 0, 0, MAX_VELOCITY, motor2.Ts);
 800bd18:	4b40      	ldr	r3, [pc, #256]	@ (800be1c <motorInit+0x57c>)
 800bd1a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bd1e:	eef0 2a67 	vmov.f32	s5, s15
 800bd22:	ed9f 2a4b 	vldr	s4, [pc, #300]	@ 800be50 <motorInit+0x5b0>
 800bd26:	eddf 1a3f 	vldr	s3, [pc, #252]	@ 800be24 <motorInit+0x584>
 800bd2a:	ed9f 1a3e 	vldr	s2, [pc, #248]	@ 800be24 <motorInit+0x584>
 800bd2e:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 800be24 <motorInit+0x584>
 800bd32:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800bd36:	4847      	ldr	r0, [pc, #284]	@ (800be54 <motorInit+0x5b4>)
 800bd38:	f7ff fb06 	bl	800b348 <pidInit>

            pidInit(&motor2.velocityPID, -0.02, -0.01, 0, 0, CURRENT_MAX, motor2.Ts);
 800bd3c:	4b37      	ldr	r3, [pc, #220]	@ (800be1c <motorInit+0x57c>)
 800bd3e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bd42:	eef0 2a67 	vmov.f32	s5, s15
 800bd46:	ed9f 2a36 	vldr	s4, [pc, #216]	@ 800be20 <motorInit+0x580>
 800bd4a:	eddf 1a36 	vldr	s3, [pc, #216]	@ 800be24 <motorInit+0x584>
 800bd4e:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 800be24 <motorInit+0x584>
 800bd52:	eddf 0a41 	vldr	s1, [pc, #260]	@ 800be58 <motorInit+0x5b8>
 800bd56:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 800be5c <motorInit+0x5bc>
 800bd5a:	4835      	ldr	r0, [pc, #212]	@ (800be30 <motorInit+0x590>)
 800bd5c:	f7ff faf4 	bl	800b348 <pidInit>

            // pidInit(&motor1.anglePID, -0.001, -0.0001, 0, 0, CURRENT_MAX / 2, motor1.Ts);

            float kp, ki;
            kp = -200;
 800bd60:	4b3f      	ldr	r3, [pc, #252]	@ (800be60 <motorInit+0x5c0>)
 800bd62:	60fb      	str	r3, [r7, #12]
            ki = -20;
 800bd64:	4b3f      	ldr	r3, [pc, #252]	@ (800be64 <motorInit+0x5c4>)
 800bd66:	60bb      	str	r3, [r7, #8]
            pidInit(&motor2.pidId, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800bd68:	4b2c      	ldr	r3, [pc, #176]	@ (800be1c <motorInit+0x57c>)
 800bd6a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bd6e:	eef0 2a67 	vmov.f32	s5, s15
 800bd72:	ed9f 2a32 	vldr	s4, [pc, #200]	@ 800be3c <motorInit+0x59c>
 800bd76:	eddf 1a2b 	vldr	s3, [pc, #172]	@ 800be24 <motorInit+0x584>
 800bd7a:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 800be24 <motorInit+0x584>
 800bd7e:	edd7 0a02 	vldr	s1, [r7, #8]
 800bd82:	ed97 0a03 	vldr	s0, [r7, #12]
 800bd86:	482e      	ldr	r0, [pc, #184]	@ (800be40 <motorInit+0x5a0>)
 800bd88:	f7ff fade 	bl	800b348 <pidInit>
            pidInit(&motor2.pidIq, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800bd8c:	4b23      	ldr	r3, [pc, #140]	@ (800be1c <motorInit+0x57c>)
 800bd8e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bd92:	eef0 2a67 	vmov.f32	s5, s15
 800bd96:	ed9f 2a29 	vldr	s4, [pc, #164]	@ 800be3c <motorInit+0x59c>
 800bd9a:	eddf 1a22 	vldr	s3, [pc, #136]	@ 800be24 <motorInit+0x584>
 800bd9e:	ed9f 1a21 	vldr	s2, [pc, #132]	@ 800be24 <motorInit+0x584>
 800bda2:	edd7 0a02 	vldr	s1, [r7, #8]
 800bda6:	ed97 0a03 	vldr	s0, [r7, #12]
 800bdaa:	4826      	ldr	r0, [pc, #152]	@ (800be44 <motorInit+0x5a4>)
 800bdac:	f7ff facc 	bl	800b348 <pidInit>
 800bdb0:	e011      	b.n	800bdd6 <motorInit+0x536>
        }
        else
        {
            pidInit(&motor2.anglePID, 0.3, 0.001, 0, 0, UqMAX / 2, motor2.Ts);
 800bdb2:	4b1a      	ldr	r3, [pc, #104]	@ (800be1c <motorInit+0x57c>)
 800bdb4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bdb8:	eef0 2a67 	vmov.f32	s5, s15
 800bdbc:	ed9f 2a2a 	vldr	s4, [pc, #168]	@ 800be68 <motorInit+0x5c8>
 800bdc0:	eddf 1a18 	vldr	s3, [pc, #96]	@ 800be24 <motorInit+0x584>
 800bdc4:	ed9f 1a17 	vldr	s2, [pc, #92]	@ 800be24 <motorInit+0x584>
 800bdc8:	eddf 0a28 	vldr	s1, [pc, #160]	@ 800be6c <motorInit+0x5cc>
 800bdcc:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 800be70 <motorInit+0x5d0>
 800bdd0:	4820      	ldr	r0, [pc, #128]	@ (800be54 <motorInit+0x5b4>)
 800bdd2:	f7ff fab9 	bl	800b348 <pidInit>
        }
    }

    lpfInit(&motor2.IqFilter, 0.05, motor1.Ts);
 800bdd6:	4b27      	ldr	r3, [pc, #156]	@ (800be74 <motorInit+0x5d4>)
 800bdd8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bddc:	eef0 0a67 	vmov.f32	s1, s15
 800bde0:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 800be48 <motorInit+0x5a8>
 800bde4:	4824      	ldr	r0, [pc, #144]	@ (800be78 <motorInit+0x5d8>)
 800bde6:	f7ff f943 	bl	800b070 <lpfInit>
    lpfInit(&motor2.IdFilter, 0.05, motor1.Ts);
 800bdea:	4b22      	ldr	r3, [pc, #136]	@ (800be74 <motorInit+0x5d4>)
 800bdec:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bdf0:	eef0 0a67 	vmov.f32	s1, s15
 800bdf4:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 800be48 <motorInit+0x5a8>
 800bdf8:	4820      	ldr	r0, [pc, #128]	@ (800be7c <motorInit+0x5dc>)
 800bdfa:	f7ff f939 	bl	800b070 <lpfInit>
    lpfInit(&motor2.velocityFilter, 0.01, motor1.Ts);
 800bdfe:	4b1d      	ldr	r3, [pc, #116]	@ (800be74 <motorInit+0x5d4>)
 800be00:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800be04:	eef0 0a67 	vmov.f32	s1, s15
 800be08:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800be28 <motorInit+0x588>
 800be0c:	481c      	ldr	r0, [pc, #112]	@ (800be80 <motorInit+0x5e0>)
 800be0e:	f7ff f92f 	bl	800b070 <lpfInit>
}
 800be12:	bf00      	nop
 800be14:	3730      	adds	r7, #48	@ 0x30
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	20000790 	.word	0x20000790
 800be20:	3e4ccccd 	.word	0x3e4ccccd
 800be24:	00000000 	.word	0x00000000
 800be28:	3c23d70a 	.word	0x3c23d70a
 800be2c:	3ca3d70a 	.word	0x3ca3d70a
 800be30:	2000083c 	.word	0x2000083c
 800be34:	43fa0000 	.word	0x43fa0000
 800be38:	42480000 	.word	0x42480000
 800be3c:	4093cd3a 	.word	0x4093cd3a
 800be40:	200007f4 	.word	0x200007f4
 800be44:	20000818 	.word	0x20000818
 800be48:	3d4ccccd 	.word	0x3d4ccccd
 800be4c:	3e19999a 	.word	0x3e19999a
 800be50:	43c80000 	.word	0x43c80000
 800be54:	20000860 	.word	0x20000860
 800be58:	bc23d70a 	.word	0xbc23d70a
 800be5c:	bca3d70a 	.word	0xbca3d70a
 800be60:	c3480000 	.word	0xc3480000
 800be64:	c1a00000 	.word	0xc1a00000
 800be68:	4013cd3a 	.word	0x4013cd3a
 800be6c:	3a83126f 	.word	0x3a83126f
 800be70:	3e99999a 	.word	0x3e99999a
 800be74:	20000650 	.word	0x20000650
 800be78:	20000884 	.word	0x20000884
 800be7c:	20000890 	.word	0x20000890
 800be80:	2000089c 	.word	0x2000089c

0800be84 <appInit>:
void appInit()
{
 800be84:	b580      	push	{r7, lr}
 800be86:	af00      	add	r7, sp, #0

    motorInit();
 800be88:	f7ff fd0a 	bl	800b8a0 <motorInit>
    devState = STANDBY;
 800be8c:	4b09      	ldr	r3, [pc, #36]	@ (800beb4 <appInit+0x30>)
 800be8e:	2200      	movs	r2, #0
 800be90:	701a      	strb	r2, [r3, #0]

    // balance
    pidInit(&balancePid, -1, 0, 0, 0, VELOCITY_MAX, 1 * 1e-3f);
 800be92:	eddf 2a09 	vldr	s5, [pc, #36]	@ 800beb8 <appInit+0x34>
 800be96:	ed9f 2a09 	vldr	s4, [pc, #36]	@ 800bebc <appInit+0x38>
 800be9a:	eddf 1a09 	vldr	s3, [pc, #36]	@ 800bec0 <appInit+0x3c>
 800be9e:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 800bec0 <appInit+0x3c>
 800bea2:	eddf 0a07 	vldr	s1, [pc, #28]	@ 800bec0 <appInit+0x3c>
 800bea6:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800beaa:	4806      	ldr	r0, [pc, #24]	@ (800bec4 <appInit+0x40>)
 800beac:	f7ff fa4c 	bl	800b348 <pidInit>
}
 800beb0:	bf00      	nop
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	2000008e 	.word	0x2000008e
 800beb8:	3a83126f 	.word	0x3a83126f
 800bebc:	436a0000 	.word	0x436a0000
 800bec0:	00000000 	.word	0x00000000
 800bec4:	200008d0 	.word	0x200008d0

0800bec8 <appRunning>:
static bool zeroReset, _1s;
void appRunning()
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	af00      	add	r7, sp, #0
    _1s = getOneSecFlag();
 800becc:	f002 f846 	bl	800df5c <getOneSecFlag>
 800bed0:	4603      	mov	r3, r0
 800bed2:	461a      	mov	r2, r3
 800bed4:	4b12      	ldr	r3, [pc, #72]	@ (800bf20 <appRunning+0x58>)
 800bed6:	701a      	strb	r2, [r3, #0]
    getKeyState(&keyState);
 800bed8:	4812      	ldr	r0, [pc, #72]	@ (800bf24 <appRunning+0x5c>)
 800beda:	f000 fb79 	bl	800c5d0 <getKeyState>
    // commander_run(&motor1);
    if (++flashCnt >= 10)
 800bede:	4b12      	ldr	r3, [pc, #72]	@ (800bf28 <appRunning+0x60>)
 800bee0:	781b      	ldrb	r3, [r3, #0]
 800bee2:	3301      	adds	r3, #1
 800bee4:	b2da      	uxtb	r2, r3
 800bee6:	4b10      	ldr	r3, [pc, #64]	@ (800bf28 <appRunning+0x60>)
 800bee8:	701a      	strb	r2, [r3, #0]
 800beea:	4b0f      	ldr	r3, [pc, #60]	@ (800bf28 <appRunning+0x60>)
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	2b09      	cmp	r3, #9
 800bef0:	d902      	bls.n	800bef8 <appRunning+0x30>
        flashCnt = 0;
 800bef2:	4b0d      	ldr	r3, [pc, #52]	@ (800bf28 <appRunning+0x60>)
 800bef4:	2200      	movs	r2, #0
 800bef6:	701a      	strb	r2, [r3, #0]

    ledOn = 0;
 800bef8:	4b0c      	ldr	r3, [pc, #48]	@ (800bf2c <appRunning+0x64>)
 800befa:	2200      	movs	r2, #0
 800befc:	701a      	strb	r2, [r3, #0]
    //         motor1.target = goalTorqueV;
    //     else
    //         motor1.target = goalTorqueC;
    // }

    switch (devState)
 800befe:	4b0c      	ldr	r3, [pc, #48]	@ (800bf30 <appRunning+0x68>)
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d002      	beq.n	800bf0c <appRunning+0x44>
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	d003      	beq.n	800bf12 <appRunning+0x4a>
 800bf0a:	e005      	b.n	800bf18 <appRunning+0x50>
    {
    case STANDBY:
        standingBy();
 800bf0c:	f000 f812 	bl	800bf34 <standingBy>
        break;
 800bf10:	e002      	b.n	800bf18 <appRunning+0x50>

    case WORK:
        working();
 800bf12:	f000 f855 	bl	800bfc0 <working>
        break;
 800bf16:	bf00      	nop
    }

    LED_drive();
 800bf18:	f000 fb98 	bl	800c64c <LED_drive>
}
 800bf1c:	bf00      	nop
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	200008f5 	.word	0x200008f5
 800bf24:	2000064c 	.word	0x2000064c
 800bf28:	2000064d 	.word	0x2000064d
 800bf2c:	200009e8 	.word	0x200009e8
 800bf30:	2000008e 	.word	0x2000008e

0800bf34 <standingBy>:
static void standingBy()
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	af00      	add	r7, sp, #0

    ledOn = 1;
 800bf38:	4b1a      	ldr	r3, [pc, #104]	@ (800bfa4 <standingBy+0x70>)
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	701a      	strb	r2, [r3, #0]
    // setTorque(&motor1, 0, OPEN_LOOP_TORQUE, 0);
    if (zeroReset == 0)
 800bf3e:	4b1a      	ldr	r3, [pc, #104]	@ (800bfa8 <standingBy+0x74>)
 800bf40:	781b      	ldrb	r3, [r3, #0]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d109      	bne.n	800bf5a <standingBy+0x26>
    {
        goToZeroElecAngle(&motor1);
 800bf46:	4819      	ldr	r0, [pc, #100]	@ (800bfac <standingBy+0x78>)
 800bf48:	f7fe fade 	bl	800a508 <goToZeroElecAngle>
        goToZeroElecAngle(&motor2);
 800bf4c:	4818      	ldr	r0, [pc, #96]	@ (800bfb0 <standingBy+0x7c>)
 800bf4e:	f7fe fadb 	bl	800a508 <goToZeroElecAngle>
        zeroReset = 1;
 800bf52:	4b15      	ldr	r3, [pc, #84]	@ (800bfa8 <standingBy+0x74>)
 800bf54:	2201      	movs	r2, #1
 800bf56:	701a      	strb	r2, [r3, #0]
 800bf58:	e007      	b.n	800bf6a <standingBy+0x36>
    }
    else
    {
        motor1.stopPwm();
 800bf5a:	4b14      	ldr	r3, [pc, #80]	@ (800bfac <standingBy+0x78>)
 800bf5c:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800bf60:	4798      	blx	r3
        motor2.stopPwm();
 800bf62:	4b13      	ldr	r3, [pc, #76]	@ (800bfb0 <standingBy+0x7c>)
 800bf64:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800bf68:	4798      	blx	r3
    }

    if (keyState == USER1_SHORT)
 800bf6a:	4b12      	ldr	r3, [pc, #72]	@ (800bfb4 <standingBy+0x80>)
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	2b01      	cmp	r3, #1
 800bf70:	d115      	bne.n	800bf9e <standingBy+0x6a>
    {
        WORK_INIT;
 800bf72:	4b11      	ldr	r3, [pc, #68]	@ (800bfb8 <standingBy+0x84>)
 800bf74:	2201      	movs	r2, #1
 800bf76:	701a      	strb	r2, [r3, #0]
 800bf78:	4b10      	ldr	r3, [pc, #64]	@ (800bfbc <standingBy+0x88>)
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	701a      	strb	r2, [r3, #0]
 800bf7e:	4b0b      	ldr	r3, [pc, #44]	@ (800bfac <standingBy+0x78>)
 800bf80:	2202      	movs	r2, #2
 800bf82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800bf86:	4b09      	ldr	r3, [pc, #36]	@ (800bfac <standingBy+0x78>)
 800bf88:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800bf8c:	4798      	blx	r3
 800bf8e:	4b08      	ldr	r3, [pc, #32]	@ (800bfb0 <standingBy+0x7c>)
 800bf90:	2202      	movs	r2, #2
 800bf92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800bf96:	4b06      	ldr	r3, [pc, #24]	@ (800bfb0 <standingBy+0x7c>)
 800bf98:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800bf9c:	4798      	blx	r3
    }
}
 800bf9e:	bf00      	nop
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	200009e8 	.word	0x200009e8
 800bfa8:	200008f4 	.word	0x200008f4
 800bfac:	20000650 	.word	0x20000650
 800bfb0:	20000790 	.word	0x20000790
 800bfb4:	2000064c 	.word	0x2000064c
 800bfb8:	2000008e 	.word	0x2000008e
 800bfbc:	2000064d 	.word	0x2000064d

0800bfc0 <working>:

static void working(void)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	af00      	add	r7, sp, #0
    zeroReset = 0;
 800bfc4:	4b10      	ldr	r3, [pc, #64]	@ (800c008 <working+0x48>)
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	701a      	strb	r2, [r3, #0]
    if (flashCnt < 5)
 800bfca:	4b10      	ldr	r3, [pc, #64]	@ (800c00c <working+0x4c>)
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	2b04      	cmp	r3, #4
 800bfd0:	d802      	bhi.n	800bfd8 <working+0x18>
        ledOn = 1;
 800bfd2:	4b0f      	ldr	r3, [pc, #60]	@ (800c010 <working+0x50>)
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	701a      	strb	r2, [r3, #0]

    if (keyState == USER1_SHORT)
 800bfd8:	4b0e      	ldr	r3, [pc, #56]	@ (800c014 <working+0x54>)
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d10d      	bne.n	800bffc <working+0x3c>
    {
        STANDBY_INIT;
 800bfe0:	4b0d      	ldr	r3, [pc, #52]	@ (800c018 <working+0x58>)
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	701a      	strb	r2, [r3, #0]
 800bfe6:	4b09      	ldr	r3, [pc, #36]	@ (800c00c <working+0x4c>)
 800bfe8:	2200      	movs	r2, #0
 800bfea:	701a      	strb	r2, [r3, #0]
 800bfec:	4b0b      	ldr	r3, [pc, #44]	@ (800c01c <working+0x5c>)
 800bfee:	2201      	movs	r2, #1
 800bff0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800bff4:	4b0a      	ldr	r3, [pc, #40]	@ (800c020 <working+0x60>)
 800bff6:	2201      	movs	r2, #1
 800bff8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    //        //     {
    //        //         bldcMotor.focTarget = 23;
    //        //     }
    //        // }
    //    }
}
 800bffc:	bf00      	nop
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr
 800c006:	bf00      	nop
 800c008:	200008f4 	.word	0x200008f4
 800c00c:	2000064d 	.word	0x2000064d
 800c010:	200009e8 	.word	0x200009e8
 800c014:	2000064c 	.word	0x2000064c
 800c018:	2000008e 	.word	0x2000008e
 800c01c:	20000650 	.word	0x20000650
 800c020:	20000790 	.word	0x20000790

0800c024 <txDataProcess>:

void txDataProcess()
{
 800c024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c028:	b086      	sub	sp, #24
 800c02a:	af06      	add	r7, sp, #24
    // rawData1 = _1_MT6701_GetRawData();
    //  rawData2 = _2_MT6701_GetRawData();
    // sprintf(txBuffer, "accAngle.y : %.2f gyroAngle.y : %.2f\n", mpu6500.accAngle.y, mpu6500.gyroAngle.y);

    //  sprintf(txBuffer, "rawData1: %d,rawData2: %d\n", rawData1, rawData2);
    sprintf(txBuffer, "pitch : %.2f,  wy: %.2f,  velocity1:%.2f, velocity2:%.2f \n", imu.pit, imu.wy, motor1.magEncoder.velocity, motor2.magEncoder.velocity);
 800c02c:	4b15      	ldr	r3, [pc, #84]	@ (800c084 <txDataProcess+0x60>)
 800c02e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c030:	4618      	mov	r0, r3
 800c032:	f7f4 fab1 	bl	8000598 <__aeabi_f2d>
 800c036:	4682      	mov	sl, r0
 800c038:	468b      	mov	fp, r1
 800c03a:	4b12      	ldr	r3, [pc, #72]	@ (800c084 <txDataProcess+0x60>)
 800c03c:	695b      	ldr	r3, [r3, #20]
 800c03e:	4618      	mov	r0, r3
 800c040:	f7f4 faaa 	bl	8000598 <__aeabi_f2d>
 800c044:	4604      	mov	r4, r0
 800c046:	460d      	mov	r5, r1
 800c048:	4b0f      	ldr	r3, [pc, #60]	@ (800c088 <txDataProcess+0x64>)
 800c04a:	699b      	ldr	r3, [r3, #24]
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7f4 faa3 	bl	8000598 <__aeabi_f2d>
 800c052:	4680      	mov	r8, r0
 800c054:	4689      	mov	r9, r1
 800c056:	4b0d      	ldr	r3, [pc, #52]	@ (800c08c <txDataProcess+0x68>)
 800c058:	699b      	ldr	r3, [r3, #24]
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7f4 fa9c 	bl	8000598 <__aeabi_f2d>
 800c060:	4602      	mov	r2, r0
 800c062:	460b      	mov	r3, r1
 800c064:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c068:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c06c:	e9cd 4500 	strd	r4, r5, [sp]
 800c070:	4652      	mov	r2, sl
 800c072:	465b      	mov	r3, fp
 800c074:	4906      	ldr	r1, [pc, #24]	@ (800c090 <txDataProcess+0x6c>)
 800c076:	4807      	ldr	r0, [pc, #28]	@ (800c094 <txDataProcess+0x70>)
 800c078:	f003 fd0a 	bl	800fa90 <siprintf>
    // sprintf(txBuffer, "target:%.2f fullAngle:%.2f velocity:%.2f Uq:%.2f Ud:%.2f Iq:%.2f Id:%.2f elec_angle:%.2f\n", motor1.target, motor1.magEncoder.fullAngle, motor1.magEncoder.velocity, motor1.Uq, motor1.Ud, motor1.Iq, motor1.Id, motor1.angle_el);
    //  sprintf(txBuffer, "_1_fullAngle:%.2f _1_velocity:%.2f _2_fullAngle:%.2f _2_velocity:%.2f\n", motor1.magEncoder.fullAngle, motor1.magEncoder.velocity, motor2.magEncoder.fullAngle, motor2.magEncoder.velocity);
    //   sprintf(txBuffer, "target:%.2f  velocity:%.2f  Uq:%.2f\n", motor1.target, motor1.magEncoder.velocity, motor1.Uq);
    //   sprintf(txBuffer, "target:%.2f,velocity:%.2f,Uq%.2f,Ud%.2f,Iq:%.2f,Id:%.2f\n", motor1.target, motor1.magEncoder.velocity, motor1.Uq, motor1.Ud, motor1.Iq, motor1.Id);
    //   sprintf(txBuffer, "offset_ia:%f offset_ib:%f, Ia:%f, Ib:%f\n", motor1.offset_ia, motor1.offset_ib, motor1.Ia, motor1.Ib);
}
 800c07c:	bf00      	nop
 800c07e:	46bd      	mov	sp, r7
 800c080:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c084:	20000a34 	.word	0x20000a34
 800c088:	20000650 	.word	0x20000650
 800c08c:	20000790 	.word	0x20000790
 800c090:	08013604 	.word	0x08013604
 800c094:	200008f8 	.word	0x200008f8

0800c098 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_SET);
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800c0a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c0aa:	f7f9 fe3d 	bl	8005d28 <HAL_GPIO_WritePin>
    if (hadc == &hadc1)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	4a1b      	ldr	r2, [pc, #108]	@ (800c120 <HAL_ADCEx_InjectedConvCpltCallback+0x88>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d128      	bne.n	800c108 <HAL_ADCEx_InjectedConvCpltCallback+0x70>
    {
        static bool shift;
        shift = !shift;
 800c0b6:	4b1b      	ldr	r3, [pc, #108]	@ (800c124 <HAL_ADCEx_InjectedConvCpltCallback+0x8c>)
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	bf0c      	ite	eq
 800c0be:	2301      	moveq	r3, #1
 800c0c0:	2300      	movne	r3, #0
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	4b17      	ldr	r3, [pc, #92]	@ (800c124 <HAL_ADCEx_InjectedConvCpltCallback+0x8c>)
 800c0c8:	701a      	strb	r2, [r3, #0]
        if (shift)
 800c0ca:	4b16      	ldr	r3, [pc, #88]	@ (800c124 <HAL_ADCEx_InjectedConvCpltCallback+0x8c>)
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d00c      	beq.n	800c0ec <HAL_ADCEx_InjectedConvCpltCallback+0x54>
        {
            foc(&motor1, hadc1.Instance->JDR1, hadc2.Instance->JDR1);
 800c0d2:	4b13      	ldr	r3, [pc, #76]	@ (800c120 <HAL_ADCEx_InjectedConvCpltCallback+0x88>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 800c0da:	4b13      	ldr	r3, [pc, #76]	@ (800c128 <HAL_ADCEx_InjectedConvCpltCallback+0x90>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	4811      	ldr	r0, [pc, #68]	@ (800c12c <HAL_ADCEx_InjectedConvCpltCallback+0x94>)
 800c0e6:	f7fe fb7b 	bl	800a7e0 <foc>
 800c0ea:	e00b      	b.n	800c104 <HAL_ADCEx_InjectedConvCpltCallback+0x6c>
        }
        else
        {
            foc(&motor2, hadc1.Instance->JDR2, hadc2.Instance->JDR2);
 800c0ec:	4b0c      	ldr	r3, [pc, #48]	@ (800c120 <HAL_ADCEx_InjectedConvCpltCallback+0x88>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 800c0f4:	4b0c      	ldr	r3, [pc, #48]	@ (800c128 <HAL_ADCEx_InjectedConvCpltCallback+0x90>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	480c      	ldr	r0, [pc, #48]	@ (800c130 <HAL_ADCEx_InjectedConvCpltCallback+0x98>)
 800c100:	f7fe fb6e 	bl	800a7e0 <foc>
        }

        dealPer100us();
 800c104:	f001 fe64 	bl	800ddd0 <dealPer100us>
        load_data[7] = motor2.magEncoder.velocity;
        memcpy(tempData, (uint8_t *)&load_data, sizeof(load_data));
        HAL_UART_Transmit_DMA(&huart3, (uint8_t *)tempData, sizeof(tempData));
#endif
    }
    HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 800c108:	2200      	movs	r2, #0
 800c10a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800c10e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c112:	f7f9 fe09 	bl	8005d28 <HAL_GPIO_WritePin>
}
 800c116:	bf00      	nop
 800c118:	3708      	adds	r7, #8
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	2000029c 	.word	0x2000029c
 800c124:	200008f6 	.word	0x200008f6
 800c128:	20000308 	.word	0x20000308
 800c12c:	20000650 	.word	0x20000650
 800c130:	20000790 	.word	0x20000790

0800c134 <balancerControl>:

void balancerControl()
{
 800c134:	b480      	push	{r7}
 800c136:	af00      	add	r7, sp, #0
    motor1.target = (&balancePid, 0 - imu.pit);
 800c138:	4b0c      	ldr	r3, [pc, #48]	@ (800c16c <balancerControl+0x38>)
 800c13a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c13e:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800c170 <balancerControl+0x3c>
 800c142:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c146:	4b0b      	ldr	r3, [pc, #44]	@ (800c174 <balancerControl+0x40>)
 800c148:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    motor2.target = (&balancePid, 0 - imu.pit);
 800c14c:	4b07      	ldr	r3, [pc, #28]	@ (800c16c <balancerControl+0x38>)
 800c14e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c152:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800c170 <balancerControl+0x3c>
 800c156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c15a:	4b07      	ldr	r3, [pc, #28]	@ (800c178 <balancerControl+0x44>)
 800c15c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 800c160:	bf00      	nop
 800c162:	46bd      	mov	sp, r7
 800c164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c168:	4770      	bx	lr
 800c16a:	bf00      	nop
 800c16c:	20000a34 	.word	0x20000a34
 800c170:	00000000 	.word	0x00000000
 800c174:	20000650 	.word	0x20000650
 800c178:	20000790 	.word	0x20000790

0800c17c <HAL_UARTEx_RxEventCallback>:
bool toProcessData;
uint8_t aRxBuffer;
float comm1, comm2, comm3, comm4, comm5, comm6, comm7, comm8, comm9, comm10, comm11;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	460b      	mov	r3, r1
 800c186:	807b      	strh	r3, [r7, #2]
  if (huart == &huart3)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	4a07      	ldr	r2, [pc, #28]	@ (800c1a8 <HAL_UARTEx_RxEventCallback+0x2c>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d107      	bne.n	800c1a0 <HAL_UARTEx_RxEventCallback+0x24>
  {
    // HAL_UART_Transmit_DMA(&huart3, rxBuffer, Size);
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 800c190:	2264      	movs	r2, #100	@ 0x64
 800c192:	4906      	ldr	r1, [pc, #24]	@ (800c1ac <HAL_UARTEx_RxEventCallback+0x30>)
 800c194:	4804      	ldr	r0, [pc, #16]	@ (800c1a8 <HAL_UARTEx_RxEventCallback+0x2c>)
 800c196:	f7fe f914 	bl	800a3c2 <HAL_UARTEx_ReceiveToIdle_DMA>
    toProcessData = 1;
 800c19a:	4b05      	ldr	r3, [pc, #20]	@ (800c1b0 <HAL_UARTEx_RxEventCallback+0x34>)
 800c19c:	2201      	movs	r2, #1
 800c19e:	701a      	strb	r2, [r3, #0]
  }
}
 800c1a0:	bf00      	nop
 800c1a2:	3708      	adds	r7, #8
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}
 800c1a8:	200004f0 	.word	0x200004f0
 800c1ac:	2000095c 	.word	0x2000095c
 800c1b0:	200009c0 	.word	0x200009c0

0800c1b4 <printLog>:

// DMA模式
void printLog(const char *format, ...)
{
 800c1b4:	b40f      	push	{r0, r1, r2, r3}
 800c1b6:	b580      	push	{r7, lr}
 800c1b8:	b0c2      	sub	sp, #264	@ 0x108
 800c1ba:	af00      	add	r7, sp, #0
  // length = vsnprintf((char *)txBuffer, sizeof(txBuffer), (char *)format, args);
  // va_end(args);
  // HAL_UART_Transmit_DMA(&huart3, (const char *)txBuffer, length);

  va_list args;           // 定义参数列表变量
  va_start(args, format); // 从format位置开始接收参数表，放在arg里面
 800c1bc:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800c1c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

  char strBuf[256];               // 定义输出的字符串
  vsprintf(strBuf, format, args); // 使用vsprintf将格式化的数据写入缓冲区
 800c1c4:	1d3b      	adds	r3, r7, #4
 800c1c6:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800c1ca:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f003 fcd8 	bl	800fb84 <vsiprintf>
  va_end(args);                   // 结束可变参数的使用

  // 等待上次的数据发送完成，避免新的数据覆盖正在传输的数据，导致混乱
  while (HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX)
 800c1d4:	bf00      	nop
 800c1d6:	480d      	ldr	r0, [pc, #52]	@ (800c20c <printLog+0x58>)
 800c1d8:	f7fd f8a6 	bl	8009328 <HAL_UART_GetState>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	2b21      	cmp	r3, #33	@ 0x21
 800c1e0:	d0f9      	beq.n	800c1d6 <printLog+0x22>
  {
    // Wait for DMA transfer to complete
  }
  HAL_UART_Transmit(&huart3, (uint8_t *)strBuf, strlen(strBuf), 1000);
 800c1e2:	1d3b      	adds	r3, r7, #4
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7f4 f86b 	bl	80002c0 <strlen>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	b29a      	uxth	r2, r3
 800c1ee:	1d39      	adds	r1, r7, #4
 800c1f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c1f4:	4805      	ldr	r0, [pc, #20]	@ (800c20c <printLog+0x58>)
 800c1f6:	f7fc fc33 	bl	8008a60 <HAL_UART_Transmit>
}
 800c1fa:	bf00      	nop
 800c1fc:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800c200:	46bd      	mov	sp, r7
 800c202:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c206:	b004      	add	sp, #16
 800c208:	4770      	bx	lr
 800c20a:	bf00      	nop
 800c20c:	200004f0 	.word	0x200004f0

0800c210 <uartTx>:
//   va_end(args);
//   HAL_UART_Transmit_DMA(&huart3, (const char *)txBuffer, length);
// }

void uartTx()
{
 800c210:	b580      	push	{r7, lr}
 800c212:	af00      	add	r7, sp, #0

#if SHOW_WAVE == 0
  txDataProcess();
 800c214:	f7ff ff06 	bl	800c024 <txDataProcess>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800c218:	2264      	movs	r2, #100	@ 0x64
 800c21a:	4903      	ldr	r1, [pc, #12]	@ (800c228 <uartTx+0x18>)
 800c21c:	4803      	ldr	r0, [pc, #12]	@ (800c22c <uartTx+0x1c>)
 800c21e:	f7fc fcad 	bl	8008b7c <HAL_UART_Transmit_DMA>
 // memset(txBuffer, 0, sizeof(txBuffer));
#endif
}
 800c222:	bf00      	nop
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	200008f8 	.word	0x200008f8
 800c22c:	200004f0 	.word	0x200004f0

0800c230 <getKeyFlags>:
#include "key.h"

static KeyStruct keyStruct[KEY_NUM];

uint getKeyFlags()
{
 800c230:	b580      	push	{r7, lr}
 800c232:	af00      	add	r7, sp, #0
    static uint keyFlagsBak; // back up keyflags for filtering
    static uchar filterCnt;
    static Byte flags;       // real time key flags with bits operation
    static uint keyFlagsBuf; // return key flags after filtering

    flags.byte = 0;
 800c234:	4b1a      	ldr	r3, [pc, #104]	@ (800c2a0 <getKeyFlags+0x70>)
 800c236:	2200      	movs	r2, #0
 800c238:	701a      	strb	r2, [r3, #0]

    // when IO been multiplexed
    if (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == 0)
 800c23a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800c23e:	4819      	ldr	r0, [pc, #100]	@ (800c2a4 <getKeyFlags+0x74>)
 800c240:	f7f9 fd5a 	bl	8005cf8 <HAL_GPIO_ReadPin>
 800c244:	4603      	mov	r3, r0
 800c246:	2b00      	cmp	r3, #0
 800c248:	d104      	bne.n	800c254 <getKeyFlags+0x24>
    {
        flags.bits.b0 = 1; // SW1
 800c24a:	4a15      	ldr	r2, [pc, #84]	@ (800c2a0 <getKeyFlags+0x70>)
 800c24c:	7813      	ldrb	r3, [r2, #0]
 800c24e:	f043 0301 	orr.w	r3, r3, #1
 800c252:	7013      	strb	r3, [r2, #0]
    }

  
    if (flags.byte == keyFlagsBak)
 800c254:	4b12      	ldr	r3, [pc, #72]	@ (800c2a0 <getKeyFlags+0x70>)
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	461a      	mov	r2, r3
 800c25a:	4b13      	ldr	r3, [pc, #76]	@ (800c2a8 <getKeyFlags+0x78>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d114      	bne.n	800c28c <getKeyFlags+0x5c>
    {
        if (flags.bits.b0)
 800c262:	4b0f      	ldr	r3, [pc, #60]	@ (800c2a0 <getKeyFlags+0x70>)
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	f003 0301 	and.w	r3, r3, #1
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d006      	beq.n	800c27e <getKeyFlags+0x4e>
            keyFlagsBuf |= 1;
 800c270:	4b0e      	ldr	r3, [pc, #56]	@ (800c2ac <getKeyFlags+0x7c>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f043 0301 	orr.w	r3, r3, #1
 800c278:	4a0c      	ldr	r2, [pc, #48]	@ (800c2ac <getKeyFlags+0x7c>)
 800c27a:	6013      	str	r3, [r2, #0]
 800c27c:	e00b      	b.n	800c296 <getKeyFlags+0x66>
        else
            keyFlagsBuf &= ~1;
 800c27e:	4b0b      	ldr	r3, [pc, #44]	@ (800c2ac <getKeyFlags+0x7c>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f023 0301 	bic.w	r3, r3, #1
 800c286:	4a09      	ldr	r2, [pc, #36]	@ (800c2ac <getKeyFlags+0x7c>)
 800c288:	6013      	str	r3, [r2, #0]
 800c28a:	e004      	b.n	800c296 <getKeyFlags+0x66>
        // else
        //     keyFlagsBuf &= ~(1 << 2);
    }
    else
    {
        keyFlagsBak = flags.byte;
 800c28c:	4b04      	ldr	r3, [pc, #16]	@ (800c2a0 <getKeyFlags+0x70>)
 800c28e:	781b      	ldrb	r3, [r3, #0]
 800c290:	461a      	mov	r2, r3
 800c292:	4b05      	ldr	r3, [pc, #20]	@ (800c2a8 <getKeyFlags+0x78>)
 800c294:	601a      	str	r2, [r3, #0]
    }
#if DEBUG_KEY
    // displayStuff = keyFlagsBuf;
#endif

    return keyFlagsBuf;
 800c296:	4b05      	ldr	r3, [pc, #20]	@ (800c2ac <getKeyFlags+0x7c>)
 800c298:	681b      	ldr	r3, [r3, #0]
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	bf00      	nop
 800c2a0:	200009dc 	.word	0x200009dc
 800c2a4:	48000800 	.word	0x48000800
 800c2a8:	200009e0 	.word	0x200009e0
 800c2ac:	200009e4 	.word	0x200009e4

0800c2b0 <keyScan>:

void keyScan()
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0

    uint keyFlags;

    keyFlags = getKeyFlags();
 800c2b6:	f7ff ffbb 	bl	800c230 <getKeyFlags>
 800c2ba:	6038      	str	r0, [r7, #0]

    if (keyFlags == 0)
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d13b      	bne.n	800c33a <keyScan+0x8a>
    {
        uchar i;
        for (i = 0; i < KEY_NUM; i++)
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	71fb      	strb	r3, [r7, #7]
 800c2c6:	e035      	b.n	800c334 <keyScan+0x84>
        {
            if (keyStruct[i].keyType == LONG_WITH_SHORT && keyStruct[i].trigCnt > 0)
 800c2c8:	79fa      	ldrb	r2, [r7, #7]
 800c2ca:	4992      	ldr	r1, [pc, #584]	@ (800c514 <keyScan+0x264>)
 800c2cc:	4613      	mov	r3, r2
 800c2ce:	005b      	lsls	r3, r3, #1
 800c2d0:	4413      	add	r3, r2
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	440b      	add	r3, r1
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d114      	bne.n	800c306 <keyScan+0x56>
 800c2dc:	79fa      	ldrb	r2, [r7, #7]
 800c2de:	498d      	ldr	r1, [pc, #564]	@ (800c514 <keyScan+0x264>)
 800c2e0:	4613      	mov	r3, r2
 800c2e2:	005b      	lsls	r3, r3, #1
 800c2e4:	4413      	add	r3, r2
 800c2e6:	009b      	lsls	r3, r3, #2
 800c2e8:	440b      	add	r3, r1
 800c2ea:	3304      	adds	r3, #4
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d009      	beq.n	800c306 <keyScan+0x56>
            {
                keyStruct[i].trigType = TRIG_SHORT;
 800c2f2:	79fa      	ldrb	r2, [r7, #7]
 800c2f4:	4987      	ldr	r1, [pc, #540]	@ (800c514 <keyScan+0x264>)
 800c2f6:	4613      	mov	r3, r2
 800c2f8:	005b      	lsls	r3, r3, #1
 800c2fa:	4413      	add	r3, r2
 800c2fc:	009b      	lsls	r3, r3, #2
 800c2fe:	440b      	add	r3, r1
 800c300:	3308      	adds	r3, #8
 800c302:	2201      	movs	r2, #1
 800c304:	701a      	strb	r2, [r3, #0]
            }
            keyStruct[i].trigCnt = 0;
 800c306:	79fa      	ldrb	r2, [r7, #7]
 800c308:	4982      	ldr	r1, [pc, #520]	@ (800c514 <keyScan+0x264>)
 800c30a:	4613      	mov	r3, r2
 800c30c:	005b      	lsls	r3, r3, #1
 800c30e:	4413      	add	r3, r2
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	440b      	add	r3, r1
 800c314:	3304      	adds	r3, #4
 800c316:	2200      	movs	r2, #0
 800c318:	601a      	str	r2, [r3, #0]
            keyStruct[i].preKeyValue = NO_TRIG;
 800c31a:	79fa      	ldrb	r2, [r7, #7]
 800c31c:	497d      	ldr	r1, [pc, #500]	@ (800c514 <keyScan+0x264>)
 800c31e:	4613      	mov	r3, r2
 800c320:	005b      	lsls	r3, r3, #1
 800c322:	4413      	add	r3, r2
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	440b      	add	r3, r1
 800c328:	3309      	adds	r3, #9
 800c32a:	2200      	movs	r2, #0
 800c32c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < KEY_NUM; i++)
 800c32e:	79fb      	ldrb	r3, [r7, #7]
 800c330:	3301      	adds	r3, #1
 800c332:	71fb      	strb	r3, [r7, #7]
 800c334:	79fb      	ldrb	r3, [r7, #7]
 800c336:	2b01      	cmp	r3, #1
 800c338:	d9c6      	bls.n	800c2c8 <keyScan+0x18>
        }
    }


    if (keyStruct[1].preKeyValue == NO_TRIG)
 800c33a:	4b76      	ldr	r3, [pc, #472]	@ (800c514 <keyScan+0x264>)
 800c33c:	7d5b      	ldrb	r3, [r3, #21]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d131      	bne.n	800c3a6 <keyScan+0xf6>
    {
        if (keyFlags == K(1))
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	2b01      	cmp	r3, #1
 800c346:	d15d      	bne.n	800c404 <keyScan+0x154>
        {
            if (keyStruct[1].preKeyValue == NO_TRIG)
 800c348:	4b72      	ldr	r3, [pc, #456]	@ (800c514 <keyScan+0x264>)
 800c34a:	7d5b      	ldrb	r3, [r3, #21]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d159      	bne.n	800c404 <keyScan+0x154>
            {
                if (keyStruct[1].keyType == SHORT || keyStruct[1].keyType == CONTINUOUS)
 800c350:	4b70      	ldr	r3, [pc, #448]	@ (800c514 <keyScan+0x264>)
 800c352:	7b1b      	ldrb	r3, [r3, #12]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d003      	beq.n	800c360 <keyScan+0xb0>
 800c358:	4b6e      	ldr	r3, [pc, #440]	@ (800c514 <keyScan+0x264>)
 800c35a:	7b1b      	ldrb	r3, [r3, #12]
 800c35c:	2b02      	cmp	r3, #2
 800c35e:	d106      	bne.n	800c36e <keyScan+0xbe>
                {
                    keyStruct[1].trigType = TRIG_SHORT;
 800c360:	4b6c      	ldr	r3, [pc, #432]	@ (800c514 <keyScan+0x264>)
 800c362:	2201      	movs	r2, #1
 800c364:	751a      	strb	r2, [r3, #20]
                    keyStruct[1].preKeyValue = TRIG_SHORT;
 800c366:	4b6b      	ldr	r3, [pc, #428]	@ (800c514 <keyScan+0x264>)
 800c368:	2201      	movs	r2, #1
 800c36a:	755a      	strb	r2, [r3, #21]
 800c36c:	e04a      	b.n	800c404 <keyScan+0x154>
                }
                else if (keyStruct[1].keyType == LONG_WITH_SHORT || keyStruct[1].keyType == LONG)
 800c36e:	4b69      	ldr	r3, [pc, #420]	@ (800c514 <keyScan+0x264>)
 800c370:	7b1b      	ldrb	r3, [r3, #12]
 800c372:	2b01      	cmp	r3, #1
 800c374:	d003      	beq.n	800c37e <keyScan+0xce>
 800c376:	4b67      	ldr	r3, [pc, #412]	@ (800c514 <keyScan+0x264>)
 800c378:	7b1b      	ldrb	r3, [r3, #12]
 800c37a:	2b03      	cmp	r3, #3
 800c37c:	d142      	bne.n	800c404 <keyScan+0x154>
                {
                    if (++keyStruct[1].trigCnt >= KEY1_LONG_CNT)
 800c37e:	4b65      	ldr	r3, [pc, #404]	@ (800c514 <keyScan+0x264>)
 800c380:	691b      	ldr	r3, [r3, #16]
 800c382:	3301      	adds	r3, #1
 800c384:	4a63      	ldr	r2, [pc, #396]	@ (800c514 <keyScan+0x264>)
 800c386:	6113      	str	r3, [r2, #16]
 800c388:	4b62      	ldr	r3, [pc, #392]	@ (800c514 <keyScan+0x264>)
 800c38a:	691b      	ldr	r3, [r3, #16]
 800c38c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800c390:	d338      	bcc.n	800c404 <keyScan+0x154>
                    {
                        keyStruct[1].trigCnt = 0;
 800c392:	4b60      	ldr	r3, [pc, #384]	@ (800c514 <keyScan+0x264>)
 800c394:	2200      	movs	r2, #0
 800c396:	611a      	str	r2, [r3, #16]
                        keyStruct[1].trigType = TRIG_LONG;
 800c398:	4b5e      	ldr	r3, [pc, #376]	@ (800c514 <keyScan+0x264>)
 800c39a:	2202      	movs	r2, #2
 800c39c:	751a      	strb	r2, [r3, #20]
                        keyStruct[1].preKeyValue = TRIG_LONG;
 800c39e:	4b5d      	ldr	r3, [pc, #372]	@ (800c514 <keyScan+0x264>)
 800c3a0:	2202      	movs	r2, #2
 800c3a2:	755a      	strb	r2, [r3, #21]
 800c3a4:	e02e      	b.n	800c404 <keyScan+0x154>
                    }
                }
            }
        }
    }
    else if (keyStruct[1].keyType == CONTINUOUS)
 800c3a6:	4b5b      	ldr	r3, [pc, #364]	@ (800c514 <keyScan+0x264>)
 800c3a8:	7b1b      	ldrb	r3, [r3, #12]
 800c3aa:	2b02      	cmp	r3, #2
 800c3ac:	d12a      	bne.n	800c404 <keyScan+0x154>
    {
        if (keyStruct[1].preKeyValue == TRIG_SHORT) // short key
 800c3ae:	4b59      	ldr	r3, [pc, #356]	@ (800c514 <keyScan+0x264>)
 800c3b0:	7d5b      	ldrb	r3, [r3, #21]
 800c3b2:	2b01      	cmp	r3, #1
 800c3b4:	d112      	bne.n	800c3dc <keyScan+0x12c>
        {
            if (++keyStruct[1].trigCnt >= CONTINUOUS_TRIG_CNT)
 800c3b6:	4b57      	ldr	r3, [pc, #348]	@ (800c514 <keyScan+0x264>)
 800c3b8:	691b      	ldr	r3, [r3, #16]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	4a55      	ldr	r2, [pc, #340]	@ (800c514 <keyScan+0x264>)
 800c3be:	6113      	str	r3, [r2, #16]
 800c3c0:	4b54      	ldr	r3, [pc, #336]	@ (800c514 <keyScan+0x264>)
 800c3c2:	691b      	ldr	r3, [r3, #16]
 800c3c4:	2b63      	cmp	r3, #99	@ 0x63
 800c3c6:	d91d      	bls.n	800c404 <keyScan+0x154>
            {
                keyStruct[1].trigCnt = 0;
 800c3c8:	4b52      	ldr	r3, [pc, #328]	@ (800c514 <keyScan+0x264>)
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	611a      	str	r2, [r3, #16]
                keyStruct[1].trigType = TRIG_LONG; // long
 800c3ce:	4b51      	ldr	r3, [pc, #324]	@ (800c514 <keyScan+0x264>)
 800c3d0:	2202      	movs	r2, #2
 800c3d2:	751a      	strb	r2, [r3, #20]
                keyStruct[1].preKeyValue = TRIG_LONG;
 800c3d4:	4b4f      	ldr	r3, [pc, #316]	@ (800c514 <keyScan+0x264>)
 800c3d6:	2202      	movs	r2, #2
 800c3d8:	755a      	strb	r2, [r3, #21]
 800c3da:	e013      	b.n	800c404 <keyScan+0x154>
            }
        }
        else if (keyStruct[1].preKeyValue == TRIG_LONG) // long key
 800c3dc:	4b4d      	ldr	r3, [pc, #308]	@ (800c514 <keyScan+0x264>)
 800c3de:	7d5b      	ldrb	r3, [r3, #21]
 800c3e0:	2b02      	cmp	r3, #2
 800c3e2:	d10f      	bne.n	800c404 <keyScan+0x154>
        {
            if (++keyStruct[1].trigCnt >= CONTINUOUS_INTEVAL)
 800c3e4:	4b4b      	ldr	r3, [pc, #300]	@ (800c514 <keyScan+0x264>)
 800c3e6:	691b      	ldr	r3, [r3, #16]
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	4a4a      	ldr	r2, [pc, #296]	@ (800c514 <keyScan+0x264>)
 800c3ec:	6113      	str	r3, [r2, #16]
 800c3ee:	4b49      	ldr	r3, [pc, #292]	@ (800c514 <keyScan+0x264>)
 800c3f0:	691b      	ldr	r3, [r3, #16]
 800c3f2:	2b27      	cmp	r3, #39	@ 0x27
 800c3f4:	d906      	bls.n	800c404 <keyScan+0x154>
            {
                keyStruct[1].trigCnt = 0;
 800c3f6:	4b47      	ldr	r3, [pc, #284]	@ (800c514 <keyScan+0x264>)
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	611a      	str	r2, [r3, #16]
                keyStruct[1].trigType = keyStruct[1].preKeyValue;
 800c3fc:	4b45      	ldr	r3, [pc, #276]	@ (800c514 <keyScan+0x264>)
 800c3fe:	7d5a      	ldrb	r2, [r3, #21]
 800c400:	4b44      	ldr	r3, [pc, #272]	@ (800c514 <keyScan+0x264>)
 800c402:	751a      	strb	r2, [r3, #20]
            }
        }
    }

    if (keyStruct[2].preKeyValue == NO_TRIG)
 800c404:	4b43      	ldr	r3, [pc, #268]	@ (800c514 <keyScan+0x264>)
 800c406:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d131      	bne.n	800c472 <keyScan+0x1c2>
    {
        if (keyFlags == K(2))
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	2b02      	cmp	r3, #2
 800c412:	d163      	bne.n	800c4dc <keyScan+0x22c>
        {

            if (keyStruct[2].keyType == SHORT || keyStruct[2].keyType == CONTINUOUS)
 800c414:	4b3f      	ldr	r3, [pc, #252]	@ (800c514 <keyScan+0x264>)
 800c416:	7e1b      	ldrb	r3, [r3, #24]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d003      	beq.n	800c424 <keyScan+0x174>
 800c41c:	4b3d      	ldr	r3, [pc, #244]	@ (800c514 <keyScan+0x264>)
 800c41e:	7e1b      	ldrb	r3, [r3, #24]
 800c420:	2b02      	cmp	r3, #2
 800c422:	d108      	bne.n	800c436 <keyScan+0x186>
            {
                keyStruct[2].trigType = TRIG_SHORT;
 800c424:	4b3b      	ldr	r3, [pc, #236]	@ (800c514 <keyScan+0x264>)
 800c426:	2201      	movs	r2, #1
 800c428:	f883 2020 	strb.w	r2, [r3, #32]
                keyStruct[2].preKeyValue = TRIG_SHORT;
 800c42c:	4b39      	ldr	r3, [pc, #228]	@ (800c514 <keyScan+0x264>)
 800c42e:	2201      	movs	r2, #1
 800c430:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800c434:	e052      	b.n	800c4dc <keyScan+0x22c>
            }
            else if (keyStruct[2].keyType == LONG_WITH_SHORT || keyStruct[2].keyType == LONG)
 800c436:	4b37      	ldr	r3, [pc, #220]	@ (800c514 <keyScan+0x264>)
 800c438:	7e1b      	ldrb	r3, [r3, #24]
 800c43a:	2b01      	cmp	r3, #1
 800c43c:	d003      	beq.n	800c446 <keyScan+0x196>
 800c43e:	4b35      	ldr	r3, [pc, #212]	@ (800c514 <keyScan+0x264>)
 800c440:	7e1b      	ldrb	r3, [r3, #24]
 800c442:	2b03      	cmp	r3, #3
 800c444:	d14a      	bne.n	800c4dc <keyScan+0x22c>
            {
                if (++keyStruct[2].trigCnt >= KEY2_LONG_CNT)
 800c446:	4b33      	ldr	r3, [pc, #204]	@ (800c514 <keyScan+0x264>)
 800c448:	69db      	ldr	r3, [r3, #28]
 800c44a:	3301      	adds	r3, #1
 800c44c:	4a31      	ldr	r2, [pc, #196]	@ (800c514 <keyScan+0x264>)
 800c44e:	61d3      	str	r3, [r2, #28]
 800c450:	4b30      	ldr	r3, [pc, #192]	@ (800c514 <keyScan+0x264>)
 800c452:	69db      	ldr	r3, [r3, #28]
 800c454:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800c458:	d340      	bcc.n	800c4dc <keyScan+0x22c>
                {
                    keyStruct[2].trigCnt = 0;
 800c45a:	4b2e      	ldr	r3, [pc, #184]	@ (800c514 <keyScan+0x264>)
 800c45c:	2200      	movs	r2, #0
 800c45e:	61da      	str	r2, [r3, #28]
                    keyStruct[2].trigType = TRIG_LONG;
 800c460:	4b2c      	ldr	r3, [pc, #176]	@ (800c514 <keyScan+0x264>)
 800c462:	2202      	movs	r2, #2
 800c464:	f883 2020 	strb.w	r2, [r3, #32]
                    keyStruct[2].preKeyValue = TRIG_LONG;
 800c468:	4b2a      	ldr	r3, [pc, #168]	@ (800c514 <keyScan+0x264>)
 800c46a:	2202      	movs	r2, #2
 800c46c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800c470:	e034      	b.n	800c4dc <keyScan+0x22c>
                }
            }
        }
    }
    else if (keyStruct[2].keyType == CONTINUOUS)
 800c472:	4b28      	ldr	r3, [pc, #160]	@ (800c514 <keyScan+0x264>)
 800c474:	7e1b      	ldrb	r3, [r3, #24]
 800c476:	2b02      	cmp	r3, #2
 800c478:	d130      	bne.n	800c4dc <keyScan+0x22c>
    {
        if (keyStruct[2].preKeyValue == TRIG_SHORT) // short key
 800c47a:	4b26      	ldr	r3, [pc, #152]	@ (800c514 <keyScan+0x264>)
 800c47c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c480:	2b01      	cmp	r3, #1
 800c482:	d114      	bne.n	800c4ae <keyScan+0x1fe>
        {
            if (++keyStruct[2].trigCnt >= CONTINUOUS_TRIG_CNT)
 800c484:	4b23      	ldr	r3, [pc, #140]	@ (800c514 <keyScan+0x264>)
 800c486:	69db      	ldr	r3, [r3, #28]
 800c488:	3301      	adds	r3, #1
 800c48a:	4a22      	ldr	r2, [pc, #136]	@ (800c514 <keyScan+0x264>)
 800c48c:	61d3      	str	r3, [r2, #28]
 800c48e:	4b21      	ldr	r3, [pc, #132]	@ (800c514 <keyScan+0x264>)
 800c490:	69db      	ldr	r3, [r3, #28]
 800c492:	2b63      	cmp	r3, #99	@ 0x63
 800c494:	d922      	bls.n	800c4dc <keyScan+0x22c>
            {
                keyStruct[2].trigCnt = 0;
 800c496:	4b1f      	ldr	r3, [pc, #124]	@ (800c514 <keyScan+0x264>)
 800c498:	2200      	movs	r2, #0
 800c49a:	61da      	str	r2, [r3, #28]
                keyStruct[2].trigType = TRIG_LONG; // long
 800c49c:	4b1d      	ldr	r3, [pc, #116]	@ (800c514 <keyScan+0x264>)
 800c49e:	2202      	movs	r2, #2
 800c4a0:	f883 2020 	strb.w	r2, [r3, #32]
                keyStruct[2].preKeyValue = TRIG_LONG;
 800c4a4:	4b1b      	ldr	r3, [pc, #108]	@ (800c514 <keyScan+0x264>)
 800c4a6:	2202      	movs	r2, #2
 800c4a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800c4ac:	e016      	b.n	800c4dc <keyScan+0x22c>
            }
        }
        else if (keyStruct[2].preKeyValue == TRIG_LONG) // long key
 800c4ae:	4b19      	ldr	r3, [pc, #100]	@ (800c514 <keyScan+0x264>)
 800c4b0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c4b4:	2b02      	cmp	r3, #2
 800c4b6:	d111      	bne.n	800c4dc <keyScan+0x22c>
        {
            if (++keyStruct[2].trigCnt >= CONTINUOUS_INTEVAL)
 800c4b8:	4b16      	ldr	r3, [pc, #88]	@ (800c514 <keyScan+0x264>)
 800c4ba:	69db      	ldr	r3, [r3, #28]
 800c4bc:	3301      	adds	r3, #1
 800c4be:	4a15      	ldr	r2, [pc, #84]	@ (800c514 <keyScan+0x264>)
 800c4c0:	61d3      	str	r3, [r2, #28]
 800c4c2:	4b14      	ldr	r3, [pc, #80]	@ (800c514 <keyScan+0x264>)
 800c4c4:	69db      	ldr	r3, [r3, #28]
 800c4c6:	2b27      	cmp	r3, #39	@ 0x27
 800c4c8:	d908      	bls.n	800c4dc <keyScan+0x22c>
            {
                keyStruct[2].trigCnt = 0;
 800c4ca:	4b12      	ldr	r3, [pc, #72]	@ (800c514 <keyScan+0x264>)
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	61da      	str	r2, [r3, #28]
                keyStruct[2].trigType = keyStruct[2].preKeyValue;
 800c4d0:	4b10      	ldr	r3, [pc, #64]	@ (800c514 <keyScan+0x264>)
 800c4d2:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800c4d6:	4b0f      	ldr	r3, [pc, #60]	@ (800c514 <keyScan+0x264>)
 800c4d8:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }
    }

    if (keyStruct[3].preKeyValue == NO_TRIG)
 800c4dc:	4b0d      	ldr	r3, [pc, #52]	@ (800c514 <keyScan+0x264>)
 800c4de:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d137      	bne.n	800c556 <keyScan+0x2a6>
    {
        if (keyFlags == K(3))
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	2b04      	cmp	r3, #4
 800c4ea:	d16a      	bne.n	800c5c2 <keyScan+0x312>
        {
            if (keyStruct[3].keyType == SHORT || keyStruct[3].keyType == CONTINUOUS)
 800c4ec:	4b09      	ldr	r3, [pc, #36]	@ (800c514 <keyScan+0x264>)
 800c4ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d004      	beq.n	800c500 <keyScan+0x250>
 800c4f6:	4b07      	ldr	r3, [pc, #28]	@ (800c514 <keyScan+0x264>)
 800c4f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c4fc:	2b02      	cmp	r3, #2
 800c4fe:	d10b      	bne.n	800c518 <keyScan+0x268>
            {
                keyStruct[3].trigType = TRIG_SHORT;
 800c500:	4b04      	ldr	r3, [pc, #16]	@ (800c514 <keyScan+0x264>)
 800c502:	2201      	movs	r2, #1
 800c504:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                keyStruct[3].preKeyValue = TRIG_SHORT;
 800c508:	4b02      	ldr	r3, [pc, #8]	@ (800c514 <keyScan+0x264>)
 800c50a:	2201      	movs	r2, #1
 800c50c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
                keyStruct[3].trigCnt = 0;
                keyStruct[3].trigType = keyStruct[3].preKeyValue;
            }
        }
    }
}
 800c510:	e057      	b.n	800c5c2 <keyScan+0x312>
 800c512:	bf00      	nop
 800c514:	200009c4 	.word	0x200009c4
            else if (keyStruct[3].keyType == LONG_WITH_SHORT || keyStruct[3].keyType == LONG)
 800c518:	4b2c      	ldr	r3, [pc, #176]	@ (800c5cc <keyScan+0x31c>)
 800c51a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c51e:	2b01      	cmp	r3, #1
 800c520:	d004      	beq.n	800c52c <keyScan+0x27c>
 800c522:	4b2a      	ldr	r3, [pc, #168]	@ (800c5cc <keyScan+0x31c>)
 800c524:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c528:	2b03      	cmp	r3, #3
 800c52a:	d14a      	bne.n	800c5c2 <keyScan+0x312>
                if (++keyStruct[3].trigCnt >= KEY3_LONG_CNT)
 800c52c:	4b27      	ldr	r3, [pc, #156]	@ (800c5cc <keyScan+0x31c>)
 800c52e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c530:	3301      	adds	r3, #1
 800c532:	4a26      	ldr	r2, [pc, #152]	@ (800c5cc <keyScan+0x31c>)
 800c534:	6293      	str	r3, [r2, #40]	@ 0x28
 800c536:	4b25      	ldr	r3, [pc, #148]	@ (800c5cc <keyScan+0x31c>)
 800c538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d041      	beq.n	800c5c2 <keyScan+0x312>
                    keyStruct[3].trigCnt = 0;
 800c53e:	4b23      	ldr	r3, [pc, #140]	@ (800c5cc <keyScan+0x31c>)
 800c540:	2200      	movs	r2, #0
 800c542:	629a      	str	r2, [r3, #40]	@ 0x28
                    keyStruct[3].trigType = TRIG_LONG;
 800c544:	4b21      	ldr	r3, [pc, #132]	@ (800c5cc <keyScan+0x31c>)
 800c546:	2202      	movs	r2, #2
 800c548:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                    keyStruct[3].preKeyValue = TRIG_LONG;
 800c54c:	4b1f      	ldr	r3, [pc, #124]	@ (800c5cc <keyScan+0x31c>)
 800c54e:	2202      	movs	r2, #2
 800c550:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800c554:	e035      	b.n	800c5c2 <keyScan+0x312>
    else if (keyStruct[3].keyType == CONTINUOUS)
 800c556:	4b1d      	ldr	r3, [pc, #116]	@ (800c5cc <keyScan+0x31c>)
 800c558:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c55c:	2b02      	cmp	r3, #2
 800c55e:	d130      	bne.n	800c5c2 <keyScan+0x312>
        if (keyStruct[3].preKeyValue == TRIG_SHORT) // short key
 800c560:	4b1a      	ldr	r3, [pc, #104]	@ (800c5cc <keyScan+0x31c>)
 800c562:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c566:	2b01      	cmp	r3, #1
 800c568:	d114      	bne.n	800c594 <keyScan+0x2e4>
            if (++keyStruct[3].trigCnt >= CONTINUOUS_TRIG_CNT)
 800c56a:	4b18      	ldr	r3, [pc, #96]	@ (800c5cc <keyScan+0x31c>)
 800c56c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c56e:	3301      	adds	r3, #1
 800c570:	4a16      	ldr	r2, [pc, #88]	@ (800c5cc <keyScan+0x31c>)
 800c572:	6293      	str	r3, [r2, #40]	@ 0x28
 800c574:	4b15      	ldr	r3, [pc, #84]	@ (800c5cc <keyScan+0x31c>)
 800c576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c578:	2b63      	cmp	r3, #99	@ 0x63
 800c57a:	d922      	bls.n	800c5c2 <keyScan+0x312>
                keyStruct[3].trigCnt = 0;
 800c57c:	4b13      	ldr	r3, [pc, #76]	@ (800c5cc <keyScan+0x31c>)
 800c57e:	2200      	movs	r2, #0
 800c580:	629a      	str	r2, [r3, #40]	@ 0x28
                keyStruct[3].trigType = TRIG_LONG; // long
 800c582:	4b12      	ldr	r3, [pc, #72]	@ (800c5cc <keyScan+0x31c>)
 800c584:	2202      	movs	r2, #2
 800c586:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                keyStruct[3].preKeyValue = TRIG_LONG;
 800c58a:	4b10      	ldr	r3, [pc, #64]	@ (800c5cc <keyScan+0x31c>)
 800c58c:	2202      	movs	r2, #2
 800c58e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800c592:	e016      	b.n	800c5c2 <keyScan+0x312>
        else if (keyStruct[3].preKeyValue == TRIG_LONG) // long key
 800c594:	4b0d      	ldr	r3, [pc, #52]	@ (800c5cc <keyScan+0x31c>)
 800c596:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c59a:	2b02      	cmp	r3, #2
 800c59c:	d111      	bne.n	800c5c2 <keyScan+0x312>
            if (++keyStruct[3].trigCnt >= CONTINUOUS_INTEVAL)
 800c59e:	4b0b      	ldr	r3, [pc, #44]	@ (800c5cc <keyScan+0x31c>)
 800c5a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	4a09      	ldr	r2, [pc, #36]	@ (800c5cc <keyScan+0x31c>)
 800c5a6:	6293      	str	r3, [r2, #40]	@ 0x28
 800c5a8:	4b08      	ldr	r3, [pc, #32]	@ (800c5cc <keyScan+0x31c>)
 800c5aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5ac:	2b27      	cmp	r3, #39	@ 0x27
 800c5ae:	d908      	bls.n	800c5c2 <keyScan+0x312>
                keyStruct[3].trigCnt = 0;
 800c5b0:	4b06      	ldr	r3, [pc, #24]	@ (800c5cc <keyScan+0x31c>)
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	629a      	str	r2, [r3, #40]	@ 0x28
                keyStruct[3].trigType = keyStruct[3].preKeyValue;
 800c5b6:	4b05      	ldr	r3, [pc, #20]	@ (800c5cc <keyScan+0x31c>)
 800c5b8:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800c5bc:	4b03      	ldr	r3, [pc, #12]	@ (800c5cc <keyScan+0x31c>)
 800c5be:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 800c5c2:	bf00      	nop
 800c5c4:	3708      	adds	r7, #8
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	200009c4 	.word	0x200009c4

0800c5d0 <getKeyState>:

/*
将物理按键转化为逻辑按键
 */
void getKeyState(KeyState *keyState)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b085      	sub	sp, #20
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
    uchar i;

    if (keyStruct[1].trigType == TRIG_SHORT)
 800c5d8:	4b1b      	ldr	r3, [pc, #108]	@ (800c648 <getKeyState+0x78>)
 800c5da:	7d1b      	ldrb	r3, [r3, #20]
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d103      	bne.n	800c5e8 <getKeyState+0x18>
        *keyState = USER1_SHORT;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	701a      	strb	r2, [r3, #0]
 800c5e6:	e014      	b.n	800c612 <getKeyState+0x42>
    else if (keyStruct[2].trigType == TRIG_SHORT)
 800c5e8:	4b17      	ldr	r3, [pc, #92]	@ (800c648 <getKeyState+0x78>)
 800c5ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c5ee:	2b01      	cmp	r3, #1
 800c5f0:	d103      	bne.n	800c5fa <getKeyState+0x2a>
        *keyState = USER2_SHORT;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2202      	movs	r2, #2
 800c5f6:	701a      	strb	r2, [r3, #0]
 800c5f8:	e00b      	b.n	800c612 <getKeyState+0x42>
    else if (keyStruct[3].trigType == TRIG_SHORT)
 800c5fa:	4b13      	ldr	r3, [pc, #76]	@ (800c648 <getKeyState+0x78>)
 800c5fc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c600:	2b01      	cmp	r3, #1
 800c602:	d103      	bne.n	800c60c <getKeyState+0x3c>
        *keyState = USER3_SHORT;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2203      	movs	r2, #3
 800c608:	701a      	strb	r2, [r3, #0]
 800c60a:	e002      	b.n	800c612 <getKeyState+0x42>
    else
        *keyState = NONE_KEY;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2200      	movs	r2, #0
 800c610:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < KEY_NUM; i++)
 800c612:	2300      	movs	r3, #0
 800c614:	73fb      	strb	r3, [r7, #15]
 800c616:	e00c      	b.n	800c632 <getKeyState+0x62>
    {
        keyStruct[i].trigType = NO_TRIG;
 800c618:	7bfa      	ldrb	r2, [r7, #15]
 800c61a:	490b      	ldr	r1, [pc, #44]	@ (800c648 <getKeyState+0x78>)
 800c61c:	4613      	mov	r3, r2
 800c61e:	005b      	lsls	r3, r3, #1
 800c620:	4413      	add	r3, r2
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	440b      	add	r3, r1
 800c626:	3308      	adds	r3, #8
 800c628:	2200      	movs	r2, #0
 800c62a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < KEY_NUM; i++)
 800c62c:	7bfb      	ldrb	r3, [r7, #15]
 800c62e:	3301      	adds	r3, #1
 800c630:	73fb      	strb	r3, [r7, #15]
 800c632:	7bfb      	ldrb	r3, [r7, #15]
 800c634:	2b01      	cmp	r3, #1
 800c636:	d9ef      	bls.n	800c618 <getKeyState+0x48>
    }
}
 800c638:	bf00      	nop
 800c63a:	bf00      	nop
 800c63c:	3714      	adds	r7, #20
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr
 800c646:	bf00      	nop
 800c648:	200009c4 	.word	0x200009c4

0800c64c <LED_drive>:
#include "led.h"

bool ledOn;

void LED_drive()
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	af00      	add	r7, sp, #0
    if (ledOn)
 800c650:	4b08      	ldr	r3, [pc, #32]	@ (800c674 <LED_drive+0x28>)
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d005      	beq.n	800c664 <LED_drive+0x18>
        LED_ON;
 800c658:	2200      	movs	r2, #0
 800c65a:	2101      	movs	r1, #1
 800c65c:	4806      	ldr	r0, [pc, #24]	@ (800c678 <LED_drive+0x2c>)
 800c65e:	f7f9 fb63 	bl	8005d28 <HAL_GPIO_WritePin>
    else
        LED_OFF;
}
 800c662:	e004      	b.n	800c66e <LED_drive+0x22>
        LED_OFF;
 800c664:	2201      	movs	r2, #1
 800c666:	2101      	movs	r1, #1
 800c668:	4803      	ldr	r0, [pc, #12]	@ (800c678 <LED_drive+0x2c>)
 800c66a:	f7f9 fb5d 	bl	8005d28 <HAL_GPIO_WritePin>
}
 800c66e:	bf00      	nop
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop
 800c674:	200009e8 	.word	0x200009e8
 800c678:	48000400 	.word	0x48000400

0800c67c <inv_sqrt>:

// 快速平方根倒数，计算 1/Sqrt(x)
// X:数字还需要计算
// 调用imu ahrs update()函数
float inv_sqrt(float x)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b087      	sub	sp, #28
 800c680:	af00      	add	r7, sp, #0
 800c682:	ed87 0a01 	vstr	s0, [r7, #4]
    float halfx = 0.5f * x;
 800c686:	edd7 7a01 	vldr	s15, [r7, #4]
 800c68a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c68e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c692:	edc7 7a05 	vstr	s15, [r7, #20]
    float y = x;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	613b      	str	r3, [r7, #16]
    long i = *(long *)&y;
 800c69a:	f107 0310 	add.w	r3, r7, #16
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	60fb      	str	r3, [r7, #12]

    i = 0x5f3759df - (i >> 1);
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	105a      	asrs	r2, r3, #1
 800c6a6:	4b12      	ldr	r3, [pc, #72]	@ (800c6f0 <inv_sqrt+0x74>)
 800c6a8:	1a9b      	subs	r3, r3, r2
 800c6aa:	60fb      	str	r3, [r7, #12]
    y = *(float *)&i;
 800c6ac:	f107 030c 	add.w	r3, r7, #12
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	613b      	str	r3, [r7, #16]
    y = y * (1.5f - (halfx * y * y));
 800c6b4:	ed97 7a04 	vldr	s14, [r7, #16]
 800c6b8:	edd7 7a05 	vldr	s15, [r7, #20]
 800c6bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6c0:	edd7 7a04 	vldr	s15, [r7, #16]
 800c6c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6c8:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800c6cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c6d0:	edd7 7a04 	vldr	s15, [r7, #16]
 800c6d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6d8:	edc7 7a04 	vstr	s15, [r7, #16]

    return y;
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	ee07 3a90 	vmov	s15, r3
}
 800c6e2:	eeb0 0a67 	vmov.f32	s0, s15
 800c6e6:	371c      	adds	r7, #28
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ee:	4770      	bx	lr
 800c6f0:	5f3759df 	.word	0x5f3759df

0800c6f4 <mpu_write_byte>:
// MPU6500单次写命令
uint8_t mpu_write_byte(uint8_t const reg, uint8_t const data)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af02      	add	r7, sp, #8
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	460a      	mov	r2, r1
 800c6fe:	71fb      	strb	r3, [r7, #7]
 800c700:	4613      	mov	r3, r2
 800c702:	71bb      	strb	r3, [r7, #6]
    MPU_NSS_LOW;                                         // 开始通讯
 800c704:	2200      	movs	r2, #0
 800c706:	2110      	movs	r1, #16
 800c708:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c70c:	f7f9 fb0c 	bl	8005d28 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;                                     // 使第一位为0（写模式）
 800c710:	79fb      	ldrb	r3, [r7, #7]
 800c712:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c716:	b2da      	uxtb	r2, r3
 800c718:	4b0f      	ldr	r3, [pc, #60]	@ (800c758 <mpu_write_byte+0x64>)
 800c71a:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55); // 写入命令地址
 800c71c:	2337      	movs	r3, #55	@ 0x37
 800c71e:	9300      	str	r3, [sp, #0]
 800c720:	2301      	movs	r3, #1
 800c722:	4a0e      	ldr	r2, [pc, #56]	@ (800c75c <mpu_write_byte+0x68>)
 800c724:	490c      	ldr	r1, [pc, #48]	@ (800c758 <mpu_write_byte+0x64>)
 800c726:	480e      	ldr	r0, [pc, #56]	@ (800c760 <mpu_write_byte+0x6c>)
 800c728:	f7fa fb93 	bl	8006e52 <HAL_SPI_TransmitReceive>
    tx = data;
 800c72c:	4a0a      	ldr	r2, [pc, #40]	@ (800c758 <mpu_write_byte+0x64>)
 800c72e:	79bb      	ldrb	r3, [r7, #6]
 800c730:	7013      	strb	r3, [r2, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55); // 写入数据
 800c732:	2337      	movs	r3, #55	@ 0x37
 800c734:	9300      	str	r3, [sp, #0]
 800c736:	2301      	movs	r3, #1
 800c738:	4a08      	ldr	r2, [pc, #32]	@ (800c75c <mpu_write_byte+0x68>)
 800c73a:	4907      	ldr	r1, [pc, #28]	@ (800c758 <mpu_write_byte+0x64>)
 800c73c:	4808      	ldr	r0, [pc, #32]	@ (800c760 <mpu_write_byte+0x6c>)
 800c73e:	f7fa fb88 	bl	8006e52 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;                                        // 结束通讯
 800c742:	2201      	movs	r2, #1
 800c744:	2110      	movs	r1, #16
 800c746:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c74a:	f7f9 faed 	bl	8005d28 <HAL_GPIO_WritePin>
    return 0;
 800c74e:	2300      	movs	r3, #0
}
 800c750:	4618      	mov	r0, r3
 800c752:	3708      	adds	r7, #8
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}
 800c758:	200009e9 	.word	0x200009e9
 800c75c:	200009ea 	.word	0x200009ea
 800c760:	2000038c 	.word	0x2000038c

0800c764 <mpu_read_byte>:
// MPU6500单次读取单字节数据
uint8_t mpu_read_byte(uint8_t const reg)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af02      	add	r7, sp, #8
 800c76a:	4603      	mov	r3, r0
 800c76c:	71fb      	strb	r3, [r7, #7]
    MPU_NSS_LOW;
 800c76e:	2200      	movs	r2, #0
 800c770:	2110      	movs	r1, #16
 800c772:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c776:	f7f9 fad7 	bl	8005d28 <HAL_GPIO_WritePin>
    tx = reg | 0x80;                                     // 使地址第一位为1（读模式）
 800c77a:	79fb      	ldrb	r3, [r7, #7]
 800c77c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c780:	b2da      	uxtb	r2, r3
 800c782:	4b0f      	ldr	r3, [pc, #60]	@ (800c7c0 <mpu_read_byte+0x5c>)
 800c784:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55); // 写入需要读取的地址
 800c786:	2337      	movs	r3, #55	@ 0x37
 800c788:	9300      	str	r3, [sp, #0]
 800c78a:	2301      	movs	r3, #1
 800c78c:	4a0d      	ldr	r2, [pc, #52]	@ (800c7c4 <mpu_read_byte+0x60>)
 800c78e:	490c      	ldr	r1, [pc, #48]	@ (800c7c0 <mpu_read_byte+0x5c>)
 800c790:	480d      	ldr	r0, [pc, #52]	@ (800c7c8 <mpu_read_byte+0x64>)
 800c792:	f7fa fb5e 	bl	8006e52 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55); // 为读取的数据提供存储空间
 800c796:	2337      	movs	r3, #55	@ 0x37
 800c798:	9300      	str	r3, [sp, #0]
 800c79a:	2301      	movs	r3, #1
 800c79c:	4a09      	ldr	r2, [pc, #36]	@ (800c7c4 <mpu_read_byte+0x60>)
 800c79e:	4908      	ldr	r1, [pc, #32]	@ (800c7c0 <mpu_read_byte+0x5c>)
 800c7a0:	4809      	ldr	r0, [pc, #36]	@ (800c7c8 <mpu_read_byte+0x64>)
 800c7a2:	f7fa fb56 	bl	8006e52 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	2110      	movs	r1, #16
 800c7aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c7ae:	f7f9 fabb 	bl	8005d28 <HAL_GPIO_WritePin>
    return rx;
 800c7b2:	4b04      	ldr	r3, [pc, #16]	@ (800c7c4 <mpu_read_byte+0x60>)
 800c7b4:	781b      	ldrb	r3, [r3, #0]
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3708      	adds	r7, #8
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	200009e9 	.word	0x200009e9
 800c7c4:	200009ea 	.word	0x200009ea
 800c7c8:	2000038c 	.word	0x2000038c

0800c7cc <mpu_read_bytes>:

// MPU6500单次读取多字节数据
uint8_t mpu_read_bytes(uint8_t const regAddr, uint8_t *pData, uint8_t len)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af02      	add	r7, sp, #8
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	6039      	str	r1, [r7, #0]
 800c7d6:	71fb      	strb	r3, [r7, #7]
 800c7d8:	4613      	mov	r3, r2
 800c7da:	71bb      	strb	r3, [r7, #6]
    MPU_NSS_LOW;
 800c7dc:	2200      	movs	r2, #0
 800c7de:	2110      	movs	r1, #16
 800c7e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c7e4:	f7f9 faa0 	bl	8005d28 <HAL_GPIO_WritePin>
    tx = regAddr | 0x80;
 800c7e8:	79fb      	ldrb	r3, [r7, #7]
 800c7ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c7ee:	b2da      	uxtb	r2, r3
 800c7f0:	4b10      	ldr	r3, [pc, #64]	@ (800c834 <mpu_read_bytes+0x68>)
 800c7f2:	701a      	strb	r2, [r3, #0]
    tx_buff[0] = tx;
 800c7f4:	4b0f      	ldr	r3, [pc, #60]	@ (800c834 <mpu_read_bytes+0x68>)
 800c7f6:	781a      	ldrb	r2, [r3, #0]
 800c7f8:	4b0f      	ldr	r3, [pc, #60]	@ (800c838 <mpu_read_bytes+0x6c>)
 800c7fa:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800c7fc:	2337      	movs	r3, #55	@ 0x37
 800c7fe:	9300      	str	r3, [sp, #0]
 800c800:	2301      	movs	r3, #1
 800c802:	4a0e      	ldr	r2, [pc, #56]	@ (800c83c <mpu_read_bytes+0x70>)
 800c804:	490b      	ldr	r1, [pc, #44]	@ (800c834 <mpu_read_bytes+0x68>)
 800c806:	480e      	ldr	r0, [pc, #56]	@ (800c840 <mpu_read_bytes+0x74>)
 800c808:	f7fa fb23 	bl	8006e52 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, tx_buff, pData, len, 55);
 800c80c:	79bb      	ldrb	r3, [r7, #6]
 800c80e:	b29b      	uxth	r3, r3
 800c810:	2237      	movs	r2, #55	@ 0x37
 800c812:	9200      	str	r2, [sp, #0]
 800c814:	683a      	ldr	r2, [r7, #0]
 800c816:	4908      	ldr	r1, [pc, #32]	@ (800c838 <mpu_read_bytes+0x6c>)
 800c818:	4809      	ldr	r0, [pc, #36]	@ (800c840 <mpu_read_bytes+0x74>)
 800c81a:	f7fa fb1a 	bl	8006e52 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 800c81e:	2201      	movs	r2, #1
 800c820:	2110      	movs	r1, #16
 800c822:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c826:	f7f9 fa7f 	bl	8005d28 <HAL_GPIO_WritePin>
    return 0;
 800c82a:	2300      	movs	r3, #0
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3708      	adds	r7, #8
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}
 800c834:	200009e9 	.word	0x200009e9
 800c838:	20000094 	.word	0x20000094
 800c83c:	200009ea 	.word	0x200009ea
 800c840:	2000038c 	.word	0x2000038c

0800c844 <mpu_set_gyro_fsr>:

// 设置imu 6500陀螺仪测量范围
uint8_t mpu_set_gyro_fsr(uint8_t fsr)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
 800c84a:	4603      	mov	r3, r0
 800c84c:	71fb      	strb	r3, [r7, #7]
    return mpu_write_byte(MPU6500_GYRO_CONFIG, fsr << 3);
 800c84e:	79fb      	ldrb	r3, [r7, #7]
 800c850:	00db      	lsls	r3, r3, #3
 800c852:	b2db      	uxtb	r3, r3
 800c854:	4619      	mov	r1, r3
 800c856:	201b      	movs	r0, #27
 800c858:	f7ff ff4c 	bl	800c6f4 <mpu_write_byte>
 800c85c:	4603      	mov	r3, r0
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3708      	adds	r7, #8
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}

0800c866 <mpu_set_accel_fsr>:
// 设置imu 6050/6500加速测量范围
uint8_t mpu_set_accel_fsr(uint8_t fsr)
{
 800c866:	b580      	push	{r7, lr}
 800c868:	b082      	sub	sp, #8
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	4603      	mov	r3, r0
 800c86e:	71fb      	strb	r3, [r7, #7]
    return mpu_write_byte(MPU6500_ACCEL_CONFIG, fsr << 3);
 800c870:	79fb      	ldrb	r3, [r7, #7]
 800c872:	00db      	lsls	r3, r3, #3
 800c874:	b2db      	uxtb	r3, r3
 800c876:	4619      	mov	r1, r3
 800c878:	201c      	movs	r0, #28
 800c87a:	f7ff ff3b 	bl	800c6f4 <mpu_write_byte>
 800c87e:	4603      	mov	r3, r0
}
 800c880:	4618      	mov	r0, r3
 800c882:	3708      	adds	r7, #8
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}

0800c888 <mpu_get_data>:
// 获取IMU数据
void mpu_get_data()
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	af00      	add	r7, sp, #0
    mpu_read_bytes(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 800c88c:	220e      	movs	r2, #14
 800c88e:	495c      	ldr	r1, [pc, #368]	@ (800ca00 <mpu_get_data+0x178>)
 800c890:	203b      	movs	r0, #59	@ 0x3b
 800c892:	f7ff ff9b 	bl	800c7cc <mpu_read_bytes>

    mpu_data.ax = mpu_buff[0] << 8 | mpu_buff[1];
 800c896:	4b5a      	ldr	r3, [pc, #360]	@ (800ca00 <mpu_get_data+0x178>)
 800c898:	781b      	ldrb	r3, [r3, #0]
 800c89a:	021b      	lsls	r3, r3, #8
 800c89c:	b21a      	sxth	r2, r3
 800c89e:	4b58      	ldr	r3, [pc, #352]	@ (800ca00 <mpu_get_data+0x178>)
 800c8a0:	785b      	ldrb	r3, [r3, #1]
 800c8a2:	b21b      	sxth	r3, r3
 800c8a4:	4313      	orrs	r3, r2
 800c8a6:	b21a      	sxth	r2, r3
 800c8a8:	4b56      	ldr	r3, [pc, #344]	@ (800ca04 <mpu_get_data+0x17c>)
 800c8aa:	801a      	strh	r2, [r3, #0]
    mpu_data.ay = mpu_buff[2] << 8 | mpu_buff[3];
 800c8ac:	4b54      	ldr	r3, [pc, #336]	@ (800ca00 <mpu_get_data+0x178>)
 800c8ae:	789b      	ldrb	r3, [r3, #2]
 800c8b0:	021b      	lsls	r3, r3, #8
 800c8b2:	b21a      	sxth	r2, r3
 800c8b4:	4b52      	ldr	r3, [pc, #328]	@ (800ca00 <mpu_get_data+0x178>)
 800c8b6:	78db      	ldrb	r3, [r3, #3]
 800c8b8:	b21b      	sxth	r3, r3
 800c8ba:	4313      	orrs	r3, r2
 800c8bc:	b21a      	sxth	r2, r3
 800c8be:	4b51      	ldr	r3, [pc, #324]	@ (800ca04 <mpu_get_data+0x17c>)
 800c8c0:	805a      	strh	r2, [r3, #2]
    mpu_data.az = mpu_buff[4] << 8 | mpu_buff[5];
 800c8c2:	4b4f      	ldr	r3, [pc, #316]	@ (800ca00 <mpu_get_data+0x178>)
 800c8c4:	791b      	ldrb	r3, [r3, #4]
 800c8c6:	021b      	lsls	r3, r3, #8
 800c8c8:	b21a      	sxth	r2, r3
 800c8ca:	4b4d      	ldr	r3, [pc, #308]	@ (800ca00 <mpu_get_data+0x178>)
 800c8cc:	795b      	ldrb	r3, [r3, #5]
 800c8ce:	b21b      	sxth	r3, r3
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	b21a      	sxth	r2, r3
 800c8d4:	4b4b      	ldr	r3, [pc, #300]	@ (800ca04 <mpu_get_data+0x17c>)
 800c8d6:	809a      	strh	r2, [r3, #4]
    mpu_data.temp = mpu_buff[6] << 8 | mpu_buff[7];
 800c8d8:	4b49      	ldr	r3, [pc, #292]	@ (800ca00 <mpu_get_data+0x178>)
 800c8da:	799b      	ldrb	r3, [r3, #6]
 800c8dc:	021b      	lsls	r3, r3, #8
 800c8de:	b21a      	sxth	r2, r3
 800c8e0:	4b47      	ldr	r3, [pc, #284]	@ (800ca00 <mpu_get_data+0x178>)
 800c8e2:	79db      	ldrb	r3, [r3, #7]
 800c8e4:	b21b      	sxth	r3, r3
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	b21a      	sxth	r2, r3
 800c8ea:	4b46      	ldr	r3, [pc, #280]	@ (800ca04 <mpu_get_data+0x17c>)
 800c8ec:	819a      	strh	r2, [r3, #12]

    mpu_data.gx = ((mpu_buff[8] << 8 | mpu_buff[9]) - mpu_data.gx_offset);
 800c8ee:	4b44      	ldr	r3, [pc, #272]	@ (800ca00 <mpu_get_data+0x178>)
 800c8f0:	7a1b      	ldrb	r3, [r3, #8]
 800c8f2:	021b      	lsls	r3, r3, #8
 800c8f4:	b21a      	sxth	r2, r3
 800c8f6:	4b42      	ldr	r3, [pc, #264]	@ (800ca00 <mpu_get_data+0x178>)
 800c8f8:	7a5b      	ldrb	r3, [r3, #9]
 800c8fa:	b21b      	sxth	r3, r3
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	b21b      	sxth	r3, r3
 800c900:	b29a      	uxth	r2, r3
 800c902:	4b40      	ldr	r3, [pc, #256]	@ (800ca04 <mpu_get_data+0x17c>)
 800c904:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800c908:	b29b      	uxth	r3, r3
 800c90a:	1ad3      	subs	r3, r2, r3
 800c90c:	b29b      	uxth	r3, r3
 800c90e:	b21a      	sxth	r2, r3
 800c910:	4b3c      	ldr	r3, [pc, #240]	@ (800ca04 <mpu_get_data+0x17c>)
 800c912:	81da      	strh	r2, [r3, #14]
    mpu_data.gy = ((mpu_buff[10] << 8 | mpu_buff[11]) - mpu_data.gy_offset);
 800c914:	4b3a      	ldr	r3, [pc, #232]	@ (800ca00 <mpu_get_data+0x178>)
 800c916:	7a9b      	ldrb	r3, [r3, #10]
 800c918:	021b      	lsls	r3, r3, #8
 800c91a:	b21a      	sxth	r2, r3
 800c91c:	4b38      	ldr	r3, [pc, #224]	@ (800ca00 <mpu_get_data+0x178>)
 800c91e:	7adb      	ldrb	r3, [r3, #11]
 800c920:	b21b      	sxth	r3, r3
 800c922:	4313      	orrs	r3, r2
 800c924:	b21b      	sxth	r3, r3
 800c926:	b29a      	uxth	r2, r3
 800c928:	4b36      	ldr	r3, [pc, #216]	@ (800ca04 <mpu_get_data+0x17c>)
 800c92a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800c92e:	b29b      	uxth	r3, r3
 800c930:	1ad3      	subs	r3, r2, r3
 800c932:	b29b      	uxth	r3, r3
 800c934:	b21a      	sxth	r2, r3
 800c936:	4b33      	ldr	r3, [pc, #204]	@ (800ca04 <mpu_get_data+0x17c>)
 800c938:	821a      	strh	r2, [r3, #16]
    mpu_data.gz = ((mpu_buff[12] << 8 | mpu_buff[13]) - mpu_data.gz_offset);
 800c93a:	4b31      	ldr	r3, [pc, #196]	@ (800ca00 <mpu_get_data+0x178>)
 800c93c:	7b1b      	ldrb	r3, [r3, #12]
 800c93e:	021b      	lsls	r3, r3, #8
 800c940:	b21a      	sxth	r2, r3
 800c942:	4b2f      	ldr	r3, [pc, #188]	@ (800ca00 <mpu_get_data+0x178>)
 800c944:	7b5b      	ldrb	r3, [r3, #13]
 800c946:	b21b      	sxth	r3, r3
 800c948:	4313      	orrs	r3, r2
 800c94a:	b21b      	sxth	r3, r3
 800c94c:	b29a      	uxth	r2, r3
 800c94e:	4b2d      	ldr	r3, [pc, #180]	@ (800ca04 <mpu_get_data+0x17c>)
 800c950:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800c954:	b29b      	uxth	r3, r3
 800c956:	1ad3      	subs	r3, r2, r3
 800c958:	b29b      	uxth	r3, r3
 800c95a:	b21a      	sxth	r2, r3
 800c95c:	4b29      	ldr	r3, [pc, #164]	@ (800ca04 <mpu_get_data+0x17c>)
 800c95e:	825a      	strh	r2, [r3, #18]

    // ist8310_get_data(ist_buff);
    // memcpy(&mpu_data.mx, ist_buff, 6);

    memcpy(&imu.ax, &mpu_data.ax, 6 * sizeof(int16_t));
 800c960:	220c      	movs	r2, #12
 800c962:	4928      	ldr	r1, [pc, #160]	@ (800ca04 <mpu_get_data+0x17c>)
 800c964:	4828      	ldr	r0, [pc, #160]	@ (800ca08 <mpu_get_data+0x180>)
 800c966:	f003 f9a8 	bl	800fcba <memcpy>

    imu.temp = 21 + mpu_data.temp / 333.87f;
 800c96a:	4b26      	ldr	r3, [pc, #152]	@ (800ca04 <mpu_get_data+0x17c>)
 800c96c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800c970:	ee07 3a90 	vmov	s15, r3
 800c974:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c978:	eddf 6a24 	vldr	s13, [pc, #144]	@ 800ca0c <mpu_get_data+0x184>
 800c97c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c980:	eeb3 7a05 	vmov.f32	s14, #53	@ 0x41a80000  21.0
 800c984:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c988:	4b1f      	ldr	r3, [pc, #124]	@ (800ca08 <mpu_get_data+0x180>)
 800c98a:	edc3 7a03 	vstr	s15, [r3, #12]
    /* 2000dps -> rad/s */
    imu.wx = mpu_data.gx / 16.384f / 57.3f;
 800c98e:	4b1d      	ldr	r3, [pc, #116]	@ (800ca04 <mpu_get_data+0x17c>)
 800c990:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c994:	ee07 3a90 	vmov	s15, r3
 800c998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c99c:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800ca10 <mpu_get_data+0x188>
 800c9a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c9a4:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 800ca14 <mpu_get_data+0x18c>
 800c9a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c9ac:	4b16      	ldr	r3, [pc, #88]	@ (800ca08 <mpu_get_data+0x180>)
 800c9ae:	edc3 7a04 	vstr	s15, [r3, #16]
    imu.wy = mpu_data.gy / 16.384f / 57.3f;
 800c9b2:	4b14      	ldr	r3, [pc, #80]	@ (800ca04 <mpu_get_data+0x17c>)
 800c9b4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800c9b8:	ee07 3a90 	vmov	s15, r3
 800c9bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c9c0:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800ca10 <mpu_get_data+0x188>
 800c9c4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c9c8:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800ca14 <mpu_get_data+0x18c>
 800c9cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c9d0:	4b0d      	ldr	r3, [pc, #52]	@ (800ca08 <mpu_get_data+0x180>)
 800c9d2:	edc3 7a05 	vstr	s15, [r3, #20]
    imu.wz = mpu_data.gz / 16.384f / 57.3f;
 800c9d6:	4b0b      	ldr	r3, [pc, #44]	@ (800ca04 <mpu_get_data+0x17c>)
 800c9d8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c9dc:	ee07 3a90 	vmov	s15, r3
 800c9e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c9e4:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800ca10 <mpu_get_data+0x188>
 800c9e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c9ec:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800ca14 <mpu_get_data+0x18c>
 800c9f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c9f4:	4b04      	ldr	r3, [pc, #16]	@ (800ca08 <mpu_get_data+0x180>)
 800c9f6:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800c9fa:	bf00      	nop
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	20000a04 	.word	0x20000a04
 800ca04:	20000a14 	.word	0x20000a14
 800ca08:	20000a34 	.word	0x20000a34
 800ca0c:	43a6ef5c 	.word	0x43a6ef5c
 800ca10:	4183126f 	.word	0x4183126f
 800ca14:	42653333 	.word	0x42653333

0800ca18 <mpu_offset_call>:
// 获取MPU6500的偏移量数据
void mpu_offset_call(void)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b082      	sub	sp, #8
 800ca1c:	af00      	add	r7, sp, #0
    int i;
    for (i = 0; i < 300; i++)
 800ca1e:	2300      	movs	r3, #0
 800ca20:	607b      	str	r3, [r7, #4]
 800ca22:	e07c      	b.n	800cb1e <mpu_offset_call+0x106>
    {
        mpu_read_bytes(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 800ca24:	220e      	movs	r2, #14
 800ca26:	4966      	ldr	r1, [pc, #408]	@ (800cbc0 <mpu_offset_call+0x1a8>)
 800ca28:	203b      	movs	r0, #59	@ 0x3b
 800ca2a:	f7ff fecf 	bl	800c7cc <mpu_read_bytes>

        mpu_data.ax_offset += mpu_buff[0] << 8 | mpu_buff[1];
 800ca2e:	4b65      	ldr	r3, [pc, #404]	@ (800cbc4 <mpu_offset_call+0x1ac>)
 800ca30:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800ca34:	b29a      	uxth	r2, r3
 800ca36:	4b62      	ldr	r3, [pc, #392]	@ (800cbc0 <mpu_offset_call+0x1a8>)
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	021b      	lsls	r3, r3, #8
 800ca3c:	b219      	sxth	r1, r3
 800ca3e:	4b60      	ldr	r3, [pc, #384]	@ (800cbc0 <mpu_offset_call+0x1a8>)
 800ca40:	785b      	ldrb	r3, [r3, #1]
 800ca42:	b21b      	sxth	r3, r3
 800ca44:	430b      	orrs	r3, r1
 800ca46:	b21b      	sxth	r3, r3
 800ca48:	b29b      	uxth	r3, r3
 800ca4a:	4413      	add	r3, r2
 800ca4c:	b29b      	uxth	r3, r3
 800ca4e:	b21a      	sxth	r2, r3
 800ca50:	4b5c      	ldr	r3, [pc, #368]	@ (800cbc4 <mpu_offset_call+0x1ac>)
 800ca52:	829a      	strh	r2, [r3, #20]
        mpu_data.ay_offset += mpu_buff[2] << 8 | mpu_buff[3];
 800ca54:	4b5b      	ldr	r3, [pc, #364]	@ (800cbc4 <mpu_offset_call+0x1ac>)
 800ca56:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800ca5a:	b29a      	uxth	r2, r3
 800ca5c:	4b58      	ldr	r3, [pc, #352]	@ (800cbc0 <mpu_offset_call+0x1a8>)
 800ca5e:	789b      	ldrb	r3, [r3, #2]
 800ca60:	021b      	lsls	r3, r3, #8
 800ca62:	b219      	sxth	r1, r3
 800ca64:	4b56      	ldr	r3, [pc, #344]	@ (800cbc0 <mpu_offset_call+0x1a8>)
 800ca66:	78db      	ldrb	r3, [r3, #3]
 800ca68:	b21b      	sxth	r3, r3
 800ca6a:	430b      	orrs	r3, r1
 800ca6c:	b21b      	sxth	r3, r3
 800ca6e:	b29b      	uxth	r3, r3
 800ca70:	4413      	add	r3, r2
 800ca72:	b29b      	uxth	r3, r3
 800ca74:	b21a      	sxth	r2, r3
 800ca76:	4b53      	ldr	r3, [pc, #332]	@ (800cbc4 <mpu_offset_call+0x1ac>)
 800ca78:	82da      	strh	r2, [r3, #22]
        mpu_data.az_offset += mpu_buff[4] << 8 | mpu_buff[5];
 800ca7a:	4b52      	ldr	r3, [pc, #328]	@ (800cbc4 <mpu_offset_call+0x1ac>)
 800ca7c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800ca80:	b29a      	uxth	r2, r3
 800ca82:	4b4f      	ldr	r3, [pc, #316]	@ (800cbc0 <mpu_offset_call+0x1a8>)
 800ca84:	791b      	ldrb	r3, [r3, #4]
 800ca86:	021b      	lsls	r3, r3, #8
 800ca88:	b219      	sxth	r1, r3
 800ca8a:	4b4d      	ldr	r3, [pc, #308]	@ (800cbc0 <mpu_offset_call+0x1a8>)
 800ca8c:	795b      	ldrb	r3, [r3, #5]
 800ca8e:	b21b      	sxth	r3, r3
 800ca90:	430b      	orrs	r3, r1
 800ca92:	b21b      	sxth	r3, r3
 800ca94:	b29b      	uxth	r3, r3
 800ca96:	4413      	add	r3, r2
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	b21a      	sxth	r2, r3
 800ca9c:	4b49      	ldr	r3, [pc, #292]	@ (800cbc4 <mpu_offset_call+0x1ac>)
 800ca9e:	831a      	strh	r2, [r3, #24]

        mpu_data.gx_offset += mpu_buff[8] << 8 | mpu_buff[9];
 800caa0:	4b48      	ldr	r3, [pc, #288]	@ (800cbc4 <mpu_offset_call+0x1ac>)
 800caa2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800caa6:	b29a      	uxth	r2, r3
 800caa8:	4b45      	ldr	r3, [pc, #276]	@ (800cbc0 <mpu_offset_call+0x1a8>)
 800caaa:	7a1b      	ldrb	r3, [r3, #8]
 800caac:	021b      	lsls	r3, r3, #8
 800caae:	b219      	sxth	r1, r3
 800cab0:	4b43      	ldr	r3, [pc, #268]	@ (800cbc0 <mpu_offset_call+0x1a8>)
 800cab2:	7a5b      	ldrb	r3, [r3, #9]
 800cab4:	b21b      	sxth	r3, r3
 800cab6:	430b      	orrs	r3, r1
 800cab8:	b21b      	sxth	r3, r3
 800caba:	b29b      	uxth	r3, r3
 800cabc:	4413      	add	r3, r2
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	b21a      	sxth	r2, r3
 800cac2:	4b40      	ldr	r3, [pc, #256]	@ (800cbc4 <mpu_offset_call+0x1ac>)
 800cac4:	835a      	strh	r2, [r3, #26]
        mpu_data.gy_offset += mpu_buff[10] << 8 | mpu_buff[11];
 800cac6:	4b3f      	ldr	r3, [pc, #252]	@ (800cbc4 <mpu_offset_call+0x1ac>)
 800cac8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800cacc:	b29a      	uxth	r2, r3
 800cace:	4b3c      	ldr	r3, [pc, #240]	@ (800cbc0 <mpu_offset_call+0x1a8>)
 800cad0:	7a9b      	ldrb	r3, [r3, #10]
 800cad2:	021b      	lsls	r3, r3, #8
 800cad4:	b219      	sxth	r1, r3
 800cad6:	4b3a      	ldr	r3, [pc, #232]	@ (800cbc0 <mpu_offset_call+0x1a8>)
 800cad8:	7adb      	ldrb	r3, [r3, #11]
 800cada:	b21b      	sxth	r3, r3
 800cadc:	430b      	orrs	r3, r1
 800cade:	b21b      	sxth	r3, r3
 800cae0:	b29b      	uxth	r3, r3
 800cae2:	4413      	add	r3, r2
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	b21a      	sxth	r2, r3
 800cae8:	4b36      	ldr	r3, [pc, #216]	@ (800cbc4 <mpu_offset_call+0x1ac>)
 800caea:	839a      	strh	r2, [r3, #28]
        mpu_data.gz_offset += mpu_buff[12] << 8 | mpu_buff[13];
 800caec:	4b35      	ldr	r3, [pc, #212]	@ (800cbc4 <mpu_offset_call+0x1ac>)
 800caee:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800caf2:	b29a      	uxth	r2, r3
 800caf4:	4b32      	ldr	r3, [pc, #200]	@ (800cbc0 <mpu_offset_call+0x1a8>)
 800caf6:	7b1b      	ldrb	r3, [r3, #12]
 800caf8:	021b      	lsls	r3, r3, #8
 800cafa:	b219      	sxth	r1, r3
 800cafc:	4b30      	ldr	r3, [pc, #192]	@ (800cbc0 <mpu_offset_call+0x1a8>)
 800cafe:	7b5b      	ldrb	r3, [r3, #13]
 800cb00:	b21b      	sxth	r3, r3
 800cb02:	430b      	orrs	r3, r1
 800cb04:	b21b      	sxth	r3, r3
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	4413      	add	r3, r2
 800cb0a:	b29b      	uxth	r3, r3
 800cb0c:	b21a      	sxth	r2, r3
 800cb0e:	4b2d      	ldr	r3, [pc, #180]	@ (800cbc4 <mpu_offset_call+0x1ac>)
 800cb10:	83da      	strh	r2, [r3, #30]

        HAL_Delay(5);
 800cb12:	2005      	movs	r0, #5
 800cb14:	f7f5 fd04 	bl	8002520 <HAL_Delay>
    for (i = 0; i < 300; i++)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	607b      	str	r3, [r7, #4]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800cb24:	f6ff af7e 	blt.w	800ca24 <mpu_offset_call+0xc>
    }
    mpu_data.ax_offset = mpu_data.ax_offset / 300;
 800cb28:	4b26      	ldr	r3, [pc, #152]	@ (800cbc4 <mpu_offset_call+0x1ac>)
 800cb2a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800cb2e:	4a26      	ldr	r2, [pc, #152]	@ (800cbc8 <mpu_offset_call+0x1b0>)
 800cb30:	fb82 1203 	smull	r1, r2, r2, r3
 800cb34:	1152      	asrs	r2, r2, #5
 800cb36:	17db      	asrs	r3, r3, #31
 800cb38:	1ad3      	subs	r3, r2, r3
 800cb3a:	b21a      	sxth	r2, r3
 800cb3c:	4b21      	ldr	r3, [pc, #132]	@ (800cbc4 <mpu_offset_call+0x1ac>)
 800cb3e:	829a      	strh	r2, [r3, #20]
    mpu_data.ay_offset = mpu_data.ay_offset / 300;
 800cb40:	4b20      	ldr	r3, [pc, #128]	@ (800cbc4 <mpu_offset_call+0x1ac>)
 800cb42:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800cb46:	4a20      	ldr	r2, [pc, #128]	@ (800cbc8 <mpu_offset_call+0x1b0>)
 800cb48:	fb82 1203 	smull	r1, r2, r2, r3
 800cb4c:	1152      	asrs	r2, r2, #5
 800cb4e:	17db      	asrs	r3, r3, #31
 800cb50:	1ad3      	subs	r3, r2, r3
 800cb52:	b21a      	sxth	r2, r3
 800cb54:	4b1b      	ldr	r3, [pc, #108]	@ (800cbc4 <mpu_offset_call+0x1ac>)
 800cb56:	82da      	strh	r2, [r3, #22]
    mpu_data.az_offset = mpu_data.az_offset / 300;
 800cb58:	4b1a      	ldr	r3, [pc, #104]	@ (800cbc4 <mpu_offset_call+0x1ac>)
 800cb5a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800cb5e:	4a1a      	ldr	r2, [pc, #104]	@ (800cbc8 <mpu_offset_call+0x1b0>)
 800cb60:	fb82 1203 	smull	r1, r2, r2, r3
 800cb64:	1152      	asrs	r2, r2, #5
 800cb66:	17db      	asrs	r3, r3, #31
 800cb68:	1ad3      	subs	r3, r2, r3
 800cb6a:	b21a      	sxth	r2, r3
 800cb6c:	4b15      	ldr	r3, [pc, #84]	@ (800cbc4 <mpu_offset_call+0x1ac>)
 800cb6e:	831a      	strh	r2, [r3, #24]
    mpu_data.gx_offset = mpu_data.gx_offset / 300;
 800cb70:	4b14      	ldr	r3, [pc, #80]	@ (800cbc4 <mpu_offset_call+0x1ac>)
 800cb72:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800cb76:	4a14      	ldr	r2, [pc, #80]	@ (800cbc8 <mpu_offset_call+0x1b0>)
 800cb78:	fb82 1203 	smull	r1, r2, r2, r3
 800cb7c:	1152      	asrs	r2, r2, #5
 800cb7e:	17db      	asrs	r3, r3, #31
 800cb80:	1ad3      	subs	r3, r2, r3
 800cb82:	b21a      	sxth	r2, r3
 800cb84:	4b0f      	ldr	r3, [pc, #60]	@ (800cbc4 <mpu_offset_call+0x1ac>)
 800cb86:	835a      	strh	r2, [r3, #26]
    mpu_data.gy_offset = mpu_data.gx_offset / 300;
 800cb88:	4b0e      	ldr	r3, [pc, #56]	@ (800cbc4 <mpu_offset_call+0x1ac>)
 800cb8a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800cb8e:	4a0e      	ldr	r2, [pc, #56]	@ (800cbc8 <mpu_offset_call+0x1b0>)
 800cb90:	fb82 1203 	smull	r1, r2, r2, r3
 800cb94:	1152      	asrs	r2, r2, #5
 800cb96:	17db      	asrs	r3, r3, #31
 800cb98:	1ad3      	subs	r3, r2, r3
 800cb9a:	b21a      	sxth	r2, r3
 800cb9c:	4b09      	ldr	r3, [pc, #36]	@ (800cbc4 <mpu_offset_call+0x1ac>)
 800cb9e:	839a      	strh	r2, [r3, #28]
    mpu_data.gz_offset = mpu_data.gz_offset / 300;
 800cba0:	4b08      	ldr	r3, [pc, #32]	@ (800cbc4 <mpu_offset_call+0x1ac>)
 800cba2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800cba6:	4a08      	ldr	r2, [pc, #32]	@ (800cbc8 <mpu_offset_call+0x1b0>)
 800cba8:	fb82 1203 	smull	r1, r2, r2, r3
 800cbac:	1152      	asrs	r2, r2, #5
 800cbae:	17db      	asrs	r3, r3, #31
 800cbb0:	1ad3      	subs	r3, r2, r3
 800cbb2:	b21a      	sxth	r2, r3
 800cbb4:	4b03      	ldr	r3, [pc, #12]	@ (800cbc4 <mpu_offset_call+0x1ac>)
 800cbb6:	83da      	strh	r2, [r3, #30]
}
 800cbb8:	bf00      	nop
 800cbba:	3708      	adds	r7, #8
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}
 800cbc0:	20000a04 	.word	0x20000a04
 800cbc4:	20000a14 	.word	0x20000a14
 800cbc8:	1b4e81b5 	.word	0x1b4e81b5

0800cbcc <IMU_Init>:

// 初始化mpu6500和ist3810
uint8_t IMU_Init(void)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b086      	sub	sp, #24
 800cbd0:	af00      	add	r7, sp, #0
    HAL_Delay(100);
 800cbd2:	2064      	movs	r0, #100	@ 0x64
 800cbd4:	f7f5 fca4 	bl	8002520 <HAL_Delay>

    id = mpu_read_byte(MPU6500_ID);
 800cbd8:	2075      	movs	r0, #117	@ 0x75
 800cbda:	f7ff fdc3 	bl	800c764 <mpu_read_byte>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	4b28      	ldr	r3, [pc, #160]	@ (800cc84 <IMU_Init+0xb8>)
 800cbe4:	701a      	strb	r2, [r3, #0]
    if (id != 0x70)
 800cbe6:	4b27      	ldr	r3, [pc, #156]	@ (800cc84 <IMU_Init+0xb8>)
 800cbe8:	781b      	ldrb	r3, [r3, #0]
 800cbea:	2b70      	cmp	r3, #112	@ 0x70
 800cbec:	d001      	beq.n	800cbf2 <IMU_Init+0x26>
        return 1;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	e044      	b.n	800cc7c <IMU_Init+0xb0>
    uint8_t i = 0;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	75fb      	strb	r3, [r7, #23]
    uint8_t MPU6500_Init_Data[10][2] = {
 800cbf6:	463b      	mov	r3, r7
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	601a      	str	r2, [r3, #0]
 800cbfc:	605a      	str	r2, [r3, #4]
 800cbfe:	609a      	str	r2, [r3, #8]
 800cc00:	60da      	str	r2, [r3, #12]
 800cc02:	611a      	str	r2, [r3, #16]
 800cc04:	f248 036b 	movw	r3, #32875	@ 0x806b
 800cc08:	803b      	strh	r3, [r7, #0]
 800cc0a:	f240 336b 	movw	r3, #875	@ 0x36b
 800cc0e:	807b      	strh	r3, [r7, #2]
 800cc10:	236c      	movs	r3, #108	@ 0x6c
 800cc12:	80bb      	strh	r3, [r7, #4]
 800cc14:	f240 431a 	movw	r3, #1050	@ 0x41a
 800cc18:	80fb      	strh	r3, [r7, #6]
 800cc1a:	f641 031b 	movw	r3, #6171	@ 0x181b
 800cc1e:	813b      	strh	r3, [r7, #8]
 800cc20:	f241 031c 	movw	r3, #4124	@ 0x101c
 800cc24:	817b      	strh	r3, [r7, #10]
 800cc26:	f240 231d 	movw	r3, #541	@ 0x21d
 800cc2a:	81bb      	strh	r3, [r7, #12]
 800cc2c:	f242 036a 	movw	r3, #8298	@ 0x206a
 800cc30:	81fb      	strh	r3, [r7, #14]
        {MPU6500_GYRO_CONFIG, 0x18},    /* +-2000dps */
        {MPU6500_ACCEL_CONFIG, 0x10},   /* +-8G */
        {MPU6500_ACCEL_CONFIG_2, 0x02}, /* 使能低通滤波器  设置 Acc 低通滤波 */
        {MPU6500_USER_CTRL, 0x20},
    }; /* 使能 AUX */
    for (i = 0; i < 10; i++)
 800cc32:	2300      	movs	r3, #0
 800cc34:	75fb      	strb	r3, [r7, #23]
 800cc36:	e015      	b.n	800cc64 <IMU_Init+0x98>
    {
        mpu_write_byte(MPU6500_Init_Data[i][0], MPU6500_Init_Data[i][1]);
 800cc38:	7dfb      	ldrb	r3, [r7, #23]
 800cc3a:	005b      	lsls	r3, r3, #1
 800cc3c:	3318      	adds	r3, #24
 800cc3e:	443b      	add	r3, r7
 800cc40:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800cc44:	7dfb      	ldrb	r3, [r7, #23]
 800cc46:	005b      	lsls	r3, r3, #1
 800cc48:	3318      	adds	r3, #24
 800cc4a:	443b      	add	r3, r7
 800cc4c:	f813 3c17 	ldrb.w	r3, [r3, #-23]
 800cc50:	4619      	mov	r1, r3
 800cc52:	4610      	mov	r0, r2
 800cc54:	f7ff fd4e 	bl	800c6f4 <mpu_write_byte>
        HAL_Delay(1);
 800cc58:	2001      	movs	r0, #1
 800cc5a:	f7f5 fc61 	bl	8002520 <HAL_Delay>
    for (i = 0; i < 10; i++)
 800cc5e:	7dfb      	ldrb	r3, [r7, #23]
 800cc60:	3301      	adds	r3, #1
 800cc62:	75fb      	strb	r3, [r7, #23]
 800cc64:	7dfb      	ldrb	r3, [r7, #23]
 800cc66:	2b09      	cmp	r3, #9
 800cc68:	d9e6      	bls.n	800cc38 <IMU_Init+0x6c>
    }

    mpu_set_gyro_fsr(3);
 800cc6a:	2003      	movs	r0, #3
 800cc6c:	f7ff fdea 	bl	800c844 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(2);
 800cc70:	2002      	movs	r0, #2
 800cc72:	f7ff fdf8 	bl	800c866 <mpu_set_accel_fsr>

    // ist8310_init();
    mpu_offset_call();
 800cc76:	f7ff fecf 	bl	800ca18 <mpu_offset_call>
    return 0;
 800cc7a:	2300      	movs	r3, #0
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3718      	adds	r7, #24
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}
 800cc84:	20000a68 	.word	0x20000a68

0800cc88 <init_quaternion>:

// 初始化四元数
void init_quaternion(void)
{
 800cc88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc8c:	b084      	sub	sp, #16
 800cc8e:	af00      	add	r7, sp, #0
    int16_t hx, hy; // hz;

    hx = imu.mx;
 800cc90:	4b79      	ldr	r3, [pc, #484]	@ (800ce78 <init_quaternion+0x1f0>)
 800cc92:	88db      	ldrh	r3, [r3, #6]
 800cc94:	81fb      	strh	r3, [r7, #14]
    hy = imu.my;
 800cc96:	4b78      	ldr	r3, [pc, #480]	@ (800ce78 <init_quaternion+0x1f0>)
 800cc98:	891b      	ldrh	r3, [r3, #8]
 800cc9a:	81bb      	strh	r3, [r7, #12]
            q2 = -0.56;
            q3 = 0.0045;
        }
    }
#else
    if (hx < 0 && hy < 0)
 800cc9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	da36      	bge.n	800cd12 <init_quaternion+0x8a>
 800cca4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	da32      	bge.n	800cd12 <init_quaternion+0x8a>
    {
        if (fabs(hx / hy) >= 1)
 800ccac:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ccb0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ccb4:	fb92 f3f3 	sdiv	r3, r2, r3
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7f3 fc5b 	bl	8000574 <__aeabi_i2d>
 800ccbe:	4602      	mov	r2, r0
 800ccc0:	460b      	mov	r3, r1
 800ccc2:	603a      	str	r2, [r7, #0]
 800ccc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ccc8:	607b      	str	r3, [r7, #4]
 800ccca:	f04f 0200 	mov.w	r2, #0
 800ccce:	4b6b      	ldr	r3, [pc, #428]	@ (800ce7c <init_quaternion+0x1f4>)
 800ccd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ccd4:	f7f3 ff3e 	bl	8000b54 <__aeabi_dcmpge>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d00c      	beq.n	800ccf8 <init_quaternion+0x70>
        {
            q0 = 0.195;
 800ccde:	4b68      	ldr	r3, [pc, #416]	@ (800ce80 <init_quaternion+0x1f8>)
 800cce0:	4a68      	ldr	r2, [pc, #416]	@ (800ce84 <init_quaternion+0x1fc>)
 800cce2:	601a      	str	r2, [r3, #0]
            q1 = -0.015;
 800cce4:	4b68      	ldr	r3, [pc, #416]	@ (800ce88 <init_quaternion+0x200>)
 800cce6:	4a69      	ldr	r2, [pc, #420]	@ (800ce8c <init_quaternion+0x204>)
 800cce8:	601a      	str	r2, [r3, #0]
            q2 = 0.0043;
 800ccea:	4b69      	ldr	r3, [pc, #420]	@ (800ce90 <init_quaternion+0x208>)
 800ccec:	4a69      	ldr	r2, [pc, #420]	@ (800ce94 <init_quaternion+0x20c>)
 800ccee:	601a      	str	r2, [r3, #0]
            q3 = 0.979;
 800ccf0:	4b69      	ldr	r3, [pc, #420]	@ (800ce98 <init_quaternion+0x210>)
 800ccf2:	4a6a      	ldr	r2, [pc, #424]	@ (800ce9c <init_quaternion+0x214>)
 800ccf4:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800ccf6:	e0ba      	b.n	800ce6e <init_quaternion+0x1e6>
        }
        else
        {
            q0 = 0.555;
 800ccf8:	4b61      	ldr	r3, [pc, #388]	@ (800ce80 <init_quaternion+0x1f8>)
 800ccfa:	4a69      	ldr	r2, [pc, #420]	@ (800cea0 <init_quaternion+0x218>)
 800ccfc:	601a      	str	r2, [r3, #0]
            q1 = -0.015;
 800ccfe:	4b62      	ldr	r3, [pc, #392]	@ (800ce88 <init_quaternion+0x200>)
 800cd00:	4a62      	ldr	r2, [pc, #392]	@ (800ce8c <init_quaternion+0x204>)
 800cd02:	601a      	str	r2, [r3, #0]
            q2 = 0.006;
 800cd04:	4b62      	ldr	r3, [pc, #392]	@ (800ce90 <init_quaternion+0x208>)
 800cd06:	4a67      	ldr	r2, [pc, #412]	@ (800cea4 <init_quaternion+0x21c>)
 800cd08:	601a      	str	r2, [r3, #0]
            q3 = 0.829;
 800cd0a:	4b63      	ldr	r3, [pc, #396]	@ (800ce98 <init_quaternion+0x210>)
 800cd0c:	4a66      	ldr	r2, [pc, #408]	@ (800cea8 <init_quaternion+0x220>)
 800cd0e:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800cd10:	e0ad      	b.n	800ce6e <init_quaternion+0x1e6>
        }
    }
    else if (hx < 0 && hy > 0)
 800cd12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	da35      	bge.n	800cd86 <init_quaternion+0xfe>
 800cd1a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	dd31      	ble.n	800cd86 <init_quaternion+0xfe>
    {
        if (fabs(hx / hy) >= 1)
 800cd22:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800cd26:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800cd2a:	fb92 f3f3 	sdiv	r3, r2, r3
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7f3 fc20 	bl	8000574 <__aeabi_i2d>
 800cd34:	4602      	mov	r2, r0
 800cd36:	460b      	mov	r3, r1
 800cd38:	4692      	mov	sl, r2
 800cd3a:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 800cd3e:	f04f 0200 	mov.w	r2, #0
 800cd42:	4b4e      	ldr	r3, [pc, #312]	@ (800ce7c <init_quaternion+0x1f4>)
 800cd44:	4650      	mov	r0, sl
 800cd46:	4659      	mov	r1, fp
 800cd48:	f7f3 ff04 	bl	8000b54 <__aeabi_dcmpge>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d00c      	beq.n	800cd6c <init_quaternion+0xe4>
        {
            q0 = -0.193;
 800cd52:	4b4b      	ldr	r3, [pc, #300]	@ (800ce80 <init_quaternion+0x1f8>)
 800cd54:	4a55      	ldr	r2, [pc, #340]	@ (800ceac <init_quaternion+0x224>)
 800cd56:	601a      	str	r2, [r3, #0]
            q1 = -0.009;
 800cd58:	4b4b      	ldr	r3, [pc, #300]	@ (800ce88 <init_quaternion+0x200>)
 800cd5a:	4a55      	ldr	r2, [pc, #340]	@ (800ceb0 <init_quaternion+0x228>)
 800cd5c:	601a      	str	r2, [r3, #0]
            q2 = -0.006;
 800cd5e:	4b4c      	ldr	r3, [pc, #304]	@ (800ce90 <init_quaternion+0x208>)
 800cd60:	4a54      	ldr	r2, [pc, #336]	@ (800ceb4 <init_quaternion+0x22c>)
 800cd62:	601a      	str	r2, [r3, #0]
            q3 = 0.979;
 800cd64:	4b4c      	ldr	r3, [pc, #304]	@ (800ce98 <init_quaternion+0x210>)
 800cd66:	4a4d      	ldr	r2, [pc, #308]	@ (800ce9c <init_quaternion+0x214>)
 800cd68:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800cd6a:	e080      	b.n	800ce6e <init_quaternion+0x1e6>
        }
        else
        {
            q0 = -0.552;
 800cd6c:	4b44      	ldr	r3, [pc, #272]	@ (800ce80 <init_quaternion+0x1f8>)
 800cd6e:	4a52      	ldr	r2, [pc, #328]	@ (800ceb8 <init_quaternion+0x230>)
 800cd70:	601a      	str	r2, [r3, #0]
            q1 = -0.0048;
 800cd72:	4b45      	ldr	r3, [pc, #276]	@ (800ce88 <init_quaternion+0x200>)
 800cd74:	4a51      	ldr	r2, [pc, #324]	@ (800cebc <init_quaternion+0x234>)
 800cd76:	601a      	str	r2, [r3, #0]
            q2 = -0.0115;
 800cd78:	4b45      	ldr	r3, [pc, #276]	@ (800ce90 <init_quaternion+0x208>)
 800cd7a:	4a51      	ldr	r2, [pc, #324]	@ (800cec0 <init_quaternion+0x238>)
 800cd7c:	601a      	str	r2, [r3, #0]
            q3 = 0.8313;
 800cd7e:	4b46      	ldr	r3, [pc, #280]	@ (800ce98 <init_quaternion+0x210>)
 800cd80:	4a50      	ldr	r2, [pc, #320]	@ (800cec4 <init_quaternion+0x23c>)
 800cd82:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800cd84:	e073      	b.n	800ce6e <init_quaternion+0x1e6>
        }
    }
    else if (hx > 0 && hy > 0)
 800cd86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	dd35      	ble.n	800cdfa <init_quaternion+0x172>
 800cd8e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	dd31      	ble.n	800cdfa <init_quaternion+0x172>
    {
        if (fabs(hx / hy) >= 1)
 800cd96:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800cd9a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800cd9e:	fb92 f3f3 	sdiv	r3, r2, r3
 800cda2:	4618      	mov	r0, r3
 800cda4:	f7f3 fbe6 	bl	8000574 <__aeabi_i2d>
 800cda8:	4602      	mov	r2, r0
 800cdaa:	460b      	mov	r3, r1
 800cdac:	4690      	mov	r8, r2
 800cdae:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800cdb2:	f04f 0200 	mov.w	r2, #0
 800cdb6:	4b31      	ldr	r3, [pc, #196]	@ (800ce7c <init_quaternion+0x1f4>)
 800cdb8:	4640      	mov	r0, r8
 800cdba:	4649      	mov	r1, r9
 800cdbc:	f7f3 feca 	bl	8000b54 <__aeabi_dcmpge>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d00c      	beq.n	800cde0 <init_quaternion+0x158>
        {
            q0 = -0.9785;
 800cdc6:	4b2e      	ldr	r3, [pc, #184]	@ (800ce80 <init_quaternion+0x1f8>)
 800cdc8:	4a3f      	ldr	r2, [pc, #252]	@ (800cec8 <init_quaternion+0x240>)
 800cdca:	601a      	str	r2, [r3, #0]
            q1 = 0.008;
 800cdcc:	4b2e      	ldr	r3, [pc, #184]	@ (800ce88 <init_quaternion+0x200>)
 800cdce:	4a3f      	ldr	r2, [pc, #252]	@ (800cecc <init_quaternion+0x244>)
 800cdd0:	601a      	str	r2, [r3, #0]
            q2 = -0.02;
 800cdd2:	4b2f      	ldr	r3, [pc, #188]	@ (800ce90 <init_quaternion+0x208>)
 800cdd4:	4a3e      	ldr	r2, [pc, #248]	@ (800ced0 <init_quaternion+0x248>)
 800cdd6:	601a      	str	r2, [r3, #0]
            q3 = 0.195;
 800cdd8:	4b2f      	ldr	r3, [pc, #188]	@ (800ce98 <init_quaternion+0x210>)
 800cdda:	4a2a      	ldr	r2, [pc, #168]	@ (800ce84 <init_quaternion+0x1fc>)
 800cddc:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800cdde:	e046      	b.n	800ce6e <init_quaternion+0x1e6>
        }
        else
        {
            q0 = -0.9828;
 800cde0:	4b27      	ldr	r3, [pc, #156]	@ (800ce80 <init_quaternion+0x1f8>)
 800cde2:	4a3c      	ldr	r2, [pc, #240]	@ (800ced4 <init_quaternion+0x24c>)
 800cde4:	601a      	str	r2, [r3, #0]
            q1 = 0.002;
 800cde6:	4b28      	ldr	r3, [pc, #160]	@ (800ce88 <init_quaternion+0x200>)
 800cde8:	4a3b      	ldr	r2, [pc, #236]	@ (800ced8 <init_quaternion+0x250>)
 800cdea:	601a      	str	r2, [r3, #0]
            q2 = -0.0167;
 800cdec:	4b28      	ldr	r3, [pc, #160]	@ (800ce90 <init_quaternion+0x208>)
 800cdee:	4a3b      	ldr	r2, [pc, #236]	@ (800cedc <init_quaternion+0x254>)
 800cdf0:	601a      	str	r2, [r3, #0]
            q3 = 0.5557;
 800cdf2:	4b29      	ldr	r3, [pc, #164]	@ (800ce98 <init_quaternion+0x210>)
 800cdf4:	4a3a      	ldr	r2, [pc, #232]	@ (800cee0 <init_quaternion+0x258>)
 800cdf6:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800cdf8:	e039      	b.n	800ce6e <init_quaternion+0x1e6>
        }
    }
    else if (hx > 0 && hy < 0)
 800cdfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	dd35      	ble.n	800ce6e <init_quaternion+0x1e6>
 800ce02:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	da31      	bge.n	800ce6e <init_quaternion+0x1e6>
    {
        if (fabs(hx / hy) >= 1)
 800ce0a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ce0e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ce12:	fb92 f3f3 	sdiv	r3, r2, r3
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7f3 fbac 	bl	8000574 <__aeabi_i2d>
 800ce1c:	4602      	mov	r2, r0
 800ce1e:	460b      	mov	r3, r1
 800ce20:	4614      	mov	r4, r2
 800ce22:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800ce26:	f04f 0200 	mov.w	r2, #0
 800ce2a:	4b14      	ldr	r3, [pc, #80]	@ (800ce7c <init_quaternion+0x1f4>)
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	4629      	mov	r1, r5
 800ce30:	f7f3 fe90 	bl	8000b54 <__aeabi_dcmpge>
 800ce34:	4603      	mov	r3, r0
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d00c      	beq.n	800ce54 <init_quaternion+0x1cc>
        {
            q0 = -0.979;
 800ce3a:	4b11      	ldr	r3, [pc, #68]	@ (800ce80 <init_quaternion+0x1f8>)
 800ce3c:	4a29      	ldr	r2, [pc, #164]	@ (800cee4 <init_quaternion+0x25c>)
 800ce3e:	601a      	str	r2, [r3, #0]
            q1 = 0.0116;
 800ce40:	4b11      	ldr	r3, [pc, #68]	@ (800ce88 <init_quaternion+0x200>)
 800ce42:	4a29      	ldr	r2, [pc, #164]	@ (800cee8 <init_quaternion+0x260>)
 800ce44:	601a      	str	r2, [r3, #0]
            q2 = -0.0167;
 800ce46:	4b12      	ldr	r3, [pc, #72]	@ (800ce90 <init_quaternion+0x208>)
 800ce48:	4a24      	ldr	r2, [pc, #144]	@ (800cedc <init_quaternion+0x254>)
 800ce4a:	601a      	str	r2, [r3, #0]
            q3 = -0.195;
 800ce4c:	4b12      	ldr	r3, [pc, #72]	@ (800ce98 <init_quaternion+0x210>)
 800ce4e:	4a27      	ldr	r2, [pc, #156]	@ (800ceec <init_quaternion+0x264>)
 800ce50:	601a      	str	r2, [r3, #0]
            q2 = -0.012;
            q3 = -0.556;
        }
    }
#endif
}
 800ce52:	e00c      	b.n	800ce6e <init_quaternion+0x1e6>
            q0 = -0.83;
 800ce54:	4b0a      	ldr	r3, [pc, #40]	@ (800ce80 <init_quaternion+0x1f8>)
 800ce56:	4a26      	ldr	r2, [pc, #152]	@ (800cef0 <init_quaternion+0x268>)
 800ce58:	601a      	str	r2, [r3, #0]
            q1 = 0.014;
 800ce5a:	4b0b      	ldr	r3, [pc, #44]	@ (800ce88 <init_quaternion+0x200>)
 800ce5c:	4a25      	ldr	r2, [pc, #148]	@ (800cef4 <init_quaternion+0x26c>)
 800ce5e:	601a      	str	r2, [r3, #0]
            q2 = -0.012;
 800ce60:	4b0b      	ldr	r3, [pc, #44]	@ (800ce90 <init_quaternion+0x208>)
 800ce62:	4a25      	ldr	r2, [pc, #148]	@ (800cef8 <init_quaternion+0x270>)
 800ce64:	601a      	str	r2, [r3, #0]
            q3 = -0.556;
 800ce66:	4b0c      	ldr	r3, [pc, #48]	@ (800ce98 <init_quaternion+0x210>)
 800ce68:	4a24      	ldr	r2, [pc, #144]	@ (800cefc <init_quaternion+0x274>)
 800ce6a:	601a      	str	r2, [r3, #0]
}
 800ce6c:	e7ff      	b.n	800ce6e <init_quaternion+0x1e6>
 800ce6e:	bf00      	nop
 800ce70:	3710      	adds	r7, #16
 800ce72:	46bd      	mov	sp, r7
 800ce74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce78:	20000a34 	.word	0x20000a34
 800ce7c:	3ff00000 	.word	0x3ff00000
 800ce80:	20000090 	.word	0x20000090
 800ce84:	3e47ae14 	.word	0x3e47ae14
 800ce88:	200009ec 	.word	0x200009ec
 800ce8c:	bc75c28f 	.word	0xbc75c28f
 800ce90:	200009f0 	.word	0x200009f0
 800ce94:	3b8ce704 	.word	0x3b8ce704
 800ce98:	200009f4 	.word	0x200009f4
 800ce9c:	3f7a9fbe 	.word	0x3f7a9fbe
 800cea0:	3f0e147b 	.word	0x3f0e147b
 800cea4:	3bc49ba6 	.word	0x3bc49ba6
 800cea8:	3f543958 	.word	0x3f543958
 800ceac:	be45a1cb 	.word	0xbe45a1cb
 800ceb0:	bc1374bc 	.word	0xbc1374bc
 800ceb4:	bbc49ba6 	.word	0xbbc49ba6
 800ceb8:	bf0d4fdf 	.word	0xbf0d4fdf
 800cebc:	bb9d4952 	.word	0xbb9d4952
 800cec0:	bc3c6a7f 	.word	0xbc3c6a7f
 800cec4:	3f54d014 	.word	0x3f54d014
 800cec8:	bf7a7efa 	.word	0xbf7a7efa
 800cecc:	3c03126f 	.word	0x3c03126f
 800ced0:	bca3d70a 	.word	0xbca3d70a
 800ced4:	bf7b98c8 	.word	0xbf7b98c8
 800ced8:	3b03126f 	.word	0x3b03126f
 800cedc:	bc88ce70 	.word	0xbc88ce70
 800cee0:	3f0e425b 	.word	0x3f0e425b
 800cee4:	bf7a9fbe 	.word	0xbf7a9fbe
 800cee8:	3c3e0ded 	.word	0x3c3e0ded
 800ceec:	be47ae14 	.word	0xbe47ae14
 800cef0:	bf547ae1 	.word	0xbf547ae1
 800cef4:	3c656042 	.word	0x3c656042
 800cef8:	bc449ba6 	.word	0xbc449ba6
 800cefc:	bf0e5604 	.word	0xbf0e5604

0800cf00 <imu_ahrs_update>:

// 更新IMU数值
void imu_ahrs_update(void)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b09e      	sub	sp, #120	@ 0x78
 800cf04:	af00      	add	r7, sp, #0
    float hx, hy, hz, bx, bz;
    float vx, vy, vz, wx, wy, wz;
    float ex, ey, ez, halfT;
    float tempq0, tempq1, tempq2, tempq3;

    float q0q0 = q0 * q0;
 800cf06:	4bd6      	ldr	r3, [pc, #856]	@ (800d260 <imu_ahrs_update+0x360>)
 800cf08:	ed93 7a00 	vldr	s14, [r3]
 800cf0c:	4bd4      	ldr	r3, [pc, #848]	@ (800d260 <imu_ahrs_update+0x360>)
 800cf0e:	edd3 7a00 	vldr	s15, [r3]
 800cf12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf16:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    float q0q1 = q0 * q1;
 800cf1a:	4bd1      	ldr	r3, [pc, #836]	@ (800d260 <imu_ahrs_update+0x360>)
 800cf1c:	ed93 7a00 	vldr	s14, [r3]
 800cf20:	4bd0      	ldr	r3, [pc, #832]	@ (800d264 <imu_ahrs_update+0x364>)
 800cf22:	edd3 7a00 	vldr	s15, [r3]
 800cf26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf2a:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    float q0q2 = q0 * q2;
 800cf2e:	4bcc      	ldr	r3, [pc, #816]	@ (800d260 <imu_ahrs_update+0x360>)
 800cf30:	ed93 7a00 	vldr	s14, [r3]
 800cf34:	4bcc      	ldr	r3, [pc, #816]	@ (800d268 <imu_ahrs_update+0x368>)
 800cf36:	edd3 7a00 	vldr	s15, [r3]
 800cf3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf3e:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    float q0q3 = q0 * q3;
 800cf42:	4bc7      	ldr	r3, [pc, #796]	@ (800d260 <imu_ahrs_update+0x360>)
 800cf44:	ed93 7a00 	vldr	s14, [r3]
 800cf48:	4bc8      	ldr	r3, [pc, #800]	@ (800d26c <imu_ahrs_update+0x36c>)
 800cf4a:	edd3 7a00 	vldr	s15, [r3]
 800cf4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf52:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
    float q1q1 = q1 * q1;
 800cf56:	4bc3      	ldr	r3, [pc, #780]	@ (800d264 <imu_ahrs_update+0x364>)
 800cf58:	ed93 7a00 	vldr	s14, [r3]
 800cf5c:	4bc1      	ldr	r3, [pc, #772]	@ (800d264 <imu_ahrs_update+0x364>)
 800cf5e:	edd3 7a00 	vldr	s15, [r3]
 800cf62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf66:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    float q1q2 = q1 * q2;
 800cf6a:	4bbe      	ldr	r3, [pc, #760]	@ (800d264 <imu_ahrs_update+0x364>)
 800cf6c:	ed93 7a00 	vldr	s14, [r3]
 800cf70:	4bbd      	ldr	r3, [pc, #756]	@ (800d268 <imu_ahrs_update+0x368>)
 800cf72:	edd3 7a00 	vldr	s15, [r3]
 800cf76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf7a:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    float q1q3 = q1 * q3;
 800cf7e:	4bb9      	ldr	r3, [pc, #740]	@ (800d264 <imu_ahrs_update+0x364>)
 800cf80:	ed93 7a00 	vldr	s14, [r3]
 800cf84:	4bb9      	ldr	r3, [pc, #740]	@ (800d26c <imu_ahrs_update+0x36c>)
 800cf86:	edd3 7a00 	vldr	s15, [r3]
 800cf8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf8e:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    float q2q2 = q2 * q2;
 800cf92:	4bb5      	ldr	r3, [pc, #724]	@ (800d268 <imu_ahrs_update+0x368>)
 800cf94:	ed93 7a00 	vldr	s14, [r3]
 800cf98:	4bb3      	ldr	r3, [pc, #716]	@ (800d268 <imu_ahrs_update+0x368>)
 800cf9a:	edd3 7a00 	vldr	s15, [r3]
 800cf9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfa2:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    float q2q3 = q2 * q3;
 800cfa6:	4bb0      	ldr	r3, [pc, #704]	@ (800d268 <imu_ahrs_update+0x368>)
 800cfa8:	ed93 7a00 	vldr	s14, [r3]
 800cfac:	4baf      	ldr	r3, [pc, #700]	@ (800d26c <imu_ahrs_update+0x36c>)
 800cfae:	edd3 7a00 	vldr	s15, [r3]
 800cfb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfb6:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    float q3q3 = q3 * q3;
 800cfba:	4bac      	ldr	r3, [pc, #688]	@ (800d26c <imu_ahrs_update+0x36c>)
 800cfbc:	ed93 7a00 	vldr	s14, [r3]
 800cfc0:	4baa      	ldr	r3, [pc, #680]	@ (800d26c <imu_ahrs_update+0x36c>)
 800cfc2:	edd3 7a00 	vldr	s15, [r3]
 800cfc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfca:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

    gx = imu.wx;
 800cfce:	4ba8      	ldr	r3, [pc, #672]	@ (800d270 <imu_ahrs_update+0x370>)
 800cfd0:	691b      	ldr	r3, [r3, #16]
 800cfd2:	4aa8      	ldr	r2, [pc, #672]	@ (800d274 <imu_ahrs_update+0x374>)
 800cfd4:	6013      	str	r3, [r2, #0]
    gy = imu.wy;
 800cfd6:	4ba6      	ldr	r3, [pc, #664]	@ (800d270 <imu_ahrs_update+0x370>)
 800cfd8:	695b      	ldr	r3, [r3, #20]
 800cfda:	4aa7      	ldr	r2, [pc, #668]	@ (800d278 <imu_ahrs_update+0x378>)
 800cfdc:	6013      	str	r3, [r2, #0]
    gz = imu.wz;
 800cfde:	4ba4      	ldr	r3, [pc, #656]	@ (800d270 <imu_ahrs_update+0x370>)
 800cfe0:	699b      	ldr	r3, [r3, #24]
 800cfe2:	4aa6      	ldr	r2, [pc, #664]	@ (800d27c <imu_ahrs_update+0x37c>)
 800cfe4:	6013      	str	r3, [r2, #0]
    ax = imu.ax;
 800cfe6:	4ba2      	ldr	r3, [pc, #648]	@ (800d270 <imu_ahrs_update+0x370>)
 800cfe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfec:	ee07 3a90 	vmov	s15, r3
 800cff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cff4:	4ba2      	ldr	r3, [pc, #648]	@ (800d280 <imu_ahrs_update+0x380>)
 800cff6:	edc3 7a00 	vstr	s15, [r3]
    ay = imu.ay;
 800cffa:	4b9d      	ldr	r3, [pc, #628]	@ (800d270 <imu_ahrs_update+0x370>)
 800cffc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d000:	ee07 3a90 	vmov	s15, r3
 800d004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d008:	4b9e      	ldr	r3, [pc, #632]	@ (800d284 <imu_ahrs_update+0x384>)
 800d00a:	edc3 7a00 	vstr	s15, [r3]
    az = imu.az;
 800d00e:	4b98      	ldr	r3, [pc, #608]	@ (800d270 <imu_ahrs_update+0x370>)
 800d010:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d014:	ee07 3a90 	vmov	s15, r3
 800d018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d01c:	4b9a      	ldr	r3, [pc, #616]	@ (800d288 <imu_ahrs_update+0x388>)
 800d01e:	edc3 7a00 	vstr	s15, [r3]
    mx = imu.mx;
 800d022:	4b93      	ldr	r3, [pc, #588]	@ (800d270 <imu_ahrs_update+0x370>)
 800d024:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d028:	ee07 3a90 	vmov	s15, r3
 800d02c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d030:	4b96      	ldr	r3, [pc, #600]	@ (800d28c <imu_ahrs_update+0x38c>)
 800d032:	edc3 7a00 	vstr	s15, [r3]
    my = imu.my;
 800d036:	4b8e      	ldr	r3, [pc, #568]	@ (800d270 <imu_ahrs_update+0x370>)
 800d038:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d03c:	ee07 3a90 	vmov	s15, r3
 800d040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d044:	4b92      	ldr	r3, [pc, #584]	@ (800d290 <imu_ahrs_update+0x390>)
 800d046:	edc3 7a00 	vstr	s15, [r3]
    mz = imu.mz;
 800d04a:	4b89      	ldr	r3, [pc, #548]	@ (800d270 <imu_ahrs_update+0x370>)
 800d04c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800d050:	ee07 3a90 	vmov	s15, r3
 800d054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d058:	4b8e      	ldr	r3, [pc, #568]	@ (800d294 <imu_ahrs_update+0x394>)
 800d05a:	edc3 7a00 	vstr	s15, [r3]

    now_update = HAL_GetTick(); // ms
 800d05e:	f7f5 fa53 	bl	8002508 <HAL_GetTick>
 800d062:	4603      	mov	r3, r0
 800d064:	4a8c      	ldr	r2, [pc, #560]	@ (800d298 <imu_ahrs_update+0x398>)
 800d066:	6013      	str	r3, [r2, #0]
    halfT = ((float)(now_update - last_update) / 2000.0f);
 800d068:	4b8b      	ldr	r3, [pc, #556]	@ (800d298 <imu_ahrs_update+0x398>)
 800d06a:	681a      	ldr	r2, [r3, #0]
 800d06c:	4b8b      	ldr	r3, [pc, #556]	@ (800d29c <imu_ahrs_update+0x39c>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	1ad3      	subs	r3, r2, r3
 800d072:	ee07 3a90 	vmov	s15, r3
 800d076:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d07a:	eddf 6a89 	vldr	s13, [pc, #548]	@ 800d2a0 <imu_ahrs_update+0x3a0>
 800d07e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d082:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    last_update = now_update;
 800d086:	4b84      	ldr	r3, [pc, #528]	@ (800d298 <imu_ahrs_update+0x398>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	4a84      	ldr	r2, [pc, #528]	@ (800d29c <imu_ahrs_update+0x39c>)
 800d08c:	6013      	str	r3, [r2, #0]

    /* 快速逆平方根 */
    norm = inv_sqrt(ax * ax + ay * ay + az * az);
 800d08e:	4b7c      	ldr	r3, [pc, #496]	@ (800d280 <imu_ahrs_update+0x380>)
 800d090:	ed93 7a00 	vldr	s14, [r3]
 800d094:	4b7a      	ldr	r3, [pc, #488]	@ (800d280 <imu_ahrs_update+0x380>)
 800d096:	edd3 7a00 	vldr	s15, [r3]
 800d09a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d09e:	4b79      	ldr	r3, [pc, #484]	@ (800d284 <imu_ahrs_update+0x384>)
 800d0a0:	edd3 6a00 	vldr	s13, [r3]
 800d0a4:	4b77      	ldr	r3, [pc, #476]	@ (800d284 <imu_ahrs_update+0x384>)
 800d0a6:	edd3 7a00 	vldr	s15, [r3]
 800d0aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d0ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d0b2:	4b75      	ldr	r3, [pc, #468]	@ (800d288 <imu_ahrs_update+0x388>)
 800d0b4:	edd3 6a00 	vldr	s13, [r3]
 800d0b8:	4b73      	ldr	r3, [pc, #460]	@ (800d288 <imu_ahrs_update+0x388>)
 800d0ba:	edd3 7a00 	vldr	s15, [r3]
 800d0be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d0c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d0c6:	eeb0 0a67 	vmov.f32	s0, s15
 800d0ca:	f7ff fad7 	bl	800c67c <inv_sqrt>
 800d0ce:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    ax = ax * norm;
 800d0d2:	4b6b      	ldr	r3, [pc, #428]	@ (800d280 <imu_ahrs_update+0x380>)
 800d0d4:	ed93 7a00 	vldr	s14, [r3]
 800d0d8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800d0dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0e0:	4b67      	ldr	r3, [pc, #412]	@ (800d280 <imu_ahrs_update+0x380>)
 800d0e2:	edc3 7a00 	vstr	s15, [r3]
    ay = ay * norm;
 800d0e6:	4b67      	ldr	r3, [pc, #412]	@ (800d284 <imu_ahrs_update+0x384>)
 800d0e8:	ed93 7a00 	vldr	s14, [r3]
 800d0ec:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800d0f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0f4:	4b63      	ldr	r3, [pc, #396]	@ (800d284 <imu_ahrs_update+0x384>)
 800d0f6:	edc3 7a00 	vstr	s15, [r3]
    az = az * norm;
 800d0fa:	4b63      	ldr	r3, [pc, #396]	@ (800d288 <imu_ahrs_update+0x388>)
 800d0fc:	ed93 7a00 	vldr	s14, [r3]
 800d100:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800d104:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d108:	4b5f      	ldr	r3, [pc, #380]	@ (800d288 <imu_ahrs_update+0x388>)
 800d10a:	edc3 7a00 	vstr	s15, [r3]
    norm = inv_sqrt(mx * mx + my * my + mz * mz);
    mx = mx * norm;
    my = my * norm;
    mz = mz * norm;
#else
    mx = 0;
 800d10e:	4b5f      	ldr	r3, [pc, #380]	@ (800d28c <imu_ahrs_update+0x38c>)
 800d110:	f04f 0200 	mov.w	r2, #0
 800d114:	601a      	str	r2, [r3, #0]
    my = 0;
 800d116:	4b5e      	ldr	r3, [pc, #376]	@ (800d290 <imu_ahrs_update+0x390>)
 800d118:	f04f 0200 	mov.w	r2, #0
 800d11c:	601a      	str	r2, [r3, #0]
    mz = 0;
 800d11e:	4b5d      	ldr	r3, [pc, #372]	@ (800d294 <imu_ahrs_update+0x394>)
 800d120:	f04f 0200 	mov.w	r2, #0
 800d124:	601a      	str	r2, [r3, #0]
#endif
    /* 计算通量的参考方向*/
    hx = 2.0f * mx * (0.5f - q2q2 - q3q3) + 2.0f * my * (q1q2 - q0q3) + 2.0f * mz * (q1q3 + q0q2);
 800d126:	4b59      	ldr	r3, [pc, #356]	@ (800d28c <imu_ahrs_update+0x38c>)
 800d128:	edd3 7a00 	vldr	s15, [r3]
 800d12c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d130:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800d134:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800d138:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d13c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800d140:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d144:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d148:	4b51      	ldr	r3, [pc, #324]	@ (800d290 <imu_ahrs_update+0x390>)
 800d14a:	edd3 7a00 	vldr	s15, [r3]
 800d14e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d152:	ed97 6a18 	vldr	s12, [r7, #96]	@ 0x60
 800d156:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800d15a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d15e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d162:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d166:	4b4b      	ldr	r3, [pc, #300]	@ (800d294 <imu_ahrs_update+0x394>)
 800d168:	edd3 7a00 	vldr	s15, [r3]
 800d16c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d170:	ed97 6a17 	vldr	s12, [r7, #92]	@ 0x5c
 800d174:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800d178:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d17c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d180:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d184:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    hy = 2.0f * mx * (q1q2 + q0q3) + 2.0f * my * (0.5f - q1q1 - q3q3) + 2.0f * mz * (q2q3 - q0q1);
 800d188:	4b40      	ldr	r3, [pc, #256]	@ (800d28c <imu_ahrs_update+0x38c>)
 800d18a:	edd3 7a00 	vldr	s15, [r3]
 800d18e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d192:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 800d196:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800d19a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d19e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1a2:	4b3b      	ldr	r3, [pc, #236]	@ (800d290 <imu_ahrs_update+0x390>)
 800d1a4:	edd3 7a00 	vldr	s15, [r3]
 800d1a8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d1ac:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800d1b0:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800d1b4:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d1b8:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800d1bc:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d1c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d1c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d1c8:	4b32      	ldr	r3, [pc, #200]	@ (800d294 <imu_ahrs_update+0x394>)
 800d1ca:	edd3 7a00 	vldr	s15, [r3]
 800d1ce:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d1d2:	ed97 6a15 	vldr	s12, [r7, #84]	@ 0x54
 800d1d6:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800d1da:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d1de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d1e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d1e6:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    hz = 2.0f * mx * (q1q3 - q0q2) + 2.0f * my * (q2q3 + q0q1) + 2.0f * mz * (0.5f - q1q1 - q2q2);
 800d1ea:	4b28      	ldr	r3, [pc, #160]	@ (800d28c <imu_ahrs_update+0x38c>)
 800d1ec:	edd3 7a00 	vldr	s15, [r3]
 800d1f0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d1f4:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 800d1f8:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800d1fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d200:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d204:	4b22      	ldr	r3, [pc, #136]	@ (800d290 <imu_ahrs_update+0x390>)
 800d206:	edd3 7a00 	vldr	s15, [r3]
 800d20a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d20e:	ed97 6a15 	vldr	s12, [r7, #84]	@ 0x54
 800d212:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800d216:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d21a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d21e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d222:	4b1c      	ldr	r3, [pc, #112]	@ (800d294 <imu_ahrs_update+0x394>)
 800d224:	edd3 7a00 	vldr	s15, [r3]
 800d228:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d22c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800d230:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800d234:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d238:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800d23c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d240:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d244:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d248:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    bx = sqrt((hx * hx) + (hy * hy));
 800d24c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800d250:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800d254:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800d258:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d25c:	e022      	b.n	800d2a4 <imu_ahrs_update+0x3a4>
 800d25e:	bf00      	nop
 800d260:	20000090 	.word	0x20000090
 800d264:	200009ec 	.word	0x200009ec
 800d268:	200009f0 	.word	0x200009f0
 800d26c:	200009f4 	.word	0x200009f4
 800d270:	20000a34 	.word	0x20000a34
 800d274:	20000a6c 	.word	0x20000a6c
 800d278:	20000a70 	.word	0x20000a70
 800d27c:	20000a74 	.word	0x20000a74
 800d280:	20000a78 	.word	0x20000a78
 800d284:	20000a7c 	.word	0x20000a7c
 800d288:	20000a80 	.word	0x20000a80
 800d28c:	20000a84 	.word	0x20000a84
 800d290:	20000a88 	.word	0x20000a88
 800d294:	20000a8c 	.word	0x20000a8c
 800d298:	20000a94 	.word	0x20000a94
 800d29c:	20000a90 	.word	0x20000a90
 800d2a0:	44fa0000 	.word	0x44fa0000
 800d2a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d2a8:	ee17 0a90 	vmov	r0, s15
 800d2ac:	f7f3 f974 	bl	8000598 <__aeabi_f2d>
 800d2b0:	4602      	mov	r2, r0
 800d2b2:	460b      	mov	r3, r1
 800d2b4:	ec43 2b10 	vmov	d0, r2, r3
 800d2b8:	f005 faa0 	bl	80127fc <sqrt>
 800d2bc:	ec53 2b10 	vmov	r2, r3, d0
 800d2c0:	4610      	mov	r0, r2
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	f7f3 fcb8 	bl	8000c38 <__aeabi_d2f>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	63bb      	str	r3, [r7, #56]	@ 0x38
    bz = hz;
 800d2cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2ce:	637b      	str	r3, [r7, #52]	@ 0x34

    /* 估计重力和通量方向(v和w)   */
    vx = 2.0f * (q1q3 - q0q2);
 800d2d0:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800d2d4:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800d2d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d2e0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    vy = 2.0f * (q0q1 + q2q3);
 800d2e4:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800d2e8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800d2ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d2f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d2f4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    vz = q0q0 - q1q1 - q2q2 + q3q3;
 800d2f8:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 800d2fc:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800d300:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d304:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800d308:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d30c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800d310:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d314:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    wx = 2.0f * bx * (0.5f - q2q2 - q3q3) + 2.0f * bz * (q1q3 - q0q2);
 800d318:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800d31c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d320:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800d324:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800d328:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d32c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800d330:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d334:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d338:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800d33c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d340:	ed97 6a17 	vldr	s12, [r7, #92]	@ 0x5c
 800d344:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800d348:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d34c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d350:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d354:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    wy = 2.0f * bx * (q1q2 - q0q3) + 2.0f * bz * (q0q1 + q2q3);
 800d358:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800d35c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d360:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 800d364:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800d368:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d36c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d370:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800d374:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d378:	ed97 6a1c 	vldr	s12, [r7, #112]	@ 0x70
 800d37c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800d380:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d384:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d38c:	edc7 7a08 	vstr	s15, [r7, #32]
    wz = 2.0f * bx * (q0q2 + q1q3) + 2.0f * bz * (0.5f - q1q1 - q2q2);
 800d390:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800d394:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d398:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 800d39c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800d3a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d3a8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800d3ac:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d3b0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800d3b4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800d3b8:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d3bc:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800d3c0:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d3c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d3c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3cc:	edc7 7a07 	vstr	s15, [r7, #28]

    /*
     * 误差是场的参考方向与传感器测量方向的叉积之和
     */
    ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 800d3d0:	4bde      	ldr	r3, [pc, #888]	@ (800d74c <imu_ahrs_update+0x84c>)
 800d3d2:	ed93 7a00 	vldr	s14, [r3]
 800d3d6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800d3da:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d3de:	4bdc      	ldr	r3, [pc, #880]	@ (800d750 <imu_ahrs_update+0x850>)
 800d3e0:	edd3 6a00 	vldr	s13, [r3]
 800d3e4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d3e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d3ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d3f0:	4bd8      	ldr	r3, [pc, #864]	@ (800d754 <imu_ahrs_update+0x854>)
 800d3f2:	edd3 6a00 	vldr	s13, [r3]
 800d3f6:	edd7 7a07 	vldr	s15, [r7, #28]
 800d3fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d3fe:	4bd6      	ldr	r3, [pc, #856]	@ (800d758 <imu_ahrs_update+0x858>)
 800d400:	ed93 6a00 	vldr	s12, [r3]
 800d404:	edd7 7a08 	vldr	s15, [r7, #32]
 800d408:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d40c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d410:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d414:	edc7 7a06 	vstr	s15, [r7, #24]
    ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 800d418:	4bcd      	ldr	r3, [pc, #820]	@ (800d750 <imu_ahrs_update+0x850>)
 800d41a:	ed93 7a00 	vldr	s14, [r3]
 800d41e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d422:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d426:	4bcd      	ldr	r3, [pc, #820]	@ (800d75c <imu_ahrs_update+0x85c>)
 800d428:	edd3 6a00 	vldr	s13, [r3]
 800d42c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800d430:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d434:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d438:	4bc7      	ldr	r3, [pc, #796]	@ (800d758 <imu_ahrs_update+0x858>)
 800d43a:	edd3 6a00 	vldr	s13, [r3]
 800d43e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d442:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d446:	4bc6      	ldr	r3, [pc, #792]	@ (800d760 <imu_ahrs_update+0x860>)
 800d448:	ed93 6a00 	vldr	s12, [r3]
 800d44c:	edd7 7a07 	vldr	s15, [r7, #28]
 800d450:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d454:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d45c:	edc7 7a05 	vstr	s15, [r7, #20]
    ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 800d460:	4bbe      	ldr	r3, [pc, #760]	@ (800d75c <imu_ahrs_update+0x85c>)
 800d462:	ed93 7a00 	vldr	s14, [r3]
 800d466:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d46a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d46e:	4bb7      	ldr	r3, [pc, #732]	@ (800d74c <imu_ahrs_update+0x84c>)
 800d470:	edd3 6a00 	vldr	s13, [r3]
 800d474:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d478:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d47c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d480:	4bb7      	ldr	r3, [pc, #732]	@ (800d760 <imu_ahrs_update+0x860>)
 800d482:	edd3 6a00 	vldr	s13, [r3]
 800d486:	edd7 7a08 	vldr	s15, [r7, #32]
 800d48a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d48e:	4bb1      	ldr	r3, [pc, #708]	@ (800d754 <imu_ahrs_update+0x854>)
 800d490:	ed93 6a00 	vldr	s12, [r3]
 800d494:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d498:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d49c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d4a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d4a4:	edc7 7a04 	vstr	s15, [r7, #16]

    /* PI */
    if (ex != 0.0f && ey != 0.0f && ez != 0.0f)
 800d4a8:	edd7 7a06 	vldr	s15, [r7, #24]
 800d4ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4b4:	d076      	beq.n	800d5a4 <imu_ahrs_update+0x6a4>
 800d4b6:	edd7 7a05 	vldr	s15, [r7, #20]
 800d4ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4c2:	d06f      	beq.n	800d5a4 <imu_ahrs_update+0x6a4>
 800d4c4:	edd7 7a04 	vldr	s15, [r7, #16]
 800d4c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4d0:	d068      	beq.n	800d5a4 <imu_ahrs_update+0x6a4>
    {
        exInt = exInt + ex * Ki * halfT;
 800d4d2:	edd7 7a06 	vldr	s15, [r7, #24]
 800d4d6:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 800d764 <imu_ahrs_update+0x864>
 800d4da:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d4de:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800d4e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d4e6:	4ba0      	ldr	r3, [pc, #640]	@ (800d768 <imu_ahrs_update+0x868>)
 800d4e8:	edd3 7a00 	vldr	s15, [r3]
 800d4ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d4f0:	4b9d      	ldr	r3, [pc, #628]	@ (800d768 <imu_ahrs_update+0x868>)
 800d4f2:	edc3 7a00 	vstr	s15, [r3]
        eyInt = eyInt + ey * Ki * halfT;
 800d4f6:	edd7 7a05 	vldr	s15, [r7, #20]
 800d4fa:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800d764 <imu_ahrs_update+0x864>
 800d4fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d502:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800d506:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d50a:	4b98      	ldr	r3, [pc, #608]	@ (800d76c <imu_ahrs_update+0x86c>)
 800d50c:	edd3 7a00 	vldr	s15, [r3]
 800d510:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d514:	4b95      	ldr	r3, [pc, #596]	@ (800d76c <imu_ahrs_update+0x86c>)
 800d516:	edc3 7a00 	vstr	s15, [r3]
        ezInt = ezInt + ez * Ki * halfT;
 800d51a:	edd7 7a04 	vldr	s15, [r7, #16]
 800d51e:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 800d764 <imu_ahrs_update+0x864>
 800d522:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d526:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800d52a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d52e:	4b90      	ldr	r3, [pc, #576]	@ (800d770 <imu_ahrs_update+0x870>)
 800d530:	edd3 7a00 	vldr	s15, [r3]
 800d534:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d538:	4b8d      	ldr	r3, [pc, #564]	@ (800d770 <imu_ahrs_update+0x870>)
 800d53a:	edc3 7a00 	vstr	s15, [r3]

        gx = gx + Kp * ex + exInt;
 800d53e:	edd7 7a06 	vldr	s15, [r7, #24]
 800d542:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d546:	4b8b      	ldr	r3, [pc, #556]	@ (800d774 <imu_ahrs_update+0x874>)
 800d548:	edd3 7a00 	vldr	s15, [r3]
 800d54c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d550:	4b85      	ldr	r3, [pc, #532]	@ (800d768 <imu_ahrs_update+0x868>)
 800d552:	edd3 7a00 	vldr	s15, [r3]
 800d556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d55a:	4b86      	ldr	r3, [pc, #536]	@ (800d774 <imu_ahrs_update+0x874>)
 800d55c:	edc3 7a00 	vstr	s15, [r3]
        gy = gy + Kp * ey + eyInt;
 800d560:	edd7 7a05 	vldr	s15, [r7, #20]
 800d564:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d568:	4b83      	ldr	r3, [pc, #524]	@ (800d778 <imu_ahrs_update+0x878>)
 800d56a:	edd3 7a00 	vldr	s15, [r3]
 800d56e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d572:	4b7e      	ldr	r3, [pc, #504]	@ (800d76c <imu_ahrs_update+0x86c>)
 800d574:	edd3 7a00 	vldr	s15, [r3]
 800d578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d57c:	4b7e      	ldr	r3, [pc, #504]	@ (800d778 <imu_ahrs_update+0x878>)
 800d57e:	edc3 7a00 	vstr	s15, [r3]
        gz = gz + Kp * ez + ezInt;
 800d582:	edd7 7a04 	vldr	s15, [r7, #16]
 800d586:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d58a:	4b7c      	ldr	r3, [pc, #496]	@ (800d77c <imu_ahrs_update+0x87c>)
 800d58c:	edd3 7a00 	vldr	s15, [r3]
 800d590:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d594:	4b76      	ldr	r3, [pc, #472]	@ (800d770 <imu_ahrs_update+0x870>)
 800d596:	edd3 7a00 	vldr	s15, [r3]
 800d59a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d59e:	4b77      	ldr	r3, [pc, #476]	@ (800d77c <imu_ahrs_update+0x87c>)
 800d5a0:	edc3 7a00 	vstr	s15, [r3]
    }

    tempq0 = q0 + (-q1 * gx - q2 * gy - q3 * gz) * halfT;
 800d5a4:	4b76      	ldr	r3, [pc, #472]	@ (800d780 <imu_ahrs_update+0x880>)
 800d5a6:	edd3 7a00 	vldr	s15, [r3]
 800d5aa:	eeb1 7a67 	vneg.f32	s14, s15
 800d5ae:	4b71      	ldr	r3, [pc, #452]	@ (800d774 <imu_ahrs_update+0x874>)
 800d5b0:	edd3 7a00 	vldr	s15, [r3]
 800d5b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5b8:	4b72      	ldr	r3, [pc, #456]	@ (800d784 <imu_ahrs_update+0x884>)
 800d5ba:	edd3 6a00 	vldr	s13, [r3]
 800d5be:	4b6e      	ldr	r3, [pc, #440]	@ (800d778 <imu_ahrs_update+0x878>)
 800d5c0:	edd3 7a00 	vldr	s15, [r3]
 800d5c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d5c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d5cc:	4b6e      	ldr	r3, [pc, #440]	@ (800d788 <imu_ahrs_update+0x888>)
 800d5ce:	edd3 6a00 	vldr	s13, [r3]
 800d5d2:	4b6a      	ldr	r3, [pc, #424]	@ (800d77c <imu_ahrs_update+0x87c>)
 800d5d4:	edd3 7a00 	vldr	s15, [r3]
 800d5d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d5dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d5e0:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800d5e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5e8:	4b68      	ldr	r3, [pc, #416]	@ (800d78c <imu_ahrs_update+0x88c>)
 800d5ea:	edd3 7a00 	vldr	s15, [r3]
 800d5ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5f2:	edc7 7a03 	vstr	s15, [r7, #12]
    tempq1 = q1 + (q0 * gx + q2 * gz - q3 * gy) * halfT;
 800d5f6:	4b65      	ldr	r3, [pc, #404]	@ (800d78c <imu_ahrs_update+0x88c>)
 800d5f8:	ed93 7a00 	vldr	s14, [r3]
 800d5fc:	4b5d      	ldr	r3, [pc, #372]	@ (800d774 <imu_ahrs_update+0x874>)
 800d5fe:	edd3 7a00 	vldr	s15, [r3]
 800d602:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d606:	4b5f      	ldr	r3, [pc, #380]	@ (800d784 <imu_ahrs_update+0x884>)
 800d608:	edd3 6a00 	vldr	s13, [r3]
 800d60c:	4b5b      	ldr	r3, [pc, #364]	@ (800d77c <imu_ahrs_update+0x87c>)
 800d60e:	edd3 7a00 	vldr	s15, [r3]
 800d612:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d616:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d61a:	4b5b      	ldr	r3, [pc, #364]	@ (800d788 <imu_ahrs_update+0x888>)
 800d61c:	edd3 6a00 	vldr	s13, [r3]
 800d620:	4b55      	ldr	r3, [pc, #340]	@ (800d778 <imu_ahrs_update+0x878>)
 800d622:	edd3 7a00 	vldr	s15, [r3]
 800d626:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d62a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d62e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800d632:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d636:	4b52      	ldr	r3, [pc, #328]	@ (800d780 <imu_ahrs_update+0x880>)
 800d638:	edd3 7a00 	vldr	s15, [r3]
 800d63c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d640:	edc7 7a02 	vstr	s15, [r7, #8]
    tempq2 = q2 + (q0 * gy - q1 * gz + q3 * gx) * halfT;
 800d644:	4b51      	ldr	r3, [pc, #324]	@ (800d78c <imu_ahrs_update+0x88c>)
 800d646:	ed93 7a00 	vldr	s14, [r3]
 800d64a:	4b4b      	ldr	r3, [pc, #300]	@ (800d778 <imu_ahrs_update+0x878>)
 800d64c:	edd3 7a00 	vldr	s15, [r3]
 800d650:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d654:	4b4a      	ldr	r3, [pc, #296]	@ (800d780 <imu_ahrs_update+0x880>)
 800d656:	edd3 6a00 	vldr	s13, [r3]
 800d65a:	4b48      	ldr	r3, [pc, #288]	@ (800d77c <imu_ahrs_update+0x87c>)
 800d65c:	edd3 7a00 	vldr	s15, [r3]
 800d660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d664:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d668:	4b47      	ldr	r3, [pc, #284]	@ (800d788 <imu_ahrs_update+0x888>)
 800d66a:	edd3 6a00 	vldr	s13, [r3]
 800d66e:	4b41      	ldr	r3, [pc, #260]	@ (800d774 <imu_ahrs_update+0x874>)
 800d670:	edd3 7a00 	vldr	s15, [r3]
 800d674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d678:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d67c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800d680:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d684:	4b3f      	ldr	r3, [pc, #252]	@ (800d784 <imu_ahrs_update+0x884>)
 800d686:	edd3 7a00 	vldr	s15, [r3]
 800d68a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d68e:	edc7 7a01 	vstr	s15, [r7, #4]
    tempq3 = q3 + (q0 * gz + q1 * gy - q2 * gx) * halfT;
 800d692:	4b3e      	ldr	r3, [pc, #248]	@ (800d78c <imu_ahrs_update+0x88c>)
 800d694:	ed93 7a00 	vldr	s14, [r3]
 800d698:	4b38      	ldr	r3, [pc, #224]	@ (800d77c <imu_ahrs_update+0x87c>)
 800d69a:	edd3 7a00 	vldr	s15, [r3]
 800d69e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6a2:	4b37      	ldr	r3, [pc, #220]	@ (800d780 <imu_ahrs_update+0x880>)
 800d6a4:	edd3 6a00 	vldr	s13, [r3]
 800d6a8:	4b33      	ldr	r3, [pc, #204]	@ (800d778 <imu_ahrs_update+0x878>)
 800d6aa:	edd3 7a00 	vldr	s15, [r3]
 800d6ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d6b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d6b6:	4b33      	ldr	r3, [pc, #204]	@ (800d784 <imu_ahrs_update+0x884>)
 800d6b8:	edd3 6a00 	vldr	s13, [r3]
 800d6bc:	4b2d      	ldr	r3, [pc, #180]	@ (800d774 <imu_ahrs_update+0x874>)
 800d6be:	edd3 7a00 	vldr	s15, [r3]
 800d6c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d6c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d6ca:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800d6ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6d2:	4b2d      	ldr	r3, [pc, #180]	@ (800d788 <imu_ahrs_update+0x888>)
 800d6d4:	edd3 7a00 	vldr	s15, [r3]
 800d6d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d6dc:	edc7 7a00 	vstr	s15, [r7]

    /*将四元数标准化 */
    norm = inv_sqrt(tempq0 * tempq0 + tempq1 * tempq1 + tempq2 * tempq2 + tempq3 * tempq3);
 800d6e0:	edd7 7a03 	vldr	s15, [r7, #12]
 800d6e4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800d6e8:	edd7 7a02 	vldr	s15, [r7, #8]
 800d6ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d6f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d6f4:	edd7 7a01 	vldr	s15, [r7, #4]
 800d6f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d6fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d700:	edd7 7a00 	vldr	s15, [r7]
 800d704:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d70c:	eeb0 0a67 	vmov.f32	s0, s15
 800d710:	f7fe ffb4 	bl	800c67c <inv_sqrt>
 800d714:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    q0 = tempq0 * norm;
 800d718:	ed97 7a03 	vldr	s14, [r7, #12]
 800d71c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800d720:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d724:	4b19      	ldr	r3, [pc, #100]	@ (800d78c <imu_ahrs_update+0x88c>)
 800d726:	edc3 7a00 	vstr	s15, [r3]
    q1 = tempq1 * norm;
 800d72a:	ed97 7a02 	vldr	s14, [r7, #8]
 800d72e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800d732:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d736:	4b12      	ldr	r3, [pc, #72]	@ (800d780 <imu_ahrs_update+0x880>)
 800d738:	edc3 7a00 	vstr	s15, [r3]
    q2 = tempq2 * norm;
 800d73c:	ed97 7a01 	vldr	s14, [r7, #4]
 800d740:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800d744:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d748:	e022      	b.n	800d790 <imu_ahrs_update+0x890>
 800d74a:	bf00      	nop
 800d74c:	20000a7c 	.word	0x20000a7c
 800d750:	20000a80 	.word	0x20000a80
 800d754:	20000a88 	.word	0x20000a88
 800d758:	20000a8c 	.word	0x20000a8c
 800d75c:	20000a78 	.word	0x20000a78
 800d760:	20000a84 	.word	0x20000a84
 800d764:	3c23d70a 	.word	0x3c23d70a
 800d768:	200009f8 	.word	0x200009f8
 800d76c:	200009fc 	.word	0x200009fc
 800d770:	20000a00 	.word	0x20000a00
 800d774:	20000a6c 	.word	0x20000a6c
 800d778:	20000a70 	.word	0x20000a70
 800d77c:	20000a74 	.word	0x20000a74
 800d780:	200009ec 	.word	0x200009ec
 800d784:	200009f0 	.word	0x200009f0
 800d788:	200009f4 	.word	0x200009f4
 800d78c:	20000090 	.word	0x20000090
 800d790:	4b07      	ldr	r3, [pc, #28]	@ (800d7b0 <imu_ahrs_update+0x8b0>)
 800d792:	edc3 7a00 	vstr	s15, [r3]
    q3 = tempq3 * norm;
 800d796:	ed97 7a00 	vldr	s14, [r7]
 800d79a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800d79e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7a2:	4b04      	ldr	r3, [pc, #16]	@ (800d7b4 <imu_ahrs_update+0x8b4>)
 800d7a4:	edc3 7a00 	vstr	s15, [r3]
}
 800d7a8:	bf00      	nop
 800d7aa:	3778      	adds	r7, #120	@ 0x78
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}
 800d7b0:	200009f0 	.word	0x200009f0
 800d7b4:	200009f4 	.word	0x200009f4

0800d7b8 <imu_attitude_update>:

// 更新imu的态度
void imu_attitude_update(void)
{
 800d7b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d7bc:	af00      	add	r7, sp, #0
    /* yaw    -pi----pi */
    imu.yaw = -atan2(2 * q1 * q2 + 2 * q0 * q3, -2 * q2 * q2 - 2 * q3 * q3 + 1) * 57.3;
 800d7be:	4b76      	ldr	r3, [pc, #472]	@ (800d998 <imu_attitude_update+0x1e0>)
 800d7c0:	edd3 7a00 	vldr	s15, [r3]
 800d7c4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d7c8:	4b74      	ldr	r3, [pc, #464]	@ (800d99c <imu_attitude_update+0x1e4>)
 800d7ca:	edd3 7a00 	vldr	s15, [r3]
 800d7ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7d2:	4b73      	ldr	r3, [pc, #460]	@ (800d9a0 <imu_attitude_update+0x1e8>)
 800d7d4:	edd3 7a00 	vldr	s15, [r3]
 800d7d8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d7dc:	4b71      	ldr	r3, [pc, #452]	@ (800d9a4 <imu_attitude_update+0x1ec>)
 800d7de:	edd3 7a00 	vldr	s15, [r3]
 800d7e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d7e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7ea:	ee17 0a90 	vmov	r0, s15
 800d7ee:	f7f2 fed3 	bl	8000598 <__aeabi_f2d>
 800d7f2:	4682      	mov	sl, r0
 800d7f4:	468b      	mov	fp, r1
 800d7f6:	4b69      	ldr	r3, [pc, #420]	@ (800d99c <imu_attitude_update+0x1e4>)
 800d7f8:	edd3 7a00 	vldr	s15, [r3]
 800d7fc:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800d800:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d804:	4b65      	ldr	r3, [pc, #404]	@ (800d99c <imu_attitude_update+0x1e4>)
 800d806:	edd3 7a00 	vldr	s15, [r3]
 800d80a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d80e:	4b65      	ldr	r3, [pc, #404]	@ (800d9a4 <imu_attitude_update+0x1ec>)
 800d810:	edd3 7a00 	vldr	s15, [r3]
 800d814:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d818:	4b62      	ldr	r3, [pc, #392]	@ (800d9a4 <imu_attitude_update+0x1ec>)
 800d81a:	edd3 7a00 	vldr	s15, [r3]
 800d81e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d822:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d826:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d82a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d82e:	ee17 0a90 	vmov	r0, s15
 800d832:	f7f2 feb1 	bl	8000598 <__aeabi_f2d>
 800d836:	4602      	mov	r2, r0
 800d838:	460b      	mov	r3, r1
 800d83a:	ec43 2b11 	vmov	d1, r2, r3
 800d83e:	ec4b ab10 	vmov	d0, sl, fp
 800d842:	f004 ffab 	bl	801279c <atan2>
 800d846:	ec53 2b10 	vmov	r2, r3, d0
 800d84a:	4690      	mov	r8, r2
 800d84c:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800d850:	a34f      	add	r3, pc, #316	@ (adr r3, 800d990 <imu_attitude_update+0x1d8>)
 800d852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d856:	4640      	mov	r0, r8
 800d858:	4649      	mov	r1, r9
 800d85a:	f7f2 fef5 	bl	8000648 <__aeabi_dmul>
 800d85e:	4602      	mov	r2, r0
 800d860:	460b      	mov	r3, r1
 800d862:	4610      	mov	r0, r2
 800d864:	4619      	mov	r1, r3
 800d866:	f7f3 f9e7 	bl	8000c38 <__aeabi_d2f>
 800d86a:	4603      	mov	r3, r0
 800d86c:	4a4e      	ldr	r2, [pc, #312]	@ (800d9a8 <imu_attitude_update+0x1f0>)
 800d86e:	6313      	str	r3, [r2, #48]	@ 0x30
    /* pitch  -pi/2----pi/2 */
    imu.pit = -asin(-2 * q1 * q3 + 2 * q0 * q2) * 57.3;
 800d870:	4b49      	ldr	r3, [pc, #292]	@ (800d998 <imu_attitude_update+0x1e0>)
 800d872:	edd3 7a00 	vldr	s15, [r3]
 800d876:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800d87a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d87e:	4b49      	ldr	r3, [pc, #292]	@ (800d9a4 <imu_attitude_update+0x1ec>)
 800d880:	edd3 7a00 	vldr	s15, [r3]
 800d884:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d888:	4b45      	ldr	r3, [pc, #276]	@ (800d9a0 <imu_attitude_update+0x1e8>)
 800d88a:	edd3 7a00 	vldr	s15, [r3]
 800d88e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d892:	4b42      	ldr	r3, [pc, #264]	@ (800d99c <imu_attitude_update+0x1e4>)
 800d894:	edd3 7a00 	vldr	s15, [r3]
 800d898:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d89c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8a0:	ee17 0a90 	vmov	r0, s15
 800d8a4:	f7f2 fe78 	bl	8000598 <__aeabi_f2d>
 800d8a8:	4602      	mov	r2, r0
 800d8aa:	460b      	mov	r3, r1
 800d8ac:	ec43 2b10 	vmov	d0, r2, r3
 800d8b0:	f004 ff40 	bl	8012734 <asin>
 800d8b4:	ec53 2b10 	vmov	r2, r3, d0
 800d8b8:	4614      	mov	r4, r2
 800d8ba:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800d8be:	a334      	add	r3, pc, #208	@ (adr r3, 800d990 <imu_attitude_update+0x1d8>)
 800d8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	4629      	mov	r1, r5
 800d8c8:	f7f2 febe 	bl	8000648 <__aeabi_dmul>
 800d8cc:	4602      	mov	r2, r0
 800d8ce:	460b      	mov	r3, r1
 800d8d0:	4610      	mov	r0, r2
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	f7f3 f9b0 	bl	8000c38 <__aeabi_d2f>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	4a33      	ldr	r2, [pc, #204]	@ (800d9a8 <imu_attitude_update+0x1f0>)
 800d8dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    /* roll   -pi----pi  */
    imu.rol = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2 * q2 + 1) * 57.3;
 800d8de:	4b2f      	ldr	r3, [pc, #188]	@ (800d99c <imu_attitude_update+0x1e4>)
 800d8e0:	edd3 7a00 	vldr	s15, [r3]
 800d8e4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d8e8:	4b2e      	ldr	r3, [pc, #184]	@ (800d9a4 <imu_attitude_update+0x1ec>)
 800d8ea:	edd3 7a00 	vldr	s15, [r3]
 800d8ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d8f2:	4b2b      	ldr	r3, [pc, #172]	@ (800d9a0 <imu_attitude_update+0x1e8>)
 800d8f4:	edd3 7a00 	vldr	s15, [r3]
 800d8f8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d8fc:	4b26      	ldr	r3, [pc, #152]	@ (800d998 <imu_attitude_update+0x1e0>)
 800d8fe:	edd3 7a00 	vldr	s15, [r3]
 800d902:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d90a:	ee17 0a90 	vmov	r0, s15
 800d90e:	f7f2 fe43 	bl	8000598 <__aeabi_f2d>
 800d912:	4604      	mov	r4, r0
 800d914:	460d      	mov	r5, r1
 800d916:	4b20      	ldr	r3, [pc, #128]	@ (800d998 <imu_attitude_update+0x1e0>)
 800d918:	edd3 7a00 	vldr	s15, [r3]
 800d91c:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800d920:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d924:	4b1c      	ldr	r3, [pc, #112]	@ (800d998 <imu_attitude_update+0x1e0>)
 800d926:	edd3 7a00 	vldr	s15, [r3]
 800d92a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d92e:	4b1b      	ldr	r3, [pc, #108]	@ (800d99c <imu_attitude_update+0x1e4>)
 800d930:	edd3 7a00 	vldr	s15, [r3]
 800d934:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d938:	4b18      	ldr	r3, [pc, #96]	@ (800d99c <imu_attitude_update+0x1e4>)
 800d93a:	edd3 7a00 	vldr	s15, [r3]
 800d93e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d942:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d946:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d94a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d94e:	ee17 0a90 	vmov	r0, s15
 800d952:	f7f2 fe21 	bl	8000598 <__aeabi_f2d>
 800d956:	4602      	mov	r2, r0
 800d958:	460b      	mov	r3, r1
 800d95a:	ec43 2b11 	vmov	d1, r2, r3
 800d95e:	ec45 4b10 	vmov	d0, r4, r5
 800d962:	f004 ff1b 	bl	801279c <atan2>
 800d966:	ec51 0b10 	vmov	r0, r1, d0
 800d96a:	a309      	add	r3, pc, #36	@ (adr r3, 800d990 <imu_attitude_update+0x1d8>)
 800d96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d970:	f7f2 fe6a 	bl	8000648 <__aeabi_dmul>
 800d974:	4602      	mov	r2, r0
 800d976:	460b      	mov	r3, r1
 800d978:	4610      	mov	r0, r2
 800d97a:	4619      	mov	r1, r3
 800d97c:	f7f3 f95c 	bl	8000c38 <__aeabi_d2f>
 800d980:	4603      	mov	r3, r0
 800d982:	4a09      	ldr	r2, [pc, #36]	@ (800d9a8 <imu_attitude_update+0x1f0>)
 800d984:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800d986:	bf00      	nop
 800d988:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d98c:	f3af 8000 	nop.w
 800d990:	66666666 	.word	0x66666666
 800d994:	404ca666 	.word	0x404ca666
 800d998:	200009ec 	.word	0x200009ec
 800d99c:	200009f0 	.word	0x200009f0
 800d9a0:	20000090 	.word	0x20000090
 800d9a4:	200009f4 	.word	0x200009f4
 800d9a8:	20000a34 	.word	0x20000a34

0800d9ac <_1_MT6701_GetRawData>:
#include "focLib.h"
#include "time_utils.h"
// static unsigned int rotationCount, rotationCount_Last;

uint16_t _1_MT6701_GetRawData(void)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b084      	sub	sp, #16
 800d9b0:	af02      	add	r7, sp, #8
    uint16_t rawData;
    uint16_t txData = 0xFFFF;
 800d9b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d9b6:	803b      	strh	r3, [r7, #0]
    uint16_t timeOut = 200;
 800d9b8:	23c8      	movs	r3, #200	@ 0xc8
 800d9ba:	80fb      	strh	r3, [r7, #6]

    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800d9bc:	e009      	b.n	800d9d2 <_1_MT6701_GetRawData+0x26>
    {
        if (timeOut-- == 0)
 800d9be:	88fb      	ldrh	r3, [r7, #6]
 800d9c0:	1e5a      	subs	r2, r3, #1
 800d9c2:	80fa      	strh	r2, [r7, #6]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d104      	bne.n	800d9d2 <_1_MT6701_GetRawData+0x26>
        {
            printLog("SPI state error!\r\n");
 800d9c8:	4819      	ldr	r0, [pc, #100]	@ (800da30 <_1_MT6701_GetRawData+0x84>)
 800d9ca:	f7fe fbf3 	bl	800c1b4 <printLog>
            return 0; // 在超时时直接返回，避免继续执行后续代码
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	e02a      	b.n	800da28 <_1_MT6701_GetRawData+0x7c>
    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800d9d2:	4818      	ldr	r0, [pc, #96]	@ (800da34 <_1_MT6701_GetRawData+0x88>)
 800d9d4:	f7f9 fc5f 	bl	8007296 <HAL_SPI_GetState>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	2b01      	cmp	r3, #1
 800d9dc:	d1ef      	bne.n	800d9be <_1_MT6701_GetRawData+0x12>
        }
    }

    _1_MT6701_CS_Enable;
 800d9de:	2200      	movs	r2, #0
 800d9e0:	2108      	movs	r1, #8
 800d9e2:	4815      	ldr	r0, [pc, #84]	@ (800da38 <_1_MT6701_GetRawData+0x8c>)
 800d9e4:	f7f8 f9a0 	bl	8005d28 <HAL_GPIO_WritePin>

    HAL_StatusTypeDef spiStatus = HAL_SPI_TransmitReceive(&hspi3, (uint8_t *)&txData, (uint8_t *)&rawData, 1, HAL_MAX_DELAY);
 800d9e8:	1cba      	adds	r2, r7, #2
 800d9ea:	4639      	mov	r1, r7
 800d9ec:	f04f 33ff 	mov.w	r3, #4294967295
 800d9f0:	9300      	str	r3, [sp, #0]
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	480f      	ldr	r0, [pc, #60]	@ (800da34 <_1_MT6701_GetRawData+0x88>)
 800d9f6:	f7f9 fa2c 	bl	8006e52 <HAL_SPI_TransmitReceive>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	717b      	strb	r3, [r7, #5]
    if (spiStatus != HAL_OK)
 800d9fe:	797b      	ldrb	r3, [r7, #5]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d009      	beq.n	800da18 <_1_MT6701_GetRawData+0x6c>
    {
        _1_MT6701_CS_Disable;
 800da04:	2201      	movs	r2, #1
 800da06:	2108      	movs	r1, #8
 800da08:	480b      	ldr	r0, [pc, #44]	@ (800da38 <_1_MT6701_GetRawData+0x8c>)
 800da0a:	f7f8 f98d 	bl	8005d28 <HAL_GPIO_WritePin>
        printLog("MT6701 read data error!\r\n");
 800da0e:	480b      	ldr	r0, [pc, #44]	@ (800da3c <_1_MT6701_GetRawData+0x90>)
 800da10:	f7fe fbd0 	bl	800c1b4 <printLog>
        return 0; // 在SPI传输错误时直接返回，避免继续执行后续代码
 800da14:	2300      	movs	r3, #0
 800da16:	e007      	b.n	800da28 <_1_MT6701_GetRawData+0x7c>
    }

    _1_MT6701_CS_Disable;
 800da18:	2201      	movs	r2, #1
 800da1a:	2108      	movs	r1, #8
 800da1c:	4806      	ldr	r0, [pc, #24]	@ (800da38 <_1_MT6701_GetRawData+0x8c>)
 800da1e:	f7f8 f983 	bl	8005d28 <HAL_GPIO_WritePin>

    return rawData >> 2; // 取高14位的角度数据
 800da22:	887b      	ldrh	r3, [r7, #2]
 800da24:	089b      	lsrs	r3, r3, #2
 800da26:	b29b      	uxth	r3, r3
}
 800da28:	4618      	mov	r0, r3
 800da2a:	3708      	adds	r7, #8
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}
 800da30:	08013640 	.word	0x08013640
 800da34:	200003f0 	.word	0x200003f0
 800da38:	48000400 	.word	0x48000400
 800da3c:	08013654 	.word	0x08013654

0800da40 <_1_MT6701_GetRawAngle>:

// 将传感器原始数据转化为弧度
float _1_MT6701_GetRawAngle(void)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b082      	sub	sp, #8
 800da44:	af00      	add	r7, sp, #0
    uint16_t rawData = _1_MT6701_GetRawData();
 800da46:	f7ff ffb1 	bl	800d9ac <_1_MT6701_GetRawData>
 800da4a:	4603      	mov	r3, r0
 800da4c:	80fb      	strh	r3, [r7, #6]
    return (float)rawData / 16384.0f * _2PI;
 800da4e:	88fb      	ldrh	r3, [r7, #6]
 800da50:	ee07 3a90 	vmov	s15, r3
 800da54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800da58:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800da74 <_1_MT6701_GetRawAngle+0x34>
 800da5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800da60:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800da78 <_1_MT6701_GetRawAngle+0x38>
 800da64:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800da68:	eeb0 0a67 	vmov.f32	s0, s15
 800da6c:	3708      	adds	r7, #8
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}
 800da72:	bf00      	nop
 800da74:	46800000 	.word	0x46800000
 800da78:	40c90fdb 	.word	0x40c90fdb

0800da7c <_2_MT6701_GetRawData>:

uint16_t _2_MT6701_GetRawData(void)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b084      	sub	sp, #16
 800da80:	af02      	add	r7, sp, #8
    uint16_t rawData;
    uint16_t txData = 0xFFFF;
 800da82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800da86:	803b      	strh	r3, [r7, #0]
    uint16_t timeOut = 200;
 800da88:	23c8      	movs	r3, #200	@ 0xc8
 800da8a:	80fb      	strh	r3, [r7, #6]

    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800da8c:	e009      	b.n	800daa2 <_2_MT6701_GetRawData+0x26>
    {
        if (timeOut-- == 0)
 800da8e:	88fb      	ldrh	r3, [r7, #6]
 800da90:	1e5a      	subs	r2, r3, #1
 800da92:	80fa      	strh	r2, [r7, #6]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d104      	bne.n	800daa2 <_2_MT6701_GetRawData+0x26>
        {
            printLog("SPI state error!\r\n");
 800da98:	4819      	ldr	r0, [pc, #100]	@ (800db00 <_2_MT6701_GetRawData+0x84>)
 800da9a:	f7fe fb8b 	bl	800c1b4 <printLog>
            return 0; // 在超时时直接返回，避免继续执行后续代码
 800da9e:	2300      	movs	r3, #0
 800daa0:	e02a      	b.n	800daf8 <_2_MT6701_GetRawData+0x7c>
    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800daa2:	4818      	ldr	r0, [pc, #96]	@ (800db04 <_2_MT6701_GetRawData+0x88>)
 800daa4:	f7f9 fbf7 	bl	8007296 <HAL_SPI_GetState>
 800daa8:	4603      	mov	r3, r0
 800daaa:	2b01      	cmp	r3, #1
 800daac:	d1ef      	bne.n	800da8e <_2_MT6701_GetRawData+0x12>
        }
    }

    _2_MT6701_CS_Enable;
 800daae:	2200      	movs	r2, #0
 800dab0:	2110      	movs	r1, #16
 800dab2:	4815      	ldr	r0, [pc, #84]	@ (800db08 <_2_MT6701_GetRawData+0x8c>)
 800dab4:	f7f8 f938 	bl	8005d28 <HAL_GPIO_WritePin>

    HAL_StatusTypeDef spiStatus = HAL_SPI_TransmitReceive(&hspi3, (uint8_t *)&txData, (uint8_t *)&rawData, 1, HAL_MAX_DELAY);
 800dab8:	1cba      	adds	r2, r7, #2
 800daba:	4639      	mov	r1, r7
 800dabc:	f04f 33ff 	mov.w	r3, #4294967295
 800dac0:	9300      	str	r3, [sp, #0]
 800dac2:	2301      	movs	r3, #1
 800dac4:	480f      	ldr	r0, [pc, #60]	@ (800db04 <_2_MT6701_GetRawData+0x88>)
 800dac6:	f7f9 f9c4 	bl	8006e52 <HAL_SPI_TransmitReceive>
 800daca:	4603      	mov	r3, r0
 800dacc:	717b      	strb	r3, [r7, #5]
    if (spiStatus != HAL_OK)
 800dace:	797b      	ldrb	r3, [r7, #5]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d009      	beq.n	800dae8 <_2_MT6701_GetRawData+0x6c>
    {
        _2_MT6701_CS_Disable;
 800dad4:	2201      	movs	r2, #1
 800dad6:	2110      	movs	r1, #16
 800dad8:	480b      	ldr	r0, [pc, #44]	@ (800db08 <_2_MT6701_GetRawData+0x8c>)
 800dada:	f7f8 f925 	bl	8005d28 <HAL_GPIO_WritePin>
        printLog("MT6701 read data error!\r\n");
 800dade:	480b      	ldr	r0, [pc, #44]	@ (800db0c <_2_MT6701_GetRawData+0x90>)
 800dae0:	f7fe fb68 	bl	800c1b4 <printLog>
        return 0; // 在SPI传输错误时直接返回，避免继续执行后续代码
 800dae4:	2300      	movs	r3, #0
 800dae6:	e007      	b.n	800daf8 <_2_MT6701_GetRawData+0x7c>
    }

    _2_MT6701_CS_Disable;
 800dae8:	2201      	movs	r2, #1
 800daea:	2110      	movs	r1, #16
 800daec:	4806      	ldr	r0, [pc, #24]	@ (800db08 <_2_MT6701_GetRawData+0x8c>)
 800daee:	f7f8 f91b 	bl	8005d28 <HAL_GPIO_WritePin>

    return rawData >> 2; // 取高14位的角度数据
 800daf2:	887b      	ldrh	r3, [r7, #2]
 800daf4:	089b      	lsrs	r3, r3, #2
 800daf6:	b29b      	uxth	r3, r3
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3708      	adds	r7, #8
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	08013640 	.word	0x08013640
 800db04:	200003f0 	.word	0x200003f0
 800db08:	48000800 	.word	0x48000800
 800db0c:	08013654 	.word	0x08013654

0800db10 <_2_MT6701_GetRawAngle>:

// 将传感器原始数据转化为弧度
float _2_MT6701_GetRawAngle(void)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b082      	sub	sp, #8
 800db14:	af00      	add	r7, sp, #0
    uint16_t rawData = _2_MT6701_GetRawData();
 800db16:	f7ff ffb1 	bl	800da7c <_2_MT6701_GetRawData>
 800db1a:	4603      	mov	r3, r0
 800db1c:	80fb      	strh	r3, [r7, #6]
    return (float)rawData / 16384.0f * _2PI;
 800db1e:	88fb      	ldrh	r3, [r7, #6]
 800db20:	ee07 3a90 	vmov	s15, r3
 800db24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800db28:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800db44 <_2_MT6701_GetRawAngle+0x34>
 800db2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800db30:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800db48 <_2_MT6701_GetRawAngle+0x38>
 800db34:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800db38:	eeb0 0a67 	vmov.f32	s0, s15
 800db3c:	3708      	adds	r7, #8
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}
 800db42:	bf00      	nop
 800db44:	46800000 	.word	0x46800000
 800db48:	40c90fdb 	.word	0x40c90fdb

0800db4c <startPwm1>:
#include "pwm.h"

 void startPwm1()
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800db50:	2100      	movs	r1, #0
 800db52:	4806      	ldr	r0, [pc, #24]	@ (800db6c <startPwm1+0x20>)
 800db54:	f7f9 fe2e 	bl	80077b4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800db58:	2104      	movs	r1, #4
 800db5a:	4804      	ldr	r0, [pc, #16]	@ (800db6c <startPwm1+0x20>)
 800db5c:	f7f9 fe2a 	bl	80077b4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800db60:	2108      	movs	r1, #8
 800db62:	4802      	ldr	r0, [pc, #8]	@ (800db6c <startPwm1+0x20>)
 800db64:	f7f9 fe26 	bl	80077b4 <HAL_TIM_PWM_Start>

}
 800db68:	bf00      	nop
 800db6a:	bd80      	pop	{r7, pc}
 800db6c:	200004a4 	.word	0x200004a4

0800db70 <stopPwm1>:
 void stopPwm1()
{
 800db70:	b580      	push	{r7, lr}
 800db72:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 800db74:	2100      	movs	r1, #0
 800db76:	4806      	ldr	r0, [pc, #24]	@ (800db90 <stopPwm1+0x20>)
 800db78:	f7f9 ff1c 	bl	80079b4 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 800db7c:	2104      	movs	r1, #4
 800db7e:	4804      	ldr	r0, [pc, #16]	@ (800db90 <stopPwm1+0x20>)
 800db80:	f7f9 ff18 	bl	80079b4 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 800db84:	2108      	movs	r1, #8
 800db86:	4802      	ldr	r0, [pc, #8]	@ (800db90 <stopPwm1+0x20>)
 800db88:	f7f9 ff14 	bl	80079b4 <HAL_TIM_PWM_Stop>

}
 800db8c:	bf00      	nop
 800db8e:	bd80      	pop	{r7, pc}
 800db90:	200004a4 	.word	0x200004a4

0800db94 <updatePwm1>:
 void updatePwm1(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800db94:	b480      	push	{r7}
 800db96:	b083      	sub	sp, #12
 800db98:	af00      	add	r7, sp, #0
 800db9a:	4603      	mov	r3, r0
 800db9c:	80fb      	strh	r3, [r7, #6]
 800db9e:	460b      	mov	r3, r1
 800dba0:	80bb      	strh	r3, [r7, #4]
 800dba2:	4613      	mov	r3, r2
 800dba4:	807b      	strh	r3, [r7, #2]
    TIM8->CCR1 = a;
 800dba6:	4a07      	ldr	r2, [pc, #28]	@ (800dbc4 <updatePwm1+0x30>)
 800dba8:	88fb      	ldrh	r3, [r7, #6]
 800dbaa:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM8->CCR2 = b;
 800dbac:	4a05      	ldr	r2, [pc, #20]	@ (800dbc4 <updatePwm1+0x30>)
 800dbae:	88bb      	ldrh	r3, [r7, #4]
 800dbb0:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM8->CCR3 = c;
 800dbb2:	4a04      	ldr	r2, [pc, #16]	@ (800dbc4 <updatePwm1+0x30>)
 800dbb4:	887b      	ldrh	r3, [r7, #2]
 800dbb6:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800dbb8:	bf00      	nop
 800dbba:	370c      	adds	r7, #12
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr
 800dbc4:	40013400 	.word	0x40013400

0800dbc8 <startPwm2>:

 void startPwm2()
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800dbcc:	2100      	movs	r1, #0
 800dbce:	4806      	ldr	r0, [pc, #24]	@ (800dbe8 <startPwm2+0x20>)
 800dbd0:	f7f9 fdf0 	bl	80077b4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800dbd4:	2104      	movs	r1, #4
 800dbd6:	4804      	ldr	r0, [pc, #16]	@ (800dbe8 <startPwm2+0x20>)
 800dbd8:	f7f9 fdec 	bl	80077b4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800dbdc:	2108      	movs	r1, #8
 800dbde:	4802      	ldr	r0, [pc, #8]	@ (800dbe8 <startPwm2+0x20>)
 800dbe0:	f7f9 fde8 	bl	80077b4 <HAL_TIM_PWM_Start>
 
}
 800dbe4:	bf00      	nop
 800dbe6:	bd80      	pop	{r7, pc}
 800dbe8:	20000458 	.word	0x20000458

0800dbec <stopPwm2>:
 void stopPwm2()
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800dbf0:	2100      	movs	r1, #0
 800dbf2:	4806      	ldr	r0, [pc, #24]	@ (800dc0c <stopPwm2+0x20>)
 800dbf4:	f7f9 fede 	bl	80079b4 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800dbf8:	2104      	movs	r1, #4
 800dbfa:	4804      	ldr	r0, [pc, #16]	@ (800dc0c <stopPwm2+0x20>)
 800dbfc:	f7f9 feda 	bl	80079b4 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800dc00:	2108      	movs	r1, #8
 800dc02:	4802      	ldr	r0, [pc, #8]	@ (800dc0c <stopPwm2+0x20>)
 800dc04:	f7f9 fed6 	bl	80079b4 <HAL_TIM_PWM_Stop>
 
}
 800dc08:	bf00      	nop
 800dc0a:	bd80      	pop	{r7, pc}
 800dc0c:	20000458 	.word	0x20000458

0800dc10 <updatePwm2>:

 void updatePwm2(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800dc10:	b480      	push	{r7}
 800dc12:	b083      	sub	sp, #12
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	4603      	mov	r3, r0
 800dc18:	80fb      	strh	r3, [r7, #6]
 800dc1a:	460b      	mov	r3, r1
 800dc1c:	80bb      	strh	r3, [r7, #4]
 800dc1e:	4613      	mov	r3, r2
 800dc20:	807b      	strh	r3, [r7, #2]
    TIM1->CCR1 = a;
 800dc22:	4a07      	ldr	r2, [pc, #28]	@ (800dc40 <updatePwm2+0x30>)
 800dc24:	88fb      	ldrh	r3, [r7, #6]
 800dc26:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = b;
 800dc28:	4a05      	ldr	r2, [pc, #20]	@ (800dc40 <updatePwm2+0x30>)
 800dc2a:	88bb      	ldrh	r3, [r7, #4]
 800dc2c:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM1->CCR3 = c;
 800dc2e:	4a04      	ldr	r2, [pc, #16]	@ (800dc40 <updatePwm2+0x30>)
 800dc30:	887b      	ldrh	r3, [r7, #2]
 800dc32:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800dc34:	bf00      	nop
 800dc36:	370c      	adds	r7, #12
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr
 800dc40:	40012c00 	.word	0x40012c00

0800dc44 <delay>:
#include "time_utils.h"

__IO uint32_t m, tms, u, t0;

void delay(uint32_t _ms)
{
 800dc44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dc48:	b082      	sub	sp, #8
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	6078      	str	r0, [r7, #4]
    t0 = micros();
 800dc4e:	f000 f83b 	bl	800dcc8 <micros>
 800dc52:	4602      	mov	r2, r0
 800dc54:	460b      	mov	r3, r1
 800dc56:	4b11      	ldr	r3, [pc, #68]	@ (800dc9c <delay+0x58>)
 800dc58:	601a      	str	r2, [r3, #0]
    while (micros() - t0 < _ms * 1000)
 800dc5a:	e000      	b.n	800dc5e <delay+0x1a>
        __NOP();
 800dc5c:	bf00      	nop
    while (micros() - t0 < _ms * 1000)
 800dc5e:	f000 f833 	bl	800dcc8 <micros>
 800dc62:	4602      	mov	r2, r0
 800dc64:	460b      	mov	r3, r1
 800dc66:	490d      	ldr	r1, [pc, #52]	@ (800dc9c <delay+0x58>)
 800dc68:	6809      	ldr	r1, [r1, #0]
 800dc6a:	2000      	movs	r0, #0
 800dc6c:	468a      	mov	sl, r1
 800dc6e:	4683      	mov	fp, r0
 800dc70:	ebb2 040a 	subs.w	r4, r2, sl
 800dc74:	eb63 050b 	sbc.w	r5, r3, fp
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800dc7e:	fb02 f303 	mul.w	r3, r2, r3
 800dc82:	2200      	movs	r2, #0
 800dc84:	4698      	mov	r8, r3
 800dc86:	4691      	mov	r9, r2
 800dc88:	4544      	cmp	r4, r8
 800dc8a:	eb75 0309 	sbcs.w	r3, r5, r9
 800dc8e:	d3e5      	bcc.n	800dc5c <delay+0x18>
}
 800dc90:	bf00      	nop
 800dc92:	bf00      	nop
 800dc94:	3708      	adds	r7, #8
 800dc96:	46bd      	mov	sp, r7
 800dc98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dc9c:	20000aa4 	.word	0x20000aa4

0800dca0 <LL_SYSTICK_IsActiveCounterFlag>:
    while (_us--)
        __NOP();
}

__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag()
{
 800dca0:	b480      	push	{r7}
 800dca2:	af00      	add	r7, sp, #0
    return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 800dca4:	4b07      	ldr	r3, [pc, #28]	@ (800dcc4 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dcac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dcb0:	bf0c      	ite	eq
 800dcb2:	2301      	moveq	r3, #1
 800dcb4:	2300      	movne	r3, #0
 800dcb6:	b2db      	uxtb	r3, r3
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc0:	4770      	bx	lr
 800dcc2:	bf00      	nop
 800dcc4:	e000e010 	.word	0xe000e010

0800dcc8 <micros>:

uint64_t micros()
{
 800dcc8:	b5b0      	push	{r4, r5, r7, lr}
 800dcca:	af00      	add	r7, sp, #0
    /* Ensure COUNTFLAG is reset by reading SysTick control and status register */
    LL_SYSTICK_IsActiveCounterFlag();
 800dccc:	f7ff ffe8 	bl	800dca0 <LL_SYSTICK_IsActiveCounterFlag>
    m = HAL_GetTick();
 800dcd0:	f7f4 fc1a 	bl	8002508 <HAL_GetTick>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	4a1c      	ldr	r2, [pc, #112]	@ (800dd48 <micros+0x80>)
 800dcd8:	6013      	str	r3, [r2, #0]
    tms = SysTick->LOAD + 1;
 800dcda:	4b1c      	ldr	r3, [pc, #112]	@ (800dd4c <micros+0x84>)
 800dcdc:	685b      	ldr	r3, [r3, #4]
 800dcde:	3301      	adds	r3, #1
 800dce0:	4a1b      	ldr	r2, [pc, #108]	@ (800dd50 <micros+0x88>)
 800dce2:	6013      	str	r3, [r2, #0]
    u = tms - SysTick->VAL;
 800dce4:	4b1a      	ldr	r3, [pc, #104]	@ (800dd50 <micros+0x88>)
 800dce6:	681a      	ldr	r2, [r3, #0]
 800dce8:	4b18      	ldr	r3, [pc, #96]	@ (800dd4c <micros+0x84>)
 800dcea:	689b      	ldr	r3, [r3, #8]
 800dcec:	1ad3      	subs	r3, r2, r3
 800dcee:	4a19      	ldr	r2, [pc, #100]	@ (800dd54 <micros+0x8c>)
 800dcf0:	6013      	str	r3, [r2, #0]
    if (LL_SYSTICK_IsActiveCounterFlag())
 800dcf2:	f7ff ffd5 	bl	800dca0 <LL_SYSTICK_IsActiveCounterFlag>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d00b      	beq.n	800dd14 <micros+0x4c>
    {
        m = HAL_GetTick();
 800dcfc:	f7f4 fc04 	bl	8002508 <HAL_GetTick>
 800dd00:	4603      	mov	r3, r0
 800dd02:	4a11      	ldr	r2, [pc, #68]	@ (800dd48 <micros+0x80>)
 800dd04:	6013      	str	r3, [r2, #0]
        u = tms - SysTick->VAL;
 800dd06:	4b12      	ldr	r3, [pc, #72]	@ (800dd50 <micros+0x88>)
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	4b10      	ldr	r3, [pc, #64]	@ (800dd4c <micros+0x84>)
 800dd0c:	689b      	ldr	r3, [r3, #8]
 800dd0e:	1ad3      	subs	r3, r2, r3
 800dd10:	4a10      	ldr	r2, [pc, #64]	@ (800dd54 <micros+0x8c>)
 800dd12:	6013      	str	r3, [r2, #0]
    }
    return (m * 1000 + (u * 1000) / tms);
 800dd14:	4b0c      	ldr	r3, [pc, #48]	@ (800dd48 <micros+0x80>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800dd1c:	fb03 f202 	mul.w	r2, r3, r2
 800dd20:	4b0c      	ldr	r3, [pc, #48]	@ (800dd54 <micros+0x8c>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800dd28:	fb03 f101 	mul.w	r1, r3, r1
 800dd2c:	4b08      	ldr	r3, [pc, #32]	@ (800dd50 <micros+0x88>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	fbb1 f3f3 	udiv	r3, r1, r3
 800dd34:	4413      	add	r3, r2
 800dd36:	2200      	movs	r2, #0
 800dd38:	461c      	mov	r4, r3
 800dd3a:	4615      	mov	r5, r2
 800dd3c:	4622      	mov	r2, r4
 800dd3e:	462b      	mov	r3, r5
}
 800dd40:	4610      	mov	r0, r2
 800dd42:	4619      	mov	r1, r3
 800dd44:	bdb0      	pop	{r4, r5, r7, pc}
 800dd46:	bf00      	nop
 800dd48:	20000a98 	.word	0x20000a98
 800dd4c:	e000e010 	.word	0xe000e010
 800dd50:	20000a9c 	.word	0x20000a9c
 800dd54:	20000aa0 	.word	0x20000aa0

0800dd58 <userMain>:
float HallTheta = 0;
float HallSpeed = 0;
uint8_t HallReadTemp = 0;
// static bool powerLost;
void userMain(void)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	af00      	add	r7, sp, #0

	if (get5MsFlag())
 800dd5c:	f000 f926 	bl	800dfac <get5MsFlag>
 800dd60:	4603      	mov	r3, r0
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d001      	beq.n	800dd6a <userMain+0x12>
	{
		keyScan();
 800dd66:	f7fe faa3 	bl	800c2b0 <keyScan>
	}
	if (getOneMsFlag())
 800dd6a:	f000 f90b 	bl	800df84 <getOneMsFlag>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d019      	beq.n	800dda8 <userMain+0x50>
	{
		static bool imuInited;

		if (imuInited == false)
 800dd74:	4b14      	ldr	r3, [pc, #80]	@ (800ddc8 <userMain+0x70>)
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d10d      	bne.n	800dd98 <userMain+0x40>
		{
			if (IMU_Init() == 0)
 800dd7c:	f7fe ff26 	bl	800cbcc <IMU_Init>
 800dd80:	4603      	mov	r3, r0
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d110      	bne.n	800dda8 <userMain+0x50>
			{
				init_quaternion();
 800dd86:	f7fe ff7f 	bl	800cc88 <init_quaternion>
				imuInited = true;
 800dd8a:	4b0f      	ldr	r3, [pc, #60]	@ (800ddc8 <userMain+0x70>)
 800dd8c:	2201      	movs	r2, #1
 800dd8e:	701a      	strb	r2, [r3, #0]
				printLog("mpu init done\n");
 800dd90:	480e      	ldr	r0, [pc, #56]	@ (800ddcc <userMain+0x74>)
 800dd92:	f7fe fa0f 	bl	800c1b4 <printLog>
 800dd96:	e007      	b.n	800dda8 <userMain+0x50>
			}
		}
		else
		{
			// IMU_handle();
			mpu_get_data();
 800dd98:	f7fe fd76 	bl	800c888 <mpu_get_data>
			imu_ahrs_update();
 800dd9c:	f7ff f8b0 	bl	800cf00 <imu_ahrs_update>
			imu_attitude_update();
 800dda0:	f7ff fd0a 	bl	800d7b8 <imu_attitude_update>
			balancerControl();
 800dda4:	f7fe f9c6 	bl	800c134 <balancerControl>
		}
	}

	if (get100MsFlag())
 800dda8:	f000 f914 	bl	800dfd4 <get100MsFlag>
 800ddac:	4603      	mov	r3, r0
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d001      	beq.n	800ddb6 <userMain+0x5e>
	{
		appRunning();
 800ddb2:	f7fe f889 	bl	800bec8 <appRunning>
	}
#if SHOW_WAVE == 0 //&& COMMAMNDER == 0
	if (get500MsFlag())
 800ddb6:	f000 f921 	bl	800dffc <get500MsFlag>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d001      	beq.n	800ddc4 <userMain+0x6c>
	{
		uartTx();
 800ddc0:	f7fe fa26 	bl	800c210 <uartTx>
	}
#endif
}
 800ddc4:	bf00      	nop
 800ddc6:	bd80      	pop	{r7, pc}
 800ddc8:	20000aa8 	.word	0x20000aa8
 800ddcc:	08013670 	.word	0x08013670

0800ddd0 <dealPer100us>:


static bool _5msFlag, _10msFlag, _20msFlag, _30msFlag, _100msFlag, _500msFlag, _1s;
static void dealPerMs();
void dealPer100us()
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	af00      	add	r7, sp, #0
    static unsigned char cnt;
    if (++cnt >= 10)
 800ddd4:	4b08      	ldr	r3, [pc, #32]	@ (800ddf8 <dealPer100us+0x28>)
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	3301      	adds	r3, #1
 800ddda:	b2da      	uxtb	r2, r3
 800dddc:	4b06      	ldr	r3, [pc, #24]	@ (800ddf8 <dealPer100us+0x28>)
 800ddde:	701a      	strb	r2, [r3, #0]
 800dde0:	4b05      	ldr	r3, [pc, #20]	@ (800ddf8 <dealPer100us+0x28>)
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	2b09      	cmp	r3, #9
 800dde6:	d904      	bls.n	800ddf2 <dealPer100us+0x22>
    {
        cnt = 0;
 800dde8:	4b03      	ldr	r3, [pc, #12]	@ (800ddf8 <dealPer100us+0x28>)
 800ddea:	2200      	movs	r2, #0
 800ddec:	701a      	strb	r2, [r3, #0]
        dealPerMs();
 800ddee:	f000 f805 	bl	800ddfc <dealPerMs>
    }

}
 800ddf2:	bf00      	nop
 800ddf4:	bd80      	pop	{r7, pc}
 800ddf6:	bf00      	nop
 800ddf8:	20000ab7 	.word	0x20000ab7

0800ddfc <dealPerMs>:

static void dealPerMs()
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	af00      	add	r7, sp, #0
    static unsigned char _5msCnt, _30msCnt, _20msCnt, _100msCnt, _10msCnt;
    static uint _500msCnt, _1000msCnt;
    if (++_5msCnt >= 5)
 800de00:	4b45      	ldr	r3, [pc, #276]	@ (800df18 <dealPerMs+0x11c>)
 800de02:	781b      	ldrb	r3, [r3, #0]
 800de04:	3301      	adds	r3, #1
 800de06:	b2da      	uxtb	r2, r3
 800de08:	4b43      	ldr	r3, [pc, #268]	@ (800df18 <dealPerMs+0x11c>)
 800de0a:	701a      	strb	r2, [r3, #0]
 800de0c:	4b42      	ldr	r3, [pc, #264]	@ (800df18 <dealPerMs+0x11c>)
 800de0e:	781b      	ldrb	r3, [r3, #0]
 800de10:	2b04      	cmp	r3, #4
 800de12:	d905      	bls.n	800de20 <dealPerMs+0x24>
    {
        _5msCnt = 0;
 800de14:	4b40      	ldr	r3, [pc, #256]	@ (800df18 <dealPerMs+0x11c>)
 800de16:	2200      	movs	r2, #0
 800de18:	701a      	strb	r2, [r3, #0]
        _5msFlag = 1;
 800de1a:	4b40      	ldr	r3, [pc, #256]	@ (800df1c <dealPerMs+0x120>)
 800de1c:	2201      	movs	r2, #1
 800de1e:	701a      	strb	r2, [r3, #0]
    }

    if (++_10msCnt >= 10)
 800de20:	4b3f      	ldr	r3, [pc, #252]	@ (800df20 <dealPerMs+0x124>)
 800de22:	781b      	ldrb	r3, [r3, #0]
 800de24:	3301      	adds	r3, #1
 800de26:	b2da      	uxtb	r2, r3
 800de28:	4b3d      	ldr	r3, [pc, #244]	@ (800df20 <dealPerMs+0x124>)
 800de2a:	701a      	strb	r2, [r3, #0]
 800de2c:	4b3c      	ldr	r3, [pc, #240]	@ (800df20 <dealPerMs+0x124>)
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	2b09      	cmp	r3, #9
 800de32:	d905      	bls.n	800de40 <dealPerMs+0x44>
    {
        _10msCnt = 0;
 800de34:	4b3a      	ldr	r3, [pc, #232]	@ (800df20 <dealPerMs+0x124>)
 800de36:	2200      	movs	r2, #0
 800de38:	701a      	strb	r2, [r3, #0]
        _10msFlag = 1;
 800de3a:	4b3a      	ldr	r3, [pc, #232]	@ (800df24 <dealPerMs+0x128>)
 800de3c:	2201      	movs	r2, #1
 800de3e:	701a      	strb	r2, [r3, #0]
    }

    if (++_20msCnt >= 20)
 800de40:	4b39      	ldr	r3, [pc, #228]	@ (800df28 <dealPerMs+0x12c>)
 800de42:	781b      	ldrb	r3, [r3, #0]
 800de44:	3301      	adds	r3, #1
 800de46:	b2da      	uxtb	r2, r3
 800de48:	4b37      	ldr	r3, [pc, #220]	@ (800df28 <dealPerMs+0x12c>)
 800de4a:	701a      	strb	r2, [r3, #0]
 800de4c:	4b36      	ldr	r3, [pc, #216]	@ (800df28 <dealPerMs+0x12c>)
 800de4e:	781b      	ldrb	r3, [r3, #0]
 800de50:	2b13      	cmp	r3, #19
 800de52:	d905      	bls.n	800de60 <dealPerMs+0x64>
    {
        _20msCnt = 0;
 800de54:	4b34      	ldr	r3, [pc, #208]	@ (800df28 <dealPerMs+0x12c>)
 800de56:	2200      	movs	r2, #0
 800de58:	701a      	strb	r2, [r3, #0]
        _20msFlag = 1;
 800de5a:	4b34      	ldr	r3, [pc, #208]	@ (800df2c <dealPerMs+0x130>)
 800de5c:	2201      	movs	r2, #1
 800de5e:	701a      	strb	r2, [r3, #0]
    }

    if (++_30msCnt >= 30)
 800de60:	4b33      	ldr	r3, [pc, #204]	@ (800df30 <dealPerMs+0x134>)
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	3301      	adds	r3, #1
 800de66:	b2da      	uxtb	r2, r3
 800de68:	4b31      	ldr	r3, [pc, #196]	@ (800df30 <dealPerMs+0x134>)
 800de6a:	701a      	strb	r2, [r3, #0]
 800de6c:	4b30      	ldr	r3, [pc, #192]	@ (800df30 <dealPerMs+0x134>)
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	2b1d      	cmp	r3, #29
 800de72:	d905      	bls.n	800de80 <dealPerMs+0x84>
    {
        _30msCnt = 0;
 800de74:	4b2e      	ldr	r3, [pc, #184]	@ (800df30 <dealPerMs+0x134>)
 800de76:	2200      	movs	r2, #0
 800de78:	701a      	strb	r2, [r3, #0]
        _30msFlag = 1;
 800de7a:	4b2e      	ldr	r3, [pc, #184]	@ (800df34 <dealPerMs+0x138>)
 800de7c:	2201      	movs	r2, #1
 800de7e:	701a      	strb	r2, [r3, #0]
    }

    if (++_100msCnt >= 100)
 800de80:	4b2d      	ldr	r3, [pc, #180]	@ (800df38 <dealPerMs+0x13c>)
 800de82:	781b      	ldrb	r3, [r3, #0]
 800de84:	3301      	adds	r3, #1
 800de86:	b2da      	uxtb	r2, r3
 800de88:	4b2b      	ldr	r3, [pc, #172]	@ (800df38 <dealPerMs+0x13c>)
 800de8a:	701a      	strb	r2, [r3, #0]
 800de8c:	4b2a      	ldr	r3, [pc, #168]	@ (800df38 <dealPerMs+0x13c>)
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	2b63      	cmp	r3, #99	@ 0x63
 800de92:	d905      	bls.n	800dea0 <dealPerMs+0xa4>
    {
        _100msCnt = 0;
 800de94:	4b28      	ldr	r3, [pc, #160]	@ (800df38 <dealPerMs+0x13c>)
 800de96:	2200      	movs	r2, #0
 800de98:	701a      	strb	r2, [r3, #0]
        _100msFlag = 1;
 800de9a:	4b28      	ldr	r3, [pc, #160]	@ (800df3c <dealPerMs+0x140>)
 800de9c:	2201      	movs	r2, #1
 800de9e:	701a      	strb	r2, [r3, #0]
    }

    if (++_500msCnt >= 500)
 800dea0:	4b27      	ldr	r3, [pc, #156]	@ (800df40 <dealPerMs+0x144>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	3301      	adds	r3, #1
 800dea6:	4a26      	ldr	r2, [pc, #152]	@ (800df40 <dealPerMs+0x144>)
 800dea8:	6013      	str	r3, [r2, #0]
 800deaa:	4b25      	ldr	r3, [pc, #148]	@ (800df40 <dealPerMs+0x144>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800deb2:	d305      	bcc.n	800dec0 <dealPerMs+0xc4>
    {
        _500msCnt = 0;
 800deb4:	4b22      	ldr	r3, [pc, #136]	@ (800df40 <dealPerMs+0x144>)
 800deb6:	2200      	movs	r2, #0
 800deb8:	601a      	str	r2, [r3, #0]
        _500msFlag = 1;
 800deba:	4b22      	ldr	r3, [pc, #136]	@ (800df44 <dealPerMs+0x148>)
 800debc:	2201      	movs	r2, #1
 800debe:	701a      	strb	r2, [r3, #0]
    }
    if (++_1000msCnt >= 1000)
 800dec0:	4b21      	ldr	r3, [pc, #132]	@ (800df48 <dealPerMs+0x14c>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	3301      	adds	r3, #1
 800dec6:	4a20      	ldr	r2, [pc, #128]	@ (800df48 <dealPerMs+0x14c>)
 800dec8:	6013      	str	r3, [r2, #0]
 800deca:	4b1f      	ldr	r3, [pc, #124]	@ (800df48 <dealPerMs+0x14c>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ded2:	d305      	bcc.n	800dee0 <dealPerMs+0xe4>
    {
        _1000msCnt = 0;
 800ded4:	4b1c      	ldr	r3, [pc, #112]	@ (800df48 <dealPerMs+0x14c>)
 800ded6:	2200      	movs	r2, #0
 800ded8:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800deda:	4b1c      	ldr	r3, [pc, #112]	@ (800df4c <dealPerMs+0x150>)
 800dedc:	2201      	movs	r2, #1
 800dede:	701a      	strb	r2, [r3, #0]

        cnt = 0;
    }

#else
    frequence = 50;
 800dee0:	4b1b      	ldr	r3, [pc, #108]	@ (800df50 <dealPerMs+0x154>)
 800dee2:	2232      	movs	r2, #50	@ 0x32
 800dee4:	701a      	strb	r2, [r3, #0]
            _1s = 1;
        }
    }
#else

    if (++_1msCnt >= 1000)
 800dee6:	4b1b      	ldr	r3, [pc, #108]	@ (800df54 <dealPerMs+0x158>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	3301      	adds	r3, #1
 800deec:	4a19      	ldr	r2, [pc, #100]	@ (800df54 <dealPerMs+0x158>)
 800deee:	6013      	str	r3, [r2, #0]
 800def0:	4b18      	ldr	r3, [pc, #96]	@ (800df54 <dealPerMs+0x158>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800def8:	d305      	bcc.n	800df06 <dealPerMs+0x10a>
    {
        _1msCnt = 0;
 800defa:	4b16      	ldr	r3, [pc, #88]	@ (800df54 <dealPerMs+0x158>)
 800defc:	2200      	movs	r2, #0
 800defe:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800df00:	4b12      	ldr	r3, [pc, #72]	@ (800df4c <dealPerMs+0x150>)
 800df02:	2201      	movs	r2, #1
 800df04:	701a      	strb	r2, [r3, #0]
    }
#endif
#if SPEED_UP
    _1s = 1;
#endif
    _1ms = 1;
 800df06:	4b14      	ldr	r3, [pc, #80]	@ (800df58 <dealPerMs+0x15c>)
 800df08:	2201      	movs	r2, #1
 800df0a:	701a      	strb	r2, [r3, #0]




}
 800df0c:	bf00      	nop
 800df0e:	46bd      	mov	sp, r7
 800df10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df14:	4770      	bx	lr
 800df16:	bf00      	nop
 800df18:	20000ab8 	.word	0x20000ab8
 800df1c:	20000ab1 	.word	0x20000ab1
 800df20:	20000ab9 	.word	0x20000ab9
 800df24:	20000ab2 	.word	0x20000ab2
 800df28:	20000aba 	.word	0x20000aba
 800df2c:	20000ab3 	.word	0x20000ab3
 800df30:	20000abb 	.word	0x20000abb
 800df34:	20000ab4 	.word	0x20000ab4
 800df38:	20000abc 	.word	0x20000abc
 800df3c:	20000ab5 	.word	0x20000ab5
 800df40:	20000ac0 	.word	0x20000ac0
 800df44:	20000ab6 	.word	0x20000ab6
 800df48:	20000ac4 	.word	0x20000ac4
 800df4c:	20000aa9 	.word	0x20000aa9
 800df50:	20000ab0 	.word	0x20000ab0
 800df54:	20000aac 	.word	0x20000aac
 800df58:	20000aaa 	.word	0x20000aaa

0800df5c <getOneSecFlag>:
}



bool getOneSecFlag()
{
 800df5c:	b480      	push	{r7}
 800df5e:	af00      	add	r7, sp, #0
    if (_1s)
 800df60:	4b07      	ldr	r3, [pc, #28]	@ (800df80 <getOneSecFlag+0x24>)
 800df62:	781b      	ldrb	r3, [r3, #0]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d004      	beq.n	800df72 <getOneSecFlag+0x16>
    {
        _1s = 0;
 800df68:	4b05      	ldr	r3, [pc, #20]	@ (800df80 <getOneSecFlag+0x24>)
 800df6a:	2200      	movs	r2, #0
 800df6c:	701a      	strb	r2, [r3, #0]
        return 1;
 800df6e:	2301      	movs	r3, #1
 800df70:	e000      	b.n	800df74 <getOneSecFlag+0x18>
    }
    else
        return 0;
 800df72:	2300      	movs	r3, #0
}
 800df74:	4618      	mov	r0, r3
 800df76:	46bd      	mov	sp, r7
 800df78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7c:	4770      	bx	lr
 800df7e:	bf00      	nop
 800df80:	20000aa9 	.word	0x20000aa9

0800df84 <getOneMsFlag>:

bool getOneMsFlag()
{
 800df84:	b480      	push	{r7}
 800df86:	af00      	add	r7, sp, #0
    if (_1ms)
 800df88:	4b07      	ldr	r3, [pc, #28]	@ (800dfa8 <getOneMsFlag+0x24>)
 800df8a:	781b      	ldrb	r3, [r3, #0]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d004      	beq.n	800df9a <getOneMsFlag+0x16>
    {
        _1ms = 0;
 800df90:	4b05      	ldr	r3, [pc, #20]	@ (800dfa8 <getOneMsFlag+0x24>)
 800df92:	2200      	movs	r2, #0
 800df94:	701a      	strb	r2, [r3, #0]
        return 1;
 800df96:	2301      	movs	r3, #1
 800df98:	e000      	b.n	800df9c <getOneMsFlag+0x18>
    }
    else
        return 0;
 800df9a:	2300      	movs	r3, #0
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa4:	4770      	bx	lr
 800dfa6:	bf00      	nop
 800dfa8:	20000aaa 	.word	0x20000aaa

0800dfac <get5MsFlag>:
bool getCrossZero()
{
    return crossZero;
}
bool get5MsFlag()
{
 800dfac:	b480      	push	{r7}
 800dfae:	af00      	add	r7, sp, #0
    if (_5msFlag)
 800dfb0:	4b07      	ldr	r3, [pc, #28]	@ (800dfd0 <get5MsFlag+0x24>)
 800dfb2:	781b      	ldrb	r3, [r3, #0]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d004      	beq.n	800dfc2 <get5MsFlag+0x16>
    {
        _5msFlag = 0;
 800dfb8:	4b05      	ldr	r3, [pc, #20]	@ (800dfd0 <get5MsFlag+0x24>)
 800dfba:	2200      	movs	r2, #0
 800dfbc:	701a      	strb	r2, [r3, #0]
        return 1;
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	e000      	b.n	800dfc4 <get5MsFlag+0x18>
    }
    else
    {
        return 0;
 800dfc2:	2300      	movs	r3, #0
    }
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfcc:	4770      	bx	lr
 800dfce:	bf00      	nop
 800dfd0:	20000ab1 	.word	0x20000ab1

0800dfd4 <get100MsFlag>:
        return 0;
    }
}

bool get100MsFlag()
{
 800dfd4:	b480      	push	{r7}
 800dfd6:	af00      	add	r7, sp, #0
    if (_100msFlag)
 800dfd8:	4b07      	ldr	r3, [pc, #28]	@ (800dff8 <get100MsFlag+0x24>)
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d004      	beq.n	800dfea <get100MsFlag+0x16>
    {
        _100msFlag = 0;
 800dfe0:	4b05      	ldr	r3, [pc, #20]	@ (800dff8 <get100MsFlag+0x24>)
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	701a      	strb	r2, [r3, #0]
        return 1;
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	e000      	b.n	800dfec <get100MsFlag+0x18>
    }
    else
    {
        return 0;
 800dfea:	2300      	movs	r3, #0
    }
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	46bd      	mov	sp, r7
 800dff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff4:	4770      	bx	lr
 800dff6:	bf00      	nop
 800dff8:	20000ab5 	.word	0x20000ab5

0800dffc <get500MsFlag>:

bool get500MsFlag()
{
 800dffc:	b480      	push	{r7}
 800dffe:	af00      	add	r7, sp, #0
    if (_500msFlag)
 800e000:	4b07      	ldr	r3, [pc, #28]	@ (800e020 <get500MsFlag+0x24>)
 800e002:	781b      	ldrb	r3, [r3, #0]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d004      	beq.n	800e012 <get500MsFlag+0x16>
    {
        _500msFlag = 0;
 800e008:	4b05      	ldr	r3, [pc, #20]	@ (800e020 <get500MsFlag+0x24>)
 800e00a:	2200      	movs	r2, #0
 800e00c:	701a      	strb	r2, [r3, #0]
        return 1;
 800e00e:	2301      	movs	r3, #1
 800e010:	e000      	b.n	800e014 <get500MsFlag+0x18>
    }
    else
    {
        return 0;
 800e012:	2300      	movs	r3, #0
    }
}
 800e014:	4618      	mov	r0, r3
 800e016:	46bd      	mov	sp, r7
 800e018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01c:	4770      	bx	lr
 800e01e:	bf00      	nop
 800e020:	20000ab6 	.word	0x20000ab6

0800e024 <sulp>:
 800e024:	b570      	push	{r4, r5, r6, lr}
 800e026:	4604      	mov	r4, r0
 800e028:	460d      	mov	r5, r1
 800e02a:	ec45 4b10 	vmov	d0, r4, r5
 800e02e:	4616      	mov	r6, r2
 800e030:	f003 fc6e 	bl	8011910 <__ulp>
 800e034:	ec51 0b10 	vmov	r0, r1, d0
 800e038:	b17e      	cbz	r6, 800e05a <sulp+0x36>
 800e03a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e03e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e042:	2b00      	cmp	r3, #0
 800e044:	dd09      	ble.n	800e05a <sulp+0x36>
 800e046:	051b      	lsls	r3, r3, #20
 800e048:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e04c:	2400      	movs	r4, #0
 800e04e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e052:	4622      	mov	r2, r4
 800e054:	462b      	mov	r3, r5
 800e056:	f7f2 faf7 	bl	8000648 <__aeabi_dmul>
 800e05a:	ec41 0b10 	vmov	d0, r0, r1
 800e05e:	bd70      	pop	{r4, r5, r6, pc}

0800e060 <_strtod_l>:
 800e060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e064:	b09f      	sub	sp, #124	@ 0x7c
 800e066:	460c      	mov	r4, r1
 800e068:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e06a:	2200      	movs	r2, #0
 800e06c:	921a      	str	r2, [sp, #104]	@ 0x68
 800e06e:	9005      	str	r0, [sp, #20]
 800e070:	f04f 0a00 	mov.w	sl, #0
 800e074:	f04f 0b00 	mov.w	fp, #0
 800e078:	460a      	mov	r2, r1
 800e07a:	9219      	str	r2, [sp, #100]	@ 0x64
 800e07c:	7811      	ldrb	r1, [r2, #0]
 800e07e:	292b      	cmp	r1, #43	@ 0x2b
 800e080:	d04a      	beq.n	800e118 <_strtod_l+0xb8>
 800e082:	d838      	bhi.n	800e0f6 <_strtod_l+0x96>
 800e084:	290d      	cmp	r1, #13
 800e086:	d832      	bhi.n	800e0ee <_strtod_l+0x8e>
 800e088:	2908      	cmp	r1, #8
 800e08a:	d832      	bhi.n	800e0f2 <_strtod_l+0x92>
 800e08c:	2900      	cmp	r1, #0
 800e08e:	d03b      	beq.n	800e108 <_strtod_l+0xa8>
 800e090:	2200      	movs	r2, #0
 800e092:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e094:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e096:	782a      	ldrb	r2, [r5, #0]
 800e098:	2a30      	cmp	r2, #48	@ 0x30
 800e09a:	f040 80b3 	bne.w	800e204 <_strtod_l+0x1a4>
 800e09e:	786a      	ldrb	r2, [r5, #1]
 800e0a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e0a4:	2a58      	cmp	r2, #88	@ 0x58
 800e0a6:	d16e      	bne.n	800e186 <_strtod_l+0x126>
 800e0a8:	9302      	str	r3, [sp, #8]
 800e0aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e0ac:	9301      	str	r3, [sp, #4]
 800e0ae:	ab1a      	add	r3, sp, #104	@ 0x68
 800e0b0:	9300      	str	r3, [sp, #0]
 800e0b2:	4a8e      	ldr	r2, [pc, #568]	@ (800e2ec <_strtod_l+0x28c>)
 800e0b4:	9805      	ldr	r0, [sp, #20]
 800e0b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e0b8:	a919      	add	r1, sp, #100	@ 0x64
 800e0ba:	f002 fd1b 	bl	8010af4 <__gethex>
 800e0be:	f010 060f 	ands.w	r6, r0, #15
 800e0c2:	4604      	mov	r4, r0
 800e0c4:	d005      	beq.n	800e0d2 <_strtod_l+0x72>
 800e0c6:	2e06      	cmp	r6, #6
 800e0c8:	d128      	bne.n	800e11c <_strtod_l+0xbc>
 800e0ca:	3501      	adds	r5, #1
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	9519      	str	r5, [sp, #100]	@ 0x64
 800e0d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e0d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	f040 858e 	bne.w	800ebf6 <_strtod_l+0xb96>
 800e0da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e0dc:	b1cb      	cbz	r3, 800e112 <_strtod_l+0xb2>
 800e0de:	4652      	mov	r2, sl
 800e0e0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e0e4:	ec43 2b10 	vmov	d0, r2, r3
 800e0e8:	b01f      	add	sp, #124	@ 0x7c
 800e0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0ee:	2920      	cmp	r1, #32
 800e0f0:	d1ce      	bne.n	800e090 <_strtod_l+0x30>
 800e0f2:	3201      	adds	r2, #1
 800e0f4:	e7c1      	b.n	800e07a <_strtod_l+0x1a>
 800e0f6:	292d      	cmp	r1, #45	@ 0x2d
 800e0f8:	d1ca      	bne.n	800e090 <_strtod_l+0x30>
 800e0fa:	2101      	movs	r1, #1
 800e0fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e0fe:	1c51      	adds	r1, r2, #1
 800e100:	9119      	str	r1, [sp, #100]	@ 0x64
 800e102:	7852      	ldrb	r2, [r2, #1]
 800e104:	2a00      	cmp	r2, #0
 800e106:	d1c5      	bne.n	800e094 <_strtod_l+0x34>
 800e108:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e10a:	9419      	str	r4, [sp, #100]	@ 0x64
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	f040 8570 	bne.w	800ebf2 <_strtod_l+0xb92>
 800e112:	4652      	mov	r2, sl
 800e114:	465b      	mov	r3, fp
 800e116:	e7e5      	b.n	800e0e4 <_strtod_l+0x84>
 800e118:	2100      	movs	r1, #0
 800e11a:	e7ef      	b.n	800e0fc <_strtod_l+0x9c>
 800e11c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e11e:	b13a      	cbz	r2, 800e130 <_strtod_l+0xd0>
 800e120:	2135      	movs	r1, #53	@ 0x35
 800e122:	a81c      	add	r0, sp, #112	@ 0x70
 800e124:	f003 fcee 	bl	8011b04 <__copybits>
 800e128:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e12a:	9805      	ldr	r0, [sp, #20]
 800e12c:	f003 f8bc 	bl	80112a8 <_Bfree>
 800e130:	3e01      	subs	r6, #1
 800e132:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e134:	2e04      	cmp	r6, #4
 800e136:	d806      	bhi.n	800e146 <_strtod_l+0xe6>
 800e138:	e8df f006 	tbb	[pc, r6]
 800e13c:	201d0314 	.word	0x201d0314
 800e140:	14          	.byte	0x14
 800e141:	00          	.byte	0x00
 800e142:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e146:	05e1      	lsls	r1, r4, #23
 800e148:	bf48      	it	mi
 800e14a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e14e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e152:	0d1b      	lsrs	r3, r3, #20
 800e154:	051b      	lsls	r3, r3, #20
 800e156:	2b00      	cmp	r3, #0
 800e158:	d1bb      	bne.n	800e0d2 <_strtod_l+0x72>
 800e15a:	f001 fd81 	bl	800fc60 <__errno>
 800e15e:	2322      	movs	r3, #34	@ 0x22
 800e160:	6003      	str	r3, [r0, #0]
 800e162:	e7b6      	b.n	800e0d2 <_strtod_l+0x72>
 800e164:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e168:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e16c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e170:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e174:	e7e7      	b.n	800e146 <_strtod_l+0xe6>
 800e176:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800e2f4 <_strtod_l+0x294>
 800e17a:	e7e4      	b.n	800e146 <_strtod_l+0xe6>
 800e17c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e180:	f04f 3aff 	mov.w	sl, #4294967295
 800e184:	e7df      	b.n	800e146 <_strtod_l+0xe6>
 800e186:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e188:	1c5a      	adds	r2, r3, #1
 800e18a:	9219      	str	r2, [sp, #100]	@ 0x64
 800e18c:	785b      	ldrb	r3, [r3, #1]
 800e18e:	2b30      	cmp	r3, #48	@ 0x30
 800e190:	d0f9      	beq.n	800e186 <_strtod_l+0x126>
 800e192:	2b00      	cmp	r3, #0
 800e194:	d09d      	beq.n	800e0d2 <_strtod_l+0x72>
 800e196:	2301      	movs	r3, #1
 800e198:	9309      	str	r3, [sp, #36]	@ 0x24
 800e19a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e19c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e19e:	2300      	movs	r3, #0
 800e1a0:	9308      	str	r3, [sp, #32]
 800e1a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e1a4:	461f      	mov	r7, r3
 800e1a6:	220a      	movs	r2, #10
 800e1a8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e1aa:	7805      	ldrb	r5, [r0, #0]
 800e1ac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e1b0:	b2d9      	uxtb	r1, r3
 800e1b2:	2909      	cmp	r1, #9
 800e1b4:	d928      	bls.n	800e208 <_strtod_l+0x1a8>
 800e1b6:	494e      	ldr	r1, [pc, #312]	@ (800e2f0 <_strtod_l+0x290>)
 800e1b8:	2201      	movs	r2, #1
 800e1ba:	f001 fcf5 	bl	800fba8 <strncmp>
 800e1be:	2800      	cmp	r0, #0
 800e1c0:	d032      	beq.n	800e228 <_strtod_l+0x1c8>
 800e1c2:	2000      	movs	r0, #0
 800e1c4:	462a      	mov	r2, r5
 800e1c6:	4681      	mov	r9, r0
 800e1c8:	463d      	mov	r5, r7
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	2a65      	cmp	r2, #101	@ 0x65
 800e1ce:	d001      	beq.n	800e1d4 <_strtod_l+0x174>
 800e1d0:	2a45      	cmp	r2, #69	@ 0x45
 800e1d2:	d114      	bne.n	800e1fe <_strtod_l+0x19e>
 800e1d4:	b91d      	cbnz	r5, 800e1de <_strtod_l+0x17e>
 800e1d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e1d8:	4302      	orrs	r2, r0
 800e1da:	d095      	beq.n	800e108 <_strtod_l+0xa8>
 800e1dc:	2500      	movs	r5, #0
 800e1de:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e1e0:	1c62      	adds	r2, r4, #1
 800e1e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e1e4:	7862      	ldrb	r2, [r4, #1]
 800e1e6:	2a2b      	cmp	r2, #43	@ 0x2b
 800e1e8:	d077      	beq.n	800e2da <_strtod_l+0x27a>
 800e1ea:	2a2d      	cmp	r2, #45	@ 0x2d
 800e1ec:	d07b      	beq.n	800e2e6 <_strtod_l+0x286>
 800e1ee:	f04f 0c00 	mov.w	ip, #0
 800e1f2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e1f6:	2909      	cmp	r1, #9
 800e1f8:	f240 8082 	bls.w	800e300 <_strtod_l+0x2a0>
 800e1fc:	9419      	str	r4, [sp, #100]	@ 0x64
 800e1fe:	f04f 0800 	mov.w	r8, #0
 800e202:	e0a2      	b.n	800e34a <_strtod_l+0x2ea>
 800e204:	2300      	movs	r3, #0
 800e206:	e7c7      	b.n	800e198 <_strtod_l+0x138>
 800e208:	2f08      	cmp	r7, #8
 800e20a:	bfd5      	itete	le
 800e20c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e20e:	9908      	ldrgt	r1, [sp, #32]
 800e210:	fb02 3301 	mlale	r3, r2, r1, r3
 800e214:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e218:	f100 0001 	add.w	r0, r0, #1
 800e21c:	bfd4      	ite	le
 800e21e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e220:	9308      	strgt	r3, [sp, #32]
 800e222:	3701      	adds	r7, #1
 800e224:	9019      	str	r0, [sp, #100]	@ 0x64
 800e226:	e7bf      	b.n	800e1a8 <_strtod_l+0x148>
 800e228:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e22a:	1c5a      	adds	r2, r3, #1
 800e22c:	9219      	str	r2, [sp, #100]	@ 0x64
 800e22e:	785a      	ldrb	r2, [r3, #1]
 800e230:	b37f      	cbz	r7, 800e292 <_strtod_l+0x232>
 800e232:	4681      	mov	r9, r0
 800e234:	463d      	mov	r5, r7
 800e236:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e23a:	2b09      	cmp	r3, #9
 800e23c:	d912      	bls.n	800e264 <_strtod_l+0x204>
 800e23e:	2301      	movs	r3, #1
 800e240:	e7c4      	b.n	800e1cc <_strtod_l+0x16c>
 800e242:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e244:	1c5a      	adds	r2, r3, #1
 800e246:	9219      	str	r2, [sp, #100]	@ 0x64
 800e248:	785a      	ldrb	r2, [r3, #1]
 800e24a:	3001      	adds	r0, #1
 800e24c:	2a30      	cmp	r2, #48	@ 0x30
 800e24e:	d0f8      	beq.n	800e242 <_strtod_l+0x1e2>
 800e250:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e254:	2b08      	cmp	r3, #8
 800e256:	f200 84d3 	bhi.w	800ec00 <_strtod_l+0xba0>
 800e25a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e25c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e25e:	4681      	mov	r9, r0
 800e260:	2000      	movs	r0, #0
 800e262:	4605      	mov	r5, r0
 800e264:	3a30      	subs	r2, #48	@ 0x30
 800e266:	f100 0301 	add.w	r3, r0, #1
 800e26a:	d02a      	beq.n	800e2c2 <_strtod_l+0x262>
 800e26c:	4499      	add	r9, r3
 800e26e:	eb00 0c05 	add.w	ip, r0, r5
 800e272:	462b      	mov	r3, r5
 800e274:	210a      	movs	r1, #10
 800e276:	4563      	cmp	r3, ip
 800e278:	d10d      	bne.n	800e296 <_strtod_l+0x236>
 800e27a:	1c69      	adds	r1, r5, #1
 800e27c:	4401      	add	r1, r0
 800e27e:	4428      	add	r0, r5
 800e280:	2808      	cmp	r0, #8
 800e282:	dc16      	bgt.n	800e2b2 <_strtod_l+0x252>
 800e284:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e286:	230a      	movs	r3, #10
 800e288:	fb03 2300 	mla	r3, r3, r0, r2
 800e28c:	930a      	str	r3, [sp, #40]	@ 0x28
 800e28e:	2300      	movs	r3, #0
 800e290:	e018      	b.n	800e2c4 <_strtod_l+0x264>
 800e292:	4638      	mov	r0, r7
 800e294:	e7da      	b.n	800e24c <_strtod_l+0x1ec>
 800e296:	2b08      	cmp	r3, #8
 800e298:	f103 0301 	add.w	r3, r3, #1
 800e29c:	dc03      	bgt.n	800e2a6 <_strtod_l+0x246>
 800e29e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e2a0:	434e      	muls	r6, r1
 800e2a2:	960a      	str	r6, [sp, #40]	@ 0x28
 800e2a4:	e7e7      	b.n	800e276 <_strtod_l+0x216>
 800e2a6:	2b10      	cmp	r3, #16
 800e2a8:	bfde      	ittt	le
 800e2aa:	9e08      	ldrle	r6, [sp, #32]
 800e2ac:	434e      	mulle	r6, r1
 800e2ae:	9608      	strle	r6, [sp, #32]
 800e2b0:	e7e1      	b.n	800e276 <_strtod_l+0x216>
 800e2b2:	280f      	cmp	r0, #15
 800e2b4:	dceb      	bgt.n	800e28e <_strtod_l+0x22e>
 800e2b6:	9808      	ldr	r0, [sp, #32]
 800e2b8:	230a      	movs	r3, #10
 800e2ba:	fb03 2300 	mla	r3, r3, r0, r2
 800e2be:	9308      	str	r3, [sp, #32]
 800e2c0:	e7e5      	b.n	800e28e <_strtod_l+0x22e>
 800e2c2:	4629      	mov	r1, r5
 800e2c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e2c6:	1c50      	adds	r0, r2, #1
 800e2c8:	9019      	str	r0, [sp, #100]	@ 0x64
 800e2ca:	7852      	ldrb	r2, [r2, #1]
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	460d      	mov	r5, r1
 800e2d0:	e7b1      	b.n	800e236 <_strtod_l+0x1d6>
 800e2d2:	f04f 0900 	mov.w	r9, #0
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	e77d      	b.n	800e1d6 <_strtod_l+0x176>
 800e2da:	f04f 0c00 	mov.w	ip, #0
 800e2de:	1ca2      	adds	r2, r4, #2
 800e2e0:	9219      	str	r2, [sp, #100]	@ 0x64
 800e2e2:	78a2      	ldrb	r2, [r4, #2]
 800e2e4:	e785      	b.n	800e1f2 <_strtod_l+0x192>
 800e2e6:	f04f 0c01 	mov.w	ip, #1
 800e2ea:	e7f8      	b.n	800e2de <_strtod_l+0x27e>
 800e2ec:	080136d8 	.word	0x080136d8
 800e2f0:	080136c0 	.word	0x080136c0
 800e2f4:	7ff00000 	.word	0x7ff00000
 800e2f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e2fa:	1c51      	adds	r1, r2, #1
 800e2fc:	9119      	str	r1, [sp, #100]	@ 0x64
 800e2fe:	7852      	ldrb	r2, [r2, #1]
 800e300:	2a30      	cmp	r2, #48	@ 0x30
 800e302:	d0f9      	beq.n	800e2f8 <_strtod_l+0x298>
 800e304:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e308:	2908      	cmp	r1, #8
 800e30a:	f63f af78 	bhi.w	800e1fe <_strtod_l+0x19e>
 800e30e:	3a30      	subs	r2, #48	@ 0x30
 800e310:	920e      	str	r2, [sp, #56]	@ 0x38
 800e312:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e314:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e316:	f04f 080a 	mov.w	r8, #10
 800e31a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e31c:	1c56      	adds	r6, r2, #1
 800e31e:	9619      	str	r6, [sp, #100]	@ 0x64
 800e320:	7852      	ldrb	r2, [r2, #1]
 800e322:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e326:	f1be 0f09 	cmp.w	lr, #9
 800e32a:	d939      	bls.n	800e3a0 <_strtod_l+0x340>
 800e32c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e32e:	1a76      	subs	r6, r6, r1
 800e330:	2e08      	cmp	r6, #8
 800e332:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e336:	dc03      	bgt.n	800e340 <_strtod_l+0x2e0>
 800e338:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e33a:	4588      	cmp	r8, r1
 800e33c:	bfa8      	it	ge
 800e33e:	4688      	movge	r8, r1
 800e340:	f1bc 0f00 	cmp.w	ip, #0
 800e344:	d001      	beq.n	800e34a <_strtod_l+0x2ea>
 800e346:	f1c8 0800 	rsb	r8, r8, #0
 800e34a:	2d00      	cmp	r5, #0
 800e34c:	d14e      	bne.n	800e3ec <_strtod_l+0x38c>
 800e34e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e350:	4308      	orrs	r0, r1
 800e352:	f47f aebe 	bne.w	800e0d2 <_strtod_l+0x72>
 800e356:	2b00      	cmp	r3, #0
 800e358:	f47f aed6 	bne.w	800e108 <_strtod_l+0xa8>
 800e35c:	2a69      	cmp	r2, #105	@ 0x69
 800e35e:	d028      	beq.n	800e3b2 <_strtod_l+0x352>
 800e360:	dc25      	bgt.n	800e3ae <_strtod_l+0x34e>
 800e362:	2a49      	cmp	r2, #73	@ 0x49
 800e364:	d025      	beq.n	800e3b2 <_strtod_l+0x352>
 800e366:	2a4e      	cmp	r2, #78	@ 0x4e
 800e368:	f47f aece 	bne.w	800e108 <_strtod_l+0xa8>
 800e36c:	499b      	ldr	r1, [pc, #620]	@ (800e5dc <_strtod_l+0x57c>)
 800e36e:	a819      	add	r0, sp, #100	@ 0x64
 800e370:	f002 fde2 	bl	8010f38 <__match>
 800e374:	2800      	cmp	r0, #0
 800e376:	f43f aec7 	beq.w	800e108 <_strtod_l+0xa8>
 800e37a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	2b28      	cmp	r3, #40	@ 0x28
 800e380:	d12e      	bne.n	800e3e0 <_strtod_l+0x380>
 800e382:	4997      	ldr	r1, [pc, #604]	@ (800e5e0 <_strtod_l+0x580>)
 800e384:	aa1c      	add	r2, sp, #112	@ 0x70
 800e386:	a819      	add	r0, sp, #100	@ 0x64
 800e388:	f002 fdea 	bl	8010f60 <__hexnan>
 800e38c:	2805      	cmp	r0, #5
 800e38e:	d127      	bne.n	800e3e0 <_strtod_l+0x380>
 800e390:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e392:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e396:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e39a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e39e:	e698      	b.n	800e0d2 <_strtod_l+0x72>
 800e3a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e3a2:	fb08 2101 	mla	r1, r8, r1, r2
 800e3a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e3aa:	920e      	str	r2, [sp, #56]	@ 0x38
 800e3ac:	e7b5      	b.n	800e31a <_strtod_l+0x2ba>
 800e3ae:	2a6e      	cmp	r2, #110	@ 0x6e
 800e3b0:	e7da      	b.n	800e368 <_strtod_l+0x308>
 800e3b2:	498c      	ldr	r1, [pc, #560]	@ (800e5e4 <_strtod_l+0x584>)
 800e3b4:	a819      	add	r0, sp, #100	@ 0x64
 800e3b6:	f002 fdbf 	bl	8010f38 <__match>
 800e3ba:	2800      	cmp	r0, #0
 800e3bc:	f43f aea4 	beq.w	800e108 <_strtod_l+0xa8>
 800e3c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e3c2:	4989      	ldr	r1, [pc, #548]	@ (800e5e8 <_strtod_l+0x588>)
 800e3c4:	3b01      	subs	r3, #1
 800e3c6:	a819      	add	r0, sp, #100	@ 0x64
 800e3c8:	9319      	str	r3, [sp, #100]	@ 0x64
 800e3ca:	f002 fdb5 	bl	8010f38 <__match>
 800e3ce:	b910      	cbnz	r0, 800e3d6 <_strtod_l+0x376>
 800e3d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e3d2:	3301      	adds	r3, #1
 800e3d4:	9319      	str	r3, [sp, #100]	@ 0x64
 800e3d6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e5f8 <_strtod_l+0x598>
 800e3da:	f04f 0a00 	mov.w	sl, #0
 800e3de:	e678      	b.n	800e0d2 <_strtod_l+0x72>
 800e3e0:	4882      	ldr	r0, [pc, #520]	@ (800e5ec <_strtod_l+0x58c>)
 800e3e2:	f001 fc79 	bl	800fcd8 <nan>
 800e3e6:	ec5b ab10 	vmov	sl, fp, d0
 800e3ea:	e672      	b.n	800e0d2 <_strtod_l+0x72>
 800e3ec:	eba8 0309 	sub.w	r3, r8, r9
 800e3f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e3f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3f4:	2f00      	cmp	r7, #0
 800e3f6:	bf08      	it	eq
 800e3f8:	462f      	moveq	r7, r5
 800e3fa:	2d10      	cmp	r5, #16
 800e3fc:	462c      	mov	r4, r5
 800e3fe:	bfa8      	it	ge
 800e400:	2410      	movge	r4, #16
 800e402:	f7f2 f8a7 	bl	8000554 <__aeabi_ui2d>
 800e406:	2d09      	cmp	r5, #9
 800e408:	4682      	mov	sl, r0
 800e40a:	468b      	mov	fp, r1
 800e40c:	dc13      	bgt.n	800e436 <_strtod_l+0x3d6>
 800e40e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e410:	2b00      	cmp	r3, #0
 800e412:	f43f ae5e 	beq.w	800e0d2 <_strtod_l+0x72>
 800e416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e418:	dd78      	ble.n	800e50c <_strtod_l+0x4ac>
 800e41a:	2b16      	cmp	r3, #22
 800e41c:	dc5f      	bgt.n	800e4de <_strtod_l+0x47e>
 800e41e:	4974      	ldr	r1, [pc, #464]	@ (800e5f0 <_strtod_l+0x590>)
 800e420:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e424:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e428:	4652      	mov	r2, sl
 800e42a:	465b      	mov	r3, fp
 800e42c:	f7f2 f90c 	bl	8000648 <__aeabi_dmul>
 800e430:	4682      	mov	sl, r0
 800e432:	468b      	mov	fp, r1
 800e434:	e64d      	b.n	800e0d2 <_strtod_l+0x72>
 800e436:	4b6e      	ldr	r3, [pc, #440]	@ (800e5f0 <_strtod_l+0x590>)
 800e438:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e43c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e440:	f7f2 f902 	bl	8000648 <__aeabi_dmul>
 800e444:	4682      	mov	sl, r0
 800e446:	9808      	ldr	r0, [sp, #32]
 800e448:	468b      	mov	fp, r1
 800e44a:	f7f2 f883 	bl	8000554 <__aeabi_ui2d>
 800e44e:	4602      	mov	r2, r0
 800e450:	460b      	mov	r3, r1
 800e452:	4650      	mov	r0, sl
 800e454:	4659      	mov	r1, fp
 800e456:	f7f1 ff41 	bl	80002dc <__adddf3>
 800e45a:	2d0f      	cmp	r5, #15
 800e45c:	4682      	mov	sl, r0
 800e45e:	468b      	mov	fp, r1
 800e460:	ddd5      	ble.n	800e40e <_strtod_l+0x3ae>
 800e462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e464:	1b2c      	subs	r4, r5, r4
 800e466:	441c      	add	r4, r3
 800e468:	2c00      	cmp	r4, #0
 800e46a:	f340 8096 	ble.w	800e59a <_strtod_l+0x53a>
 800e46e:	f014 030f 	ands.w	r3, r4, #15
 800e472:	d00a      	beq.n	800e48a <_strtod_l+0x42a>
 800e474:	495e      	ldr	r1, [pc, #376]	@ (800e5f0 <_strtod_l+0x590>)
 800e476:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e47a:	4652      	mov	r2, sl
 800e47c:	465b      	mov	r3, fp
 800e47e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e482:	f7f2 f8e1 	bl	8000648 <__aeabi_dmul>
 800e486:	4682      	mov	sl, r0
 800e488:	468b      	mov	fp, r1
 800e48a:	f034 040f 	bics.w	r4, r4, #15
 800e48e:	d073      	beq.n	800e578 <_strtod_l+0x518>
 800e490:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e494:	dd48      	ble.n	800e528 <_strtod_l+0x4c8>
 800e496:	2400      	movs	r4, #0
 800e498:	46a0      	mov	r8, r4
 800e49a:	940a      	str	r4, [sp, #40]	@ 0x28
 800e49c:	46a1      	mov	r9, r4
 800e49e:	9a05      	ldr	r2, [sp, #20]
 800e4a0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e5f8 <_strtod_l+0x598>
 800e4a4:	2322      	movs	r3, #34	@ 0x22
 800e4a6:	6013      	str	r3, [r2, #0]
 800e4a8:	f04f 0a00 	mov.w	sl, #0
 800e4ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	f43f ae0f 	beq.w	800e0d2 <_strtod_l+0x72>
 800e4b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e4b6:	9805      	ldr	r0, [sp, #20]
 800e4b8:	f002 fef6 	bl	80112a8 <_Bfree>
 800e4bc:	9805      	ldr	r0, [sp, #20]
 800e4be:	4649      	mov	r1, r9
 800e4c0:	f002 fef2 	bl	80112a8 <_Bfree>
 800e4c4:	9805      	ldr	r0, [sp, #20]
 800e4c6:	4641      	mov	r1, r8
 800e4c8:	f002 feee 	bl	80112a8 <_Bfree>
 800e4cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e4ce:	9805      	ldr	r0, [sp, #20]
 800e4d0:	f002 feea 	bl	80112a8 <_Bfree>
 800e4d4:	9805      	ldr	r0, [sp, #20]
 800e4d6:	4621      	mov	r1, r4
 800e4d8:	f002 fee6 	bl	80112a8 <_Bfree>
 800e4dc:	e5f9      	b.n	800e0d2 <_strtod_l+0x72>
 800e4de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e4e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e4e4:	4293      	cmp	r3, r2
 800e4e6:	dbbc      	blt.n	800e462 <_strtod_l+0x402>
 800e4e8:	4c41      	ldr	r4, [pc, #260]	@ (800e5f0 <_strtod_l+0x590>)
 800e4ea:	f1c5 050f 	rsb	r5, r5, #15
 800e4ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e4f2:	4652      	mov	r2, sl
 800e4f4:	465b      	mov	r3, fp
 800e4f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4fa:	f7f2 f8a5 	bl	8000648 <__aeabi_dmul>
 800e4fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e500:	1b5d      	subs	r5, r3, r5
 800e502:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e506:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e50a:	e78f      	b.n	800e42c <_strtod_l+0x3cc>
 800e50c:	3316      	adds	r3, #22
 800e50e:	dba8      	blt.n	800e462 <_strtod_l+0x402>
 800e510:	4b37      	ldr	r3, [pc, #220]	@ (800e5f0 <_strtod_l+0x590>)
 800e512:	eba9 0808 	sub.w	r8, r9, r8
 800e516:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e51a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e51e:	4650      	mov	r0, sl
 800e520:	4659      	mov	r1, fp
 800e522:	f7f2 f9bb 	bl	800089c <__aeabi_ddiv>
 800e526:	e783      	b.n	800e430 <_strtod_l+0x3d0>
 800e528:	4b32      	ldr	r3, [pc, #200]	@ (800e5f4 <_strtod_l+0x594>)
 800e52a:	9308      	str	r3, [sp, #32]
 800e52c:	2300      	movs	r3, #0
 800e52e:	1124      	asrs	r4, r4, #4
 800e530:	4650      	mov	r0, sl
 800e532:	4659      	mov	r1, fp
 800e534:	461e      	mov	r6, r3
 800e536:	2c01      	cmp	r4, #1
 800e538:	dc21      	bgt.n	800e57e <_strtod_l+0x51e>
 800e53a:	b10b      	cbz	r3, 800e540 <_strtod_l+0x4e0>
 800e53c:	4682      	mov	sl, r0
 800e53e:	468b      	mov	fp, r1
 800e540:	492c      	ldr	r1, [pc, #176]	@ (800e5f4 <_strtod_l+0x594>)
 800e542:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e546:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e54a:	4652      	mov	r2, sl
 800e54c:	465b      	mov	r3, fp
 800e54e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e552:	f7f2 f879 	bl	8000648 <__aeabi_dmul>
 800e556:	4b28      	ldr	r3, [pc, #160]	@ (800e5f8 <_strtod_l+0x598>)
 800e558:	460a      	mov	r2, r1
 800e55a:	400b      	ands	r3, r1
 800e55c:	4927      	ldr	r1, [pc, #156]	@ (800e5fc <_strtod_l+0x59c>)
 800e55e:	428b      	cmp	r3, r1
 800e560:	4682      	mov	sl, r0
 800e562:	d898      	bhi.n	800e496 <_strtod_l+0x436>
 800e564:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e568:	428b      	cmp	r3, r1
 800e56a:	bf86      	itte	hi
 800e56c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e600 <_strtod_l+0x5a0>
 800e570:	f04f 3aff 	movhi.w	sl, #4294967295
 800e574:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e578:	2300      	movs	r3, #0
 800e57a:	9308      	str	r3, [sp, #32]
 800e57c:	e07a      	b.n	800e674 <_strtod_l+0x614>
 800e57e:	07e2      	lsls	r2, r4, #31
 800e580:	d505      	bpl.n	800e58e <_strtod_l+0x52e>
 800e582:	9b08      	ldr	r3, [sp, #32]
 800e584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e588:	f7f2 f85e 	bl	8000648 <__aeabi_dmul>
 800e58c:	2301      	movs	r3, #1
 800e58e:	9a08      	ldr	r2, [sp, #32]
 800e590:	3208      	adds	r2, #8
 800e592:	3601      	adds	r6, #1
 800e594:	1064      	asrs	r4, r4, #1
 800e596:	9208      	str	r2, [sp, #32]
 800e598:	e7cd      	b.n	800e536 <_strtod_l+0x4d6>
 800e59a:	d0ed      	beq.n	800e578 <_strtod_l+0x518>
 800e59c:	4264      	negs	r4, r4
 800e59e:	f014 020f 	ands.w	r2, r4, #15
 800e5a2:	d00a      	beq.n	800e5ba <_strtod_l+0x55a>
 800e5a4:	4b12      	ldr	r3, [pc, #72]	@ (800e5f0 <_strtod_l+0x590>)
 800e5a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e5aa:	4650      	mov	r0, sl
 800e5ac:	4659      	mov	r1, fp
 800e5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b2:	f7f2 f973 	bl	800089c <__aeabi_ddiv>
 800e5b6:	4682      	mov	sl, r0
 800e5b8:	468b      	mov	fp, r1
 800e5ba:	1124      	asrs	r4, r4, #4
 800e5bc:	d0dc      	beq.n	800e578 <_strtod_l+0x518>
 800e5be:	2c1f      	cmp	r4, #31
 800e5c0:	dd20      	ble.n	800e604 <_strtod_l+0x5a4>
 800e5c2:	2400      	movs	r4, #0
 800e5c4:	46a0      	mov	r8, r4
 800e5c6:	940a      	str	r4, [sp, #40]	@ 0x28
 800e5c8:	46a1      	mov	r9, r4
 800e5ca:	9a05      	ldr	r2, [sp, #20]
 800e5cc:	2322      	movs	r3, #34	@ 0x22
 800e5ce:	f04f 0a00 	mov.w	sl, #0
 800e5d2:	f04f 0b00 	mov.w	fp, #0
 800e5d6:	6013      	str	r3, [r2, #0]
 800e5d8:	e768      	b.n	800e4ac <_strtod_l+0x44c>
 800e5da:	bf00      	nop
 800e5dc:	08013725 	.word	0x08013725
 800e5e0:	080136c4 	.word	0x080136c4
 800e5e4:	0801371d 	.word	0x0801371d
 800e5e8:	0801375c 	.word	0x0801375c
 800e5ec:	08013aed 	.word	0x08013aed
 800e5f0:	080138d8 	.word	0x080138d8
 800e5f4:	080138b0 	.word	0x080138b0
 800e5f8:	7ff00000 	.word	0x7ff00000
 800e5fc:	7ca00000 	.word	0x7ca00000
 800e600:	7fefffff 	.word	0x7fefffff
 800e604:	f014 0310 	ands.w	r3, r4, #16
 800e608:	bf18      	it	ne
 800e60a:	236a      	movne	r3, #106	@ 0x6a
 800e60c:	4ea9      	ldr	r6, [pc, #676]	@ (800e8b4 <_strtod_l+0x854>)
 800e60e:	9308      	str	r3, [sp, #32]
 800e610:	4650      	mov	r0, sl
 800e612:	4659      	mov	r1, fp
 800e614:	2300      	movs	r3, #0
 800e616:	07e2      	lsls	r2, r4, #31
 800e618:	d504      	bpl.n	800e624 <_strtod_l+0x5c4>
 800e61a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e61e:	f7f2 f813 	bl	8000648 <__aeabi_dmul>
 800e622:	2301      	movs	r3, #1
 800e624:	1064      	asrs	r4, r4, #1
 800e626:	f106 0608 	add.w	r6, r6, #8
 800e62a:	d1f4      	bne.n	800e616 <_strtod_l+0x5b6>
 800e62c:	b10b      	cbz	r3, 800e632 <_strtod_l+0x5d2>
 800e62e:	4682      	mov	sl, r0
 800e630:	468b      	mov	fp, r1
 800e632:	9b08      	ldr	r3, [sp, #32]
 800e634:	b1b3      	cbz	r3, 800e664 <_strtod_l+0x604>
 800e636:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e63a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e63e:	2b00      	cmp	r3, #0
 800e640:	4659      	mov	r1, fp
 800e642:	dd0f      	ble.n	800e664 <_strtod_l+0x604>
 800e644:	2b1f      	cmp	r3, #31
 800e646:	dd55      	ble.n	800e6f4 <_strtod_l+0x694>
 800e648:	2b34      	cmp	r3, #52	@ 0x34
 800e64a:	bfde      	ittt	le
 800e64c:	f04f 33ff 	movle.w	r3, #4294967295
 800e650:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e654:	4093      	lslle	r3, r2
 800e656:	f04f 0a00 	mov.w	sl, #0
 800e65a:	bfcc      	ite	gt
 800e65c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e660:	ea03 0b01 	andle.w	fp, r3, r1
 800e664:	2200      	movs	r2, #0
 800e666:	2300      	movs	r3, #0
 800e668:	4650      	mov	r0, sl
 800e66a:	4659      	mov	r1, fp
 800e66c:	f7f2 fa54 	bl	8000b18 <__aeabi_dcmpeq>
 800e670:	2800      	cmp	r0, #0
 800e672:	d1a6      	bne.n	800e5c2 <_strtod_l+0x562>
 800e674:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e676:	9300      	str	r3, [sp, #0]
 800e678:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e67a:	9805      	ldr	r0, [sp, #20]
 800e67c:	462b      	mov	r3, r5
 800e67e:	463a      	mov	r2, r7
 800e680:	f002 fe7a 	bl	8011378 <__s2b>
 800e684:	900a      	str	r0, [sp, #40]	@ 0x28
 800e686:	2800      	cmp	r0, #0
 800e688:	f43f af05 	beq.w	800e496 <_strtod_l+0x436>
 800e68c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e68e:	2a00      	cmp	r2, #0
 800e690:	eba9 0308 	sub.w	r3, r9, r8
 800e694:	bfa8      	it	ge
 800e696:	2300      	movge	r3, #0
 800e698:	9312      	str	r3, [sp, #72]	@ 0x48
 800e69a:	2400      	movs	r4, #0
 800e69c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e6a0:	9316      	str	r3, [sp, #88]	@ 0x58
 800e6a2:	46a0      	mov	r8, r4
 800e6a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6a6:	9805      	ldr	r0, [sp, #20]
 800e6a8:	6859      	ldr	r1, [r3, #4]
 800e6aa:	f002 fdbd 	bl	8011228 <_Balloc>
 800e6ae:	4681      	mov	r9, r0
 800e6b0:	2800      	cmp	r0, #0
 800e6b2:	f43f aef4 	beq.w	800e49e <_strtod_l+0x43e>
 800e6b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6b8:	691a      	ldr	r2, [r3, #16]
 800e6ba:	3202      	adds	r2, #2
 800e6bc:	f103 010c 	add.w	r1, r3, #12
 800e6c0:	0092      	lsls	r2, r2, #2
 800e6c2:	300c      	adds	r0, #12
 800e6c4:	f001 faf9 	bl	800fcba <memcpy>
 800e6c8:	ec4b ab10 	vmov	d0, sl, fp
 800e6cc:	9805      	ldr	r0, [sp, #20]
 800e6ce:	aa1c      	add	r2, sp, #112	@ 0x70
 800e6d0:	a91b      	add	r1, sp, #108	@ 0x6c
 800e6d2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e6d6:	f003 f98b 	bl	80119f0 <__d2b>
 800e6da:	901a      	str	r0, [sp, #104]	@ 0x68
 800e6dc:	2800      	cmp	r0, #0
 800e6de:	f43f aede 	beq.w	800e49e <_strtod_l+0x43e>
 800e6e2:	9805      	ldr	r0, [sp, #20]
 800e6e4:	2101      	movs	r1, #1
 800e6e6:	f002 fedd 	bl	80114a4 <__i2b>
 800e6ea:	4680      	mov	r8, r0
 800e6ec:	b948      	cbnz	r0, 800e702 <_strtod_l+0x6a2>
 800e6ee:	f04f 0800 	mov.w	r8, #0
 800e6f2:	e6d4      	b.n	800e49e <_strtod_l+0x43e>
 800e6f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e6f8:	fa02 f303 	lsl.w	r3, r2, r3
 800e6fc:	ea03 0a0a 	and.w	sl, r3, sl
 800e700:	e7b0      	b.n	800e664 <_strtod_l+0x604>
 800e702:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e704:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e706:	2d00      	cmp	r5, #0
 800e708:	bfab      	itete	ge
 800e70a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e70c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e70e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e710:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e712:	bfac      	ite	ge
 800e714:	18ef      	addge	r7, r5, r3
 800e716:	1b5e      	sublt	r6, r3, r5
 800e718:	9b08      	ldr	r3, [sp, #32]
 800e71a:	1aed      	subs	r5, r5, r3
 800e71c:	4415      	add	r5, r2
 800e71e:	4b66      	ldr	r3, [pc, #408]	@ (800e8b8 <_strtod_l+0x858>)
 800e720:	3d01      	subs	r5, #1
 800e722:	429d      	cmp	r5, r3
 800e724:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e728:	da50      	bge.n	800e7cc <_strtod_l+0x76c>
 800e72a:	1b5b      	subs	r3, r3, r5
 800e72c:	2b1f      	cmp	r3, #31
 800e72e:	eba2 0203 	sub.w	r2, r2, r3
 800e732:	f04f 0101 	mov.w	r1, #1
 800e736:	dc3d      	bgt.n	800e7b4 <_strtod_l+0x754>
 800e738:	fa01 f303 	lsl.w	r3, r1, r3
 800e73c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e73e:	2300      	movs	r3, #0
 800e740:	9310      	str	r3, [sp, #64]	@ 0x40
 800e742:	18bd      	adds	r5, r7, r2
 800e744:	9b08      	ldr	r3, [sp, #32]
 800e746:	42af      	cmp	r7, r5
 800e748:	4416      	add	r6, r2
 800e74a:	441e      	add	r6, r3
 800e74c:	463b      	mov	r3, r7
 800e74e:	bfa8      	it	ge
 800e750:	462b      	movge	r3, r5
 800e752:	42b3      	cmp	r3, r6
 800e754:	bfa8      	it	ge
 800e756:	4633      	movge	r3, r6
 800e758:	2b00      	cmp	r3, #0
 800e75a:	bfc2      	ittt	gt
 800e75c:	1aed      	subgt	r5, r5, r3
 800e75e:	1af6      	subgt	r6, r6, r3
 800e760:	1aff      	subgt	r7, r7, r3
 800e762:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e764:	2b00      	cmp	r3, #0
 800e766:	dd16      	ble.n	800e796 <_strtod_l+0x736>
 800e768:	4641      	mov	r1, r8
 800e76a:	9805      	ldr	r0, [sp, #20]
 800e76c:	461a      	mov	r2, r3
 800e76e:	f002 ff59 	bl	8011624 <__pow5mult>
 800e772:	4680      	mov	r8, r0
 800e774:	2800      	cmp	r0, #0
 800e776:	d0ba      	beq.n	800e6ee <_strtod_l+0x68e>
 800e778:	4601      	mov	r1, r0
 800e77a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e77c:	9805      	ldr	r0, [sp, #20]
 800e77e:	f002 fea7 	bl	80114d0 <__multiply>
 800e782:	900e      	str	r0, [sp, #56]	@ 0x38
 800e784:	2800      	cmp	r0, #0
 800e786:	f43f ae8a 	beq.w	800e49e <_strtod_l+0x43e>
 800e78a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e78c:	9805      	ldr	r0, [sp, #20]
 800e78e:	f002 fd8b 	bl	80112a8 <_Bfree>
 800e792:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e794:	931a      	str	r3, [sp, #104]	@ 0x68
 800e796:	2d00      	cmp	r5, #0
 800e798:	dc1d      	bgt.n	800e7d6 <_strtod_l+0x776>
 800e79a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	dd23      	ble.n	800e7e8 <_strtod_l+0x788>
 800e7a0:	4649      	mov	r1, r9
 800e7a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e7a4:	9805      	ldr	r0, [sp, #20]
 800e7a6:	f002 ff3d 	bl	8011624 <__pow5mult>
 800e7aa:	4681      	mov	r9, r0
 800e7ac:	b9e0      	cbnz	r0, 800e7e8 <_strtod_l+0x788>
 800e7ae:	f04f 0900 	mov.w	r9, #0
 800e7b2:	e674      	b.n	800e49e <_strtod_l+0x43e>
 800e7b4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e7b8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e7bc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e7c0:	35e2      	adds	r5, #226	@ 0xe2
 800e7c2:	fa01 f305 	lsl.w	r3, r1, r5
 800e7c6:	9310      	str	r3, [sp, #64]	@ 0x40
 800e7c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e7ca:	e7ba      	b.n	800e742 <_strtod_l+0x6e2>
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	9310      	str	r3, [sp, #64]	@ 0x40
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e7d4:	e7b5      	b.n	800e742 <_strtod_l+0x6e2>
 800e7d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e7d8:	9805      	ldr	r0, [sp, #20]
 800e7da:	462a      	mov	r2, r5
 800e7dc:	f002 ff7c 	bl	80116d8 <__lshift>
 800e7e0:	901a      	str	r0, [sp, #104]	@ 0x68
 800e7e2:	2800      	cmp	r0, #0
 800e7e4:	d1d9      	bne.n	800e79a <_strtod_l+0x73a>
 800e7e6:	e65a      	b.n	800e49e <_strtod_l+0x43e>
 800e7e8:	2e00      	cmp	r6, #0
 800e7ea:	dd07      	ble.n	800e7fc <_strtod_l+0x79c>
 800e7ec:	4649      	mov	r1, r9
 800e7ee:	9805      	ldr	r0, [sp, #20]
 800e7f0:	4632      	mov	r2, r6
 800e7f2:	f002 ff71 	bl	80116d8 <__lshift>
 800e7f6:	4681      	mov	r9, r0
 800e7f8:	2800      	cmp	r0, #0
 800e7fa:	d0d8      	beq.n	800e7ae <_strtod_l+0x74e>
 800e7fc:	2f00      	cmp	r7, #0
 800e7fe:	dd08      	ble.n	800e812 <_strtod_l+0x7b2>
 800e800:	4641      	mov	r1, r8
 800e802:	9805      	ldr	r0, [sp, #20]
 800e804:	463a      	mov	r2, r7
 800e806:	f002 ff67 	bl	80116d8 <__lshift>
 800e80a:	4680      	mov	r8, r0
 800e80c:	2800      	cmp	r0, #0
 800e80e:	f43f ae46 	beq.w	800e49e <_strtod_l+0x43e>
 800e812:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e814:	9805      	ldr	r0, [sp, #20]
 800e816:	464a      	mov	r2, r9
 800e818:	f002 ffe6 	bl	80117e8 <__mdiff>
 800e81c:	4604      	mov	r4, r0
 800e81e:	2800      	cmp	r0, #0
 800e820:	f43f ae3d 	beq.w	800e49e <_strtod_l+0x43e>
 800e824:	68c3      	ldr	r3, [r0, #12]
 800e826:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e828:	2300      	movs	r3, #0
 800e82a:	60c3      	str	r3, [r0, #12]
 800e82c:	4641      	mov	r1, r8
 800e82e:	f002 ffbf 	bl	80117b0 <__mcmp>
 800e832:	2800      	cmp	r0, #0
 800e834:	da46      	bge.n	800e8c4 <_strtod_l+0x864>
 800e836:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e838:	ea53 030a 	orrs.w	r3, r3, sl
 800e83c:	d16c      	bne.n	800e918 <_strtod_l+0x8b8>
 800e83e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e842:	2b00      	cmp	r3, #0
 800e844:	d168      	bne.n	800e918 <_strtod_l+0x8b8>
 800e846:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e84a:	0d1b      	lsrs	r3, r3, #20
 800e84c:	051b      	lsls	r3, r3, #20
 800e84e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e852:	d961      	bls.n	800e918 <_strtod_l+0x8b8>
 800e854:	6963      	ldr	r3, [r4, #20]
 800e856:	b913      	cbnz	r3, 800e85e <_strtod_l+0x7fe>
 800e858:	6923      	ldr	r3, [r4, #16]
 800e85a:	2b01      	cmp	r3, #1
 800e85c:	dd5c      	ble.n	800e918 <_strtod_l+0x8b8>
 800e85e:	4621      	mov	r1, r4
 800e860:	2201      	movs	r2, #1
 800e862:	9805      	ldr	r0, [sp, #20]
 800e864:	f002 ff38 	bl	80116d8 <__lshift>
 800e868:	4641      	mov	r1, r8
 800e86a:	4604      	mov	r4, r0
 800e86c:	f002 ffa0 	bl	80117b0 <__mcmp>
 800e870:	2800      	cmp	r0, #0
 800e872:	dd51      	ble.n	800e918 <_strtod_l+0x8b8>
 800e874:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e878:	9a08      	ldr	r2, [sp, #32]
 800e87a:	0d1b      	lsrs	r3, r3, #20
 800e87c:	051b      	lsls	r3, r3, #20
 800e87e:	2a00      	cmp	r2, #0
 800e880:	d06b      	beq.n	800e95a <_strtod_l+0x8fa>
 800e882:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e886:	d868      	bhi.n	800e95a <_strtod_l+0x8fa>
 800e888:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e88c:	f67f ae9d 	bls.w	800e5ca <_strtod_l+0x56a>
 800e890:	4b0a      	ldr	r3, [pc, #40]	@ (800e8bc <_strtod_l+0x85c>)
 800e892:	4650      	mov	r0, sl
 800e894:	4659      	mov	r1, fp
 800e896:	2200      	movs	r2, #0
 800e898:	f7f1 fed6 	bl	8000648 <__aeabi_dmul>
 800e89c:	4b08      	ldr	r3, [pc, #32]	@ (800e8c0 <_strtod_l+0x860>)
 800e89e:	400b      	ands	r3, r1
 800e8a0:	4682      	mov	sl, r0
 800e8a2:	468b      	mov	fp, r1
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	f47f ae05 	bne.w	800e4b4 <_strtod_l+0x454>
 800e8aa:	9a05      	ldr	r2, [sp, #20]
 800e8ac:	2322      	movs	r3, #34	@ 0x22
 800e8ae:	6013      	str	r3, [r2, #0]
 800e8b0:	e600      	b.n	800e4b4 <_strtod_l+0x454>
 800e8b2:	bf00      	nop
 800e8b4:	080136f0 	.word	0x080136f0
 800e8b8:	fffffc02 	.word	0xfffffc02
 800e8bc:	39500000 	.word	0x39500000
 800e8c0:	7ff00000 	.word	0x7ff00000
 800e8c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e8c8:	d165      	bne.n	800e996 <_strtod_l+0x936>
 800e8ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e8cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e8d0:	b35a      	cbz	r2, 800e92a <_strtod_l+0x8ca>
 800e8d2:	4a9f      	ldr	r2, [pc, #636]	@ (800eb50 <_strtod_l+0xaf0>)
 800e8d4:	4293      	cmp	r3, r2
 800e8d6:	d12b      	bne.n	800e930 <_strtod_l+0x8d0>
 800e8d8:	9b08      	ldr	r3, [sp, #32]
 800e8da:	4651      	mov	r1, sl
 800e8dc:	b303      	cbz	r3, 800e920 <_strtod_l+0x8c0>
 800e8de:	4b9d      	ldr	r3, [pc, #628]	@ (800eb54 <_strtod_l+0xaf4>)
 800e8e0:	465a      	mov	r2, fp
 800e8e2:	4013      	ands	r3, r2
 800e8e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e8e8:	f04f 32ff 	mov.w	r2, #4294967295
 800e8ec:	d81b      	bhi.n	800e926 <_strtod_l+0x8c6>
 800e8ee:	0d1b      	lsrs	r3, r3, #20
 800e8f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e8f4:	fa02 f303 	lsl.w	r3, r2, r3
 800e8f8:	4299      	cmp	r1, r3
 800e8fa:	d119      	bne.n	800e930 <_strtod_l+0x8d0>
 800e8fc:	4b96      	ldr	r3, [pc, #600]	@ (800eb58 <_strtod_l+0xaf8>)
 800e8fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e900:	429a      	cmp	r2, r3
 800e902:	d102      	bne.n	800e90a <_strtod_l+0x8aa>
 800e904:	3101      	adds	r1, #1
 800e906:	f43f adca 	beq.w	800e49e <_strtod_l+0x43e>
 800e90a:	4b92      	ldr	r3, [pc, #584]	@ (800eb54 <_strtod_l+0xaf4>)
 800e90c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e90e:	401a      	ands	r2, r3
 800e910:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e914:	f04f 0a00 	mov.w	sl, #0
 800e918:	9b08      	ldr	r3, [sp, #32]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d1b8      	bne.n	800e890 <_strtod_l+0x830>
 800e91e:	e5c9      	b.n	800e4b4 <_strtod_l+0x454>
 800e920:	f04f 33ff 	mov.w	r3, #4294967295
 800e924:	e7e8      	b.n	800e8f8 <_strtod_l+0x898>
 800e926:	4613      	mov	r3, r2
 800e928:	e7e6      	b.n	800e8f8 <_strtod_l+0x898>
 800e92a:	ea53 030a 	orrs.w	r3, r3, sl
 800e92e:	d0a1      	beq.n	800e874 <_strtod_l+0x814>
 800e930:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e932:	b1db      	cbz	r3, 800e96c <_strtod_l+0x90c>
 800e934:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e936:	4213      	tst	r3, r2
 800e938:	d0ee      	beq.n	800e918 <_strtod_l+0x8b8>
 800e93a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e93c:	9a08      	ldr	r2, [sp, #32]
 800e93e:	4650      	mov	r0, sl
 800e940:	4659      	mov	r1, fp
 800e942:	b1bb      	cbz	r3, 800e974 <_strtod_l+0x914>
 800e944:	f7ff fb6e 	bl	800e024 <sulp>
 800e948:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e94c:	ec53 2b10 	vmov	r2, r3, d0
 800e950:	f7f1 fcc4 	bl	80002dc <__adddf3>
 800e954:	4682      	mov	sl, r0
 800e956:	468b      	mov	fp, r1
 800e958:	e7de      	b.n	800e918 <_strtod_l+0x8b8>
 800e95a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e95e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e962:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e966:	f04f 3aff 	mov.w	sl, #4294967295
 800e96a:	e7d5      	b.n	800e918 <_strtod_l+0x8b8>
 800e96c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e96e:	ea13 0f0a 	tst.w	r3, sl
 800e972:	e7e1      	b.n	800e938 <_strtod_l+0x8d8>
 800e974:	f7ff fb56 	bl	800e024 <sulp>
 800e978:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e97c:	ec53 2b10 	vmov	r2, r3, d0
 800e980:	f7f1 fcaa 	bl	80002d8 <__aeabi_dsub>
 800e984:	2200      	movs	r2, #0
 800e986:	2300      	movs	r3, #0
 800e988:	4682      	mov	sl, r0
 800e98a:	468b      	mov	fp, r1
 800e98c:	f7f2 f8c4 	bl	8000b18 <__aeabi_dcmpeq>
 800e990:	2800      	cmp	r0, #0
 800e992:	d0c1      	beq.n	800e918 <_strtod_l+0x8b8>
 800e994:	e619      	b.n	800e5ca <_strtod_l+0x56a>
 800e996:	4641      	mov	r1, r8
 800e998:	4620      	mov	r0, r4
 800e99a:	f003 f881 	bl	8011aa0 <__ratio>
 800e99e:	ec57 6b10 	vmov	r6, r7, d0
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e9a8:	4630      	mov	r0, r6
 800e9aa:	4639      	mov	r1, r7
 800e9ac:	f7f2 f8c8 	bl	8000b40 <__aeabi_dcmple>
 800e9b0:	2800      	cmp	r0, #0
 800e9b2:	d06f      	beq.n	800ea94 <_strtod_l+0xa34>
 800e9b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d17a      	bne.n	800eab0 <_strtod_l+0xa50>
 800e9ba:	f1ba 0f00 	cmp.w	sl, #0
 800e9be:	d158      	bne.n	800ea72 <_strtod_l+0xa12>
 800e9c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e9c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d15a      	bne.n	800ea80 <_strtod_l+0xa20>
 800e9ca:	4b64      	ldr	r3, [pc, #400]	@ (800eb5c <_strtod_l+0xafc>)
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	4630      	mov	r0, r6
 800e9d0:	4639      	mov	r1, r7
 800e9d2:	f7f2 f8ab 	bl	8000b2c <__aeabi_dcmplt>
 800e9d6:	2800      	cmp	r0, #0
 800e9d8:	d159      	bne.n	800ea8e <_strtod_l+0xa2e>
 800e9da:	4630      	mov	r0, r6
 800e9dc:	4639      	mov	r1, r7
 800e9de:	4b60      	ldr	r3, [pc, #384]	@ (800eb60 <_strtod_l+0xb00>)
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	f7f1 fe31 	bl	8000648 <__aeabi_dmul>
 800e9e6:	4606      	mov	r6, r0
 800e9e8:	460f      	mov	r7, r1
 800e9ea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e9ee:	9606      	str	r6, [sp, #24]
 800e9f0:	9307      	str	r3, [sp, #28]
 800e9f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e9f6:	4d57      	ldr	r5, [pc, #348]	@ (800eb54 <_strtod_l+0xaf4>)
 800e9f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e9fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e9fe:	401d      	ands	r5, r3
 800ea00:	4b58      	ldr	r3, [pc, #352]	@ (800eb64 <_strtod_l+0xb04>)
 800ea02:	429d      	cmp	r5, r3
 800ea04:	f040 80b2 	bne.w	800eb6c <_strtod_l+0xb0c>
 800ea08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea0a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ea0e:	ec4b ab10 	vmov	d0, sl, fp
 800ea12:	f002 ff7d 	bl	8011910 <__ulp>
 800ea16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea1a:	ec51 0b10 	vmov	r0, r1, d0
 800ea1e:	f7f1 fe13 	bl	8000648 <__aeabi_dmul>
 800ea22:	4652      	mov	r2, sl
 800ea24:	465b      	mov	r3, fp
 800ea26:	f7f1 fc59 	bl	80002dc <__adddf3>
 800ea2a:	460b      	mov	r3, r1
 800ea2c:	4949      	ldr	r1, [pc, #292]	@ (800eb54 <_strtod_l+0xaf4>)
 800ea2e:	4a4e      	ldr	r2, [pc, #312]	@ (800eb68 <_strtod_l+0xb08>)
 800ea30:	4019      	ands	r1, r3
 800ea32:	4291      	cmp	r1, r2
 800ea34:	4682      	mov	sl, r0
 800ea36:	d942      	bls.n	800eabe <_strtod_l+0xa5e>
 800ea38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ea3a:	4b47      	ldr	r3, [pc, #284]	@ (800eb58 <_strtod_l+0xaf8>)
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	d103      	bne.n	800ea48 <_strtod_l+0x9e8>
 800ea40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ea42:	3301      	adds	r3, #1
 800ea44:	f43f ad2b 	beq.w	800e49e <_strtod_l+0x43e>
 800ea48:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800eb58 <_strtod_l+0xaf8>
 800ea4c:	f04f 3aff 	mov.w	sl, #4294967295
 800ea50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ea52:	9805      	ldr	r0, [sp, #20]
 800ea54:	f002 fc28 	bl	80112a8 <_Bfree>
 800ea58:	9805      	ldr	r0, [sp, #20]
 800ea5a:	4649      	mov	r1, r9
 800ea5c:	f002 fc24 	bl	80112a8 <_Bfree>
 800ea60:	9805      	ldr	r0, [sp, #20]
 800ea62:	4641      	mov	r1, r8
 800ea64:	f002 fc20 	bl	80112a8 <_Bfree>
 800ea68:	9805      	ldr	r0, [sp, #20]
 800ea6a:	4621      	mov	r1, r4
 800ea6c:	f002 fc1c 	bl	80112a8 <_Bfree>
 800ea70:	e618      	b.n	800e6a4 <_strtod_l+0x644>
 800ea72:	f1ba 0f01 	cmp.w	sl, #1
 800ea76:	d103      	bne.n	800ea80 <_strtod_l+0xa20>
 800ea78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	f43f ada5 	beq.w	800e5ca <_strtod_l+0x56a>
 800ea80:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800eb30 <_strtod_l+0xad0>
 800ea84:	4f35      	ldr	r7, [pc, #212]	@ (800eb5c <_strtod_l+0xafc>)
 800ea86:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ea8a:	2600      	movs	r6, #0
 800ea8c:	e7b1      	b.n	800e9f2 <_strtod_l+0x992>
 800ea8e:	4f34      	ldr	r7, [pc, #208]	@ (800eb60 <_strtod_l+0xb00>)
 800ea90:	2600      	movs	r6, #0
 800ea92:	e7aa      	b.n	800e9ea <_strtod_l+0x98a>
 800ea94:	4b32      	ldr	r3, [pc, #200]	@ (800eb60 <_strtod_l+0xb00>)
 800ea96:	4630      	mov	r0, r6
 800ea98:	4639      	mov	r1, r7
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	f7f1 fdd4 	bl	8000648 <__aeabi_dmul>
 800eaa0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eaa2:	4606      	mov	r6, r0
 800eaa4:	460f      	mov	r7, r1
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d09f      	beq.n	800e9ea <_strtod_l+0x98a>
 800eaaa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800eaae:	e7a0      	b.n	800e9f2 <_strtod_l+0x992>
 800eab0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800eb38 <_strtod_l+0xad8>
 800eab4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800eab8:	ec57 6b17 	vmov	r6, r7, d7
 800eabc:	e799      	b.n	800e9f2 <_strtod_l+0x992>
 800eabe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800eac2:	9b08      	ldr	r3, [sp, #32]
 800eac4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d1c1      	bne.n	800ea50 <_strtod_l+0x9f0>
 800eacc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ead0:	0d1b      	lsrs	r3, r3, #20
 800ead2:	051b      	lsls	r3, r3, #20
 800ead4:	429d      	cmp	r5, r3
 800ead6:	d1bb      	bne.n	800ea50 <_strtod_l+0x9f0>
 800ead8:	4630      	mov	r0, r6
 800eada:	4639      	mov	r1, r7
 800eadc:	f7f2 f914 	bl	8000d08 <__aeabi_d2lz>
 800eae0:	f7f1 fd84 	bl	80005ec <__aeabi_l2d>
 800eae4:	4602      	mov	r2, r0
 800eae6:	460b      	mov	r3, r1
 800eae8:	4630      	mov	r0, r6
 800eaea:	4639      	mov	r1, r7
 800eaec:	f7f1 fbf4 	bl	80002d8 <__aeabi_dsub>
 800eaf0:	460b      	mov	r3, r1
 800eaf2:	4602      	mov	r2, r0
 800eaf4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800eaf8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800eafc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eafe:	ea46 060a 	orr.w	r6, r6, sl
 800eb02:	431e      	orrs	r6, r3
 800eb04:	d06f      	beq.n	800ebe6 <_strtod_l+0xb86>
 800eb06:	a30e      	add	r3, pc, #56	@ (adr r3, 800eb40 <_strtod_l+0xae0>)
 800eb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb0c:	f7f2 f80e 	bl	8000b2c <__aeabi_dcmplt>
 800eb10:	2800      	cmp	r0, #0
 800eb12:	f47f accf 	bne.w	800e4b4 <_strtod_l+0x454>
 800eb16:	a30c      	add	r3, pc, #48	@ (adr r3, 800eb48 <_strtod_l+0xae8>)
 800eb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eb20:	f7f2 f822 	bl	8000b68 <__aeabi_dcmpgt>
 800eb24:	2800      	cmp	r0, #0
 800eb26:	d093      	beq.n	800ea50 <_strtod_l+0x9f0>
 800eb28:	e4c4      	b.n	800e4b4 <_strtod_l+0x454>
 800eb2a:	bf00      	nop
 800eb2c:	f3af 8000 	nop.w
 800eb30:	00000000 	.word	0x00000000
 800eb34:	bff00000 	.word	0xbff00000
 800eb38:	00000000 	.word	0x00000000
 800eb3c:	3ff00000 	.word	0x3ff00000
 800eb40:	94a03595 	.word	0x94a03595
 800eb44:	3fdfffff 	.word	0x3fdfffff
 800eb48:	35afe535 	.word	0x35afe535
 800eb4c:	3fe00000 	.word	0x3fe00000
 800eb50:	000fffff 	.word	0x000fffff
 800eb54:	7ff00000 	.word	0x7ff00000
 800eb58:	7fefffff 	.word	0x7fefffff
 800eb5c:	3ff00000 	.word	0x3ff00000
 800eb60:	3fe00000 	.word	0x3fe00000
 800eb64:	7fe00000 	.word	0x7fe00000
 800eb68:	7c9fffff 	.word	0x7c9fffff
 800eb6c:	9b08      	ldr	r3, [sp, #32]
 800eb6e:	b323      	cbz	r3, 800ebba <_strtod_l+0xb5a>
 800eb70:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800eb74:	d821      	bhi.n	800ebba <_strtod_l+0xb5a>
 800eb76:	a328      	add	r3, pc, #160	@ (adr r3, 800ec18 <_strtod_l+0xbb8>)
 800eb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb7c:	4630      	mov	r0, r6
 800eb7e:	4639      	mov	r1, r7
 800eb80:	f7f1 ffde 	bl	8000b40 <__aeabi_dcmple>
 800eb84:	b1a0      	cbz	r0, 800ebb0 <_strtod_l+0xb50>
 800eb86:	4639      	mov	r1, r7
 800eb88:	4630      	mov	r0, r6
 800eb8a:	f7f2 f835 	bl	8000bf8 <__aeabi_d2uiz>
 800eb8e:	2801      	cmp	r0, #1
 800eb90:	bf38      	it	cc
 800eb92:	2001      	movcc	r0, #1
 800eb94:	f7f1 fcde 	bl	8000554 <__aeabi_ui2d>
 800eb98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb9a:	4606      	mov	r6, r0
 800eb9c:	460f      	mov	r7, r1
 800eb9e:	b9fb      	cbnz	r3, 800ebe0 <_strtod_l+0xb80>
 800eba0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800eba4:	9014      	str	r0, [sp, #80]	@ 0x50
 800eba6:	9315      	str	r3, [sp, #84]	@ 0x54
 800eba8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ebac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ebb0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ebb2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ebb6:	1b5b      	subs	r3, r3, r5
 800ebb8:	9311      	str	r3, [sp, #68]	@ 0x44
 800ebba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ebbe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ebc2:	f002 fea5 	bl	8011910 <__ulp>
 800ebc6:	4650      	mov	r0, sl
 800ebc8:	ec53 2b10 	vmov	r2, r3, d0
 800ebcc:	4659      	mov	r1, fp
 800ebce:	f7f1 fd3b 	bl	8000648 <__aeabi_dmul>
 800ebd2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ebd6:	f7f1 fb81 	bl	80002dc <__adddf3>
 800ebda:	4682      	mov	sl, r0
 800ebdc:	468b      	mov	fp, r1
 800ebde:	e770      	b.n	800eac2 <_strtod_l+0xa62>
 800ebe0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ebe4:	e7e0      	b.n	800eba8 <_strtod_l+0xb48>
 800ebe6:	a30e      	add	r3, pc, #56	@ (adr r3, 800ec20 <_strtod_l+0xbc0>)
 800ebe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebec:	f7f1 ff9e 	bl	8000b2c <__aeabi_dcmplt>
 800ebf0:	e798      	b.n	800eb24 <_strtod_l+0xac4>
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ebf6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ebf8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ebfa:	6013      	str	r3, [r2, #0]
 800ebfc:	f7ff ba6d 	b.w	800e0da <_strtod_l+0x7a>
 800ec00:	2a65      	cmp	r2, #101	@ 0x65
 800ec02:	f43f ab66 	beq.w	800e2d2 <_strtod_l+0x272>
 800ec06:	2a45      	cmp	r2, #69	@ 0x45
 800ec08:	f43f ab63 	beq.w	800e2d2 <_strtod_l+0x272>
 800ec0c:	2301      	movs	r3, #1
 800ec0e:	f7ff bb9e 	b.w	800e34e <_strtod_l+0x2ee>
 800ec12:	bf00      	nop
 800ec14:	f3af 8000 	nop.w
 800ec18:	ffc00000 	.word	0xffc00000
 800ec1c:	41dfffff 	.word	0x41dfffff
 800ec20:	94a03595 	.word	0x94a03595
 800ec24:	3fcfffff 	.word	0x3fcfffff

0800ec28 <_strtod_r>:
 800ec28:	4b01      	ldr	r3, [pc, #4]	@ (800ec30 <_strtod_r+0x8>)
 800ec2a:	f7ff ba19 	b.w	800e060 <_strtod_l>
 800ec2e:	bf00      	nop
 800ec30:	200000b0 	.word	0x200000b0

0800ec34 <__cvt>:
 800ec34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec38:	ec57 6b10 	vmov	r6, r7, d0
 800ec3c:	2f00      	cmp	r7, #0
 800ec3e:	460c      	mov	r4, r1
 800ec40:	4619      	mov	r1, r3
 800ec42:	463b      	mov	r3, r7
 800ec44:	bfbb      	ittet	lt
 800ec46:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ec4a:	461f      	movlt	r7, r3
 800ec4c:	2300      	movge	r3, #0
 800ec4e:	232d      	movlt	r3, #45	@ 0x2d
 800ec50:	700b      	strb	r3, [r1, #0]
 800ec52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ec54:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ec58:	4691      	mov	r9, r2
 800ec5a:	f023 0820 	bic.w	r8, r3, #32
 800ec5e:	bfbc      	itt	lt
 800ec60:	4632      	movlt	r2, r6
 800ec62:	4616      	movlt	r6, r2
 800ec64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ec68:	d005      	beq.n	800ec76 <__cvt+0x42>
 800ec6a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ec6e:	d100      	bne.n	800ec72 <__cvt+0x3e>
 800ec70:	3401      	adds	r4, #1
 800ec72:	2102      	movs	r1, #2
 800ec74:	e000      	b.n	800ec78 <__cvt+0x44>
 800ec76:	2103      	movs	r1, #3
 800ec78:	ab03      	add	r3, sp, #12
 800ec7a:	9301      	str	r3, [sp, #4]
 800ec7c:	ab02      	add	r3, sp, #8
 800ec7e:	9300      	str	r3, [sp, #0]
 800ec80:	ec47 6b10 	vmov	d0, r6, r7
 800ec84:	4653      	mov	r3, sl
 800ec86:	4622      	mov	r2, r4
 800ec88:	f001 f8be 	bl	800fe08 <_dtoa_r>
 800ec8c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ec90:	4605      	mov	r5, r0
 800ec92:	d119      	bne.n	800ecc8 <__cvt+0x94>
 800ec94:	f019 0f01 	tst.w	r9, #1
 800ec98:	d00e      	beq.n	800ecb8 <__cvt+0x84>
 800ec9a:	eb00 0904 	add.w	r9, r0, r4
 800ec9e:	2200      	movs	r2, #0
 800eca0:	2300      	movs	r3, #0
 800eca2:	4630      	mov	r0, r6
 800eca4:	4639      	mov	r1, r7
 800eca6:	f7f1 ff37 	bl	8000b18 <__aeabi_dcmpeq>
 800ecaa:	b108      	cbz	r0, 800ecb0 <__cvt+0x7c>
 800ecac:	f8cd 900c 	str.w	r9, [sp, #12]
 800ecb0:	2230      	movs	r2, #48	@ 0x30
 800ecb2:	9b03      	ldr	r3, [sp, #12]
 800ecb4:	454b      	cmp	r3, r9
 800ecb6:	d31e      	bcc.n	800ecf6 <__cvt+0xc2>
 800ecb8:	9b03      	ldr	r3, [sp, #12]
 800ecba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ecbc:	1b5b      	subs	r3, r3, r5
 800ecbe:	4628      	mov	r0, r5
 800ecc0:	6013      	str	r3, [r2, #0]
 800ecc2:	b004      	add	sp, #16
 800ecc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecc8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800eccc:	eb00 0904 	add.w	r9, r0, r4
 800ecd0:	d1e5      	bne.n	800ec9e <__cvt+0x6a>
 800ecd2:	7803      	ldrb	r3, [r0, #0]
 800ecd4:	2b30      	cmp	r3, #48	@ 0x30
 800ecd6:	d10a      	bne.n	800ecee <__cvt+0xba>
 800ecd8:	2200      	movs	r2, #0
 800ecda:	2300      	movs	r3, #0
 800ecdc:	4630      	mov	r0, r6
 800ecde:	4639      	mov	r1, r7
 800ece0:	f7f1 ff1a 	bl	8000b18 <__aeabi_dcmpeq>
 800ece4:	b918      	cbnz	r0, 800ecee <__cvt+0xba>
 800ece6:	f1c4 0401 	rsb	r4, r4, #1
 800ecea:	f8ca 4000 	str.w	r4, [sl]
 800ecee:	f8da 3000 	ldr.w	r3, [sl]
 800ecf2:	4499      	add	r9, r3
 800ecf4:	e7d3      	b.n	800ec9e <__cvt+0x6a>
 800ecf6:	1c59      	adds	r1, r3, #1
 800ecf8:	9103      	str	r1, [sp, #12]
 800ecfa:	701a      	strb	r2, [r3, #0]
 800ecfc:	e7d9      	b.n	800ecb2 <__cvt+0x7e>

0800ecfe <__exponent>:
 800ecfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed00:	2900      	cmp	r1, #0
 800ed02:	bfba      	itte	lt
 800ed04:	4249      	neglt	r1, r1
 800ed06:	232d      	movlt	r3, #45	@ 0x2d
 800ed08:	232b      	movge	r3, #43	@ 0x2b
 800ed0a:	2909      	cmp	r1, #9
 800ed0c:	7002      	strb	r2, [r0, #0]
 800ed0e:	7043      	strb	r3, [r0, #1]
 800ed10:	dd29      	ble.n	800ed66 <__exponent+0x68>
 800ed12:	f10d 0307 	add.w	r3, sp, #7
 800ed16:	461d      	mov	r5, r3
 800ed18:	270a      	movs	r7, #10
 800ed1a:	461a      	mov	r2, r3
 800ed1c:	fbb1 f6f7 	udiv	r6, r1, r7
 800ed20:	fb07 1416 	mls	r4, r7, r6, r1
 800ed24:	3430      	adds	r4, #48	@ 0x30
 800ed26:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ed2a:	460c      	mov	r4, r1
 800ed2c:	2c63      	cmp	r4, #99	@ 0x63
 800ed2e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ed32:	4631      	mov	r1, r6
 800ed34:	dcf1      	bgt.n	800ed1a <__exponent+0x1c>
 800ed36:	3130      	adds	r1, #48	@ 0x30
 800ed38:	1e94      	subs	r4, r2, #2
 800ed3a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ed3e:	1c41      	adds	r1, r0, #1
 800ed40:	4623      	mov	r3, r4
 800ed42:	42ab      	cmp	r3, r5
 800ed44:	d30a      	bcc.n	800ed5c <__exponent+0x5e>
 800ed46:	f10d 0309 	add.w	r3, sp, #9
 800ed4a:	1a9b      	subs	r3, r3, r2
 800ed4c:	42ac      	cmp	r4, r5
 800ed4e:	bf88      	it	hi
 800ed50:	2300      	movhi	r3, #0
 800ed52:	3302      	adds	r3, #2
 800ed54:	4403      	add	r3, r0
 800ed56:	1a18      	subs	r0, r3, r0
 800ed58:	b003      	add	sp, #12
 800ed5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed5c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ed60:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ed64:	e7ed      	b.n	800ed42 <__exponent+0x44>
 800ed66:	2330      	movs	r3, #48	@ 0x30
 800ed68:	3130      	adds	r1, #48	@ 0x30
 800ed6a:	7083      	strb	r3, [r0, #2]
 800ed6c:	70c1      	strb	r1, [r0, #3]
 800ed6e:	1d03      	adds	r3, r0, #4
 800ed70:	e7f1      	b.n	800ed56 <__exponent+0x58>
	...

0800ed74 <_printf_float>:
 800ed74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed78:	b08d      	sub	sp, #52	@ 0x34
 800ed7a:	460c      	mov	r4, r1
 800ed7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ed80:	4616      	mov	r6, r2
 800ed82:	461f      	mov	r7, r3
 800ed84:	4605      	mov	r5, r0
 800ed86:	f000 ff21 	bl	800fbcc <_localeconv_r>
 800ed8a:	6803      	ldr	r3, [r0, #0]
 800ed8c:	9304      	str	r3, [sp, #16]
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7f1 fa96 	bl	80002c0 <strlen>
 800ed94:	2300      	movs	r3, #0
 800ed96:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed98:	f8d8 3000 	ldr.w	r3, [r8]
 800ed9c:	9005      	str	r0, [sp, #20]
 800ed9e:	3307      	adds	r3, #7
 800eda0:	f023 0307 	bic.w	r3, r3, #7
 800eda4:	f103 0208 	add.w	r2, r3, #8
 800eda8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800edac:	f8d4 b000 	ldr.w	fp, [r4]
 800edb0:	f8c8 2000 	str.w	r2, [r8]
 800edb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800edb8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800edbc:	9307      	str	r3, [sp, #28]
 800edbe:	f8cd 8018 	str.w	r8, [sp, #24]
 800edc2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800edc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800edca:	4b9c      	ldr	r3, [pc, #624]	@ (800f03c <_printf_float+0x2c8>)
 800edcc:	f04f 32ff 	mov.w	r2, #4294967295
 800edd0:	f7f1 fed4 	bl	8000b7c <__aeabi_dcmpun>
 800edd4:	bb70      	cbnz	r0, 800ee34 <_printf_float+0xc0>
 800edd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800edda:	4b98      	ldr	r3, [pc, #608]	@ (800f03c <_printf_float+0x2c8>)
 800eddc:	f04f 32ff 	mov.w	r2, #4294967295
 800ede0:	f7f1 feae 	bl	8000b40 <__aeabi_dcmple>
 800ede4:	bb30      	cbnz	r0, 800ee34 <_printf_float+0xc0>
 800ede6:	2200      	movs	r2, #0
 800ede8:	2300      	movs	r3, #0
 800edea:	4640      	mov	r0, r8
 800edec:	4649      	mov	r1, r9
 800edee:	f7f1 fe9d 	bl	8000b2c <__aeabi_dcmplt>
 800edf2:	b110      	cbz	r0, 800edfa <_printf_float+0x86>
 800edf4:	232d      	movs	r3, #45	@ 0x2d
 800edf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800edfa:	4a91      	ldr	r2, [pc, #580]	@ (800f040 <_printf_float+0x2cc>)
 800edfc:	4b91      	ldr	r3, [pc, #580]	@ (800f044 <_printf_float+0x2d0>)
 800edfe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ee02:	bf94      	ite	ls
 800ee04:	4690      	movls	r8, r2
 800ee06:	4698      	movhi	r8, r3
 800ee08:	2303      	movs	r3, #3
 800ee0a:	6123      	str	r3, [r4, #16]
 800ee0c:	f02b 0304 	bic.w	r3, fp, #4
 800ee10:	6023      	str	r3, [r4, #0]
 800ee12:	f04f 0900 	mov.w	r9, #0
 800ee16:	9700      	str	r7, [sp, #0]
 800ee18:	4633      	mov	r3, r6
 800ee1a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ee1c:	4621      	mov	r1, r4
 800ee1e:	4628      	mov	r0, r5
 800ee20:	f000 f9d2 	bl	800f1c8 <_printf_common>
 800ee24:	3001      	adds	r0, #1
 800ee26:	f040 808d 	bne.w	800ef44 <_printf_float+0x1d0>
 800ee2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ee2e:	b00d      	add	sp, #52	@ 0x34
 800ee30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee34:	4642      	mov	r2, r8
 800ee36:	464b      	mov	r3, r9
 800ee38:	4640      	mov	r0, r8
 800ee3a:	4649      	mov	r1, r9
 800ee3c:	f7f1 fe9e 	bl	8000b7c <__aeabi_dcmpun>
 800ee40:	b140      	cbz	r0, 800ee54 <_printf_float+0xe0>
 800ee42:	464b      	mov	r3, r9
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	bfbc      	itt	lt
 800ee48:	232d      	movlt	r3, #45	@ 0x2d
 800ee4a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ee4e:	4a7e      	ldr	r2, [pc, #504]	@ (800f048 <_printf_float+0x2d4>)
 800ee50:	4b7e      	ldr	r3, [pc, #504]	@ (800f04c <_printf_float+0x2d8>)
 800ee52:	e7d4      	b.n	800edfe <_printf_float+0x8a>
 800ee54:	6863      	ldr	r3, [r4, #4]
 800ee56:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ee5a:	9206      	str	r2, [sp, #24]
 800ee5c:	1c5a      	adds	r2, r3, #1
 800ee5e:	d13b      	bne.n	800eed8 <_printf_float+0x164>
 800ee60:	2306      	movs	r3, #6
 800ee62:	6063      	str	r3, [r4, #4]
 800ee64:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ee68:	2300      	movs	r3, #0
 800ee6a:	6022      	str	r2, [r4, #0]
 800ee6c:	9303      	str	r3, [sp, #12]
 800ee6e:	ab0a      	add	r3, sp, #40	@ 0x28
 800ee70:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ee74:	ab09      	add	r3, sp, #36	@ 0x24
 800ee76:	9300      	str	r3, [sp, #0]
 800ee78:	6861      	ldr	r1, [r4, #4]
 800ee7a:	ec49 8b10 	vmov	d0, r8, r9
 800ee7e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ee82:	4628      	mov	r0, r5
 800ee84:	f7ff fed6 	bl	800ec34 <__cvt>
 800ee88:	9b06      	ldr	r3, [sp, #24]
 800ee8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ee8c:	2b47      	cmp	r3, #71	@ 0x47
 800ee8e:	4680      	mov	r8, r0
 800ee90:	d129      	bne.n	800eee6 <_printf_float+0x172>
 800ee92:	1cc8      	adds	r0, r1, #3
 800ee94:	db02      	blt.n	800ee9c <_printf_float+0x128>
 800ee96:	6863      	ldr	r3, [r4, #4]
 800ee98:	4299      	cmp	r1, r3
 800ee9a:	dd41      	ble.n	800ef20 <_printf_float+0x1ac>
 800ee9c:	f1aa 0a02 	sub.w	sl, sl, #2
 800eea0:	fa5f fa8a 	uxtb.w	sl, sl
 800eea4:	3901      	subs	r1, #1
 800eea6:	4652      	mov	r2, sl
 800eea8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800eeac:	9109      	str	r1, [sp, #36]	@ 0x24
 800eeae:	f7ff ff26 	bl	800ecfe <__exponent>
 800eeb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eeb4:	1813      	adds	r3, r2, r0
 800eeb6:	2a01      	cmp	r2, #1
 800eeb8:	4681      	mov	r9, r0
 800eeba:	6123      	str	r3, [r4, #16]
 800eebc:	dc02      	bgt.n	800eec4 <_printf_float+0x150>
 800eebe:	6822      	ldr	r2, [r4, #0]
 800eec0:	07d2      	lsls	r2, r2, #31
 800eec2:	d501      	bpl.n	800eec8 <_printf_float+0x154>
 800eec4:	3301      	adds	r3, #1
 800eec6:	6123      	str	r3, [r4, #16]
 800eec8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d0a2      	beq.n	800ee16 <_printf_float+0xa2>
 800eed0:	232d      	movs	r3, #45	@ 0x2d
 800eed2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eed6:	e79e      	b.n	800ee16 <_printf_float+0xa2>
 800eed8:	9a06      	ldr	r2, [sp, #24]
 800eeda:	2a47      	cmp	r2, #71	@ 0x47
 800eedc:	d1c2      	bne.n	800ee64 <_printf_float+0xf0>
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d1c0      	bne.n	800ee64 <_printf_float+0xf0>
 800eee2:	2301      	movs	r3, #1
 800eee4:	e7bd      	b.n	800ee62 <_printf_float+0xee>
 800eee6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800eeea:	d9db      	bls.n	800eea4 <_printf_float+0x130>
 800eeec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800eef0:	d118      	bne.n	800ef24 <_printf_float+0x1b0>
 800eef2:	2900      	cmp	r1, #0
 800eef4:	6863      	ldr	r3, [r4, #4]
 800eef6:	dd0b      	ble.n	800ef10 <_printf_float+0x19c>
 800eef8:	6121      	str	r1, [r4, #16]
 800eefa:	b913      	cbnz	r3, 800ef02 <_printf_float+0x18e>
 800eefc:	6822      	ldr	r2, [r4, #0]
 800eefe:	07d0      	lsls	r0, r2, #31
 800ef00:	d502      	bpl.n	800ef08 <_printf_float+0x194>
 800ef02:	3301      	adds	r3, #1
 800ef04:	440b      	add	r3, r1
 800ef06:	6123      	str	r3, [r4, #16]
 800ef08:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ef0a:	f04f 0900 	mov.w	r9, #0
 800ef0e:	e7db      	b.n	800eec8 <_printf_float+0x154>
 800ef10:	b913      	cbnz	r3, 800ef18 <_printf_float+0x1a4>
 800ef12:	6822      	ldr	r2, [r4, #0]
 800ef14:	07d2      	lsls	r2, r2, #31
 800ef16:	d501      	bpl.n	800ef1c <_printf_float+0x1a8>
 800ef18:	3302      	adds	r3, #2
 800ef1a:	e7f4      	b.n	800ef06 <_printf_float+0x192>
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	e7f2      	b.n	800ef06 <_printf_float+0x192>
 800ef20:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ef24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef26:	4299      	cmp	r1, r3
 800ef28:	db05      	blt.n	800ef36 <_printf_float+0x1c2>
 800ef2a:	6823      	ldr	r3, [r4, #0]
 800ef2c:	6121      	str	r1, [r4, #16]
 800ef2e:	07d8      	lsls	r0, r3, #31
 800ef30:	d5ea      	bpl.n	800ef08 <_printf_float+0x194>
 800ef32:	1c4b      	adds	r3, r1, #1
 800ef34:	e7e7      	b.n	800ef06 <_printf_float+0x192>
 800ef36:	2900      	cmp	r1, #0
 800ef38:	bfd4      	ite	le
 800ef3a:	f1c1 0202 	rsble	r2, r1, #2
 800ef3e:	2201      	movgt	r2, #1
 800ef40:	4413      	add	r3, r2
 800ef42:	e7e0      	b.n	800ef06 <_printf_float+0x192>
 800ef44:	6823      	ldr	r3, [r4, #0]
 800ef46:	055a      	lsls	r2, r3, #21
 800ef48:	d407      	bmi.n	800ef5a <_printf_float+0x1e6>
 800ef4a:	6923      	ldr	r3, [r4, #16]
 800ef4c:	4642      	mov	r2, r8
 800ef4e:	4631      	mov	r1, r6
 800ef50:	4628      	mov	r0, r5
 800ef52:	47b8      	blx	r7
 800ef54:	3001      	adds	r0, #1
 800ef56:	d12b      	bne.n	800efb0 <_printf_float+0x23c>
 800ef58:	e767      	b.n	800ee2a <_printf_float+0xb6>
 800ef5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ef5e:	f240 80dd 	bls.w	800f11c <_printf_float+0x3a8>
 800ef62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ef66:	2200      	movs	r2, #0
 800ef68:	2300      	movs	r3, #0
 800ef6a:	f7f1 fdd5 	bl	8000b18 <__aeabi_dcmpeq>
 800ef6e:	2800      	cmp	r0, #0
 800ef70:	d033      	beq.n	800efda <_printf_float+0x266>
 800ef72:	4a37      	ldr	r2, [pc, #220]	@ (800f050 <_printf_float+0x2dc>)
 800ef74:	2301      	movs	r3, #1
 800ef76:	4631      	mov	r1, r6
 800ef78:	4628      	mov	r0, r5
 800ef7a:	47b8      	blx	r7
 800ef7c:	3001      	adds	r0, #1
 800ef7e:	f43f af54 	beq.w	800ee2a <_printf_float+0xb6>
 800ef82:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ef86:	4543      	cmp	r3, r8
 800ef88:	db02      	blt.n	800ef90 <_printf_float+0x21c>
 800ef8a:	6823      	ldr	r3, [r4, #0]
 800ef8c:	07d8      	lsls	r0, r3, #31
 800ef8e:	d50f      	bpl.n	800efb0 <_printf_float+0x23c>
 800ef90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef94:	4631      	mov	r1, r6
 800ef96:	4628      	mov	r0, r5
 800ef98:	47b8      	blx	r7
 800ef9a:	3001      	adds	r0, #1
 800ef9c:	f43f af45 	beq.w	800ee2a <_printf_float+0xb6>
 800efa0:	f04f 0900 	mov.w	r9, #0
 800efa4:	f108 38ff 	add.w	r8, r8, #4294967295
 800efa8:	f104 0a1a 	add.w	sl, r4, #26
 800efac:	45c8      	cmp	r8, r9
 800efae:	dc09      	bgt.n	800efc4 <_printf_float+0x250>
 800efb0:	6823      	ldr	r3, [r4, #0]
 800efb2:	079b      	lsls	r3, r3, #30
 800efb4:	f100 8103 	bmi.w	800f1be <_printf_float+0x44a>
 800efb8:	68e0      	ldr	r0, [r4, #12]
 800efba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800efbc:	4298      	cmp	r0, r3
 800efbe:	bfb8      	it	lt
 800efc0:	4618      	movlt	r0, r3
 800efc2:	e734      	b.n	800ee2e <_printf_float+0xba>
 800efc4:	2301      	movs	r3, #1
 800efc6:	4652      	mov	r2, sl
 800efc8:	4631      	mov	r1, r6
 800efca:	4628      	mov	r0, r5
 800efcc:	47b8      	blx	r7
 800efce:	3001      	adds	r0, #1
 800efd0:	f43f af2b 	beq.w	800ee2a <_printf_float+0xb6>
 800efd4:	f109 0901 	add.w	r9, r9, #1
 800efd8:	e7e8      	b.n	800efac <_printf_float+0x238>
 800efda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efdc:	2b00      	cmp	r3, #0
 800efde:	dc39      	bgt.n	800f054 <_printf_float+0x2e0>
 800efe0:	4a1b      	ldr	r2, [pc, #108]	@ (800f050 <_printf_float+0x2dc>)
 800efe2:	2301      	movs	r3, #1
 800efe4:	4631      	mov	r1, r6
 800efe6:	4628      	mov	r0, r5
 800efe8:	47b8      	blx	r7
 800efea:	3001      	adds	r0, #1
 800efec:	f43f af1d 	beq.w	800ee2a <_printf_float+0xb6>
 800eff0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800eff4:	ea59 0303 	orrs.w	r3, r9, r3
 800eff8:	d102      	bne.n	800f000 <_printf_float+0x28c>
 800effa:	6823      	ldr	r3, [r4, #0]
 800effc:	07d9      	lsls	r1, r3, #31
 800effe:	d5d7      	bpl.n	800efb0 <_printf_float+0x23c>
 800f000:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f004:	4631      	mov	r1, r6
 800f006:	4628      	mov	r0, r5
 800f008:	47b8      	blx	r7
 800f00a:	3001      	adds	r0, #1
 800f00c:	f43f af0d 	beq.w	800ee2a <_printf_float+0xb6>
 800f010:	f04f 0a00 	mov.w	sl, #0
 800f014:	f104 0b1a 	add.w	fp, r4, #26
 800f018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f01a:	425b      	negs	r3, r3
 800f01c:	4553      	cmp	r3, sl
 800f01e:	dc01      	bgt.n	800f024 <_printf_float+0x2b0>
 800f020:	464b      	mov	r3, r9
 800f022:	e793      	b.n	800ef4c <_printf_float+0x1d8>
 800f024:	2301      	movs	r3, #1
 800f026:	465a      	mov	r2, fp
 800f028:	4631      	mov	r1, r6
 800f02a:	4628      	mov	r0, r5
 800f02c:	47b8      	blx	r7
 800f02e:	3001      	adds	r0, #1
 800f030:	f43f aefb 	beq.w	800ee2a <_printf_float+0xb6>
 800f034:	f10a 0a01 	add.w	sl, sl, #1
 800f038:	e7ee      	b.n	800f018 <_printf_float+0x2a4>
 800f03a:	bf00      	nop
 800f03c:	7fefffff 	.word	0x7fefffff
 800f040:	08013718 	.word	0x08013718
 800f044:	0801371c 	.word	0x0801371c
 800f048:	08013720 	.word	0x08013720
 800f04c:	08013724 	.word	0x08013724
 800f050:	08013728 	.word	0x08013728
 800f054:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f056:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f05a:	4553      	cmp	r3, sl
 800f05c:	bfa8      	it	ge
 800f05e:	4653      	movge	r3, sl
 800f060:	2b00      	cmp	r3, #0
 800f062:	4699      	mov	r9, r3
 800f064:	dc36      	bgt.n	800f0d4 <_printf_float+0x360>
 800f066:	f04f 0b00 	mov.w	fp, #0
 800f06a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f06e:	f104 021a 	add.w	r2, r4, #26
 800f072:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f074:	9306      	str	r3, [sp, #24]
 800f076:	eba3 0309 	sub.w	r3, r3, r9
 800f07a:	455b      	cmp	r3, fp
 800f07c:	dc31      	bgt.n	800f0e2 <_printf_float+0x36e>
 800f07e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f080:	459a      	cmp	sl, r3
 800f082:	dc3a      	bgt.n	800f0fa <_printf_float+0x386>
 800f084:	6823      	ldr	r3, [r4, #0]
 800f086:	07da      	lsls	r2, r3, #31
 800f088:	d437      	bmi.n	800f0fa <_printf_float+0x386>
 800f08a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f08c:	ebaa 0903 	sub.w	r9, sl, r3
 800f090:	9b06      	ldr	r3, [sp, #24]
 800f092:	ebaa 0303 	sub.w	r3, sl, r3
 800f096:	4599      	cmp	r9, r3
 800f098:	bfa8      	it	ge
 800f09a:	4699      	movge	r9, r3
 800f09c:	f1b9 0f00 	cmp.w	r9, #0
 800f0a0:	dc33      	bgt.n	800f10a <_printf_float+0x396>
 800f0a2:	f04f 0800 	mov.w	r8, #0
 800f0a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f0aa:	f104 0b1a 	add.w	fp, r4, #26
 800f0ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0b0:	ebaa 0303 	sub.w	r3, sl, r3
 800f0b4:	eba3 0309 	sub.w	r3, r3, r9
 800f0b8:	4543      	cmp	r3, r8
 800f0ba:	f77f af79 	ble.w	800efb0 <_printf_float+0x23c>
 800f0be:	2301      	movs	r3, #1
 800f0c0:	465a      	mov	r2, fp
 800f0c2:	4631      	mov	r1, r6
 800f0c4:	4628      	mov	r0, r5
 800f0c6:	47b8      	blx	r7
 800f0c8:	3001      	adds	r0, #1
 800f0ca:	f43f aeae 	beq.w	800ee2a <_printf_float+0xb6>
 800f0ce:	f108 0801 	add.w	r8, r8, #1
 800f0d2:	e7ec      	b.n	800f0ae <_printf_float+0x33a>
 800f0d4:	4642      	mov	r2, r8
 800f0d6:	4631      	mov	r1, r6
 800f0d8:	4628      	mov	r0, r5
 800f0da:	47b8      	blx	r7
 800f0dc:	3001      	adds	r0, #1
 800f0de:	d1c2      	bne.n	800f066 <_printf_float+0x2f2>
 800f0e0:	e6a3      	b.n	800ee2a <_printf_float+0xb6>
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	4631      	mov	r1, r6
 800f0e6:	4628      	mov	r0, r5
 800f0e8:	9206      	str	r2, [sp, #24]
 800f0ea:	47b8      	blx	r7
 800f0ec:	3001      	adds	r0, #1
 800f0ee:	f43f ae9c 	beq.w	800ee2a <_printf_float+0xb6>
 800f0f2:	9a06      	ldr	r2, [sp, #24]
 800f0f4:	f10b 0b01 	add.w	fp, fp, #1
 800f0f8:	e7bb      	b.n	800f072 <_printf_float+0x2fe>
 800f0fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f0fe:	4631      	mov	r1, r6
 800f100:	4628      	mov	r0, r5
 800f102:	47b8      	blx	r7
 800f104:	3001      	adds	r0, #1
 800f106:	d1c0      	bne.n	800f08a <_printf_float+0x316>
 800f108:	e68f      	b.n	800ee2a <_printf_float+0xb6>
 800f10a:	9a06      	ldr	r2, [sp, #24]
 800f10c:	464b      	mov	r3, r9
 800f10e:	4442      	add	r2, r8
 800f110:	4631      	mov	r1, r6
 800f112:	4628      	mov	r0, r5
 800f114:	47b8      	blx	r7
 800f116:	3001      	adds	r0, #1
 800f118:	d1c3      	bne.n	800f0a2 <_printf_float+0x32e>
 800f11a:	e686      	b.n	800ee2a <_printf_float+0xb6>
 800f11c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f120:	f1ba 0f01 	cmp.w	sl, #1
 800f124:	dc01      	bgt.n	800f12a <_printf_float+0x3b6>
 800f126:	07db      	lsls	r3, r3, #31
 800f128:	d536      	bpl.n	800f198 <_printf_float+0x424>
 800f12a:	2301      	movs	r3, #1
 800f12c:	4642      	mov	r2, r8
 800f12e:	4631      	mov	r1, r6
 800f130:	4628      	mov	r0, r5
 800f132:	47b8      	blx	r7
 800f134:	3001      	adds	r0, #1
 800f136:	f43f ae78 	beq.w	800ee2a <_printf_float+0xb6>
 800f13a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f13e:	4631      	mov	r1, r6
 800f140:	4628      	mov	r0, r5
 800f142:	47b8      	blx	r7
 800f144:	3001      	adds	r0, #1
 800f146:	f43f ae70 	beq.w	800ee2a <_printf_float+0xb6>
 800f14a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f14e:	2200      	movs	r2, #0
 800f150:	2300      	movs	r3, #0
 800f152:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f156:	f7f1 fcdf 	bl	8000b18 <__aeabi_dcmpeq>
 800f15a:	b9c0      	cbnz	r0, 800f18e <_printf_float+0x41a>
 800f15c:	4653      	mov	r3, sl
 800f15e:	f108 0201 	add.w	r2, r8, #1
 800f162:	4631      	mov	r1, r6
 800f164:	4628      	mov	r0, r5
 800f166:	47b8      	blx	r7
 800f168:	3001      	adds	r0, #1
 800f16a:	d10c      	bne.n	800f186 <_printf_float+0x412>
 800f16c:	e65d      	b.n	800ee2a <_printf_float+0xb6>
 800f16e:	2301      	movs	r3, #1
 800f170:	465a      	mov	r2, fp
 800f172:	4631      	mov	r1, r6
 800f174:	4628      	mov	r0, r5
 800f176:	47b8      	blx	r7
 800f178:	3001      	adds	r0, #1
 800f17a:	f43f ae56 	beq.w	800ee2a <_printf_float+0xb6>
 800f17e:	f108 0801 	add.w	r8, r8, #1
 800f182:	45d0      	cmp	r8, sl
 800f184:	dbf3      	blt.n	800f16e <_printf_float+0x3fa>
 800f186:	464b      	mov	r3, r9
 800f188:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f18c:	e6df      	b.n	800ef4e <_printf_float+0x1da>
 800f18e:	f04f 0800 	mov.w	r8, #0
 800f192:	f104 0b1a 	add.w	fp, r4, #26
 800f196:	e7f4      	b.n	800f182 <_printf_float+0x40e>
 800f198:	2301      	movs	r3, #1
 800f19a:	4642      	mov	r2, r8
 800f19c:	e7e1      	b.n	800f162 <_printf_float+0x3ee>
 800f19e:	2301      	movs	r3, #1
 800f1a0:	464a      	mov	r2, r9
 800f1a2:	4631      	mov	r1, r6
 800f1a4:	4628      	mov	r0, r5
 800f1a6:	47b8      	blx	r7
 800f1a8:	3001      	adds	r0, #1
 800f1aa:	f43f ae3e 	beq.w	800ee2a <_printf_float+0xb6>
 800f1ae:	f108 0801 	add.w	r8, r8, #1
 800f1b2:	68e3      	ldr	r3, [r4, #12]
 800f1b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f1b6:	1a5b      	subs	r3, r3, r1
 800f1b8:	4543      	cmp	r3, r8
 800f1ba:	dcf0      	bgt.n	800f19e <_printf_float+0x42a>
 800f1bc:	e6fc      	b.n	800efb8 <_printf_float+0x244>
 800f1be:	f04f 0800 	mov.w	r8, #0
 800f1c2:	f104 0919 	add.w	r9, r4, #25
 800f1c6:	e7f4      	b.n	800f1b2 <_printf_float+0x43e>

0800f1c8 <_printf_common>:
 800f1c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1cc:	4616      	mov	r6, r2
 800f1ce:	4698      	mov	r8, r3
 800f1d0:	688a      	ldr	r2, [r1, #8]
 800f1d2:	690b      	ldr	r3, [r1, #16]
 800f1d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f1d8:	4293      	cmp	r3, r2
 800f1da:	bfb8      	it	lt
 800f1dc:	4613      	movlt	r3, r2
 800f1de:	6033      	str	r3, [r6, #0]
 800f1e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f1e4:	4607      	mov	r7, r0
 800f1e6:	460c      	mov	r4, r1
 800f1e8:	b10a      	cbz	r2, 800f1ee <_printf_common+0x26>
 800f1ea:	3301      	adds	r3, #1
 800f1ec:	6033      	str	r3, [r6, #0]
 800f1ee:	6823      	ldr	r3, [r4, #0]
 800f1f0:	0699      	lsls	r1, r3, #26
 800f1f2:	bf42      	ittt	mi
 800f1f4:	6833      	ldrmi	r3, [r6, #0]
 800f1f6:	3302      	addmi	r3, #2
 800f1f8:	6033      	strmi	r3, [r6, #0]
 800f1fa:	6825      	ldr	r5, [r4, #0]
 800f1fc:	f015 0506 	ands.w	r5, r5, #6
 800f200:	d106      	bne.n	800f210 <_printf_common+0x48>
 800f202:	f104 0a19 	add.w	sl, r4, #25
 800f206:	68e3      	ldr	r3, [r4, #12]
 800f208:	6832      	ldr	r2, [r6, #0]
 800f20a:	1a9b      	subs	r3, r3, r2
 800f20c:	42ab      	cmp	r3, r5
 800f20e:	dc26      	bgt.n	800f25e <_printf_common+0x96>
 800f210:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f214:	6822      	ldr	r2, [r4, #0]
 800f216:	3b00      	subs	r3, #0
 800f218:	bf18      	it	ne
 800f21a:	2301      	movne	r3, #1
 800f21c:	0692      	lsls	r2, r2, #26
 800f21e:	d42b      	bmi.n	800f278 <_printf_common+0xb0>
 800f220:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f224:	4641      	mov	r1, r8
 800f226:	4638      	mov	r0, r7
 800f228:	47c8      	blx	r9
 800f22a:	3001      	adds	r0, #1
 800f22c:	d01e      	beq.n	800f26c <_printf_common+0xa4>
 800f22e:	6823      	ldr	r3, [r4, #0]
 800f230:	6922      	ldr	r2, [r4, #16]
 800f232:	f003 0306 	and.w	r3, r3, #6
 800f236:	2b04      	cmp	r3, #4
 800f238:	bf02      	ittt	eq
 800f23a:	68e5      	ldreq	r5, [r4, #12]
 800f23c:	6833      	ldreq	r3, [r6, #0]
 800f23e:	1aed      	subeq	r5, r5, r3
 800f240:	68a3      	ldr	r3, [r4, #8]
 800f242:	bf0c      	ite	eq
 800f244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f248:	2500      	movne	r5, #0
 800f24a:	4293      	cmp	r3, r2
 800f24c:	bfc4      	itt	gt
 800f24e:	1a9b      	subgt	r3, r3, r2
 800f250:	18ed      	addgt	r5, r5, r3
 800f252:	2600      	movs	r6, #0
 800f254:	341a      	adds	r4, #26
 800f256:	42b5      	cmp	r5, r6
 800f258:	d11a      	bne.n	800f290 <_printf_common+0xc8>
 800f25a:	2000      	movs	r0, #0
 800f25c:	e008      	b.n	800f270 <_printf_common+0xa8>
 800f25e:	2301      	movs	r3, #1
 800f260:	4652      	mov	r2, sl
 800f262:	4641      	mov	r1, r8
 800f264:	4638      	mov	r0, r7
 800f266:	47c8      	blx	r9
 800f268:	3001      	adds	r0, #1
 800f26a:	d103      	bne.n	800f274 <_printf_common+0xac>
 800f26c:	f04f 30ff 	mov.w	r0, #4294967295
 800f270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f274:	3501      	adds	r5, #1
 800f276:	e7c6      	b.n	800f206 <_printf_common+0x3e>
 800f278:	18e1      	adds	r1, r4, r3
 800f27a:	1c5a      	adds	r2, r3, #1
 800f27c:	2030      	movs	r0, #48	@ 0x30
 800f27e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f282:	4422      	add	r2, r4
 800f284:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f288:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f28c:	3302      	adds	r3, #2
 800f28e:	e7c7      	b.n	800f220 <_printf_common+0x58>
 800f290:	2301      	movs	r3, #1
 800f292:	4622      	mov	r2, r4
 800f294:	4641      	mov	r1, r8
 800f296:	4638      	mov	r0, r7
 800f298:	47c8      	blx	r9
 800f29a:	3001      	adds	r0, #1
 800f29c:	d0e6      	beq.n	800f26c <_printf_common+0xa4>
 800f29e:	3601      	adds	r6, #1
 800f2a0:	e7d9      	b.n	800f256 <_printf_common+0x8e>
	...

0800f2a4 <_printf_i>:
 800f2a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f2a8:	7e0f      	ldrb	r7, [r1, #24]
 800f2aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f2ac:	2f78      	cmp	r7, #120	@ 0x78
 800f2ae:	4691      	mov	r9, r2
 800f2b0:	4680      	mov	r8, r0
 800f2b2:	460c      	mov	r4, r1
 800f2b4:	469a      	mov	sl, r3
 800f2b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f2ba:	d807      	bhi.n	800f2cc <_printf_i+0x28>
 800f2bc:	2f62      	cmp	r7, #98	@ 0x62
 800f2be:	d80a      	bhi.n	800f2d6 <_printf_i+0x32>
 800f2c0:	2f00      	cmp	r7, #0
 800f2c2:	f000 80d2 	beq.w	800f46a <_printf_i+0x1c6>
 800f2c6:	2f58      	cmp	r7, #88	@ 0x58
 800f2c8:	f000 80b9 	beq.w	800f43e <_printf_i+0x19a>
 800f2cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f2d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f2d4:	e03a      	b.n	800f34c <_printf_i+0xa8>
 800f2d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f2da:	2b15      	cmp	r3, #21
 800f2dc:	d8f6      	bhi.n	800f2cc <_printf_i+0x28>
 800f2de:	a101      	add	r1, pc, #4	@ (adr r1, 800f2e4 <_printf_i+0x40>)
 800f2e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f2e4:	0800f33d 	.word	0x0800f33d
 800f2e8:	0800f351 	.word	0x0800f351
 800f2ec:	0800f2cd 	.word	0x0800f2cd
 800f2f0:	0800f2cd 	.word	0x0800f2cd
 800f2f4:	0800f2cd 	.word	0x0800f2cd
 800f2f8:	0800f2cd 	.word	0x0800f2cd
 800f2fc:	0800f351 	.word	0x0800f351
 800f300:	0800f2cd 	.word	0x0800f2cd
 800f304:	0800f2cd 	.word	0x0800f2cd
 800f308:	0800f2cd 	.word	0x0800f2cd
 800f30c:	0800f2cd 	.word	0x0800f2cd
 800f310:	0800f451 	.word	0x0800f451
 800f314:	0800f37b 	.word	0x0800f37b
 800f318:	0800f40b 	.word	0x0800f40b
 800f31c:	0800f2cd 	.word	0x0800f2cd
 800f320:	0800f2cd 	.word	0x0800f2cd
 800f324:	0800f473 	.word	0x0800f473
 800f328:	0800f2cd 	.word	0x0800f2cd
 800f32c:	0800f37b 	.word	0x0800f37b
 800f330:	0800f2cd 	.word	0x0800f2cd
 800f334:	0800f2cd 	.word	0x0800f2cd
 800f338:	0800f413 	.word	0x0800f413
 800f33c:	6833      	ldr	r3, [r6, #0]
 800f33e:	1d1a      	adds	r2, r3, #4
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	6032      	str	r2, [r6, #0]
 800f344:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f348:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f34c:	2301      	movs	r3, #1
 800f34e:	e09d      	b.n	800f48c <_printf_i+0x1e8>
 800f350:	6833      	ldr	r3, [r6, #0]
 800f352:	6820      	ldr	r0, [r4, #0]
 800f354:	1d19      	adds	r1, r3, #4
 800f356:	6031      	str	r1, [r6, #0]
 800f358:	0606      	lsls	r6, r0, #24
 800f35a:	d501      	bpl.n	800f360 <_printf_i+0xbc>
 800f35c:	681d      	ldr	r5, [r3, #0]
 800f35e:	e003      	b.n	800f368 <_printf_i+0xc4>
 800f360:	0645      	lsls	r5, r0, #25
 800f362:	d5fb      	bpl.n	800f35c <_printf_i+0xb8>
 800f364:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f368:	2d00      	cmp	r5, #0
 800f36a:	da03      	bge.n	800f374 <_printf_i+0xd0>
 800f36c:	232d      	movs	r3, #45	@ 0x2d
 800f36e:	426d      	negs	r5, r5
 800f370:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f374:	4859      	ldr	r0, [pc, #356]	@ (800f4dc <_printf_i+0x238>)
 800f376:	230a      	movs	r3, #10
 800f378:	e011      	b.n	800f39e <_printf_i+0xfa>
 800f37a:	6821      	ldr	r1, [r4, #0]
 800f37c:	6833      	ldr	r3, [r6, #0]
 800f37e:	0608      	lsls	r0, r1, #24
 800f380:	f853 5b04 	ldr.w	r5, [r3], #4
 800f384:	d402      	bmi.n	800f38c <_printf_i+0xe8>
 800f386:	0649      	lsls	r1, r1, #25
 800f388:	bf48      	it	mi
 800f38a:	b2ad      	uxthmi	r5, r5
 800f38c:	2f6f      	cmp	r7, #111	@ 0x6f
 800f38e:	4853      	ldr	r0, [pc, #332]	@ (800f4dc <_printf_i+0x238>)
 800f390:	6033      	str	r3, [r6, #0]
 800f392:	bf14      	ite	ne
 800f394:	230a      	movne	r3, #10
 800f396:	2308      	moveq	r3, #8
 800f398:	2100      	movs	r1, #0
 800f39a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f39e:	6866      	ldr	r6, [r4, #4]
 800f3a0:	60a6      	str	r6, [r4, #8]
 800f3a2:	2e00      	cmp	r6, #0
 800f3a4:	bfa2      	ittt	ge
 800f3a6:	6821      	ldrge	r1, [r4, #0]
 800f3a8:	f021 0104 	bicge.w	r1, r1, #4
 800f3ac:	6021      	strge	r1, [r4, #0]
 800f3ae:	b90d      	cbnz	r5, 800f3b4 <_printf_i+0x110>
 800f3b0:	2e00      	cmp	r6, #0
 800f3b2:	d04b      	beq.n	800f44c <_printf_i+0x1a8>
 800f3b4:	4616      	mov	r6, r2
 800f3b6:	fbb5 f1f3 	udiv	r1, r5, r3
 800f3ba:	fb03 5711 	mls	r7, r3, r1, r5
 800f3be:	5dc7      	ldrb	r7, [r0, r7]
 800f3c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f3c4:	462f      	mov	r7, r5
 800f3c6:	42bb      	cmp	r3, r7
 800f3c8:	460d      	mov	r5, r1
 800f3ca:	d9f4      	bls.n	800f3b6 <_printf_i+0x112>
 800f3cc:	2b08      	cmp	r3, #8
 800f3ce:	d10b      	bne.n	800f3e8 <_printf_i+0x144>
 800f3d0:	6823      	ldr	r3, [r4, #0]
 800f3d2:	07df      	lsls	r7, r3, #31
 800f3d4:	d508      	bpl.n	800f3e8 <_printf_i+0x144>
 800f3d6:	6923      	ldr	r3, [r4, #16]
 800f3d8:	6861      	ldr	r1, [r4, #4]
 800f3da:	4299      	cmp	r1, r3
 800f3dc:	bfde      	ittt	le
 800f3de:	2330      	movle	r3, #48	@ 0x30
 800f3e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f3e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f3e8:	1b92      	subs	r2, r2, r6
 800f3ea:	6122      	str	r2, [r4, #16]
 800f3ec:	f8cd a000 	str.w	sl, [sp]
 800f3f0:	464b      	mov	r3, r9
 800f3f2:	aa03      	add	r2, sp, #12
 800f3f4:	4621      	mov	r1, r4
 800f3f6:	4640      	mov	r0, r8
 800f3f8:	f7ff fee6 	bl	800f1c8 <_printf_common>
 800f3fc:	3001      	adds	r0, #1
 800f3fe:	d14a      	bne.n	800f496 <_printf_i+0x1f2>
 800f400:	f04f 30ff 	mov.w	r0, #4294967295
 800f404:	b004      	add	sp, #16
 800f406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f40a:	6823      	ldr	r3, [r4, #0]
 800f40c:	f043 0320 	orr.w	r3, r3, #32
 800f410:	6023      	str	r3, [r4, #0]
 800f412:	4833      	ldr	r0, [pc, #204]	@ (800f4e0 <_printf_i+0x23c>)
 800f414:	2778      	movs	r7, #120	@ 0x78
 800f416:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f41a:	6823      	ldr	r3, [r4, #0]
 800f41c:	6831      	ldr	r1, [r6, #0]
 800f41e:	061f      	lsls	r7, r3, #24
 800f420:	f851 5b04 	ldr.w	r5, [r1], #4
 800f424:	d402      	bmi.n	800f42c <_printf_i+0x188>
 800f426:	065f      	lsls	r7, r3, #25
 800f428:	bf48      	it	mi
 800f42a:	b2ad      	uxthmi	r5, r5
 800f42c:	6031      	str	r1, [r6, #0]
 800f42e:	07d9      	lsls	r1, r3, #31
 800f430:	bf44      	itt	mi
 800f432:	f043 0320 	orrmi.w	r3, r3, #32
 800f436:	6023      	strmi	r3, [r4, #0]
 800f438:	b11d      	cbz	r5, 800f442 <_printf_i+0x19e>
 800f43a:	2310      	movs	r3, #16
 800f43c:	e7ac      	b.n	800f398 <_printf_i+0xf4>
 800f43e:	4827      	ldr	r0, [pc, #156]	@ (800f4dc <_printf_i+0x238>)
 800f440:	e7e9      	b.n	800f416 <_printf_i+0x172>
 800f442:	6823      	ldr	r3, [r4, #0]
 800f444:	f023 0320 	bic.w	r3, r3, #32
 800f448:	6023      	str	r3, [r4, #0]
 800f44a:	e7f6      	b.n	800f43a <_printf_i+0x196>
 800f44c:	4616      	mov	r6, r2
 800f44e:	e7bd      	b.n	800f3cc <_printf_i+0x128>
 800f450:	6833      	ldr	r3, [r6, #0]
 800f452:	6825      	ldr	r5, [r4, #0]
 800f454:	6961      	ldr	r1, [r4, #20]
 800f456:	1d18      	adds	r0, r3, #4
 800f458:	6030      	str	r0, [r6, #0]
 800f45a:	062e      	lsls	r6, r5, #24
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	d501      	bpl.n	800f464 <_printf_i+0x1c0>
 800f460:	6019      	str	r1, [r3, #0]
 800f462:	e002      	b.n	800f46a <_printf_i+0x1c6>
 800f464:	0668      	lsls	r0, r5, #25
 800f466:	d5fb      	bpl.n	800f460 <_printf_i+0x1bc>
 800f468:	8019      	strh	r1, [r3, #0]
 800f46a:	2300      	movs	r3, #0
 800f46c:	6123      	str	r3, [r4, #16]
 800f46e:	4616      	mov	r6, r2
 800f470:	e7bc      	b.n	800f3ec <_printf_i+0x148>
 800f472:	6833      	ldr	r3, [r6, #0]
 800f474:	1d1a      	adds	r2, r3, #4
 800f476:	6032      	str	r2, [r6, #0]
 800f478:	681e      	ldr	r6, [r3, #0]
 800f47a:	6862      	ldr	r2, [r4, #4]
 800f47c:	2100      	movs	r1, #0
 800f47e:	4630      	mov	r0, r6
 800f480:	f7f0 fece 	bl	8000220 <memchr>
 800f484:	b108      	cbz	r0, 800f48a <_printf_i+0x1e6>
 800f486:	1b80      	subs	r0, r0, r6
 800f488:	6060      	str	r0, [r4, #4]
 800f48a:	6863      	ldr	r3, [r4, #4]
 800f48c:	6123      	str	r3, [r4, #16]
 800f48e:	2300      	movs	r3, #0
 800f490:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f494:	e7aa      	b.n	800f3ec <_printf_i+0x148>
 800f496:	6923      	ldr	r3, [r4, #16]
 800f498:	4632      	mov	r2, r6
 800f49a:	4649      	mov	r1, r9
 800f49c:	4640      	mov	r0, r8
 800f49e:	47d0      	blx	sl
 800f4a0:	3001      	adds	r0, #1
 800f4a2:	d0ad      	beq.n	800f400 <_printf_i+0x15c>
 800f4a4:	6823      	ldr	r3, [r4, #0]
 800f4a6:	079b      	lsls	r3, r3, #30
 800f4a8:	d413      	bmi.n	800f4d2 <_printf_i+0x22e>
 800f4aa:	68e0      	ldr	r0, [r4, #12]
 800f4ac:	9b03      	ldr	r3, [sp, #12]
 800f4ae:	4298      	cmp	r0, r3
 800f4b0:	bfb8      	it	lt
 800f4b2:	4618      	movlt	r0, r3
 800f4b4:	e7a6      	b.n	800f404 <_printf_i+0x160>
 800f4b6:	2301      	movs	r3, #1
 800f4b8:	4632      	mov	r2, r6
 800f4ba:	4649      	mov	r1, r9
 800f4bc:	4640      	mov	r0, r8
 800f4be:	47d0      	blx	sl
 800f4c0:	3001      	adds	r0, #1
 800f4c2:	d09d      	beq.n	800f400 <_printf_i+0x15c>
 800f4c4:	3501      	adds	r5, #1
 800f4c6:	68e3      	ldr	r3, [r4, #12]
 800f4c8:	9903      	ldr	r1, [sp, #12]
 800f4ca:	1a5b      	subs	r3, r3, r1
 800f4cc:	42ab      	cmp	r3, r5
 800f4ce:	dcf2      	bgt.n	800f4b6 <_printf_i+0x212>
 800f4d0:	e7eb      	b.n	800f4aa <_printf_i+0x206>
 800f4d2:	2500      	movs	r5, #0
 800f4d4:	f104 0619 	add.w	r6, r4, #25
 800f4d8:	e7f5      	b.n	800f4c6 <_printf_i+0x222>
 800f4da:	bf00      	nop
 800f4dc:	0801372a 	.word	0x0801372a
 800f4e0:	0801373b 	.word	0x0801373b

0800f4e4 <_scanf_float>:
 800f4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e8:	b087      	sub	sp, #28
 800f4ea:	4617      	mov	r7, r2
 800f4ec:	9303      	str	r3, [sp, #12]
 800f4ee:	688b      	ldr	r3, [r1, #8]
 800f4f0:	1e5a      	subs	r2, r3, #1
 800f4f2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f4f6:	bf81      	itttt	hi
 800f4f8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f4fc:	eb03 0b05 	addhi.w	fp, r3, r5
 800f500:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f504:	608b      	strhi	r3, [r1, #8]
 800f506:	680b      	ldr	r3, [r1, #0]
 800f508:	460a      	mov	r2, r1
 800f50a:	f04f 0500 	mov.w	r5, #0
 800f50e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f512:	f842 3b1c 	str.w	r3, [r2], #28
 800f516:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f51a:	4680      	mov	r8, r0
 800f51c:	460c      	mov	r4, r1
 800f51e:	bf98      	it	ls
 800f520:	f04f 0b00 	movls.w	fp, #0
 800f524:	9201      	str	r2, [sp, #4]
 800f526:	4616      	mov	r6, r2
 800f528:	46aa      	mov	sl, r5
 800f52a:	46a9      	mov	r9, r5
 800f52c:	9502      	str	r5, [sp, #8]
 800f52e:	68a2      	ldr	r2, [r4, #8]
 800f530:	b152      	cbz	r2, 800f548 <_scanf_float+0x64>
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	781b      	ldrb	r3, [r3, #0]
 800f536:	2b4e      	cmp	r3, #78	@ 0x4e
 800f538:	d864      	bhi.n	800f604 <_scanf_float+0x120>
 800f53a:	2b40      	cmp	r3, #64	@ 0x40
 800f53c:	d83c      	bhi.n	800f5b8 <_scanf_float+0xd4>
 800f53e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f542:	b2c8      	uxtb	r0, r1
 800f544:	280e      	cmp	r0, #14
 800f546:	d93a      	bls.n	800f5be <_scanf_float+0xda>
 800f548:	f1b9 0f00 	cmp.w	r9, #0
 800f54c:	d003      	beq.n	800f556 <_scanf_float+0x72>
 800f54e:	6823      	ldr	r3, [r4, #0]
 800f550:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f554:	6023      	str	r3, [r4, #0]
 800f556:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f55a:	f1ba 0f01 	cmp.w	sl, #1
 800f55e:	f200 8117 	bhi.w	800f790 <_scanf_float+0x2ac>
 800f562:	9b01      	ldr	r3, [sp, #4]
 800f564:	429e      	cmp	r6, r3
 800f566:	f200 8108 	bhi.w	800f77a <_scanf_float+0x296>
 800f56a:	2001      	movs	r0, #1
 800f56c:	b007      	add	sp, #28
 800f56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f572:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f576:	2a0d      	cmp	r2, #13
 800f578:	d8e6      	bhi.n	800f548 <_scanf_float+0x64>
 800f57a:	a101      	add	r1, pc, #4	@ (adr r1, 800f580 <_scanf_float+0x9c>)
 800f57c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f580:	0800f6c7 	.word	0x0800f6c7
 800f584:	0800f549 	.word	0x0800f549
 800f588:	0800f549 	.word	0x0800f549
 800f58c:	0800f549 	.word	0x0800f549
 800f590:	0800f727 	.word	0x0800f727
 800f594:	0800f6ff 	.word	0x0800f6ff
 800f598:	0800f549 	.word	0x0800f549
 800f59c:	0800f549 	.word	0x0800f549
 800f5a0:	0800f6d5 	.word	0x0800f6d5
 800f5a4:	0800f549 	.word	0x0800f549
 800f5a8:	0800f549 	.word	0x0800f549
 800f5ac:	0800f549 	.word	0x0800f549
 800f5b0:	0800f549 	.word	0x0800f549
 800f5b4:	0800f68d 	.word	0x0800f68d
 800f5b8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f5bc:	e7db      	b.n	800f576 <_scanf_float+0x92>
 800f5be:	290e      	cmp	r1, #14
 800f5c0:	d8c2      	bhi.n	800f548 <_scanf_float+0x64>
 800f5c2:	a001      	add	r0, pc, #4	@ (adr r0, 800f5c8 <_scanf_float+0xe4>)
 800f5c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f5c8:	0800f67d 	.word	0x0800f67d
 800f5cc:	0800f549 	.word	0x0800f549
 800f5d0:	0800f67d 	.word	0x0800f67d
 800f5d4:	0800f713 	.word	0x0800f713
 800f5d8:	0800f549 	.word	0x0800f549
 800f5dc:	0800f625 	.word	0x0800f625
 800f5e0:	0800f663 	.word	0x0800f663
 800f5e4:	0800f663 	.word	0x0800f663
 800f5e8:	0800f663 	.word	0x0800f663
 800f5ec:	0800f663 	.word	0x0800f663
 800f5f0:	0800f663 	.word	0x0800f663
 800f5f4:	0800f663 	.word	0x0800f663
 800f5f8:	0800f663 	.word	0x0800f663
 800f5fc:	0800f663 	.word	0x0800f663
 800f600:	0800f663 	.word	0x0800f663
 800f604:	2b6e      	cmp	r3, #110	@ 0x6e
 800f606:	d809      	bhi.n	800f61c <_scanf_float+0x138>
 800f608:	2b60      	cmp	r3, #96	@ 0x60
 800f60a:	d8b2      	bhi.n	800f572 <_scanf_float+0x8e>
 800f60c:	2b54      	cmp	r3, #84	@ 0x54
 800f60e:	d07b      	beq.n	800f708 <_scanf_float+0x224>
 800f610:	2b59      	cmp	r3, #89	@ 0x59
 800f612:	d199      	bne.n	800f548 <_scanf_float+0x64>
 800f614:	2d07      	cmp	r5, #7
 800f616:	d197      	bne.n	800f548 <_scanf_float+0x64>
 800f618:	2508      	movs	r5, #8
 800f61a:	e02c      	b.n	800f676 <_scanf_float+0x192>
 800f61c:	2b74      	cmp	r3, #116	@ 0x74
 800f61e:	d073      	beq.n	800f708 <_scanf_float+0x224>
 800f620:	2b79      	cmp	r3, #121	@ 0x79
 800f622:	e7f6      	b.n	800f612 <_scanf_float+0x12e>
 800f624:	6821      	ldr	r1, [r4, #0]
 800f626:	05c8      	lsls	r0, r1, #23
 800f628:	d51b      	bpl.n	800f662 <_scanf_float+0x17e>
 800f62a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f62e:	6021      	str	r1, [r4, #0]
 800f630:	f109 0901 	add.w	r9, r9, #1
 800f634:	f1bb 0f00 	cmp.w	fp, #0
 800f638:	d003      	beq.n	800f642 <_scanf_float+0x15e>
 800f63a:	3201      	adds	r2, #1
 800f63c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f640:	60a2      	str	r2, [r4, #8]
 800f642:	68a3      	ldr	r3, [r4, #8]
 800f644:	3b01      	subs	r3, #1
 800f646:	60a3      	str	r3, [r4, #8]
 800f648:	6923      	ldr	r3, [r4, #16]
 800f64a:	3301      	adds	r3, #1
 800f64c:	6123      	str	r3, [r4, #16]
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	3b01      	subs	r3, #1
 800f652:	2b00      	cmp	r3, #0
 800f654:	607b      	str	r3, [r7, #4]
 800f656:	f340 8087 	ble.w	800f768 <_scanf_float+0x284>
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	3301      	adds	r3, #1
 800f65e:	603b      	str	r3, [r7, #0]
 800f660:	e765      	b.n	800f52e <_scanf_float+0x4a>
 800f662:	eb1a 0105 	adds.w	r1, sl, r5
 800f666:	f47f af6f 	bne.w	800f548 <_scanf_float+0x64>
 800f66a:	6822      	ldr	r2, [r4, #0]
 800f66c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f670:	6022      	str	r2, [r4, #0]
 800f672:	460d      	mov	r5, r1
 800f674:	468a      	mov	sl, r1
 800f676:	f806 3b01 	strb.w	r3, [r6], #1
 800f67a:	e7e2      	b.n	800f642 <_scanf_float+0x15e>
 800f67c:	6822      	ldr	r2, [r4, #0]
 800f67e:	0610      	lsls	r0, r2, #24
 800f680:	f57f af62 	bpl.w	800f548 <_scanf_float+0x64>
 800f684:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f688:	6022      	str	r2, [r4, #0]
 800f68a:	e7f4      	b.n	800f676 <_scanf_float+0x192>
 800f68c:	f1ba 0f00 	cmp.w	sl, #0
 800f690:	d10e      	bne.n	800f6b0 <_scanf_float+0x1cc>
 800f692:	f1b9 0f00 	cmp.w	r9, #0
 800f696:	d10e      	bne.n	800f6b6 <_scanf_float+0x1d2>
 800f698:	6822      	ldr	r2, [r4, #0]
 800f69a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f69e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f6a2:	d108      	bne.n	800f6b6 <_scanf_float+0x1d2>
 800f6a4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f6a8:	6022      	str	r2, [r4, #0]
 800f6aa:	f04f 0a01 	mov.w	sl, #1
 800f6ae:	e7e2      	b.n	800f676 <_scanf_float+0x192>
 800f6b0:	f1ba 0f02 	cmp.w	sl, #2
 800f6b4:	d055      	beq.n	800f762 <_scanf_float+0x27e>
 800f6b6:	2d01      	cmp	r5, #1
 800f6b8:	d002      	beq.n	800f6c0 <_scanf_float+0x1dc>
 800f6ba:	2d04      	cmp	r5, #4
 800f6bc:	f47f af44 	bne.w	800f548 <_scanf_float+0x64>
 800f6c0:	3501      	adds	r5, #1
 800f6c2:	b2ed      	uxtb	r5, r5
 800f6c4:	e7d7      	b.n	800f676 <_scanf_float+0x192>
 800f6c6:	f1ba 0f01 	cmp.w	sl, #1
 800f6ca:	f47f af3d 	bne.w	800f548 <_scanf_float+0x64>
 800f6ce:	f04f 0a02 	mov.w	sl, #2
 800f6d2:	e7d0      	b.n	800f676 <_scanf_float+0x192>
 800f6d4:	b97d      	cbnz	r5, 800f6f6 <_scanf_float+0x212>
 800f6d6:	f1b9 0f00 	cmp.w	r9, #0
 800f6da:	f47f af38 	bne.w	800f54e <_scanf_float+0x6a>
 800f6de:	6822      	ldr	r2, [r4, #0]
 800f6e0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f6e4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f6e8:	f040 8108 	bne.w	800f8fc <_scanf_float+0x418>
 800f6ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f6f0:	6022      	str	r2, [r4, #0]
 800f6f2:	2501      	movs	r5, #1
 800f6f4:	e7bf      	b.n	800f676 <_scanf_float+0x192>
 800f6f6:	2d03      	cmp	r5, #3
 800f6f8:	d0e2      	beq.n	800f6c0 <_scanf_float+0x1dc>
 800f6fa:	2d05      	cmp	r5, #5
 800f6fc:	e7de      	b.n	800f6bc <_scanf_float+0x1d8>
 800f6fe:	2d02      	cmp	r5, #2
 800f700:	f47f af22 	bne.w	800f548 <_scanf_float+0x64>
 800f704:	2503      	movs	r5, #3
 800f706:	e7b6      	b.n	800f676 <_scanf_float+0x192>
 800f708:	2d06      	cmp	r5, #6
 800f70a:	f47f af1d 	bne.w	800f548 <_scanf_float+0x64>
 800f70e:	2507      	movs	r5, #7
 800f710:	e7b1      	b.n	800f676 <_scanf_float+0x192>
 800f712:	6822      	ldr	r2, [r4, #0]
 800f714:	0591      	lsls	r1, r2, #22
 800f716:	f57f af17 	bpl.w	800f548 <_scanf_float+0x64>
 800f71a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f71e:	6022      	str	r2, [r4, #0]
 800f720:	f8cd 9008 	str.w	r9, [sp, #8]
 800f724:	e7a7      	b.n	800f676 <_scanf_float+0x192>
 800f726:	6822      	ldr	r2, [r4, #0]
 800f728:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f72c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f730:	d006      	beq.n	800f740 <_scanf_float+0x25c>
 800f732:	0550      	lsls	r0, r2, #21
 800f734:	f57f af08 	bpl.w	800f548 <_scanf_float+0x64>
 800f738:	f1b9 0f00 	cmp.w	r9, #0
 800f73c:	f000 80de 	beq.w	800f8fc <_scanf_float+0x418>
 800f740:	0591      	lsls	r1, r2, #22
 800f742:	bf58      	it	pl
 800f744:	9902      	ldrpl	r1, [sp, #8]
 800f746:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f74a:	bf58      	it	pl
 800f74c:	eba9 0101 	subpl.w	r1, r9, r1
 800f750:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f754:	bf58      	it	pl
 800f756:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f75a:	6022      	str	r2, [r4, #0]
 800f75c:	f04f 0900 	mov.w	r9, #0
 800f760:	e789      	b.n	800f676 <_scanf_float+0x192>
 800f762:	f04f 0a03 	mov.w	sl, #3
 800f766:	e786      	b.n	800f676 <_scanf_float+0x192>
 800f768:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f76c:	4639      	mov	r1, r7
 800f76e:	4640      	mov	r0, r8
 800f770:	4798      	blx	r3
 800f772:	2800      	cmp	r0, #0
 800f774:	f43f aedb 	beq.w	800f52e <_scanf_float+0x4a>
 800f778:	e6e6      	b.n	800f548 <_scanf_float+0x64>
 800f77a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f77e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f782:	463a      	mov	r2, r7
 800f784:	4640      	mov	r0, r8
 800f786:	4798      	blx	r3
 800f788:	6923      	ldr	r3, [r4, #16]
 800f78a:	3b01      	subs	r3, #1
 800f78c:	6123      	str	r3, [r4, #16]
 800f78e:	e6e8      	b.n	800f562 <_scanf_float+0x7e>
 800f790:	1e6b      	subs	r3, r5, #1
 800f792:	2b06      	cmp	r3, #6
 800f794:	d824      	bhi.n	800f7e0 <_scanf_float+0x2fc>
 800f796:	2d02      	cmp	r5, #2
 800f798:	d836      	bhi.n	800f808 <_scanf_float+0x324>
 800f79a:	9b01      	ldr	r3, [sp, #4]
 800f79c:	429e      	cmp	r6, r3
 800f79e:	f67f aee4 	bls.w	800f56a <_scanf_float+0x86>
 800f7a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f7a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f7aa:	463a      	mov	r2, r7
 800f7ac:	4640      	mov	r0, r8
 800f7ae:	4798      	blx	r3
 800f7b0:	6923      	ldr	r3, [r4, #16]
 800f7b2:	3b01      	subs	r3, #1
 800f7b4:	6123      	str	r3, [r4, #16]
 800f7b6:	e7f0      	b.n	800f79a <_scanf_float+0x2b6>
 800f7b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f7bc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f7c0:	463a      	mov	r2, r7
 800f7c2:	4640      	mov	r0, r8
 800f7c4:	4798      	blx	r3
 800f7c6:	6923      	ldr	r3, [r4, #16]
 800f7c8:	3b01      	subs	r3, #1
 800f7ca:	6123      	str	r3, [r4, #16]
 800f7cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f7d0:	fa5f fa8a 	uxtb.w	sl, sl
 800f7d4:	f1ba 0f02 	cmp.w	sl, #2
 800f7d8:	d1ee      	bne.n	800f7b8 <_scanf_float+0x2d4>
 800f7da:	3d03      	subs	r5, #3
 800f7dc:	b2ed      	uxtb	r5, r5
 800f7de:	1b76      	subs	r6, r6, r5
 800f7e0:	6823      	ldr	r3, [r4, #0]
 800f7e2:	05da      	lsls	r2, r3, #23
 800f7e4:	d530      	bpl.n	800f848 <_scanf_float+0x364>
 800f7e6:	055b      	lsls	r3, r3, #21
 800f7e8:	d511      	bpl.n	800f80e <_scanf_float+0x32a>
 800f7ea:	9b01      	ldr	r3, [sp, #4]
 800f7ec:	429e      	cmp	r6, r3
 800f7ee:	f67f aebc 	bls.w	800f56a <_scanf_float+0x86>
 800f7f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f7f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f7fa:	463a      	mov	r2, r7
 800f7fc:	4640      	mov	r0, r8
 800f7fe:	4798      	blx	r3
 800f800:	6923      	ldr	r3, [r4, #16]
 800f802:	3b01      	subs	r3, #1
 800f804:	6123      	str	r3, [r4, #16]
 800f806:	e7f0      	b.n	800f7ea <_scanf_float+0x306>
 800f808:	46aa      	mov	sl, r5
 800f80a:	46b3      	mov	fp, r6
 800f80c:	e7de      	b.n	800f7cc <_scanf_float+0x2e8>
 800f80e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f812:	6923      	ldr	r3, [r4, #16]
 800f814:	2965      	cmp	r1, #101	@ 0x65
 800f816:	f103 33ff 	add.w	r3, r3, #4294967295
 800f81a:	f106 35ff 	add.w	r5, r6, #4294967295
 800f81e:	6123      	str	r3, [r4, #16]
 800f820:	d00c      	beq.n	800f83c <_scanf_float+0x358>
 800f822:	2945      	cmp	r1, #69	@ 0x45
 800f824:	d00a      	beq.n	800f83c <_scanf_float+0x358>
 800f826:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f82a:	463a      	mov	r2, r7
 800f82c:	4640      	mov	r0, r8
 800f82e:	4798      	blx	r3
 800f830:	6923      	ldr	r3, [r4, #16]
 800f832:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f836:	3b01      	subs	r3, #1
 800f838:	1eb5      	subs	r5, r6, #2
 800f83a:	6123      	str	r3, [r4, #16]
 800f83c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f840:	463a      	mov	r2, r7
 800f842:	4640      	mov	r0, r8
 800f844:	4798      	blx	r3
 800f846:	462e      	mov	r6, r5
 800f848:	6822      	ldr	r2, [r4, #0]
 800f84a:	f012 0210 	ands.w	r2, r2, #16
 800f84e:	d001      	beq.n	800f854 <_scanf_float+0x370>
 800f850:	2000      	movs	r0, #0
 800f852:	e68b      	b.n	800f56c <_scanf_float+0x88>
 800f854:	7032      	strb	r2, [r6, #0]
 800f856:	6823      	ldr	r3, [r4, #0]
 800f858:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f85c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f860:	d11c      	bne.n	800f89c <_scanf_float+0x3b8>
 800f862:	9b02      	ldr	r3, [sp, #8]
 800f864:	454b      	cmp	r3, r9
 800f866:	eba3 0209 	sub.w	r2, r3, r9
 800f86a:	d123      	bne.n	800f8b4 <_scanf_float+0x3d0>
 800f86c:	9901      	ldr	r1, [sp, #4]
 800f86e:	2200      	movs	r2, #0
 800f870:	4640      	mov	r0, r8
 800f872:	f7ff f9d9 	bl	800ec28 <_strtod_r>
 800f876:	9b03      	ldr	r3, [sp, #12]
 800f878:	6821      	ldr	r1, [r4, #0]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	f011 0f02 	tst.w	r1, #2
 800f880:	ec57 6b10 	vmov	r6, r7, d0
 800f884:	f103 0204 	add.w	r2, r3, #4
 800f888:	d01f      	beq.n	800f8ca <_scanf_float+0x3e6>
 800f88a:	9903      	ldr	r1, [sp, #12]
 800f88c:	600a      	str	r2, [r1, #0]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	e9c3 6700 	strd	r6, r7, [r3]
 800f894:	68e3      	ldr	r3, [r4, #12]
 800f896:	3301      	adds	r3, #1
 800f898:	60e3      	str	r3, [r4, #12]
 800f89a:	e7d9      	b.n	800f850 <_scanf_float+0x36c>
 800f89c:	9b04      	ldr	r3, [sp, #16]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d0e4      	beq.n	800f86c <_scanf_float+0x388>
 800f8a2:	9905      	ldr	r1, [sp, #20]
 800f8a4:	230a      	movs	r3, #10
 800f8a6:	3101      	adds	r1, #1
 800f8a8:	4640      	mov	r0, r8
 800f8aa:	f002 f9e9 	bl	8011c80 <_strtol_r>
 800f8ae:	9b04      	ldr	r3, [sp, #16]
 800f8b0:	9e05      	ldr	r6, [sp, #20]
 800f8b2:	1ac2      	subs	r2, r0, r3
 800f8b4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f8b8:	429e      	cmp	r6, r3
 800f8ba:	bf28      	it	cs
 800f8bc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f8c0:	4910      	ldr	r1, [pc, #64]	@ (800f904 <_scanf_float+0x420>)
 800f8c2:	4630      	mov	r0, r6
 800f8c4:	f000 f8e4 	bl	800fa90 <siprintf>
 800f8c8:	e7d0      	b.n	800f86c <_scanf_float+0x388>
 800f8ca:	f011 0f04 	tst.w	r1, #4
 800f8ce:	9903      	ldr	r1, [sp, #12]
 800f8d0:	600a      	str	r2, [r1, #0]
 800f8d2:	d1dc      	bne.n	800f88e <_scanf_float+0x3aa>
 800f8d4:	681d      	ldr	r5, [r3, #0]
 800f8d6:	4632      	mov	r2, r6
 800f8d8:	463b      	mov	r3, r7
 800f8da:	4630      	mov	r0, r6
 800f8dc:	4639      	mov	r1, r7
 800f8de:	f7f1 f94d 	bl	8000b7c <__aeabi_dcmpun>
 800f8e2:	b128      	cbz	r0, 800f8f0 <_scanf_float+0x40c>
 800f8e4:	4808      	ldr	r0, [pc, #32]	@ (800f908 <_scanf_float+0x424>)
 800f8e6:	f000 f9ff 	bl	800fce8 <nanf>
 800f8ea:	ed85 0a00 	vstr	s0, [r5]
 800f8ee:	e7d1      	b.n	800f894 <_scanf_float+0x3b0>
 800f8f0:	4630      	mov	r0, r6
 800f8f2:	4639      	mov	r1, r7
 800f8f4:	f7f1 f9a0 	bl	8000c38 <__aeabi_d2f>
 800f8f8:	6028      	str	r0, [r5, #0]
 800f8fa:	e7cb      	b.n	800f894 <_scanf_float+0x3b0>
 800f8fc:	f04f 0900 	mov.w	r9, #0
 800f900:	e629      	b.n	800f556 <_scanf_float+0x72>
 800f902:	bf00      	nop
 800f904:	0801374c 	.word	0x0801374c
 800f908:	08013aed 	.word	0x08013aed

0800f90c <std>:
 800f90c:	2300      	movs	r3, #0
 800f90e:	b510      	push	{r4, lr}
 800f910:	4604      	mov	r4, r0
 800f912:	e9c0 3300 	strd	r3, r3, [r0]
 800f916:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f91a:	6083      	str	r3, [r0, #8]
 800f91c:	8181      	strh	r1, [r0, #12]
 800f91e:	6643      	str	r3, [r0, #100]	@ 0x64
 800f920:	81c2      	strh	r2, [r0, #14]
 800f922:	6183      	str	r3, [r0, #24]
 800f924:	4619      	mov	r1, r3
 800f926:	2208      	movs	r2, #8
 800f928:	305c      	adds	r0, #92	@ 0x5c
 800f92a:	f000 f935 	bl	800fb98 <memset>
 800f92e:	4b0d      	ldr	r3, [pc, #52]	@ (800f964 <std+0x58>)
 800f930:	6263      	str	r3, [r4, #36]	@ 0x24
 800f932:	4b0d      	ldr	r3, [pc, #52]	@ (800f968 <std+0x5c>)
 800f934:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f936:	4b0d      	ldr	r3, [pc, #52]	@ (800f96c <std+0x60>)
 800f938:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f93a:	4b0d      	ldr	r3, [pc, #52]	@ (800f970 <std+0x64>)
 800f93c:	6323      	str	r3, [r4, #48]	@ 0x30
 800f93e:	4b0d      	ldr	r3, [pc, #52]	@ (800f974 <std+0x68>)
 800f940:	6224      	str	r4, [r4, #32]
 800f942:	429c      	cmp	r4, r3
 800f944:	d006      	beq.n	800f954 <std+0x48>
 800f946:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f94a:	4294      	cmp	r4, r2
 800f94c:	d002      	beq.n	800f954 <std+0x48>
 800f94e:	33d0      	adds	r3, #208	@ 0xd0
 800f950:	429c      	cmp	r4, r3
 800f952:	d105      	bne.n	800f960 <std+0x54>
 800f954:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f95c:	f000 b9aa 	b.w	800fcb4 <__retarget_lock_init_recursive>
 800f960:	bd10      	pop	{r4, pc}
 800f962:	bf00      	nop
 800f964:	0800fad1 	.word	0x0800fad1
 800f968:	0800faf3 	.word	0x0800faf3
 800f96c:	0800fb2b 	.word	0x0800fb2b
 800f970:	0800fb4f 	.word	0x0800fb4f
 800f974:	20000ac8 	.word	0x20000ac8

0800f978 <stdio_exit_handler>:
 800f978:	4a02      	ldr	r2, [pc, #8]	@ (800f984 <stdio_exit_handler+0xc>)
 800f97a:	4903      	ldr	r1, [pc, #12]	@ (800f988 <stdio_exit_handler+0x10>)
 800f97c:	4803      	ldr	r0, [pc, #12]	@ (800f98c <stdio_exit_handler+0x14>)
 800f97e:	f000 b869 	b.w	800fa54 <_fwalk_sglue>
 800f982:	bf00      	nop
 800f984:	200000a4 	.word	0x200000a4
 800f988:	08012055 	.word	0x08012055
 800f98c:	20000220 	.word	0x20000220

0800f990 <cleanup_stdio>:
 800f990:	6841      	ldr	r1, [r0, #4]
 800f992:	4b0c      	ldr	r3, [pc, #48]	@ (800f9c4 <cleanup_stdio+0x34>)
 800f994:	4299      	cmp	r1, r3
 800f996:	b510      	push	{r4, lr}
 800f998:	4604      	mov	r4, r0
 800f99a:	d001      	beq.n	800f9a0 <cleanup_stdio+0x10>
 800f99c:	f002 fb5a 	bl	8012054 <_fflush_r>
 800f9a0:	68a1      	ldr	r1, [r4, #8]
 800f9a2:	4b09      	ldr	r3, [pc, #36]	@ (800f9c8 <cleanup_stdio+0x38>)
 800f9a4:	4299      	cmp	r1, r3
 800f9a6:	d002      	beq.n	800f9ae <cleanup_stdio+0x1e>
 800f9a8:	4620      	mov	r0, r4
 800f9aa:	f002 fb53 	bl	8012054 <_fflush_r>
 800f9ae:	68e1      	ldr	r1, [r4, #12]
 800f9b0:	4b06      	ldr	r3, [pc, #24]	@ (800f9cc <cleanup_stdio+0x3c>)
 800f9b2:	4299      	cmp	r1, r3
 800f9b4:	d004      	beq.n	800f9c0 <cleanup_stdio+0x30>
 800f9b6:	4620      	mov	r0, r4
 800f9b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9bc:	f002 bb4a 	b.w	8012054 <_fflush_r>
 800f9c0:	bd10      	pop	{r4, pc}
 800f9c2:	bf00      	nop
 800f9c4:	20000ac8 	.word	0x20000ac8
 800f9c8:	20000b30 	.word	0x20000b30
 800f9cc:	20000b98 	.word	0x20000b98

0800f9d0 <global_stdio_init.part.0>:
 800f9d0:	b510      	push	{r4, lr}
 800f9d2:	4b0b      	ldr	r3, [pc, #44]	@ (800fa00 <global_stdio_init.part.0+0x30>)
 800f9d4:	4c0b      	ldr	r4, [pc, #44]	@ (800fa04 <global_stdio_init.part.0+0x34>)
 800f9d6:	4a0c      	ldr	r2, [pc, #48]	@ (800fa08 <global_stdio_init.part.0+0x38>)
 800f9d8:	601a      	str	r2, [r3, #0]
 800f9da:	4620      	mov	r0, r4
 800f9dc:	2200      	movs	r2, #0
 800f9de:	2104      	movs	r1, #4
 800f9e0:	f7ff ff94 	bl	800f90c <std>
 800f9e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f9e8:	2201      	movs	r2, #1
 800f9ea:	2109      	movs	r1, #9
 800f9ec:	f7ff ff8e 	bl	800f90c <std>
 800f9f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f9f4:	2202      	movs	r2, #2
 800f9f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9fa:	2112      	movs	r1, #18
 800f9fc:	f7ff bf86 	b.w	800f90c <std>
 800fa00:	20000c00 	.word	0x20000c00
 800fa04:	20000ac8 	.word	0x20000ac8
 800fa08:	0800f979 	.word	0x0800f979

0800fa0c <__sfp_lock_acquire>:
 800fa0c:	4801      	ldr	r0, [pc, #4]	@ (800fa14 <__sfp_lock_acquire+0x8>)
 800fa0e:	f000 b952 	b.w	800fcb6 <__retarget_lock_acquire_recursive>
 800fa12:	bf00      	nop
 800fa14:	20000c09 	.word	0x20000c09

0800fa18 <__sfp_lock_release>:
 800fa18:	4801      	ldr	r0, [pc, #4]	@ (800fa20 <__sfp_lock_release+0x8>)
 800fa1a:	f000 b94d 	b.w	800fcb8 <__retarget_lock_release_recursive>
 800fa1e:	bf00      	nop
 800fa20:	20000c09 	.word	0x20000c09

0800fa24 <__sinit>:
 800fa24:	b510      	push	{r4, lr}
 800fa26:	4604      	mov	r4, r0
 800fa28:	f7ff fff0 	bl	800fa0c <__sfp_lock_acquire>
 800fa2c:	6a23      	ldr	r3, [r4, #32]
 800fa2e:	b11b      	cbz	r3, 800fa38 <__sinit+0x14>
 800fa30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa34:	f7ff bff0 	b.w	800fa18 <__sfp_lock_release>
 800fa38:	4b04      	ldr	r3, [pc, #16]	@ (800fa4c <__sinit+0x28>)
 800fa3a:	6223      	str	r3, [r4, #32]
 800fa3c:	4b04      	ldr	r3, [pc, #16]	@ (800fa50 <__sinit+0x2c>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d1f5      	bne.n	800fa30 <__sinit+0xc>
 800fa44:	f7ff ffc4 	bl	800f9d0 <global_stdio_init.part.0>
 800fa48:	e7f2      	b.n	800fa30 <__sinit+0xc>
 800fa4a:	bf00      	nop
 800fa4c:	0800f991 	.word	0x0800f991
 800fa50:	20000c00 	.word	0x20000c00

0800fa54 <_fwalk_sglue>:
 800fa54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa58:	4607      	mov	r7, r0
 800fa5a:	4688      	mov	r8, r1
 800fa5c:	4614      	mov	r4, r2
 800fa5e:	2600      	movs	r6, #0
 800fa60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fa64:	f1b9 0901 	subs.w	r9, r9, #1
 800fa68:	d505      	bpl.n	800fa76 <_fwalk_sglue+0x22>
 800fa6a:	6824      	ldr	r4, [r4, #0]
 800fa6c:	2c00      	cmp	r4, #0
 800fa6e:	d1f7      	bne.n	800fa60 <_fwalk_sglue+0xc>
 800fa70:	4630      	mov	r0, r6
 800fa72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa76:	89ab      	ldrh	r3, [r5, #12]
 800fa78:	2b01      	cmp	r3, #1
 800fa7a:	d907      	bls.n	800fa8c <_fwalk_sglue+0x38>
 800fa7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fa80:	3301      	adds	r3, #1
 800fa82:	d003      	beq.n	800fa8c <_fwalk_sglue+0x38>
 800fa84:	4629      	mov	r1, r5
 800fa86:	4638      	mov	r0, r7
 800fa88:	47c0      	blx	r8
 800fa8a:	4306      	orrs	r6, r0
 800fa8c:	3568      	adds	r5, #104	@ 0x68
 800fa8e:	e7e9      	b.n	800fa64 <_fwalk_sglue+0x10>

0800fa90 <siprintf>:
 800fa90:	b40e      	push	{r1, r2, r3}
 800fa92:	b500      	push	{lr}
 800fa94:	b09c      	sub	sp, #112	@ 0x70
 800fa96:	ab1d      	add	r3, sp, #116	@ 0x74
 800fa98:	9002      	str	r0, [sp, #8]
 800fa9a:	9006      	str	r0, [sp, #24]
 800fa9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800faa0:	4809      	ldr	r0, [pc, #36]	@ (800fac8 <siprintf+0x38>)
 800faa2:	9107      	str	r1, [sp, #28]
 800faa4:	9104      	str	r1, [sp, #16]
 800faa6:	4909      	ldr	r1, [pc, #36]	@ (800facc <siprintf+0x3c>)
 800faa8:	f853 2b04 	ldr.w	r2, [r3], #4
 800faac:	9105      	str	r1, [sp, #20]
 800faae:	6800      	ldr	r0, [r0, #0]
 800fab0:	9301      	str	r3, [sp, #4]
 800fab2:	a902      	add	r1, sp, #8
 800fab4:	f002 f94e 	bl	8011d54 <_svfiprintf_r>
 800fab8:	9b02      	ldr	r3, [sp, #8]
 800faba:	2200      	movs	r2, #0
 800fabc:	701a      	strb	r2, [r3, #0]
 800fabe:	b01c      	add	sp, #112	@ 0x70
 800fac0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fac4:	b003      	add	sp, #12
 800fac6:	4770      	bx	lr
 800fac8:	2000021c 	.word	0x2000021c
 800facc:	ffff0208 	.word	0xffff0208

0800fad0 <__sread>:
 800fad0:	b510      	push	{r4, lr}
 800fad2:	460c      	mov	r4, r1
 800fad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fad8:	f000 f89e 	bl	800fc18 <_read_r>
 800fadc:	2800      	cmp	r0, #0
 800fade:	bfab      	itete	ge
 800fae0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fae2:	89a3      	ldrhlt	r3, [r4, #12]
 800fae4:	181b      	addge	r3, r3, r0
 800fae6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800faea:	bfac      	ite	ge
 800faec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800faee:	81a3      	strhlt	r3, [r4, #12]
 800faf0:	bd10      	pop	{r4, pc}

0800faf2 <__swrite>:
 800faf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faf6:	461f      	mov	r7, r3
 800faf8:	898b      	ldrh	r3, [r1, #12]
 800fafa:	05db      	lsls	r3, r3, #23
 800fafc:	4605      	mov	r5, r0
 800fafe:	460c      	mov	r4, r1
 800fb00:	4616      	mov	r6, r2
 800fb02:	d505      	bpl.n	800fb10 <__swrite+0x1e>
 800fb04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb08:	2302      	movs	r3, #2
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	f000 f872 	bl	800fbf4 <_lseek_r>
 800fb10:	89a3      	ldrh	r3, [r4, #12]
 800fb12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fb1a:	81a3      	strh	r3, [r4, #12]
 800fb1c:	4632      	mov	r2, r6
 800fb1e:	463b      	mov	r3, r7
 800fb20:	4628      	mov	r0, r5
 800fb22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb26:	f000 b889 	b.w	800fc3c <_write_r>

0800fb2a <__sseek>:
 800fb2a:	b510      	push	{r4, lr}
 800fb2c:	460c      	mov	r4, r1
 800fb2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb32:	f000 f85f 	bl	800fbf4 <_lseek_r>
 800fb36:	1c43      	adds	r3, r0, #1
 800fb38:	89a3      	ldrh	r3, [r4, #12]
 800fb3a:	bf15      	itete	ne
 800fb3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fb3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fb42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fb46:	81a3      	strheq	r3, [r4, #12]
 800fb48:	bf18      	it	ne
 800fb4a:	81a3      	strhne	r3, [r4, #12]
 800fb4c:	bd10      	pop	{r4, pc}

0800fb4e <__sclose>:
 800fb4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb52:	f000 b83f 	b.w	800fbd4 <_close_r>
	...

0800fb58 <_vsiprintf_r>:
 800fb58:	b500      	push	{lr}
 800fb5a:	b09b      	sub	sp, #108	@ 0x6c
 800fb5c:	9100      	str	r1, [sp, #0]
 800fb5e:	9104      	str	r1, [sp, #16]
 800fb60:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fb64:	9105      	str	r1, [sp, #20]
 800fb66:	9102      	str	r1, [sp, #8]
 800fb68:	4905      	ldr	r1, [pc, #20]	@ (800fb80 <_vsiprintf_r+0x28>)
 800fb6a:	9103      	str	r1, [sp, #12]
 800fb6c:	4669      	mov	r1, sp
 800fb6e:	f002 f8f1 	bl	8011d54 <_svfiprintf_r>
 800fb72:	9b00      	ldr	r3, [sp, #0]
 800fb74:	2200      	movs	r2, #0
 800fb76:	701a      	strb	r2, [r3, #0]
 800fb78:	b01b      	add	sp, #108	@ 0x6c
 800fb7a:	f85d fb04 	ldr.w	pc, [sp], #4
 800fb7e:	bf00      	nop
 800fb80:	ffff0208 	.word	0xffff0208

0800fb84 <vsiprintf>:
 800fb84:	4613      	mov	r3, r2
 800fb86:	460a      	mov	r2, r1
 800fb88:	4601      	mov	r1, r0
 800fb8a:	4802      	ldr	r0, [pc, #8]	@ (800fb94 <vsiprintf+0x10>)
 800fb8c:	6800      	ldr	r0, [r0, #0]
 800fb8e:	f7ff bfe3 	b.w	800fb58 <_vsiprintf_r>
 800fb92:	bf00      	nop
 800fb94:	2000021c 	.word	0x2000021c

0800fb98 <memset>:
 800fb98:	4402      	add	r2, r0
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	4293      	cmp	r3, r2
 800fb9e:	d100      	bne.n	800fba2 <memset+0xa>
 800fba0:	4770      	bx	lr
 800fba2:	f803 1b01 	strb.w	r1, [r3], #1
 800fba6:	e7f9      	b.n	800fb9c <memset+0x4>

0800fba8 <strncmp>:
 800fba8:	b510      	push	{r4, lr}
 800fbaa:	b16a      	cbz	r2, 800fbc8 <strncmp+0x20>
 800fbac:	3901      	subs	r1, #1
 800fbae:	1884      	adds	r4, r0, r2
 800fbb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fbb4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fbb8:	429a      	cmp	r2, r3
 800fbba:	d103      	bne.n	800fbc4 <strncmp+0x1c>
 800fbbc:	42a0      	cmp	r0, r4
 800fbbe:	d001      	beq.n	800fbc4 <strncmp+0x1c>
 800fbc0:	2a00      	cmp	r2, #0
 800fbc2:	d1f5      	bne.n	800fbb0 <strncmp+0x8>
 800fbc4:	1ad0      	subs	r0, r2, r3
 800fbc6:	bd10      	pop	{r4, pc}
 800fbc8:	4610      	mov	r0, r2
 800fbca:	e7fc      	b.n	800fbc6 <strncmp+0x1e>

0800fbcc <_localeconv_r>:
 800fbcc:	4800      	ldr	r0, [pc, #0]	@ (800fbd0 <_localeconv_r+0x4>)
 800fbce:	4770      	bx	lr
 800fbd0:	200001a0 	.word	0x200001a0

0800fbd4 <_close_r>:
 800fbd4:	b538      	push	{r3, r4, r5, lr}
 800fbd6:	4d06      	ldr	r5, [pc, #24]	@ (800fbf0 <_close_r+0x1c>)
 800fbd8:	2300      	movs	r3, #0
 800fbda:	4604      	mov	r4, r0
 800fbdc:	4608      	mov	r0, r1
 800fbde:	602b      	str	r3, [r5, #0]
 800fbe0:	f7f2 f826 	bl	8001c30 <_close>
 800fbe4:	1c43      	adds	r3, r0, #1
 800fbe6:	d102      	bne.n	800fbee <_close_r+0x1a>
 800fbe8:	682b      	ldr	r3, [r5, #0]
 800fbea:	b103      	cbz	r3, 800fbee <_close_r+0x1a>
 800fbec:	6023      	str	r3, [r4, #0]
 800fbee:	bd38      	pop	{r3, r4, r5, pc}
 800fbf0:	20000c04 	.word	0x20000c04

0800fbf4 <_lseek_r>:
 800fbf4:	b538      	push	{r3, r4, r5, lr}
 800fbf6:	4d07      	ldr	r5, [pc, #28]	@ (800fc14 <_lseek_r+0x20>)
 800fbf8:	4604      	mov	r4, r0
 800fbfa:	4608      	mov	r0, r1
 800fbfc:	4611      	mov	r1, r2
 800fbfe:	2200      	movs	r2, #0
 800fc00:	602a      	str	r2, [r5, #0]
 800fc02:	461a      	mov	r2, r3
 800fc04:	f7f2 f83b 	bl	8001c7e <_lseek>
 800fc08:	1c43      	adds	r3, r0, #1
 800fc0a:	d102      	bne.n	800fc12 <_lseek_r+0x1e>
 800fc0c:	682b      	ldr	r3, [r5, #0]
 800fc0e:	b103      	cbz	r3, 800fc12 <_lseek_r+0x1e>
 800fc10:	6023      	str	r3, [r4, #0]
 800fc12:	bd38      	pop	{r3, r4, r5, pc}
 800fc14:	20000c04 	.word	0x20000c04

0800fc18 <_read_r>:
 800fc18:	b538      	push	{r3, r4, r5, lr}
 800fc1a:	4d07      	ldr	r5, [pc, #28]	@ (800fc38 <_read_r+0x20>)
 800fc1c:	4604      	mov	r4, r0
 800fc1e:	4608      	mov	r0, r1
 800fc20:	4611      	mov	r1, r2
 800fc22:	2200      	movs	r2, #0
 800fc24:	602a      	str	r2, [r5, #0]
 800fc26:	461a      	mov	r2, r3
 800fc28:	f7f1 ffc9 	bl	8001bbe <_read>
 800fc2c:	1c43      	adds	r3, r0, #1
 800fc2e:	d102      	bne.n	800fc36 <_read_r+0x1e>
 800fc30:	682b      	ldr	r3, [r5, #0]
 800fc32:	b103      	cbz	r3, 800fc36 <_read_r+0x1e>
 800fc34:	6023      	str	r3, [r4, #0]
 800fc36:	bd38      	pop	{r3, r4, r5, pc}
 800fc38:	20000c04 	.word	0x20000c04

0800fc3c <_write_r>:
 800fc3c:	b538      	push	{r3, r4, r5, lr}
 800fc3e:	4d07      	ldr	r5, [pc, #28]	@ (800fc5c <_write_r+0x20>)
 800fc40:	4604      	mov	r4, r0
 800fc42:	4608      	mov	r0, r1
 800fc44:	4611      	mov	r1, r2
 800fc46:	2200      	movs	r2, #0
 800fc48:	602a      	str	r2, [r5, #0]
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	f7f1 ffd4 	bl	8001bf8 <_write>
 800fc50:	1c43      	adds	r3, r0, #1
 800fc52:	d102      	bne.n	800fc5a <_write_r+0x1e>
 800fc54:	682b      	ldr	r3, [r5, #0]
 800fc56:	b103      	cbz	r3, 800fc5a <_write_r+0x1e>
 800fc58:	6023      	str	r3, [r4, #0]
 800fc5a:	bd38      	pop	{r3, r4, r5, pc}
 800fc5c:	20000c04 	.word	0x20000c04

0800fc60 <__errno>:
 800fc60:	4b01      	ldr	r3, [pc, #4]	@ (800fc68 <__errno+0x8>)
 800fc62:	6818      	ldr	r0, [r3, #0]
 800fc64:	4770      	bx	lr
 800fc66:	bf00      	nop
 800fc68:	2000021c 	.word	0x2000021c

0800fc6c <__libc_init_array>:
 800fc6c:	b570      	push	{r4, r5, r6, lr}
 800fc6e:	4d0d      	ldr	r5, [pc, #52]	@ (800fca4 <__libc_init_array+0x38>)
 800fc70:	4c0d      	ldr	r4, [pc, #52]	@ (800fca8 <__libc_init_array+0x3c>)
 800fc72:	1b64      	subs	r4, r4, r5
 800fc74:	10a4      	asrs	r4, r4, #2
 800fc76:	2600      	movs	r6, #0
 800fc78:	42a6      	cmp	r6, r4
 800fc7a:	d109      	bne.n	800fc90 <__libc_init_array+0x24>
 800fc7c:	4d0b      	ldr	r5, [pc, #44]	@ (800fcac <__libc_init_array+0x40>)
 800fc7e:	4c0c      	ldr	r4, [pc, #48]	@ (800fcb0 <__libc_init_array+0x44>)
 800fc80:	f003 fc36 	bl	80134f0 <_init>
 800fc84:	1b64      	subs	r4, r4, r5
 800fc86:	10a4      	asrs	r4, r4, #2
 800fc88:	2600      	movs	r6, #0
 800fc8a:	42a6      	cmp	r6, r4
 800fc8c:	d105      	bne.n	800fc9a <__libc_init_array+0x2e>
 800fc8e:	bd70      	pop	{r4, r5, r6, pc}
 800fc90:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc94:	4798      	blx	r3
 800fc96:	3601      	adds	r6, #1
 800fc98:	e7ee      	b.n	800fc78 <__libc_init_array+0xc>
 800fc9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc9e:	4798      	blx	r3
 800fca0:	3601      	adds	r6, #1
 800fca2:	e7f2      	b.n	800fc8a <__libc_init_array+0x1e>
 800fca4:	08013b78 	.word	0x08013b78
 800fca8:	08013b78 	.word	0x08013b78
 800fcac:	08013b78 	.word	0x08013b78
 800fcb0:	08013b7c 	.word	0x08013b7c

0800fcb4 <__retarget_lock_init_recursive>:
 800fcb4:	4770      	bx	lr

0800fcb6 <__retarget_lock_acquire_recursive>:
 800fcb6:	4770      	bx	lr

0800fcb8 <__retarget_lock_release_recursive>:
 800fcb8:	4770      	bx	lr

0800fcba <memcpy>:
 800fcba:	440a      	add	r2, r1
 800fcbc:	4291      	cmp	r1, r2
 800fcbe:	f100 33ff 	add.w	r3, r0, #4294967295
 800fcc2:	d100      	bne.n	800fcc6 <memcpy+0xc>
 800fcc4:	4770      	bx	lr
 800fcc6:	b510      	push	{r4, lr}
 800fcc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fccc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fcd0:	4291      	cmp	r1, r2
 800fcd2:	d1f9      	bne.n	800fcc8 <memcpy+0xe>
 800fcd4:	bd10      	pop	{r4, pc}
	...

0800fcd8 <nan>:
 800fcd8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fce0 <nan+0x8>
 800fcdc:	4770      	bx	lr
 800fcde:	bf00      	nop
 800fce0:	00000000 	.word	0x00000000
 800fce4:	7ff80000 	.word	0x7ff80000

0800fce8 <nanf>:
 800fce8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fcf0 <nanf+0x8>
 800fcec:	4770      	bx	lr
 800fcee:	bf00      	nop
 800fcf0:	7fc00000 	.word	0x7fc00000

0800fcf4 <quorem>:
 800fcf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcf8:	6903      	ldr	r3, [r0, #16]
 800fcfa:	690c      	ldr	r4, [r1, #16]
 800fcfc:	42a3      	cmp	r3, r4
 800fcfe:	4607      	mov	r7, r0
 800fd00:	db7e      	blt.n	800fe00 <quorem+0x10c>
 800fd02:	3c01      	subs	r4, #1
 800fd04:	f101 0814 	add.w	r8, r1, #20
 800fd08:	00a3      	lsls	r3, r4, #2
 800fd0a:	f100 0514 	add.w	r5, r0, #20
 800fd0e:	9300      	str	r3, [sp, #0]
 800fd10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd14:	9301      	str	r3, [sp, #4]
 800fd16:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fd1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd1e:	3301      	adds	r3, #1
 800fd20:	429a      	cmp	r2, r3
 800fd22:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fd26:	fbb2 f6f3 	udiv	r6, r2, r3
 800fd2a:	d32e      	bcc.n	800fd8a <quorem+0x96>
 800fd2c:	f04f 0a00 	mov.w	sl, #0
 800fd30:	46c4      	mov	ip, r8
 800fd32:	46ae      	mov	lr, r5
 800fd34:	46d3      	mov	fp, sl
 800fd36:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fd3a:	b298      	uxth	r0, r3
 800fd3c:	fb06 a000 	mla	r0, r6, r0, sl
 800fd40:	0c02      	lsrs	r2, r0, #16
 800fd42:	0c1b      	lsrs	r3, r3, #16
 800fd44:	fb06 2303 	mla	r3, r6, r3, r2
 800fd48:	f8de 2000 	ldr.w	r2, [lr]
 800fd4c:	b280      	uxth	r0, r0
 800fd4e:	b292      	uxth	r2, r2
 800fd50:	1a12      	subs	r2, r2, r0
 800fd52:	445a      	add	r2, fp
 800fd54:	f8de 0000 	ldr.w	r0, [lr]
 800fd58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fd5c:	b29b      	uxth	r3, r3
 800fd5e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fd62:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fd66:	b292      	uxth	r2, r2
 800fd68:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fd6c:	45e1      	cmp	r9, ip
 800fd6e:	f84e 2b04 	str.w	r2, [lr], #4
 800fd72:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fd76:	d2de      	bcs.n	800fd36 <quorem+0x42>
 800fd78:	9b00      	ldr	r3, [sp, #0]
 800fd7a:	58eb      	ldr	r3, [r5, r3]
 800fd7c:	b92b      	cbnz	r3, 800fd8a <quorem+0x96>
 800fd7e:	9b01      	ldr	r3, [sp, #4]
 800fd80:	3b04      	subs	r3, #4
 800fd82:	429d      	cmp	r5, r3
 800fd84:	461a      	mov	r2, r3
 800fd86:	d32f      	bcc.n	800fde8 <quorem+0xf4>
 800fd88:	613c      	str	r4, [r7, #16]
 800fd8a:	4638      	mov	r0, r7
 800fd8c:	f001 fd10 	bl	80117b0 <__mcmp>
 800fd90:	2800      	cmp	r0, #0
 800fd92:	db25      	blt.n	800fde0 <quorem+0xec>
 800fd94:	4629      	mov	r1, r5
 800fd96:	2000      	movs	r0, #0
 800fd98:	f858 2b04 	ldr.w	r2, [r8], #4
 800fd9c:	f8d1 c000 	ldr.w	ip, [r1]
 800fda0:	fa1f fe82 	uxth.w	lr, r2
 800fda4:	fa1f f38c 	uxth.w	r3, ip
 800fda8:	eba3 030e 	sub.w	r3, r3, lr
 800fdac:	4403      	add	r3, r0
 800fdae:	0c12      	lsrs	r2, r2, #16
 800fdb0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fdb4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fdb8:	b29b      	uxth	r3, r3
 800fdba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fdbe:	45c1      	cmp	r9, r8
 800fdc0:	f841 3b04 	str.w	r3, [r1], #4
 800fdc4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fdc8:	d2e6      	bcs.n	800fd98 <quorem+0xa4>
 800fdca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fdce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fdd2:	b922      	cbnz	r2, 800fdde <quorem+0xea>
 800fdd4:	3b04      	subs	r3, #4
 800fdd6:	429d      	cmp	r5, r3
 800fdd8:	461a      	mov	r2, r3
 800fdda:	d30b      	bcc.n	800fdf4 <quorem+0x100>
 800fddc:	613c      	str	r4, [r7, #16]
 800fdde:	3601      	adds	r6, #1
 800fde0:	4630      	mov	r0, r6
 800fde2:	b003      	add	sp, #12
 800fde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fde8:	6812      	ldr	r2, [r2, #0]
 800fdea:	3b04      	subs	r3, #4
 800fdec:	2a00      	cmp	r2, #0
 800fdee:	d1cb      	bne.n	800fd88 <quorem+0x94>
 800fdf0:	3c01      	subs	r4, #1
 800fdf2:	e7c6      	b.n	800fd82 <quorem+0x8e>
 800fdf4:	6812      	ldr	r2, [r2, #0]
 800fdf6:	3b04      	subs	r3, #4
 800fdf8:	2a00      	cmp	r2, #0
 800fdfa:	d1ef      	bne.n	800fddc <quorem+0xe8>
 800fdfc:	3c01      	subs	r4, #1
 800fdfe:	e7ea      	b.n	800fdd6 <quorem+0xe2>
 800fe00:	2000      	movs	r0, #0
 800fe02:	e7ee      	b.n	800fde2 <quorem+0xee>
 800fe04:	0000      	movs	r0, r0
	...

0800fe08 <_dtoa_r>:
 800fe08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe0c:	69c7      	ldr	r7, [r0, #28]
 800fe0e:	b099      	sub	sp, #100	@ 0x64
 800fe10:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fe14:	ec55 4b10 	vmov	r4, r5, d0
 800fe18:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800fe1a:	9109      	str	r1, [sp, #36]	@ 0x24
 800fe1c:	4683      	mov	fp, r0
 800fe1e:	920e      	str	r2, [sp, #56]	@ 0x38
 800fe20:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fe22:	b97f      	cbnz	r7, 800fe44 <_dtoa_r+0x3c>
 800fe24:	2010      	movs	r0, #16
 800fe26:	f001 f937 	bl	8011098 <malloc>
 800fe2a:	4602      	mov	r2, r0
 800fe2c:	f8cb 001c 	str.w	r0, [fp, #28]
 800fe30:	b920      	cbnz	r0, 800fe3c <_dtoa_r+0x34>
 800fe32:	4ba7      	ldr	r3, [pc, #668]	@ (80100d0 <_dtoa_r+0x2c8>)
 800fe34:	21ef      	movs	r1, #239	@ 0xef
 800fe36:	48a7      	ldr	r0, [pc, #668]	@ (80100d4 <_dtoa_r+0x2cc>)
 800fe38:	f002 f95e 	bl	80120f8 <__assert_func>
 800fe3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fe40:	6007      	str	r7, [r0, #0]
 800fe42:	60c7      	str	r7, [r0, #12]
 800fe44:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fe48:	6819      	ldr	r1, [r3, #0]
 800fe4a:	b159      	cbz	r1, 800fe64 <_dtoa_r+0x5c>
 800fe4c:	685a      	ldr	r2, [r3, #4]
 800fe4e:	604a      	str	r2, [r1, #4]
 800fe50:	2301      	movs	r3, #1
 800fe52:	4093      	lsls	r3, r2
 800fe54:	608b      	str	r3, [r1, #8]
 800fe56:	4658      	mov	r0, fp
 800fe58:	f001 fa26 	bl	80112a8 <_Bfree>
 800fe5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fe60:	2200      	movs	r2, #0
 800fe62:	601a      	str	r2, [r3, #0]
 800fe64:	1e2b      	subs	r3, r5, #0
 800fe66:	bfb9      	ittee	lt
 800fe68:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fe6c:	9303      	strlt	r3, [sp, #12]
 800fe6e:	2300      	movge	r3, #0
 800fe70:	6033      	strge	r3, [r6, #0]
 800fe72:	9f03      	ldr	r7, [sp, #12]
 800fe74:	4b98      	ldr	r3, [pc, #608]	@ (80100d8 <_dtoa_r+0x2d0>)
 800fe76:	bfbc      	itt	lt
 800fe78:	2201      	movlt	r2, #1
 800fe7a:	6032      	strlt	r2, [r6, #0]
 800fe7c:	43bb      	bics	r3, r7
 800fe7e:	d112      	bne.n	800fea6 <_dtoa_r+0x9e>
 800fe80:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fe82:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fe86:	6013      	str	r3, [r2, #0]
 800fe88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fe8c:	4323      	orrs	r3, r4
 800fe8e:	f000 854d 	beq.w	801092c <_dtoa_r+0xb24>
 800fe92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fe94:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80100ec <_dtoa_r+0x2e4>
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	f000 854f 	beq.w	801093c <_dtoa_r+0xb34>
 800fe9e:	f10a 0303 	add.w	r3, sl, #3
 800fea2:	f000 bd49 	b.w	8010938 <_dtoa_r+0xb30>
 800fea6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800feaa:	2200      	movs	r2, #0
 800feac:	ec51 0b17 	vmov	r0, r1, d7
 800feb0:	2300      	movs	r3, #0
 800feb2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800feb6:	f7f0 fe2f 	bl	8000b18 <__aeabi_dcmpeq>
 800feba:	4680      	mov	r8, r0
 800febc:	b158      	cbz	r0, 800fed6 <_dtoa_r+0xce>
 800febe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fec0:	2301      	movs	r3, #1
 800fec2:	6013      	str	r3, [r2, #0]
 800fec4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fec6:	b113      	cbz	r3, 800fece <_dtoa_r+0xc6>
 800fec8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800feca:	4b84      	ldr	r3, [pc, #528]	@ (80100dc <_dtoa_r+0x2d4>)
 800fecc:	6013      	str	r3, [r2, #0]
 800fece:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80100f0 <_dtoa_r+0x2e8>
 800fed2:	f000 bd33 	b.w	801093c <_dtoa_r+0xb34>
 800fed6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800feda:	aa16      	add	r2, sp, #88	@ 0x58
 800fedc:	a917      	add	r1, sp, #92	@ 0x5c
 800fede:	4658      	mov	r0, fp
 800fee0:	f001 fd86 	bl	80119f0 <__d2b>
 800fee4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fee8:	4681      	mov	r9, r0
 800feea:	2e00      	cmp	r6, #0
 800feec:	d077      	beq.n	800ffde <_dtoa_r+0x1d6>
 800feee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fef0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800fef4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fef8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fefc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ff00:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ff04:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ff08:	4619      	mov	r1, r3
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	4b74      	ldr	r3, [pc, #464]	@ (80100e0 <_dtoa_r+0x2d8>)
 800ff0e:	f7f0 f9e3 	bl	80002d8 <__aeabi_dsub>
 800ff12:	a369      	add	r3, pc, #420	@ (adr r3, 80100b8 <_dtoa_r+0x2b0>)
 800ff14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff18:	f7f0 fb96 	bl	8000648 <__aeabi_dmul>
 800ff1c:	a368      	add	r3, pc, #416	@ (adr r3, 80100c0 <_dtoa_r+0x2b8>)
 800ff1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff22:	f7f0 f9db 	bl	80002dc <__adddf3>
 800ff26:	4604      	mov	r4, r0
 800ff28:	4630      	mov	r0, r6
 800ff2a:	460d      	mov	r5, r1
 800ff2c:	f7f0 fb22 	bl	8000574 <__aeabi_i2d>
 800ff30:	a365      	add	r3, pc, #404	@ (adr r3, 80100c8 <_dtoa_r+0x2c0>)
 800ff32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff36:	f7f0 fb87 	bl	8000648 <__aeabi_dmul>
 800ff3a:	4602      	mov	r2, r0
 800ff3c:	460b      	mov	r3, r1
 800ff3e:	4620      	mov	r0, r4
 800ff40:	4629      	mov	r1, r5
 800ff42:	f7f0 f9cb 	bl	80002dc <__adddf3>
 800ff46:	4604      	mov	r4, r0
 800ff48:	460d      	mov	r5, r1
 800ff4a:	f7f0 fe2d 	bl	8000ba8 <__aeabi_d2iz>
 800ff4e:	2200      	movs	r2, #0
 800ff50:	4607      	mov	r7, r0
 800ff52:	2300      	movs	r3, #0
 800ff54:	4620      	mov	r0, r4
 800ff56:	4629      	mov	r1, r5
 800ff58:	f7f0 fde8 	bl	8000b2c <__aeabi_dcmplt>
 800ff5c:	b140      	cbz	r0, 800ff70 <_dtoa_r+0x168>
 800ff5e:	4638      	mov	r0, r7
 800ff60:	f7f0 fb08 	bl	8000574 <__aeabi_i2d>
 800ff64:	4622      	mov	r2, r4
 800ff66:	462b      	mov	r3, r5
 800ff68:	f7f0 fdd6 	bl	8000b18 <__aeabi_dcmpeq>
 800ff6c:	b900      	cbnz	r0, 800ff70 <_dtoa_r+0x168>
 800ff6e:	3f01      	subs	r7, #1
 800ff70:	2f16      	cmp	r7, #22
 800ff72:	d851      	bhi.n	8010018 <_dtoa_r+0x210>
 800ff74:	4b5b      	ldr	r3, [pc, #364]	@ (80100e4 <_dtoa_r+0x2dc>)
 800ff76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ff7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ff82:	f7f0 fdd3 	bl	8000b2c <__aeabi_dcmplt>
 800ff86:	2800      	cmp	r0, #0
 800ff88:	d048      	beq.n	801001c <_dtoa_r+0x214>
 800ff8a:	3f01      	subs	r7, #1
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	9312      	str	r3, [sp, #72]	@ 0x48
 800ff90:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ff92:	1b9b      	subs	r3, r3, r6
 800ff94:	1e5a      	subs	r2, r3, #1
 800ff96:	bf44      	itt	mi
 800ff98:	f1c3 0801 	rsbmi	r8, r3, #1
 800ff9c:	2300      	movmi	r3, #0
 800ff9e:	9208      	str	r2, [sp, #32]
 800ffa0:	bf54      	ite	pl
 800ffa2:	f04f 0800 	movpl.w	r8, #0
 800ffa6:	9308      	strmi	r3, [sp, #32]
 800ffa8:	2f00      	cmp	r7, #0
 800ffaa:	db39      	blt.n	8010020 <_dtoa_r+0x218>
 800ffac:	9b08      	ldr	r3, [sp, #32]
 800ffae:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ffb0:	443b      	add	r3, r7
 800ffb2:	9308      	str	r3, [sp, #32]
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800ffb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffba:	2b09      	cmp	r3, #9
 800ffbc:	d864      	bhi.n	8010088 <_dtoa_r+0x280>
 800ffbe:	2b05      	cmp	r3, #5
 800ffc0:	bfc4      	itt	gt
 800ffc2:	3b04      	subgt	r3, #4
 800ffc4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ffc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffc8:	f1a3 0302 	sub.w	r3, r3, #2
 800ffcc:	bfcc      	ite	gt
 800ffce:	2400      	movgt	r4, #0
 800ffd0:	2401      	movle	r4, #1
 800ffd2:	2b03      	cmp	r3, #3
 800ffd4:	d863      	bhi.n	801009e <_dtoa_r+0x296>
 800ffd6:	e8df f003 	tbb	[pc, r3]
 800ffda:	372a      	.short	0x372a
 800ffdc:	5535      	.short	0x5535
 800ffde:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ffe2:	441e      	add	r6, r3
 800ffe4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ffe8:	2b20      	cmp	r3, #32
 800ffea:	bfc1      	itttt	gt
 800ffec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fff0:	409f      	lslgt	r7, r3
 800fff2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fff6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fffa:	bfd6      	itet	le
 800fffc:	f1c3 0320 	rsble	r3, r3, #32
 8010000:	ea47 0003 	orrgt.w	r0, r7, r3
 8010004:	fa04 f003 	lslle.w	r0, r4, r3
 8010008:	f7f0 faa4 	bl	8000554 <__aeabi_ui2d>
 801000c:	2201      	movs	r2, #1
 801000e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010012:	3e01      	subs	r6, #1
 8010014:	9214      	str	r2, [sp, #80]	@ 0x50
 8010016:	e777      	b.n	800ff08 <_dtoa_r+0x100>
 8010018:	2301      	movs	r3, #1
 801001a:	e7b8      	b.n	800ff8e <_dtoa_r+0x186>
 801001c:	9012      	str	r0, [sp, #72]	@ 0x48
 801001e:	e7b7      	b.n	800ff90 <_dtoa_r+0x188>
 8010020:	427b      	negs	r3, r7
 8010022:	930a      	str	r3, [sp, #40]	@ 0x28
 8010024:	2300      	movs	r3, #0
 8010026:	eba8 0807 	sub.w	r8, r8, r7
 801002a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801002c:	e7c4      	b.n	800ffb8 <_dtoa_r+0x1b0>
 801002e:	2300      	movs	r3, #0
 8010030:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010032:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010034:	2b00      	cmp	r3, #0
 8010036:	dc35      	bgt.n	80100a4 <_dtoa_r+0x29c>
 8010038:	2301      	movs	r3, #1
 801003a:	9300      	str	r3, [sp, #0]
 801003c:	9307      	str	r3, [sp, #28]
 801003e:	461a      	mov	r2, r3
 8010040:	920e      	str	r2, [sp, #56]	@ 0x38
 8010042:	e00b      	b.n	801005c <_dtoa_r+0x254>
 8010044:	2301      	movs	r3, #1
 8010046:	e7f3      	b.n	8010030 <_dtoa_r+0x228>
 8010048:	2300      	movs	r3, #0
 801004a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801004c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801004e:	18fb      	adds	r3, r7, r3
 8010050:	9300      	str	r3, [sp, #0]
 8010052:	3301      	adds	r3, #1
 8010054:	2b01      	cmp	r3, #1
 8010056:	9307      	str	r3, [sp, #28]
 8010058:	bfb8      	it	lt
 801005a:	2301      	movlt	r3, #1
 801005c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010060:	2100      	movs	r1, #0
 8010062:	2204      	movs	r2, #4
 8010064:	f102 0514 	add.w	r5, r2, #20
 8010068:	429d      	cmp	r5, r3
 801006a:	d91f      	bls.n	80100ac <_dtoa_r+0x2a4>
 801006c:	6041      	str	r1, [r0, #4]
 801006e:	4658      	mov	r0, fp
 8010070:	f001 f8da 	bl	8011228 <_Balloc>
 8010074:	4682      	mov	sl, r0
 8010076:	2800      	cmp	r0, #0
 8010078:	d13c      	bne.n	80100f4 <_dtoa_r+0x2ec>
 801007a:	4b1b      	ldr	r3, [pc, #108]	@ (80100e8 <_dtoa_r+0x2e0>)
 801007c:	4602      	mov	r2, r0
 801007e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010082:	e6d8      	b.n	800fe36 <_dtoa_r+0x2e>
 8010084:	2301      	movs	r3, #1
 8010086:	e7e0      	b.n	801004a <_dtoa_r+0x242>
 8010088:	2401      	movs	r4, #1
 801008a:	2300      	movs	r3, #0
 801008c:	9309      	str	r3, [sp, #36]	@ 0x24
 801008e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010090:	f04f 33ff 	mov.w	r3, #4294967295
 8010094:	9300      	str	r3, [sp, #0]
 8010096:	9307      	str	r3, [sp, #28]
 8010098:	2200      	movs	r2, #0
 801009a:	2312      	movs	r3, #18
 801009c:	e7d0      	b.n	8010040 <_dtoa_r+0x238>
 801009e:	2301      	movs	r3, #1
 80100a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80100a2:	e7f5      	b.n	8010090 <_dtoa_r+0x288>
 80100a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80100a6:	9300      	str	r3, [sp, #0]
 80100a8:	9307      	str	r3, [sp, #28]
 80100aa:	e7d7      	b.n	801005c <_dtoa_r+0x254>
 80100ac:	3101      	adds	r1, #1
 80100ae:	0052      	lsls	r2, r2, #1
 80100b0:	e7d8      	b.n	8010064 <_dtoa_r+0x25c>
 80100b2:	bf00      	nop
 80100b4:	f3af 8000 	nop.w
 80100b8:	636f4361 	.word	0x636f4361
 80100bc:	3fd287a7 	.word	0x3fd287a7
 80100c0:	8b60c8b3 	.word	0x8b60c8b3
 80100c4:	3fc68a28 	.word	0x3fc68a28
 80100c8:	509f79fb 	.word	0x509f79fb
 80100cc:	3fd34413 	.word	0x3fd34413
 80100d0:	08013766 	.word	0x08013766
 80100d4:	0801377d 	.word	0x0801377d
 80100d8:	7ff00000 	.word	0x7ff00000
 80100dc:	08013729 	.word	0x08013729
 80100e0:	3ff80000 	.word	0x3ff80000
 80100e4:	080138d8 	.word	0x080138d8
 80100e8:	080137d5 	.word	0x080137d5
 80100ec:	08013762 	.word	0x08013762
 80100f0:	08013728 	.word	0x08013728
 80100f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80100f8:	6018      	str	r0, [r3, #0]
 80100fa:	9b07      	ldr	r3, [sp, #28]
 80100fc:	2b0e      	cmp	r3, #14
 80100fe:	f200 80a4 	bhi.w	801024a <_dtoa_r+0x442>
 8010102:	2c00      	cmp	r4, #0
 8010104:	f000 80a1 	beq.w	801024a <_dtoa_r+0x442>
 8010108:	2f00      	cmp	r7, #0
 801010a:	dd33      	ble.n	8010174 <_dtoa_r+0x36c>
 801010c:	4bad      	ldr	r3, [pc, #692]	@ (80103c4 <_dtoa_r+0x5bc>)
 801010e:	f007 020f 	and.w	r2, r7, #15
 8010112:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010116:	ed93 7b00 	vldr	d7, [r3]
 801011a:	05f8      	lsls	r0, r7, #23
 801011c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010120:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010124:	d516      	bpl.n	8010154 <_dtoa_r+0x34c>
 8010126:	4ba8      	ldr	r3, [pc, #672]	@ (80103c8 <_dtoa_r+0x5c0>)
 8010128:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801012c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010130:	f7f0 fbb4 	bl	800089c <__aeabi_ddiv>
 8010134:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010138:	f004 040f 	and.w	r4, r4, #15
 801013c:	2603      	movs	r6, #3
 801013e:	4da2      	ldr	r5, [pc, #648]	@ (80103c8 <_dtoa_r+0x5c0>)
 8010140:	b954      	cbnz	r4, 8010158 <_dtoa_r+0x350>
 8010142:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010146:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801014a:	f7f0 fba7 	bl	800089c <__aeabi_ddiv>
 801014e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010152:	e028      	b.n	80101a6 <_dtoa_r+0x39e>
 8010154:	2602      	movs	r6, #2
 8010156:	e7f2      	b.n	801013e <_dtoa_r+0x336>
 8010158:	07e1      	lsls	r1, r4, #31
 801015a:	d508      	bpl.n	801016e <_dtoa_r+0x366>
 801015c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010160:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010164:	f7f0 fa70 	bl	8000648 <__aeabi_dmul>
 8010168:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801016c:	3601      	adds	r6, #1
 801016e:	1064      	asrs	r4, r4, #1
 8010170:	3508      	adds	r5, #8
 8010172:	e7e5      	b.n	8010140 <_dtoa_r+0x338>
 8010174:	f000 80d2 	beq.w	801031c <_dtoa_r+0x514>
 8010178:	427c      	negs	r4, r7
 801017a:	4b92      	ldr	r3, [pc, #584]	@ (80103c4 <_dtoa_r+0x5bc>)
 801017c:	4d92      	ldr	r5, [pc, #584]	@ (80103c8 <_dtoa_r+0x5c0>)
 801017e:	f004 020f 	and.w	r2, r4, #15
 8010182:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801018a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801018e:	f7f0 fa5b 	bl	8000648 <__aeabi_dmul>
 8010192:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010196:	1124      	asrs	r4, r4, #4
 8010198:	2300      	movs	r3, #0
 801019a:	2602      	movs	r6, #2
 801019c:	2c00      	cmp	r4, #0
 801019e:	f040 80b2 	bne.w	8010306 <_dtoa_r+0x4fe>
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d1d3      	bne.n	801014e <_dtoa_r+0x346>
 80101a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80101a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	f000 80b7 	beq.w	8010320 <_dtoa_r+0x518>
 80101b2:	4b86      	ldr	r3, [pc, #536]	@ (80103cc <_dtoa_r+0x5c4>)
 80101b4:	2200      	movs	r2, #0
 80101b6:	4620      	mov	r0, r4
 80101b8:	4629      	mov	r1, r5
 80101ba:	f7f0 fcb7 	bl	8000b2c <__aeabi_dcmplt>
 80101be:	2800      	cmp	r0, #0
 80101c0:	f000 80ae 	beq.w	8010320 <_dtoa_r+0x518>
 80101c4:	9b07      	ldr	r3, [sp, #28]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	f000 80aa 	beq.w	8010320 <_dtoa_r+0x518>
 80101cc:	9b00      	ldr	r3, [sp, #0]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	dd37      	ble.n	8010242 <_dtoa_r+0x43a>
 80101d2:	1e7b      	subs	r3, r7, #1
 80101d4:	9304      	str	r3, [sp, #16]
 80101d6:	4620      	mov	r0, r4
 80101d8:	4b7d      	ldr	r3, [pc, #500]	@ (80103d0 <_dtoa_r+0x5c8>)
 80101da:	2200      	movs	r2, #0
 80101dc:	4629      	mov	r1, r5
 80101de:	f7f0 fa33 	bl	8000648 <__aeabi_dmul>
 80101e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101e6:	9c00      	ldr	r4, [sp, #0]
 80101e8:	3601      	adds	r6, #1
 80101ea:	4630      	mov	r0, r6
 80101ec:	f7f0 f9c2 	bl	8000574 <__aeabi_i2d>
 80101f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80101f4:	f7f0 fa28 	bl	8000648 <__aeabi_dmul>
 80101f8:	4b76      	ldr	r3, [pc, #472]	@ (80103d4 <_dtoa_r+0x5cc>)
 80101fa:	2200      	movs	r2, #0
 80101fc:	f7f0 f86e 	bl	80002dc <__adddf3>
 8010200:	4605      	mov	r5, r0
 8010202:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010206:	2c00      	cmp	r4, #0
 8010208:	f040 808d 	bne.w	8010326 <_dtoa_r+0x51e>
 801020c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010210:	4b71      	ldr	r3, [pc, #452]	@ (80103d8 <_dtoa_r+0x5d0>)
 8010212:	2200      	movs	r2, #0
 8010214:	f7f0 f860 	bl	80002d8 <__aeabi_dsub>
 8010218:	4602      	mov	r2, r0
 801021a:	460b      	mov	r3, r1
 801021c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010220:	462a      	mov	r2, r5
 8010222:	4633      	mov	r3, r6
 8010224:	f7f0 fca0 	bl	8000b68 <__aeabi_dcmpgt>
 8010228:	2800      	cmp	r0, #0
 801022a:	f040 828b 	bne.w	8010744 <_dtoa_r+0x93c>
 801022e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010232:	462a      	mov	r2, r5
 8010234:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010238:	f7f0 fc78 	bl	8000b2c <__aeabi_dcmplt>
 801023c:	2800      	cmp	r0, #0
 801023e:	f040 8128 	bne.w	8010492 <_dtoa_r+0x68a>
 8010242:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010246:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801024a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801024c:	2b00      	cmp	r3, #0
 801024e:	f2c0 815a 	blt.w	8010506 <_dtoa_r+0x6fe>
 8010252:	2f0e      	cmp	r7, #14
 8010254:	f300 8157 	bgt.w	8010506 <_dtoa_r+0x6fe>
 8010258:	4b5a      	ldr	r3, [pc, #360]	@ (80103c4 <_dtoa_r+0x5bc>)
 801025a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801025e:	ed93 7b00 	vldr	d7, [r3]
 8010262:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010264:	2b00      	cmp	r3, #0
 8010266:	ed8d 7b00 	vstr	d7, [sp]
 801026a:	da03      	bge.n	8010274 <_dtoa_r+0x46c>
 801026c:	9b07      	ldr	r3, [sp, #28]
 801026e:	2b00      	cmp	r3, #0
 8010270:	f340 8101 	ble.w	8010476 <_dtoa_r+0x66e>
 8010274:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010278:	4656      	mov	r6, sl
 801027a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801027e:	4620      	mov	r0, r4
 8010280:	4629      	mov	r1, r5
 8010282:	f7f0 fb0b 	bl	800089c <__aeabi_ddiv>
 8010286:	f7f0 fc8f 	bl	8000ba8 <__aeabi_d2iz>
 801028a:	4680      	mov	r8, r0
 801028c:	f7f0 f972 	bl	8000574 <__aeabi_i2d>
 8010290:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010294:	f7f0 f9d8 	bl	8000648 <__aeabi_dmul>
 8010298:	4602      	mov	r2, r0
 801029a:	460b      	mov	r3, r1
 801029c:	4620      	mov	r0, r4
 801029e:	4629      	mov	r1, r5
 80102a0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80102a4:	f7f0 f818 	bl	80002d8 <__aeabi_dsub>
 80102a8:	f806 4b01 	strb.w	r4, [r6], #1
 80102ac:	9d07      	ldr	r5, [sp, #28]
 80102ae:	eba6 040a 	sub.w	r4, r6, sl
 80102b2:	42a5      	cmp	r5, r4
 80102b4:	4602      	mov	r2, r0
 80102b6:	460b      	mov	r3, r1
 80102b8:	f040 8117 	bne.w	80104ea <_dtoa_r+0x6e2>
 80102bc:	f7f0 f80e 	bl	80002dc <__adddf3>
 80102c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80102c4:	4604      	mov	r4, r0
 80102c6:	460d      	mov	r5, r1
 80102c8:	f7f0 fc4e 	bl	8000b68 <__aeabi_dcmpgt>
 80102cc:	2800      	cmp	r0, #0
 80102ce:	f040 80f9 	bne.w	80104c4 <_dtoa_r+0x6bc>
 80102d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80102d6:	4620      	mov	r0, r4
 80102d8:	4629      	mov	r1, r5
 80102da:	f7f0 fc1d 	bl	8000b18 <__aeabi_dcmpeq>
 80102de:	b118      	cbz	r0, 80102e8 <_dtoa_r+0x4e0>
 80102e0:	f018 0f01 	tst.w	r8, #1
 80102e4:	f040 80ee 	bne.w	80104c4 <_dtoa_r+0x6bc>
 80102e8:	4649      	mov	r1, r9
 80102ea:	4658      	mov	r0, fp
 80102ec:	f000 ffdc 	bl	80112a8 <_Bfree>
 80102f0:	2300      	movs	r3, #0
 80102f2:	7033      	strb	r3, [r6, #0]
 80102f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80102f6:	3701      	adds	r7, #1
 80102f8:	601f      	str	r7, [r3, #0]
 80102fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	f000 831d 	beq.w	801093c <_dtoa_r+0xb34>
 8010302:	601e      	str	r6, [r3, #0]
 8010304:	e31a      	b.n	801093c <_dtoa_r+0xb34>
 8010306:	07e2      	lsls	r2, r4, #31
 8010308:	d505      	bpl.n	8010316 <_dtoa_r+0x50e>
 801030a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801030e:	f7f0 f99b 	bl	8000648 <__aeabi_dmul>
 8010312:	3601      	adds	r6, #1
 8010314:	2301      	movs	r3, #1
 8010316:	1064      	asrs	r4, r4, #1
 8010318:	3508      	adds	r5, #8
 801031a:	e73f      	b.n	801019c <_dtoa_r+0x394>
 801031c:	2602      	movs	r6, #2
 801031e:	e742      	b.n	80101a6 <_dtoa_r+0x39e>
 8010320:	9c07      	ldr	r4, [sp, #28]
 8010322:	9704      	str	r7, [sp, #16]
 8010324:	e761      	b.n	80101ea <_dtoa_r+0x3e2>
 8010326:	4b27      	ldr	r3, [pc, #156]	@ (80103c4 <_dtoa_r+0x5bc>)
 8010328:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801032a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801032e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010332:	4454      	add	r4, sl
 8010334:	2900      	cmp	r1, #0
 8010336:	d053      	beq.n	80103e0 <_dtoa_r+0x5d8>
 8010338:	4928      	ldr	r1, [pc, #160]	@ (80103dc <_dtoa_r+0x5d4>)
 801033a:	2000      	movs	r0, #0
 801033c:	f7f0 faae 	bl	800089c <__aeabi_ddiv>
 8010340:	4633      	mov	r3, r6
 8010342:	462a      	mov	r2, r5
 8010344:	f7ef ffc8 	bl	80002d8 <__aeabi_dsub>
 8010348:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801034c:	4656      	mov	r6, sl
 801034e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010352:	f7f0 fc29 	bl	8000ba8 <__aeabi_d2iz>
 8010356:	4605      	mov	r5, r0
 8010358:	f7f0 f90c 	bl	8000574 <__aeabi_i2d>
 801035c:	4602      	mov	r2, r0
 801035e:	460b      	mov	r3, r1
 8010360:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010364:	f7ef ffb8 	bl	80002d8 <__aeabi_dsub>
 8010368:	3530      	adds	r5, #48	@ 0x30
 801036a:	4602      	mov	r2, r0
 801036c:	460b      	mov	r3, r1
 801036e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010372:	f806 5b01 	strb.w	r5, [r6], #1
 8010376:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801037a:	f7f0 fbd7 	bl	8000b2c <__aeabi_dcmplt>
 801037e:	2800      	cmp	r0, #0
 8010380:	d171      	bne.n	8010466 <_dtoa_r+0x65e>
 8010382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010386:	4911      	ldr	r1, [pc, #68]	@ (80103cc <_dtoa_r+0x5c4>)
 8010388:	2000      	movs	r0, #0
 801038a:	f7ef ffa5 	bl	80002d8 <__aeabi_dsub>
 801038e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010392:	f7f0 fbcb 	bl	8000b2c <__aeabi_dcmplt>
 8010396:	2800      	cmp	r0, #0
 8010398:	f040 8095 	bne.w	80104c6 <_dtoa_r+0x6be>
 801039c:	42a6      	cmp	r6, r4
 801039e:	f43f af50 	beq.w	8010242 <_dtoa_r+0x43a>
 80103a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80103a6:	4b0a      	ldr	r3, [pc, #40]	@ (80103d0 <_dtoa_r+0x5c8>)
 80103a8:	2200      	movs	r2, #0
 80103aa:	f7f0 f94d 	bl	8000648 <__aeabi_dmul>
 80103ae:	4b08      	ldr	r3, [pc, #32]	@ (80103d0 <_dtoa_r+0x5c8>)
 80103b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80103b4:	2200      	movs	r2, #0
 80103b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80103ba:	f7f0 f945 	bl	8000648 <__aeabi_dmul>
 80103be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80103c2:	e7c4      	b.n	801034e <_dtoa_r+0x546>
 80103c4:	080138d8 	.word	0x080138d8
 80103c8:	080138b0 	.word	0x080138b0
 80103cc:	3ff00000 	.word	0x3ff00000
 80103d0:	40240000 	.word	0x40240000
 80103d4:	401c0000 	.word	0x401c0000
 80103d8:	40140000 	.word	0x40140000
 80103dc:	3fe00000 	.word	0x3fe00000
 80103e0:	4631      	mov	r1, r6
 80103e2:	4628      	mov	r0, r5
 80103e4:	f7f0 f930 	bl	8000648 <__aeabi_dmul>
 80103e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80103ec:	9415      	str	r4, [sp, #84]	@ 0x54
 80103ee:	4656      	mov	r6, sl
 80103f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80103f4:	f7f0 fbd8 	bl	8000ba8 <__aeabi_d2iz>
 80103f8:	4605      	mov	r5, r0
 80103fa:	f7f0 f8bb 	bl	8000574 <__aeabi_i2d>
 80103fe:	4602      	mov	r2, r0
 8010400:	460b      	mov	r3, r1
 8010402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010406:	f7ef ff67 	bl	80002d8 <__aeabi_dsub>
 801040a:	3530      	adds	r5, #48	@ 0x30
 801040c:	f806 5b01 	strb.w	r5, [r6], #1
 8010410:	4602      	mov	r2, r0
 8010412:	460b      	mov	r3, r1
 8010414:	42a6      	cmp	r6, r4
 8010416:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801041a:	f04f 0200 	mov.w	r2, #0
 801041e:	d124      	bne.n	801046a <_dtoa_r+0x662>
 8010420:	4bac      	ldr	r3, [pc, #688]	@ (80106d4 <_dtoa_r+0x8cc>)
 8010422:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010426:	f7ef ff59 	bl	80002dc <__adddf3>
 801042a:	4602      	mov	r2, r0
 801042c:	460b      	mov	r3, r1
 801042e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010432:	f7f0 fb99 	bl	8000b68 <__aeabi_dcmpgt>
 8010436:	2800      	cmp	r0, #0
 8010438:	d145      	bne.n	80104c6 <_dtoa_r+0x6be>
 801043a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801043e:	49a5      	ldr	r1, [pc, #660]	@ (80106d4 <_dtoa_r+0x8cc>)
 8010440:	2000      	movs	r0, #0
 8010442:	f7ef ff49 	bl	80002d8 <__aeabi_dsub>
 8010446:	4602      	mov	r2, r0
 8010448:	460b      	mov	r3, r1
 801044a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801044e:	f7f0 fb6d 	bl	8000b2c <__aeabi_dcmplt>
 8010452:	2800      	cmp	r0, #0
 8010454:	f43f aef5 	beq.w	8010242 <_dtoa_r+0x43a>
 8010458:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801045a:	1e73      	subs	r3, r6, #1
 801045c:	9315      	str	r3, [sp, #84]	@ 0x54
 801045e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010462:	2b30      	cmp	r3, #48	@ 0x30
 8010464:	d0f8      	beq.n	8010458 <_dtoa_r+0x650>
 8010466:	9f04      	ldr	r7, [sp, #16]
 8010468:	e73e      	b.n	80102e8 <_dtoa_r+0x4e0>
 801046a:	4b9b      	ldr	r3, [pc, #620]	@ (80106d8 <_dtoa_r+0x8d0>)
 801046c:	f7f0 f8ec 	bl	8000648 <__aeabi_dmul>
 8010470:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010474:	e7bc      	b.n	80103f0 <_dtoa_r+0x5e8>
 8010476:	d10c      	bne.n	8010492 <_dtoa_r+0x68a>
 8010478:	4b98      	ldr	r3, [pc, #608]	@ (80106dc <_dtoa_r+0x8d4>)
 801047a:	2200      	movs	r2, #0
 801047c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010480:	f7f0 f8e2 	bl	8000648 <__aeabi_dmul>
 8010484:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010488:	f7f0 fb64 	bl	8000b54 <__aeabi_dcmpge>
 801048c:	2800      	cmp	r0, #0
 801048e:	f000 8157 	beq.w	8010740 <_dtoa_r+0x938>
 8010492:	2400      	movs	r4, #0
 8010494:	4625      	mov	r5, r4
 8010496:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010498:	43db      	mvns	r3, r3
 801049a:	9304      	str	r3, [sp, #16]
 801049c:	4656      	mov	r6, sl
 801049e:	2700      	movs	r7, #0
 80104a0:	4621      	mov	r1, r4
 80104a2:	4658      	mov	r0, fp
 80104a4:	f000 ff00 	bl	80112a8 <_Bfree>
 80104a8:	2d00      	cmp	r5, #0
 80104aa:	d0dc      	beq.n	8010466 <_dtoa_r+0x65e>
 80104ac:	b12f      	cbz	r7, 80104ba <_dtoa_r+0x6b2>
 80104ae:	42af      	cmp	r7, r5
 80104b0:	d003      	beq.n	80104ba <_dtoa_r+0x6b2>
 80104b2:	4639      	mov	r1, r7
 80104b4:	4658      	mov	r0, fp
 80104b6:	f000 fef7 	bl	80112a8 <_Bfree>
 80104ba:	4629      	mov	r1, r5
 80104bc:	4658      	mov	r0, fp
 80104be:	f000 fef3 	bl	80112a8 <_Bfree>
 80104c2:	e7d0      	b.n	8010466 <_dtoa_r+0x65e>
 80104c4:	9704      	str	r7, [sp, #16]
 80104c6:	4633      	mov	r3, r6
 80104c8:	461e      	mov	r6, r3
 80104ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80104ce:	2a39      	cmp	r2, #57	@ 0x39
 80104d0:	d107      	bne.n	80104e2 <_dtoa_r+0x6da>
 80104d2:	459a      	cmp	sl, r3
 80104d4:	d1f8      	bne.n	80104c8 <_dtoa_r+0x6c0>
 80104d6:	9a04      	ldr	r2, [sp, #16]
 80104d8:	3201      	adds	r2, #1
 80104da:	9204      	str	r2, [sp, #16]
 80104dc:	2230      	movs	r2, #48	@ 0x30
 80104de:	f88a 2000 	strb.w	r2, [sl]
 80104e2:	781a      	ldrb	r2, [r3, #0]
 80104e4:	3201      	adds	r2, #1
 80104e6:	701a      	strb	r2, [r3, #0]
 80104e8:	e7bd      	b.n	8010466 <_dtoa_r+0x65e>
 80104ea:	4b7b      	ldr	r3, [pc, #492]	@ (80106d8 <_dtoa_r+0x8d0>)
 80104ec:	2200      	movs	r2, #0
 80104ee:	f7f0 f8ab 	bl	8000648 <__aeabi_dmul>
 80104f2:	2200      	movs	r2, #0
 80104f4:	2300      	movs	r3, #0
 80104f6:	4604      	mov	r4, r0
 80104f8:	460d      	mov	r5, r1
 80104fa:	f7f0 fb0d 	bl	8000b18 <__aeabi_dcmpeq>
 80104fe:	2800      	cmp	r0, #0
 8010500:	f43f aebb 	beq.w	801027a <_dtoa_r+0x472>
 8010504:	e6f0      	b.n	80102e8 <_dtoa_r+0x4e0>
 8010506:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010508:	2a00      	cmp	r2, #0
 801050a:	f000 80db 	beq.w	80106c4 <_dtoa_r+0x8bc>
 801050e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010510:	2a01      	cmp	r2, #1
 8010512:	f300 80bf 	bgt.w	8010694 <_dtoa_r+0x88c>
 8010516:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010518:	2a00      	cmp	r2, #0
 801051a:	f000 80b7 	beq.w	801068c <_dtoa_r+0x884>
 801051e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010522:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010524:	4646      	mov	r6, r8
 8010526:	9a08      	ldr	r2, [sp, #32]
 8010528:	2101      	movs	r1, #1
 801052a:	441a      	add	r2, r3
 801052c:	4658      	mov	r0, fp
 801052e:	4498      	add	r8, r3
 8010530:	9208      	str	r2, [sp, #32]
 8010532:	f000 ffb7 	bl	80114a4 <__i2b>
 8010536:	4605      	mov	r5, r0
 8010538:	b15e      	cbz	r6, 8010552 <_dtoa_r+0x74a>
 801053a:	9b08      	ldr	r3, [sp, #32]
 801053c:	2b00      	cmp	r3, #0
 801053e:	dd08      	ble.n	8010552 <_dtoa_r+0x74a>
 8010540:	42b3      	cmp	r3, r6
 8010542:	9a08      	ldr	r2, [sp, #32]
 8010544:	bfa8      	it	ge
 8010546:	4633      	movge	r3, r6
 8010548:	eba8 0803 	sub.w	r8, r8, r3
 801054c:	1af6      	subs	r6, r6, r3
 801054e:	1ad3      	subs	r3, r2, r3
 8010550:	9308      	str	r3, [sp, #32]
 8010552:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010554:	b1f3      	cbz	r3, 8010594 <_dtoa_r+0x78c>
 8010556:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010558:	2b00      	cmp	r3, #0
 801055a:	f000 80b7 	beq.w	80106cc <_dtoa_r+0x8c4>
 801055e:	b18c      	cbz	r4, 8010584 <_dtoa_r+0x77c>
 8010560:	4629      	mov	r1, r5
 8010562:	4622      	mov	r2, r4
 8010564:	4658      	mov	r0, fp
 8010566:	f001 f85d 	bl	8011624 <__pow5mult>
 801056a:	464a      	mov	r2, r9
 801056c:	4601      	mov	r1, r0
 801056e:	4605      	mov	r5, r0
 8010570:	4658      	mov	r0, fp
 8010572:	f000 ffad 	bl	80114d0 <__multiply>
 8010576:	4649      	mov	r1, r9
 8010578:	9004      	str	r0, [sp, #16]
 801057a:	4658      	mov	r0, fp
 801057c:	f000 fe94 	bl	80112a8 <_Bfree>
 8010580:	9b04      	ldr	r3, [sp, #16]
 8010582:	4699      	mov	r9, r3
 8010584:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010586:	1b1a      	subs	r2, r3, r4
 8010588:	d004      	beq.n	8010594 <_dtoa_r+0x78c>
 801058a:	4649      	mov	r1, r9
 801058c:	4658      	mov	r0, fp
 801058e:	f001 f849 	bl	8011624 <__pow5mult>
 8010592:	4681      	mov	r9, r0
 8010594:	2101      	movs	r1, #1
 8010596:	4658      	mov	r0, fp
 8010598:	f000 ff84 	bl	80114a4 <__i2b>
 801059c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801059e:	4604      	mov	r4, r0
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	f000 81cf 	beq.w	8010944 <_dtoa_r+0xb3c>
 80105a6:	461a      	mov	r2, r3
 80105a8:	4601      	mov	r1, r0
 80105aa:	4658      	mov	r0, fp
 80105ac:	f001 f83a 	bl	8011624 <__pow5mult>
 80105b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105b2:	2b01      	cmp	r3, #1
 80105b4:	4604      	mov	r4, r0
 80105b6:	f300 8095 	bgt.w	80106e4 <_dtoa_r+0x8dc>
 80105ba:	9b02      	ldr	r3, [sp, #8]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	f040 8087 	bne.w	80106d0 <_dtoa_r+0x8c8>
 80105c2:	9b03      	ldr	r3, [sp, #12]
 80105c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	f040 8089 	bne.w	80106e0 <_dtoa_r+0x8d8>
 80105ce:	9b03      	ldr	r3, [sp, #12]
 80105d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80105d4:	0d1b      	lsrs	r3, r3, #20
 80105d6:	051b      	lsls	r3, r3, #20
 80105d8:	b12b      	cbz	r3, 80105e6 <_dtoa_r+0x7de>
 80105da:	9b08      	ldr	r3, [sp, #32]
 80105dc:	3301      	adds	r3, #1
 80105de:	9308      	str	r3, [sp, #32]
 80105e0:	f108 0801 	add.w	r8, r8, #1
 80105e4:	2301      	movs	r3, #1
 80105e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80105e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	f000 81b0 	beq.w	8010950 <_dtoa_r+0xb48>
 80105f0:	6923      	ldr	r3, [r4, #16]
 80105f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80105f6:	6918      	ldr	r0, [r3, #16]
 80105f8:	f000 ff08 	bl	801140c <__hi0bits>
 80105fc:	f1c0 0020 	rsb	r0, r0, #32
 8010600:	9b08      	ldr	r3, [sp, #32]
 8010602:	4418      	add	r0, r3
 8010604:	f010 001f 	ands.w	r0, r0, #31
 8010608:	d077      	beq.n	80106fa <_dtoa_r+0x8f2>
 801060a:	f1c0 0320 	rsb	r3, r0, #32
 801060e:	2b04      	cmp	r3, #4
 8010610:	dd6b      	ble.n	80106ea <_dtoa_r+0x8e2>
 8010612:	9b08      	ldr	r3, [sp, #32]
 8010614:	f1c0 001c 	rsb	r0, r0, #28
 8010618:	4403      	add	r3, r0
 801061a:	4480      	add	r8, r0
 801061c:	4406      	add	r6, r0
 801061e:	9308      	str	r3, [sp, #32]
 8010620:	f1b8 0f00 	cmp.w	r8, #0
 8010624:	dd05      	ble.n	8010632 <_dtoa_r+0x82a>
 8010626:	4649      	mov	r1, r9
 8010628:	4642      	mov	r2, r8
 801062a:	4658      	mov	r0, fp
 801062c:	f001 f854 	bl	80116d8 <__lshift>
 8010630:	4681      	mov	r9, r0
 8010632:	9b08      	ldr	r3, [sp, #32]
 8010634:	2b00      	cmp	r3, #0
 8010636:	dd05      	ble.n	8010644 <_dtoa_r+0x83c>
 8010638:	4621      	mov	r1, r4
 801063a:	461a      	mov	r2, r3
 801063c:	4658      	mov	r0, fp
 801063e:	f001 f84b 	bl	80116d8 <__lshift>
 8010642:	4604      	mov	r4, r0
 8010644:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010646:	2b00      	cmp	r3, #0
 8010648:	d059      	beq.n	80106fe <_dtoa_r+0x8f6>
 801064a:	4621      	mov	r1, r4
 801064c:	4648      	mov	r0, r9
 801064e:	f001 f8af 	bl	80117b0 <__mcmp>
 8010652:	2800      	cmp	r0, #0
 8010654:	da53      	bge.n	80106fe <_dtoa_r+0x8f6>
 8010656:	1e7b      	subs	r3, r7, #1
 8010658:	9304      	str	r3, [sp, #16]
 801065a:	4649      	mov	r1, r9
 801065c:	2300      	movs	r3, #0
 801065e:	220a      	movs	r2, #10
 8010660:	4658      	mov	r0, fp
 8010662:	f000 fe43 	bl	80112ec <__multadd>
 8010666:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010668:	4681      	mov	r9, r0
 801066a:	2b00      	cmp	r3, #0
 801066c:	f000 8172 	beq.w	8010954 <_dtoa_r+0xb4c>
 8010670:	2300      	movs	r3, #0
 8010672:	4629      	mov	r1, r5
 8010674:	220a      	movs	r2, #10
 8010676:	4658      	mov	r0, fp
 8010678:	f000 fe38 	bl	80112ec <__multadd>
 801067c:	9b00      	ldr	r3, [sp, #0]
 801067e:	2b00      	cmp	r3, #0
 8010680:	4605      	mov	r5, r0
 8010682:	dc67      	bgt.n	8010754 <_dtoa_r+0x94c>
 8010684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010686:	2b02      	cmp	r3, #2
 8010688:	dc41      	bgt.n	801070e <_dtoa_r+0x906>
 801068a:	e063      	b.n	8010754 <_dtoa_r+0x94c>
 801068c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801068e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010692:	e746      	b.n	8010522 <_dtoa_r+0x71a>
 8010694:	9b07      	ldr	r3, [sp, #28]
 8010696:	1e5c      	subs	r4, r3, #1
 8010698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801069a:	42a3      	cmp	r3, r4
 801069c:	bfbf      	itttt	lt
 801069e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80106a0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80106a2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80106a4:	1ae3      	sublt	r3, r4, r3
 80106a6:	bfb4      	ite	lt
 80106a8:	18d2      	addlt	r2, r2, r3
 80106aa:	1b1c      	subge	r4, r3, r4
 80106ac:	9b07      	ldr	r3, [sp, #28]
 80106ae:	bfbc      	itt	lt
 80106b0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80106b2:	2400      	movlt	r4, #0
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	bfb5      	itete	lt
 80106b8:	eba8 0603 	sublt.w	r6, r8, r3
 80106bc:	9b07      	ldrge	r3, [sp, #28]
 80106be:	2300      	movlt	r3, #0
 80106c0:	4646      	movge	r6, r8
 80106c2:	e730      	b.n	8010526 <_dtoa_r+0x71e>
 80106c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80106c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80106c8:	4646      	mov	r6, r8
 80106ca:	e735      	b.n	8010538 <_dtoa_r+0x730>
 80106cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80106ce:	e75c      	b.n	801058a <_dtoa_r+0x782>
 80106d0:	2300      	movs	r3, #0
 80106d2:	e788      	b.n	80105e6 <_dtoa_r+0x7de>
 80106d4:	3fe00000 	.word	0x3fe00000
 80106d8:	40240000 	.word	0x40240000
 80106dc:	40140000 	.word	0x40140000
 80106e0:	9b02      	ldr	r3, [sp, #8]
 80106e2:	e780      	b.n	80105e6 <_dtoa_r+0x7de>
 80106e4:	2300      	movs	r3, #0
 80106e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80106e8:	e782      	b.n	80105f0 <_dtoa_r+0x7e8>
 80106ea:	d099      	beq.n	8010620 <_dtoa_r+0x818>
 80106ec:	9a08      	ldr	r2, [sp, #32]
 80106ee:	331c      	adds	r3, #28
 80106f0:	441a      	add	r2, r3
 80106f2:	4498      	add	r8, r3
 80106f4:	441e      	add	r6, r3
 80106f6:	9208      	str	r2, [sp, #32]
 80106f8:	e792      	b.n	8010620 <_dtoa_r+0x818>
 80106fa:	4603      	mov	r3, r0
 80106fc:	e7f6      	b.n	80106ec <_dtoa_r+0x8e4>
 80106fe:	9b07      	ldr	r3, [sp, #28]
 8010700:	9704      	str	r7, [sp, #16]
 8010702:	2b00      	cmp	r3, #0
 8010704:	dc20      	bgt.n	8010748 <_dtoa_r+0x940>
 8010706:	9300      	str	r3, [sp, #0]
 8010708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801070a:	2b02      	cmp	r3, #2
 801070c:	dd1e      	ble.n	801074c <_dtoa_r+0x944>
 801070e:	9b00      	ldr	r3, [sp, #0]
 8010710:	2b00      	cmp	r3, #0
 8010712:	f47f aec0 	bne.w	8010496 <_dtoa_r+0x68e>
 8010716:	4621      	mov	r1, r4
 8010718:	2205      	movs	r2, #5
 801071a:	4658      	mov	r0, fp
 801071c:	f000 fde6 	bl	80112ec <__multadd>
 8010720:	4601      	mov	r1, r0
 8010722:	4604      	mov	r4, r0
 8010724:	4648      	mov	r0, r9
 8010726:	f001 f843 	bl	80117b0 <__mcmp>
 801072a:	2800      	cmp	r0, #0
 801072c:	f77f aeb3 	ble.w	8010496 <_dtoa_r+0x68e>
 8010730:	4656      	mov	r6, sl
 8010732:	2331      	movs	r3, #49	@ 0x31
 8010734:	f806 3b01 	strb.w	r3, [r6], #1
 8010738:	9b04      	ldr	r3, [sp, #16]
 801073a:	3301      	adds	r3, #1
 801073c:	9304      	str	r3, [sp, #16]
 801073e:	e6ae      	b.n	801049e <_dtoa_r+0x696>
 8010740:	9c07      	ldr	r4, [sp, #28]
 8010742:	9704      	str	r7, [sp, #16]
 8010744:	4625      	mov	r5, r4
 8010746:	e7f3      	b.n	8010730 <_dtoa_r+0x928>
 8010748:	9b07      	ldr	r3, [sp, #28]
 801074a:	9300      	str	r3, [sp, #0]
 801074c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801074e:	2b00      	cmp	r3, #0
 8010750:	f000 8104 	beq.w	801095c <_dtoa_r+0xb54>
 8010754:	2e00      	cmp	r6, #0
 8010756:	dd05      	ble.n	8010764 <_dtoa_r+0x95c>
 8010758:	4629      	mov	r1, r5
 801075a:	4632      	mov	r2, r6
 801075c:	4658      	mov	r0, fp
 801075e:	f000 ffbb 	bl	80116d8 <__lshift>
 8010762:	4605      	mov	r5, r0
 8010764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010766:	2b00      	cmp	r3, #0
 8010768:	d05a      	beq.n	8010820 <_dtoa_r+0xa18>
 801076a:	6869      	ldr	r1, [r5, #4]
 801076c:	4658      	mov	r0, fp
 801076e:	f000 fd5b 	bl	8011228 <_Balloc>
 8010772:	4606      	mov	r6, r0
 8010774:	b928      	cbnz	r0, 8010782 <_dtoa_r+0x97a>
 8010776:	4b84      	ldr	r3, [pc, #528]	@ (8010988 <_dtoa_r+0xb80>)
 8010778:	4602      	mov	r2, r0
 801077a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801077e:	f7ff bb5a 	b.w	800fe36 <_dtoa_r+0x2e>
 8010782:	692a      	ldr	r2, [r5, #16]
 8010784:	3202      	adds	r2, #2
 8010786:	0092      	lsls	r2, r2, #2
 8010788:	f105 010c 	add.w	r1, r5, #12
 801078c:	300c      	adds	r0, #12
 801078e:	f7ff fa94 	bl	800fcba <memcpy>
 8010792:	2201      	movs	r2, #1
 8010794:	4631      	mov	r1, r6
 8010796:	4658      	mov	r0, fp
 8010798:	f000 ff9e 	bl	80116d8 <__lshift>
 801079c:	f10a 0301 	add.w	r3, sl, #1
 80107a0:	9307      	str	r3, [sp, #28]
 80107a2:	9b00      	ldr	r3, [sp, #0]
 80107a4:	4453      	add	r3, sl
 80107a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80107a8:	9b02      	ldr	r3, [sp, #8]
 80107aa:	f003 0301 	and.w	r3, r3, #1
 80107ae:	462f      	mov	r7, r5
 80107b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80107b2:	4605      	mov	r5, r0
 80107b4:	9b07      	ldr	r3, [sp, #28]
 80107b6:	4621      	mov	r1, r4
 80107b8:	3b01      	subs	r3, #1
 80107ba:	4648      	mov	r0, r9
 80107bc:	9300      	str	r3, [sp, #0]
 80107be:	f7ff fa99 	bl	800fcf4 <quorem>
 80107c2:	4639      	mov	r1, r7
 80107c4:	9002      	str	r0, [sp, #8]
 80107c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80107ca:	4648      	mov	r0, r9
 80107cc:	f000 fff0 	bl	80117b0 <__mcmp>
 80107d0:	462a      	mov	r2, r5
 80107d2:	9008      	str	r0, [sp, #32]
 80107d4:	4621      	mov	r1, r4
 80107d6:	4658      	mov	r0, fp
 80107d8:	f001 f806 	bl	80117e8 <__mdiff>
 80107dc:	68c2      	ldr	r2, [r0, #12]
 80107de:	4606      	mov	r6, r0
 80107e0:	bb02      	cbnz	r2, 8010824 <_dtoa_r+0xa1c>
 80107e2:	4601      	mov	r1, r0
 80107e4:	4648      	mov	r0, r9
 80107e6:	f000 ffe3 	bl	80117b0 <__mcmp>
 80107ea:	4602      	mov	r2, r0
 80107ec:	4631      	mov	r1, r6
 80107ee:	4658      	mov	r0, fp
 80107f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80107f2:	f000 fd59 	bl	80112a8 <_Bfree>
 80107f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80107fa:	9e07      	ldr	r6, [sp, #28]
 80107fc:	ea43 0102 	orr.w	r1, r3, r2
 8010800:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010802:	4319      	orrs	r1, r3
 8010804:	d110      	bne.n	8010828 <_dtoa_r+0xa20>
 8010806:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801080a:	d029      	beq.n	8010860 <_dtoa_r+0xa58>
 801080c:	9b08      	ldr	r3, [sp, #32]
 801080e:	2b00      	cmp	r3, #0
 8010810:	dd02      	ble.n	8010818 <_dtoa_r+0xa10>
 8010812:	9b02      	ldr	r3, [sp, #8]
 8010814:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010818:	9b00      	ldr	r3, [sp, #0]
 801081a:	f883 8000 	strb.w	r8, [r3]
 801081e:	e63f      	b.n	80104a0 <_dtoa_r+0x698>
 8010820:	4628      	mov	r0, r5
 8010822:	e7bb      	b.n	801079c <_dtoa_r+0x994>
 8010824:	2201      	movs	r2, #1
 8010826:	e7e1      	b.n	80107ec <_dtoa_r+0x9e4>
 8010828:	9b08      	ldr	r3, [sp, #32]
 801082a:	2b00      	cmp	r3, #0
 801082c:	db04      	blt.n	8010838 <_dtoa_r+0xa30>
 801082e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010830:	430b      	orrs	r3, r1
 8010832:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010834:	430b      	orrs	r3, r1
 8010836:	d120      	bne.n	801087a <_dtoa_r+0xa72>
 8010838:	2a00      	cmp	r2, #0
 801083a:	dded      	ble.n	8010818 <_dtoa_r+0xa10>
 801083c:	4649      	mov	r1, r9
 801083e:	2201      	movs	r2, #1
 8010840:	4658      	mov	r0, fp
 8010842:	f000 ff49 	bl	80116d8 <__lshift>
 8010846:	4621      	mov	r1, r4
 8010848:	4681      	mov	r9, r0
 801084a:	f000 ffb1 	bl	80117b0 <__mcmp>
 801084e:	2800      	cmp	r0, #0
 8010850:	dc03      	bgt.n	801085a <_dtoa_r+0xa52>
 8010852:	d1e1      	bne.n	8010818 <_dtoa_r+0xa10>
 8010854:	f018 0f01 	tst.w	r8, #1
 8010858:	d0de      	beq.n	8010818 <_dtoa_r+0xa10>
 801085a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801085e:	d1d8      	bne.n	8010812 <_dtoa_r+0xa0a>
 8010860:	9a00      	ldr	r2, [sp, #0]
 8010862:	2339      	movs	r3, #57	@ 0x39
 8010864:	7013      	strb	r3, [r2, #0]
 8010866:	4633      	mov	r3, r6
 8010868:	461e      	mov	r6, r3
 801086a:	3b01      	subs	r3, #1
 801086c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010870:	2a39      	cmp	r2, #57	@ 0x39
 8010872:	d052      	beq.n	801091a <_dtoa_r+0xb12>
 8010874:	3201      	adds	r2, #1
 8010876:	701a      	strb	r2, [r3, #0]
 8010878:	e612      	b.n	80104a0 <_dtoa_r+0x698>
 801087a:	2a00      	cmp	r2, #0
 801087c:	dd07      	ble.n	801088e <_dtoa_r+0xa86>
 801087e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010882:	d0ed      	beq.n	8010860 <_dtoa_r+0xa58>
 8010884:	9a00      	ldr	r2, [sp, #0]
 8010886:	f108 0301 	add.w	r3, r8, #1
 801088a:	7013      	strb	r3, [r2, #0]
 801088c:	e608      	b.n	80104a0 <_dtoa_r+0x698>
 801088e:	9b07      	ldr	r3, [sp, #28]
 8010890:	9a07      	ldr	r2, [sp, #28]
 8010892:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010896:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010898:	4293      	cmp	r3, r2
 801089a:	d028      	beq.n	80108ee <_dtoa_r+0xae6>
 801089c:	4649      	mov	r1, r9
 801089e:	2300      	movs	r3, #0
 80108a0:	220a      	movs	r2, #10
 80108a2:	4658      	mov	r0, fp
 80108a4:	f000 fd22 	bl	80112ec <__multadd>
 80108a8:	42af      	cmp	r7, r5
 80108aa:	4681      	mov	r9, r0
 80108ac:	f04f 0300 	mov.w	r3, #0
 80108b0:	f04f 020a 	mov.w	r2, #10
 80108b4:	4639      	mov	r1, r7
 80108b6:	4658      	mov	r0, fp
 80108b8:	d107      	bne.n	80108ca <_dtoa_r+0xac2>
 80108ba:	f000 fd17 	bl	80112ec <__multadd>
 80108be:	4607      	mov	r7, r0
 80108c0:	4605      	mov	r5, r0
 80108c2:	9b07      	ldr	r3, [sp, #28]
 80108c4:	3301      	adds	r3, #1
 80108c6:	9307      	str	r3, [sp, #28]
 80108c8:	e774      	b.n	80107b4 <_dtoa_r+0x9ac>
 80108ca:	f000 fd0f 	bl	80112ec <__multadd>
 80108ce:	4629      	mov	r1, r5
 80108d0:	4607      	mov	r7, r0
 80108d2:	2300      	movs	r3, #0
 80108d4:	220a      	movs	r2, #10
 80108d6:	4658      	mov	r0, fp
 80108d8:	f000 fd08 	bl	80112ec <__multadd>
 80108dc:	4605      	mov	r5, r0
 80108de:	e7f0      	b.n	80108c2 <_dtoa_r+0xaba>
 80108e0:	9b00      	ldr	r3, [sp, #0]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	bfcc      	ite	gt
 80108e6:	461e      	movgt	r6, r3
 80108e8:	2601      	movle	r6, #1
 80108ea:	4456      	add	r6, sl
 80108ec:	2700      	movs	r7, #0
 80108ee:	4649      	mov	r1, r9
 80108f0:	2201      	movs	r2, #1
 80108f2:	4658      	mov	r0, fp
 80108f4:	f000 fef0 	bl	80116d8 <__lshift>
 80108f8:	4621      	mov	r1, r4
 80108fa:	4681      	mov	r9, r0
 80108fc:	f000 ff58 	bl	80117b0 <__mcmp>
 8010900:	2800      	cmp	r0, #0
 8010902:	dcb0      	bgt.n	8010866 <_dtoa_r+0xa5e>
 8010904:	d102      	bne.n	801090c <_dtoa_r+0xb04>
 8010906:	f018 0f01 	tst.w	r8, #1
 801090a:	d1ac      	bne.n	8010866 <_dtoa_r+0xa5e>
 801090c:	4633      	mov	r3, r6
 801090e:	461e      	mov	r6, r3
 8010910:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010914:	2a30      	cmp	r2, #48	@ 0x30
 8010916:	d0fa      	beq.n	801090e <_dtoa_r+0xb06>
 8010918:	e5c2      	b.n	80104a0 <_dtoa_r+0x698>
 801091a:	459a      	cmp	sl, r3
 801091c:	d1a4      	bne.n	8010868 <_dtoa_r+0xa60>
 801091e:	9b04      	ldr	r3, [sp, #16]
 8010920:	3301      	adds	r3, #1
 8010922:	9304      	str	r3, [sp, #16]
 8010924:	2331      	movs	r3, #49	@ 0x31
 8010926:	f88a 3000 	strb.w	r3, [sl]
 801092a:	e5b9      	b.n	80104a0 <_dtoa_r+0x698>
 801092c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801092e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801098c <_dtoa_r+0xb84>
 8010932:	b11b      	cbz	r3, 801093c <_dtoa_r+0xb34>
 8010934:	f10a 0308 	add.w	r3, sl, #8
 8010938:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801093a:	6013      	str	r3, [r2, #0]
 801093c:	4650      	mov	r0, sl
 801093e:	b019      	add	sp, #100	@ 0x64
 8010940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010946:	2b01      	cmp	r3, #1
 8010948:	f77f ae37 	ble.w	80105ba <_dtoa_r+0x7b2>
 801094c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801094e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010950:	2001      	movs	r0, #1
 8010952:	e655      	b.n	8010600 <_dtoa_r+0x7f8>
 8010954:	9b00      	ldr	r3, [sp, #0]
 8010956:	2b00      	cmp	r3, #0
 8010958:	f77f aed6 	ble.w	8010708 <_dtoa_r+0x900>
 801095c:	4656      	mov	r6, sl
 801095e:	4621      	mov	r1, r4
 8010960:	4648      	mov	r0, r9
 8010962:	f7ff f9c7 	bl	800fcf4 <quorem>
 8010966:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801096a:	f806 8b01 	strb.w	r8, [r6], #1
 801096e:	9b00      	ldr	r3, [sp, #0]
 8010970:	eba6 020a 	sub.w	r2, r6, sl
 8010974:	4293      	cmp	r3, r2
 8010976:	ddb3      	ble.n	80108e0 <_dtoa_r+0xad8>
 8010978:	4649      	mov	r1, r9
 801097a:	2300      	movs	r3, #0
 801097c:	220a      	movs	r2, #10
 801097e:	4658      	mov	r0, fp
 8010980:	f000 fcb4 	bl	80112ec <__multadd>
 8010984:	4681      	mov	r9, r0
 8010986:	e7ea      	b.n	801095e <_dtoa_r+0xb56>
 8010988:	080137d5 	.word	0x080137d5
 801098c:	08013759 	.word	0x08013759

08010990 <_free_r>:
 8010990:	b538      	push	{r3, r4, r5, lr}
 8010992:	4605      	mov	r5, r0
 8010994:	2900      	cmp	r1, #0
 8010996:	d041      	beq.n	8010a1c <_free_r+0x8c>
 8010998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801099c:	1f0c      	subs	r4, r1, #4
 801099e:	2b00      	cmp	r3, #0
 80109a0:	bfb8      	it	lt
 80109a2:	18e4      	addlt	r4, r4, r3
 80109a4:	f000 fc34 	bl	8011210 <__malloc_lock>
 80109a8:	4a1d      	ldr	r2, [pc, #116]	@ (8010a20 <_free_r+0x90>)
 80109aa:	6813      	ldr	r3, [r2, #0]
 80109ac:	b933      	cbnz	r3, 80109bc <_free_r+0x2c>
 80109ae:	6063      	str	r3, [r4, #4]
 80109b0:	6014      	str	r4, [r2, #0]
 80109b2:	4628      	mov	r0, r5
 80109b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109b8:	f000 bc30 	b.w	801121c <__malloc_unlock>
 80109bc:	42a3      	cmp	r3, r4
 80109be:	d908      	bls.n	80109d2 <_free_r+0x42>
 80109c0:	6820      	ldr	r0, [r4, #0]
 80109c2:	1821      	adds	r1, r4, r0
 80109c4:	428b      	cmp	r3, r1
 80109c6:	bf01      	itttt	eq
 80109c8:	6819      	ldreq	r1, [r3, #0]
 80109ca:	685b      	ldreq	r3, [r3, #4]
 80109cc:	1809      	addeq	r1, r1, r0
 80109ce:	6021      	streq	r1, [r4, #0]
 80109d0:	e7ed      	b.n	80109ae <_free_r+0x1e>
 80109d2:	461a      	mov	r2, r3
 80109d4:	685b      	ldr	r3, [r3, #4]
 80109d6:	b10b      	cbz	r3, 80109dc <_free_r+0x4c>
 80109d8:	42a3      	cmp	r3, r4
 80109da:	d9fa      	bls.n	80109d2 <_free_r+0x42>
 80109dc:	6811      	ldr	r1, [r2, #0]
 80109de:	1850      	adds	r0, r2, r1
 80109e0:	42a0      	cmp	r0, r4
 80109e2:	d10b      	bne.n	80109fc <_free_r+0x6c>
 80109e4:	6820      	ldr	r0, [r4, #0]
 80109e6:	4401      	add	r1, r0
 80109e8:	1850      	adds	r0, r2, r1
 80109ea:	4283      	cmp	r3, r0
 80109ec:	6011      	str	r1, [r2, #0]
 80109ee:	d1e0      	bne.n	80109b2 <_free_r+0x22>
 80109f0:	6818      	ldr	r0, [r3, #0]
 80109f2:	685b      	ldr	r3, [r3, #4]
 80109f4:	6053      	str	r3, [r2, #4]
 80109f6:	4408      	add	r0, r1
 80109f8:	6010      	str	r0, [r2, #0]
 80109fa:	e7da      	b.n	80109b2 <_free_r+0x22>
 80109fc:	d902      	bls.n	8010a04 <_free_r+0x74>
 80109fe:	230c      	movs	r3, #12
 8010a00:	602b      	str	r3, [r5, #0]
 8010a02:	e7d6      	b.n	80109b2 <_free_r+0x22>
 8010a04:	6820      	ldr	r0, [r4, #0]
 8010a06:	1821      	adds	r1, r4, r0
 8010a08:	428b      	cmp	r3, r1
 8010a0a:	bf04      	itt	eq
 8010a0c:	6819      	ldreq	r1, [r3, #0]
 8010a0e:	685b      	ldreq	r3, [r3, #4]
 8010a10:	6063      	str	r3, [r4, #4]
 8010a12:	bf04      	itt	eq
 8010a14:	1809      	addeq	r1, r1, r0
 8010a16:	6021      	streq	r1, [r4, #0]
 8010a18:	6054      	str	r4, [r2, #4]
 8010a1a:	e7ca      	b.n	80109b2 <_free_r+0x22>
 8010a1c:	bd38      	pop	{r3, r4, r5, pc}
 8010a1e:	bf00      	nop
 8010a20:	20000c10 	.word	0x20000c10

08010a24 <rshift>:
 8010a24:	6903      	ldr	r3, [r0, #16]
 8010a26:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010a2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010a2e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010a32:	f100 0414 	add.w	r4, r0, #20
 8010a36:	dd45      	ble.n	8010ac4 <rshift+0xa0>
 8010a38:	f011 011f 	ands.w	r1, r1, #31
 8010a3c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010a40:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010a44:	d10c      	bne.n	8010a60 <rshift+0x3c>
 8010a46:	f100 0710 	add.w	r7, r0, #16
 8010a4a:	4629      	mov	r1, r5
 8010a4c:	42b1      	cmp	r1, r6
 8010a4e:	d334      	bcc.n	8010aba <rshift+0x96>
 8010a50:	1a9b      	subs	r3, r3, r2
 8010a52:	009b      	lsls	r3, r3, #2
 8010a54:	1eea      	subs	r2, r5, #3
 8010a56:	4296      	cmp	r6, r2
 8010a58:	bf38      	it	cc
 8010a5a:	2300      	movcc	r3, #0
 8010a5c:	4423      	add	r3, r4
 8010a5e:	e015      	b.n	8010a8c <rshift+0x68>
 8010a60:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010a64:	f1c1 0820 	rsb	r8, r1, #32
 8010a68:	40cf      	lsrs	r7, r1
 8010a6a:	f105 0e04 	add.w	lr, r5, #4
 8010a6e:	46a1      	mov	r9, r4
 8010a70:	4576      	cmp	r6, lr
 8010a72:	46f4      	mov	ip, lr
 8010a74:	d815      	bhi.n	8010aa2 <rshift+0x7e>
 8010a76:	1a9a      	subs	r2, r3, r2
 8010a78:	0092      	lsls	r2, r2, #2
 8010a7a:	3a04      	subs	r2, #4
 8010a7c:	3501      	adds	r5, #1
 8010a7e:	42ae      	cmp	r6, r5
 8010a80:	bf38      	it	cc
 8010a82:	2200      	movcc	r2, #0
 8010a84:	18a3      	adds	r3, r4, r2
 8010a86:	50a7      	str	r7, [r4, r2]
 8010a88:	b107      	cbz	r7, 8010a8c <rshift+0x68>
 8010a8a:	3304      	adds	r3, #4
 8010a8c:	1b1a      	subs	r2, r3, r4
 8010a8e:	42a3      	cmp	r3, r4
 8010a90:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010a94:	bf08      	it	eq
 8010a96:	2300      	moveq	r3, #0
 8010a98:	6102      	str	r2, [r0, #16]
 8010a9a:	bf08      	it	eq
 8010a9c:	6143      	streq	r3, [r0, #20]
 8010a9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010aa2:	f8dc c000 	ldr.w	ip, [ip]
 8010aa6:	fa0c fc08 	lsl.w	ip, ip, r8
 8010aaa:	ea4c 0707 	orr.w	r7, ip, r7
 8010aae:	f849 7b04 	str.w	r7, [r9], #4
 8010ab2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010ab6:	40cf      	lsrs	r7, r1
 8010ab8:	e7da      	b.n	8010a70 <rshift+0x4c>
 8010aba:	f851 cb04 	ldr.w	ip, [r1], #4
 8010abe:	f847 cf04 	str.w	ip, [r7, #4]!
 8010ac2:	e7c3      	b.n	8010a4c <rshift+0x28>
 8010ac4:	4623      	mov	r3, r4
 8010ac6:	e7e1      	b.n	8010a8c <rshift+0x68>

08010ac8 <__hexdig_fun>:
 8010ac8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010acc:	2b09      	cmp	r3, #9
 8010ace:	d802      	bhi.n	8010ad6 <__hexdig_fun+0xe>
 8010ad0:	3820      	subs	r0, #32
 8010ad2:	b2c0      	uxtb	r0, r0
 8010ad4:	4770      	bx	lr
 8010ad6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010ada:	2b05      	cmp	r3, #5
 8010adc:	d801      	bhi.n	8010ae2 <__hexdig_fun+0x1a>
 8010ade:	3847      	subs	r0, #71	@ 0x47
 8010ae0:	e7f7      	b.n	8010ad2 <__hexdig_fun+0xa>
 8010ae2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010ae6:	2b05      	cmp	r3, #5
 8010ae8:	d801      	bhi.n	8010aee <__hexdig_fun+0x26>
 8010aea:	3827      	subs	r0, #39	@ 0x27
 8010aec:	e7f1      	b.n	8010ad2 <__hexdig_fun+0xa>
 8010aee:	2000      	movs	r0, #0
 8010af0:	4770      	bx	lr
	...

08010af4 <__gethex>:
 8010af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010af8:	b085      	sub	sp, #20
 8010afa:	468a      	mov	sl, r1
 8010afc:	9302      	str	r3, [sp, #8]
 8010afe:	680b      	ldr	r3, [r1, #0]
 8010b00:	9001      	str	r0, [sp, #4]
 8010b02:	4690      	mov	r8, r2
 8010b04:	1c9c      	adds	r4, r3, #2
 8010b06:	46a1      	mov	r9, r4
 8010b08:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010b0c:	2830      	cmp	r0, #48	@ 0x30
 8010b0e:	d0fa      	beq.n	8010b06 <__gethex+0x12>
 8010b10:	eba9 0303 	sub.w	r3, r9, r3
 8010b14:	f1a3 0b02 	sub.w	fp, r3, #2
 8010b18:	f7ff ffd6 	bl	8010ac8 <__hexdig_fun>
 8010b1c:	4605      	mov	r5, r0
 8010b1e:	2800      	cmp	r0, #0
 8010b20:	d168      	bne.n	8010bf4 <__gethex+0x100>
 8010b22:	49a0      	ldr	r1, [pc, #640]	@ (8010da4 <__gethex+0x2b0>)
 8010b24:	2201      	movs	r2, #1
 8010b26:	4648      	mov	r0, r9
 8010b28:	f7ff f83e 	bl	800fba8 <strncmp>
 8010b2c:	4607      	mov	r7, r0
 8010b2e:	2800      	cmp	r0, #0
 8010b30:	d167      	bne.n	8010c02 <__gethex+0x10e>
 8010b32:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010b36:	4626      	mov	r6, r4
 8010b38:	f7ff ffc6 	bl	8010ac8 <__hexdig_fun>
 8010b3c:	2800      	cmp	r0, #0
 8010b3e:	d062      	beq.n	8010c06 <__gethex+0x112>
 8010b40:	4623      	mov	r3, r4
 8010b42:	7818      	ldrb	r0, [r3, #0]
 8010b44:	2830      	cmp	r0, #48	@ 0x30
 8010b46:	4699      	mov	r9, r3
 8010b48:	f103 0301 	add.w	r3, r3, #1
 8010b4c:	d0f9      	beq.n	8010b42 <__gethex+0x4e>
 8010b4e:	f7ff ffbb 	bl	8010ac8 <__hexdig_fun>
 8010b52:	fab0 f580 	clz	r5, r0
 8010b56:	096d      	lsrs	r5, r5, #5
 8010b58:	f04f 0b01 	mov.w	fp, #1
 8010b5c:	464a      	mov	r2, r9
 8010b5e:	4616      	mov	r6, r2
 8010b60:	3201      	adds	r2, #1
 8010b62:	7830      	ldrb	r0, [r6, #0]
 8010b64:	f7ff ffb0 	bl	8010ac8 <__hexdig_fun>
 8010b68:	2800      	cmp	r0, #0
 8010b6a:	d1f8      	bne.n	8010b5e <__gethex+0x6a>
 8010b6c:	498d      	ldr	r1, [pc, #564]	@ (8010da4 <__gethex+0x2b0>)
 8010b6e:	2201      	movs	r2, #1
 8010b70:	4630      	mov	r0, r6
 8010b72:	f7ff f819 	bl	800fba8 <strncmp>
 8010b76:	2800      	cmp	r0, #0
 8010b78:	d13f      	bne.n	8010bfa <__gethex+0x106>
 8010b7a:	b944      	cbnz	r4, 8010b8e <__gethex+0x9a>
 8010b7c:	1c74      	adds	r4, r6, #1
 8010b7e:	4622      	mov	r2, r4
 8010b80:	4616      	mov	r6, r2
 8010b82:	3201      	adds	r2, #1
 8010b84:	7830      	ldrb	r0, [r6, #0]
 8010b86:	f7ff ff9f 	bl	8010ac8 <__hexdig_fun>
 8010b8a:	2800      	cmp	r0, #0
 8010b8c:	d1f8      	bne.n	8010b80 <__gethex+0x8c>
 8010b8e:	1ba4      	subs	r4, r4, r6
 8010b90:	00a7      	lsls	r7, r4, #2
 8010b92:	7833      	ldrb	r3, [r6, #0]
 8010b94:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010b98:	2b50      	cmp	r3, #80	@ 0x50
 8010b9a:	d13e      	bne.n	8010c1a <__gethex+0x126>
 8010b9c:	7873      	ldrb	r3, [r6, #1]
 8010b9e:	2b2b      	cmp	r3, #43	@ 0x2b
 8010ba0:	d033      	beq.n	8010c0a <__gethex+0x116>
 8010ba2:	2b2d      	cmp	r3, #45	@ 0x2d
 8010ba4:	d034      	beq.n	8010c10 <__gethex+0x11c>
 8010ba6:	1c71      	adds	r1, r6, #1
 8010ba8:	2400      	movs	r4, #0
 8010baa:	7808      	ldrb	r0, [r1, #0]
 8010bac:	f7ff ff8c 	bl	8010ac8 <__hexdig_fun>
 8010bb0:	1e43      	subs	r3, r0, #1
 8010bb2:	b2db      	uxtb	r3, r3
 8010bb4:	2b18      	cmp	r3, #24
 8010bb6:	d830      	bhi.n	8010c1a <__gethex+0x126>
 8010bb8:	f1a0 0210 	sub.w	r2, r0, #16
 8010bbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010bc0:	f7ff ff82 	bl	8010ac8 <__hexdig_fun>
 8010bc4:	f100 3cff 	add.w	ip, r0, #4294967295
 8010bc8:	fa5f fc8c 	uxtb.w	ip, ip
 8010bcc:	f1bc 0f18 	cmp.w	ip, #24
 8010bd0:	f04f 030a 	mov.w	r3, #10
 8010bd4:	d91e      	bls.n	8010c14 <__gethex+0x120>
 8010bd6:	b104      	cbz	r4, 8010bda <__gethex+0xe6>
 8010bd8:	4252      	negs	r2, r2
 8010bda:	4417      	add	r7, r2
 8010bdc:	f8ca 1000 	str.w	r1, [sl]
 8010be0:	b1ed      	cbz	r5, 8010c1e <__gethex+0x12a>
 8010be2:	f1bb 0f00 	cmp.w	fp, #0
 8010be6:	bf0c      	ite	eq
 8010be8:	2506      	moveq	r5, #6
 8010bea:	2500      	movne	r5, #0
 8010bec:	4628      	mov	r0, r5
 8010bee:	b005      	add	sp, #20
 8010bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bf4:	2500      	movs	r5, #0
 8010bf6:	462c      	mov	r4, r5
 8010bf8:	e7b0      	b.n	8010b5c <__gethex+0x68>
 8010bfa:	2c00      	cmp	r4, #0
 8010bfc:	d1c7      	bne.n	8010b8e <__gethex+0x9a>
 8010bfe:	4627      	mov	r7, r4
 8010c00:	e7c7      	b.n	8010b92 <__gethex+0x9e>
 8010c02:	464e      	mov	r6, r9
 8010c04:	462f      	mov	r7, r5
 8010c06:	2501      	movs	r5, #1
 8010c08:	e7c3      	b.n	8010b92 <__gethex+0x9e>
 8010c0a:	2400      	movs	r4, #0
 8010c0c:	1cb1      	adds	r1, r6, #2
 8010c0e:	e7cc      	b.n	8010baa <__gethex+0xb6>
 8010c10:	2401      	movs	r4, #1
 8010c12:	e7fb      	b.n	8010c0c <__gethex+0x118>
 8010c14:	fb03 0002 	mla	r0, r3, r2, r0
 8010c18:	e7ce      	b.n	8010bb8 <__gethex+0xc4>
 8010c1a:	4631      	mov	r1, r6
 8010c1c:	e7de      	b.n	8010bdc <__gethex+0xe8>
 8010c1e:	eba6 0309 	sub.w	r3, r6, r9
 8010c22:	3b01      	subs	r3, #1
 8010c24:	4629      	mov	r1, r5
 8010c26:	2b07      	cmp	r3, #7
 8010c28:	dc0a      	bgt.n	8010c40 <__gethex+0x14c>
 8010c2a:	9801      	ldr	r0, [sp, #4]
 8010c2c:	f000 fafc 	bl	8011228 <_Balloc>
 8010c30:	4604      	mov	r4, r0
 8010c32:	b940      	cbnz	r0, 8010c46 <__gethex+0x152>
 8010c34:	4b5c      	ldr	r3, [pc, #368]	@ (8010da8 <__gethex+0x2b4>)
 8010c36:	4602      	mov	r2, r0
 8010c38:	21e4      	movs	r1, #228	@ 0xe4
 8010c3a:	485c      	ldr	r0, [pc, #368]	@ (8010dac <__gethex+0x2b8>)
 8010c3c:	f001 fa5c 	bl	80120f8 <__assert_func>
 8010c40:	3101      	adds	r1, #1
 8010c42:	105b      	asrs	r3, r3, #1
 8010c44:	e7ef      	b.n	8010c26 <__gethex+0x132>
 8010c46:	f100 0a14 	add.w	sl, r0, #20
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	4655      	mov	r5, sl
 8010c4e:	469b      	mov	fp, r3
 8010c50:	45b1      	cmp	r9, r6
 8010c52:	d337      	bcc.n	8010cc4 <__gethex+0x1d0>
 8010c54:	f845 bb04 	str.w	fp, [r5], #4
 8010c58:	eba5 050a 	sub.w	r5, r5, sl
 8010c5c:	10ad      	asrs	r5, r5, #2
 8010c5e:	6125      	str	r5, [r4, #16]
 8010c60:	4658      	mov	r0, fp
 8010c62:	f000 fbd3 	bl	801140c <__hi0bits>
 8010c66:	016d      	lsls	r5, r5, #5
 8010c68:	f8d8 6000 	ldr.w	r6, [r8]
 8010c6c:	1a2d      	subs	r5, r5, r0
 8010c6e:	42b5      	cmp	r5, r6
 8010c70:	dd54      	ble.n	8010d1c <__gethex+0x228>
 8010c72:	1bad      	subs	r5, r5, r6
 8010c74:	4629      	mov	r1, r5
 8010c76:	4620      	mov	r0, r4
 8010c78:	f000 ff67 	bl	8011b4a <__any_on>
 8010c7c:	4681      	mov	r9, r0
 8010c7e:	b178      	cbz	r0, 8010ca0 <__gethex+0x1ac>
 8010c80:	1e6b      	subs	r3, r5, #1
 8010c82:	1159      	asrs	r1, r3, #5
 8010c84:	f003 021f 	and.w	r2, r3, #31
 8010c88:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010c8c:	f04f 0901 	mov.w	r9, #1
 8010c90:	fa09 f202 	lsl.w	r2, r9, r2
 8010c94:	420a      	tst	r2, r1
 8010c96:	d003      	beq.n	8010ca0 <__gethex+0x1ac>
 8010c98:	454b      	cmp	r3, r9
 8010c9a:	dc36      	bgt.n	8010d0a <__gethex+0x216>
 8010c9c:	f04f 0902 	mov.w	r9, #2
 8010ca0:	4629      	mov	r1, r5
 8010ca2:	4620      	mov	r0, r4
 8010ca4:	f7ff febe 	bl	8010a24 <rshift>
 8010ca8:	442f      	add	r7, r5
 8010caa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010cae:	42bb      	cmp	r3, r7
 8010cb0:	da42      	bge.n	8010d38 <__gethex+0x244>
 8010cb2:	9801      	ldr	r0, [sp, #4]
 8010cb4:	4621      	mov	r1, r4
 8010cb6:	f000 faf7 	bl	80112a8 <_Bfree>
 8010cba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	6013      	str	r3, [r2, #0]
 8010cc0:	25a3      	movs	r5, #163	@ 0xa3
 8010cc2:	e793      	b.n	8010bec <__gethex+0xf8>
 8010cc4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010cc8:	2a2e      	cmp	r2, #46	@ 0x2e
 8010cca:	d012      	beq.n	8010cf2 <__gethex+0x1fe>
 8010ccc:	2b20      	cmp	r3, #32
 8010cce:	d104      	bne.n	8010cda <__gethex+0x1e6>
 8010cd0:	f845 bb04 	str.w	fp, [r5], #4
 8010cd4:	f04f 0b00 	mov.w	fp, #0
 8010cd8:	465b      	mov	r3, fp
 8010cda:	7830      	ldrb	r0, [r6, #0]
 8010cdc:	9303      	str	r3, [sp, #12]
 8010cde:	f7ff fef3 	bl	8010ac8 <__hexdig_fun>
 8010ce2:	9b03      	ldr	r3, [sp, #12]
 8010ce4:	f000 000f 	and.w	r0, r0, #15
 8010ce8:	4098      	lsls	r0, r3
 8010cea:	ea4b 0b00 	orr.w	fp, fp, r0
 8010cee:	3304      	adds	r3, #4
 8010cf0:	e7ae      	b.n	8010c50 <__gethex+0x15c>
 8010cf2:	45b1      	cmp	r9, r6
 8010cf4:	d8ea      	bhi.n	8010ccc <__gethex+0x1d8>
 8010cf6:	492b      	ldr	r1, [pc, #172]	@ (8010da4 <__gethex+0x2b0>)
 8010cf8:	9303      	str	r3, [sp, #12]
 8010cfa:	2201      	movs	r2, #1
 8010cfc:	4630      	mov	r0, r6
 8010cfe:	f7fe ff53 	bl	800fba8 <strncmp>
 8010d02:	9b03      	ldr	r3, [sp, #12]
 8010d04:	2800      	cmp	r0, #0
 8010d06:	d1e1      	bne.n	8010ccc <__gethex+0x1d8>
 8010d08:	e7a2      	b.n	8010c50 <__gethex+0x15c>
 8010d0a:	1ea9      	subs	r1, r5, #2
 8010d0c:	4620      	mov	r0, r4
 8010d0e:	f000 ff1c 	bl	8011b4a <__any_on>
 8010d12:	2800      	cmp	r0, #0
 8010d14:	d0c2      	beq.n	8010c9c <__gethex+0x1a8>
 8010d16:	f04f 0903 	mov.w	r9, #3
 8010d1a:	e7c1      	b.n	8010ca0 <__gethex+0x1ac>
 8010d1c:	da09      	bge.n	8010d32 <__gethex+0x23e>
 8010d1e:	1b75      	subs	r5, r6, r5
 8010d20:	4621      	mov	r1, r4
 8010d22:	9801      	ldr	r0, [sp, #4]
 8010d24:	462a      	mov	r2, r5
 8010d26:	f000 fcd7 	bl	80116d8 <__lshift>
 8010d2a:	1b7f      	subs	r7, r7, r5
 8010d2c:	4604      	mov	r4, r0
 8010d2e:	f100 0a14 	add.w	sl, r0, #20
 8010d32:	f04f 0900 	mov.w	r9, #0
 8010d36:	e7b8      	b.n	8010caa <__gethex+0x1b6>
 8010d38:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010d3c:	42bd      	cmp	r5, r7
 8010d3e:	dd6f      	ble.n	8010e20 <__gethex+0x32c>
 8010d40:	1bed      	subs	r5, r5, r7
 8010d42:	42ae      	cmp	r6, r5
 8010d44:	dc34      	bgt.n	8010db0 <__gethex+0x2bc>
 8010d46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010d4a:	2b02      	cmp	r3, #2
 8010d4c:	d022      	beq.n	8010d94 <__gethex+0x2a0>
 8010d4e:	2b03      	cmp	r3, #3
 8010d50:	d024      	beq.n	8010d9c <__gethex+0x2a8>
 8010d52:	2b01      	cmp	r3, #1
 8010d54:	d115      	bne.n	8010d82 <__gethex+0x28e>
 8010d56:	42ae      	cmp	r6, r5
 8010d58:	d113      	bne.n	8010d82 <__gethex+0x28e>
 8010d5a:	2e01      	cmp	r6, #1
 8010d5c:	d10b      	bne.n	8010d76 <__gethex+0x282>
 8010d5e:	9a02      	ldr	r2, [sp, #8]
 8010d60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010d64:	6013      	str	r3, [r2, #0]
 8010d66:	2301      	movs	r3, #1
 8010d68:	6123      	str	r3, [r4, #16]
 8010d6a:	f8ca 3000 	str.w	r3, [sl]
 8010d6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d70:	2562      	movs	r5, #98	@ 0x62
 8010d72:	601c      	str	r4, [r3, #0]
 8010d74:	e73a      	b.n	8010bec <__gethex+0xf8>
 8010d76:	1e71      	subs	r1, r6, #1
 8010d78:	4620      	mov	r0, r4
 8010d7a:	f000 fee6 	bl	8011b4a <__any_on>
 8010d7e:	2800      	cmp	r0, #0
 8010d80:	d1ed      	bne.n	8010d5e <__gethex+0x26a>
 8010d82:	9801      	ldr	r0, [sp, #4]
 8010d84:	4621      	mov	r1, r4
 8010d86:	f000 fa8f 	bl	80112a8 <_Bfree>
 8010d8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	6013      	str	r3, [r2, #0]
 8010d90:	2550      	movs	r5, #80	@ 0x50
 8010d92:	e72b      	b.n	8010bec <__gethex+0xf8>
 8010d94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d1f3      	bne.n	8010d82 <__gethex+0x28e>
 8010d9a:	e7e0      	b.n	8010d5e <__gethex+0x26a>
 8010d9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d1dd      	bne.n	8010d5e <__gethex+0x26a>
 8010da2:	e7ee      	b.n	8010d82 <__gethex+0x28e>
 8010da4:	080136c0 	.word	0x080136c0
 8010da8:	080137d5 	.word	0x080137d5
 8010dac:	080137e6 	.word	0x080137e6
 8010db0:	1e6f      	subs	r7, r5, #1
 8010db2:	f1b9 0f00 	cmp.w	r9, #0
 8010db6:	d130      	bne.n	8010e1a <__gethex+0x326>
 8010db8:	b127      	cbz	r7, 8010dc4 <__gethex+0x2d0>
 8010dba:	4639      	mov	r1, r7
 8010dbc:	4620      	mov	r0, r4
 8010dbe:	f000 fec4 	bl	8011b4a <__any_on>
 8010dc2:	4681      	mov	r9, r0
 8010dc4:	117a      	asrs	r2, r7, #5
 8010dc6:	2301      	movs	r3, #1
 8010dc8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010dcc:	f007 071f 	and.w	r7, r7, #31
 8010dd0:	40bb      	lsls	r3, r7
 8010dd2:	4213      	tst	r3, r2
 8010dd4:	4629      	mov	r1, r5
 8010dd6:	4620      	mov	r0, r4
 8010dd8:	bf18      	it	ne
 8010dda:	f049 0902 	orrne.w	r9, r9, #2
 8010dde:	f7ff fe21 	bl	8010a24 <rshift>
 8010de2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010de6:	1b76      	subs	r6, r6, r5
 8010de8:	2502      	movs	r5, #2
 8010dea:	f1b9 0f00 	cmp.w	r9, #0
 8010dee:	d047      	beq.n	8010e80 <__gethex+0x38c>
 8010df0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010df4:	2b02      	cmp	r3, #2
 8010df6:	d015      	beq.n	8010e24 <__gethex+0x330>
 8010df8:	2b03      	cmp	r3, #3
 8010dfa:	d017      	beq.n	8010e2c <__gethex+0x338>
 8010dfc:	2b01      	cmp	r3, #1
 8010dfe:	d109      	bne.n	8010e14 <__gethex+0x320>
 8010e00:	f019 0f02 	tst.w	r9, #2
 8010e04:	d006      	beq.n	8010e14 <__gethex+0x320>
 8010e06:	f8da 3000 	ldr.w	r3, [sl]
 8010e0a:	ea49 0903 	orr.w	r9, r9, r3
 8010e0e:	f019 0f01 	tst.w	r9, #1
 8010e12:	d10e      	bne.n	8010e32 <__gethex+0x33e>
 8010e14:	f045 0510 	orr.w	r5, r5, #16
 8010e18:	e032      	b.n	8010e80 <__gethex+0x38c>
 8010e1a:	f04f 0901 	mov.w	r9, #1
 8010e1e:	e7d1      	b.n	8010dc4 <__gethex+0x2d0>
 8010e20:	2501      	movs	r5, #1
 8010e22:	e7e2      	b.n	8010dea <__gethex+0x2f6>
 8010e24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e26:	f1c3 0301 	rsb	r3, r3, #1
 8010e2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010e2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d0f0      	beq.n	8010e14 <__gethex+0x320>
 8010e32:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010e36:	f104 0314 	add.w	r3, r4, #20
 8010e3a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010e3e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010e42:	f04f 0c00 	mov.w	ip, #0
 8010e46:	4618      	mov	r0, r3
 8010e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e4c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010e50:	d01b      	beq.n	8010e8a <__gethex+0x396>
 8010e52:	3201      	adds	r2, #1
 8010e54:	6002      	str	r2, [r0, #0]
 8010e56:	2d02      	cmp	r5, #2
 8010e58:	f104 0314 	add.w	r3, r4, #20
 8010e5c:	d13c      	bne.n	8010ed8 <__gethex+0x3e4>
 8010e5e:	f8d8 2000 	ldr.w	r2, [r8]
 8010e62:	3a01      	subs	r2, #1
 8010e64:	42b2      	cmp	r2, r6
 8010e66:	d109      	bne.n	8010e7c <__gethex+0x388>
 8010e68:	1171      	asrs	r1, r6, #5
 8010e6a:	2201      	movs	r2, #1
 8010e6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010e70:	f006 061f 	and.w	r6, r6, #31
 8010e74:	fa02 f606 	lsl.w	r6, r2, r6
 8010e78:	421e      	tst	r6, r3
 8010e7a:	d13a      	bne.n	8010ef2 <__gethex+0x3fe>
 8010e7c:	f045 0520 	orr.w	r5, r5, #32
 8010e80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010e82:	601c      	str	r4, [r3, #0]
 8010e84:	9b02      	ldr	r3, [sp, #8]
 8010e86:	601f      	str	r7, [r3, #0]
 8010e88:	e6b0      	b.n	8010bec <__gethex+0xf8>
 8010e8a:	4299      	cmp	r1, r3
 8010e8c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010e90:	d8d9      	bhi.n	8010e46 <__gethex+0x352>
 8010e92:	68a3      	ldr	r3, [r4, #8]
 8010e94:	459b      	cmp	fp, r3
 8010e96:	db17      	blt.n	8010ec8 <__gethex+0x3d4>
 8010e98:	6861      	ldr	r1, [r4, #4]
 8010e9a:	9801      	ldr	r0, [sp, #4]
 8010e9c:	3101      	adds	r1, #1
 8010e9e:	f000 f9c3 	bl	8011228 <_Balloc>
 8010ea2:	4681      	mov	r9, r0
 8010ea4:	b918      	cbnz	r0, 8010eae <__gethex+0x3ba>
 8010ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8010f10 <__gethex+0x41c>)
 8010ea8:	4602      	mov	r2, r0
 8010eaa:	2184      	movs	r1, #132	@ 0x84
 8010eac:	e6c5      	b.n	8010c3a <__gethex+0x146>
 8010eae:	6922      	ldr	r2, [r4, #16]
 8010eb0:	3202      	adds	r2, #2
 8010eb2:	f104 010c 	add.w	r1, r4, #12
 8010eb6:	0092      	lsls	r2, r2, #2
 8010eb8:	300c      	adds	r0, #12
 8010eba:	f7fe fefe 	bl	800fcba <memcpy>
 8010ebe:	4621      	mov	r1, r4
 8010ec0:	9801      	ldr	r0, [sp, #4]
 8010ec2:	f000 f9f1 	bl	80112a8 <_Bfree>
 8010ec6:	464c      	mov	r4, r9
 8010ec8:	6923      	ldr	r3, [r4, #16]
 8010eca:	1c5a      	adds	r2, r3, #1
 8010ecc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010ed0:	6122      	str	r2, [r4, #16]
 8010ed2:	2201      	movs	r2, #1
 8010ed4:	615a      	str	r2, [r3, #20]
 8010ed6:	e7be      	b.n	8010e56 <__gethex+0x362>
 8010ed8:	6922      	ldr	r2, [r4, #16]
 8010eda:	455a      	cmp	r2, fp
 8010edc:	dd0b      	ble.n	8010ef6 <__gethex+0x402>
 8010ede:	2101      	movs	r1, #1
 8010ee0:	4620      	mov	r0, r4
 8010ee2:	f7ff fd9f 	bl	8010a24 <rshift>
 8010ee6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010eea:	3701      	adds	r7, #1
 8010eec:	42bb      	cmp	r3, r7
 8010eee:	f6ff aee0 	blt.w	8010cb2 <__gethex+0x1be>
 8010ef2:	2501      	movs	r5, #1
 8010ef4:	e7c2      	b.n	8010e7c <__gethex+0x388>
 8010ef6:	f016 061f 	ands.w	r6, r6, #31
 8010efa:	d0fa      	beq.n	8010ef2 <__gethex+0x3fe>
 8010efc:	4453      	add	r3, sl
 8010efe:	f1c6 0620 	rsb	r6, r6, #32
 8010f02:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010f06:	f000 fa81 	bl	801140c <__hi0bits>
 8010f0a:	42b0      	cmp	r0, r6
 8010f0c:	dbe7      	blt.n	8010ede <__gethex+0x3ea>
 8010f0e:	e7f0      	b.n	8010ef2 <__gethex+0x3fe>
 8010f10:	080137d5 	.word	0x080137d5

08010f14 <L_shift>:
 8010f14:	f1c2 0208 	rsb	r2, r2, #8
 8010f18:	0092      	lsls	r2, r2, #2
 8010f1a:	b570      	push	{r4, r5, r6, lr}
 8010f1c:	f1c2 0620 	rsb	r6, r2, #32
 8010f20:	6843      	ldr	r3, [r0, #4]
 8010f22:	6804      	ldr	r4, [r0, #0]
 8010f24:	fa03 f506 	lsl.w	r5, r3, r6
 8010f28:	432c      	orrs	r4, r5
 8010f2a:	40d3      	lsrs	r3, r2
 8010f2c:	6004      	str	r4, [r0, #0]
 8010f2e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010f32:	4288      	cmp	r0, r1
 8010f34:	d3f4      	bcc.n	8010f20 <L_shift+0xc>
 8010f36:	bd70      	pop	{r4, r5, r6, pc}

08010f38 <__match>:
 8010f38:	b530      	push	{r4, r5, lr}
 8010f3a:	6803      	ldr	r3, [r0, #0]
 8010f3c:	3301      	adds	r3, #1
 8010f3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f42:	b914      	cbnz	r4, 8010f4a <__match+0x12>
 8010f44:	6003      	str	r3, [r0, #0]
 8010f46:	2001      	movs	r0, #1
 8010f48:	bd30      	pop	{r4, r5, pc}
 8010f4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f4e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010f52:	2d19      	cmp	r5, #25
 8010f54:	bf98      	it	ls
 8010f56:	3220      	addls	r2, #32
 8010f58:	42a2      	cmp	r2, r4
 8010f5a:	d0f0      	beq.n	8010f3e <__match+0x6>
 8010f5c:	2000      	movs	r0, #0
 8010f5e:	e7f3      	b.n	8010f48 <__match+0x10>

08010f60 <__hexnan>:
 8010f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f64:	680b      	ldr	r3, [r1, #0]
 8010f66:	6801      	ldr	r1, [r0, #0]
 8010f68:	115e      	asrs	r6, r3, #5
 8010f6a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010f6e:	f013 031f 	ands.w	r3, r3, #31
 8010f72:	b087      	sub	sp, #28
 8010f74:	bf18      	it	ne
 8010f76:	3604      	addne	r6, #4
 8010f78:	2500      	movs	r5, #0
 8010f7a:	1f37      	subs	r7, r6, #4
 8010f7c:	4682      	mov	sl, r0
 8010f7e:	4690      	mov	r8, r2
 8010f80:	9301      	str	r3, [sp, #4]
 8010f82:	f846 5c04 	str.w	r5, [r6, #-4]
 8010f86:	46b9      	mov	r9, r7
 8010f88:	463c      	mov	r4, r7
 8010f8a:	9502      	str	r5, [sp, #8]
 8010f8c:	46ab      	mov	fp, r5
 8010f8e:	784a      	ldrb	r2, [r1, #1]
 8010f90:	1c4b      	adds	r3, r1, #1
 8010f92:	9303      	str	r3, [sp, #12]
 8010f94:	b342      	cbz	r2, 8010fe8 <__hexnan+0x88>
 8010f96:	4610      	mov	r0, r2
 8010f98:	9105      	str	r1, [sp, #20]
 8010f9a:	9204      	str	r2, [sp, #16]
 8010f9c:	f7ff fd94 	bl	8010ac8 <__hexdig_fun>
 8010fa0:	2800      	cmp	r0, #0
 8010fa2:	d151      	bne.n	8011048 <__hexnan+0xe8>
 8010fa4:	9a04      	ldr	r2, [sp, #16]
 8010fa6:	9905      	ldr	r1, [sp, #20]
 8010fa8:	2a20      	cmp	r2, #32
 8010faa:	d818      	bhi.n	8010fde <__hexnan+0x7e>
 8010fac:	9b02      	ldr	r3, [sp, #8]
 8010fae:	459b      	cmp	fp, r3
 8010fb0:	dd13      	ble.n	8010fda <__hexnan+0x7a>
 8010fb2:	454c      	cmp	r4, r9
 8010fb4:	d206      	bcs.n	8010fc4 <__hexnan+0x64>
 8010fb6:	2d07      	cmp	r5, #7
 8010fb8:	dc04      	bgt.n	8010fc4 <__hexnan+0x64>
 8010fba:	462a      	mov	r2, r5
 8010fbc:	4649      	mov	r1, r9
 8010fbe:	4620      	mov	r0, r4
 8010fc0:	f7ff ffa8 	bl	8010f14 <L_shift>
 8010fc4:	4544      	cmp	r4, r8
 8010fc6:	d952      	bls.n	801106e <__hexnan+0x10e>
 8010fc8:	2300      	movs	r3, #0
 8010fca:	f1a4 0904 	sub.w	r9, r4, #4
 8010fce:	f844 3c04 	str.w	r3, [r4, #-4]
 8010fd2:	f8cd b008 	str.w	fp, [sp, #8]
 8010fd6:	464c      	mov	r4, r9
 8010fd8:	461d      	mov	r5, r3
 8010fda:	9903      	ldr	r1, [sp, #12]
 8010fdc:	e7d7      	b.n	8010f8e <__hexnan+0x2e>
 8010fde:	2a29      	cmp	r2, #41	@ 0x29
 8010fe0:	d157      	bne.n	8011092 <__hexnan+0x132>
 8010fe2:	3102      	adds	r1, #2
 8010fe4:	f8ca 1000 	str.w	r1, [sl]
 8010fe8:	f1bb 0f00 	cmp.w	fp, #0
 8010fec:	d051      	beq.n	8011092 <__hexnan+0x132>
 8010fee:	454c      	cmp	r4, r9
 8010ff0:	d206      	bcs.n	8011000 <__hexnan+0xa0>
 8010ff2:	2d07      	cmp	r5, #7
 8010ff4:	dc04      	bgt.n	8011000 <__hexnan+0xa0>
 8010ff6:	462a      	mov	r2, r5
 8010ff8:	4649      	mov	r1, r9
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	f7ff ff8a 	bl	8010f14 <L_shift>
 8011000:	4544      	cmp	r4, r8
 8011002:	d936      	bls.n	8011072 <__hexnan+0x112>
 8011004:	f1a8 0204 	sub.w	r2, r8, #4
 8011008:	4623      	mov	r3, r4
 801100a:	f853 1b04 	ldr.w	r1, [r3], #4
 801100e:	f842 1f04 	str.w	r1, [r2, #4]!
 8011012:	429f      	cmp	r7, r3
 8011014:	d2f9      	bcs.n	801100a <__hexnan+0xaa>
 8011016:	1b3b      	subs	r3, r7, r4
 8011018:	f023 0303 	bic.w	r3, r3, #3
 801101c:	3304      	adds	r3, #4
 801101e:	3401      	adds	r4, #1
 8011020:	3e03      	subs	r6, #3
 8011022:	42b4      	cmp	r4, r6
 8011024:	bf88      	it	hi
 8011026:	2304      	movhi	r3, #4
 8011028:	4443      	add	r3, r8
 801102a:	2200      	movs	r2, #0
 801102c:	f843 2b04 	str.w	r2, [r3], #4
 8011030:	429f      	cmp	r7, r3
 8011032:	d2fb      	bcs.n	801102c <__hexnan+0xcc>
 8011034:	683b      	ldr	r3, [r7, #0]
 8011036:	b91b      	cbnz	r3, 8011040 <__hexnan+0xe0>
 8011038:	4547      	cmp	r7, r8
 801103a:	d128      	bne.n	801108e <__hexnan+0x12e>
 801103c:	2301      	movs	r3, #1
 801103e:	603b      	str	r3, [r7, #0]
 8011040:	2005      	movs	r0, #5
 8011042:	b007      	add	sp, #28
 8011044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011048:	3501      	adds	r5, #1
 801104a:	2d08      	cmp	r5, #8
 801104c:	f10b 0b01 	add.w	fp, fp, #1
 8011050:	dd06      	ble.n	8011060 <__hexnan+0x100>
 8011052:	4544      	cmp	r4, r8
 8011054:	d9c1      	bls.n	8010fda <__hexnan+0x7a>
 8011056:	2300      	movs	r3, #0
 8011058:	f844 3c04 	str.w	r3, [r4, #-4]
 801105c:	2501      	movs	r5, #1
 801105e:	3c04      	subs	r4, #4
 8011060:	6822      	ldr	r2, [r4, #0]
 8011062:	f000 000f 	and.w	r0, r0, #15
 8011066:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801106a:	6020      	str	r0, [r4, #0]
 801106c:	e7b5      	b.n	8010fda <__hexnan+0x7a>
 801106e:	2508      	movs	r5, #8
 8011070:	e7b3      	b.n	8010fda <__hexnan+0x7a>
 8011072:	9b01      	ldr	r3, [sp, #4]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d0dd      	beq.n	8011034 <__hexnan+0xd4>
 8011078:	f1c3 0320 	rsb	r3, r3, #32
 801107c:	f04f 32ff 	mov.w	r2, #4294967295
 8011080:	40da      	lsrs	r2, r3
 8011082:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011086:	4013      	ands	r3, r2
 8011088:	f846 3c04 	str.w	r3, [r6, #-4]
 801108c:	e7d2      	b.n	8011034 <__hexnan+0xd4>
 801108e:	3f04      	subs	r7, #4
 8011090:	e7d0      	b.n	8011034 <__hexnan+0xd4>
 8011092:	2004      	movs	r0, #4
 8011094:	e7d5      	b.n	8011042 <__hexnan+0xe2>
	...

08011098 <malloc>:
 8011098:	4b02      	ldr	r3, [pc, #8]	@ (80110a4 <malloc+0xc>)
 801109a:	4601      	mov	r1, r0
 801109c:	6818      	ldr	r0, [r3, #0]
 801109e:	f000 b825 	b.w	80110ec <_malloc_r>
 80110a2:	bf00      	nop
 80110a4:	2000021c 	.word	0x2000021c

080110a8 <sbrk_aligned>:
 80110a8:	b570      	push	{r4, r5, r6, lr}
 80110aa:	4e0f      	ldr	r6, [pc, #60]	@ (80110e8 <sbrk_aligned+0x40>)
 80110ac:	460c      	mov	r4, r1
 80110ae:	6831      	ldr	r1, [r6, #0]
 80110b0:	4605      	mov	r5, r0
 80110b2:	b911      	cbnz	r1, 80110ba <sbrk_aligned+0x12>
 80110b4:	f001 f810 	bl	80120d8 <_sbrk_r>
 80110b8:	6030      	str	r0, [r6, #0]
 80110ba:	4621      	mov	r1, r4
 80110bc:	4628      	mov	r0, r5
 80110be:	f001 f80b 	bl	80120d8 <_sbrk_r>
 80110c2:	1c43      	adds	r3, r0, #1
 80110c4:	d103      	bne.n	80110ce <sbrk_aligned+0x26>
 80110c6:	f04f 34ff 	mov.w	r4, #4294967295
 80110ca:	4620      	mov	r0, r4
 80110cc:	bd70      	pop	{r4, r5, r6, pc}
 80110ce:	1cc4      	adds	r4, r0, #3
 80110d0:	f024 0403 	bic.w	r4, r4, #3
 80110d4:	42a0      	cmp	r0, r4
 80110d6:	d0f8      	beq.n	80110ca <sbrk_aligned+0x22>
 80110d8:	1a21      	subs	r1, r4, r0
 80110da:	4628      	mov	r0, r5
 80110dc:	f000 fffc 	bl	80120d8 <_sbrk_r>
 80110e0:	3001      	adds	r0, #1
 80110e2:	d1f2      	bne.n	80110ca <sbrk_aligned+0x22>
 80110e4:	e7ef      	b.n	80110c6 <sbrk_aligned+0x1e>
 80110e6:	bf00      	nop
 80110e8:	20000c0c 	.word	0x20000c0c

080110ec <_malloc_r>:
 80110ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110f0:	1ccd      	adds	r5, r1, #3
 80110f2:	f025 0503 	bic.w	r5, r5, #3
 80110f6:	3508      	adds	r5, #8
 80110f8:	2d0c      	cmp	r5, #12
 80110fa:	bf38      	it	cc
 80110fc:	250c      	movcc	r5, #12
 80110fe:	2d00      	cmp	r5, #0
 8011100:	4606      	mov	r6, r0
 8011102:	db01      	blt.n	8011108 <_malloc_r+0x1c>
 8011104:	42a9      	cmp	r1, r5
 8011106:	d904      	bls.n	8011112 <_malloc_r+0x26>
 8011108:	230c      	movs	r3, #12
 801110a:	6033      	str	r3, [r6, #0]
 801110c:	2000      	movs	r0, #0
 801110e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011112:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80111e8 <_malloc_r+0xfc>
 8011116:	f000 f87b 	bl	8011210 <__malloc_lock>
 801111a:	f8d8 3000 	ldr.w	r3, [r8]
 801111e:	461c      	mov	r4, r3
 8011120:	bb44      	cbnz	r4, 8011174 <_malloc_r+0x88>
 8011122:	4629      	mov	r1, r5
 8011124:	4630      	mov	r0, r6
 8011126:	f7ff ffbf 	bl	80110a8 <sbrk_aligned>
 801112a:	1c43      	adds	r3, r0, #1
 801112c:	4604      	mov	r4, r0
 801112e:	d158      	bne.n	80111e2 <_malloc_r+0xf6>
 8011130:	f8d8 4000 	ldr.w	r4, [r8]
 8011134:	4627      	mov	r7, r4
 8011136:	2f00      	cmp	r7, #0
 8011138:	d143      	bne.n	80111c2 <_malloc_r+0xd6>
 801113a:	2c00      	cmp	r4, #0
 801113c:	d04b      	beq.n	80111d6 <_malloc_r+0xea>
 801113e:	6823      	ldr	r3, [r4, #0]
 8011140:	4639      	mov	r1, r7
 8011142:	4630      	mov	r0, r6
 8011144:	eb04 0903 	add.w	r9, r4, r3
 8011148:	f000 ffc6 	bl	80120d8 <_sbrk_r>
 801114c:	4581      	cmp	r9, r0
 801114e:	d142      	bne.n	80111d6 <_malloc_r+0xea>
 8011150:	6821      	ldr	r1, [r4, #0]
 8011152:	1a6d      	subs	r5, r5, r1
 8011154:	4629      	mov	r1, r5
 8011156:	4630      	mov	r0, r6
 8011158:	f7ff ffa6 	bl	80110a8 <sbrk_aligned>
 801115c:	3001      	adds	r0, #1
 801115e:	d03a      	beq.n	80111d6 <_malloc_r+0xea>
 8011160:	6823      	ldr	r3, [r4, #0]
 8011162:	442b      	add	r3, r5
 8011164:	6023      	str	r3, [r4, #0]
 8011166:	f8d8 3000 	ldr.w	r3, [r8]
 801116a:	685a      	ldr	r2, [r3, #4]
 801116c:	bb62      	cbnz	r2, 80111c8 <_malloc_r+0xdc>
 801116e:	f8c8 7000 	str.w	r7, [r8]
 8011172:	e00f      	b.n	8011194 <_malloc_r+0xa8>
 8011174:	6822      	ldr	r2, [r4, #0]
 8011176:	1b52      	subs	r2, r2, r5
 8011178:	d420      	bmi.n	80111bc <_malloc_r+0xd0>
 801117a:	2a0b      	cmp	r2, #11
 801117c:	d917      	bls.n	80111ae <_malloc_r+0xc2>
 801117e:	1961      	adds	r1, r4, r5
 8011180:	42a3      	cmp	r3, r4
 8011182:	6025      	str	r5, [r4, #0]
 8011184:	bf18      	it	ne
 8011186:	6059      	strne	r1, [r3, #4]
 8011188:	6863      	ldr	r3, [r4, #4]
 801118a:	bf08      	it	eq
 801118c:	f8c8 1000 	streq.w	r1, [r8]
 8011190:	5162      	str	r2, [r4, r5]
 8011192:	604b      	str	r3, [r1, #4]
 8011194:	4630      	mov	r0, r6
 8011196:	f000 f841 	bl	801121c <__malloc_unlock>
 801119a:	f104 000b 	add.w	r0, r4, #11
 801119e:	1d23      	adds	r3, r4, #4
 80111a0:	f020 0007 	bic.w	r0, r0, #7
 80111a4:	1ac2      	subs	r2, r0, r3
 80111a6:	bf1c      	itt	ne
 80111a8:	1a1b      	subne	r3, r3, r0
 80111aa:	50a3      	strne	r3, [r4, r2]
 80111ac:	e7af      	b.n	801110e <_malloc_r+0x22>
 80111ae:	6862      	ldr	r2, [r4, #4]
 80111b0:	42a3      	cmp	r3, r4
 80111b2:	bf0c      	ite	eq
 80111b4:	f8c8 2000 	streq.w	r2, [r8]
 80111b8:	605a      	strne	r2, [r3, #4]
 80111ba:	e7eb      	b.n	8011194 <_malloc_r+0xa8>
 80111bc:	4623      	mov	r3, r4
 80111be:	6864      	ldr	r4, [r4, #4]
 80111c0:	e7ae      	b.n	8011120 <_malloc_r+0x34>
 80111c2:	463c      	mov	r4, r7
 80111c4:	687f      	ldr	r7, [r7, #4]
 80111c6:	e7b6      	b.n	8011136 <_malloc_r+0x4a>
 80111c8:	461a      	mov	r2, r3
 80111ca:	685b      	ldr	r3, [r3, #4]
 80111cc:	42a3      	cmp	r3, r4
 80111ce:	d1fb      	bne.n	80111c8 <_malloc_r+0xdc>
 80111d0:	2300      	movs	r3, #0
 80111d2:	6053      	str	r3, [r2, #4]
 80111d4:	e7de      	b.n	8011194 <_malloc_r+0xa8>
 80111d6:	230c      	movs	r3, #12
 80111d8:	6033      	str	r3, [r6, #0]
 80111da:	4630      	mov	r0, r6
 80111dc:	f000 f81e 	bl	801121c <__malloc_unlock>
 80111e0:	e794      	b.n	801110c <_malloc_r+0x20>
 80111e2:	6005      	str	r5, [r0, #0]
 80111e4:	e7d6      	b.n	8011194 <_malloc_r+0xa8>
 80111e6:	bf00      	nop
 80111e8:	20000c10 	.word	0x20000c10

080111ec <__ascii_mbtowc>:
 80111ec:	b082      	sub	sp, #8
 80111ee:	b901      	cbnz	r1, 80111f2 <__ascii_mbtowc+0x6>
 80111f0:	a901      	add	r1, sp, #4
 80111f2:	b142      	cbz	r2, 8011206 <__ascii_mbtowc+0x1a>
 80111f4:	b14b      	cbz	r3, 801120a <__ascii_mbtowc+0x1e>
 80111f6:	7813      	ldrb	r3, [r2, #0]
 80111f8:	600b      	str	r3, [r1, #0]
 80111fa:	7812      	ldrb	r2, [r2, #0]
 80111fc:	1e10      	subs	r0, r2, #0
 80111fe:	bf18      	it	ne
 8011200:	2001      	movne	r0, #1
 8011202:	b002      	add	sp, #8
 8011204:	4770      	bx	lr
 8011206:	4610      	mov	r0, r2
 8011208:	e7fb      	b.n	8011202 <__ascii_mbtowc+0x16>
 801120a:	f06f 0001 	mvn.w	r0, #1
 801120e:	e7f8      	b.n	8011202 <__ascii_mbtowc+0x16>

08011210 <__malloc_lock>:
 8011210:	4801      	ldr	r0, [pc, #4]	@ (8011218 <__malloc_lock+0x8>)
 8011212:	f7fe bd50 	b.w	800fcb6 <__retarget_lock_acquire_recursive>
 8011216:	bf00      	nop
 8011218:	20000c08 	.word	0x20000c08

0801121c <__malloc_unlock>:
 801121c:	4801      	ldr	r0, [pc, #4]	@ (8011224 <__malloc_unlock+0x8>)
 801121e:	f7fe bd4b 	b.w	800fcb8 <__retarget_lock_release_recursive>
 8011222:	bf00      	nop
 8011224:	20000c08 	.word	0x20000c08

08011228 <_Balloc>:
 8011228:	b570      	push	{r4, r5, r6, lr}
 801122a:	69c6      	ldr	r6, [r0, #28]
 801122c:	4604      	mov	r4, r0
 801122e:	460d      	mov	r5, r1
 8011230:	b976      	cbnz	r6, 8011250 <_Balloc+0x28>
 8011232:	2010      	movs	r0, #16
 8011234:	f7ff ff30 	bl	8011098 <malloc>
 8011238:	4602      	mov	r2, r0
 801123a:	61e0      	str	r0, [r4, #28]
 801123c:	b920      	cbnz	r0, 8011248 <_Balloc+0x20>
 801123e:	4b18      	ldr	r3, [pc, #96]	@ (80112a0 <_Balloc+0x78>)
 8011240:	4818      	ldr	r0, [pc, #96]	@ (80112a4 <_Balloc+0x7c>)
 8011242:	216b      	movs	r1, #107	@ 0x6b
 8011244:	f000 ff58 	bl	80120f8 <__assert_func>
 8011248:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801124c:	6006      	str	r6, [r0, #0]
 801124e:	60c6      	str	r6, [r0, #12]
 8011250:	69e6      	ldr	r6, [r4, #28]
 8011252:	68f3      	ldr	r3, [r6, #12]
 8011254:	b183      	cbz	r3, 8011278 <_Balloc+0x50>
 8011256:	69e3      	ldr	r3, [r4, #28]
 8011258:	68db      	ldr	r3, [r3, #12]
 801125a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801125e:	b9b8      	cbnz	r0, 8011290 <_Balloc+0x68>
 8011260:	2101      	movs	r1, #1
 8011262:	fa01 f605 	lsl.w	r6, r1, r5
 8011266:	1d72      	adds	r2, r6, #5
 8011268:	0092      	lsls	r2, r2, #2
 801126a:	4620      	mov	r0, r4
 801126c:	f000 ff62 	bl	8012134 <_calloc_r>
 8011270:	b160      	cbz	r0, 801128c <_Balloc+0x64>
 8011272:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011276:	e00e      	b.n	8011296 <_Balloc+0x6e>
 8011278:	2221      	movs	r2, #33	@ 0x21
 801127a:	2104      	movs	r1, #4
 801127c:	4620      	mov	r0, r4
 801127e:	f000 ff59 	bl	8012134 <_calloc_r>
 8011282:	69e3      	ldr	r3, [r4, #28]
 8011284:	60f0      	str	r0, [r6, #12]
 8011286:	68db      	ldr	r3, [r3, #12]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d1e4      	bne.n	8011256 <_Balloc+0x2e>
 801128c:	2000      	movs	r0, #0
 801128e:	bd70      	pop	{r4, r5, r6, pc}
 8011290:	6802      	ldr	r2, [r0, #0]
 8011292:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011296:	2300      	movs	r3, #0
 8011298:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801129c:	e7f7      	b.n	801128e <_Balloc+0x66>
 801129e:	bf00      	nop
 80112a0:	08013766 	.word	0x08013766
 80112a4:	08013846 	.word	0x08013846

080112a8 <_Bfree>:
 80112a8:	b570      	push	{r4, r5, r6, lr}
 80112aa:	69c6      	ldr	r6, [r0, #28]
 80112ac:	4605      	mov	r5, r0
 80112ae:	460c      	mov	r4, r1
 80112b0:	b976      	cbnz	r6, 80112d0 <_Bfree+0x28>
 80112b2:	2010      	movs	r0, #16
 80112b4:	f7ff fef0 	bl	8011098 <malloc>
 80112b8:	4602      	mov	r2, r0
 80112ba:	61e8      	str	r0, [r5, #28]
 80112bc:	b920      	cbnz	r0, 80112c8 <_Bfree+0x20>
 80112be:	4b09      	ldr	r3, [pc, #36]	@ (80112e4 <_Bfree+0x3c>)
 80112c0:	4809      	ldr	r0, [pc, #36]	@ (80112e8 <_Bfree+0x40>)
 80112c2:	218f      	movs	r1, #143	@ 0x8f
 80112c4:	f000 ff18 	bl	80120f8 <__assert_func>
 80112c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80112cc:	6006      	str	r6, [r0, #0]
 80112ce:	60c6      	str	r6, [r0, #12]
 80112d0:	b13c      	cbz	r4, 80112e2 <_Bfree+0x3a>
 80112d2:	69eb      	ldr	r3, [r5, #28]
 80112d4:	6862      	ldr	r2, [r4, #4]
 80112d6:	68db      	ldr	r3, [r3, #12]
 80112d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80112dc:	6021      	str	r1, [r4, #0]
 80112de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80112e2:	bd70      	pop	{r4, r5, r6, pc}
 80112e4:	08013766 	.word	0x08013766
 80112e8:	08013846 	.word	0x08013846

080112ec <__multadd>:
 80112ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112f0:	690d      	ldr	r5, [r1, #16]
 80112f2:	4607      	mov	r7, r0
 80112f4:	460c      	mov	r4, r1
 80112f6:	461e      	mov	r6, r3
 80112f8:	f101 0c14 	add.w	ip, r1, #20
 80112fc:	2000      	movs	r0, #0
 80112fe:	f8dc 3000 	ldr.w	r3, [ip]
 8011302:	b299      	uxth	r1, r3
 8011304:	fb02 6101 	mla	r1, r2, r1, r6
 8011308:	0c1e      	lsrs	r6, r3, #16
 801130a:	0c0b      	lsrs	r3, r1, #16
 801130c:	fb02 3306 	mla	r3, r2, r6, r3
 8011310:	b289      	uxth	r1, r1
 8011312:	3001      	adds	r0, #1
 8011314:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011318:	4285      	cmp	r5, r0
 801131a:	f84c 1b04 	str.w	r1, [ip], #4
 801131e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011322:	dcec      	bgt.n	80112fe <__multadd+0x12>
 8011324:	b30e      	cbz	r6, 801136a <__multadd+0x7e>
 8011326:	68a3      	ldr	r3, [r4, #8]
 8011328:	42ab      	cmp	r3, r5
 801132a:	dc19      	bgt.n	8011360 <__multadd+0x74>
 801132c:	6861      	ldr	r1, [r4, #4]
 801132e:	4638      	mov	r0, r7
 8011330:	3101      	adds	r1, #1
 8011332:	f7ff ff79 	bl	8011228 <_Balloc>
 8011336:	4680      	mov	r8, r0
 8011338:	b928      	cbnz	r0, 8011346 <__multadd+0x5a>
 801133a:	4602      	mov	r2, r0
 801133c:	4b0c      	ldr	r3, [pc, #48]	@ (8011370 <__multadd+0x84>)
 801133e:	480d      	ldr	r0, [pc, #52]	@ (8011374 <__multadd+0x88>)
 8011340:	21ba      	movs	r1, #186	@ 0xba
 8011342:	f000 fed9 	bl	80120f8 <__assert_func>
 8011346:	6922      	ldr	r2, [r4, #16]
 8011348:	3202      	adds	r2, #2
 801134a:	f104 010c 	add.w	r1, r4, #12
 801134e:	0092      	lsls	r2, r2, #2
 8011350:	300c      	adds	r0, #12
 8011352:	f7fe fcb2 	bl	800fcba <memcpy>
 8011356:	4621      	mov	r1, r4
 8011358:	4638      	mov	r0, r7
 801135a:	f7ff ffa5 	bl	80112a8 <_Bfree>
 801135e:	4644      	mov	r4, r8
 8011360:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011364:	3501      	adds	r5, #1
 8011366:	615e      	str	r6, [r3, #20]
 8011368:	6125      	str	r5, [r4, #16]
 801136a:	4620      	mov	r0, r4
 801136c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011370:	080137d5 	.word	0x080137d5
 8011374:	08013846 	.word	0x08013846

08011378 <__s2b>:
 8011378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801137c:	460c      	mov	r4, r1
 801137e:	4615      	mov	r5, r2
 8011380:	461f      	mov	r7, r3
 8011382:	2209      	movs	r2, #9
 8011384:	3308      	adds	r3, #8
 8011386:	4606      	mov	r6, r0
 8011388:	fb93 f3f2 	sdiv	r3, r3, r2
 801138c:	2100      	movs	r1, #0
 801138e:	2201      	movs	r2, #1
 8011390:	429a      	cmp	r2, r3
 8011392:	db09      	blt.n	80113a8 <__s2b+0x30>
 8011394:	4630      	mov	r0, r6
 8011396:	f7ff ff47 	bl	8011228 <_Balloc>
 801139a:	b940      	cbnz	r0, 80113ae <__s2b+0x36>
 801139c:	4602      	mov	r2, r0
 801139e:	4b19      	ldr	r3, [pc, #100]	@ (8011404 <__s2b+0x8c>)
 80113a0:	4819      	ldr	r0, [pc, #100]	@ (8011408 <__s2b+0x90>)
 80113a2:	21d3      	movs	r1, #211	@ 0xd3
 80113a4:	f000 fea8 	bl	80120f8 <__assert_func>
 80113a8:	0052      	lsls	r2, r2, #1
 80113aa:	3101      	adds	r1, #1
 80113ac:	e7f0      	b.n	8011390 <__s2b+0x18>
 80113ae:	9b08      	ldr	r3, [sp, #32]
 80113b0:	6143      	str	r3, [r0, #20]
 80113b2:	2d09      	cmp	r5, #9
 80113b4:	f04f 0301 	mov.w	r3, #1
 80113b8:	6103      	str	r3, [r0, #16]
 80113ba:	dd16      	ble.n	80113ea <__s2b+0x72>
 80113bc:	f104 0909 	add.w	r9, r4, #9
 80113c0:	46c8      	mov	r8, r9
 80113c2:	442c      	add	r4, r5
 80113c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80113c8:	4601      	mov	r1, r0
 80113ca:	3b30      	subs	r3, #48	@ 0x30
 80113cc:	220a      	movs	r2, #10
 80113ce:	4630      	mov	r0, r6
 80113d0:	f7ff ff8c 	bl	80112ec <__multadd>
 80113d4:	45a0      	cmp	r8, r4
 80113d6:	d1f5      	bne.n	80113c4 <__s2b+0x4c>
 80113d8:	f1a5 0408 	sub.w	r4, r5, #8
 80113dc:	444c      	add	r4, r9
 80113de:	1b2d      	subs	r5, r5, r4
 80113e0:	1963      	adds	r3, r4, r5
 80113e2:	42bb      	cmp	r3, r7
 80113e4:	db04      	blt.n	80113f0 <__s2b+0x78>
 80113e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113ea:	340a      	adds	r4, #10
 80113ec:	2509      	movs	r5, #9
 80113ee:	e7f6      	b.n	80113de <__s2b+0x66>
 80113f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80113f4:	4601      	mov	r1, r0
 80113f6:	3b30      	subs	r3, #48	@ 0x30
 80113f8:	220a      	movs	r2, #10
 80113fa:	4630      	mov	r0, r6
 80113fc:	f7ff ff76 	bl	80112ec <__multadd>
 8011400:	e7ee      	b.n	80113e0 <__s2b+0x68>
 8011402:	bf00      	nop
 8011404:	080137d5 	.word	0x080137d5
 8011408:	08013846 	.word	0x08013846

0801140c <__hi0bits>:
 801140c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011410:	4603      	mov	r3, r0
 8011412:	bf36      	itet	cc
 8011414:	0403      	lslcc	r3, r0, #16
 8011416:	2000      	movcs	r0, #0
 8011418:	2010      	movcc	r0, #16
 801141a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801141e:	bf3c      	itt	cc
 8011420:	021b      	lslcc	r3, r3, #8
 8011422:	3008      	addcc	r0, #8
 8011424:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011428:	bf3c      	itt	cc
 801142a:	011b      	lslcc	r3, r3, #4
 801142c:	3004      	addcc	r0, #4
 801142e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011432:	bf3c      	itt	cc
 8011434:	009b      	lslcc	r3, r3, #2
 8011436:	3002      	addcc	r0, #2
 8011438:	2b00      	cmp	r3, #0
 801143a:	db05      	blt.n	8011448 <__hi0bits+0x3c>
 801143c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011440:	f100 0001 	add.w	r0, r0, #1
 8011444:	bf08      	it	eq
 8011446:	2020      	moveq	r0, #32
 8011448:	4770      	bx	lr

0801144a <__lo0bits>:
 801144a:	6803      	ldr	r3, [r0, #0]
 801144c:	4602      	mov	r2, r0
 801144e:	f013 0007 	ands.w	r0, r3, #7
 8011452:	d00b      	beq.n	801146c <__lo0bits+0x22>
 8011454:	07d9      	lsls	r1, r3, #31
 8011456:	d421      	bmi.n	801149c <__lo0bits+0x52>
 8011458:	0798      	lsls	r0, r3, #30
 801145a:	bf49      	itett	mi
 801145c:	085b      	lsrmi	r3, r3, #1
 801145e:	089b      	lsrpl	r3, r3, #2
 8011460:	2001      	movmi	r0, #1
 8011462:	6013      	strmi	r3, [r2, #0]
 8011464:	bf5c      	itt	pl
 8011466:	6013      	strpl	r3, [r2, #0]
 8011468:	2002      	movpl	r0, #2
 801146a:	4770      	bx	lr
 801146c:	b299      	uxth	r1, r3
 801146e:	b909      	cbnz	r1, 8011474 <__lo0bits+0x2a>
 8011470:	0c1b      	lsrs	r3, r3, #16
 8011472:	2010      	movs	r0, #16
 8011474:	b2d9      	uxtb	r1, r3
 8011476:	b909      	cbnz	r1, 801147c <__lo0bits+0x32>
 8011478:	3008      	adds	r0, #8
 801147a:	0a1b      	lsrs	r3, r3, #8
 801147c:	0719      	lsls	r1, r3, #28
 801147e:	bf04      	itt	eq
 8011480:	091b      	lsreq	r3, r3, #4
 8011482:	3004      	addeq	r0, #4
 8011484:	0799      	lsls	r1, r3, #30
 8011486:	bf04      	itt	eq
 8011488:	089b      	lsreq	r3, r3, #2
 801148a:	3002      	addeq	r0, #2
 801148c:	07d9      	lsls	r1, r3, #31
 801148e:	d403      	bmi.n	8011498 <__lo0bits+0x4e>
 8011490:	085b      	lsrs	r3, r3, #1
 8011492:	f100 0001 	add.w	r0, r0, #1
 8011496:	d003      	beq.n	80114a0 <__lo0bits+0x56>
 8011498:	6013      	str	r3, [r2, #0]
 801149a:	4770      	bx	lr
 801149c:	2000      	movs	r0, #0
 801149e:	4770      	bx	lr
 80114a0:	2020      	movs	r0, #32
 80114a2:	4770      	bx	lr

080114a4 <__i2b>:
 80114a4:	b510      	push	{r4, lr}
 80114a6:	460c      	mov	r4, r1
 80114a8:	2101      	movs	r1, #1
 80114aa:	f7ff febd 	bl	8011228 <_Balloc>
 80114ae:	4602      	mov	r2, r0
 80114b0:	b928      	cbnz	r0, 80114be <__i2b+0x1a>
 80114b2:	4b05      	ldr	r3, [pc, #20]	@ (80114c8 <__i2b+0x24>)
 80114b4:	4805      	ldr	r0, [pc, #20]	@ (80114cc <__i2b+0x28>)
 80114b6:	f240 1145 	movw	r1, #325	@ 0x145
 80114ba:	f000 fe1d 	bl	80120f8 <__assert_func>
 80114be:	2301      	movs	r3, #1
 80114c0:	6144      	str	r4, [r0, #20]
 80114c2:	6103      	str	r3, [r0, #16]
 80114c4:	bd10      	pop	{r4, pc}
 80114c6:	bf00      	nop
 80114c8:	080137d5 	.word	0x080137d5
 80114cc:	08013846 	.word	0x08013846

080114d0 <__multiply>:
 80114d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114d4:	4614      	mov	r4, r2
 80114d6:	690a      	ldr	r2, [r1, #16]
 80114d8:	6923      	ldr	r3, [r4, #16]
 80114da:	429a      	cmp	r2, r3
 80114dc:	bfa8      	it	ge
 80114de:	4623      	movge	r3, r4
 80114e0:	460f      	mov	r7, r1
 80114e2:	bfa4      	itt	ge
 80114e4:	460c      	movge	r4, r1
 80114e6:	461f      	movge	r7, r3
 80114e8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80114ec:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80114f0:	68a3      	ldr	r3, [r4, #8]
 80114f2:	6861      	ldr	r1, [r4, #4]
 80114f4:	eb0a 0609 	add.w	r6, sl, r9
 80114f8:	42b3      	cmp	r3, r6
 80114fa:	b085      	sub	sp, #20
 80114fc:	bfb8      	it	lt
 80114fe:	3101      	addlt	r1, #1
 8011500:	f7ff fe92 	bl	8011228 <_Balloc>
 8011504:	b930      	cbnz	r0, 8011514 <__multiply+0x44>
 8011506:	4602      	mov	r2, r0
 8011508:	4b44      	ldr	r3, [pc, #272]	@ (801161c <__multiply+0x14c>)
 801150a:	4845      	ldr	r0, [pc, #276]	@ (8011620 <__multiply+0x150>)
 801150c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011510:	f000 fdf2 	bl	80120f8 <__assert_func>
 8011514:	f100 0514 	add.w	r5, r0, #20
 8011518:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801151c:	462b      	mov	r3, r5
 801151e:	2200      	movs	r2, #0
 8011520:	4543      	cmp	r3, r8
 8011522:	d321      	bcc.n	8011568 <__multiply+0x98>
 8011524:	f107 0114 	add.w	r1, r7, #20
 8011528:	f104 0214 	add.w	r2, r4, #20
 801152c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011530:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011534:	9302      	str	r3, [sp, #8]
 8011536:	1b13      	subs	r3, r2, r4
 8011538:	3b15      	subs	r3, #21
 801153a:	f023 0303 	bic.w	r3, r3, #3
 801153e:	3304      	adds	r3, #4
 8011540:	f104 0715 	add.w	r7, r4, #21
 8011544:	42ba      	cmp	r2, r7
 8011546:	bf38      	it	cc
 8011548:	2304      	movcc	r3, #4
 801154a:	9301      	str	r3, [sp, #4]
 801154c:	9b02      	ldr	r3, [sp, #8]
 801154e:	9103      	str	r1, [sp, #12]
 8011550:	428b      	cmp	r3, r1
 8011552:	d80c      	bhi.n	801156e <__multiply+0x9e>
 8011554:	2e00      	cmp	r6, #0
 8011556:	dd03      	ble.n	8011560 <__multiply+0x90>
 8011558:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801155c:	2b00      	cmp	r3, #0
 801155e:	d05b      	beq.n	8011618 <__multiply+0x148>
 8011560:	6106      	str	r6, [r0, #16]
 8011562:	b005      	add	sp, #20
 8011564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011568:	f843 2b04 	str.w	r2, [r3], #4
 801156c:	e7d8      	b.n	8011520 <__multiply+0x50>
 801156e:	f8b1 a000 	ldrh.w	sl, [r1]
 8011572:	f1ba 0f00 	cmp.w	sl, #0
 8011576:	d024      	beq.n	80115c2 <__multiply+0xf2>
 8011578:	f104 0e14 	add.w	lr, r4, #20
 801157c:	46a9      	mov	r9, r5
 801157e:	f04f 0c00 	mov.w	ip, #0
 8011582:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011586:	f8d9 3000 	ldr.w	r3, [r9]
 801158a:	fa1f fb87 	uxth.w	fp, r7
 801158e:	b29b      	uxth	r3, r3
 8011590:	fb0a 330b 	mla	r3, sl, fp, r3
 8011594:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011598:	f8d9 7000 	ldr.w	r7, [r9]
 801159c:	4463      	add	r3, ip
 801159e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80115a2:	fb0a c70b 	mla	r7, sl, fp, ip
 80115a6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80115aa:	b29b      	uxth	r3, r3
 80115ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80115b0:	4572      	cmp	r2, lr
 80115b2:	f849 3b04 	str.w	r3, [r9], #4
 80115b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80115ba:	d8e2      	bhi.n	8011582 <__multiply+0xb2>
 80115bc:	9b01      	ldr	r3, [sp, #4]
 80115be:	f845 c003 	str.w	ip, [r5, r3]
 80115c2:	9b03      	ldr	r3, [sp, #12]
 80115c4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80115c8:	3104      	adds	r1, #4
 80115ca:	f1b9 0f00 	cmp.w	r9, #0
 80115ce:	d021      	beq.n	8011614 <__multiply+0x144>
 80115d0:	682b      	ldr	r3, [r5, #0]
 80115d2:	f104 0c14 	add.w	ip, r4, #20
 80115d6:	46ae      	mov	lr, r5
 80115d8:	f04f 0a00 	mov.w	sl, #0
 80115dc:	f8bc b000 	ldrh.w	fp, [ip]
 80115e0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80115e4:	fb09 770b 	mla	r7, r9, fp, r7
 80115e8:	4457      	add	r7, sl
 80115ea:	b29b      	uxth	r3, r3
 80115ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80115f0:	f84e 3b04 	str.w	r3, [lr], #4
 80115f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80115f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80115fc:	f8be 3000 	ldrh.w	r3, [lr]
 8011600:	fb09 330a 	mla	r3, r9, sl, r3
 8011604:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011608:	4562      	cmp	r2, ip
 801160a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801160e:	d8e5      	bhi.n	80115dc <__multiply+0x10c>
 8011610:	9f01      	ldr	r7, [sp, #4]
 8011612:	51eb      	str	r3, [r5, r7]
 8011614:	3504      	adds	r5, #4
 8011616:	e799      	b.n	801154c <__multiply+0x7c>
 8011618:	3e01      	subs	r6, #1
 801161a:	e79b      	b.n	8011554 <__multiply+0x84>
 801161c:	080137d5 	.word	0x080137d5
 8011620:	08013846 	.word	0x08013846

08011624 <__pow5mult>:
 8011624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011628:	4615      	mov	r5, r2
 801162a:	f012 0203 	ands.w	r2, r2, #3
 801162e:	4607      	mov	r7, r0
 8011630:	460e      	mov	r6, r1
 8011632:	d007      	beq.n	8011644 <__pow5mult+0x20>
 8011634:	4c25      	ldr	r4, [pc, #148]	@ (80116cc <__pow5mult+0xa8>)
 8011636:	3a01      	subs	r2, #1
 8011638:	2300      	movs	r3, #0
 801163a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801163e:	f7ff fe55 	bl	80112ec <__multadd>
 8011642:	4606      	mov	r6, r0
 8011644:	10ad      	asrs	r5, r5, #2
 8011646:	d03d      	beq.n	80116c4 <__pow5mult+0xa0>
 8011648:	69fc      	ldr	r4, [r7, #28]
 801164a:	b97c      	cbnz	r4, 801166c <__pow5mult+0x48>
 801164c:	2010      	movs	r0, #16
 801164e:	f7ff fd23 	bl	8011098 <malloc>
 8011652:	4602      	mov	r2, r0
 8011654:	61f8      	str	r0, [r7, #28]
 8011656:	b928      	cbnz	r0, 8011664 <__pow5mult+0x40>
 8011658:	4b1d      	ldr	r3, [pc, #116]	@ (80116d0 <__pow5mult+0xac>)
 801165a:	481e      	ldr	r0, [pc, #120]	@ (80116d4 <__pow5mult+0xb0>)
 801165c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011660:	f000 fd4a 	bl	80120f8 <__assert_func>
 8011664:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011668:	6004      	str	r4, [r0, #0]
 801166a:	60c4      	str	r4, [r0, #12]
 801166c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011670:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011674:	b94c      	cbnz	r4, 801168a <__pow5mult+0x66>
 8011676:	f240 2171 	movw	r1, #625	@ 0x271
 801167a:	4638      	mov	r0, r7
 801167c:	f7ff ff12 	bl	80114a4 <__i2b>
 8011680:	2300      	movs	r3, #0
 8011682:	f8c8 0008 	str.w	r0, [r8, #8]
 8011686:	4604      	mov	r4, r0
 8011688:	6003      	str	r3, [r0, #0]
 801168a:	f04f 0900 	mov.w	r9, #0
 801168e:	07eb      	lsls	r3, r5, #31
 8011690:	d50a      	bpl.n	80116a8 <__pow5mult+0x84>
 8011692:	4631      	mov	r1, r6
 8011694:	4622      	mov	r2, r4
 8011696:	4638      	mov	r0, r7
 8011698:	f7ff ff1a 	bl	80114d0 <__multiply>
 801169c:	4631      	mov	r1, r6
 801169e:	4680      	mov	r8, r0
 80116a0:	4638      	mov	r0, r7
 80116a2:	f7ff fe01 	bl	80112a8 <_Bfree>
 80116a6:	4646      	mov	r6, r8
 80116a8:	106d      	asrs	r5, r5, #1
 80116aa:	d00b      	beq.n	80116c4 <__pow5mult+0xa0>
 80116ac:	6820      	ldr	r0, [r4, #0]
 80116ae:	b938      	cbnz	r0, 80116c0 <__pow5mult+0x9c>
 80116b0:	4622      	mov	r2, r4
 80116b2:	4621      	mov	r1, r4
 80116b4:	4638      	mov	r0, r7
 80116b6:	f7ff ff0b 	bl	80114d0 <__multiply>
 80116ba:	6020      	str	r0, [r4, #0]
 80116bc:	f8c0 9000 	str.w	r9, [r0]
 80116c0:	4604      	mov	r4, r0
 80116c2:	e7e4      	b.n	801168e <__pow5mult+0x6a>
 80116c4:	4630      	mov	r0, r6
 80116c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116ca:	bf00      	nop
 80116cc:	080138a0 	.word	0x080138a0
 80116d0:	08013766 	.word	0x08013766
 80116d4:	08013846 	.word	0x08013846

080116d8 <__lshift>:
 80116d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116dc:	460c      	mov	r4, r1
 80116de:	6849      	ldr	r1, [r1, #4]
 80116e0:	6923      	ldr	r3, [r4, #16]
 80116e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80116e6:	68a3      	ldr	r3, [r4, #8]
 80116e8:	4607      	mov	r7, r0
 80116ea:	4691      	mov	r9, r2
 80116ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80116f0:	f108 0601 	add.w	r6, r8, #1
 80116f4:	42b3      	cmp	r3, r6
 80116f6:	db0b      	blt.n	8011710 <__lshift+0x38>
 80116f8:	4638      	mov	r0, r7
 80116fa:	f7ff fd95 	bl	8011228 <_Balloc>
 80116fe:	4605      	mov	r5, r0
 8011700:	b948      	cbnz	r0, 8011716 <__lshift+0x3e>
 8011702:	4602      	mov	r2, r0
 8011704:	4b28      	ldr	r3, [pc, #160]	@ (80117a8 <__lshift+0xd0>)
 8011706:	4829      	ldr	r0, [pc, #164]	@ (80117ac <__lshift+0xd4>)
 8011708:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801170c:	f000 fcf4 	bl	80120f8 <__assert_func>
 8011710:	3101      	adds	r1, #1
 8011712:	005b      	lsls	r3, r3, #1
 8011714:	e7ee      	b.n	80116f4 <__lshift+0x1c>
 8011716:	2300      	movs	r3, #0
 8011718:	f100 0114 	add.w	r1, r0, #20
 801171c:	f100 0210 	add.w	r2, r0, #16
 8011720:	4618      	mov	r0, r3
 8011722:	4553      	cmp	r3, sl
 8011724:	db33      	blt.n	801178e <__lshift+0xb6>
 8011726:	6920      	ldr	r0, [r4, #16]
 8011728:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801172c:	f104 0314 	add.w	r3, r4, #20
 8011730:	f019 091f 	ands.w	r9, r9, #31
 8011734:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011738:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801173c:	d02b      	beq.n	8011796 <__lshift+0xbe>
 801173e:	f1c9 0e20 	rsb	lr, r9, #32
 8011742:	468a      	mov	sl, r1
 8011744:	2200      	movs	r2, #0
 8011746:	6818      	ldr	r0, [r3, #0]
 8011748:	fa00 f009 	lsl.w	r0, r0, r9
 801174c:	4310      	orrs	r0, r2
 801174e:	f84a 0b04 	str.w	r0, [sl], #4
 8011752:	f853 2b04 	ldr.w	r2, [r3], #4
 8011756:	459c      	cmp	ip, r3
 8011758:	fa22 f20e 	lsr.w	r2, r2, lr
 801175c:	d8f3      	bhi.n	8011746 <__lshift+0x6e>
 801175e:	ebac 0304 	sub.w	r3, ip, r4
 8011762:	3b15      	subs	r3, #21
 8011764:	f023 0303 	bic.w	r3, r3, #3
 8011768:	3304      	adds	r3, #4
 801176a:	f104 0015 	add.w	r0, r4, #21
 801176e:	4584      	cmp	ip, r0
 8011770:	bf38      	it	cc
 8011772:	2304      	movcc	r3, #4
 8011774:	50ca      	str	r2, [r1, r3]
 8011776:	b10a      	cbz	r2, 801177c <__lshift+0xa4>
 8011778:	f108 0602 	add.w	r6, r8, #2
 801177c:	3e01      	subs	r6, #1
 801177e:	4638      	mov	r0, r7
 8011780:	612e      	str	r6, [r5, #16]
 8011782:	4621      	mov	r1, r4
 8011784:	f7ff fd90 	bl	80112a8 <_Bfree>
 8011788:	4628      	mov	r0, r5
 801178a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801178e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011792:	3301      	adds	r3, #1
 8011794:	e7c5      	b.n	8011722 <__lshift+0x4a>
 8011796:	3904      	subs	r1, #4
 8011798:	f853 2b04 	ldr.w	r2, [r3], #4
 801179c:	f841 2f04 	str.w	r2, [r1, #4]!
 80117a0:	459c      	cmp	ip, r3
 80117a2:	d8f9      	bhi.n	8011798 <__lshift+0xc0>
 80117a4:	e7ea      	b.n	801177c <__lshift+0xa4>
 80117a6:	bf00      	nop
 80117a8:	080137d5 	.word	0x080137d5
 80117ac:	08013846 	.word	0x08013846

080117b0 <__mcmp>:
 80117b0:	690a      	ldr	r2, [r1, #16]
 80117b2:	4603      	mov	r3, r0
 80117b4:	6900      	ldr	r0, [r0, #16]
 80117b6:	1a80      	subs	r0, r0, r2
 80117b8:	b530      	push	{r4, r5, lr}
 80117ba:	d10e      	bne.n	80117da <__mcmp+0x2a>
 80117bc:	3314      	adds	r3, #20
 80117be:	3114      	adds	r1, #20
 80117c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80117c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80117c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80117cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80117d0:	4295      	cmp	r5, r2
 80117d2:	d003      	beq.n	80117dc <__mcmp+0x2c>
 80117d4:	d205      	bcs.n	80117e2 <__mcmp+0x32>
 80117d6:	f04f 30ff 	mov.w	r0, #4294967295
 80117da:	bd30      	pop	{r4, r5, pc}
 80117dc:	42a3      	cmp	r3, r4
 80117de:	d3f3      	bcc.n	80117c8 <__mcmp+0x18>
 80117e0:	e7fb      	b.n	80117da <__mcmp+0x2a>
 80117e2:	2001      	movs	r0, #1
 80117e4:	e7f9      	b.n	80117da <__mcmp+0x2a>
	...

080117e8 <__mdiff>:
 80117e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117ec:	4689      	mov	r9, r1
 80117ee:	4606      	mov	r6, r0
 80117f0:	4611      	mov	r1, r2
 80117f2:	4648      	mov	r0, r9
 80117f4:	4614      	mov	r4, r2
 80117f6:	f7ff ffdb 	bl	80117b0 <__mcmp>
 80117fa:	1e05      	subs	r5, r0, #0
 80117fc:	d112      	bne.n	8011824 <__mdiff+0x3c>
 80117fe:	4629      	mov	r1, r5
 8011800:	4630      	mov	r0, r6
 8011802:	f7ff fd11 	bl	8011228 <_Balloc>
 8011806:	4602      	mov	r2, r0
 8011808:	b928      	cbnz	r0, 8011816 <__mdiff+0x2e>
 801180a:	4b3f      	ldr	r3, [pc, #252]	@ (8011908 <__mdiff+0x120>)
 801180c:	f240 2137 	movw	r1, #567	@ 0x237
 8011810:	483e      	ldr	r0, [pc, #248]	@ (801190c <__mdiff+0x124>)
 8011812:	f000 fc71 	bl	80120f8 <__assert_func>
 8011816:	2301      	movs	r3, #1
 8011818:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801181c:	4610      	mov	r0, r2
 801181e:	b003      	add	sp, #12
 8011820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011824:	bfbc      	itt	lt
 8011826:	464b      	movlt	r3, r9
 8011828:	46a1      	movlt	r9, r4
 801182a:	4630      	mov	r0, r6
 801182c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011830:	bfba      	itte	lt
 8011832:	461c      	movlt	r4, r3
 8011834:	2501      	movlt	r5, #1
 8011836:	2500      	movge	r5, #0
 8011838:	f7ff fcf6 	bl	8011228 <_Balloc>
 801183c:	4602      	mov	r2, r0
 801183e:	b918      	cbnz	r0, 8011848 <__mdiff+0x60>
 8011840:	4b31      	ldr	r3, [pc, #196]	@ (8011908 <__mdiff+0x120>)
 8011842:	f240 2145 	movw	r1, #581	@ 0x245
 8011846:	e7e3      	b.n	8011810 <__mdiff+0x28>
 8011848:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801184c:	6926      	ldr	r6, [r4, #16]
 801184e:	60c5      	str	r5, [r0, #12]
 8011850:	f109 0310 	add.w	r3, r9, #16
 8011854:	f109 0514 	add.w	r5, r9, #20
 8011858:	f104 0e14 	add.w	lr, r4, #20
 801185c:	f100 0b14 	add.w	fp, r0, #20
 8011860:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011864:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011868:	9301      	str	r3, [sp, #4]
 801186a:	46d9      	mov	r9, fp
 801186c:	f04f 0c00 	mov.w	ip, #0
 8011870:	9b01      	ldr	r3, [sp, #4]
 8011872:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011876:	f853 af04 	ldr.w	sl, [r3, #4]!
 801187a:	9301      	str	r3, [sp, #4]
 801187c:	fa1f f38a 	uxth.w	r3, sl
 8011880:	4619      	mov	r1, r3
 8011882:	b283      	uxth	r3, r0
 8011884:	1acb      	subs	r3, r1, r3
 8011886:	0c00      	lsrs	r0, r0, #16
 8011888:	4463      	add	r3, ip
 801188a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801188e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011892:	b29b      	uxth	r3, r3
 8011894:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011898:	4576      	cmp	r6, lr
 801189a:	f849 3b04 	str.w	r3, [r9], #4
 801189e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80118a2:	d8e5      	bhi.n	8011870 <__mdiff+0x88>
 80118a4:	1b33      	subs	r3, r6, r4
 80118a6:	3b15      	subs	r3, #21
 80118a8:	f023 0303 	bic.w	r3, r3, #3
 80118ac:	3415      	adds	r4, #21
 80118ae:	3304      	adds	r3, #4
 80118b0:	42a6      	cmp	r6, r4
 80118b2:	bf38      	it	cc
 80118b4:	2304      	movcc	r3, #4
 80118b6:	441d      	add	r5, r3
 80118b8:	445b      	add	r3, fp
 80118ba:	461e      	mov	r6, r3
 80118bc:	462c      	mov	r4, r5
 80118be:	4544      	cmp	r4, r8
 80118c0:	d30e      	bcc.n	80118e0 <__mdiff+0xf8>
 80118c2:	f108 0103 	add.w	r1, r8, #3
 80118c6:	1b49      	subs	r1, r1, r5
 80118c8:	f021 0103 	bic.w	r1, r1, #3
 80118cc:	3d03      	subs	r5, #3
 80118ce:	45a8      	cmp	r8, r5
 80118d0:	bf38      	it	cc
 80118d2:	2100      	movcc	r1, #0
 80118d4:	440b      	add	r3, r1
 80118d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80118da:	b191      	cbz	r1, 8011902 <__mdiff+0x11a>
 80118dc:	6117      	str	r7, [r2, #16]
 80118de:	e79d      	b.n	801181c <__mdiff+0x34>
 80118e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80118e4:	46e6      	mov	lr, ip
 80118e6:	0c08      	lsrs	r0, r1, #16
 80118e8:	fa1c fc81 	uxtah	ip, ip, r1
 80118ec:	4471      	add	r1, lr
 80118ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80118f2:	b289      	uxth	r1, r1
 80118f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80118f8:	f846 1b04 	str.w	r1, [r6], #4
 80118fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011900:	e7dd      	b.n	80118be <__mdiff+0xd6>
 8011902:	3f01      	subs	r7, #1
 8011904:	e7e7      	b.n	80118d6 <__mdiff+0xee>
 8011906:	bf00      	nop
 8011908:	080137d5 	.word	0x080137d5
 801190c:	08013846 	.word	0x08013846

08011910 <__ulp>:
 8011910:	b082      	sub	sp, #8
 8011912:	ed8d 0b00 	vstr	d0, [sp]
 8011916:	9a01      	ldr	r2, [sp, #4]
 8011918:	4b0f      	ldr	r3, [pc, #60]	@ (8011958 <__ulp+0x48>)
 801191a:	4013      	ands	r3, r2
 801191c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011920:	2b00      	cmp	r3, #0
 8011922:	dc08      	bgt.n	8011936 <__ulp+0x26>
 8011924:	425b      	negs	r3, r3
 8011926:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801192a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801192e:	da04      	bge.n	801193a <__ulp+0x2a>
 8011930:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011934:	4113      	asrs	r3, r2
 8011936:	2200      	movs	r2, #0
 8011938:	e008      	b.n	801194c <__ulp+0x3c>
 801193a:	f1a2 0314 	sub.w	r3, r2, #20
 801193e:	2b1e      	cmp	r3, #30
 8011940:	bfda      	itte	le
 8011942:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011946:	40da      	lsrle	r2, r3
 8011948:	2201      	movgt	r2, #1
 801194a:	2300      	movs	r3, #0
 801194c:	4619      	mov	r1, r3
 801194e:	4610      	mov	r0, r2
 8011950:	ec41 0b10 	vmov	d0, r0, r1
 8011954:	b002      	add	sp, #8
 8011956:	4770      	bx	lr
 8011958:	7ff00000 	.word	0x7ff00000

0801195c <__b2d>:
 801195c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011960:	6906      	ldr	r6, [r0, #16]
 8011962:	f100 0814 	add.w	r8, r0, #20
 8011966:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801196a:	1f37      	subs	r7, r6, #4
 801196c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011970:	4610      	mov	r0, r2
 8011972:	f7ff fd4b 	bl	801140c <__hi0bits>
 8011976:	f1c0 0320 	rsb	r3, r0, #32
 801197a:	280a      	cmp	r0, #10
 801197c:	600b      	str	r3, [r1, #0]
 801197e:	491b      	ldr	r1, [pc, #108]	@ (80119ec <__b2d+0x90>)
 8011980:	dc15      	bgt.n	80119ae <__b2d+0x52>
 8011982:	f1c0 0c0b 	rsb	ip, r0, #11
 8011986:	fa22 f30c 	lsr.w	r3, r2, ip
 801198a:	45b8      	cmp	r8, r7
 801198c:	ea43 0501 	orr.w	r5, r3, r1
 8011990:	bf34      	ite	cc
 8011992:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011996:	2300      	movcs	r3, #0
 8011998:	3015      	adds	r0, #21
 801199a:	fa02 f000 	lsl.w	r0, r2, r0
 801199e:	fa23 f30c 	lsr.w	r3, r3, ip
 80119a2:	4303      	orrs	r3, r0
 80119a4:	461c      	mov	r4, r3
 80119a6:	ec45 4b10 	vmov	d0, r4, r5
 80119aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119ae:	45b8      	cmp	r8, r7
 80119b0:	bf3a      	itte	cc
 80119b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80119b6:	f1a6 0708 	subcc.w	r7, r6, #8
 80119ba:	2300      	movcs	r3, #0
 80119bc:	380b      	subs	r0, #11
 80119be:	d012      	beq.n	80119e6 <__b2d+0x8a>
 80119c0:	f1c0 0120 	rsb	r1, r0, #32
 80119c4:	fa23 f401 	lsr.w	r4, r3, r1
 80119c8:	4082      	lsls	r2, r0
 80119ca:	4322      	orrs	r2, r4
 80119cc:	4547      	cmp	r7, r8
 80119ce:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80119d2:	bf8c      	ite	hi
 80119d4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80119d8:	2200      	movls	r2, #0
 80119da:	4083      	lsls	r3, r0
 80119dc:	40ca      	lsrs	r2, r1
 80119de:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80119e2:	4313      	orrs	r3, r2
 80119e4:	e7de      	b.n	80119a4 <__b2d+0x48>
 80119e6:	ea42 0501 	orr.w	r5, r2, r1
 80119ea:	e7db      	b.n	80119a4 <__b2d+0x48>
 80119ec:	3ff00000 	.word	0x3ff00000

080119f0 <__d2b>:
 80119f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80119f4:	460f      	mov	r7, r1
 80119f6:	2101      	movs	r1, #1
 80119f8:	ec59 8b10 	vmov	r8, r9, d0
 80119fc:	4616      	mov	r6, r2
 80119fe:	f7ff fc13 	bl	8011228 <_Balloc>
 8011a02:	4604      	mov	r4, r0
 8011a04:	b930      	cbnz	r0, 8011a14 <__d2b+0x24>
 8011a06:	4602      	mov	r2, r0
 8011a08:	4b23      	ldr	r3, [pc, #140]	@ (8011a98 <__d2b+0xa8>)
 8011a0a:	4824      	ldr	r0, [pc, #144]	@ (8011a9c <__d2b+0xac>)
 8011a0c:	f240 310f 	movw	r1, #783	@ 0x30f
 8011a10:	f000 fb72 	bl	80120f8 <__assert_func>
 8011a14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011a18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011a1c:	b10d      	cbz	r5, 8011a22 <__d2b+0x32>
 8011a1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011a22:	9301      	str	r3, [sp, #4]
 8011a24:	f1b8 0300 	subs.w	r3, r8, #0
 8011a28:	d023      	beq.n	8011a72 <__d2b+0x82>
 8011a2a:	4668      	mov	r0, sp
 8011a2c:	9300      	str	r3, [sp, #0]
 8011a2e:	f7ff fd0c 	bl	801144a <__lo0bits>
 8011a32:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011a36:	b1d0      	cbz	r0, 8011a6e <__d2b+0x7e>
 8011a38:	f1c0 0320 	rsb	r3, r0, #32
 8011a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8011a40:	430b      	orrs	r3, r1
 8011a42:	40c2      	lsrs	r2, r0
 8011a44:	6163      	str	r3, [r4, #20]
 8011a46:	9201      	str	r2, [sp, #4]
 8011a48:	9b01      	ldr	r3, [sp, #4]
 8011a4a:	61a3      	str	r3, [r4, #24]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	bf0c      	ite	eq
 8011a50:	2201      	moveq	r2, #1
 8011a52:	2202      	movne	r2, #2
 8011a54:	6122      	str	r2, [r4, #16]
 8011a56:	b1a5      	cbz	r5, 8011a82 <__d2b+0x92>
 8011a58:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011a5c:	4405      	add	r5, r0
 8011a5e:	603d      	str	r5, [r7, #0]
 8011a60:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011a64:	6030      	str	r0, [r6, #0]
 8011a66:	4620      	mov	r0, r4
 8011a68:	b003      	add	sp, #12
 8011a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a6e:	6161      	str	r1, [r4, #20]
 8011a70:	e7ea      	b.n	8011a48 <__d2b+0x58>
 8011a72:	a801      	add	r0, sp, #4
 8011a74:	f7ff fce9 	bl	801144a <__lo0bits>
 8011a78:	9b01      	ldr	r3, [sp, #4]
 8011a7a:	6163      	str	r3, [r4, #20]
 8011a7c:	3020      	adds	r0, #32
 8011a7e:	2201      	movs	r2, #1
 8011a80:	e7e8      	b.n	8011a54 <__d2b+0x64>
 8011a82:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011a86:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011a8a:	6038      	str	r0, [r7, #0]
 8011a8c:	6918      	ldr	r0, [r3, #16]
 8011a8e:	f7ff fcbd 	bl	801140c <__hi0bits>
 8011a92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011a96:	e7e5      	b.n	8011a64 <__d2b+0x74>
 8011a98:	080137d5 	.word	0x080137d5
 8011a9c:	08013846 	.word	0x08013846

08011aa0 <__ratio>:
 8011aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aa4:	b085      	sub	sp, #20
 8011aa6:	e9cd 1000 	strd	r1, r0, [sp]
 8011aaa:	a902      	add	r1, sp, #8
 8011aac:	f7ff ff56 	bl	801195c <__b2d>
 8011ab0:	9800      	ldr	r0, [sp, #0]
 8011ab2:	a903      	add	r1, sp, #12
 8011ab4:	ec55 4b10 	vmov	r4, r5, d0
 8011ab8:	f7ff ff50 	bl	801195c <__b2d>
 8011abc:	9b01      	ldr	r3, [sp, #4]
 8011abe:	6919      	ldr	r1, [r3, #16]
 8011ac0:	9b00      	ldr	r3, [sp, #0]
 8011ac2:	691b      	ldr	r3, [r3, #16]
 8011ac4:	1ac9      	subs	r1, r1, r3
 8011ac6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011aca:	1a9b      	subs	r3, r3, r2
 8011acc:	ec5b ab10 	vmov	sl, fp, d0
 8011ad0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	bfce      	itee	gt
 8011ad8:	462a      	movgt	r2, r5
 8011ada:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011ade:	465a      	movle	r2, fp
 8011ae0:	462f      	mov	r7, r5
 8011ae2:	46d9      	mov	r9, fp
 8011ae4:	bfcc      	ite	gt
 8011ae6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011aea:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011aee:	464b      	mov	r3, r9
 8011af0:	4652      	mov	r2, sl
 8011af2:	4620      	mov	r0, r4
 8011af4:	4639      	mov	r1, r7
 8011af6:	f7ee fed1 	bl	800089c <__aeabi_ddiv>
 8011afa:	ec41 0b10 	vmov	d0, r0, r1
 8011afe:	b005      	add	sp, #20
 8011b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011b04 <__copybits>:
 8011b04:	3901      	subs	r1, #1
 8011b06:	b570      	push	{r4, r5, r6, lr}
 8011b08:	1149      	asrs	r1, r1, #5
 8011b0a:	6914      	ldr	r4, [r2, #16]
 8011b0c:	3101      	adds	r1, #1
 8011b0e:	f102 0314 	add.w	r3, r2, #20
 8011b12:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011b16:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011b1a:	1f05      	subs	r5, r0, #4
 8011b1c:	42a3      	cmp	r3, r4
 8011b1e:	d30c      	bcc.n	8011b3a <__copybits+0x36>
 8011b20:	1aa3      	subs	r3, r4, r2
 8011b22:	3b11      	subs	r3, #17
 8011b24:	f023 0303 	bic.w	r3, r3, #3
 8011b28:	3211      	adds	r2, #17
 8011b2a:	42a2      	cmp	r2, r4
 8011b2c:	bf88      	it	hi
 8011b2e:	2300      	movhi	r3, #0
 8011b30:	4418      	add	r0, r3
 8011b32:	2300      	movs	r3, #0
 8011b34:	4288      	cmp	r0, r1
 8011b36:	d305      	bcc.n	8011b44 <__copybits+0x40>
 8011b38:	bd70      	pop	{r4, r5, r6, pc}
 8011b3a:	f853 6b04 	ldr.w	r6, [r3], #4
 8011b3e:	f845 6f04 	str.w	r6, [r5, #4]!
 8011b42:	e7eb      	b.n	8011b1c <__copybits+0x18>
 8011b44:	f840 3b04 	str.w	r3, [r0], #4
 8011b48:	e7f4      	b.n	8011b34 <__copybits+0x30>

08011b4a <__any_on>:
 8011b4a:	f100 0214 	add.w	r2, r0, #20
 8011b4e:	6900      	ldr	r0, [r0, #16]
 8011b50:	114b      	asrs	r3, r1, #5
 8011b52:	4298      	cmp	r0, r3
 8011b54:	b510      	push	{r4, lr}
 8011b56:	db11      	blt.n	8011b7c <__any_on+0x32>
 8011b58:	dd0a      	ble.n	8011b70 <__any_on+0x26>
 8011b5a:	f011 011f 	ands.w	r1, r1, #31
 8011b5e:	d007      	beq.n	8011b70 <__any_on+0x26>
 8011b60:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011b64:	fa24 f001 	lsr.w	r0, r4, r1
 8011b68:	fa00 f101 	lsl.w	r1, r0, r1
 8011b6c:	428c      	cmp	r4, r1
 8011b6e:	d10b      	bne.n	8011b88 <__any_on+0x3e>
 8011b70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011b74:	4293      	cmp	r3, r2
 8011b76:	d803      	bhi.n	8011b80 <__any_on+0x36>
 8011b78:	2000      	movs	r0, #0
 8011b7a:	bd10      	pop	{r4, pc}
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	e7f7      	b.n	8011b70 <__any_on+0x26>
 8011b80:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011b84:	2900      	cmp	r1, #0
 8011b86:	d0f5      	beq.n	8011b74 <__any_on+0x2a>
 8011b88:	2001      	movs	r0, #1
 8011b8a:	e7f6      	b.n	8011b7a <__any_on+0x30>

08011b8c <_strtol_l.constprop.0>:
 8011b8c:	2b24      	cmp	r3, #36	@ 0x24
 8011b8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b92:	4686      	mov	lr, r0
 8011b94:	4690      	mov	r8, r2
 8011b96:	d801      	bhi.n	8011b9c <_strtol_l.constprop.0+0x10>
 8011b98:	2b01      	cmp	r3, #1
 8011b9a:	d106      	bne.n	8011baa <_strtol_l.constprop.0+0x1e>
 8011b9c:	f7fe f860 	bl	800fc60 <__errno>
 8011ba0:	2316      	movs	r3, #22
 8011ba2:	6003      	str	r3, [r0, #0]
 8011ba4:	2000      	movs	r0, #0
 8011ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011baa:	4834      	ldr	r0, [pc, #208]	@ (8011c7c <_strtol_l.constprop.0+0xf0>)
 8011bac:	460d      	mov	r5, r1
 8011bae:	462a      	mov	r2, r5
 8011bb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011bb4:	5d06      	ldrb	r6, [r0, r4]
 8011bb6:	f016 0608 	ands.w	r6, r6, #8
 8011bba:	d1f8      	bne.n	8011bae <_strtol_l.constprop.0+0x22>
 8011bbc:	2c2d      	cmp	r4, #45	@ 0x2d
 8011bbe:	d12d      	bne.n	8011c1c <_strtol_l.constprop.0+0x90>
 8011bc0:	782c      	ldrb	r4, [r5, #0]
 8011bc2:	2601      	movs	r6, #1
 8011bc4:	1c95      	adds	r5, r2, #2
 8011bc6:	f033 0210 	bics.w	r2, r3, #16
 8011bca:	d109      	bne.n	8011be0 <_strtol_l.constprop.0+0x54>
 8011bcc:	2c30      	cmp	r4, #48	@ 0x30
 8011bce:	d12a      	bne.n	8011c26 <_strtol_l.constprop.0+0x9a>
 8011bd0:	782a      	ldrb	r2, [r5, #0]
 8011bd2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011bd6:	2a58      	cmp	r2, #88	@ 0x58
 8011bd8:	d125      	bne.n	8011c26 <_strtol_l.constprop.0+0x9a>
 8011bda:	786c      	ldrb	r4, [r5, #1]
 8011bdc:	2310      	movs	r3, #16
 8011bde:	3502      	adds	r5, #2
 8011be0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011be4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011be8:	2200      	movs	r2, #0
 8011bea:	fbbc f9f3 	udiv	r9, ip, r3
 8011bee:	4610      	mov	r0, r2
 8011bf0:	fb03 ca19 	mls	sl, r3, r9, ip
 8011bf4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011bf8:	2f09      	cmp	r7, #9
 8011bfa:	d81b      	bhi.n	8011c34 <_strtol_l.constprop.0+0xa8>
 8011bfc:	463c      	mov	r4, r7
 8011bfe:	42a3      	cmp	r3, r4
 8011c00:	dd27      	ble.n	8011c52 <_strtol_l.constprop.0+0xc6>
 8011c02:	1c57      	adds	r7, r2, #1
 8011c04:	d007      	beq.n	8011c16 <_strtol_l.constprop.0+0x8a>
 8011c06:	4581      	cmp	r9, r0
 8011c08:	d320      	bcc.n	8011c4c <_strtol_l.constprop.0+0xc0>
 8011c0a:	d101      	bne.n	8011c10 <_strtol_l.constprop.0+0x84>
 8011c0c:	45a2      	cmp	sl, r4
 8011c0e:	db1d      	blt.n	8011c4c <_strtol_l.constprop.0+0xc0>
 8011c10:	fb00 4003 	mla	r0, r0, r3, r4
 8011c14:	2201      	movs	r2, #1
 8011c16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011c1a:	e7eb      	b.n	8011bf4 <_strtol_l.constprop.0+0x68>
 8011c1c:	2c2b      	cmp	r4, #43	@ 0x2b
 8011c1e:	bf04      	itt	eq
 8011c20:	782c      	ldrbeq	r4, [r5, #0]
 8011c22:	1c95      	addeq	r5, r2, #2
 8011c24:	e7cf      	b.n	8011bc6 <_strtol_l.constprop.0+0x3a>
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d1da      	bne.n	8011be0 <_strtol_l.constprop.0+0x54>
 8011c2a:	2c30      	cmp	r4, #48	@ 0x30
 8011c2c:	bf0c      	ite	eq
 8011c2e:	2308      	moveq	r3, #8
 8011c30:	230a      	movne	r3, #10
 8011c32:	e7d5      	b.n	8011be0 <_strtol_l.constprop.0+0x54>
 8011c34:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011c38:	2f19      	cmp	r7, #25
 8011c3a:	d801      	bhi.n	8011c40 <_strtol_l.constprop.0+0xb4>
 8011c3c:	3c37      	subs	r4, #55	@ 0x37
 8011c3e:	e7de      	b.n	8011bfe <_strtol_l.constprop.0+0x72>
 8011c40:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011c44:	2f19      	cmp	r7, #25
 8011c46:	d804      	bhi.n	8011c52 <_strtol_l.constprop.0+0xc6>
 8011c48:	3c57      	subs	r4, #87	@ 0x57
 8011c4a:	e7d8      	b.n	8011bfe <_strtol_l.constprop.0+0x72>
 8011c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8011c50:	e7e1      	b.n	8011c16 <_strtol_l.constprop.0+0x8a>
 8011c52:	1c53      	adds	r3, r2, #1
 8011c54:	d108      	bne.n	8011c68 <_strtol_l.constprop.0+0xdc>
 8011c56:	2322      	movs	r3, #34	@ 0x22
 8011c58:	f8ce 3000 	str.w	r3, [lr]
 8011c5c:	4660      	mov	r0, ip
 8011c5e:	f1b8 0f00 	cmp.w	r8, #0
 8011c62:	d0a0      	beq.n	8011ba6 <_strtol_l.constprop.0+0x1a>
 8011c64:	1e69      	subs	r1, r5, #1
 8011c66:	e006      	b.n	8011c76 <_strtol_l.constprop.0+0xea>
 8011c68:	b106      	cbz	r6, 8011c6c <_strtol_l.constprop.0+0xe0>
 8011c6a:	4240      	negs	r0, r0
 8011c6c:	f1b8 0f00 	cmp.w	r8, #0
 8011c70:	d099      	beq.n	8011ba6 <_strtol_l.constprop.0+0x1a>
 8011c72:	2a00      	cmp	r2, #0
 8011c74:	d1f6      	bne.n	8011c64 <_strtol_l.constprop.0+0xd8>
 8011c76:	f8c8 1000 	str.w	r1, [r8]
 8011c7a:	e794      	b.n	8011ba6 <_strtol_l.constprop.0+0x1a>
 8011c7c:	080139a1 	.word	0x080139a1

08011c80 <_strtol_r>:
 8011c80:	f7ff bf84 	b.w	8011b8c <_strtol_l.constprop.0>

08011c84 <__ascii_wctomb>:
 8011c84:	4603      	mov	r3, r0
 8011c86:	4608      	mov	r0, r1
 8011c88:	b141      	cbz	r1, 8011c9c <__ascii_wctomb+0x18>
 8011c8a:	2aff      	cmp	r2, #255	@ 0xff
 8011c8c:	d904      	bls.n	8011c98 <__ascii_wctomb+0x14>
 8011c8e:	228a      	movs	r2, #138	@ 0x8a
 8011c90:	601a      	str	r2, [r3, #0]
 8011c92:	f04f 30ff 	mov.w	r0, #4294967295
 8011c96:	4770      	bx	lr
 8011c98:	700a      	strb	r2, [r1, #0]
 8011c9a:	2001      	movs	r0, #1
 8011c9c:	4770      	bx	lr

08011c9e <__ssputs_r>:
 8011c9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ca2:	688e      	ldr	r6, [r1, #8]
 8011ca4:	461f      	mov	r7, r3
 8011ca6:	42be      	cmp	r6, r7
 8011ca8:	680b      	ldr	r3, [r1, #0]
 8011caa:	4682      	mov	sl, r0
 8011cac:	460c      	mov	r4, r1
 8011cae:	4690      	mov	r8, r2
 8011cb0:	d82d      	bhi.n	8011d0e <__ssputs_r+0x70>
 8011cb2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011cb6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011cba:	d026      	beq.n	8011d0a <__ssputs_r+0x6c>
 8011cbc:	6965      	ldr	r5, [r4, #20]
 8011cbe:	6909      	ldr	r1, [r1, #16]
 8011cc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011cc4:	eba3 0901 	sub.w	r9, r3, r1
 8011cc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011ccc:	1c7b      	adds	r3, r7, #1
 8011cce:	444b      	add	r3, r9
 8011cd0:	106d      	asrs	r5, r5, #1
 8011cd2:	429d      	cmp	r5, r3
 8011cd4:	bf38      	it	cc
 8011cd6:	461d      	movcc	r5, r3
 8011cd8:	0553      	lsls	r3, r2, #21
 8011cda:	d527      	bpl.n	8011d2c <__ssputs_r+0x8e>
 8011cdc:	4629      	mov	r1, r5
 8011cde:	f7ff fa05 	bl	80110ec <_malloc_r>
 8011ce2:	4606      	mov	r6, r0
 8011ce4:	b360      	cbz	r0, 8011d40 <__ssputs_r+0xa2>
 8011ce6:	6921      	ldr	r1, [r4, #16]
 8011ce8:	464a      	mov	r2, r9
 8011cea:	f7fd ffe6 	bl	800fcba <memcpy>
 8011cee:	89a3      	ldrh	r3, [r4, #12]
 8011cf0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011cf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011cf8:	81a3      	strh	r3, [r4, #12]
 8011cfa:	6126      	str	r6, [r4, #16]
 8011cfc:	6165      	str	r5, [r4, #20]
 8011cfe:	444e      	add	r6, r9
 8011d00:	eba5 0509 	sub.w	r5, r5, r9
 8011d04:	6026      	str	r6, [r4, #0]
 8011d06:	60a5      	str	r5, [r4, #8]
 8011d08:	463e      	mov	r6, r7
 8011d0a:	42be      	cmp	r6, r7
 8011d0c:	d900      	bls.n	8011d10 <__ssputs_r+0x72>
 8011d0e:	463e      	mov	r6, r7
 8011d10:	6820      	ldr	r0, [r4, #0]
 8011d12:	4632      	mov	r2, r6
 8011d14:	4641      	mov	r1, r8
 8011d16:	f000 f9c5 	bl	80120a4 <memmove>
 8011d1a:	68a3      	ldr	r3, [r4, #8]
 8011d1c:	1b9b      	subs	r3, r3, r6
 8011d1e:	60a3      	str	r3, [r4, #8]
 8011d20:	6823      	ldr	r3, [r4, #0]
 8011d22:	4433      	add	r3, r6
 8011d24:	6023      	str	r3, [r4, #0]
 8011d26:	2000      	movs	r0, #0
 8011d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d2c:	462a      	mov	r2, r5
 8011d2e:	f000 fa15 	bl	801215c <_realloc_r>
 8011d32:	4606      	mov	r6, r0
 8011d34:	2800      	cmp	r0, #0
 8011d36:	d1e0      	bne.n	8011cfa <__ssputs_r+0x5c>
 8011d38:	6921      	ldr	r1, [r4, #16]
 8011d3a:	4650      	mov	r0, sl
 8011d3c:	f7fe fe28 	bl	8010990 <_free_r>
 8011d40:	230c      	movs	r3, #12
 8011d42:	f8ca 3000 	str.w	r3, [sl]
 8011d46:	89a3      	ldrh	r3, [r4, #12]
 8011d48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d4c:	81a3      	strh	r3, [r4, #12]
 8011d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8011d52:	e7e9      	b.n	8011d28 <__ssputs_r+0x8a>

08011d54 <_svfiprintf_r>:
 8011d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d58:	4698      	mov	r8, r3
 8011d5a:	898b      	ldrh	r3, [r1, #12]
 8011d5c:	061b      	lsls	r3, r3, #24
 8011d5e:	b09d      	sub	sp, #116	@ 0x74
 8011d60:	4607      	mov	r7, r0
 8011d62:	460d      	mov	r5, r1
 8011d64:	4614      	mov	r4, r2
 8011d66:	d510      	bpl.n	8011d8a <_svfiprintf_r+0x36>
 8011d68:	690b      	ldr	r3, [r1, #16]
 8011d6a:	b973      	cbnz	r3, 8011d8a <_svfiprintf_r+0x36>
 8011d6c:	2140      	movs	r1, #64	@ 0x40
 8011d6e:	f7ff f9bd 	bl	80110ec <_malloc_r>
 8011d72:	6028      	str	r0, [r5, #0]
 8011d74:	6128      	str	r0, [r5, #16]
 8011d76:	b930      	cbnz	r0, 8011d86 <_svfiprintf_r+0x32>
 8011d78:	230c      	movs	r3, #12
 8011d7a:	603b      	str	r3, [r7, #0]
 8011d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8011d80:	b01d      	add	sp, #116	@ 0x74
 8011d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d86:	2340      	movs	r3, #64	@ 0x40
 8011d88:	616b      	str	r3, [r5, #20]
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d8e:	2320      	movs	r3, #32
 8011d90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011d94:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d98:	2330      	movs	r3, #48	@ 0x30
 8011d9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011f38 <_svfiprintf_r+0x1e4>
 8011d9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011da2:	f04f 0901 	mov.w	r9, #1
 8011da6:	4623      	mov	r3, r4
 8011da8:	469a      	mov	sl, r3
 8011daa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011dae:	b10a      	cbz	r2, 8011db4 <_svfiprintf_r+0x60>
 8011db0:	2a25      	cmp	r2, #37	@ 0x25
 8011db2:	d1f9      	bne.n	8011da8 <_svfiprintf_r+0x54>
 8011db4:	ebba 0b04 	subs.w	fp, sl, r4
 8011db8:	d00b      	beq.n	8011dd2 <_svfiprintf_r+0x7e>
 8011dba:	465b      	mov	r3, fp
 8011dbc:	4622      	mov	r2, r4
 8011dbe:	4629      	mov	r1, r5
 8011dc0:	4638      	mov	r0, r7
 8011dc2:	f7ff ff6c 	bl	8011c9e <__ssputs_r>
 8011dc6:	3001      	adds	r0, #1
 8011dc8:	f000 80a7 	beq.w	8011f1a <_svfiprintf_r+0x1c6>
 8011dcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011dce:	445a      	add	r2, fp
 8011dd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8011dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	f000 809f 	beq.w	8011f1a <_svfiprintf_r+0x1c6>
 8011ddc:	2300      	movs	r3, #0
 8011dde:	f04f 32ff 	mov.w	r2, #4294967295
 8011de2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011de6:	f10a 0a01 	add.w	sl, sl, #1
 8011dea:	9304      	str	r3, [sp, #16]
 8011dec:	9307      	str	r3, [sp, #28]
 8011dee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011df2:	931a      	str	r3, [sp, #104]	@ 0x68
 8011df4:	4654      	mov	r4, sl
 8011df6:	2205      	movs	r2, #5
 8011df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dfc:	484e      	ldr	r0, [pc, #312]	@ (8011f38 <_svfiprintf_r+0x1e4>)
 8011dfe:	f7ee fa0f 	bl	8000220 <memchr>
 8011e02:	9a04      	ldr	r2, [sp, #16]
 8011e04:	b9d8      	cbnz	r0, 8011e3e <_svfiprintf_r+0xea>
 8011e06:	06d0      	lsls	r0, r2, #27
 8011e08:	bf44      	itt	mi
 8011e0a:	2320      	movmi	r3, #32
 8011e0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e10:	0711      	lsls	r1, r2, #28
 8011e12:	bf44      	itt	mi
 8011e14:	232b      	movmi	r3, #43	@ 0x2b
 8011e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e1a:	f89a 3000 	ldrb.w	r3, [sl]
 8011e1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e20:	d015      	beq.n	8011e4e <_svfiprintf_r+0xfa>
 8011e22:	9a07      	ldr	r2, [sp, #28]
 8011e24:	4654      	mov	r4, sl
 8011e26:	2000      	movs	r0, #0
 8011e28:	f04f 0c0a 	mov.w	ip, #10
 8011e2c:	4621      	mov	r1, r4
 8011e2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e32:	3b30      	subs	r3, #48	@ 0x30
 8011e34:	2b09      	cmp	r3, #9
 8011e36:	d94b      	bls.n	8011ed0 <_svfiprintf_r+0x17c>
 8011e38:	b1b0      	cbz	r0, 8011e68 <_svfiprintf_r+0x114>
 8011e3a:	9207      	str	r2, [sp, #28]
 8011e3c:	e014      	b.n	8011e68 <_svfiprintf_r+0x114>
 8011e3e:	eba0 0308 	sub.w	r3, r0, r8
 8011e42:	fa09 f303 	lsl.w	r3, r9, r3
 8011e46:	4313      	orrs	r3, r2
 8011e48:	9304      	str	r3, [sp, #16]
 8011e4a:	46a2      	mov	sl, r4
 8011e4c:	e7d2      	b.n	8011df4 <_svfiprintf_r+0xa0>
 8011e4e:	9b03      	ldr	r3, [sp, #12]
 8011e50:	1d19      	adds	r1, r3, #4
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	9103      	str	r1, [sp, #12]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	bfbb      	ittet	lt
 8011e5a:	425b      	neglt	r3, r3
 8011e5c:	f042 0202 	orrlt.w	r2, r2, #2
 8011e60:	9307      	strge	r3, [sp, #28]
 8011e62:	9307      	strlt	r3, [sp, #28]
 8011e64:	bfb8      	it	lt
 8011e66:	9204      	strlt	r2, [sp, #16]
 8011e68:	7823      	ldrb	r3, [r4, #0]
 8011e6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8011e6c:	d10a      	bne.n	8011e84 <_svfiprintf_r+0x130>
 8011e6e:	7863      	ldrb	r3, [r4, #1]
 8011e70:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e72:	d132      	bne.n	8011eda <_svfiprintf_r+0x186>
 8011e74:	9b03      	ldr	r3, [sp, #12]
 8011e76:	1d1a      	adds	r2, r3, #4
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	9203      	str	r2, [sp, #12]
 8011e7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011e80:	3402      	adds	r4, #2
 8011e82:	9305      	str	r3, [sp, #20]
 8011e84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011f48 <_svfiprintf_r+0x1f4>
 8011e88:	7821      	ldrb	r1, [r4, #0]
 8011e8a:	2203      	movs	r2, #3
 8011e8c:	4650      	mov	r0, sl
 8011e8e:	f7ee f9c7 	bl	8000220 <memchr>
 8011e92:	b138      	cbz	r0, 8011ea4 <_svfiprintf_r+0x150>
 8011e94:	9b04      	ldr	r3, [sp, #16]
 8011e96:	eba0 000a 	sub.w	r0, r0, sl
 8011e9a:	2240      	movs	r2, #64	@ 0x40
 8011e9c:	4082      	lsls	r2, r0
 8011e9e:	4313      	orrs	r3, r2
 8011ea0:	3401      	adds	r4, #1
 8011ea2:	9304      	str	r3, [sp, #16]
 8011ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ea8:	4824      	ldr	r0, [pc, #144]	@ (8011f3c <_svfiprintf_r+0x1e8>)
 8011eaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011eae:	2206      	movs	r2, #6
 8011eb0:	f7ee f9b6 	bl	8000220 <memchr>
 8011eb4:	2800      	cmp	r0, #0
 8011eb6:	d036      	beq.n	8011f26 <_svfiprintf_r+0x1d2>
 8011eb8:	4b21      	ldr	r3, [pc, #132]	@ (8011f40 <_svfiprintf_r+0x1ec>)
 8011eba:	bb1b      	cbnz	r3, 8011f04 <_svfiprintf_r+0x1b0>
 8011ebc:	9b03      	ldr	r3, [sp, #12]
 8011ebe:	3307      	adds	r3, #7
 8011ec0:	f023 0307 	bic.w	r3, r3, #7
 8011ec4:	3308      	adds	r3, #8
 8011ec6:	9303      	str	r3, [sp, #12]
 8011ec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011eca:	4433      	add	r3, r6
 8011ecc:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ece:	e76a      	b.n	8011da6 <_svfiprintf_r+0x52>
 8011ed0:	fb0c 3202 	mla	r2, ip, r2, r3
 8011ed4:	460c      	mov	r4, r1
 8011ed6:	2001      	movs	r0, #1
 8011ed8:	e7a8      	b.n	8011e2c <_svfiprintf_r+0xd8>
 8011eda:	2300      	movs	r3, #0
 8011edc:	3401      	adds	r4, #1
 8011ede:	9305      	str	r3, [sp, #20]
 8011ee0:	4619      	mov	r1, r3
 8011ee2:	f04f 0c0a 	mov.w	ip, #10
 8011ee6:	4620      	mov	r0, r4
 8011ee8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011eec:	3a30      	subs	r2, #48	@ 0x30
 8011eee:	2a09      	cmp	r2, #9
 8011ef0:	d903      	bls.n	8011efa <_svfiprintf_r+0x1a6>
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d0c6      	beq.n	8011e84 <_svfiprintf_r+0x130>
 8011ef6:	9105      	str	r1, [sp, #20]
 8011ef8:	e7c4      	b.n	8011e84 <_svfiprintf_r+0x130>
 8011efa:	fb0c 2101 	mla	r1, ip, r1, r2
 8011efe:	4604      	mov	r4, r0
 8011f00:	2301      	movs	r3, #1
 8011f02:	e7f0      	b.n	8011ee6 <_svfiprintf_r+0x192>
 8011f04:	ab03      	add	r3, sp, #12
 8011f06:	9300      	str	r3, [sp, #0]
 8011f08:	462a      	mov	r2, r5
 8011f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8011f44 <_svfiprintf_r+0x1f0>)
 8011f0c:	a904      	add	r1, sp, #16
 8011f0e:	4638      	mov	r0, r7
 8011f10:	f7fc ff30 	bl	800ed74 <_printf_float>
 8011f14:	1c42      	adds	r2, r0, #1
 8011f16:	4606      	mov	r6, r0
 8011f18:	d1d6      	bne.n	8011ec8 <_svfiprintf_r+0x174>
 8011f1a:	89ab      	ldrh	r3, [r5, #12]
 8011f1c:	065b      	lsls	r3, r3, #25
 8011f1e:	f53f af2d 	bmi.w	8011d7c <_svfiprintf_r+0x28>
 8011f22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011f24:	e72c      	b.n	8011d80 <_svfiprintf_r+0x2c>
 8011f26:	ab03      	add	r3, sp, #12
 8011f28:	9300      	str	r3, [sp, #0]
 8011f2a:	462a      	mov	r2, r5
 8011f2c:	4b05      	ldr	r3, [pc, #20]	@ (8011f44 <_svfiprintf_r+0x1f0>)
 8011f2e:	a904      	add	r1, sp, #16
 8011f30:	4638      	mov	r0, r7
 8011f32:	f7fd f9b7 	bl	800f2a4 <_printf_i>
 8011f36:	e7ed      	b.n	8011f14 <_svfiprintf_r+0x1c0>
 8011f38:	08013aa1 	.word	0x08013aa1
 8011f3c:	08013aab 	.word	0x08013aab
 8011f40:	0800ed75 	.word	0x0800ed75
 8011f44:	08011c9f 	.word	0x08011c9f
 8011f48:	08013aa7 	.word	0x08013aa7

08011f4c <__sflush_r>:
 8011f4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f54:	0716      	lsls	r6, r2, #28
 8011f56:	4605      	mov	r5, r0
 8011f58:	460c      	mov	r4, r1
 8011f5a:	d454      	bmi.n	8012006 <__sflush_r+0xba>
 8011f5c:	684b      	ldr	r3, [r1, #4]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	dc02      	bgt.n	8011f68 <__sflush_r+0x1c>
 8011f62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	dd48      	ble.n	8011ffa <__sflush_r+0xae>
 8011f68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011f6a:	2e00      	cmp	r6, #0
 8011f6c:	d045      	beq.n	8011ffa <__sflush_r+0xae>
 8011f6e:	2300      	movs	r3, #0
 8011f70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011f74:	682f      	ldr	r7, [r5, #0]
 8011f76:	6a21      	ldr	r1, [r4, #32]
 8011f78:	602b      	str	r3, [r5, #0]
 8011f7a:	d030      	beq.n	8011fde <__sflush_r+0x92>
 8011f7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011f7e:	89a3      	ldrh	r3, [r4, #12]
 8011f80:	0759      	lsls	r1, r3, #29
 8011f82:	d505      	bpl.n	8011f90 <__sflush_r+0x44>
 8011f84:	6863      	ldr	r3, [r4, #4]
 8011f86:	1ad2      	subs	r2, r2, r3
 8011f88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011f8a:	b10b      	cbz	r3, 8011f90 <__sflush_r+0x44>
 8011f8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011f8e:	1ad2      	subs	r2, r2, r3
 8011f90:	2300      	movs	r3, #0
 8011f92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011f94:	6a21      	ldr	r1, [r4, #32]
 8011f96:	4628      	mov	r0, r5
 8011f98:	47b0      	blx	r6
 8011f9a:	1c43      	adds	r3, r0, #1
 8011f9c:	89a3      	ldrh	r3, [r4, #12]
 8011f9e:	d106      	bne.n	8011fae <__sflush_r+0x62>
 8011fa0:	6829      	ldr	r1, [r5, #0]
 8011fa2:	291d      	cmp	r1, #29
 8011fa4:	d82b      	bhi.n	8011ffe <__sflush_r+0xb2>
 8011fa6:	4a2a      	ldr	r2, [pc, #168]	@ (8012050 <__sflush_r+0x104>)
 8011fa8:	410a      	asrs	r2, r1
 8011faa:	07d6      	lsls	r6, r2, #31
 8011fac:	d427      	bmi.n	8011ffe <__sflush_r+0xb2>
 8011fae:	2200      	movs	r2, #0
 8011fb0:	6062      	str	r2, [r4, #4]
 8011fb2:	04d9      	lsls	r1, r3, #19
 8011fb4:	6922      	ldr	r2, [r4, #16]
 8011fb6:	6022      	str	r2, [r4, #0]
 8011fb8:	d504      	bpl.n	8011fc4 <__sflush_r+0x78>
 8011fba:	1c42      	adds	r2, r0, #1
 8011fbc:	d101      	bne.n	8011fc2 <__sflush_r+0x76>
 8011fbe:	682b      	ldr	r3, [r5, #0]
 8011fc0:	b903      	cbnz	r3, 8011fc4 <__sflush_r+0x78>
 8011fc2:	6560      	str	r0, [r4, #84]	@ 0x54
 8011fc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011fc6:	602f      	str	r7, [r5, #0]
 8011fc8:	b1b9      	cbz	r1, 8011ffa <__sflush_r+0xae>
 8011fca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011fce:	4299      	cmp	r1, r3
 8011fd0:	d002      	beq.n	8011fd8 <__sflush_r+0x8c>
 8011fd2:	4628      	mov	r0, r5
 8011fd4:	f7fe fcdc 	bl	8010990 <_free_r>
 8011fd8:	2300      	movs	r3, #0
 8011fda:	6363      	str	r3, [r4, #52]	@ 0x34
 8011fdc:	e00d      	b.n	8011ffa <__sflush_r+0xae>
 8011fde:	2301      	movs	r3, #1
 8011fe0:	4628      	mov	r0, r5
 8011fe2:	47b0      	blx	r6
 8011fe4:	4602      	mov	r2, r0
 8011fe6:	1c50      	adds	r0, r2, #1
 8011fe8:	d1c9      	bne.n	8011f7e <__sflush_r+0x32>
 8011fea:	682b      	ldr	r3, [r5, #0]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d0c6      	beq.n	8011f7e <__sflush_r+0x32>
 8011ff0:	2b1d      	cmp	r3, #29
 8011ff2:	d001      	beq.n	8011ff8 <__sflush_r+0xac>
 8011ff4:	2b16      	cmp	r3, #22
 8011ff6:	d11e      	bne.n	8012036 <__sflush_r+0xea>
 8011ff8:	602f      	str	r7, [r5, #0]
 8011ffa:	2000      	movs	r0, #0
 8011ffc:	e022      	b.n	8012044 <__sflush_r+0xf8>
 8011ffe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012002:	b21b      	sxth	r3, r3
 8012004:	e01b      	b.n	801203e <__sflush_r+0xf2>
 8012006:	690f      	ldr	r7, [r1, #16]
 8012008:	2f00      	cmp	r7, #0
 801200a:	d0f6      	beq.n	8011ffa <__sflush_r+0xae>
 801200c:	0793      	lsls	r3, r2, #30
 801200e:	680e      	ldr	r6, [r1, #0]
 8012010:	bf08      	it	eq
 8012012:	694b      	ldreq	r3, [r1, #20]
 8012014:	600f      	str	r7, [r1, #0]
 8012016:	bf18      	it	ne
 8012018:	2300      	movne	r3, #0
 801201a:	eba6 0807 	sub.w	r8, r6, r7
 801201e:	608b      	str	r3, [r1, #8]
 8012020:	f1b8 0f00 	cmp.w	r8, #0
 8012024:	dde9      	ble.n	8011ffa <__sflush_r+0xae>
 8012026:	6a21      	ldr	r1, [r4, #32]
 8012028:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801202a:	4643      	mov	r3, r8
 801202c:	463a      	mov	r2, r7
 801202e:	4628      	mov	r0, r5
 8012030:	47b0      	blx	r6
 8012032:	2800      	cmp	r0, #0
 8012034:	dc08      	bgt.n	8012048 <__sflush_r+0xfc>
 8012036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801203a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801203e:	81a3      	strh	r3, [r4, #12]
 8012040:	f04f 30ff 	mov.w	r0, #4294967295
 8012044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012048:	4407      	add	r7, r0
 801204a:	eba8 0800 	sub.w	r8, r8, r0
 801204e:	e7e7      	b.n	8012020 <__sflush_r+0xd4>
 8012050:	dfbffffe 	.word	0xdfbffffe

08012054 <_fflush_r>:
 8012054:	b538      	push	{r3, r4, r5, lr}
 8012056:	690b      	ldr	r3, [r1, #16]
 8012058:	4605      	mov	r5, r0
 801205a:	460c      	mov	r4, r1
 801205c:	b913      	cbnz	r3, 8012064 <_fflush_r+0x10>
 801205e:	2500      	movs	r5, #0
 8012060:	4628      	mov	r0, r5
 8012062:	bd38      	pop	{r3, r4, r5, pc}
 8012064:	b118      	cbz	r0, 801206e <_fflush_r+0x1a>
 8012066:	6a03      	ldr	r3, [r0, #32]
 8012068:	b90b      	cbnz	r3, 801206e <_fflush_r+0x1a>
 801206a:	f7fd fcdb 	bl	800fa24 <__sinit>
 801206e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d0f3      	beq.n	801205e <_fflush_r+0xa>
 8012076:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012078:	07d0      	lsls	r0, r2, #31
 801207a:	d404      	bmi.n	8012086 <_fflush_r+0x32>
 801207c:	0599      	lsls	r1, r3, #22
 801207e:	d402      	bmi.n	8012086 <_fflush_r+0x32>
 8012080:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012082:	f7fd fe18 	bl	800fcb6 <__retarget_lock_acquire_recursive>
 8012086:	4628      	mov	r0, r5
 8012088:	4621      	mov	r1, r4
 801208a:	f7ff ff5f 	bl	8011f4c <__sflush_r>
 801208e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012090:	07da      	lsls	r2, r3, #31
 8012092:	4605      	mov	r5, r0
 8012094:	d4e4      	bmi.n	8012060 <_fflush_r+0xc>
 8012096:	89a3      	ldrh	r3, [r4, #12]
 8012098:	059b      	lsls	r3, r3, #22
 801209a:	d4e1      	bmi.n	8012060 <_fflush_r+0xc>
 801209c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801209e:	f7fd fe0b 	bl	800fcb8 <__retarget_lock_release_recursive>
 80120a2:	e7dd      	b.n	8012060 <_fflush_r+0xc>

080120a4 <memmove>:
 80120a4:	4288      	cmp	r0, r1
 80120a6:	b510      	push	{r4, lr}
 80120a8:	eb01 0402 	add.w	r4, r1, r2
 80120ac:	d902      	bls.n	80120b4 <memmove+0x10>
 80120ae:	4284      	cmp	r4, r0
 80120b0:	4623      	mov	r3, r4
 80120b2:	d807      	bhi.n	80120c4 <memmove+0x20>
 80120b4:	1e43      	subs	r3, r0, #1
 80120b6:	42a1      	cmp	r1, r4
 80120b8:	d008      	beq.n	80120cc <memmove+0x28>
 80120ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80120be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80120c2:	e7f8      	b.n	80120b6 <memmove+0x12>
 80120c4:	4402      	add	r2, r0
 80120c6:	4601      	mov	r1, r0
 80120c8:	428a      	cmp	r2, r1
 80120ca:	d100      	bne.n	80120ce <memmove+0x2a>
 80120cc:	bd10      	pop	{r4, pc}
 80120ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80120d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80120d6:	e7f7      	b.n	80120c8 <memmove+0x24>

080120d8 <_sbrk_r>:
 80120d8:	b538      	push	{r3, r4, r5, lr}
 80120da:	4d06      	ldr	r5, [pc, #24]	@ (80120f4 <_sbrk_r+0x1c>)
 80120dc:	2300      	movs	r3, #0
 80120de:	4604      	mov	r4, r0
 80120e0:	4608      	mov	r0, r1
 80120e2:	602b      	str	r3, [r5, #0]
 80120e4:	f7ef fdd8 	bl	8001c98 <_sbrk>
 80120e8:	1c43      	adds	r3, r0, #1
 80120ea:	d102      	bne.n	80120f2 <_sbrk_r+0x1a>
 80120ec:	682b      	ldr	r3, [r5, #0]
 80120ee:	b103      	cbz	r3, 80120f2 <_sbrk_r+0x1a>
 80120f0:	6023      	str	r3, [r4, #0]
 80120f2:	bd38      	pop	{r3, r4, r5, pc}
 80120f4:	20000c04 	.word	0x20000c04

080120f8 <__assert_func>:
 80120f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80120fa:	4614      	mov	r4, r2
 80120fc:	461a      	mov	r2, r3
 80120fe:	4b09      	ldr	r3, [pc, #36]	@ (8012124 <__assert_func+0x2c>)
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	4605      	mov	r5, r0
 8012104:	68d8      	ldr	r0, [r3, #12]
 8012106:	b954      	cbnz	r4, 801211e <__assert_func+0x26>
 8012108:	4b07      	ldr	r3, [pc, #28]	@ (8012128 <__assert_func+0x30>)
 801210a:	461c      	mov	r4, r3
 801210c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012110:	9100      	str	r1, [sp, #0]
 8012112:	462b      	mov	r3, r5
 8012114:	4905      	ldr	r1, [pc, #20]	@ (801212c <__assert_func+0x34>)
 8012116:	f000 f84f 	bl	80121b8 <fiprintf>
 801211a:	f000 f85f 	bl	80121dc <abort>
 801211e:	4b04      	ldr	r3, [pc, #16]	@ (8012130 <__assert_func+0x38>)
 8012120:	e7f4      	b.n	801210c <__assert_func+0x14>
 8012122:	bf00      	nop
 8012124:	2000021c 	.word	0x2000021c
 8012128:	08013aed 	.word	0x08013aed
 801212c:	08013abf 	.word	0x08013abf
 8012130:	08013ab2 	.word	0x08013ab2

08012134 <_calloc_r>:
 8012134:	b570      	push	{r4, r5, r6, lr}
 8012136:	fba1 5402 	umull	r5, r4, r1, r2
 801213a:	b93c      	cbnz	r4, 801214c <_calloc_r+0x18>
 801213c:	4629      	mov	r1, r5
 801213e:	f7fe ffd5 	bl	80110ec <_malloc_r>
 8012142:	4606      	mov	r6, r0
 8012144:	b928      	cbnz	r0, 8012152 <_calloc_r+0x1e>
 8012146:	2600      	movs	r6, #0
 8012148:	4630      	mov	r0, r6
 801214a:	bd70      	pop	{r4, r5, r6, pc}
 801214c:	220c      	movs	r2, #12
 801214e:	6002      	str	r2, [r0, #0]
 8012150:	e7f9      	b.n	8012146 <_calloc_r+0x12>
 8012152:	462a      	mov	r2, r5
 8012154:	4621      	mov	r1, r4
 8012156:	f7fd fd1f 	bl	800fb98 <memset>
 801215a:	e7f5      	b.n	8012148 <_calloc_r+0x14>

0801215c <_realloc_r>:
 801215c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012160:	4680      	mov	r8, r0
 8012162:	4615      	mov	r5, r2
 8012164:	460c      	mov	r4, r1
 8012166:	b921      	cbnz	r1, 8012172 <_realloc_r+0x16>
 8012168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801216c:	4611      	mov	r1, r2
 801216e:	f7fe bfbd 	b.w	80110ec <_malloc_r>
 8012172:	b92a      	cbnz	r2, 8012180 <_realloc_r+0x24>
 8012174:	f7fe fc0c 	bl	8010990 <_free_r>
 8012178:	2400      	movs	r4, #0
 801217a:	4620      	mov	r0, r4
 801217c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012180:	f000 f833 	bl	80121ea <_malloc_usable_size_r>
 8012184:	4285      	cmp	r5, r0
 8012186:	4606      	mov	r6, r0
 8012188:	d802      	bhi.n	8012190 <_realloc_r+0x34>
 801218a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801218e:	d8f4      	bhi.n	801217a <_realloc_r+0x1e>
 8012190:	4629      	mov	r1, r5
 8012192:	4640      	mov	r0, r8
 8012194:	f7fe ffaa 	bl	80110ec <_malloc_r>
 8012198:	4607      	mov	r7, r0
 801219a:	2800      	cmp	r0, #0
 801219c:	d0ec      	beq.n	8012178 <_realloc_r+0x1c>
 801219e:	42b5      	cmp	r5, r6
 80121a0:	462a      	mov	r2, r5
 80121a2:	4621      	mov	r1, r4
 80121a4:	bf28      	it	cs
 80121a6:	4632      	movcs	r2, r6
 80121a8:	f7fd fd87 	bl	800fcba <memcpy>
 80121ac:	4621      	mov	r1, r4
 80121ae:	4640      	mov	r0, r8
 80121b0:	f7fe fbee 	bl	8010990 <_free_r>
 80121b4:	463c      	mov	r4, r7
 80121b6:	e7e0      	b.n	801217a <_realloc_r+0x1e>

080121b8 <fiprintf>:
 80121b8:	b40e      	push	{r1, r2, r3}
 80121ba:	b503      	push	{r0, r1, lr}
 80121bc:	4601      	mov	r1, r0
 80121be:	ab03      	add	r3, sp, #12
 80121c0:	4805      	ldr	r0, [pc, #20]	@ (80121d8 <fiprintf+0x20>)
 80121c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80121c6:	6800      	ldr	r0, [r0, #0]
 80121c8:	9301      	str	r3, [sp, #4]
 80121ca:	f000 f83f 	bl	801224c <_vfiprintf_r>
 80121ce:	b002      	add	sp, #8
 80121d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80121d4:	b003      	add	sp, #12
 80121d6:	4770      	bx	lr
 80121d8:	2000021c 	.word	0x2000021c

080121dc <abort>:
 80121dc:	b508      	push	{r3, lr}
 80121de:	2006      	movs	r0, #6
 80121e0:	f000 fa08 	bl	80125f4 <raise>
 80121e4:	2001      	movs	r0, #1
 80121e6:	f7ef fcdf 	bl	8001ba8 <_exit>

080121ea <_malloc_usable_size_r>:
 80121ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80121ee:	1f18      	subs	r0, r3, #4
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	bfbc      	itt	lt
 80121f4:	580b      	ldrlt	r3, [r1, r0]
 80121f6:	18c0      	addlt	r0, r0, r3
 80121f8:	4770      	bx	lr

080121fa <__sfputc_r>:
 80121fa:	6893      	ldr	r3, [r2, #8]
 80121fc:	3b01      	subs	r3, #1
 80121fe:	2b00      	cmp	r3, #0
 8012200:	b410      	push	{r4}
 8012202:	6093      	str	r3, [r2, #8]
 8012204:	da08      	bge.n	8012218 <__sfputc_r+0x1e>
 8012206:	6994      	ldr	r4, [r2, #24]
 8012208:	42a3      	cmp	r3, r4
 801220a:	db01      	blt.n	8012210 <__sfputc_r+0x16>
 801220c:	290a      	cmp	r1, #10
 801220e:	d103      	bne.n	8012218 <__sfputc_r+0x1e>
 8012210:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012214:	f000 b932 	b.w	801247c <__swbuf_r>
 8012218:	6813      	ldr	r3, [r2, #0]
 801221a:	1c58      	adds	r0, r3, #1
 801221c:	6010      	str	r0, [r2, #0]
 801221e:	7019      	strb	r1, [r3, #0]
 8012220:	4608      	mov	r0, r1
 8012222:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012226:	4770      	bx	lr

08012228 <__sfputs_r>:
 8012228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801222a:	4606      	mov	r6, r0
 801222c:	460f      	mov	r7, r1
 801222e:	4614      	mov	r4, r2
 8012230:	18d5      	adds	r5, r2, r3
 8012232:	42ac      	cmp	r4, r5
 8012234:	d101      	bne.n	801223a <__sfputs_r+0x12>
 8012236:	2000      	movs	r0, #0
 8012238:	e007      	b.n	801224a <__sfputs_r+0x22>
 801223a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801223e:	463a      	mov	r2, r7
 8012240:	4630      	mov	r0, r6
 8012242:	f7ff ffda 	bl	80121fa <__sfputc_r>
 8012246:	1c43      	adds	r3, r0, #1
 8012248:	d1f3      	bne.n	8012232 <__sfputs_r+0xa>
 801224a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801224c <_vfiprintf_r>:
 801224c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012250:	460d      	mov	r5, r1
 8012252:	b09d      	sub	sp, #116	@ 0x74
 8012254:	4614      	mov	r4, r2
 8012256:	4698      	mov	r8, r3
 8012258:	4606      	mov	r6, r0
 801225a:	b118      	cbz	r0, 8012264 <_vfiprintf_r+0x18>
 801225c:	6a03      	ldr	r3, [r0, #32]
 801225e:	b90b      	cbnz	r3, 8012264 <_vfiprintf_r+0x18>
 8012260:	f7fd fbe0 	bl	800fa24 <__sinit>
 8012264:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012266:	07d9      	lsls	r1, r3, #31
 8012268:	d405      	bmi.n	8012276 <_vfiprintf_r+0x2a>
 801226a:	89ab      	ldrh	r3, [r5, #12]
 801226c:	059a      	lsls	r2, r3, #22
 801226e:	d402      	bmi.n	8012276 <_vfiprintf_r+0x2a>
 8012270:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012272:	f7fd fd20 	bl	800fcb6 <__retarget_lock_acquire_recursive>
 8012276:	89ab      	ldrh	r3, [r5, #12]
 8012278:	071b      	lsls	r3, r3, #28
 801227a:	d501      	bpl.n	8012280 <_vfiprintf_r+0x34>
 801227c:	692b      	ldr	r3, [r5, #16]
 801227e:	b99b      	cbnz	r3, 80122a8 <_vfiprintf_r+0x5c>
 8012280:	4629      	mov	r1, r5
 8012282:	4630      	mov	r0, r6
 8012284:	f000 f938 	bl	80124f8 <__swsetup_r>
 8012288:	b170      	cbz	r0, 80122a8 <_vfiprintf_r+0x5c>
 801228a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801228c:	07dc      	lsls	r4, r3, #31
 801228e:	d504      	bpl.n	801229a <_vfiprintf_r+0x4e>
 8012290:	f04f 30ff 	mov.w	r0, #4294967295
 8012294:	b01d      	add	sp, #116	@ 0x74
 8012296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801229a:	89ab      	ldrh	r3, [r5, #12]
 801229c:	0598      	lsls	r0, r3, #22
 801229e:	d4f7      	bmi.n	8012290 <_vfiprintf_r+0x44>
 80122a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80122a2:	f7fd fd09 	bl	800fcb8 <__retarget_lock_release_recursive>
 80122a6:	e7f3      	b.n	8012290 <_vfiprintf_r+0x44>
 80122a8:	2300      	movs	r3, #0
 80122aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80122ac:	2320      	movs	r3, #32
 80122ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80122b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80122b6:	2330      	movs	r3, #48	@ 0x30
 80122b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012468 <_vfiprintf_r+0x21c>
 80122bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80122c0:	f04f 0901 	mov.w	r9, #1
 80122c4:	4623      	mov	r3, r4
 80122c6:	469a      	mov	sl, r3
 80122c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122cc:	b10a      	cbz	r2, 80122d2 <_vfiprintf_r+0x86>
 80122ce:	2a25      	cmp	r2, #37	@ 0x25
 80122d0:	d1f9      	bne.n	80122c6 <_vfiprintf_r+0x7a>
 80122d2:	ebba 0b04 	subs.w	fp, sl, r4
 80122d6:	d00b      	beq.n	80122f0 <_vfiprintf_r+0xa4>
 80122d8:	465b      	mov	r3, fp
 80122da:	4622      	mov	r2, r4
 80122dc:	4629      	mov	r1, r5
 80122de:	4630      	mov	r0, r6
 80122e0:	f7ff ffa2 	bl	8012228 <__sfputs_r>
 80122e4:	3001      	adds	r0, #1
 80122e6:	f000 80a7 	beq.w	8012438 <_vfiprintf_r+0x1ec>
 80122ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80122ec:	445a      	add	r2, fp
 80122ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80122f0:	f89a 3000 	ldrb.w	r3, [sl]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	f000 809f 	beq.w	8012438 <_vfiprintf_r+0x1ec>
 80122fa:	2300      	movs	r3, #0
 80122fc:	f04f 32ff 	mov.w	r2, #4294967295
 8012300:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012304:	f10a 0a01 	add.w	sl, sl, #1
 8012308:	9304      	str	r3, [sp, #16]
 801230a:	9307      	str	r3, [sp, #28]
 801230c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012310:	931a      	str	r3, [sp, #104]	@ 0x68
 8012312:	4654      	mov	r4, sl
 8012314:	2205      	movs	r2, #5
 8012316:	f814 1b01 	ldrb.w	r1, [r4], #1
 801231a:	4853      	ldr	r0, [pc, #332]	@ (8012468 <_vfiprintf_r+0x21c>)
 801231c:	f7ed ff80 	bl	8000220 <memchr>
 8012320:	9a04      	ldr	r2, [sp, #16]
 8012322:	b9d8      	cbnz	r0, 801235c <_vfiprintf_r+0x110>
 8012324:	06d1      	lsls	r1, r2, #27
 8012326:	bf44      	itt	mi
 8012328:	2320      	movmi	r3, #32
 801232a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801232e:	0713      	lsls	r3, r2, #28
 8012330:	bf44      	itt	mi
 8012332:	232b      	movmi	r3, #43	@ 0x2b
 8012334:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012338:	f89a 3000 	ldrb.w	r3, [sl]
 801233c:	2b2a      	cmp	r3, #42	@ 0x2a
 801233e:	d015      	beq.n	801236c <_vfiprintf_r+0x120>
 8012340:	9a07      	ldr	r2, [sp, #28]
 8012342:	4654      	mov	r4, sl
 8012344:	2000      	movs	r0, #0
 8012346:	f04f 0c0a 	mov.w	ip, #10
 801234a:	4621      	mov	r1, r4
 801234c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012350:	3b30      	subs	r3, #48	@ 0x30
 8012352:	2b09      	cmp	r3, #9
 8012354:	d94b      	bls.n	80123ee <_vfiprintf_r+0x1a2>
 8012356:	b1b0      	cbz	r0, 8012386 <_vfiprintf_r+0x13a>
 8012358:	9207      	str	r2, [sp, #28]
 801235a:	e014      	b.n	8012386 <_vfiprintf_r+0x13a>
 801235c:	eba0 0308 	sub.w	r3, r0, r8
 8012360:	fa09 f303 	lsl.w	r3, r9, r3
 8012364:	4313      	orrs	r3, r2
 8012366:	9304      	str	r3, [sp, #16]
 8012368:	46a2      	mov	sl, r4
 801236a:	e7d2      	b.n	8012312 <_vfiprintf_r+0xc6>
 801236c:	9b03      	ldr	r3, [sp, #12]
 801236e:	1d19      	adds	r1, r3, #4
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	9103      	str	r1, [sp, #12]
 8012374:	2b00      	cmp	r3, #0
 8012376:	bfbb      	ittet	lt
 8012378:	425b      	neglt	r3, r3
 801237a:	f042 0202 	orrlt.w	r2, r2, #2
 801237e:	9307      	strge	r3, [sp, #28]
 8012380:	9307      	strlt	r3, [sp, #28]
 8012382:	bfb8      	it	lt
 8012384:	9204      	strlt	r2, [sp, #16]
 8012386:	7823      	ldrb	r3, [r4, #0]
 8012388:	2b2e      	cmp	r3, #46	@ 0x2e
 801238a:	d10a      	bne.n	80123a2 <_vfiprintf_r+0x156>
 801238c:	7863      	ldrb	r3, [r4, #1]
 801238e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012390:	d132      	bne.n	80123f8 <_vfiprintf_r+0x1ac>
 8012392:	9b03      	ldr	r3, [sp, #12]
 8012394:	1d1a      	adds	r2, r3, #4
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	9203      	str	r2, [sp, #12]
 801239a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801239e:	3402      	adds	r4, #2
 80123a0:	9305      	str	r3, [sp, #20]
 80123a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012478 <_vfiprintf_r+0x22c>
 80123a6:	7821      	ldrb	r1, [r4, #0]
 80123a8:	2203      	movs	r2, #3
 80123aa:	4650      	mov	r0, sl
 80123ac:	f7ed ff38 	bl	8000220 <memchr>
 80123b0:	b138      	cbz	r0, 80123c2 <_vfiprintf_r+0x176>
 80123b2:	9b04      	ldr	r3, [sp, #16]
 80123b4:	eba0 000a 	sub.w	r0, r0, sl
 80123b8:	2240      	movs	r2, #64	@ 0x40
 80123ba:	4082      	lsls	r2, r0
 80123bc:	4313      	orrs	r3, r2
 80123be:	3401      	adds	r4, #1
 80123c0:	9304      	str	r3, [sp, #16]
 80123c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123c6:	4829      	ldr	r0, [pc, #164]	@ (801246c <_vfiprintf_r+0x220>)
 80123c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80123cc:	2206      	movs	r2, #6
 80123ce:	f7ed ff27 	bl	8000220 <memchr>
 80123d2:	2800      	cmp	r0, #0
 80123d4:	d03f      	beq.n	8012456 <_vfiprintf_r+0x20a>
 80123d6:	4b26      	ldr	r3, [pc, #152]	@ (8012470 <_vfiprintf_r+0x224>)
 80123d8:	bb1b      	cbnz	r3, 8012422 <_vfiprintf_r+0x1d6>
 80123da:	9b03      	ldr	r3, [sp, #12]
 80123dc:	3307      	adds	r3, #7
 80123de:	f023 0307 	bic.w	r3, r3, #7
 80123e2:	3308      	adds	r3, #8
 80123e4:	9303      	str	r3, [sp, #12]
 80123e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123e8:	443b      	add	r3, r7
 80123ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80123ec:	e76a      	b.n	80122c4 <_vfiprintf_r+0x78>
 80123ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80123f2:	460c      	mov	r4, r1
 80123f4:	2001      	movs	r0, #1
 80123f6:	e7a8      	b.n	801234a <_vfiprintf_r+0xfe>
 80123f8:	2300      	movs	r3, #0
 80123fa:	3401      	adds	r4, #1
 80123fc:	9305      	str	r3, [sp, #20]
 80123fe:	4619      	mov	r1, r3
 8012400:	f04f 0c0a 	mov.w	ip, #10
 8012404:	4620      	mov	r0, r4
 8012406:	f810 2b01 	ldrb.w	r2, [r0], #1
 801240a:	3a30      	subs	r2, #48	@ 0x30
 801240c:	2a09      	cmp	r2, #9
 801240e:	d903      	bls.n	8012418 <_vfiprintf_r+0x1cc>
 8012410:	2b00      	cmp	r3, #0
 8012412:	d0c6      	beq.n	80123a2 <_vfiprintf_r+0x156>
 8012414:	9105      	str	r1, [sp, #20]
 8012416:	e7c4      	b.n	80123a2 <_vfiprintf_r+0x156>
 8012418:	fb0c 2101 	mla	r1, ip, r1, r2
 801241c:	4604      	mov	r4, r0
 801241e:	2301      	movs	r3, #1
 8012420:	e7f0      	b.n	8012404 <_vfiprintf_r+0x1b8>
 8012422:	ab03      	add	r3, sp, #12
 8012424:	9300      	str	r3, [sp, #0]
 8012426:	462a      	mov	r2, r5
 8012428:	4b12      	ldr	r3, [pc, #72]	@ (8012474 <_vfiprintf_r+0x228>)
 801242a:	a904      	add	r1, sp, #16
 801242c:	4630      	mov	r0, r6
 801242e:	f7fc fca1 	bl	800ed74 <_printf_float>
 8012432:	4607      	mov	r7, r0
 8012434:	1c78      	adds	r0, r7, #1
 8012436:	d1d6      	bne.n	80123e6 <_vfiprintf_r+0x19a>
 8012438:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801243a:	07d9      	lsls	r1, r3, #31
 801243c:	d405      	bmi.n	801244a <_vfiprintf_r+0x1fe>
 801243e:	89ab      	ldrh	r3, [r5, #12]
 8012440:	059a      	lsls	r2, r3, #22
 8012442:	d402      	bmi.n	801244a <_vfiprintf_r+0x1fe>
 8012444:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012446:	f7fd fc37 	bl	800fcb8 <__retarget_lock_release_recursive>
 801244a:	89ab      	ldrh	r3, [r5, #12]
 801244c:	065b      	lsls	r3, r3, #25
 801244e:	f53f af1f 	bmi.w	8012290 <_vfiprintf_r+0x44>
 8012452:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012454:	e71e      	b.n	8012294 <_vfiprintf_r+0x48>
 8012456:	ab03      	add	r3, sp, #12
 8012458:	9300      	str	r3, [sp, #0]
 801245a:	462a      	mov	r2, r5
 801245c:	4b05      	ldr	r3, [pc, #20]	@ (8012474 <_vfiprintf_r+0x228>)
 801245e:	a904      	add	r1, sp, #16
 8012460:	4630      	mov	r0, r6
 8012462:	f7fc ff1f 	bl	800f2a4 <_printf_i>
 8012466:	e7e4      	b.n	8012432 <_vfiprintf_r+0x1e6>
 8012468:	08013aa1 	.word	0x08013aa1
 801246c:	08013aab 	.word	0x08013aab
 8012470:	0800ed75 	.word	0x0800ed75
 8012474:	08012229 	.word	0x08012229
 8012478:	08013aa7 	.word	0x08013aa7

0801247c <__swbuf_r>:
 801247c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801247e:	460e      	mov	r6, r1
 8012480:	4614      	mov	r4, r2
 8012482:	4605      	mov	r5, r0
 8012484:	b118      	cbz	r0, 801248e <__swbuf_r+0x12>
 8012486:	6a03      	ldr	r3, [r0, #32]
 8012488:	b90b      	cbnz	r3, 801248e <__swbuf_r+0x12>
 801248a:	f7fd facb 	bl	800fa24 <__sinit>
 801248e:	69a3      	ldr	r3, [r4, #24]
 8012490:	60a3      	str	r3, [r4, #8]
 8012492:	89a3      	ldrh	r3, [r4, #12]
 8012494:	071a      	lsls	r2, r3, #28
 8012496:	d501      	bpl.n	801249c <__swbuf_r+0x20>
 8012498:	6923      	ldr	r3, [r4, #16]
 801249a:	b943      	cbnz	r3, 80124ae <__swbuf_r+0x32>
 801249c:	4621      	mov	r1, r4
 801249e:	4628      	mov	r0, r5
 80124a0:	f000 f82a 	bl	80124f8 <__swsetup_r>
 80124a4:	b118      	cbz	r0, 80124ae <__swbuf_r+0x32>
 80124a6:	f04f 37ff 	mov.w	r7, #4294967295
 80124aa:	4638      	mov	r0, r7
 80124ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124ae:	6823      	ldr	r3, [r4, #0]
 80124b0:	6922      	ldr	r2, [r4, #16]
 80124b2:	1a98      	subs	r0, r3, r2
 80124b4:	6963      	ldr	r3, [r4, #20]
 80124b6:	b2f6      	uxtb	r6, r6
 80124b8:	4283      	cmp	r3, r0
 80124ba:	4637      	mov	r7, r6
 80124bc:	dc05      	bgt.n	80124ca <__swbuf_r+0x4e>
 80124be:	4621      	mov	r1, r4
 80124c0:	4628      	mov	r0, r5
 80124c2:	f7ff fdc7 	bl	8012054 <_fflush_r>
 80124c6:	2800      	cmp	r0, #0
 80124c8:	d1ed      	bne.n	80124a6 <__swbuf_r+0x2a>
 80124ca:	68a3      	ldr	r3, [r4, #8]
 80124cc:	3b01      	subs	r3, #1
 80124ce:	60a3      	str	r3, [r4, #8]
 80124d0:	6823      	ldr	r3, [r4, #0]
 80124d2:	1c5a      	adds	r2, r3, #1
 80124d4:	6022      	str	r2, [r4, #0]
 80124d6:	701e      	strb	r6, [r3, #0]
 80124d8:	6962      	ldr	r2, [r4, #20]
 80124da:	1c43      	adds	r3, r0, #1
 80124dc:	429a      	cmp	r2, r3
 80124de:	d004      	beq.n	80124ea <__swbuf_r+0x6e>
 80124e0:	89a3      	ldrh	r3, [r4, #12]
 80124e2:	07db      	lsls	r3, r3, #31
 80124e4:	d5e1      	bpl.n	80124aa <__swbuf_r+0x2e>
 80124e6:	2e0a      	cmp	r6, #10
 80124e8:	d1df      	bne.n	80124aa <__swbuf_r+0x2e>
 80124ea:	4621      	mov	r1, r4
 80124ec:	4628      	mov	r0, r5
 80124ee:	f7ff fdb1 	bl	8012054 <_fflush_r>
 80124f2:	2800      	cmp	r0, #0
 80124f4:	d0d9      	beq.n	80124aa <__swbuf_r+0x2e>
 80124f6:	e7d6      	b.n	80124a6 <__swbuf_r+0x2a>

080124f8 <__swsetup_r>:
 80124f8:	b538      	push	{r3, r4, r5, lr}
 80124fa:	4b29      	ldr	r3, [pc, #164]	@ (80125a0 <__swsetup_r+0xa8>)
 80124fc:	4605      	mov	r5, r0
 80124fe:	6818      	ldr	r0, [r3, #0]
 8012500:	460c      	mov	r4, r1
 8012502:	b118      	cbz	r0, 801250c <__swsetup_r+0x14>
 8012504:	6a03      	ldr	r3, [r0, #32]
 8012506:	b90b      	cbnz	r3, 801250c <__swsetup_r+0x14>
 8012508:	f7fd fa8c 	bl	800fa24 <__sinit>
 801250c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012510:	0719      	lsls	r1, r3, #28
 8012512:	d422      	bmi.n	801255a <__swsetup_r+0x62>
 8012514:	06da      	lsls	r2, r3, #27
 8012516:	d407      	bmi.n	8012528 <__swsetup_r+0x30>
 8012518:	2209      	movs	r2, #9
 801251a:	602a      	str	r2, [r5, #0]
 801251c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012520:	81a3      	strh	r3, [r4, #12]
 8012522:	f04f 30ff 	mov.w	r0, #4294967295
 8012526:	e033      	b.n	8012590 <__swsetup_r+0x98>
 8012528:	0758      	lsls	r0, r3, #29
 801252a:	d512      	bpl.n	8012552 <__swsetup_r+0x5a>
 801252c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801252e:	b141      	cbz	r1, 8012542 <__swsetup_r+0x4a>
 8012530:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012534:	4299      	cmp	r1, r3
 8012536:	d002      	beq.n	801253e <__swsetup_r+0x46>
 8012538:	4628      	mov	r0, r5
 801253a:	f7fe fa29 	bl	8010990 <_free_r>
 801253e:	2300      	movs	r3, #0
 8012540:	6363      	str	r3, [r4, #52]	@ 0x34
 8012542:	89a3      	ldrh	r3, [r4, #12]
 8012544:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012548:	81a3      	strh	r3, [r4, #12]
 801254a:	2300      	movs	r3, #0
 801254c:	6063      	str	r3, [r4, #4]
 801254e:	6923      	ldr	r3, [r4, #16]
 8012550:	6023      	str	r3, [r4, #0]
 8012552:	89a3      	ldrh	r3, [r4, #12]
 8012554:	f043 0308 	orr.w	r3, r3, #8
 8012558:	81a3      	strh	r3, [r4, #12]
 801255a:	6923      	ldr	r3, [r4, #16]
 801255c:	b94b      	cbnz	r3, 8012572 <__swsetup_r+0x7a>
 801255e:	89a3      	ldrh	r3, [r4, #12]
 8012560:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012568:	d003      	beq.n	8012572 <__swsetup_r+0x7a>
 801256a:	4621      	mov	r1, r4
 801256c:	4628      	mov	r0, r5
 801256e:	f000 f883 	bl	8012678 <__smakebuf_r>
 8012572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012576:	f013 0201 	ands.w	r2, r3, #1
 801257a:	d00a      	beq.n	8012592 <__swsetup_r+0x9a>
 801257c:	2200      	movs	r2, #0
 801257e:	60a2      	str	r2, [r4, #8]
 8012580:	6962      	ldr	r2, [r4, #20]
 8012582:	4252      	negs	r2, r2
 8012584:	61a2      	str	r2, [r4, #24]
 8012586:	6922      	ldr	r2, [r4, #16]
 8012588:	b942      	cbnz	r2, 801259c <__swsetup_r+0xa4>
 801258a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801258e:	d1c5      	bne.n	801251c <__swsetup_r+0x24>
 8012590:	bd38      	pop	{r3, r4, r5, pc}
 8012592:	0799      	lsls	r1, r3, #30
 8012594:	bf58      	it	pl
 8012596:	6962      	ldrpl	r2, [r4, #20]
 8012598:	60a2      	str	r2, [r4, #8]
 801259a:	e7f4      	b.n	8012586 <__swsetup_r+0x8e>
 801259c:	2000      	movs	r0, #0
 801259e:	e7f7      	b.n	8012590 <__swsetup_r+0x98>
 80125a0:	2000021c 	.word	0x2000021c

080125a4 <_raise_r>:
 80125a4:	291f      	cmp	r1, #31
 80125a6:	b538      	push	{r3, r4, r5, lr}
 80125a8:	4605      	mov	r5, r0
 80125aa:	460c      	mov	r4, r1
 80125ac:	d904      	bls.n	80125b8 <_raise_r+0x14>
 80125ae:	2316      	movs	r3, #22
 80125b0:	6003      	str	r3, [r0, #0]
 80125b2:	f04f 30ff 	mov.w	r0, #4294967295
 80125b6:	bd38      	pop	{r3, r4, r5, pc}
 80125b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80125ba:	b112      	cbz	r2, 80125c2 <_raise_r+0x1e>
 80125bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80125c0:	b94b      	cbnz	r3, 80125d6 <_raise_r+0x32>
 80125c2:	4628      	mov	r0, r5
 80125c4:	f000 f830 	bl	8012628 <_getpid_r>
 80125c8:	4622      	mov	r2, r4
 80125ca:	4601      	mov	r1, r0
 80125cc:	4628      	mov	r0, r5
 80125ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125d2:	f000 b817 	b.w	8012604 <_kill_r>
 80125d6:	2b01      	cmp	r3, #1
 80125d8:	d00a      	beq.n	80125f0 <_raise_r+0x4c>
 80125da:	1c59      	adds	r1, r3, #1
 80125dc:	d103      	bne.n	80125e6 <_raise_r+0x42>
 80125de:	2316      	movs	r3, #22
 80125e0:	6003      	str	r3, [r0, #0]
 80125e2:	2001      	movs	r0, #1
 80125e4:	e7e7      	b.n	80125b6 <_raise_r+0x12>
 80125e6:	2100      	movs	r1, #0
 80125e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80125ec:	4620      	mov	r0, r4
 80125ee:	4798      	blx	r3
 80125f0:	2000      	movs	r0, #0
 80125f2:	e7e0      	b.n	80125b6 <_raise_r+0x12>

080125f4 <raise>:
 80125f4:	4b02      	ldr	r3, [pc, #8]	@ (8012600 <raise+0xc>)
 80125f6:	4601      	mov	r1, r0
 80125f8:	6818      	ldr	r0, [r3, #0]
 80125fa:	f7ff bfd3 	b.w	80125a4 <_raise_r>
 80125fe:	bf00      	nop
 8012600:	2000021c 	.word	0x2000021c

08012604 <_kill_r>:
 8012604:	b538      	push	{r3, r4, r5, lr}
 8012606:	4d07      	ldr	r5, [pc, #28]	@ (8012624 <_kill_r+0x20>)
 8012608:	2300      	movs	r3, #0
 801260a:	4604      	mov	r4, r0
 801260c:	4608      	mov	r0, r1
 801260e:	4611      	mov	r1, r2
 8012610:	602b      	str	r3, [r5, #0]
 8012612:	f7ef fab9 	bl	8001b88 <_kill>
 8012616:	1c43      	adds	r3, r0, #1
 8012618:	d102      	bne.n	8012620 <_kill_r+0x1c>
 801261a:	682b      	ldr	r3, [r5, #0]
 801261c:	b103      	cbz	r3, 8012620 <_kill_r+0x1c>
 801261e:	6023      	str	r3, [r4, #0]
 8012620:	bd38      	pop	{r3, r4, r5, pc}
 8012622:	bf00      	nop
 8012624:	20000c04 	.word	0x20000c04

08012628 <_getpid_r>:
 8012628:	f7ef baa6 	b.w	8001b78 <_getpid>

0801262c <__swhatbuf_r>:
 801262c:	b570      	push	{r4, r5, r6, lr}
 801262e:	460c      	mov	r4, r1
 8012630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012634:	2900      	cmp	r1, #0
 8012636:	b096      	sub	sp, #88	@ 0x58
 8012638:	4615      	mov	r5, r2
 801263a:	461e      	mov	r6, r3
 801263c:	da0d      	bge.n	801265a <__swhatbuf_r+0x2e>
 801263e:	89a3      	ldrh	r3, [r4, #12]
 8012640:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012644:	f04f 0100 	mov.w	r1, #0
 8012648:	bf14      	ite	ne
 801264a:	2340      	movne	r3, #64	@ 0x40
 801264c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012650:	2000      	movs	r0, #0
 8012652:	6031      	str	r1, [r6, #0]
 8012654:	602b      	str	r3, [r5, #0]
 8012656:	b016      	add	sp, #88	@ 0x58
 8012658:	bd70      	pop	{r4, r5, r6, pc}
 801265a:	466a      	mov	r2, sp
 801265c:	f000 f848 	bl	80126f0 <_fstat_r>
 8012660:	2800      	cmp	r0, #0
 8012662:	dbec      	blt.n	801263e <__swhatbuf_r+0x12>
 8012664:	9901      	ldr	r1, [sp, #4]
 8012666:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801266a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801266e:	4259      	negs	r1, r3
 8012670:	4159      	adcs	r1, r3
 8012672:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012676:	e7eb      	b.n	8012650 <__swhatbuf_r+0x24>

08012678 <__smakebuf_r>:
 8012678:	898b      	ldrh	r3, [r1, #12]
 801267a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801267c:	079d      	lsls	r5, r3, #30
 801267e:	4606      	mov	r6, r0
 8012680:	460c      	mov	r4, r1
 8012682:	d507      	bpl.n	8012694 <__smakebuf_r+0x1c>
 8012684:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012688:	6023      	str	r3, [r4, #0]
 801268a:	6123      	str	r3, [r4, #16]
 801268c:	2301      	movs	r3, #1
 801268e:	6163      	str	r3, [r4, #20]
 8012690:	b003      	add	sp, #12
 8012692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012694:	ab01      	add	r3, sp, #4
 8012696:	466a      	mov	r2, sp
 8012698:	f7ff ffc8 	bl	801262c <__swhatbuf_r>
 801269c:	9f00      	ldr	r7, [sp, #0]
 801269e:	4605      	mov	r5, r0
 80126a0:	4639      	mov	r1, r7
 80126a2:	4630      	mov	r0, r6
 80126a4:	f7fe fd22 	bl	80110ec <_malloc_r>
 80126a8:	b948      	cbnz	r0, 80126be <__smakebuf_r+0x46>
 80126aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126ae:	059a      	lsls	r2, r3, #22
 80126b0:	d4ee      	bmi.n	8012690 <__smakebuf_r+0x18>
 80126b2:	f023 0303 	bic.w	r3, r3, #3
 80126b6:	f043 0302 	orr.w	r3, r3, #2
 80126ba:	81a3      	strh	r3, [r4, #12]
 80126bc:	e7e2      	b.n	8012684 <__smakebuf_r+0xc>
 80126be:	89a3      	ldrh	r3, [r4, #12]
 80126c0:	6020      	str	r0, [r4, #0]
 80126c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80126c6:	81a3      	strh	r3, [r4, #12]
 80126c8:	9b01      	ldr	r3, [sp, #4]
 80126ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80126ce:	b15b      	cbz	r3, 80126e8 <__smakebuf_r+0x70>
 80126d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80126d4:	4630      	mov	r0, r6
 80126d6:	f000 f81d 	bl	8012714 <_isatty_r>
 80126da:	b128      	cbz	r0, 80126e8 <__smakebuf_r+0x70>
 80126dc:	89a3      	ldrh	r3, [r4, #12]
 80126de:	f023 0303 	bic.w	r3, r3, #3
 80126e2:	f043 0301 	orr.w	r3, r3, #1
 80126e6:	81a3      	strh	r3, [r4, #12]
 80126e8:	89a3      	ldrh	r3, [r4, #12]
 80126ea:	431d      	orrs	r5, r3
 80126ec:	81a5      	strh	r5, [r4, #12]
 80126ee:	e7cf      	b.n	8012690 <__smakebuf_r+0x18>

080126f0 <_fstat_r>:
 80126f0:	b538      	push	{r3, r4, r5, lr}
 80126f2:	4d07      	ldr	r5, [pc, #28]	@ (8012710 <_fstat_r+0x20>)
 80126f4:	2300      	movs	r3, #0
 80126f6:	4604      	mov	r4, r0
 80126f8:	4608      	mov	r0, r1
 80126fa:	4611      	mov	r1, r2
 80126fc:	602b      	str	r3, [r5, #0]
 80126fe:	f7ef faa3 	bl	8001c48 <_fstat>
 8012702:	1c43      	adds	r3, r0, #1
 8012704:	d102      	bne.n	801270c <_fstat_r+0x1c>
 8012706:	682b      	ldr	r3, [r5, #0]
 8012708:	b103      	cbz	r3, 801270c <_fstat_r+0x1c>
 801270a:	6023      	str	r3, [r4, #0]
 801270c:	bd38      	pop	{r3, r4, r5, pc}
 801270e:	bf00      	nop
 8012710:	20000c04 	.word	0x20000c04

08012714 <_isatty_r>:
 8012714:	b538      	push	{r3, r4, r5, lr}
 8012716:	4d06      	ldr	r5, [pc, #24]	@ (8012730 <_isatty_r+0x1c>)
 8012718:	2300      	movs	r3, #0
 801271a:	4604      	mov	r4, r0
 801271c:	4608      	mov	r0, r1
 801271e:	602b      	str	r3, [r5, #0]
 8012720:	f7ef faa2 	bl	8001c68 <_isatty>
 8012724:	1c43      	adds	r3, r0, #1
 8012726:	d102      	bne.n	801272e <_isatty_r+0x1a>
 8012728:	682b      	ldr	r3, [r5, #0]
 801272a:	b103      	cbz	r3, 801272e <_isatty_r+0x1a>
 801272c:	6023      	str	r3, [r4, #0]
 801272e:	bd38      	pop	{r3, r4, r5, pc}
 8012730:	20000c04 	.word	0x20000c04

08012734 <asin>:
 8012734:	b538      	push	{r3, r4, r5, lr}
 8012736:	ed2d 8b02 	vpush	{d8}
 801273a:	ec55 4b10 	vmov	r4, r5, d0
 801273e:	f000 f96b 	bl	8012a18 <__ieee754_asin>
 8012742:	4622      	mov	r2, r4
 8012744:	462b      	mov	r3, r5
 8012746:	4620      	mov	r0, r4
 8012748:	4629      	mov	r1, r5
 801274a:	eeb0 8a40 	vmov.f32	s16, s0
 801274e:	eef0 8a60 	vmov.f32	s17, s1
 8012752:	f7ee fa13 	bl	8000b7c <__aeabi_dcmpun>
 8012756:	b9a8      	cbnz	r0, 8012784 <asin+0x50>
 8012758:	ec45 4b10 	vmov	d0, r4, r5
 801275c:	f000 f87a 	bl	8012854 <fabs>
 8012760:	4b0c      	ldr	r3, [pc, #48]	@ (8012794 <asin+0x60>)
 8012762:	ec51 0b10 	vmov	r0, r1, d0
 8012766:	2200      	movs	r2, #0
 8012768:	f7ee f9fe 	bl	8000b68 <__aeabi_dcmpgt>
 801276c:	b150      	cbz	r0, 8012784 <asin+0x50>
 801276e:	f7fd fa77 	bl	800fc60 <__errno>
 8012772:	ecbd 8b02 	vpop	{d8}
 8012776:	2321      	movs	r3, #33	@ 0x21
 8012778:	6003      	str	r3, [r0, #0]
 801277a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801277e:	4806      	ldr	r0, [pc, #24]	@ (8012798 <asin+0x64>)
 8012780:	f7fd baaa 	b.w	800fcd8 <nan>
 8012784:	eeb0 0a48 	vmov.f32	s0, s16
 8012788:	eef0 0a68 	vmov.f32	s1, s17
 801278c:	ecbd 8b02 	vpop	{d8}
 8012790:	bd38      	pop	{r3, r4, r5, pc}
 8012792:	bf00      	nop
 8012794:	3ff00000 	.word	0x3ff00000
 8012798:	08013aed 	.word	0x08013aed

0801279c <atan2>:
 801279c:	f000 bb40 	b.w	8012e20 <__ieee754_atan2>

080127a0 <fmod>:
 80127a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127a2:	ed2d 8b02 	vpush	{d8}
 80127a6:	ec57 6b10 	vmov	r6, r7, d0
 80127aa:	ec55 4b11 	vmov	r4, r5, d1
 80127ae:	f000 fbfd 	bl	8012fac <__ieee754_fmod>
 80127b2:	4622      	mov	r2, r4
 80127b4:	462b      	mov	r3, r5
 80127b6:	4630      	mov	r0, r6
 80127b8:	4639      	mov	r1, r7
 80127ba:	eeb0 8a40 	vmov.f32	s16, s0
 80127be:	eef0 8a60 	vmov.f32	s17, s1
 80127c2:	f7ee f9db 	bl	8000b7c <__aeabi_dcmpun>
 80127c6:	b990      	cbnz	r0, 80127ee <fmod+0x4e>
 80127c8:	2200      	movs	r2, #0
 80127ca:	2300      	movs	r3, #0
 80127cc:	4620      	mov	r0, r4
 80127ce:	4629      	mov	r1, r5
 80127d0:	f7ee f9a2 	bl	8000b18 <__aeabi_dcmpeq>
 80127d4:	b158      	cbz	r0, 80127ee <fmod+0x4e>
 80127d6:	f7fd fa43 	bl	800fc60 <__errno>
 80127da:	2321      	movs	r3, #33	@ 0x21
 80127dc:	6003      	str	r3, [r0, #0]
 80127de:	2200      	movs	r2, #0
 80127e0:	2300      	movs	r3, #0
 80127e2:	4610      	mov	r0, r2
 80127e4:	4619      	mov	r1, r3
 80127e6:	f7ee f859 	bl	800089c <__aeabi_ddiv>
 80127ea:	ec41 0b18 	vmov	d8, r0, r1
 80127ee:	eeb0 0a48 	vmov.f32	s0, s16
 80127f2:	eef0 0a68 	vmov.f32	s1, s17
 80127f6:	ecbd 8b02 	vpop	{d8}
 80127fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080127fc <sqrt>:
 80127fc:	b538      	push	{r3, r4, r5, lr}
 80127fe:	ed2d 8b02 	vpush	{d8}
 8012802:	ec55 4b10 	vmov	r4, r5, d0
 8012806:	f000 f82d 	bl	8012864 <__ieee754_sqrt>
 801280a:	4622      	mov	r2, r4
 801280c:	462b      	mov	r3, r5
 801280e:	4620      	mov	r0, r4
 8012810:	4629      	mov	r1, r5
 8012812:	eeb0 8a40 	vmov.f32	s16, s0
 8012816:	eef0 8a60 	vmov.f32	s17, s1
 801281a:	f7ee f9af 	bl	8000b7c <__aeabi_dcmpun>
 801281e:	b990      	cbnz	r0, 8012846 <sqrt+0x4a>
 8012820:	2200      	movs	r2, #0
 8012822:	2300      	movs	r3, #0
 8012824:	4620      	mov	r0, r4
 8012826:	4629      	mov	r1, r5
 8012828:	f7ee f980 	bl	8000b2c <__aeabi_dcmplt>
 801282c:	b158      	cbz	r0, 8012846 <sqrt+0x4a>
 801282e:	f7fd fa17 	bl	800fc60 <__errno>
 8012832:	2321      	movs	r3, #33	@ 0x21
 8012834:	6003      	str	r3, [r0, #0]
 8012836:	2200      	movs	r2, #0
 8012838:	2300      	movs	r3, #0
 801283a:	4610      	mov	r0, r2
 801283c:	4619      	mov	r1, r3
 801283e:	f7ee f82d 	bl	800089c <__aeabi_ddiv>
 8012842:	ec41 0b18 	vmov	d8, r0, r1
 8012846:	eeb0 0a48 	vmov.f32	s0, s16
 801284a:	eef0 0a68 	vmov.f32	s1, s17
 801284e:	ecbd 8b02 	vpop	{d8}
 8012852:	bd38      	pop	{r3, r4, r5, pc}

08012854 <fabs>:
 8012854:	ec51 0b10 	vmov	r0, r1, d0
 8012858:	4602      	mov	r2, r0
 801285a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801285e:	ec43 2b10 	vmov	d0, r2, r3
 8012862:	4770      	bx	lr

08012864 <__ieee754_sqrt>:
 8012864:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012868:	4a68      	ldr	r2, [pc, #416]	@ (8012a0c <__ieee754_sqrt+0x1a8>)
 801286a:	ec55 4b10 	vmov	r4, r5, d0
 801286e:	43aa      	bics	r2, r5
 8012870:	462b      	mov	r3, r5
 8012872:	4621      	mov	r1, r4
 8012874:	d110      	bne.n	8012898 <__ieee754_sqrt+0x34>
 8012876:	4622      	mov	r2, r4
 8012878:	4620      	mov	r0, r4
 801287a:	4629      	mov	r1, r5
 801287c:	f7ed fee4 	bl	8000648 <__aeabi_dmul>
 8012880:	4602      	mov	r2, r0
 8012882:	460b      	mov	r3, r1
 8012884:	4620      	mov	r0, r4
 8012886:	4629      	mov	r1, r5
 8012888:	f7ed fd28 	bl	80002dc <__adddf3>
 801288c:	4604      	mov	r4, r0
 801288e:	460d      	mov	r5, r1
 8012890:	ec45 4b10 	vmov	d0, r4, r5
 8012894:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012898:	2d00      	cmp	r5, #0
 801289a:	dc0e      	bgt.n	80128ba <__ieee754_sqrt+0x56>
 801289c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80128a0:	4322      	orrs	r2, r4
 80128a2:	d0f5      	beq.n	8012890 <__ieee754_sqrt+0x2c>
 80128a4:	b19d      	cbz	r5, 80128ce <__ieee754_sqrt+0x6a>
 80128a6:	4622      	mov	r2, r4
 80128a8:	4620      	mov	r0, r4
 80128aa:	4629      	mov	r1, r5
 80128ac:	f7ed fd14 	bl	80002d8 <__aeabi_dsub>
 80128b0:	4602      	mov	r2, r0
 80128b2:	460b      	mov	r3, r1
 80128b4:	f7ed fff2 	bl	800089c <__aeabi_ddiv>
 80128b8:	e7e8      	b.n	801288c <__ieee754_sqrt+0x28>
 80128ba:	152a      	asrs	r2, r5, #20
 80128bc:	d115      	bne.n	80128ea <__ieee754_sqrt+0x86>
 80128be:	2000      	movs	r0, #0
 80128c0:	e009      	b.n	80128d6 <__ieee754_sqrt+0x72>
 80128c2:	0acb      	lsrs	r3, r1, #11
 80128c4:	3a15      	subs	r2, #21
 80128c6:	0549      	lsls	r1, r1, #21
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d0fa      	beq.n	80128c2 <__ieee754_sqrt+0x5e>
 80128cc:	e7f7      	b.n	80128be <__ieee754_sqrt+0x5a>
 80128ce:	462a      	mov	r2, r5
 80128d0:	e7fa      	b.n	80128c8 <__ieee754_sqrt+0x64>
 80128d2:	005b      	lsls	r3, r3, #1
 80128d4:	3001      	adds	r0, #1
 80128d6:	02dc      	lsls	r4, r3, #11
 80128d8:	d5fb      	bpl.n	80128d2 <__ieee754_sqrt+0x6e>
 80128da:	1e44      	subs	r4, r0, #1
 80128dc:	1b12      	subs	r2, r2, r4
 80128de:	f1c0 0420 	rsb	r4, r0, #32
 80128e2:	fa21 f404 	lsr.w	r4, r1, r4
 80128e6:	4323      	orrs	r3, r4
 80128e8:	4081      	lsls	r1, r0
 80128ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80128ee:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80128f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80128f6:	07d2      	lsls	r2, r2, #31
 80128f8:	bf5c      	itt	pl
 80128fa:	005b      	lslpl	r3, r3, #1
 80128fc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8012900:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012904:	bf58      	it	pl
 8012906:	0049      	lslpl	r1, r1, #1
 8012908:	2600      	movs	r6, #0
 801290a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801290e:	106d      	asrs	r5, r5, #1
 8012910:	0049      	lsls	r1, r1, #1
 8012912:	2016      	movs	r0, #22
 8012914:	4632      	mov	r2, r6
 8012916:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801291a:	1917      	adds	r7, r2, r4
 801291c:	429f      	cmp	r7, r3
 801291e:	bfde      	ittt	le
 8012920:	193a      	addle	r2, r7, r4
 8012922:	1bdb      	suble	r3, r3, r7
 8012924:	1936      	addle	r6, r6, r4
 8012926:	0fcf      	lsrs	r7, r1, #31
 8012928:	3801      	subs	r0, #1
 801292a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801292e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012932:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012936:	d1f0      	bne.n	801291a <__ieee754_sqrt+0xb6>
 8012938:	4604      	mov	r4, r0
 801293a:	2720      	movs	r7, #32
 801293c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8012940:	429a      	cmp	r2, r3
 8012942:	eb00 0e0c 	add.w	lr, r0, ip
 8012946:	db02      	blt.n	801294e <__ieee754_sqrt+0xea>
 8012948:	d113      	bne.n	8012972 <__ieee754_sqrt+0x10e>
 801294a:	458e      	cmp	lr, r1
 801294c:	d811      	bhi.n	8012972 <__ieee754_sqrt+0x10e>
 801294e:	f1be 0f00 	cmp.w	lr, #0
 8012952:	eb0e 000c 	add.w	r0, lr, ip
 8012956:	da42      	bge.n	80129de <__ieee754_sqrt+0x17a>
 8012958:	2800      	cmp	r0, #0
 801295a:	db40      	blt.n	80129de <__ieee754_sqrt+0x17a>
 801295c:	f102 0801 	add.w	r8, r2, #1
 8012960:	1a9b      	subs	r3, r3, r2
 8012962:	458e      	cmp	lr, r1
 8012964:	bf88      	it	hi
 8012966:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801296a:	eba1 010e 	sub.w	r1, r1, lr
 801296e:	4464      	add	r4, ip
 8012970:	4642      	mov	r2, r8
 8012972:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8012976:	3f01      	subs	r7, #1
 8012978:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801297c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012980:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8012984:	d1dc      	bne.n	8012940 <__ieee754_sqrt+0xdc>
 8012986:	4319      	orrs	r1, r3
 8012988:	d01b      	beq.n	80129c2 <__ieee754_sqrt+0x15e>
 801298a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8012a10 <__ieee754_sqrt+0x1ac>
 801298e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8012a14 <__ieee754_sqrt+0x1b0>
 8012992:	e9da 0100 	ldrd	r0, r1, [sl]
 8012996:	e9db 2300 	ldrd	r2, r3, [fp]
 801299a:	f7ed fc9d 	bl	80002d8 <__aeabi_dsub>
 801299e:	e9da 8900 	ldrd	r8, r9, [sl]
 80129a2:	4602      	mov	r2, r0
 80129a4:	460b      	mov	r3, r1
 80129a6:	4640      	mov	r0, r8
 80129a8:	4649      	mov	r1, r9
 80129aa:	f7ee f8c9 	bl	8000b40 <__aeabi_dcmple>
 80129ae:	b140      	cbz	r0, 80129c2 <__ieee754_sqrt+0x15e>
 80129b0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80129b4:	e9da 0100 	ldrd	r0, r1, [sl]
 80129b8:	e9db 2300 	ldrd	r2, r3, [fp]
 80129bc:	d111      	bne.n	80129e2 <__ieee754_sqrt+0x17e>
 80129be:	3601      	adds	r6, #1
 80129c0:	463c      	mov	r4, r7
 80129c2:	1072      	asrs	r2, r6, #1
 80129c4:	0863      	lsrs	r3, r4, #1
 80129c6:	07f1      	lsls	r1, r6, #31
 80129c8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80129cc:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80129d0:	bf48      	it	mi
 80129d2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80129d6:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80129da:	4618      	mov	r0, r3
 80129dc:	e756      	b.n	801288c <__ieee754_sqrt+0x28>
 80129de:	4690      	mov	r8, r2
 80129e0:	e7be      	b.n	8012960 <__ieee754_sqrt+0xfc>
 80129e2:	f7ed fc7b 	bl	80002dc <__adddf3>
 80129e6:	e9da 8900 	ldrd	r8, r9, [sl]
 80129ea:	4602      	mov	r2, r0
 80129ec:	460b      	mov	r3, r1
 80129ee:	4640      	mov	r0, r8
 80129f0:	4649      	mov	r1, r9
 80129f2:	f7ee f89b 	bl	8000b2c <__aeabi_dcmplt>
 80129f6:	b120      	cbz	r0, 8012a02 <__ieee754_sqrt+0x19e>
 80129f8:	1ca0      	adds	r0, r4, #2
 80129fa:	bf08      	it	eq
 80129fc:	3601      	addeq	r6, #1
 80129fe:	3402      	adds	r4, #2
 8012a00:	e7df      	b.n	80129c2 <__ieee754_sqrt+0x15e>
 8012a02:	1c63      	adds	r3, r4, #1
 8012a04:	f023 0401 	bic.w	r4, r3, #1
 8012a08:	e7db      	b.n	80129c2 <__ieee754_sqrt+0x15e>
 8012a0a:	bf00      	nop
 8012a0c:	7ff00000 	.word	0x7ff00000
 8012a10:	20000278 	.word	0x20000278
 8012a14:	20000270 	.word	0x20000270

08012a18 <__ieee754_asin>:
 8012a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a1c:	ec55 4b10 	vmov	r4, r5, d0
 8012a20:	4bc7      	ldr	r3, [pc, #796]	@ (8012d40 <__ieee754_asin+0x328>)
 8012a22:	b087      	sub	sp, #28
 8012a24:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8012a28:	429e      	cmp	r6, r3
 8012a2a:	9501      	str	r5, [sp, #4]
 8012a2c:	d92d      	bls.n	8012a8a <__ieee754_asin+0x72>
 8012a2e:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8012a32:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8012a36:	4326      	orrs	r6, r4
 8012a38:	d116      	bne.n	8012a68 <__ieee754_asin+0x50>
 8012a3a:	a3a7      	add	r3, pc, #668	@ (adr r3, 8012cd8 <__ieee754_asin+0x2c0>)
 8012a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a40:	4620      	mov	r0, r4
 8012a42:	4629      	mov	r1, r5
 8012a44:	f7ed fe00 	bl	8000648 <__aeabi_dmul>
 8012a48:	a3a5      	add	r3, pc, #660	@ (adr r3, 8012ce0 <__ieee754_asin+0x2c8>)
 8012a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a4e:	4606      	mov	r6, r0
 8012a50:	460f      	mov	r7, r1
 8012a52:	4620      	mov	r0, r4
 8012a54:	4629      	mov	r1, r5
 8012a56:	f7ed fdf7 	bl	8000648 <__aeabi_dmul>
 8012a5a:	4602      	mov	r2, r0
 8012a5c:	460b      	mov	r3, r1
 8012a5e:	4630      	mov	r0, r6
 8012a60:	4639      	mov	r1, r7
 8012a62:	f7ed fc3b 	bl	80002dc <__adddf3>
 8012a66:	e009      	b.n	8012a7c <__ieee754_asin+0x64>
 8012a68:	4622      	mov	r2, r4
 8012a6a:	462b      	mov	r3, r5
 8012a6c:	4620      	mov	r0, r4
 8012a6e:	4629      	mov	r1, r5
 8012a70:	f7ed fc32 	bl	80002d8 <__aeabi_dsub>
 8012a74:	4602      	mov	r2, r0
 8012a76:	460b      	mov	r3, r1
 8012a78:	f7ed ff10 	bl	800089c <__aeabi_ddiv>
 8012a7c:	4604      	mov	r4, r0
 8012a7e:	460d      	mov	r5, r1
 8012a80:	ec45 4b10 	vmov	d0, r4, r5
 8012a84:	b007      	add	sp, #28
 8012a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a8a:	4bae      	ldr	r3, [pc, #696]	@ (8012d44 <__ieee754_asin+0x32c>)
 8012a8c:	429e      	cmp	r6, r3
 8012a8e:	d810      	bhi.n	8012ab2 <__ieee754_asin+0x9a>
 8012a90:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8012a94:	f080 80ad 	bcs.w	8012bf2 <__ieee754_asin+0x1da>
 8012a98:	a393      	add	r3, pc, #588	@ (adr r3, 8012ce8 <__ieee754_asin+0x2d0>)
 8012a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a9e:	4620      	mov	r0, r4
 8012aa0:	4629      	mov	r1, r5
 8012aa2:	f7ed fc1b 	bl	80002dc <__adddf3>
 8012aa6:	4ba8      	ldr	r3, [pc, #672]	@ (8012d48 <__ieee754_asin+0x330>)
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	f7ee f85d 	bl	8000b68 <__aeabi_dcmpgt>
 8012aae:	2800      	cmp	r0, #0
 8012ab0:	d1e6      	bne.n	8012a80 <__ieee754_asin+0x68>
 8012ab2:	ec45 4b10 	vmov	d0, r4, r5
 8012ab6:	f7ff fecd 	bl	8012854 <fabs>
 8012aba:	49a3      	ldr	r1, [pc, #652]	@ (8012d48 <__ieee754_asin+0x330>)
 8012abc:	ec53 2b10 	vmov	r2, r3, d0
 8012ac0:	2000      	movs	r0, #0
 8012ac2:	f7ed fc09 	bl	80002d8 <__aeabi_dsub>
 8012ac6:	4ba1      	ldr	r3, [pc, #644]	@ (8012d4c <__ieee754_asin+0x334>)
 8012ac8:	2200      	movs	r2, #0
 8012aca:	f7ed fdbd 	bl	8000648 <__aeabi_dmul>
 8012ace:	a388      	add	r3, pc, #544	@ (adr r3, 8012cf0 <__ieee754_asin+0x2d8>)
 8012ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad4:	4604      	mov	r4, r0
 8012ad6:	460d      	mov	r5, r1
 8012ad8:	f7ed fdb6 	bl	8000648 <__aeabi_dmul>
 8012adc:	a386      	add	r3, pc, #536	@ (adr r3, 8012cf8 <__ieee754_asin+0x2e0>)
 8012ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ae2:	f7ed fbfb 	bl	80002dc <__adddf3>
 8012ae6:	4622      	mov	r2, r4
 8012ae8:	462b      	mov	r3, r5
 8012aea:	f7ed fdad 	bl	8000648 <__aeabi_dmul>
 8012aee:	a384      	add	r3, pc, #528	@ (adr r3, 8012d00 <__ieee754_asin+0x2e8>)
 8012af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012af4:	f7ed fbf0 	bl	80002d8 <__aeabi_dsub>
 8012af8:	4622      	mov	r2, r4
 8012afa:	462b      	mov	r3, r5
 8012afc:	f7ed fda4 	bl	8000648 <__aeabi_dmul>
 8012b00:	a381      	add	r3, pc, #516	@ (adr r3, 8012d08 <__ieee754_asin+0x2f0>)
 8012b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b06:	f7ed fbe9 	bl	80002dc <__adddf3>
 8012b0a:	4622      	mov	r2, r4
 8012b0c:	462b      	mov	r3, r5
 8012b0e:	f7ed fd9b 	bl	8000648 <__aeabi_dmul>
 8012b12:	a37f      	add	r3, pc, #508	@ (adr r3, 8012d10 <__ieee754_asin+0x2f8>)
 8012b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b18:	f7ed fbde 	bl	80002d8 <__aeabi_dsub>
 8012b1c:	4622      	mov	r2, r4
 8012b1e:	462b      	mov	r3, r5
 8012b20:	f7ed fd92 	bl	8000648 <__aeabi_dmul>
 8012b24:	a37c      	add	r3, pc, #496	@ (adr r3, 8012d18 <__ieee754_asin+0x300>)
 8012b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b2a:	f7ed fbd7 	bl	80002dc <__adddf3>
 8012b2e:	4622      	mov	r2, r4
 8012b30:	462b      	mov	r3, r5
 8012b32:	f7ed fd89 	bl	8000648 <__aeabi_dmul>
 8012b36:	a37a      	add	r3, pc, #488	@ (adr r3, 8012d20 <__ieee754_asin+0x308>)
 8012b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012b40:	4620      	mov	r0, r4
 8012b42:	4629      	mov	r1, r5
 8012b44:	f7ed fd80 	bl	8000648 <__aeabi_dmul>
 8012b48:	a377      	add	r3, pc, #476	@ (adr r3, 8012d28 <__ieee754_asin+0x310>)
 8012b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b4e:	f7ed fbc3 	bl	80002d8 <__aeabi_dsub>
 8012b52:	4622      	mov	r2, r4
 8012b54:	462b      	mov	r3, r5
 8012b56:	f7ed fd77 	bl	8000648 <__aeabi_dmul>
 8012b5a:	a375      	add	r3, pc, #468	@ (adr r3, 8012d30 <__ieee754_asin+0x318>)
 8012b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b60:	f7ed fbbc 	bl	80002dc <__adddf3>
 8012b64:	4622      	mov	r2, r4
 8012b66:	462b      	mov	r3, r5
 8012b68:	f7ed fd6e 	bl	8000648 <__aeabi_dmul>
 8012b6c:	a372      	add	r3, pc, #456	@ (adr r3, 8012d38 <__ieee754_asin+0x320>)
 8012b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b72:	f7ed fbb1 	bl	80002d8 <__aeabi_dsub>
 8012b76:	4622      	mov	r2, r4
 8012b78:	462b      	mov	r3, r5
 8012b7a:	f7ed fd65 	bl	8000648 <__aeabi_dmul>
 8012b7e:	4b72      	ldr	r3, [pc, #456]	@ (8012d48 <__ieee754_asin+0x330>)
 8012b80:	2200      	movs	r2, #0
 8012b82:	f7ed fbab 	bl	80002dc <__adddf3>
 8012b86:	ec45 4b10 	vmov	d0, r4, r5
 8012b8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012b8e:	f7ff fe69 	bl	8012864 <__ieee754_sqrt>
 8012b92:	4b6f      	ldr	r3, [pc, #444]	@ (8012d50 <__ieee754_asin+0x338>)
 8012b94:	429e      	cmp	r6, r3
 8012b96:	ec5b ab10 	vmov	sl, fp, d0
 8012b9a:	f240 80db 	bls.w	8012d54 <__ieee754_asin+0x33c>
 8012b9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012ba2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012ba6:	f7ed fe79 	bl	800089c <__aeabi_ddiv>
 8012baa:	4652      	mov	r2, sl
 8012bac:	465b      	mov	r3, fp
 8012bae:	f7ed fd4b 	bl	8000648 <__aeabi_dmul>
 8012bb2:	4652      	mov	r2, sl
 8012bb4:	465b      	mov	r3, fp
 8012bb6:	f7ed fb91 	bl	80002dc <__adddf3>
 8012bba:	4602      	mov	r2, r0
 8012bbc:	460b      	mov	r3, r1
 8012bbe:	f7ed fb8d 	bl	80002dc <__adddf3>
 8012bc2:	a347      	add	r3, pc, #284	@ (adr r3, 8012ce0 <__ieee754_asin+0x2c8>)
 8012bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bc8:	f7ed fb86 	bl	80002d8 <__aeabi_dsub>
 8012bcc:	4602      	mov	r2, r0
 8012bce:	460b      	mov	r3, r1
 8012bd0:	a141      	add	r1, pc, #260	@ (adr r1, 8012cd8 <__ieee754_asin+0x2c0>)
 8012bd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012bd6:	f7ed fb7f 	bl	80002d8 <__aeabi_dsub>
 8012bda:	9b01      	ldr	r3, [sp, #4]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	bfdc      	itt	le
 8012be0:	4602      	movle	r2, r0
 8012be2:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 8012be6:	4604      	mov	r4, r0
 8012be8:	460d      	mov	r5, r1
 8012bea:	bfdc      	itt	le
 8012bec:	4614      	movle	r4, r2
 8012bee:	461d      	movle	r5, r3
 8012bf0:	e746      	b.n	8012a80 <__ieee754_asin+0x68>
 8012bf2:	4622      	mov	r2, r4
 8012bf4:	462b      	mov	r3, r5
 8012bf6:	4620      	mov	r0, r4
 8012bf8:	4629      	mov	r1, r5
 8012bfa:	f7ed fd25 	bl	8000648 <__aeabi_dmul>
 8012bfe:	a33c      	add	r3, pc, #240	@ (adr r3, 8012cf0 <__ieee754_asin+0x2d8>)
 8012c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c04:	4606      	mov	r6, r0
 8012c06:	460f      	mov	r7, r1
 8012c08:	f7ed fd1e 	bl	8000648 <__aeabi_dmul>
 8012c0c:	a33a      	add	r3, pc, #232	@ (adr r3, 8012cf8 <__ieee754_asin+0x2e0>)
 8012c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c12:	f7ed fb63 	bl	80002dc <__adddf3>
 8012c16:	4632      	mov	r2, r6
 8012c18:	463b      	mov	r3, r7
 8012c1a:	f7ed fd15 	bl	8000648 <__aeabi_dmul>
 8012c1e:	a338      	add	r3, pc, #224	@ (adr r3, 8012d00 <__ieee754_asin+0x2e8>)
 8012c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c24:	f7ed fb58 	bl	80002d8 <__aeabi_dsub>
 8012c28:	4632      	mov	r2, r6
 8012c2a:	463b      	mov	r3, r7
 8012c2c:	f7ed fd0c 	bl	8000648 <__aeabi_dmul>
 8012c30:	a335      	add	r3, pc, #212	@ (adr r3, 8012d08 <__ieee754_asin+0x2f0>)
 8012c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c36:	f7ed fb51 	bl	80002dc <__adddf3>
 8012c3a:	4632      	mov	r2, r6
 8012c3c:	463b      	mov	r3, r7
 8012c3e:	f7ed fd03 	bl	8000648 <__aeabi_dmul>
 8012c42:	a333      	add	r3, pc, #204	@ (adr r3, 8012d10 <__ieee754_asin+0x2f8>)
 8012c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c48:	f7ed fb46 	bl	80002d8 <__aeabi_dsub>
 8012c4c:	4632      	mov	r2, r6
 8012c4e:	463b      	mov	r3, r7
 8012c50:	f7ed fcfa 	bl	8000648 <__aeabi_dmul>
 8012c54:	a330      	add	r3, pc, #192	@ (adr r3, 8012d18 <__ieee754_asin+0x300>)
 8012c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c5a:	f7ed fb3f 	bl	80002dc <__adddf3>
 8012c5e:	4632      	mov	r2, r6
 8012c60:	463b      	mov	r3, r7
 8012c62:	f7ed fcf1 	bl	8000648 <__aeabi_dmul>
 8012c66:	a32e      	add	r3, pc, #184	@ (adr r3, 8012d20 <__ieee754_asin+0x308>)
 8012c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c6c:	4680      	mov	r8, r0
 8012c6e:	4689      	mov	r9, r1
 8012c70:	4630      	mov	r0, r6
 8012c72:	4639      	mov	r1, r7
 8012c74:	f7ed fce8 	bl	8000648 <__aeabi_dmul>
 8012c78:	a32b      	add	r3, pc, #172	@ (adr r3, 8012d28 <__ieee754_asin+0x310>)
 8012c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c7e:	f7ed fb2b 	bl	80002d8 <__aeabi_dsub>
 8012c82:	4632      	mov	r2, r6
 8012c84:	463b      	mov	r3, r7
 8012c86:	f7ed fcdf 	bl	8000648 <__aeabi_dmul>
 8012c8a:	a329      	add	r3, pc, #164	@ (adr r3, 8012d30 <__ieee754_asin+0x318>)
 8012c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c90:	f7ed fb24 	bl	80002dc <__adddf3>
 8012c94:	4632      	mov	r2, r6
 8012c96:	463b      	mov	r3, r7
 8012c98:	f7ed fcd6 	bl	8000648 <__aeabi_dmul>
 8012c9c:	a326      	add	r3, pc, #152	@ (adr r3, 8012d38 <__ieee754_asin+0x320>)
 8012c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ca2:	f7ed fb19 	bl	80002d8 <__aeabi_dsub>
 8012ca6:	4632      	mov	r2, r6
 8012ca8:	463b      	mov	r3, r7
 8012caa:	f7ed fccd 	bl	8000648 <__aeabi_dmul>
 8012cae:	4b26      	ldr	r3, [pc, #152]	@ (8012d48 <__ieee754_asin+0x330>)
 8012cb0:	2200      	movs	r2, #0
 8012cb2:	f7ed fb13 	bl	80002dc <__adddf3>
 8012cb6:	4602      	mov	r2, r0
 8012cb8:	460b      	mov	r3, r1
 8012cba:	4640      	mov	r0, r8
 8012cbc:	4649      	mov	r1, r9
 8012cbe:	f7ed fded 	bl	800089c <__aeabi_ddiv>
 8012cc2:	4622      	mov	r2, r4
 8012cc4:	462b      	mov	r3, r5
 8012cc6:	f7ed fcbf 	bl	8000648 <__aeabi_dmul>
 8012cca:	4602      	mov	r2, r0
 8012ccc:	460b      	mov	r3, r1
 8012cce:	4620      	mov	r0, r4
 8012cd0:	4629      	mov	r1, r5
 8012cd2:	e6c6      	b.n	8012a62 <__ieee754_asin+0x4a>
 8012cd4:	f3af 8000 	nop.w
 8012cd8:	54442d18 	.word	0x54442d18
 8012cdc:	3ff921fb 	.word	0x3ff921fb
 8012ce0:	33145c07 	.word	0x33145c07
 8012ce4:	3c91a626 	.word	0x3c91a626
 8012ce8:	8800759c 	.word	0x8800759c
 8012cec:	7e37e43c 	.word	0x7e37e43c
 8012cf0:	0dfdf709 	.word	0x0dfdf709
 8012cf4:	3f023de1 	.word	0x3f023de1
 8012cf8:	7501b288 	.word	0x7501b288
 8012cfc:	3f49efe0 	.word	0x3f49efe0
 8012d00:	b5688f3b 	.word	0xb5688f3b
 8012d04:	3fa48228 	.word	0x3fa48228
 8012d08:	0e884455 	.word	0x0e884455
 8012d0c:	3fc9c155 	.word	0x3fc9c155
 8012d10:	03eb6f7d 	.word	0x03eb6f7d
 8012d14:	3fd4d612 	.word	0x3fd4d612
 8012d18:	55555555 	.word	0x55555555
 8012d1c:	3fc55555 	.word	0x3fc55555
 8012d20:	b12e9282 	.word	0xb12e9282
 8012d24:	3fb3b8c5 	.word	0x3fb3b8c5
 8012d28:	1b8d0159 	.word	0x1b8d0159
 8012d2c:	3fe6066c 	.word	0x3fe6066c
 8012d30:	9c598ac8 	.word	0x9c598ac8
 8012d34:	40002ae5 	.word	0x40002ae5
 8012d38:	1c8a2d4b 	.word	0x1c8a2d4b
 8012d3c:	40033a27 	.word	0x40033a27
 8012d40:	3fefffff 	.word	0x3fefffff
 8012d44:	3fdfffff 	.word	0x3fdfffff
 8012d48:	3ff00000 	.word	0x3ff00000
 8012d4c:	3fe00000 	.word	0x3fe00000
 8012d50:	3fef3332 	.word	0x3fef3332
 8012d54:	4652      	mov	r2, sl
 8012d56:	465b      	mov	r3, fp
 8012d58:	4650      	mov	r0, sl
 8012d5a:	4659      	mov	r1, fp
 8012d5c:	f7ed fabe 	bl	80002dc <__adddf3>
 8012d60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012d64:	4606      	mov	r6, r0
 8012d66:	460f      	mov	r7, r1
 8012d68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d6c:	f7ed fd96 	bl	800089c <__aeabi_ddiv>
 8012d70:	4602      	mov	r2, r0
 8012d72:	460b      	mov	r3, r1
 8012d74:	4630      	mov	r0, r6
 8012d76:	4639      	mov	r1, r7
 8012d78:	f7ed fc66 	bl	8000648 <__aeabi_dmul>
 8012d7c:	f04f 0800 	mov.w	r8, #0
 8012d80:	4606      	mov	r6, r0
 8012d82:	460f      	mov	r7, r1
 8012d84:	4642      	mov	r2, r8
 8012d86:	465b      	mov	r3, fp
 8012d88:	4640      	mov	r0, r8
 8012d8a:	4659      	mov	r1, fp
 8012d8c:	f7ed fc5c 	bl	8000648 <__aeabi_dmul>
 8012d90:	4602      	mov	r2, r0
 8012d92:	460b      	mov	r3, r1
 8012d94:	4620      	mov	r0, r4
 8012d96:	4629      	mov	r1, r5
 8012d98:	f7ed fa9e 	bl	80002d8 <__aeabi_dsub>
 8012d9c:	4642      	mov	r2, r8
 8012d9e:	4604      	mov	r4, r0
 8012da0:	460d      	mov	r5, r1
 8012da2:	465b      	mov	r3, fp
 8012da4:	4650      	mov	r0, sl
 8012da6:	4659      	mov	r1, fp
 8012da8:	f7ed fa98 	bl	80002dc <__adddf3>
 8012dac:	4602      	mov	r2, r0
 8012dae:	460b      	mov	r3, r1
 8012db0:	4620      	mov	r0, r4
 8012db2:	4629      	mov	r1, r5
 8012db4:	f7ed fd72 	bl	800089c <__aeabi_ddiv>
 8012db8:	4602      	mov	r2, r0
 8012dba:	460b      	mov	r3, r1
 8012dbc:	f7ed fa8e 	bl	80002dc <__adddf3>
 8012dc0:	4602      	mov	r2, r0
 8012dc2:	460b      	mov	r3, r1
 8012dc4:	a112      	add	r1, pc, #72	@ (adr r1, 8012e10 <__ieee754_asin+0x3f8>)
 8012dc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012dca:	f7ed fa85 	bl	80002d8 <__aeabi_dsub>
 8012dce:	4602      	mov	r2, r0
 8012dd0:	460b      	mov	r3, r1
 8012dd2:	4630      	mov	r0, r6
 8012dd4:	4639      	mov	r1, r7
 8012dd6:	f7ed fa7f 	bl	80002d8 <__aeabi_dsub>
 8012dda:	4642      	mov	r2, r8
 8012ddc:	4604      	mov	r4, r0
 8012dde:	460d      	mov	r5, r1
 8012de0:	465b      	mov	r3, fp
 8012de2:	4640      	mov	r0, r8
 8012de4:	4659      	mov	r1, fp
 8012de6:	f7ed fa79 	bl	80002dc <__adddf3>
 8012dea:	4602      	mov	r2, r0
 8012dec:	460b      	mov	r3, r1
 8012dee:	a10a      	add	r1, pc, #40	@ (adr r1, 8012e18 <__ieee754_asin+0x400>)
 8012df0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012df4:	f7ed fa70 	bl	80002d8 <__aeabi_dsub>
 8012df8:	4602      	mov	r2, r0
 8012dfa:	460b      	mov	r3, r1
 8012dfc:	4620      	mov	r0, r4
 8012dfe:	4629      	mov	r1, r5
 8012e00:	f7ed fa6a 	bl	80002d8 <__aeabi_dsub>
 8012e04:	4602      	mov	r2, r0
 8012e06:	460b      	mov	r3, r1
 8012e08:	a103      	add	r1, pc, #12	@ (adr r1, 8012e18 <__ieee754_asin+0x400>)
 8012e0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e0e:	e6e2      	b.n	8012bd6 <__ieee754_asin+0x1be>
 8012e10:	33145c07 	.word	0x33145c07
 8012e14:	3c91a626 	.word	0x3c91a626
 8012e18:	54442d18 	.word	0x54442d18
 8012e1c:	3fe921fb 	.word	0x3fe921fb

08012e20 <__ieee754_atan2>:
 8012e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e24:	ec57 6b11 	vmov	r6, r7, d1
 8012e28:	4273      	negs	r3, r6
 8012e2a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8012fa8 <__ieee754_atan2+0x188>
 8012e2e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8012e32:	4333      	orrs	r3, r6
 8012e34:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8012e38:	4543      	cmp	r3, r8
 8012e3a:	ec51 0b10 	vmov	r0, r1, d0
 8012e3e:	4635      	mov	r5, r6
 8012e40:	d809      	bhi.n	8012e56 <__ieee754_atan2+0x36>
 8012e42:	4244      	negs	r4, r0
 8012e44:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012e48:	4304      	orrs	r4, r0
 8012e4a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8012e4e:	4544      	cmp	r4, r8
 8012e50:	468e      	mov	lr, r1
 8012e52:	4681      	mov	r9, r0
 8012e54:	d907      	bls.n	8012e66 <__ieee754_atan2+0x46>
 8012e56:	4632      	mov	r2, r6
 8012e58:	463b      	mov	r3, r7
 8012e5a:	f7ed fa3f 	bl	80002dc <__adddf3>
 8012e5e:	ec41 0b10 	vmov	d0, r0, r1
 8012e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e66:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8012e6a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8012e6e:	4334      	orrs	r4, r6
 8012e70:	d103      	bne.n	8012e7a <__ieee754_atan2+0x5a>
 8012e72:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e76:	f000 b9a3 	b.w	80131c0 <atan>
 8012e7a:	17bc      	asrs	r4, r7, #30
 8012e7c:	f004 0402 	and.w	r4, r4, #2
 8012e80:	ea53 0909 	orrs.w	r9, r3, r9
 8012e84:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8012e88:	d107      	bne.n	8012e9a <__ieee754_atan2+0x7a>
 8012e8a:	2c02      	cmp	r4, #2
 8012e8c:	d05f      	beq.n	8012f4e <__ieee754_atan2+0x12e>
 8012e8e:	2c03      	cmp	r4, #3
 8012e90:	d1e5      	bne.n	8012e5e <__ieee754_atan2+0x3e>
 8012e92:	a141      	add	r1, pc, #260	@ (adr r1, 8012f98 <__ieee754_atan2+0x178>)
 8012e94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e98:	e7e1      	b.n	8012e5e <__ieee754_atan2+0x3e>
 8012e9a:	4315      	orrs	r5, r2
 8012e9c:	d106      	bne.n	8012eac <__ieee754_atan2+0x8c>
 8012e9e:	f1be 0f00 	cmp.w	lr, #0
 8012ea2:	da5f      	bge.n	8012f64 <__ieee754_atan2+0x144>
 8012ea4:	a13e      	add	r1, pc, #248	@ (adr r1, 8012fa0 <__ieee754_atan2+0x180>)
 8012ea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012eaa:	e7d8      	b.n	8012e5e <__ieee754_atan2+0x3e>
 8012eac:	4542      	cmp	r2, r8
 8012eae:	d10f      	bne.n	8012ed0 <__ieee754_atan2+0xb0>
 8012eb0:	4293      	cmp	r3, r2
 8012eb2:	f104 34ff 	add.w	r4, r4, #4294967295
 8012eb6:	d107      	bne.n	8012ec8 <__ieee754_atan2+0xa8>
 8012eb8:	2c02      	cmp	r4, #2
 8012eba:	d84c      	bhi.n	8012f56 <__ieee754_atan2+0x136>
 8012ebc:	4b34      	ldr	r3, [pc, #208]	@ (8012f90 <__ieee754_atan2+0x170>)
 8012ebe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012ec2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012ec6:	e7ca      	b.n	8012e5e <__ieee754_atan2+0x3e>
 8012ec8:	2c02      	cmp	r4, #2
 8012eca:	d848      	bhi.n	8012f5e <__ieee754_atan2+0x13e>
 8012ecc:	4b31      	ldr	r3, [pc, #196]	@ (8012f94 <__ieee754_atan2+0x174>)
 8012ece:	e7f6      	b.n	8012ebe <__ieee754_atan2+0x9e>
 8012ed0:	4543      	cmp	r3, r8
 8012ed2:	d0e4      	beq.n	8012e9e <__ieee754_atan2+0x7e>
 8012ed4:	1a9b      	subs	r3, r3, r2
 8012ed6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8012eda:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012ede:	da1e      	bge.n	8012f1e <__ieee754_atan2+0xfe>
 8012ee0:	2f00      	cmp	r7, #0
 8012ee2:	da01      	bge.n	8012ee8 <__ieee754_atan2+0xc8>
 8012ee4:	323c      	adds	r2, #60	@ 0x3c
 8012ee6:	db1e      	blt.n	8012f26 <__ieee754_atan2+0x106>
 8012ee8:	4632      	mov	r2, r6
 8012eea:	463b      	mov	r3, r7
 8012eec:	f7ed fcd6 	bl	800089c <__aeabi_ddiv>
 8012ef0:	ec41 0b10 	vmov	d0, r0, r1
 8012ef4:	f7ff fcae 	bl	8012854 <fabs>
 8012ef8:	f000 f962 	bl	80131c0 <atan>
 8012efc:	ec51 0b10 	vmov	r0, r1, d0
 8012f00:	2c01      	cmp	r4, #1
 8012f02:	d013      	beq.n	8012f2c <__ieee754_atan2+0x10c>
 8012f04:	2c02      	cmp	r4, #2
 8012f06:	d015      	beq.n	8012f34 <__ieee754_atan2+0x114>
 8012f08:	2c00      	cmp	r4, #0
 8012f0a:	d0a8      	beq.n	8012e5e <__ieee754_atan2+0x3e>
 8012f0c:	a318      	add	r3, pc, #96	@ (adr r3, 8012f70 <__ieee754_atan2+0x150>)
 8012f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f12:	f7ed f9e1 	bl	80002d8 <__aeabi_dsub>
 8012f16:	a318      	add	r3, pc, #96	@ (adr r3, 8012f78 <__ieee754_atan2+0x158>)
 8012f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f1c:	e014      	b.n	8012f48 <__ieee754_atan2+0x128>
 8012f1e:	a118      	add	r1, pc, #96	@ (adr r1, 8012f80 <__ieee754_atan2+0x160>)
 8012f20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f24:	e7ec      	b.n	8012f00 <__ieee754_atan2+0xe0>
 8012f26:	2000      	movs	r0, #0
 8012f28:	2100      	movs	r1, #0
 8012f2a:	e7e9      	b.n	8012f00 <__ieee754_atan2+0xe0>
 8012f2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012f30:	4619      	mov	r1, r3
 8012f32:	e794      	b.n	8012e5e <__ieee754_atan2+0x3e>
 8012f34:	a30e      	add	r3, pc, #56	@ (adr r3, 8012f70 <__ieee754_atan2+0x150>)
 8012f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f3a:	f7ed f9cd 	bl	80002d8 <__aeabi_dsub>
 8012f3e:	4602      	mov	r2, r0
 8012f40:	460b      	mov	r3, r1
 8012f42:	a10d      	add	r1, pc, #52	@ (adr r1, 8012f78 <__ieee754_atan2+0x158>)
 8012f44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f48:	f7ed f9c6 	bl	80002d8 <__aeabi_dsub>
 8012f4c:	e787      	b.n	8012e5e <__ieee754_atan2+0x3e>
 8012f4e:	a10a      	add	r1, pc, #40	@ (adr r1, 8012f78 <__ieee754_atan2+0x158>)
 8012f50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f54:	e783      	b.n	8012e5e <__ieee754_atan2+0x3e>
 8012f56:	a10c      	add	r1, pc, #48	@ (adr r1, 8012f88 <__ieee754_atan2+0x168>)
 8012f58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f5c:	e77f      	b.n	8012e5e <__ieee754_atan2+0x3e>
 8012f5e:	2000      	movs	r0, #0
 8012f60:	2100      	movs	r1, #0
 8012f62:	e77c      	b.n	8012e5e <__ieee754_atan2+0x3e>
 8012f64:	a106      	add	r1, pc, #24	@ (adr r1, 8012f80 <__ieee754_atan2+0x160>)
 8012f66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f6a:	e778      	b.n	8012e5e <__ieee754_atan2+0x3e>
 8012f6c:	f3af 8000 	nop.w
 8012f70:	33145c07 	.word	0x33145c07
 8012f74:	3ca1a626 	.word	0x3ca1a626
 8012f78:	54442d18 	.word	0x54442d18
 8012f7c:	400921fb 	.word	0x400921fb
 8012f80:	54442d18 	.word	0x54442d18
 8012f84:	3ff921fb 	.word	0x3ff921fb
 8012f88:	54442d18 	.word	0x54442d18
 8012f8c:	3fe921fb 	.word	0x3fe921fb
 8012f90:	08013b08 	.word	0x08013b08
 8012f94:	08013af0 	.word	0x08013af0
 8012f98:	54442d18 	.word	0x54442d18
 8012f9c:	c00921fb 	.word	0xc00921fb
 8012fa0:	54442d18 	.word	0x54442d18
 8012fa4:	bff921fb 	.word	0xbff921fb
 8012fa8:	7ff00000 	.word	0x7ff00000

08012fac <__ieee754_fmod>:
 8012fac:	ec53 2b11 	vmov	r2, r3, d1
 8012fb0:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 8012fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012fb8:	ea52 040c 	orrs.w	r4, r2, ip
 8012fbc:	ec51 0b10 	vmov	r0, r1, d0
 8012fc0:	461e      	mov	r6, r3
 8012fc2:	4617      	mov	r7, r2
 8012fc4:	4696      	mov	lr, r2
 8012fc6:	d00c      	beq.n	8012fe2 <__ieee754_fmod+0x36>
 8012fc8:	4c77      	ldr	r4, [pc, #476]	@ (80131a8 <__ieee754_fmod+0x1fc>)
 8012fca:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8012fce:	45a0      	cmp	r8, r4
 8012fd0:	4689      	mov	r9, r1
 8012fd2:	d806      	bhi.n	8012fe2 <__ieee754_fmod+0x36>
 8012fd4:	4254      	negs	r4, r2
 8012fd6:	4d75      	ldr	r5, [pc, #468]	@ (80131ac <__ieee754_fmod+0x200>)
 8012fd8:	4314      	orrs	r4, r2
 8012fda:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8012fde:	42ac      	cmp	r4, r5
 8012fe0:	d909      	bls.n	8012ff6 <__ieee754_fmod+0x4a>
 8012fe2:	f7ed fb31 	bl	8000648 <__aeabi_dmul>
 8012fe6:	4602      	mov	r2, r0
 8012fe8:	460b      	mov	r3, r1
 8012fea:	f7ed fc57 	bl	800089c <__aeabi_ddiv>
 8012fee:	ec41 0b10 	vmov	d0, r0, r1
 8012ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ff6:	45e0      	cmp	r8, ip
 8012ff8:	4682      	mov	sl, r0
 8012ffa:	4604      	mov	r4, r0
 8012ffc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8013000:	dc09      	bgt.n	8013016 <__ieee754_fmod+0x6a>
 8013002:	dbf4      	blt.n	8012fee <__ieee754_fmod+0x42>
 8013004:	4282      	cmp	r2, r0
 8013006:	d8f2      	bhi.n	8012fee <__ieee754_fmod+0x42>
 8013008:	d105      	bne.n	8013016 <__ieee754_fmod+0x6a>
 801300a:	4b69      	ldr	r3, [pc, #420]	@ (80131b0 <__ieee754_fmod+0x204>)
 801300c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8013010:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013014:	e7eb      	b.n	8012fee <__ieee754_fmod+0x42>
 8013016:	4a65      	ldr	r2, [pc, #404]	@ (80131ac <__ieee754_fmod+0x200>)
 8013018:	ea19 0f02 	tst.w	r9, r2
 801301c:	d148      	bne.n	80130b0 <__ieee754_fmod+0x104>
 801301e:	f1b8 0f00 	cmp.w	r8, #0
 8013022:	d13d      	bne.n	80130a0 <__ieee754_fmod+0xf4>
 8013024:	4963      	ldr	r1, [pc, #396]	@ (80131b4 <__ieee754_fmod+0x208>)
 8013026:	4653      	mov	r3, sl
 8013028:	2b00      	cmp	r3, #0
 801302a:	dc36      	bgt.n	801309a <__ieee754_fmod+0xee>
 801302c:	4216      	tst	r6, r2
 801302e:	d14f      	bne.n	80130d0 <__ieee754_fmod+0x124>
 8013030:	f1bc 0f00 	cmp.w	ip, #0
 8013034:	d144      	bne.n	80130c0 <__ieee754_fmod+0x114>
 8013036:	4a5f      	ldr	r2, [pc, #380]	@ (80131b4 <__ieee754_fmod+0x208>)
 8013038:	463b      	mov	r3, r7
 801303a:	2b00      	cmp	r3, #0
 801303c:	dc3d      	bgt.n	80130ba <__ieee754_fmod+0x10e>
 801303e:	485e      	ldr	r0, [pc, #376]	@ (80131b8 <__ieee754_fmod+0x20c>)
 8013040:	4281      	cmp	r1, r0
 8013042:	db4a      	blt.n	80130da <__ieee754_fmod+0x12e>
 8013044:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013048:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801304c:	485a      	ldr	r0, [pc, #360]	@ (80131b8 <__ieee754_fmod+0x20c>)
 801304e:	4282      	cmp	r2, r0
 8013050:	db57      	blt.n	8013102 <__ieee754_fmod+0x156>
 8013052:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8013056:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 801305a:	1a89      	subs	r1, r1, r2
 801305c:	1b98      	subs	r0, r3, r6
 801305e:	eba4 070e 	sub.w	r7, r4, lr
 8013062:	2900      	cmp	r1, #0
 8013064:	d162      	bne.n	801312c <__ieee754_fmod+0x180>
 8013066:	4574      	cmp	r4, lr
 8013068:	bf38      	it	cc
 801306a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801306e:	2800      	cmp	r0, #0
 8013070:	bfa4      	itt	ge
 8013072:	463c      	movge	r4, r7
 8013074:	4603      	movge	r3, r0
 8013076:	ea53 0104 	orrs.w	r1, r3, r4
 801307a:	d0c6      	beq.n	801300a <__ieee754_fmod+0x5e>
 801307c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013080:	db69      	blt.n	8013156 <__ieee754_fmod+0x1aa>
 8013082:	494d      	ldr	r1, [pc, #308]	@ (80131b8 <__ieee754_fmod+0x20c>)
 8013084:	428a      	cmp	r2, r1
 8013086:	db6c      	blt.n	8013162 <__ieee754_fmod+0x1b6>
 8013088:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801308c:	432b      	orrs	r3, r5
 801308e:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8013092:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013096:	4620      	mov	r0, r4
 8013098:	e7a9      	b.n	8012fee <__ieee754_fmod+0x42>
 801309a:	3901      	subs	r1, #1
 801309c:	005b      	lsls	r3, r3, #1
 801309e:	e7c3      	b.n	8013028 <__ieee754_fmod+0x7c>
 80130a0:	4945      	ldr	r1, [pc, #276]	@ (80131b8 <__ieee754_fmod+0x20c>)
 80130a2:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	ddc0      	ble.n	801302c <__ieee754_fmod+0x80>
 80130aa:	3901      	subs	r1, #1
 80130ac:	005b      	lsls	r3, r3, #1
 80130ae:	e7fa      	b.n	80130a6 <__ieee754_fmod+0xfa>
 80130b0:	ea4f 5128 	mov.w	r1, r8, asr #20
 80130b4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80130b8:	e7b8      	b.n	801302c <__ieee754_fmod+0x80>
 80130ba:	3a01      	subs	r2, #1
 80130bc:	005b      	lsls	r3, r3, #1
 80130be:	e7bc      	b.n	801303a <__ieee754_fmod+0x8e>
 80130c0:	4a3d      	ldr	r2, [pc, #244]	@ (80131b8 <__ieee754_fmod+0x20c>)
 80130c2:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	ddb9      	ble.n	801303e <__ieee754_fmod+0x92>
 80130ca:	3a01      	subs	r2, #1
 80130cc:	005b      	lsls	r3, r3, #1
 80130ce:	e7fa      	b.n	80130c6 <__ieee754_fmod+0x11a>
 80130d0:	ea4f 522c 	mov.w	r2, ip, asr #20
 80130d4:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80130d8:	e7b1      	b.n	801303e <__ieee754_fmod+0x92>
 80130da:	1a40      	subs	r0, r0, r1
 80130dc:	281f      	cmp	r0, #31
 80130de:	dc0a      	bgt.n	80130f6 <__ieee754_fmod+0x14a>
 80130e0:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 80130e4:	fa08 f800 	lsl.w	r8, r8, r0
 80130e8:	fa2a f303 	lsr.w	r3, sl, r3
 80130ec:	ea43 0308 	orr.w	r3, r3, r8
 80130f0:	fa0a f400 	lsl.w	r4, sl, r0
 80130f4:	e7aa      	b.n	801304c <__ieee754_fmod+0xa0>
 80130f6:	4b31      	ldr	r3, [pc, #196]	@ (80131bc <__ieee754_fmod+0x210>)
 80130f8:	1a5b      	subs	r3, r3, r1
 80130fa:	fa0a f303 	lsl.w	r3, sl, r3
 80130fe:	2400      	movs	r4, #0
 8013100:	e7a4      	b.n	801304c <__ieee754_fmod+0xa0>
 8013102:	1a80      	subs	r0, r0, r2
 8013104:	281f      	cmp	r0, #31
 8013106:	dc0a      	bgt.n	801311e <__ieee754_fmod+0x172>
 8013108:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 801310c:	fa0c fc00 	lsl.w	ip, ip, r0
 8013110:	fa27 f606 	lsr.w	r6, r7, r6
 8013114:	ea46 060c 	orr.w	r6, r6, ip
 8013118:	fa07 fe00 	lsl.w	lr, r7, r0
 801311c:	e79d      	b.n	801305a <__ieee754_fmod+0xae>
 801311e:	4e27      	ldr	r6, [pc, #156]	@ (80131bc <__ieee754_fmod+0x210>)
 8013120:	1ab6      	subs	r6, r6, r2
 8013122:	fa07 f606 	lsl.w	r6, r7, r6
 8013126:	f04f 0e00 	mov.w	lr, #0
 801312a:	e796      	b.n	801305a <__ieee754_fmod+0xae>
 801312c:	4574      	cmp	r4, lr
 801312e:	bf38      	it	cc
 8013130:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8013134:	2800      	cmp	r0, #0
 8013136:	da05      	bge.n	8013144 <__ieee754_fmod+0x198>
 8013138:	0fe0      	lsrs	r0, r4, #31
 801313a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801313e:	0064      	lsls	r4, r4, #1
 8013140:	3901      	subs	r1, #1
 8013142:	e78b      	b.n	801305c <__ieee754_fmod+0xb0>
 8013144:	ea50 0307 	orrs.w	r3, r0, r7
 8013148:	f43f af5f 	beq.w	801300a <__ieee754_fmod+0x5e>
 801314c:	0ffb      	lsrs	r3, r7, #31
 801314e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8013152:	007c      	lsls	r4, r7, #1
 8013154:	e7f4      	b.n	8013140 <__ieee754_fmod+0x194>
 8013156:	0fe1      	lsrs	r1, r4, #31
 8013158:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801315c:	0064      	lsls	r4, r4, #1
 801315e:	3a01      	subs	r2, #1
 8013160:	e78c      	b.n	801307c <__ieee754_fmod+0xd0>
 8013162:	1a89      	subs	r1, r1, r2
 8013164:	2914      	cmp	r1, #20
 8013166:	dc0a      	bgt.n	801317e <__ieee754_fmod+0x1d2>
 8013168:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 801316c:	fa03 f202 	lsl.w	r2, r3, r2
 8013170:	40cc      	lsrs	r4, r1
 8013172:	4322      	orrs	r2, r4
 8013174:	410b      	asrs	r3, r1
 8013176:	ea43 0105 	orr.w	r1, r3, r5
 801317a:	4610      	mov	r0, r2
 801317c:	e737      	b.n	8012fee <__ieee754_fmod+0x42>
 801317e:	291f      	cmp	r1, #31
 8013180:	dc07      	bgt.n	8013192 <__ieee754_fmod+0x1e6>
 8013182:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8013186:	40cc      	lsrs	r4, r1
 8013188:	fa03 f202 	lsl.w	r2, r3, r2
 801318c:	4322      	orrs	r2, r4
 801318e:	462b      	mov	r3, r5
 8013190:	e7f1      	b.n	8013176 <__ieee754_fmod+0x1ca>
 8013192:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8013196:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 801319a:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 801319e:	32e2      	adds	r2, #226	@ 0xe2
 80131a0:	fa43 f202 	asr.w	r2, r3, r2
 80131a4:	e7f3      	b.n	801318e <__ieee754_fmod+0x1e2>
 80131a6:	bf00      	nop
 80131a8:	7fefffff 	.word	0x7fefffff
 80131ac:	7ff00000 	.word	0x7ff00000
 80131b0:	08013b20 	.word	0x08013b20
 80131b4:	fffffbed 	.word	0xfffffbed
 80131b8:	fffffc02 	.word	0xfffffc02
 80131bc:	fffffbe2 	.word	0xfffffbe2

080131c0 <atan>:
 80131c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131c4:	ec55 4b10 	vmov	r4, r5, d0
 80131c8:	4bbf      	ldr	r3, [pc, #764]	@ (80134c8 <atan+0x308>)
 80131ca:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80131ce:	429e      	cmp	r6, r3
 80131d0:	46ab      	mov	fp, r5
 80131d2:	d918      	bls.n	8013206 <atan+0x46>
 80131d4:	4bbd      	ldr	r3, [pc, #756]	@ (80134cc <atan+0x30c>)
 80131d6:	429e      	cmp	r6, r3
 80131d8:	d801      	bhi.n	80131de <atan+0x1e>
 80131da:	d109      	bne.n	80131f0 <atan+0x30>
 80131dc:	b144      	cbz	r4, 80131f0 <atan+0x30>
 80131de:	4622      	mov	r2, r4
 80131e0:	462b      	mov	r3, r5
 80131e2:	4620      	mov	r0, r4
 80131e4:	4629      	mov	r1, r5
 80131e6:	f7ed f879 	bl	80002dc <__adddf3>
 80131ea:	4604      	mov	r4, r0
 80131ec:	460d      	mov	r5, r1
 80131ee:	e006      	b.n	80131fe <atan+0x3e>
 80131f0:	f1bb 0f00 	cmp.w	fp, #0
 80131f4:	f340 812b 	ble.w	801344e <atan+0x28e>
 80131f8:	a597      	add	r5, pc, #604	@ (adr r5, 8013458 <atan+0x298>)
 80131fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80131fe:	ec45 4b10 	vmov	d0, r4, r5
 8013202:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013206:	4bb2      	ldr	r3, [pc, #712]	@ (80134d0 <atan+0x310>)
 8013208:	429e      	cmp	r6, r3
 801320a:	d813      	bhi.n	8013234 <atan+0x74>
 801320c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8013210:	429e      	cmp	r6, r3
 8013212:	d80c      	bhi.n	801322e <atan+0x6e>
 8013214:	a392      	add	r3, pc, #584	@ (adr r3, 8013460 <atan+0x2a0>)
 8013216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801321a:	4620      	mov	r0, r4
 801321c:	4629      	mov	r1, r5
 801321e:	f7ed f85d 	bl	80002dc <__adddf3>
 8013222:	4bac      	ldr	r3, [pc, #688]	@ (80134d4 <atan+0x314>)
 8013224:	2200      	movs	r2, #0
 8013226:	f7ed fc9f 	bl	8000b68 <__aeabi_dcmpgt>
 801322a:	2800      	cmp	r0, #0
 801322c:	d1e7      	bne.n	80131fe <atan+0x3e>
 801322e:	f04f 3aff 	mov.w	sl, #4294967295
 8013232:	e029      	b.n	8013288 <atan+0xc8>
 8013234:	f7ff fb0e 	bl	8012854 <fabs>
 8013238:	4ba7      	ldr	r3, [pc, #668]	@ (80134d8 <atan+0x318>)
 801323a:	429e      	cmp	r6, r3
 801323c:	ec55 4b10 	vmov	r4, r5, d0
 8013240:	f200 80bc 	bhi.w	80133bc <atan+0x1fc>
 8013244:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8013248:	429e      	cmp	r6, r3
 801324a:	f200 809e 	bhi.w	801338a <atan+0x1ca>
 801324e:	4622      	mov	r2, r4
 8013250:	462b      	mov	r3, r5
 8013252:	4620      	mov	r0, r4
 8013254:	4629      	mov	r1, r5
 8013256:	f7ed f841 	bl	80002dc <__adddf3>
 801325a:	4b9e      	ldr	r3, [pc, #632]	@ (80134d4 <atan+0x314>)
 801325c:	2200      	movs	r2, #0
 801325e:	f7ed f83b 	bl	80002d8 <__aeabi_dsub>
 8013262:	2200      	movs	r2, #0
 8013264:	4606      	mov	r6, r0
 8013266:	460f      	mov	r7, r1
 8013268:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801326c:	4620      	mov	r0, r4
 801326e:	4629      	mov	r1, r5
 8013270:	f7ed f834 	bl	80002dc <__adddf3>
 8013274:	4602      	mov	r2, r0
 8013276:	460b      	mov	r3, r1
 8013278:	4630      	mov	r0, r6
 801327a:	4639      	mov	r1, r7
 801327c:	f7ed fb0e 	bl	800089c <__aeabi_ddiv>
 8013280:	f04f 0a00 	mov.w	sl, #0
 8013284:	4604      	mov	r4, r0
 8013286:	460d      	mov	r5, r1
 8013288:	4622      	mov	r2, r4
 801328a:	462b      	mov	r3, r5
 801328c:	4620      	mov	r0, r4
 801328e:	4629      	mov	r1, r5
 8013290:	f7ed f9da 	bl	8000648 <__aeabi_dmul>
 8013294:	4602      	mov	r2, r0
 8013296:	460b      	mov	r3, r1
 8013298:	4680      	mov	r8, r0
 801329a:	4689      	mov	r9, r1
 801329c:	f7ed f9d4 	bl	8000648 <__aeabi_dmul>
 80132a0:	a371      	add	r3, pc, #452	@ (adr r3, 8013468 <atan+0x2a8>)
 80132a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132a6:	4606      	mov	r6, r0
 80132a8:	460f      	mov	r7, r1
 80132aa:	f7ed f9cd 	bl	8000648 <__aeabi_dmul>
 80132ae:	a370      	add	r3, pc, #448	@ (adr r3, 8013470 <atan+0x2b0>)
 80132b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132b4:	f7ed f812 	bl	80002dc <__adddf3>
 80132b8:	4632      	mov	r2, r6
 80132ba:	463b      	mov	r3, r7
 80132bc:	f7ed f9c4 	bl	8000648 <__aeabi_dmul>
 80132c0:	a36d      	add	r3, pc, #436	@ (adr r3, 8013478 <atan+0x2b8>)
 80132c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132c6:	f7ed f809 	bl	80002dc <__adddf3>
 80132ca:	4632      	mov	r2, r6
 80132cc:	463b      	mov	r3, r7
 80132ce:	f7ed f9bb 	bl	8000648 <__aeabi_dmul>
 80132d2:	a36b      	add	r3, pc, #428	@ (adr r3, 8013480 <atan+0x2c0>)
 80132d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d8:	f7ed f800 	bl	80002dc <__adddf3>
 80132dc:	4632      	mov	r2, r6
 80132de:	463b      	mov	r3, r7
 80132e0:	f7ed f9b2 	bl	8000648 <__aeabi_dmul>
 80132e4:	a368      	add	r3, pc, #416	@ (adr r3, 8013488 <atan+0x2c8>)
 80132e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ea:	f7ec fff7 	bl	80002dc <__adddf3>
 80132ee:	4632      	mov	r2, r6
 80132f0:	463b      	mov	r3, r7
 80132f2:	f7ed f9a9 	bl	8000648 <__aeabi_dmul>
 80132f6:	a366      	add	r3, pc, #408	@ (adr r3, 8013490 <atan+0x2d0>)
 80132f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132fc:	f7ec ffee 	bl	80002dc <__adddf3>
 8013300:	4642      	mov	r2, r8
 8013302:	464b      	mov	r3, r9
 8013304:	f7ed f9a0 	bl	8000648 <__aeabi_dmul>
 8013308:	a363      	add	r3, pc, #396	@ (adr r3, 8013498 <atan+0x2d8>)
 801330a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801330e:	4680      	mov	r8, r0
 8013310:	4689      	mov	r9, r1
 8013312:	4630      	mov	r0, r6
 8013314:	4639      	mov	r1, r7
 8013316:	f7ed f997 	bl	8000648 <__aeabi_dmul>
 801331a:	a361      	add	r3, pc, #388	@ (adr r3, 80134a0 <atan+0x2e0>)
 801331c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013320:	f7ec ffda 	bl	80002d8 <__aeabi_dsub>
 8013324:	4632      	mov	r2, r6
 8013326:	463b      	mov	r3, r7
 8013328:	f7ed f98e 	bl	8000648 <__aeabi_dmul>
 801332c:	a35e      	add	r3, pc, #376	@ (adr r3, 80134a8 <atan+0x2e8>)
 801332e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013332:	f7ec ffd1 	bl	80002d8 <__aeabi_dsub>
 8013336:	4632      	mov	r2, r6
 8013338:	463b      	mov	r3, r7
 801333a:	f7ed f985 	bl	8000648 <__aeabi_dmul>
 801333e:	a35c      	add	r3, pc, #368	@ (adr r3, 80134b0 <atan+0x2f0>)
 8013340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013344:	f7ec ffc8 	bl	80002d8 <__aeabi_dsub>
 8013348:	4632      	mov	r2, r6
 801334a:	463b      	mov	r3, r7
 801334c:	f7ed f97c 	bl	8000648 <__aeabi_dmul>
 8013350:	a359      	add	r3, pc, #356	@ (adr r3, 80134b8 <atan+0x2f8>)
 8013352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013356:	f7ec ffbf 	bl	80002d8 <__aeabi_dsub>
 801335a:	4632      	mov	r2, r6
 801335c:	463b      	mov	r3, r7
 801335e:	f7ed f973 	bl	8000648 <__aeabi_dmul>
 8013362:	4602      	mov	r2, r0
 8013364:	460b      	mov	r3, r1
 8013366:	4640      	mov	r0, r8
 8013368:	4649      	mov	r1, r9
 801336a:	f7ec ffb7 	bl	80002dc <__adddf3>
 801336e:	4622      	mov	r2, r4
 8013370:	462b      	mov	r3, r5
 8013372:	f7ed f969 	bl	8000648 <__aeabi_dmul>
 8013376:	f1ba 3fff 	cmp.w	sl, #4294967295
 801337a:	4602      	mov	r2, r0
 801337c:	460b      	mov	r3, r1
 801337e:	d148      	bne.n	8013412 <atan+0x252>
 8013380:	4620      	mov	r0, r4
 8013382:	4629      	mov	r1, r5
 8013384:	f7ec ffa8 	bl	80002d8 <__aeabi_dsub>
 8013388:	e72f      	b.n	80131ea <atan+0x2a>
 801338a:	4b52      	ldr	r3, [pc, #328]	@ (80134d4 <atan+0x314>)
 801338c:	2200      	movs	r2, #0
 801338e:	4620      	mov	r0, r4
 8013390:	4629      	mov	r1, r5
 8013392:	f7ec ffa1 	bl	80002d8 <__aeabi_dsub>
 8013396:	4b4f      	ldr	r3, [pc, #316]	@ (80134d4 <atan+0x314>)
 8013398:	4606      	mov	r6, r0
 801339a:	460f      	mov	r7, r1
 801339c:	2200      	movs	r2, #0
 801339e:	4620      	mov	r0, r4
 80133a0:	4629      	mov	r1, r5
 80133a2:	f7ec ff9b 	bl	80002dc <__adddf3>
 80133a6:	4602      	mov	r2, r0
 80133a8:	460b      	mov	r3, r1
 80133aa:	4630      	mov	r0, r6
 80133ac:	4639      	mov	r1, r7
 80133ae:	f7ed fa75 	bl	800089c <__aeabi_ddiv>
 80133b2:	f04f 0a01 	mov.w	sl, #1
 80133b6:	4604      	mov	r4, r0
 80133b8:	460d      	mov	r5, r1
 80133ba:	e765      	b.n	8013288 <atan+0xc8>
 80133bc:	4b47      	ldr	r3, [pc, #284]	@ (80134dc <atan+0x31c>)
 80133be:	429e      	cmp	r6, r3
 80133c0:	d21c      	bcs.n	80133fc <atan+0x23c>
 80133c2:	4b47      	ldr	r3, [pc, #284]	@ (80134e0 <atan+0x320>)
 80133c4:	2200      	movs	r2, #0
 80133c6:	4620      	mov	r0, r4
 80133c8:	4629      	mov	r1, r5
 80133ca:	f7ec ff85 	bl	80002d8 <__aeabi_dsub>
 80133ce:	4b44      	ldr	r3, [pc, #272]	@ (80134e0 <atan+0x320>)
 80133d0:	4606      	mov	r6, r0
 80133d2:	460f      	mov	r7, r1
 80133d4:	2200      	movs	r2, #0
 80133d6:	4620      	mov	r0, r4
 80133d8:	4629      	mov	r1, r5
 80133da:	f7ed f935 	bl	8000648 <__aeabi_dmul>
 80133de:	4b3d      	ldr	r3, [pc, #244]	@ (80134d4 <atan+0x314>)
 80133e0:	2200      	movs	r2, #0
 80133e2:	f7ec ff7b 	bl	80002dc <__adddf3>
 80133e6:	4602      	mov	r2, r0
 80133e8:	460b      	mov	r3, r1
 80133ea:	4630      	mov	r0, r6
 80133ec:	4639      	mov	r1, r7
 80133ee:	f7ed fa55 	bl	800089c <__aeabi_ddiv>
 80133f2:	f04f 0a02 	mov.w	sl, #2
 80133f6:	4604      	mov	r4, r0
 80133f8:	460d      	mov	r5, r1
 80133fa:	e745      	b.n	8013288 <atan+0xc8>
 80133fc:	4622      	mov	r2, r4
 80133fe:	462b      	mov	r3, r5
 8013400:	4938      	ldr	r1, [pc, #224]	@ (80134e4 <atan+0x324>)
 8013402:	2000      	movs	r0, #0
 8013404:	f7ed fa4a 	bl	800089c <__aeabi_ddiv>
 8013408:	f04f 0a03 	mov.w	sl, #3
 801340c:	4604      	mov	r4, r0
 801340e:	460d      	mov	r5, r1
 8013410:	e73a      	b.n	8013288 <atan+0xc8>
 8013412:	4b35      	ldr	r3, [pc, #212]	@ (80134e8 <atan+0x328>)
 8013414:	4e35      	ldr	r6, [pc, #212]	@ (80134ec <atan+0x32c>)
 8013416:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801341a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801341e:	f7ec ff5b 	bl	80002d8 <__aeabi_dsub>
 8013422:	4622      	mov	r2, r4
 8013424:	462b      	mov	r3, r5
 8013426:	f7ec ff57 	bl	80002d8 <__aeabi_dsub>
 801342a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801342e:	4602      	mov	r2, r0
 8013430:	460b      	mov	r3, r1
 8013432:	e9d6 0100 	ldrd	r0, r1, [r6]
 8013436:	f7ec ff4f 	bl	80002d8 <__aeabi_dsub>
 801343a:	f1bb 0f00 	cmp.w	fp, #0
 801343e:	4604      	mov	r4, r0
 8013440:	460d      	mov	r5, r1
 8013442:	f6bf aedc 	bge.w	80131fe <atan+0x3e>
 8013446:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801344a:	461d      	mov	r5, r3
 801344c:	e6d7      	b.n	80131fe <atan+0x3e>
 801344e:	a51c      	add	r5, pc, #112	@ (adr r5, 80134c0 <atan+0x300>)
 8013450:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013454:	e6d3      	b.n	80131fe <atan+0x3e>
 8013456:	bf00      	nop
 8013458:	54442d18 	.word	0x54442d18
 801345c:	3ff921fb 	.word	0x3ff921fb
 8013460:	8800759c 	.word	0x8800759c
 8013464:	7e37e43c 	.word	0x7e37e43c
 8013468:	e322da11 	.word	0xe322da11
 801346c:	3f90ad3a 	.word	0x3f90ad3a
 8013470:	24760deb 	.word	0x24760deb
 8013474:	3fa97b4b 	.word	0x3fa97b4b
 8013478:	a0d03d51 	.word	0xa0d03d51
 801347c:	3fb10d66 	.word	0x3fb10d66
 8013480:	c54c206e 	.word	0xc54c206e
 8013484:	3fb745cd 	.word	0x3fb745cd
 8013488:	920083ff 	.word	0x920083ff
 801348c:	3fc24924 	.word	0x3fc24924
 8013490:	5555550d 	.word	0x5555550d
 8013494:	3fd55555 	.word	0x3fd55555
 8013498:	2c6a6c2f 	.word	0x2c6a6c2f
 801349c:	bfa2b444 	.word	0xbfa2b444
 80134a0:	52defd9a 	.word	0x52defd9a
 80134a4:	3fadde2d 	.word	0x3fadde2d
 80134a8:	af749a6d 	.word	0xaf749a6d
 80134ac:	3fb3b0f2 	.word	0x3fb3b0f2
 80134b0:	fe231671 	.word	0xfe231671
 80134b4:	3fbc71c6 	.word	0x3fbc71c6
 80134b8:	9998ebc4 	.word	0x9998ebc4
 80134bc:	3fc99999 	.word	0x3fc99999
 80134c0:	54442d18 	.word	0x54442d18
 80134c4:	bff921fb 	.word	0xbff921fb
 80134c8:	440fffff 	.word	0x440fffff
 80134cc:	7ff00000 	.word	0x7ff00000
 80134d0:	3fdbffff 	.word	0x3fdbffff
 80134d4:	3ff00000 	.word	0x3ff00000
 80134d8:	3ff2ffff 	.word	0x3ff2ffff
 80134dc:	40038000 	.word	0x40038000
 80134e0:	3ff80000 	.word	0x3ff80000
 80134e4:	bff00000 	.word	0xbff00000
 80134e8:	08013b30 	.word	0x08013b30
 80134ec:	08013b50 	.word	0x08013b50

080134f0 <_init>:
 80134f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134f2:	bf00      	nop
 80134f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80134f6:	bc08      	pop	{r3}
 80134f8:	469e      	mov	lr, r3
 80134fa:	4770      	bx	lr

080134fc <_fini>:
 80134fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134fe:	bf00      	nop
 8013500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013502:	bc08      	pop	{r3}
 8013504:	469e      	mov	lr, r3
 8013506:	4770      	bx	lr
