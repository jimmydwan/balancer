
motorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011510  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  080116f0  080116f0  000126f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011d00  08011d00  00013258  2**0
                  CONTENTS
  4 .ARM          00000008  08011d00  08011d00  00012d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011d08  08011d08  00013258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011d08  08011d08  00012d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011d0c  08011d0c  00012d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000258  20000000  08011d10  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000080c  20000258  08011f68  00013258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a64  08011f68  00013a64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013258  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023f95  00000000  00000000  00013288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005624  00000000  00000000  0003721d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c60  00000000  00000000  0003c848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015b6  00000000  00000000  0003e4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c86  00000000  00000000  0003fa5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028a20  00000000  00000000  000666e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e42ee  00000000  00000000  0008f104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001733f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a40  00000000  00000000  00173438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0017be78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000258 	.word	0x20000258
 80001fc:	00000000 	.word	0x00000000
 8000200:	080116d8 	.word	0x080116d8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000025c 	.word	0x2000025c
 800021c:	080116d8 	.word	0x080116d8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09a      	sub	sp, #104	@ 0x68
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800104a:	2220      	movs	r2, #32
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00d fabe 	bl	800e5d0 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	223c      	movs	r2, #60	@ 0x3c
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f00d fab8 	bl	800e5d0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001060:	4b4d      	ldr	r3, [pc, #308]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001062:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001068:	4b4b      	ldr	r3, [pc, #300]	@ (8001198 <MX_ADC1_Init+0x164>)
 800106a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800106e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001070:	4b49      	ldr	r3, [pc, #292]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b48      	ldr	r3, [pc, #288]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800107c:	4b46      	ldr	r3, [pc, #280]	@ (8001198 <MX_ADC1_Init+0x164>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001082:	4b45      	ldr	r3, [pc, #276]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001084:	2201      	movs	r2, #1
 8001086:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001088:	4b43      	ldr	r3, [pc, #268]	@ (8001198 <MX_ADC1_Init+0x164>)
 800108a:	2204      	movs	r2, #4
 800108c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800108e:	4b42      	ldr	r3, [pc, #264]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001090:	2200      	movs	r2, #0
 8001092:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001094:	4b40      	ldr	r3, [pc, #256]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001096:	2200      	movs	r2, #0
 8001098:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800109a:	4b3f      	ldr	r3, [pc, #252]	@ (8001198 <MX_ADC1_Init+0x164>)
 800109c:	2201      	movs	r2, #1
 800109e:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b4:	4b38      	ldr	r3, [pc, #224]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010bc:	4b36      	ldr	r3, [pc, #216]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010be:	2200      	movs	r2, #0
 80010c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c2:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ca:	4833      	ldr	r0, [pc, #204]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010cc:	f001 fc3a 	bl	8002944 <HAL_ADC_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010d6:	f000 fb78 	bl	80017ca <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010da:	2300      	movs	r3, #0
 80010dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010e2:	4619      	mov	r1, r3
 80010e4:	482c      	ldr	r0, [pc, #176]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010e6:	f003 fd63 	bl	8004bb0 <HAL_ADCEx_MultiModeConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80010f0:	f000 fb6b 	bl	80017ca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010f4:	4b29      	ldr	r3, [pc, #164]	@ (800119c <MX_ADC1_Init+0x168>)
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f8:	2306      	movs	r3, #6
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010fc:	2300      	movs	r3, #0
 80010fe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001100:	237f      	movs	r3, #127	@ 0x7f
 8001102:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001104:	2304      	movs	r3, #4
 8001106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.Offset = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001110:	4619      	mov	r1, r3
 8001112:	4821      	ldr	r0, [pc, #132]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001114:	f001 ffd2 	bl	80030bc <HAL_ADC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800111e:	f000 fb54 	bl	80017ca <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8001122:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <MX_ADC1_Init+0x16c>)
 8001124:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001126:	2309      	movs	r3, #9
 8001128:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800112a:	2301      	movs	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800112e:	237f      	movs	r3, #127	@ 0x7f
 8001130:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001132:	2304      	movs	r3, #4
 8001134:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800113a:	2302      	movs	r3, #2
 800113c:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T8_CC4;
 8001150:	239c      	movs	r3, #156	@ 0x9c
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001164:	f003 f844 	bl	80041f0 <HAL_ADCEx_InjectedConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 800116e:	f000 fb2c 	bl	80017ca <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8001172:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <MX_ADC1_Init+0x168>)
 8001174:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001176:	f240 130f 	movw	r3, #271	@ 0x10f
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001182:	f003 f835 	bl	80041f0 <HAL_ADCEx_InjectedConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 800118c:	f000 fb1d 	bl	80017ca <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3768      	adds	r7, #104	@ 0x68
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000274 	.word	0x20000274
 800119c:	2e300800 	.word	0x2e300800
 80011a0:	14f00020 	.word	0x14f00020

080011a4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b090      	sub	sp, #64	@ 0x40
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	223c      	movs	r2, #60	@ 0x3c
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f00d fa0d 	bl	800e5d0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011b6:	4b38      	ldr	r3, [pc, #224]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011b8:	4a38      	ldr	r2, [pc, #224]	@ (800129c <MX_ADC2_Init+0xf8>)
 80011ba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80011bc:	4b36      	ldr	r3, [pc, #216]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011be:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011c2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011c4:	4b34      	ldr	r3, [pc, #208]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ca:	4b33      	ldr	r3, [pc, #204]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80011d0:	4b31      	ldr	r3, [pc, #196]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011d6:	4b30      	ldr	r3, [pc, #192]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011d8:	2201      	movs	r2, #1
 80011da:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011de:	2204      	movs	r2, #4
 80011e0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80011e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80011ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011f4:	4b28      	ldr	r3, [pc, #160]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011fc:	4b26      	ldr	r3, [pc, #152]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001204:	4b24      	ldr	r3, [pc, #144]	@ (8001298 <MX_ADC2_Init+0xf4>)
 8001206:	2200      	movs	r2, #0
 8001208:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800120a:	4b23      	ldr	r3, [pc, #140]	@ (8001298 <MX_ADC2_Init+0xf4>)
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001212:	4821      	ldr	r0, [pc, #132]	@ (8001298 <MX_ADC2_Init+0xf4>)
 8001214:	f001 fb96 	bl	8002944 <HAL_ADC_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800121e:	f000 fad4 	bl	80017ca <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 8001222:	4b1f      	ldr	r3, [pc, #124]	@ (80012a0 <MX_ADC2_Init+0xfc>)
 8001224:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001226:	2309      	movs	r3, #9
 8001228:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800122a:	2301      	movs	r3, #1
 800122c:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800122e:	237f      	movs	r3, #127	@ 0x7f
 8001230:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001232:	2304      	movs	r3, #4
 8001234:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800123a:	2302      	movs	r3, #2
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T8_CC4;
 8001250:	239c      	movs	r3, #156	@ 0x9c
 8001252:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001254:	2380      	movs	r3, #128	@ 0x80
 8001256:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	4619      	mov	r1, r3
 8001262:	480d      	ldr	r0, [pc, #52]	@ (8001298 <MX_ADC2_Init+0xf4>)
 8001264:	f002 ffc4 	bl	80041f0 <HAL_ADCEx_InjectedConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 800126e:	f000 faac 	bl	80017ca <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8001272:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <MX_ADC2_Init+0x100>)
 8001274:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001276:	f240 130f 	movw	r3, #271	@ 0x10f
 800127a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	4619      	mov	r1, r3
 8001280:	4805      	ldr	r0, [pc, #20]	@ (8001298 <MX_ADC2_Init+0xf4>)
 8001282:	f002 ffb5 	bl	80041f0 <HAL_ADCEx_InjectedConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_ADC2_Init+0xec>
  {
    Error_Handler();
 800128c:	f000 fa9d 	bl	80017ca <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	3740      	adds	r7, #64	@ 0x40
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200002e0 	.word	0x200002e0
 800129c:	50000100 	.word	0x50000100
 80012a0:	3ef08000 	.word	0x3ef08000
 80012a4:	32601000 	.word	0x32601000

080012a8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b09e      	sub	sp, #120	@ 0x78
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c0:	f107 0320 	add.w	r3, r7, #32
 80012c4:	2244      	movs	r2, #68	@ 0x44
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f00d f981 	bl	800e5d0 <memset>
  if(adcHandle->Instance==ADC1)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012d6:	d15f      	bne.n	8001398 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012dc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012de:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80012e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e4:	f107 0320 	add.w	r3, r7, #32
 80012e8:	4618      	mov	r0, r3
 80012ea:	f005 fa9d 	bl	8006828 <HAL_RCCEx_PeriphCLKConfig>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80012f4:	f000 fa69 	bl	80017ca <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012f8:	4b4f      	ldr	r3, [pc, #316]	@ (8001438 <HAL_ADC_MspInit+0x190>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	4a4e      	ldr	r2, [pc, #312]	@ (8001438 <HAL_ADC_MspInit+0x190>)
 8001300:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001302:	4b4d      	ldr	r3, [pc, #308]	@ (8001438 <HAL_ADC_MspInit+0x190>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d10b      	bne.n	8001322 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800130a:	4b4c      	ldr	r3, [pc, #304]	@ (800143c <HAL_ADC_MspInit+0x194>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130e:	4a4b      	ldr	r2, [pc, #300]	@ (800143c <HAL_ADC_MspInit+0x194>)
 8001310:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001314:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001316:	4b49      	ldr	r3, [pc, #292]	@ (800143c <HAL_ADC_MspInit+0x194>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800131e:	61fb      	str	r3, [r7, #28]
 8001320:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	4b46      	ldr	r3, [pc, #280]	@ (800143c <HAL_ADC_MspInit+0x194>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001326:	4a45      	ldr	r2, [pc, #276]	@ (800143c <HAL_ADC_MspInit+0x194>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800132e:	4b43      	ldr	r3, [pc, #268]	@ (800143c <HAL_ADC_MspInit+0x194>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	61bb      	str	r3, [r7, #24]
 8001338:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	4b40      	ldr	r3, [pc, #256]	@ (800143c <HAL_ADC_MspInit+0x194>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	4a3f      	ldr	r2, [pc, #252]	@ (800143c <HAL_ADC_MspInit+0x194>)
 8001340:	f043 0302 	orr.w	r3, r3, #2
 8001344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001346:	4b3d      	ldr	r3, [pc, #244]	@ (800143c <HAL_ADC_MspInit+0x194>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001352:	2302      	movs	r3, #2
 8001354:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001356:	2303      	movs	r3, #3
 8001358:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001362:	4619      	mov	r1, r3
 8001364:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001368:	f004 fae2 	bl	8005930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800136c:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001370:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001372:	2303      	movs	r3, #3
 8001374:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800137e:	4619      	mov	r1, r3
 8001380:	482f      	ldr	r0, [pc, #188]	@ (8001440 <HAL_ADC_MspInit+0x198>)
 8001382:	f004 fad5 	bl	8005930 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	2012      	movs	r0, #18
 800138c:	f003 fd8f 	bl	8004eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001390:	2012      	movs	r0, #18
 8001392:	f003 fda6 	bl	8004ee2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001396:	e04a      	b.n	800142e <HAL_ADC_MspInit+0x186>
  else if(adcHandle->Instance==ADC2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a29      	ldr	r2, [pc, #164]	@ (8001444 <HAL_ADC_MspInit+0x19c>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d145      	bne.n	800142e <HAL_ADC_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013a6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013a8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80013ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ae:	f107 0320 	add.w	r3, r7, #32
 80013b2:	4618      	mov	r0, r3
 80013b4:	f005 fa38 	bl	8006828 <HAL_RCCEx_PeriphCLKConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 80013be:	f000 fa04 	bl	80017ca <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001438 <HAL_ADC_MspInit+0x190>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001438 <HAL_ADC_MspInit+0x190>)
 80013ca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <HAL_ADC_MspInit+0x190>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d10b      	bne.n	80013ec <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013d4:	4b19      	ldr	r3, [pc, #100]	@ (800143c <HAL_ADC_MspInit+0x194>)
 80013d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d8:	4a18      	ldr	r2, [pc, #96]	@ (800143c <HAL_ADC_MspInit+0x194>)
 80013da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e0:	4b16      	ldr	r3, [pc, #88]	@ (800143c <HAL_ADC_MspInit+0x194>)
 80013e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ec:	4b13      	ldr	r3, [pc, #76]	@ (800143c <HAL_ADC_MspInit+0x194>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f0:	4a12      	ldr	r2, [pc, #72]	@ (800143c <HAL_ADC_MspInit+0x194>)
 80013f2:	f043 0302 	orr.w	r3, r3, #2
 80013f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f8:	4b10      	ldr	r3, [pc, #64]	@ (800143c <HAL_ADC_MspInit+0x194>)
 80013fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001404:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001408:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140a:	2303      	movs	r3, #3
 800140c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001412:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001416:	4619      	mov	r1, r3
 8001418:	4809      	ldr	r0, [pc, #36]	@ (8001440 <HAL_ADC_MspInit+0x198>)
 800141a:	f004 fa89 	bl	8005930 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	2012      	movs	r0, #18
 8001424:	f003 fd43 	bl	8004eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001428:	2012      	movs	r0, #18
 800142a:	f003 fd5a 	bl	8004ee2 <HAL_NVIC_EnableIRQ>
}
 800142e:	bf00      	nop
 8001430:	3778      	adds	r7, #120	@ 0x78
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	2000034c 	.word	0x2000034c
 800143c:	40021000 	.word	0x40021000
 8001440:	48000400 	.word	0x48000400
 8001444:	50000100 	.word	0x50000100

08001448 <MX_DAC3_Init>:

DAC_HandleTypeDef hdac3;

/* DAC3 init function */
void MX_DAC3_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08c      	sub	sp, #48	@ 0x30
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800144e:	463b      	mov	r3, r7
 8001450:	2230      	movs	r2, #48	@ 0x30
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f00d f8bb 	bl	800e5d0 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 800145a:	4b16      	ldr	r3, [pc, #88]	@ (80014b4 <MX_DAC3_Init+0x6c>)
 800145c:	4a16      	ldr	r2, [pc, #88]	@ (80014b8 <MX_DAC3_Init+0x70>)
 800145e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001460:	4814      	ldr	r0, [pc, #80]	@ (80014b4 <MX_DAC3_Init+0x6c>)
 8001462:	f003 fd58 	bl	8004f16 <HAL_DAC_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 800146c:	f000 f9ad 	bl	80017ca <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001470:	2302      	movs	r3, #2
 8001472:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001484:	2300      	movs	r3, #0
 8001486:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001488:	2302      	movs	r3, #2
 800148a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 800148c:	2302      	movs	r3, #2
 800148e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001494:	463b      	mov	r3, r7
 8001496:	2200      	movs	r2, #0
 8001498:	4619      	mov	r1, r3
 800149a:	4806      	ldr	r0, [pc, #24]	@ (80014b4 <MX_DAC3_Init+0x6c>)
 800149c:	f003 fd5e 	bl	8004f5c <HAL_DAC_ConfigChannel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 80014a6:	f000 f990 	bl	80017ca <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	3730      	adds	r7, #48	@ 0x30
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000350 	.word	0x20000350
 80014b8:	50001000 	.word	0x50001000

080014bc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC3)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0a      	ldr	r2, [pc, #40]	@ (80014f4 <HAL_DAC_MspInit+0x38>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d10b      	bne.n	80014e6 <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* DAC3 clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 80014ce:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <HAL_DAC_MspInit+0x3c>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d2:	4a09      	ldr	r2, [pc, #36]	@ (80014f8 <HAL_DAC_MspInit+0x3c>)
 80014d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014da:	4b07      	ldr	r3, [pc, #28]	@ (80014f8 <HAL_DAC_MspInit+0x3c>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }
}
 80014e6:	bf00      	nop
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	50001000 	.word	0x50001000
 80014f8:	40021000 	.word	0x40021000

080014fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001502:	4b16      	ldr	r3, [pc, #88]	@ (800155c <MX_DMA_Init+0x60>)
 8001504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <MX_DMA_Init+0x60>)
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	6493      	str	r3, [r2, #72]	@ 0x48
 800150e:	4b13      	ldr	r3, [pc, #76]	@ (800155c <MX_DMA_Init+0x60>)
 8001510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <MX_DMA_Init+0x60>)
 800151c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800151e:	4a0f      	ldr	r2, [pc, #60]	@ (800155c <MX_DMA_Init+0x60>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6493      	str	r3, [r2, #72]	@ 0x48
 8001526:	4b0d      	ldr	r3, [pc, #52]	@ (800155c <MX_DMA_Init+0x60>)
 8001528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2101      	movs	r1, #1
 8001536:	200b      	movs	r0, #11
 8001538:	f003 fcb9 	bl	8004eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800153c:	200b      	movs	r0, #11
 800153e:	f003 fcd0 	bl	8004ee2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 1, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2101      	movs	r1, #1
 8001546:	200c      	movs	r0, #12
 8001548:	f003 fcb1 	bl	8004eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800154c:	200c      	movs	r0, #12
 800154e:	f003 fcc8 	bl	8004ee2 <HAL_NVIC_EnableIRQ>

}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40021000 	.word	0x40021000

08001560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	@ 0x28
 8001564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001576:	4b3f      	ldr	r3, [pc, #252]	@ (8001674 <MX_GPIO_Init+0x114>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157a:	4a3e      	ldr	r2, [pc, #248]	@ (8001674 <MX_GPIO_Init+0x114>)
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001582:	4b3c      	ldr	r3, [pc, #240]	@ (8001674 <MX_GPIO_Init+0x114>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800158e:	4b39      	ldr	r3, [pc, #228]	@ (8001674 <MX_GPIO_Init+0x114>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001592:	4a38      	ldr	r2, [pc, #224]	@ (8001674 <MX_GPIO_Init+0x114>)
 8001594:	f043 0320 	orr.w	r3, r3, #32
 8001598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800159a:	4b36      	ldr	r3, [pc, #216]	@ (8001674 <MX_GPIO_Init+0x114>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	f003 0320 	and.w	r3, r3, #32
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	4b33      	ldr	r3, [pc, #204]	@ (8001674 <MX_GPIO_Init+0x114>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015aa:	4a32      	ldr	r2, [pc, #200]	@ (8001674 <MX_GPIO_Init+0x114>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015b2:	4b30      	ldr	r3, [pc, #192]	@ (8001674 <MX_GPIO_Init+0x114>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	4b2d      	ldr	r3, [pc, #180]	@ (8001674 <MX_GPIO_Init+0x114>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c2:	4a2c      	ldr	r2, [pc, #176]	@ (8001674 <MX_GPIO_Init+0x114>)
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001674 <MX_GPIO_Init+0x114>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|TEST_Pin, GPIO_PIN_SET);
 80015d6:	2201      	movs	r2, #1
 80015d8:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 80015dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e0:	f004 fb28 	bl	8005c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80015e4:	2201      	movs	r2, #1
 80015e6:	2101      	movs	r1, #1
 80015e8:	4823      	ldr	r0, [pc, #140]	@ (8001678 <MX_GPIO_Init+0x118>)
 80015ea:	f004 fb23 	bl	8005c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS1_GPIO_Port, NSS1_Pin, GPIO_PIN_RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2108      	movs	r1, #8
 80015f2:	4821      	ldr	r0, [pc, #132]	@ (8001678 <MX_GPIO_Init+0x118>)
 80015f4:	f004 fb1e 	bl	8005c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	481b      	ldr	r0, [pc, #108]	@ (800167c <MX_GPIO_Init+0x11c>)
 800160e:	f004 f98f 	bl	8005930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001612:	2310      	movs	r3, #16
 8001614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001616:	2301      	movs	r3, #1
 8001618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800162c:	f004 f980 	bl	8005930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|NSS1_Pin;
 8001630:	2309      	movs	r3, #9
 8001632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001634:	2301      	movs	r3, #1
 8001636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	480c      	ldr	r0, [pc, #48]	@ (8001678 <MX_GPIO_Init+0x118>)
 8001648:	f004 f972 	bl	8005930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_Pin;
 800164c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001652:	2301      	movs	r3, #1
 8001654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800165a:	2302      	movs	r3, #2
 800165c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001668:	f004 f962 	bl	8005930 <HAL_GPIO_Init>

}
 800166c:	bf00      	nop
 800166e:	3728      	adds	r7, #40	@ 0x28
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40021000 	.word	0x40021000
 8001678:	48000400 	.word	0x48000400
 800167c:	48000800 	.word	0x48000800

08001680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001684:	f000 fe9b 	bl	80023be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001688:	f000 f856 	bl	8001738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800168c:	f7ff ff68 	bl	8001560 <MX_GPIO_Init>
  MX_DMA_Init();
 8001690:	f7ff ff34 	bl	80014fc <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001694:	f000 fd60 	bl	8002158 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001698:	f7ff fccc 	bl	8001034 <MX_ADC1_Init>
  MX_ADC2_Init();
 800169c:	f7ff fd82 	bl	80011a4 <MX_ADC2_Init>
  MX_TIM1_Init();
 80016a0:	f000 fb02 	bl	8001ca8 <MX_TIM1_Init>
  MX_DAC3_Init();
 80016a4:	f7ff fed0 	bl	8001448 <MX_DAC3_Init>
  MX_SPI1_Init();
 80016a8:	f000 f896 	bl	80017d8 <MX_SPI1_Init>
  MX_TIM8_Init();
 80016ac:	f000 fbd8 	bl	8001e60 <MX_TIM8_Init>
  MX_SPI3_Init();
 80016b0:	f000 f8d0 	bl	8001854 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  appInit();
 80016b4:	f00a fa40 	bl	800bb38 <appInit>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 80016b8:	2264      	movs	r2, #100	@ 0x64
 80016ba:	491a      	ldr	r1, [pc, #104]	@ (8001724 <main+0xa4>)
 80016bc:	481a      	ldr	r0, [pc, #104]	@ (8001728 <main+0xa8>)
 80016be:	f008 fe06 	bl	800a2ce <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80016c2:	217f      	movs	r1, #127	@ 0x7f
 80016c4:	4819      	ldr	r0, [pc, #100]	@ (800172c <main+0xac>)
 80016c6:	f002 fb73 	bl	8003db0 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80016ca:	217f      	movs	r1, #127	@ 0x7f
 80016cc:	4818      	ldr	r0, [pc, #96]	@ (8001730 <main+0xb0>)
 80016ce:	f002 fb6f 	bl	8003db0 <HAL_ADCEx_Calibration_Start>
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_JEOC);
 80016d2:	4b16      	ldr	r3, [pc, #88]	@ (800172c <main+0xac>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2220      	movs	r2, #32
 80016d8:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOC);
 80016da:	4b14      	ldr	r3, [pc, #80]	@ (800172c <main+0xac>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2204      	movs	r2, #4
 80016e0:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_JEOC);
 80016e2:	4b13      	ldr	r3, [pc, #76]	@ (8001730 <main+0xb0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2220      	movs	r2, #32
 80016e8:	601a      	str	r2, [r3, #0]
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 80016ea:	4810      	ldr	r0, [pc, #64]	@ (800172c <main+0xac>)
 80016ec:	f002 fc72 	bl	8003fd4 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart(&hadc2);
 80016f0:	480f      	ldr	r0, [pc, #60]	@ (8001730 <main+0xb0>)
 80016f2:	f002 fbbf 	bl	8003e74 <HAL_ADCEx_InjectedStart>
  HAL_TIM_Base_Start(&htim8);
 80016f6:	480f      	ldr	r0, [pc, #60]	@ (8001734 <main+0xb4>)
 80016f8:	f005 ff1e 	bl	8007538 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80016fc:	210c      	movs	r1, #12
 80016fe:	480d      	ldr	r0, [pc, #52]	@ (8001734 <main+0xb4>)
 8001700:	f005 ffde 	bl	80076c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001704:	2100      	movs	r1, #0
 8001706:	480b      	ldr	r0, [pc, #44]	@ (8001734 <main+0xb4>)
 8001708:	f005 ffda 	bl	80076c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800170c:	2104      	movs	r1, #4
 800170e:	4809      	ldr	r0, [pc, #36]	@ (8001734 <main+0xb4>)
 8001710:	f005 ffd6 	bl	80076c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001714:	2108      	movs	r1, #8
 8001716:	4807      	ldr	r0, [pc, #28]	@ (8001734 <main+0xb4>)
 8001718:	f005 ffd2 	bl	80076c0 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    userMain();
 800171c:	f00b f870 	bl	800c800 <userMain>
 8001720:	e7fc      	b.n	800171c <main+0x9c>
 8001722:	bf00      	nop
 8001724:	200007d0 	.word	0x200007d0
 8001728:	200004c8 	.word	0x200004c8
 800172c:	20000274 	.word	0x20000274
 8001730:	200002e0 	.word	0x200002e0
 8001734:	2000047c 	.word	0x2000047c

08001738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b094      	sub	sp, #80	@ 0x50
 800173c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800173e:	f107 0318 	add.w	r3, r7, #24
 8001742:	2238      	movs	r2, #56	@ 0x38
 8001744:	2100      	movs	r1, #0
 8001746:	4618      	mov	r0, r3
 8001748:	f00c ff42 	bl	800e5d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
 8001758:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800175a:	2000      	movs	r0, #0
 800175c:	f004 fa82 	bl	8005c64 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001760:	2301      	movs	r3, #1
 8001762:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001764:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001768:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800176a:	2302      	movs	r3, #2
 800176c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800176e:	2303      	movs	r3, #3
 8001770:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8001772:	2303      	movs	r3, #3
 8001774:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001776:	2328      	movs	r3, #40	@ 0x28
 8001778:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800177a:	2302      	movs	r3, #2
 800177c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800177e:	2302      	movs	r3, #2
 8001780:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001782:	2302      	movs	r3, #2
 8001784:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001786:	f107 0318 	add.w	r3, r7, #24
 800178a:	4618      	mov	r0, r3
 800178c:	f004 fb1e 	bl	8005dcc <HAL_RCC_OscConfig>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001796:	f000 f818 	bl	80017ca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800179a:	230f      	movs	r3, #15
 800179c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800179e:	2303      	movs	r3, #3
 80017a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	2104      	movs	r1, #4
 80017b2:	4618      	mov	r0, r3
 80017b4:	f004 fe1c 	bl	80063f0 <HAL_RCC_ClockConfig>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80017be:	f000 f804 	bl	80017ca <Error_Handler>
  }
}
 80017c2:	bf00      	nop
 80017c4:	3750      	adds	r7, #80	@ 0x50
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ce:	b672      	cpsid	i
}
 80017d0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d2:	bf00      	nop
 80017d4:	e7fd      	b.n	80017d2 <Error_Handler+0x8>
	...

080017d8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80017dc:	4b1b      	ldr	r3, [pc, #108]	@ (800184c <MX_SPI1_Init+0x74>)
 80017de:	4a1c      	ldr	r2, [pc, #112]	@ (8001850 <MX_SPI1_Init+0x78>)
 80017e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017e2:	4b1a      	ldr	r3, [pc, #104]	@ (800184c <MX_SPI1_Init+0x74>)
 80017e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017ea:	4b18      	ldr	r3, [pc, #96]	@ (800184c <MX_SPI1_Init+0x74>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017f0:	4b16      	ldr	r3, [pc, #88]	@ (800184c <MX_SPI1_Init+0x74>)
 80017f2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80017f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80017f8:	4b14      	ldr	r3, [pc, #80]	@ (800184c <MX_SPI1_Init+0x74>)
 80017fa:	2202      	movs	r2, #2
 80017fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80017fe:	4b13      	ldr	r3, [pc, #76]	@ (800184c <MX_SPI1_Init+0x74>)
 8001800:	2201      	movs	r2, #1
 8001802:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001804:	4b11      	ldr	r3, [pc, #68]	@ (800184c <MX_SPI1_Init+0x74>)
 8001806:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800180a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800180c:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <MX_SPI1_Init+0x74>)
 800180e:	2238      	movs	r2, #56	@ 0x38
 8001810:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001812:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <MX_SPI1_Init+0x74>)
 8001814:	2200      	movs	r2, #0
 8001816:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001818:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <MX_SPI1_Init+0x74>)
 800181a:	2200      	movs	r2, #0
 800181c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800181e:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <MX_SPI1_Init+0x74>)
 8001820:	2200      	movs	r2, #0
 8001822:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001824:	4b09      	ldr	r3, [pc, #36]	@ (800184c <MX_SPI1_Init+0x74>)
 8001826:	2207      	movs	r2, #7
 8001828:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800182a:	4b08      	ldr	r3, [pc, #32]	@ (800184c <MX_SPI1_Init+0x74>)
 800182c:	2200      	movs	r2, #0
 800182e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001830:	4b06      	ldr	r3, [pc, #24]	@ (800184c <MX_SPI1_Init+0x74>)
 8001832:	2200      	movs	r2, #0
 8001834:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001836:	4805      	ldr	r0, [pc, #20]	@ (800184c <MX_SPI1_Init+0x74>)
 8001838:	f005 f9e6 	bl	8006c08 <HAL_SPI_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001842:	f7ff ffc2 	bl	80017ca <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000364 	.word	0x20000364
 8001850:	40013000 	.word	0x40013000

08001854 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001858:	4b1b      	ldr	r3, [pc, #108]	@ (80018c8 <MX_SPI3_Init+0x74>)
 800185a:	4a1c      	ldr	r2, [pc, #112]	@ (80018cc <MX_SPI3_Init+0x78>)
 800185c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800185e:	4b1a      	ldr	r3, [pc, #104]	@ (80018c8 <MX_SPI3_Init+0x74>)
 8001860:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001864:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001866:	4b18      	ldr	r3, [pc, #96]	@ (80018c8 <MX_SPI3_Init+0x74>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 800186c:	4b16      	ldr	r3, [pc, #88]	@ (80018c8 <MX_SPI3_Init+0x74>)
 800186e:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8001872:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001874:	4b14      	ldr	r3, [pc, #80]	@ (80018c8 <MX_SPI3_Init+0x74>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800187a:	4b13      	ldr	r3, [pc, #76]	@ (80018c8 <MX_SPI3_Init+0x74>)
 800187c:	2201      	movs	r2, #1
 800187e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001880:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <MX_SPI3_Init+0x74>)
 8001882:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001886:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001888:	4b0f      	ldr	r3, [pc, #60]	@ (80018c8 <MX_SPI3_Init+0x74>)
 800188a:	2210      	movs	r2, #16
 800188c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800188e:	4b0e      	ldr	r3, [pc, #56]	@ (80018c8 <MX_SPI3_Init+0x74>)
 8001890:	2200      	movs	r2, #0
 8001892:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001894:	4b0c      	ldr	r3, [pc, #48]	@ (80018c8 <MX_SPI3_Init+0x74>)
 8001896:	2200      	movs	r2, #0
 8001898:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800189a:	4b0b      	ldr	r3, [pc, #44]	@ (80018c8 <MX_SPI3_Init+0x74>)
 800189c:	2200      	movs	r2, #0
 800189e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80018a0:	4b09      	ldr	r3, [pc, #36]	@ (80018c8 <MX_SPI3_Init+0x74>)
 80018a2:	2207      	movs	r2, #7
 80018a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018a6:	4b08      	ldr	r3, [pc, #32]	@ (80018c8 <MX_SPI3_Init+0x74>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80018ac:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <MX_SPI3_Init+0x74>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80018b2:	4805      	ldr	r0, [pc, #20]	@ (80018c8 <MX_SPI3_Init+0x74>)
 80018b4:	f005 f9a8 	bl	8006c08 <HAL_SPI_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80018be:	f7ff ff84 	bl	80017ca <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200003c8 	.word	0x200003c8
 80018cc:	40003c00 	.word	0x40003c00

080018d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08c      	sub	sp, #48	@ 0x30
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a3d      	ldr	r2, [pc, #244]	@ (80019e4 <HAL_SPI_MspInit+0x114>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d129      	bne.n	8001946 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018f2:	4b3d      	ldr	r3, [pc, #244]	@ (80019e8 <HAL_SPI_MspInit+0x118>)
 80018f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018f6:	4a3c      	ldr	r2, [pc, #240]	@ (80019e8 <HAL_SPI_MspInit+0x118>)
 80018f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80018fe:	4b3a      	ldr	r3, [pc, #232]	@ (80019e8 <HAL_SPI_MspInit+0x118>)
 8001900:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001902:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001906:	61bb      	str	r3, [r7, #24]
 8001908:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	4b37      	ldr	r3, [pc, #220]	@ (80019e8 <HAL_SPI_MspInit+0x118>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190e:	4a36      	ldr	r2, [pc, #216]	@ (80019e8 <HAL_SPI_MspInit+0x118>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001916:	4b34      	ldr	r3, [pc, #208]	@ (80019e8 <HAL_SPI_MspInit+0x118>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001922:	23e0      	movs	r3, #224	@ 0xe0
 8001924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001926:	2302      	movs	r3, #2
 8001928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192e:	2300      	movs	r3, #0
 8001930:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001932:	2305      	movs	r3, #5
 8001934:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001936:	f107 031c 	add.w	r3, r7, #28
 800193a:	4619      	mov	r1, r3
 800193c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001940:	f003 fff6 	bl	8005930 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001944:	e049      	b.n	80019da <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a28      	ldr	r2, [pc, #160]	@ (80019ec <HAL_SPI_MspInit+0x11c>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d144      	bne.n	80019da <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001950:	4b25      	ldr	r3, [pc, #148]	@ (80019e8 <HAL_SPI_MspInit+0x118>)
 8001952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001954:	4a24      	ldr	r2, [pc, #144]	@ (80019e8 <HAL_SPI_MspInit+0x118>)
 8001956:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800195a:	6593      	str	r3, [r2, #88]	@ 0x58
 800195c:	4b22      	ldr	r3, [pc, #136]	@ (80019e8 <HAL_SPI_MspInit+0x118>)
 800195e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001960:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001968:	4b1f      	ldr	r3, [pc, #124]	@ (80019e8 <HAL_SPI_MspInit+0x118>)
 800196a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196c:	4a1e      	ldr	r2, [pc, #120]	@ (80019e8 <HAL_SPI_MspInit+0x118>)
 800196e:	f043 0304 	orr.w	r3, r3, #4
 8001972:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001974:	4b1c      	ldr	r3, [pc, #112]	@ (80019e8 <HAL_SPI_MspInit+0x118>)
 8001976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001980:	4b19      	ldr	r3, [pc, #100]	@ (80019e8 <HAL_SPI_MspInit+0x118>)
 8001982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001984:	4a18      	ldr	r2, [pc, #96]	@ (80019e8 <HAL_SPI_MspInit+0x118>)
 8001986:	f043 0302 	orr.w	r3, r3, #2
 800198a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800198c:	4b16      	ldr	r3, [pc, #88]	@ (80019e8 <HAL_SPI_MspInit+0x118>)
 800198e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001998:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800199c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019aa:	2306      	movs	r3, #6
 80019ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	4619      	mov	r1, r3
 80019b4:	480e      	ldr	r0, [pc, #56]	@ (80019f0 <HAL_SPI_MspInit+0x120>)
 80019b6:	f003 ffbb 	bl	8005930 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019ba:	2320      	movs	r3, #32
 80019bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	2302      	movs	r3, #2
 80019c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c6:	2300      	movs	r3, #0
 80019c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019ca:	2306      	movs	r3, #6
 80019cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	4619      	mov	r1, r3
 80019d4:	4807      	ldr	r0, [pc, #28]	@ (80019f4 <HAL_SPI_MspInit+0x124>)
 80019d6:	f003 ffab 	bl	8005930 <HAL_GPIO_Init>
}
 80019da:	bf00      	nop
 80019dc:	3730      	adds	r7, #48	@ 0x30
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40013000 	.word	0x40013000
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40003c00 	.word	0x40003c00
 80019f0:	48000800 	.word	0x48000800
 80019f4:	48000400 	.word	0x48000400

080019f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fe:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <HAL_MspInit+0x44>)
 8001a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a02:	4a0e      	ldr	r2, [pc, #56]	@ (8001a3c <HAL_MspInit+0x44>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <HAL_MspInit+0x44>)
 8001a0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <HAL_MspInit+0x44>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1a:	4a08      	ldr	r2, [pc, #32]	@ (8001a3c <HAL_MspInit+0x44>)
 8001a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a20:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a22:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <HAL_MspInit+0x44>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a2e:	f004 f9bd 	bl	8005dac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000

08001a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <NMI_Handler+0x4>

08001a48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <HardFault_Handler+0x4>

08001a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <MemManage_Handler+0x4>

08001a58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <BusFault_Handler+0x4>

08001a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <UsageFault_Handler+0x4>

08001a68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a96:	f000 fce5 	bl	8002464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001aa4:	4802      	ldr	r0, [pc, #8]	@ (8001ab0 <DMA1_Channel1_IRQHandler+0x10>)
 8001aa6:	f003 fdf4 	bl	8005692 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	2000055c 	.word	0x2000055c

08001ab4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ab8:	4802      	ldr	r0, [pc, #8]	@ (8001ac4 <DMA1_Channel2_IRQHandler+0x10>)
 8001aba:	f003 fdea 	bl	8005692 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200005bc 	.word	0x200005bc

08001ac8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001acc:	4803      	ldr	r0, [pc, #12]	@ (8001adc <ADC1_2_IRQHandler+0x14>)
 8001ace:	f001 f8bd 	bl	8002c4c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001ad2:	4803      	ldr	r0, [pc, #12]	@ (8001ae0 <ADC1_2_IRQHandler+0x18>)
 8001ad4:	f001 f8ba 	bl	8002c4c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000274 	.word	0x20000274
 8001ae0:	200002e0 	.word	0x200002e0

08001ae4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ae8:	4802      	ldr	r0, [pc, #8]	@ (8001af4 <USART3_IRQHandler+0x10>)
 8001aea:	f007 f84d 	bl	8008b88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200004c8 	.word	0x200004c8

08001af8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return 1;
 8001afc:	2301      	movs	r3, #1
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <_kill>:

int _kill(int pid, int sig)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b12:	f00c fdc1 	bl	800e698 <__errno>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2216      	movs	r2, #22
 8001b1a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <_exit>:

void _exit (int status)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b30:	f04f 31ff 	mov.w	r1, #4294967295
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ffe7 	bl	8001b08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b3a:	bf00      	nop
 8001b3c:	e7fd      	b.n	8001b3a <_exit+0x12>

08001b3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	e00a      	b.n	8001b66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b50:	f3af 8000 	nop.w
 8001b54:	4601      	mov	r1, r0
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	60ba      	str	r2, [r7, #8]
 8001b5c:	b2ca      	uxtb	r2, r1
 8001b5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	3301      	adds	r3, #1
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	dbf0      	blt.n	8001b50 <_read+0x12>
  }

  return len;
 8001b6e:	687b      	ldr	r3, [r7, #4]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	e009      	b.n	8001b9e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	1c5a      	adds	r2, r3, #1
 8001b8e:	60ba      	str	r2, [r7, #8]
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	dbf1      	blt.n	8001b8a <_write+0x12>
  }
  return len;
 8001ba6:	687b      	ldr	r3, [r7, #4]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <_close>:

int _close(int file)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bd8:	605a      	str	r2, [r3, #4]
  return 0;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <_isatty>:

int _isatty(int file)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bf0:	2301      	movs	r3, #1
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b085      	sub	sp, #20
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c20:	4a14      	ldr	r2, [pc, #80]	@ (8001c74 <_sbrk+0x5c>)
 8001c22:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <_sbrk+0x60>)
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c2c:	4b13      	ldr	r3, [pc, #76]	@ (8001c7c <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d102      	bne.n	8001c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c34:	4b11      	ldr	r3, [pc, #68]	@ (8001c7c <_sbrk+0x64>)
 8001c36:	4a12      	ldr	r2, [pc, #72]	@ (8001c80 <_sbrk+0x68>)
 8001c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3a:	4b10      	ldr	r3, [pc, #64]	@ (8001c7c <_sbrk+0x64>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d207      	bcs.n	8001c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c48:	f00c fd26 	bl	800e698 <__errno>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	220c      	movs	r2, #12
 8001c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295
 8001c56:	e009      	b.n	8001c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c58:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <_sbrk+0x64>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5e:	4b07      	ldr	r3, [pc, #28]	@ (8001c7c <_sbrk+0x64>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	4a05      	ldr	r2, [pc, #20]	@ (8001c7c <_sbrk+0x64>)
 8001c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20008000 	.word	0x20008000
 8001c78:	00000400 	.word	0x00000400
 8001c7c:	2000042c 	.word	0x2000042c
 8001c80:	20000a68 	.word	0x20000a68

08001c84 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c88:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <SystemInit+0x20>)
 8001c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ca4 <SystemInit+0x20>)
 8001c90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b09c      	sub	sp, #112	@ 0x70
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cae:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cbc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cc8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
 8001cd8:	615a      	str	r2, [r3, #20]
 8001cda:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	2234      	movs	r2, #52	@ 0x34
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f00c fc74 	bl	800e5d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ce8:	4b5b      	ldr	r3, [pc, #364]	@ (8001e58 <MX_TIM1_Init+0x1b0>)
 8001cea:	4a5c      	ldr	r2, [pc, #368]	@ (8001e5c <MX_TIM1_Init+0x1b4>)
 8001cec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8001cee:	4b5a      	ldr	r3, [pc, #360]	@ (8001e58 <MX_TIM1_Init+0x1b0>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001cf4:	4b58      	ldr	r3, [pc, #352]	@ (8001e58 <MX_TIM1_Init+0x1b0>)
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 8001cfa:	4b57      	ldr	r3, [pc, #348]	@ (8001e58 <MX_TIM1_Init+0x1b0>)
 8001cfc:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001d00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001d02:	4b55      	ldr	r3, [pc, #340]	@ (8001e58 <MX_TIM1_Init+0x1b0>)
 8001d04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001d0a:	4b53      	ldr	r3, [pc, #332]	@ (8001e58 <MX_TIM1_Init+0x1b0>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d10:	4b51      	ldr	r3, [pc, #324]	@ (8001e58 <MX_TIM1_Init+0x1b0>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d16:	4850      	ldr	r0, [pc, #320]	@ (8001e58 <MX_TIM1_Init+0x1b0>)
 8001d18:	f005 fbb6 	bl	8007488 <HAL_TIM_Base_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001d22:	f7ff fd52 	bl	80017ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d2a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d2c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d30:	4619      	mov	r1, r3
 8001d32:	4849      	ldr	r0, [pc, #292]	@ (8001e58 <MX_TIM1_Init+0x1b0>)
 8001d34:	f005 ff6e 	bl	8007c14 <HAL_TIM_ConfigClockSource>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001d3e:	f7ff fd44 	bl	80017ca <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d42:	4845      	ldr	r0, [pc, #276]	@ (8001e58 <MX_TIM1_Init+0x1b0>)
 8001d44:	f005 fc5a 	bl	80075fc <HAL_TIM_PWM_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001d4e:	f7ff fd3c 	bl	80017ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001d52:	2370      	movs	r3, #112	@ 0x70
 8001d54:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d56:	2300      	movs	r3, #0
 8001d58:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d5e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d62:	4619      	mov	r1, r3
 8001d64:	483c      	ldr	r0, [pc, #240]	@ (8001e58 <MX_TIM1_Init+0x1b0>)
 8001d66:	f006 fca3 	bl	80086b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001d70:	f7ff fd2b 	bl	80017ca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d74:	2360      	movs	r3, #96	@ 0x60
 8001d76:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d80:	2300      	movs	r3, #0
 8001d82:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d90:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d94:	2200      	movs	r2, #0
 8001d96:	4619      	mov	r1, r3
 8001d98:	482f      	ldr	r0, [pc, #188]	@ (8001e58 <MX_TIM1_Init+0x1b0>)
 8001d9a:	f005 fe27 	bl	80079ec <HAL_TIM_PWM_ConfigChannel>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001da4:	f7ff fd11 	bl	80017ca <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001da8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001dac:	2204      	movs	r2, #4
 8001dae:	4619      	mov	r1, r3
 8001db0:	4829      	ldr	r0, [pc, #164]	@ (8001e58 <MX_TIM1_Init+0x1b0>)
 8001db2:	f005 fe1b 	bl	80079ec <HAL_TIM_PWM_ConfigChannel>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001dbc:	f7ff fd05 	bl	80017ca <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dc0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001dc4:	2208      	movs	r2, #8
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4823      	ldr	r0, [pc, #140]	@ (8001e58 <MX_TIM1_Init+0x1b0>)
 8001dca:	f005 fe0f 	bl	80079ec <HAL_TIM_PWM_ConfigChannel>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001dd4:	f7ff fcf9 	bl	80017ca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001dd8:	2370      	movs	r3, #112	@ 0x70
 8001dda:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 7998;
 8001ddc:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 8001de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001de2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001de6:	220c      	movs	r2, #12
 8001de8:	4619      	mov	r1, r3
 8001dea:	481b      	ldr	r0, [pc, #108]	@ (8001e58 <MX_TIM1_Init+0x1b0>)
 8001dec:	f005 fdfe 	bl	80079ec <HAL_TIM_PWM_ConfigChannel>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8001df6:	f7ff fce8 	bl	80017ca <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001e0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 2;
 8001e16:	2302      	movs	r3, #2
 8001e18:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e26:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	4619      	mov	r1, r3
 8001e38:	4807      	ldr	r0, [pc, #28]	@ (8001e58 <MX_TIM1_Init+0x1b0>)
 8001e3a:	f006 fcbb 	bl	80087b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM1_Init+0x1a0>
  {
    Error_Handler();
 8001e44:	f7ff fcc1 	bl	80017ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e48:	4803      	ldr	r0, [pc, #12]	@ (8001e58 <MX_TIM1_Init+0x1b0>)
 8001e4a:	f000 f917 	bl	800207c <HAL_TIM_MspPostInit>

}
 8001e4e:	bf00      	nop
 8001e50:	3770      	adds	r7, #112	@ 0x70
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000430 	.word	0x20000430
 8001e5c:	40012c00 	.word	0x40012c00

08001e60 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b09c      	sub	sp, #112	@ 0x70
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e66:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e74:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e80:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
 8001e90:	615a      	str	r2, [r3, #20]
 8001e92:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	2234      	movs	r2, #52	@ 0x34
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f00c fb98 	bl	800e5d0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001ea0:	4b5a      	ldr	r3, [pc, #360]	@ (800200c <MX_TIM8_Init+0x1ac>)
 8001ea2:	4a5b      	ldr	r2, [pc, #364]	@ (8002010 <MX_TIM8_Init+0x1b0>)
 8001ea4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ea6:	4b59      	ldr	r3, [pc, #356]	@ (800200c <MX_TIM8_Init+0x1ac>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001eac:	4b57      	ldr	r3, [pc, #348]	@ (800200c <MX_TIM8_Init+0x1ac>)
 8001eae:	2220      	movs	r2, #32
 8001eb0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7999;
 8001eb2:	4b56      	ldr	r3, [pc, #344]	@ (800200c <MX_TIM8_Init+0x1ac>)
 8001eb4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001eb8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001eba:	4b54      	ldr	r3, [pc, #336]	@ (800200c <MX_TIM8_Init+0x1ac>)
 8001ebc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ec0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 1;
 8001ec2:	4b52      	ldr	r3, [pc, #328]	@ (800200c <MX_TIM8_Init+0x1ac>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec8:	4b50      	ldr	r3, [pc, #320]	@ (800200c <MX_TIM8_Init+0x1ac>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001ece:	484f      	ldr	r0, [pc, #316]	@ (800200c <MX_TIM8_Init+0x1ac>)
 8001ed0:	f005 fada 	bl	8007488 <HAL_TIM_Base_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8001eda:	f7ff fc76 	bl	80017ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ede:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ee2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ee4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4848      	ldr	r0, [pc, #288]	@ (800200c <MX_TIM8_Init+0x1ac>)
 8001eec:	f005 fe92 	bl	8007c14 <HAL_TIM_ConfigClockSource>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001ef6:	f7ff fc68 	bl	80017ca <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001efa:	4844      	ldr	r0, [pc, #272]	@ (800200c <MX_TIM8_Init+0x1ac>)
 8001efc:	f005 fb7e 	bl	80075fc <HAL_TIM_PWM_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001f06:	f7ff fc60 	bl	80017ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001f0a:	2370      	movs	r3, #112	@ 0x70
 8001f0c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f16:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	483b      	ldr	r0, [pc, #236]	@ (800200c <MX_TIM8_Init+0x1ac>)
 8001f1e:	f006 fbc7 	bl	80086b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8001f28:	f7ff fc4f 	bl	80017ca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f2c:	2360      	movs	r3, #96	@ 0x60
 8001f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f34:	2300      	movs	r3, #0
 8001f36:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f40:	2300      	movs	r3, #0
 8001f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f44:	2300      	movs	r3, #0
 8001f46:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f48:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	4619      	mov	r1, r3
 8001f50:	482e      	ldr	r0, [pc, #184]	@ (800200c <MX_TIM8_Init+0x1ac>)
 8001f52:	f005 fd4b 	bl	80079ec <HAL_TIM_PWM_ConfigChannel>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001f5c:	f7ff fc35 	bl	80017ca <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f60:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f64:	2204      	movs	r2, #4
 8001f66:	4619      	mov	r1, r3
 8001f68:	4828      	ldr	r0, [pc, #160]	@ (800200c <MX_TIM8_Init+0x1ac>)
 8001f6a:	f005 fd3f 	bl	80079ec <HAL_TIM_PWM_ConfigChannel>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8001f74:	f7ff fc29 	bl	80017ca <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f78:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f7c:	2208      	movs	r2, #8
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4822      	ldr	r0, [pc, #136]	@ (800200c <MX_TIM8_Init+0x1ac>)
 8001f82:	f005 fd33 	bl	80079ec <HAL_TIM_PWM_ConfigChannel>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001f8c:	f7ff fc1d 	bl	80017ca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001f90:	2370      	movs	r3, #112	@ 0x70
 8001f92:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 7998;
 8001f94:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 8001f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f9a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	481a      	ldr	r0, [pc, #104]	@ (800200c <MX_TIM8_Init+0x1ac>)
 8001fa4:	f005 fd22 	bl	80079ec <HAL_TIM_PWM_ConfigChannel>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_TIM8_Init+0x152>
  {
    Error_Handler();
 8001fae:	f7ff fc0c 	bl	80017ca <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001fd8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	4619      	mov	r1, r3
 8001fee:	4807      	ldr	r0, [pc, #28]	@ (800200c <MX_TIM8_Init+0x1ac>)
 8001ff0:	f006 fbe0 	bl	80087b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM8_Init+0x19e>
  {
    Error_Handler();
 8001ffa:	f7ff fbe6 	bl	80017ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001ffe:	4803      	ldr	r0, [pc, #12]	@ (800200c <MX_TIM8_Init+0x1ac>)
 8002000:	f000 f83c 	bl	800207c <HAL_TIM_MspPostInit>

}
 8002004:	bf00      	nop
 8002006:	3770      	adds	r7, #112	@ 0x70
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	2000047c 	.word	0x2000047c
 8002010:	40013400 	.word	0x40013400

08002014 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a13      	ldr	r2, [pc, #76]	@ (8002070 <HAL_TIM_Base_MspInit+0x5c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d10c      	bne.n	8002040 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002026:	4b13      	ldr	r3, [pc, #76]	@ (8002074 <HAL_TIM_Base_MspInit+0x60>)
 8002028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800202a:	4a12      	ldr	r2, [pc, #72]	@ (8002074 <HAL_TIM_Base_MspInit+0x60>)
 800202c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002030:	6613      	str	r3, [r2, #96]	@ 0x60
 8002032:	4b10      	ldr	r3, [pc, #64]	@ (8002074 <HAL_TIM_Base_MspInit+0x60>)
 8002034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002036:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800203e:	e010      	b.n	8002062 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM8)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0c      	ldr	r2, [pc, #48]	@ (8002078 <HAL_TIM_Base_MspInit+0x64>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d10b      	bne.n	8002062 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800204a:	4b0a      	ldr	r3, [pc, #40]	@ (8002074 <HAL_TIM_Base_MspInit+0x60>)
 800204c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800204e:	4a09      	ldr	r2, [pc, #36]	@ (8002074 <HAL_TIM_Base_MspInit+0x60>)
 8002050:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002054:	6613      	str	r3, [r2, #96]	@ 0x60
 8002056:	4b07      	ldr	r3, [pc, #28]	@ (8002074 <HAL_TIM_Base_MspInit+0x60>)
 8002058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800205a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]
}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40012c00 	.word	0x40012c00
 8002074:	40021000 	.word	0x40021000
 8002078:	40013400 	.word	0x40013400

0800207c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	@ 0x28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a2b      	ldr	r2, [pc, #172]	@ (8002148 <HAL_TIM_MspPostInit+0xcc>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d11e      	bne.n	80020dc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209e:	4b2b      	ldr	r3, [pc, #172]	@ (800214c <HAL_TIM_MspPostInit+0xd0>)
 80020a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a2:	4a2a      	ldr	r2, [pc, #168]	@ (800214c <HAL_TIM_MspPostInit+0xd0>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020aa:	4b28      	ldr	r3, [pc, #160]	@ (800214c <HAL_TIM_MspPostInit+0xd0>)
 80020ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80020b6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80020ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2300      	movs	r3, #0
 80020c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80020c8:	2306      	movs	r3, #6
 80020ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	4619      	mov	r1, r3
 80020d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020d6:	f003 fc2b 	bl	8005930 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80020da:	e031      	b.n	8002140 <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM8)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002150 <HAL_TIM_MspPostInit+0xd4>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d12c      	bne.n	8002140 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e6:	4b19      	ldr	r3, [pc, #100]	@ (800214c <HAL_TIM_MspPostInit+0xd0>)
 80020e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ea:	4a18      	ldr	r2, [pc, #96]	@ (800214c <HAL_TIM_MspPostInit+0xd0>)
 80020ec:	f043 0302 	orr.w	r3, r3, #2
 80020f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020f2:	4b16      	ldr	r3, [pc, #88]	@ (800214c <HAL_TIM_MspPostInit+0xd0>)
 80020f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020fe:	2340      	movs	r3, #64	@ 0x40
 8002100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 800210e:	2305      	movs	r3, #5
 8002110:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002112:	f107 0314 	add.w	r3, r7, #20
 8002116:	4619      	mov	r1, r3
 8002118:	480e      	ldr	r0, [pc, #56]	@ (8002154 <HAL_TIM_MspPostInit+0xd8>)
 800211a:	f003 fc09 	bl	8005930 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800211e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2300      	movs	r3, #0
 800212e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8002130:	230a      	movs	r3, #10
 8002132:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	4619      	mov	r1, r3
 800213a:	4806      	ldr	r0, [pc, #24]	@ (8002154 <HAL_TIM_MspPostInit+0xd8>)
 800213c:	f003 fbf8 	bl	8005930 <HAL_GPIO_Init>
}
 8002140:	bf00      	nop
 8002142:	3728      	adds	r7, #40	@ 0x28
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40012c00 	.word	0x40012c00
 800214c:	40021000 	.word	0x40021000
 8002150:	40013400 	.word	0x40013400
 8002154:	48000400 	.word	0x48000400

08002158 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800215c:	4b22      	ldr	r3, [pc, #136]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 800215e:	4a23      	ldr	r2, [pc, #140]	@ (80021ec <MX_USART3_UART_Init+0x94>)
 8002160:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8002162:	4b21      	ldr	r3, [pc, #132]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 8002164:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002168:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800216a:	4b1f      	ldr	r3, [pc, #124]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 800216c:	2200      	movs	r2, #0
 800216e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002170:	4b1d      	ldr	r3, [pc, #116]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 8002172:	2200      	movs	r2, #0
 8002174:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002176:	4b1c      	ldr	r3, [pc, #112]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 8002178:	2200      	movs	r2, #0
 800217a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800217c:	4b1a      	ldr	r3, [pc, #104]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 800217e:	220c      	movs	r2, #12
 8002180:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002182:	4b19      	ldr	r3, [pc, #100]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002188:	4b17      	ldr	r3, [pc, #92]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 800218a:	2200      	movs	r2, #0
 800218c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800218e:	4b16      	ldr	r3, [pc, #88]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 8002190:	2200      	movs	r2, #0
 8002192:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002194:	4b14      	ldr	r3, [pc, #80]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 8002196:	2200      	movs	r2, #0
 8002198:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800219a:	4b13      	ldr	r3, [pc, #76]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 800219c:	2200      	movs	r2, #0
 800219e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021a0:	4811      	ldr	r0, [pc, #68]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 80021a2:	f006 fb93 	bl	80088cc <HAL_UART_Init>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80021ac:	f7ff fb0d 	bl	80017ca <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021b0:	2100      	movs	r1, #0
 80021b2:	480d      	ldr	r0, [pc, #52]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 80021b4:	f008 f80f 	bl	800a1d6 <HAL_UARTEx_SetTxFifoThreshold>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80021be:	f7ff fb04 	bl	80017ca <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021c2:	2100      	movs	r1, #0
 80021c4:	4808      	ldr	r0, [pc, #32]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 80021c6:	f008 f844 	bl	800a252 <HAL_UARTEx_SetRxFifoThreshold>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80021d0:	f7ff fafb 	bl	80017ca <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80021d4:	4804      	ldr	r0, [pc, #16]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 80021d6:	f007 ffc5 	bl	800a164 <HAL_UARTEx_DisableFifoMode>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80021e0:	f7ff faf3 	bl	80017ca <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	200004c8 	.word	0x200004c8
 80021ec:	40004800 	.word	0x40004800

080021f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b09a      	sub	sp, #104	@ 0x68
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002208:	f107 0310 	add.w	r3, r7, #16
 800220c:	2244      	movs	r2, #68	@ 0x44
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f00c f9dd 	bl	800e5d0 <memset>
  if(uartHandle->Instance==USART3)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a4d      	ldr	r2, [pc, #308]	@ (8002350 <HAL_UART_MspInit+0x160>)
 800221c:	4293      	cmp	r3, r2
 800221e:	f040 8092 	bne.w	8002346 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002222:	2304      	movs	r3, #4
 8002224:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800222a:	f107 0310 	add.w	r3, r7, #16
 800222e:	4618      	mov	r0, r3
 8002230:	f004 fafa 	bl	8006828 <HAL_RCCEx_PeriphCLKConfig>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800223a:	f7ff fac6 	bl	80017ca <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800223e:	4b45      	ldr	r3, [pc, #276]	@ (8002354 <HAL_UART_MspInit+0x164>)
 8002240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002242:	4a44      	ldr	r2, [pc, #272]	@ (8002354 <HAL_UART_MspInit+0x164>)
 8002244:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002248:	6593      	str	r3, [r2, #88]	@ 0x58
 800224a:	4b42      	ldr	r3, [pc, #264]	@ (8002354 <HAL_UART_MspInit+0x164>)
 800224c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002256:	4b3f      	ldr	r3, [pc, #252]	@ (8002354 <HAL_UART_MspInit+0x164>)
 8002258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225a:	4a3e      	ldr	r2, [pc, #248]	@ (8002354 <HAL_UART_MspInit+0x164>)
 800225c:	f043 0302 	orr.w	r3, r3, #2
 8002260:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002262:	4b3c      	ldr	r3, [pc, #240]	@ (8002354 <HAL_UART_MspInit+0x164>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800226e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002272:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002274:	2302      	movs	r3, #2
 8002276:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227c:	2300      	movs	r3, #0
 800227e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002280:	2307      	movs	r3, #7
 8002282:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002284:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002288:	4619      	mov	r1, r3
 800228a:	4833      	ldr	r0, [pc, #204]	@ (8002358 <HAL_UART_MspInit+0x168>)
 800228c:	f003 fb50 	bl	8005930 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel1;
 8002290:	4b32      	ldr	r3, [pc, #200]	@ (800235c <HAL_UART_MspInit+0x16c>)
 8002292:	4a33      	ldr	r2, [pc, #204]	@ (8002360 <HAL_UART_MspInit+0x170>)
 8002294:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002296:	4b31      	ldr	r3, [pc, #196]	@ (800235c <HAL_UART_MspInit+0x16c>)
 8002298:	221d      	movs	r2, #29
 800229a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800229c:	4b2f      	ldr	r3, [pc, #188]	@ (800235c <HAL_UART_MspInit+0x16c>)
 800229e:	2210      	movs	r2, #16
 80022a0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022a2:	4b2e      	ldr	r3, [pc, #184]	@ (800235c <HAL_UART_MspInit+0x16c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022a8:	4b2c      	ldr	r3, [pc, #176]	@ (800235c <HAL_UART_MspInit+0x16c>)
 80022aa:	2280      	movs	r2, #128	@ 0x80
 80022ac:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022ae:	4b2b      	ldr	r3, [pc, #172]	@ (800235c <HAL_UART_MspInit+0x16c>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022b4:	4b29      	ldr	r3, [pc, #164]	@ (800235c <HAL_UART_MspInit+0x16c>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80022ba:	4b28      	ldr	r3, [pc, #160]	@ (800235c <HAL_UART_MspInit+0x16c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022c0:	4b26      	ldr	r3, [pc, #152]	@ (800235c <HAL_UART_MspInit+0x16c>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80022c6:	4825      	ldr	r0, [pc, #148]	@ (800235c <HAL_UART_MspInit+0x16c>)
 80022c8:	f003 f800 	bl	80052cc <HAL_DMA_Init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80022d2:	f7ff fa7a 	bl	80017ca <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a20      	ldr	r2, [pc, #128]	@ (800235c <HAL_UART_MspInit+0x16c>)
 80022da:	67da      	str	r2, [r3, #124]	@ 0x7c
 80022dc:	4a1f      	ldr	r2, [pc, #124]	@ (800235c <HAL_UART_MspInit+0x16c>)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel2;
 80022e2:	4b20      	ldr	r3, [pc, #128]	@ (8002364 <HAL_UART_MspInit+0x174>)
 80022e4:	4a20      	ldr	r2, [pc, #128]	@ (8002368 <HAL_UART_MspInit+0x178>)
 80022e6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80022e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002364 <HAL_UART_MspInit+0x174>)
 80022ea:	221c      	movs	r2, #28
 80022ec:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002364 <HAL_UART_MspInit+0x174>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002364 <HAL_UART_MspInit+0x174>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002364 <HAL_UART_MspInit+0x174>)
 80022fc:	2280      	movs	r2, #128	@ 0x80
 80022fe:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002300:	4b18      	ldr	r3, [pc, #96]	@ (8002364 <HAL_UART_MspInit+0x174>)
 8002302:	2200      	movs	r2, #0
 8002304:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002306:	4b17      	ldr	r3, [pc, #92]	@ (8002364 <HAL_UART_MspInit+0x174>)
 8002308:	2200      	movs	r2, #0
 800230a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800230c:	4b15      	ldr	r3, [pc, #84]	@ (8002364 <HAL_UART_MspInit+0x174>)
 800230e:	2200      	movs	r2, #0
 8002310:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002312:	4b14      	ldr	r3, [pc, #80]	@ (8002364 <HAL_UART_MspInit+0x174>)
 8002314:	2200      	movs	r2, #0
 8002316:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002318:	4812      	ldr	r0, [pc, #72]	@ (8002364 <HAL_UART_MspInit+0x174>)
 800231a:	f002 ffd7 	bl	80052cc <HAL_DMA_Init>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8002324:	f7ff fa51 	bl	80017ca <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a0e      	ldr	r2, [pc, #56]	@ (8002364 <HAL_UART_MspInit+0x174>)
 800232c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002330:	4a0c      	ldr	r2, [pc, #48]	@ (8002364 <HAL_UART_MspInit+0x174>)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8002336:	2200      	movs	r2, #0
 8002338:	2101      	movs	r1, #1
 800233a:	2027      	movs	r0, #39	@ 0x27
 800233c:	f002 fdb7 	bl	8004eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002340:	2027      	movs	r0, #39	@ 0x27
 8002342:	f002 fdce 	bl	8004ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002346:	bf00      	nop
 8002348:	3768      	adds	r7, #104	@ 0x68
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40004800 	.word	0x40004800
 8002354:	40021000 	.word	0x40021000
 8002358:	48000400 	.word	0x48000400
 800235c:	2000055c 	.word	0x2000055c
 8002360:	40020008 	.word	0x40020008
 8002364:	200005bc 	.word	0x200005bc
 8002368:	4002001c 	.word	0x4002001c

0800236c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800236c:	480d      	ldr	r0, [pc, #52]	@ (80023a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800236e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002370:	f7ff fc88 	bl	8001c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002374:	480c      	ldr	r0, [pc, #48]	@ (80023a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002376:	490d      	ldr	r1, [pc, #52]	@ (80023ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002378:	4a0d      	ldr	r2, [pc, #52]	@ (80023b0 <LoopForever+0xe>)
  movs r3, #0
 800237a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800237c:	e002      	b.n	8002384 <LoopCopyDataInit>

0800237e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800237e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002382:	3304      	adds	r3, #4

08002384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002388:	d3f9      	bcc.n	800237e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800238a:	4a0a      	ldr	r2, [pc, #40]	@ (80023b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800238c:	4c0a      	ldr	r4, [pc, #40]	@ (80023b8 <LoopForever+0x16>)
  movs r3, #0
 800238e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002390:	e001      	b.n	8002396 <LoopFillZerobss>

08002392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002394:	3204      	adds	r2, #4

08002396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002398:	d3fb      	bcc.n	8002392 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800239a:	f00c f983 	bl	800e6a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800239e:	f7ff f96f 	bl	8001680 <main>

080023a2 <LoopForever>:

LoopForever:
    b LoopForever
 80023a2:	e7fe      	b.n	80023a2 <LoopForever>
  ldr   r0, =_estack
 80023a4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80023a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023ac:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 80023b0:	08011d10 	.word	0x08011d10
  ldr r2, =_sbss
 80023b4:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 80023b8:	20000a64 	.word	0x20000a64

080023bc <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023bc:	e7fe      	b.n	80023bc <COMP1_2_3_IRQHandler>

080023be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c8:	2003      	movs	r0, #3
 80023ca:	f002 fd65 	bl	8004e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023ce:	200f      	movs	r0, #15
 80023d0:	f000 f80e 	bl	80023f0 <HAL_InitTick>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d002      	beq.n	80023e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	71fb      	strb	r3, [r7, #7]
 80023de:	e001      	b.n	80023e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023e0:	f7ff fb0a 	bl	80019f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023e4:	79fb      	ldrb	r3, [r7, #7]

}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80023fc:	4b16      	ldr	r3, [pc, #88]	@ (8002458 <HAL_InitTick+0x68>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d022      	beq.n	800244a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002404:	4b15      	ldr	r3, [pc, #84]	@ (800245c <HAL_InitTick+0x6c>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b13      	ldr	r3, [pc, #76]	@ (8002458 <HAL_InitTick+0x68>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002410:	fbb1 f3f3 	udiv	r3, r1, r3
 8002414:	fbb2 f3f3 	udiv	r3, r2, r3
 8002418:	4618      	mov	r0, r3
 800241a:	f002 fd70 	bl	8004efe <HAL_SYSTICK_Config>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10f      	bne.n	8002444 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b0f      	cmp	r3, #15
 8002428:	d809      	bhi.n	800243e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800242a:	2200      	movs	r2, #0
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	f04f 30ff 	mov.w	r0, #4294967295
 8002432:	f002 fd3c 	bl	8004eae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002436:	4a0a      	ldr	r2, [pc, #40]	@ (8002460 <HAL_InitTick+0x70>)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	e007      	b.n	800244e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	73fb      	strb	r3, [r7, #15]
 8002442:	e004      	b.n	800244e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	73fb      	strb	r3, [r7, #15]
 8002448:	e001      	b.n	800244e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800244e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20000008 	.word	0x20000008
 800245c:	20000000 	.word	0x20000000
 8002460:	20000004 	.word	0x20000004

08002464 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002468:	4b05      	ldr	r3, [pc, #20]	@ (8002480 <HAL_IncTick+0x1c>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b05      	ldr	r3, [pc, #20]	@ (8002484 <HAL_IncTick+0x20>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4413      	add	r3, r2
 8002472:	4a03      	ldr	r2, [pc, #12]	@ (8002480 <HAL_IncTick+0x1c>)
 8002474:	6013      	str	r3, [r2, #0]
}
 8002476:	bf00      	nop
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	2000061c 	.word	0x2000061c
 8002484:	20000008 	.word	0x20000008

08002488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return uwTick;
 800248c:	4b03      	ldr	r3, [pc, #12]	@ (800249c <HAL_GetTick+0x14>)
 800248e:	681b      	ldr	r3, [r3, #0]
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	2000061c 	.word	0x2000061c

080024a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	609a      	str	r2, [r3, #8]
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	609a      	str	r2, [r3, #8]
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002508:	b480      	push	{r7}
 800250a:	b087      	sub	sp, #28
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
 8002514:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	3360      	adds	r3, #96	@ 0x60
 800251a:	461a      	mov	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b08      	ldr	r3, [pc, #32]	@ (800254c <LL_ADC_SetOffset+0x44>)
 800252a:	4013      	ands	r3, r2
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	4313      	orrs	r3, r2
 8002538:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002540:	bf00      	nop
 8002542:	371c      	adds	r7, #28
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	03fff000 	.word	0x03fff000

08002550 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3360      	adds	r3, #96	@ 0x60
 800255e:	461a      	mov	r2, r3
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	3360      	adds	r3, #96	@ 0x60
 800258c:	461a      	mov	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	431a      	orrs	r2, r3
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80025a6:	bf00      	nop
 80025a8:	371c      	adds	r7, #28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b087      	sub	sp, #28
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	3360      	adds	r3, #96	@ 0x60
 80025c2:	461a      	mov	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80025dc:	bf00      	nop
 80025de:	371c      	adds	r7, #28
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	3360      	adds	r3, #96	@ 0x60
 80025f8:	461a      	mov	r2, r3
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	431a      	orrs	r2, r3
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002612:	bf00      	nop
 8002614:	371c      	adds	r7, #28
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	615a      	str	r2, [r3, #20]
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002658:	2301      	movs	r3, #1
 800265a:	e000      	b.n	800265e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800266a:	b480      	push	{r7}
 800266c:	b087      	sub	sp, #28
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	3330      	adds	r3, #48	@ 0x30
 800267a:	461a      	mov	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	0a1b      	lsrs	r3, r3, #8
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	4413      	add	r3, r2
 8002688:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	211f      	movs	r1, #31
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	401a      	ands	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	0e9b      	lsrs	r3, r3, #26
 80026a2:	f003 011f 	and.w	r1, r3, #31
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	f003 031f 	and.w	r3, r3, #31
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	431a      	orrs	r2, r3
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026b6:	bf00      	nop
 80026b8:	371c      	adds	r7, #28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ce:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	3314      	adds	r3, #20
 80026f8:	461a      	mov	r2, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	0e5b      	lsrs	r3, r3, #25
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	4413      	add	r3, r2
 8002706:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	0d1b      	lsrs	r3, r3, #20
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	2107      	movs	r1, #7
 8002716:	fa01 f303 	lsl.w	r3, r1, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	401a      	ands	r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	0d1b      	lsrs	r3, r3, #20
 8002722:	f003 031f 	and.w	r3, r3, #31
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	fa01 f303 	lsl.w	r3, r1, r3
 800272c:	431a      	orrs	r2, r3
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002732:	bf00      	nop
 8002734:	371c      	adds	r7, #28
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002758:	43db      	mvns	r3, r3
 800275a:	401a      	ands	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f003 0318 	and.w	r3, r3, #24
 8002762:	4908      	ldr	r1, [pc, #32]	@ (8002784 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002764:	40d9      	lsrs	r1, r3
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	400b      	ands	r3, r1
 800276a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276e:	431a      	orrs	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002776:	bf00      	nop
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	0007ffff 	.word	0x0007ffff

08002788 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 031f 	and.w	r3, r3, #31
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80027d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6093      	str	r3, [r2, #8]
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027f8:	d101      	bne.n	80027fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800281c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002820:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002844:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002848:	d101      	bne.n	800284e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800286c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002870:	f043 0201 	orr.w	r2, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002894:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002898:	f043 0202 	orr.w	r2, r3, #2
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <LL_ADC_IsEnabled+0x18>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <LL_ADC_IsEnabled+0x1a>
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d101      	bne.n	80028ea <LL_ADC_IsDisableOngoing+0x18>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <LL_ADC_IsDisableOngoing+0x1a>
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b04      	cmp	r3, #4
 800290a:	d101      	bne.n	8002910 <LL_ADC_REG_IsConversionOngoing+0x18>
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b08      	cmp	r3, #8
 8002930:	d101      	bne.n	8002936 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002944:	b590      	push	{r4, r7, lr}
 8002946:	b089      	sub	sp, #36	@ 0x24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e167      	b.n	8002c2e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002968:	2b00      	cmp	r3, #0
 800296a:	d109      	bne.n	8002980 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7fe fc9b 	bl	80012a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff2d 	bl	80027e4 <LL_ADC_IsDeepPowerDownEnabled>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d004      	beq.n	800299a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff13 	bl	80027c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff ff48 	bl	8002834 <LL_ADC_IsInternalRegulatorEnabled>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d115      	bne.n	80029d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff ff2c 	bl	800280c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029b4:	4ba0      	ldr	r3, [pc, #640]	@ (8002c38 <HAL_ADC_Init+0x2f4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	099b      	lsrs	r3, r3, #6
 80029ba:	4aa0      	ldr	r2, [pc, #640]	@ (8002c3c <HAL_ADC_Init+0x2f8>)
 80029bc:	fba2 2303 	umull	r2, r3, r2, r3
 80029c0:	099b      	lsrs	r3, r3, #6
 80029c2:	3301      	adds	r3, #1
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029c8:	e002      	b.n	80029d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f9      	bne.n	80029ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff ff2a 	bl	8002834 <LL_ADC_IsInternalRegulatorEnabled>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10d      	bne.n	8002a02 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ea:	f043 0210 	orr.w	r2, r3, #16
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029f6:	f043 0201 	orr.w	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff ff76 	bl	80028f8 <LL_ADC_REG_IsConversionOngoing>
 8002a0c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f040 8100 	bne.w	8002c1c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f040 80fc 	bne.w	8002c1c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a28:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002a2c:	f043 0202 	orr.w	r2, r3, #2
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ff37 	bl	80028ac <LL_ADC_IsEnabled>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d111      	bne.n	8002a68 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a44:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002a48:	f7ff ff30 	bl	80028ac <LL_ADC_IsEnabled>
 8002a4c:	4604      	mov	r4, r0
 8002a4e:	487c      	ldr	r0, [pc, #496]	@ (8002c40 <HAL_ADC_Init+0x2fc>)
 8002a50:	f7ff ff2c 	bl	80028ac <LL_ADC_IsEnabled>
 8002a54:	4603      	mov	r3, r0
 8002a56:	4323      	orrs	r3, r4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d105      	bne.n	8002a68 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	4619      	mov	r1, r3
 8002a62:	4878      	ldr	r0, [pc, #480]	@ (8002c44 <HAL_ADC_Init+0x300>)
 8002a64:	f7ff fd1c 	bl	80024a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	7f5b      	ldrb	r3, [r3, #29]
 8002a6c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a72:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002a78:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002a7e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a86:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d106      	bne.n	8002aa4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	045b      	lsls	r3, r3, #17
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d009      	beq.n	8002ac0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	4b60      	ldr	r3, [pc, #384]	@ (8002c48 <HAL_ADC_Init+0x304>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6812      	ldr	r2, [r2, #0]
 8002ace:	69b9      	ldr	r1, [r7, #24]
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff ff15 	bl	800291e <LL_ADC_INJ_IsConversionOngoing>
 8002af4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d16d      	bne.n	8002bd8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d16a      	bne.n	8002bd8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b06:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b0e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b1e:	f023 0302 	bic.w	r3, r3, #2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	69b9      	ldr	r1, [r7, #24]
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d017      	beq.n	8002b64 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691a      	ldr	r2, [r3, #16]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002b42:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002b4c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002b50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6911      	ldr	r1, [r2, #16]
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6812      	ldr	r2, [r2, #0]
 8002b5c:	430b      	orrs	r3, r1
 8002b5e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002b62:	e013      	b.n	8002b8c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691a      	ldr	r2, [r3, #16]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002b72:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002b84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b88:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d118      	bne.n	8002bc8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002ba0:	f023 0304 	bic.w	r3, r3, #4
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002bac:	4311      	orrs	r1, r2
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002bb2:	4311      	orrs	r1, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f042 0201 	orr.w	r2, r2, #1
 8002bc4:	611a      	str	r2, [r3, #16]
 8002bc6:	e007      	b.n	8002bd8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691a      	ldr	r2, [r3, #16]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0201 	bic.w	r2, r2, #1
 8002bd6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d10c      	bne.n	8002bfa <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be6:	f023 010f 	bic.w	r1, r3, #15
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	1e5a      	subs	r2, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bf8:	e007      	b.n	8002c0a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 020f 	bic.w	r2, r2, #15
 8002c08:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0e:	f023 0303 	bic.w	r3, r3, #3
 8002c12:	f043 0201 	orr.w	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c1a:	e007      	b.n	8002c2c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c20:	f043 0210 	orr.w	r2, r3, #16
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3724      	adds	r7, #36	@ 0x24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd90      	pop	{r4, r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000000 	.word	0x20000000
 8002c3c:	053e2d63 	.word	0x053e2d63
 8002c40:	50000100 	.word	0x50000100
 8002c44:	50000300 	.word	0x50000300
 8002c48:	fff04007 	.word	0xfff04007

08002c4c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08a      	sub	sp, #40	@ 0x28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002c54:	2300      	movs	r3, #0
 8002c56:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c68:	4883      	ldr	r0, [pc, #524]	@ (8002e78 <HAL_ADC_IRQHandler+0x22c>)
 8002c6a:	f7ff fd8d 	bl	8002788 <LL_ADC_GetMultimode>
 8002c6e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d017      	beq.n	8002caa <HAL_ADC_IRQHandler+0x5e>
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d012      	beq.n	8002caa <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d105      	bne.n	8002c9c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c94:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f001 fa9d 	bl	80041dc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d004      	beq.n	8002cbe <HAL_ADC_IRQHandler+0x72>
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10a      	bne.n	8002cd4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 8085 	beq.w	8002dd4 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d07f      	beq.n	8002dd4 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd8:	f003 0310 	and.w	r3, r3, #16
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d105      	bne.n	8002cec <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff fca7 	bl	8002644 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d064      	beq.n	8002dc6 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a5e      	ldr	r2, [pc, #376]	@ (8002e7c <HAL_ADC_IRQHandler+0x230>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d002      	beq.n	8002d0c <HAL_ADC_IRQHandler+0xc0>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	e001      	b.n	8002d10 <HAL_ADC_IRQHandler+0xc4>
 8002d0c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d008      	beq.n	8002d2a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d005      	beq.n	8002d2a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2b05      	cmp	r3, #5
 8002d22:	d002      	beq.n	8002d2a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	2b09      	cmp	r3, #9
 8002d28:	d104      	bne.n	8002d34 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	623b      	str	r3, [r7, #32]
 8002d32:	e00d      	b.n	8002d50 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a50      	ldr	r2, [pc, #320]	@ (8002e7c <HAL_ADC_IRQHandler+0x230>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d002      	beq.n	8002d44 <HAL_ADC_IRQHandler+0xf8>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	e001      	b.n	8002d48 <HAL_ADC_IRQHandler+0xfc>
 8002d44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002d48:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d135      	bne.n	8002dc6 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d12e      	bne.n	8002dc6 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff fdc3 	bl	80028f8 <LL_ADC_REG_IsConversionOngoing>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d11a      	bne.n	8002dae <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 020c 	bic.w	r2, r2, #12
 8002d86:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d112      	bne.n	8002dc6 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da4:	f043 0201 	orr.w	r2, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002dac:	e00b      	b.n	8002dc6 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db2:	f043 0210 	orr.w	r2, r3, #16
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dbe:	f043 0201 	orr.w	r2, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f95a 	bl	8003080 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	220c      	movs	r2, #12
 8002dd2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d004      	beq.n	8002de8 <HAL_ADC_IRQHandler+0x19c>
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10b      	bne.n	8002e00 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 809e 	beq.w	8002f30 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 8098 	beq.w	8002f30 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d105      	bne.n	8002e18 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e10:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fc50 	bl	80026c2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002e22:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff fc0b 	bl	8002644 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e2e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a11      	ldr	r2, [pc, #68]	@ (8002e7c <HAL_ADC_IRQHandler+0x230>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d002      	beq.n	8002e40 <HAL_ADC_IRQHandler+0x1f4>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	e001      	b.n	8002e44 <HAL_ADC_IRQHandler+0x1f8>
 8002e40:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d008      	beq.n	8002e5e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d005      	beq.n	8002e5e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2b06      	cmp	r3, #6
 8002e56:	d002      	beq.n	8002e5e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2b07      	cmp	r3, #7
 8002e5c:	d104      	bne.n	8002e68 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	623b      	str	r3, [r7, #32]
 8002e66:	e011      	b.n	8002e8c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a03      	ldr	r2, [pc, #12]	@ (8002e7c <HAL_ADC_IRQHandler+0x230>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d006      	beq.n	8002e80 <HAL_ADC_IRQHandler+0x234>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	e005      	b.n	8002e84 <HAL_ADC_IRQHandler+0x238>
 8002e78:	50000300 	.word	0x50000300
 8002e7c:	50000100 	.word	0x50000100
 8002e80:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e84:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d047      	beq.n	8002f22 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d007      	beq.n	8002eac <HAL_ADC_IRQHandler+0x260>
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d03f      	beq.n	8002f22 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d13a      	bne.n	8002f22 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb6:	2b40      	cmp	r3, #64	@ 0x40
 8002eb8:	d133      	bne.n	8002f22 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d12e      	bne.n	8002f22 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff fd28 	bl	800291e <LL_ADC_INJ_IsConversionOngoing>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d11a      	bne.n	8002f0a <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002ee2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d112      	bne.n	8002f22 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f00:	f043 0201 	orr.w	r2, r3, #1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f08:	e00b      	b.n	8002f22 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0e:	f043 0210 	orr.w	r2, r3, #16
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f1a:	f043 0201 	orr.w	r2, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f008 fec0 	bl	800bca8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2260      	movs	r2, #96	@ 0x60
 8002f2e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d011      	beq.n	8002f5e <HAL_ADC_IRQHandler+0x312>
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00c      	beq.n	8002f5e <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f48:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f89f 	bl	8003094 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2280      	movs	r2, #128	@ 0x80
 8002f5c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d012      	beq.n	8002f8e <HAL_ADC_IRQHandler+0x342>
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00d      	beq.n	8002f8e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f76:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f001 f918 	bl	80041b4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f8c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d012      	beq.n	8002fbe <HAL_ADC_IRQHandler+0x372>
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00d      	beq.n	8002fbe <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f001 f90a 	bl	80041c8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fbc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d036      	beq.n	8003036 <HAL_ADC_IRQHandler+0x3ea>
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	f003 0310 	and.w	r3, r3, #16
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d031      	beq.n	8003036 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d102      	bne.n	8002fe0 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fde:	e014      	b.n	800300a <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d008      	beq.n	8002ff8 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002fe6:	4825      	ldr	r0, [pc, #148]	@ (800307c <HAL_ADC_IRQHandler+0x430>)
 8002fe8:	f7ff fbdc 	bl	80027a4 <LL_ADC_GetMultiDMATransfer>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00b      	beq.n	800300a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ff6:	e008      	b.n	800300a <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003006:	2301      	movs	r3, #1
 8003008:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300c:	2b01      	cmp	r3, #1
 800300e:	d10e      	bne.n	800302e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003014:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003020:	f043 0202 	orr.w	r2, r3, #2
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f83d 	bl	80030a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2210      	movs	r2, #16
 8003034:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800303c:	2b00      	cmp	r3, #0
 800303e:	d018      	beq.n	8003072 <HAL_ADC_IRQHandler+0x426>
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003046:	2b00      	cmp	r3, #0
 8003048:	d013      	beq.n	8003072 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800305a:	f043 0208 	orr.w	r2, r3, #8
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800306a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f001 f897 	bl	80041a0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003072:	bf00      	nop
 8003074:	3728      	adds	r7, #40	@ 0x28
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	50000300 	.word	0x50000300

08003080 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b0b6      	sub	sp, #216	@ 0xd8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_ADC_ConfigChannel+0x22>
 80030da:	2302      	movs	r3, #2
 80030dc:	e3c8      	b.n	8003870 <HAL_ADC_ConfigChannel+0x7b4>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff fc04 	bl	80028f8 <LL_ADC_REG_IsConversionOngoing>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f040 83ad 	bne.w	8003852 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6818      	ldr	r0, [r3, #0]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	f7ff fab0 	bl	800266a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fbf2 	bl	80028f8 <LL_ADC_REG_IsConversionOngoing>
 8003114:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff fbfe 	bl	800291e <LL_ADC_INJ_IsConversionOngoing>
 8003122:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003126:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800312a:	2b00      	cmp	r3, #0
 800312c:	f040 81d9 	bne.w	80034e2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003130:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003134:	2b00      	cmp	r3, #0
 8003136:	f040 81d4 	bne.w	80034e2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003142:	d10f      	bne.n	8003164 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2200      	movs	r2, #0
 800314e:	4619      	mov	r1, r3
 8003150:	f7ff faca 	bl	80026e8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff fa5e 	bl	800261e <LL_ADC_SetSamplingTimeCommonConfig>
 8003162:	e00e      	b.n	8003182 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6818      	ldr	r0, [r3, #0]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	6819      	ldr	r1, [r3, #0]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	461a      	mov	r2, r3
 8003172:	f7ff fab9 	bl	80026e8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2100      	movs	r1, #0
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff fa4e 	bl	800261e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	695a      	ldr	r2, [r3, #20]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	08db      	lsrs	r3, r3, #3
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d022      	beq.n	80031ea <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6818      	ldr	r0, [r3, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	6919      	ldr	r1, [r3, #16]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80031b4:	f7ff f9a8 	bl	8002508 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6818      	ldr	r0, [r3, #0]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	6919      	ldr	r1, [r3, #16]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	461a      	mov	r2, r3
 80031c6:	f7ff f9f4 	bl	80025b2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6818      	ldr	r0, [r3, #0]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d102      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x124>
 80031da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031de:	e000      	b.n	80031e2 <HAL_ADC_ConfigChannel+0x126>
 80031e0:	2300      	movs	r3, #0
 80031e2:	461a      	mov	r2, r3
 80031e4:	f7ff fa00 	bl	80025e8 <LL_ADC_SetOffsetSaturation>
 80031e8:	e17b      	b.n	80034e2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2100      	movs	r1, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff f9ad 	bl	8002550 <LL_ADC_GetOffsetChannel>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10a      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x15a>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2100      	movs	r1, #0
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff f9a2 	bl	8002550 <LL_ADC_GetOffsetChannel>
 800320c:	4603      	mov	r3, r0
 800320e:	0e9b      	lsrs	r3, r3, #26
 8003210:	f003 021f 	and.w	r2, r3, #31
 8003214:	e01e      	b.n	8003254 <HAL_ADC_ConfigChannel+0x198>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2100      	movs	r1, #0
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff f997 	bl	8002550 <LL_ADC_GetOffsetChannel>
 8003222:	4603      	mov	r3, r0
 8003224:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003228:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800322c:	fa93 f3a3 	rbit	r3, r3
 8003230:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003234:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003238:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800323c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003244:	2320      	movs	r3, #32
 8003246:	e004      	b.n	8003252 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003248:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800324c:	fab3 f383 	clz	r3, r3
 8003250:	b2db      	uxtb	r3, r3
 8003252:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800325c:	2b00      	cmp	r3, #0
 800325e:	d105      	bne.n	800326c <HAL_ADC_ConfigChannel+0x1b0>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	0e9b      	lsrs	r3, r3, #26
 8003266:	f003 031f 	and.w	r3, r3, #31
 800326a:	e018      	b.n	800329e <HAL_ADC_ConfigChannel+0x1e2>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003274:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003278:	fa93 f3a3 	rbit	r3, r3
 800327c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003280:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003284:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003288:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003290:	2320      	movs	r3, #32
 8003292:	e004      	b.n	800329e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003294:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003298:	fab3 f383 	clz	r3, r3
 800329c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800329e:	429a      	cmp	r2, r3
 80032a0:	d106      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2200      	movs	r2, #0
 80032a8:	2100      	movs	r1, #0
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff f966 	bl	800257c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2101      	movs	r1, #1
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff f94a 	bl	8002550 <LL_ADC_GetOffsetChannel>
 80032bc:	4603      	mov	r3, r0
 80032be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10a      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x220>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2101      	movs	r1, #1
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff f93f 	bl	8002550 <LL_ADC_GetOffsetChannel>
 80032d2:	4603      	mov	r3, r0
 80032d4:	0e9b      	lsrs	r3, r3, #26
 80032d6:	f003 021f 	and.w	r2, r3, #31
 80032da:	e01e      	b.n	800331a <HAL_ADC_ConfigChannel+0x25e>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2101      	movs	r1, #1
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff f934 	bl	8002550 <LL_ADC_GetOffsetChannel>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80032f2:	fa93 f3a3 	rbit	r3, r3
 80032f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80032fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003302:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800330a:	2320      	movs	r3, #32
 800330c:	e004      	b.n	8003318 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800330e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003312:	fab3 f383 	clz	r3, r3
 8003316:	b2db      	uxtb	r3, r3
 8003318:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003322:	2b00      	cmp	r3, #0
 8003324:	d105      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x276>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	0e9b      	lsrs	r3, r3, #26
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	e018      	b.n	8003364 <HAL_ADC_ConfigChannel+0x2a8>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800333e:	fa93 f3a3 	rbit	r3, r3
 8003342:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003346:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800334a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800334e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003356:	2320      	movs	r3, #32
 8003358:	e004      	b.n	8003364 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800335a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800335e:	fab3 f383 	clz	r3, r3
 8003362:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003364:	429a      	cmp	r2, r3
 8003366:	d106      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2200      	movs	r2, #0
 800336e:	2101      	movs	r1, #1
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff f903 	bl	800257c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2102      	movs	r1, #2
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff f8e7 	bl	8002550 <LL_ADC_GetOffsetChannel>
 8003382:	4603      	mov	r3, r0
 8003384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10a      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x2e6>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2102      	movs	r1, #2
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff f8dc 	bl	8002550 <LL_ADC_GetOffsetChannel>
 8003398:	4603      	mov	r3, r0
 800339a:	0e9b      	lsrs	r3, r3, #26
 800339c:	f003 021f 	and.w	r2, r3, #31
 80033a0:	e01e      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x324>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2102      	movs	r1, #2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff f8d1 	bl	8002550 <LL_ADC_GetOffsetChannel>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033b8:	fa93 f3a3 	rbit	r3, r3
 80033bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80033c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80033c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80033d0:	2320      	movs	r3, #32
 80033d2:	e004      	b.n	80033de <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80033d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80033d8:	fab3 f383 	clz	r3, r3
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d105      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x33c>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	0e9b      	lsrs	r3, r3, #26
 80033f2:	f003 031f 	and.w	r3, r3, #31
 80033f6:	e016      	b.n	8003426 <HAL_ADC_ConfigChannel+0x36a>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003400:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003404:	fa93 f3a3 	rbit	r3, r3
 8003408:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800340a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800340c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003410:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003418:	2320      	movs	r3, #32
 800341a:	e004      	b.n	8003426 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800341c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003420:	fab3 f383 	clz	r3, r3
 8003424:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003426:	429a      	cmp	r2, r3
 8003428:	d106      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2200      	movs	r2, #0
 8003430:	2102      	movs	r1, #2
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff f8a2 	bl	800257c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2103      	movs	r1, #3
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff f886 	bl	8002550 <LL_ADC_GetOffsetChannel>
 8003444:	4603      	mov	r3, r0
 8003446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10a      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x3a8>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2103      	movs	r1, #3
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff f87b 	bl	8002550 <LL_ADC_GetOffsetChannel>
 800345a:	4603      	mov	r3, r0
 800345c:	0e9b      	lsrs	r3, r3, #26
 800345e:	f003 021f 	and.w	r2, r3, #31
 8003462:	e017      	b.n	8003494 <HAL_ADC_ConfigChannel+0x3d8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2103      	movs	r1, #3
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff f870 	bl	8002550 <LL_ADC_GetOffsetChannel>
 8003470:	4603      	mov	r3, r0
 8003472:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003474:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003476:	fa93 f3a3 	rbit	r3, r3
 800347a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800347c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800347e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003480:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003486:	2320      	movs	r3, #32
 8003488:	e003      	b.n	8003492 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800348a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800348c:	fab3 f383 	clz	r3, r3
 8003490:	b2db      	uxtb	r3, r3
 8003492:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800349c:	2b00      	cmp	r3, #0
 800349e:	d105      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x3f0>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	0e9b      	lsrs	r3, r3, #26
 80034a6:	f003 031f 	and.w	r3, r3, #31
 80034aa:	e011      	b.n	80034d0 <HAL_ADC_ConfigChannel+0x414>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034b4:	fa93 f3a3 	rbit	r3, r3
 80034b8:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80034ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80034be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80034c4:	2320      	movs	r3, #32
 80034c6:	e003      	b.n	80034d0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80034c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034ca:	fab3 f383 	clz	r3, r3
 80034ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d106      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2200      	movs	r2, #0
 80034da:	2103      	movs	r1, #3
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff f84d 	bl	800257c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff f9e0 	bl	80028ac <LL_ADC_IsEnabled>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f040 8140 	bne.w	8003774 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	6819      	ldr	r1, [r3, #0]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	461a      	mov	r2, r3
 8003502:	f7ff f91d 	bl	8002740 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	4a8f      	ldr	r2, [pc, #572]	@ (8003748 <HAL_ADC_ConfigChannel+0x68c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	f040 8131 	bne.w	8003774 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10b      	bne.n	800353a <HAL_ADC_ConfigChannel+0x47e>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	0e9b      	lsrs	r3, r3, #26
 8003528:	3301      	adds	r3, #1
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	2b09      	cmp	r3, #9
 8003530:	bf94      	ite	ls
 8003532:	2301      	movls	r3, #1
 8003534:	2300      	movhi	r3, #0
 8003536:	b2db      	uxtb	r3, r3
 8003538:	e019      	b.n	800356e <HAL_ADC_ConfigChannel+0x4b2>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003540:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003542:	fa93 f3a3 	rbit	r3, r3
 8003546:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003548:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800354a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800354c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003552:	2320      	movs	r3, #32
 8003554:	e003      	b.n	800355e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003556:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003558:	fab3 f383 	clz	r3, r3
 800355c:	b2db      	uxtb	r3, r3
 800355e:	3301      	adds	r3, #1
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	2b09      	cmp	r3, #9
 8003566:	bf94      	ite	ls
 8003568:	2301      	movls	r3, #1
 800356a:	2300      	movhi	r3, #0
 800356c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800356e:	2b00      	cmp	r3, #0
 8003570:	d079      	beq.n	8003666 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800357a:	2b00      	cmp	r3, #0
 800357c:	d107      	bne.n	800358e <HAL_ADC_ConfigChannel+0x4d2>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	0e9b      	lsrs	r3, r3, #26
 8003584:	3301      	adds	r3, #1
 8003586:	069b      	lsls	r3, r3, #26
 8003588:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800358c:	e015      	b.n	80035ba <HAL_ADC_ConfigChannel+0x4fe>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003594:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003596:	fa93 f3a3 	rbit	r3, r3
 800359a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800359c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800359e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80035a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80035a6:	2320      	movs	r3, #32
 80035a8:	e003      	b.n	80035b2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80035aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ac:	fab3 f383 	clz	r3, r3
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	3301      	adds	r3, #1
 80035b4:	069b      	lsls	r3, r3, #26
 80035b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <HAL_ADC_ConfigChannel+0x51e>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	0e9b      	lsrs	r3, r3, #26
 80035cc:	3301      	adds	r3, #1
 80035ce:	f003 031f 	and.w	r3, r3, #31
 80035d2:	2101      	movs	r1, #1
 80035d4:	fa01 f303 	lsl.w	r3, r1, r3
 80035d8:	e017      	b.n	800360a <HAL_ADC_ConfigChannel+0x54e>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035e2:	fa93 f3a3 	rbit	r3, r3
 80035e6:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80035e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80035ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80035f2:	2320      	movs	r3, #32
 80035f4:	e003      	b.n	80035fe <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80035f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035f8:	fab3 f383 	clz	r3, r3
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	3301      	adds	r3, #1
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	2101      	movs	r1, #1
 8003606:	fa01 f303 	lsl.w	r3, r1, r3
 800360a:	ea42 0103 	orr.w	r1, r2, r3
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10a      	bne.n	8003630 <HAL_ADC_ConfigChannel+0x574>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	0e9b      	lsrs	r3, r3, #26
 8003620:	3301      	adds	r3, #1
 8003622:	f003 021f 	and.w	r2, r3, #31
 8003626:	4613      	mov	r3, r2
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	4413      	add	r3, r2
 800362c:	051b      	lsls	r3, r3, #20
 800362e:	e018      	b.n	8003662 <HAL_ADC_ConfigChannel+0x5a6>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003638:	fa93 f3a3 	rbit	r3, r3
 800363c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800363e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003640:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003648:	2320      	movs	r3, #32
 800364a:	e003      	b.n	8003654 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800364c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800364e:	fab3 f383 	clz	r3, r3
 8003652:	b2db      	uxtb	r3, r3
 8003654:	3301      	adds	r3, #1
 8003656:	f003 021f 	and.w	r2, r3, #31
 800365a:	4613      	mov	r3, r2
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	4413      	add	r3, r2
 8003660:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003662:	430b      	orrs	r3, r1
 8003664:	e081      	b.n	800376a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800366e:	2b00      	cmp	r3, #0
 8003670:	d107      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x5c6>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	0e9b      	lsrs	r3, r3, #26
 8003678:	3301      	adds	r3, #1
 800367a:	069b      	lsls	r3, r3, #26
 800367c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003680:	e015      	b.n	80036ae <HAL_ADC_ConfigChannel+0x5f2>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800368a:	fa93 f3a3 	rbit	r3, r3
 800368e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003692:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800369a:	2320      	movs	r3, #32
 800369c:	e003      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800369e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a0:	fab3 f383 	clz	r3, r3
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	3301      	adds	r3, #1
 80036a8:	069b      	lsls	r3, r3, #26
 80036aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d109      	bne.n	80036ce <HAL_ADC_ConfigChannel+0x612>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	0e9b      	lsrs	r3, r3, #26
 80036c0:	3301      	adds	r3, #1
 80036c2:	f003 031f 	and.w	r3, r3, #31
 80036c6:	2101      	movs	r1, #1
 80036c8:	fa01 f303 	lsl.w	r3, r1, r3
 80036cc:	e017      	b.n	80036fe <HAL_ADC_ConfigChannel+0x642>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	fa93 f3a3 	rbit	r3, r3
 80036da:	61fb      	str	r3, [r7, #28]
  return result;
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80036e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80036e6:	2320      	movs	r3, #32
 80036e8:	e003      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	fab3 f383 	clz	r3, r3
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	3301      	adds	r3, #1
 80036f4:	f003 031f 	and.w	r3, r3, #31
 80036f8:	2101      	movs	r1, #1
 80036fa:	fa01 f303 	lsl.w	r3, r1, r3
 80036fe:	ea42 0103 	orr.w	r1, r2, r3
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10d      	bne.n	800372a <HAL_ADC_ConfigChannel+0x66e>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	0e9b      	lsrs	r3, r3, #26
 8003714:	3301      	adds	r3, #1
 8003716:	f003 021f 	and.w	r2, r3, #31
 800371a:	4613      	mov	r3, r2
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	4413      	add	r3, r2
 8003720:	3b1e      	subs	r3, #30
 8003722:	051b      	lsls	r3, r3, #20
 8003724:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003728:	e01e      	b.n	8003768 <HAL_ADC_ConfigChannel+0x6ac>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	fa93 f3a3 	rbit	r3, r3
 8003736:	613b      	str	r3, [r7, #16]
  return result;
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d104      	bne.n	800374c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003742:	2320      	movs	r3, #32
 8003744:	e006      	b.n	8003754 <HAL_ADC_ConfigChannel+0x698>
 8003746:	bf00      	nop
 8003748:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	fab3 f383 	clz	r3, r3
 8003752:	b2db      	uxtb	r3, r3
 8003754:	3301      	adds	r3, #1
 8003756:	f003 021f 	and.w	r2, r3, #31
 800375a:	4613      	mov	r3, r2
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	4413      	add	r3, r2
 8003760:	3b1e      	subs	r3, #30
 8003762:	051b      	lsls	r3, r3, #20
 8003764:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003768:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800376e:	4619      	mov	r1, r3
 8003770:	f7fe ffba 	bl	80026e8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	4b3f      	ldr	r3, [pc, #252]	@ (8003878 <HAL_ADC_ConfigChannel+0x7bc>)
 800377a:	4013      	ands	r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d071      	beq.n	8003864 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003780:	483e      	ldr	r0, [pc, #248]	@ (800387c <HAL_ADC_ConfigChannel+0x7c0>)
 8003782:	f7fe feb3 	bl	80024ec <LL_ADC_GetCommonPathInternalCh>
 8003786:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a3c      	ldr	r2, [pc, #240]	@ (8003880 <HAL_ADC_ConfigChannel+0x7c4>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d004      	beq.n	800379e <HAL_ADC_ConfigChannel+0x6e2>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a3a      	ldr	r2, [pc, #232]	@ (8003884 <HAL_ADC_ConfigChannel+0x7c8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d127      	bne.n	80037ee <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800379e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d121      	bne.n	80037ee <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037b2:	d157      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037bc:	4619      	mov	r1, r3
 80037be:	482f      	ldr	r0, [pc, #188]	@ (800387c <HAL_ADC_ConfigChannel+0x7c0>)
 80037c0:	f7fe fe81 	bl	80024c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037c4:	4b30      	ldr	r3, [pc, #192]	@ (8003888 <HAL_ADC_ConfigChannel+0x7cc>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	099b      	lsrs	r3, r3, #6
 80037ca:	4a30      	ldr	r2, [pc, #192]	@ (800388c <HAL_ADC_ConfigChannel+0x7d0>)
 80037cc:	fba2 2303 	umull	r2, r3, r2, r3
 80037d0:	099b      	lsrs	r3, r3, #6
 80037d2:	1c5a      	adds	r2, r3, #1
 80037d4:	4613      	mov	r3, r2
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037de:	e002      	b.n	80037e6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1f9      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037ec:	e03a      	b.n	8003864 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a27      	ldr	r2, [pc, #156]	@ (8003890 <HAL_ADC_ConfigChannel+0x7d4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d113      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10d      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a22      	ldr	r2, [pc, #136]	@ (8003894 <HAL_ADC_ConfigChannel+0x7d8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d02a      	beq.n	8003864 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800380e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003812:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003816:	4619      	mov	r1, r3
 8003818:	4818      	ldr	r0, [pc, #96]	@ (800387c <HAL_ADC_ConfigChannel+0x7c0>)
 800381a:	f7fe fe54 	bl	80024c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800381e:	e021      	b.n	8003864 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a1c      	ldr	r2, [pc, #112]	@ (8003898 <HAL_ADC_ConfigChannel+0x7dc>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d11c      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800382a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800382e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d116      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a16      	ldr	r2, [pc, #88]	@ (8003894 <HAL_ADC_ConfigChannel+0x7d8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d011      	beq.n	8003864 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003840:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003844:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003848:	4619      	mov	r1, r3
 800384a:	480c      	ldr	r0, [pc, #48]	@ (800387c <HAL_ADC_ConfigChannel+0x7c0>)
 800384c:	f7fe fe3b 	bl	80024c6 <LL_ADC_SetCommonPathInternalCh>
 8003850:	e008      	b.n	8003864 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003856:	f043 0220 	orr.w	r2, r3, #32
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800386c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003870:	4618      	mov	r0, r3
 8003872:	37d8      	adds	r7, #216	@ 0xd8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	80080000 	.word	0x80080000
 800387c:	50000300 	.word	0x50000300
 8003880:	c3210000 	.word	0xc3210000
 8003884:	90c00010 	.word	0x90c00010
 8003888:	20000000 	.word	0x20000000
 800388c:	053e2d63 	.word	0x053e2d63
 8003890:	c7520000 	.word	0xc7520000
 8003894:	50000100 	.word	0x50000100
 8003898:	cb840000 	.word	0xcb840000

0800389c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fe fffd 	bl	80028ac <LL_ADC_IsEnabled>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d169      	bne.n	800398c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	4b36      	ldr	r3, [pc, #216]	@ (8003998 <ADC_Enable+0xfc>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00d      	beq.n	80038e2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ca:	f043 0210 	orr.w	r2, r3, #16
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038d6:	f043 0201 	orr.w	r2, r3, #1
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e055      	b.n	800398e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fe ffb8 	bl	800285c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80038ec:	482b      	ldr	r0, [pc, #172]	@ (800399c <ADC_Enable+0x100>)
 80038ee:	f7fe fdfd 	bl	80024ec <LL_ADC_GetCommonPathInternalCh>
 80038f2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80038f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d013      	beq.n	8003924 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038fc:	4b28      	ldr	r3, [pc, #160]	@ (80039a0 <ADC_Enable+0x104>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	099b      	lsrs	r3, r3, #6
 8003902:	4a28      	ldr	r2, [pc, #160]	@ (80039a4 <ADC_Enable+0x108>)
 8003904:	fba2 2303 	umull	r2, r3, r2, r3
 8003908:	099b      	lsrs	r3, r3, #6
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	4613      	mov	r3, r2
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	4413      	add	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003916:	e002      	b.n	800391e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	3b01      	subs	r3, #1
 800391c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1f9      	bne.n	8003918 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003924:	f7fe fdb0 	bl	8002488 <HAL_GetTick>
 8003928:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800392a:	e028      	b.n	800397e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f7fe ffbb 	bl	80028ac <LL_ADC_IsEnabled>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d104      	bne.n	8003946 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f7fe ff8b 	bl	800285c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003946:	f7fe fd9f 	bl	8002488 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d914      	bls.n	800397e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b01      	cmp	r3, #1
 8003960:	d00d      	beq.n	800397e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003966:	f043 0210 	orr.w	r2, r3, #16
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003972:	f043 0201 	orr.w	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e007      	b.n	800398e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b01      	cmp	r3, #1
 800398a:	d1cf      	bne.n	800392c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	8000003f 	.word	0x8000003f
 800399c:	50000300 	.word	0x50000300
 80039a0:	20000000 	.word	0x20000000
 80039a4:	053e2d63 	.word	0x053e2d63

080039a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fe ff8c 	bl	80028d2 <LL_ADC_IsDisableOngoing>
 80039ba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fe ff73 	bl	80028ac <LL_ADC_IsEnabled>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d047      	beq.n	8003a5c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d144      	bne.n	8003a5c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 030d 	and.w	r3, r3, #13
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d10c      	bne.n	80039fa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fe ff4d 	bl	8002884 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2203      	movs	r2, #3
 80039f0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039f2:	f7fe fd49 	bl	8002488 <HAL_GetTick>
 80039f6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039f8:	e029      	b.n	8003a4e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fe:	f043 0210 	orr.w	r2, r3, #16
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a0a:	f043 0201 	orr.w	r2, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e023      	b.n	8003a5e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a16:	f7fe fd37 	bl	8002488 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d914      	bls.n	8003a4e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00d      	beq.n	8003a4e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a36:	f043 0210 	orr.w	r2, r3, #16
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a42:	f043 0201 	orr.w	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e007      	b.n	8003a5e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1dc      	bne.n	8003a16 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <LL_ADC_SetCommonPathInternalCh>:
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
 8003a6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	609a      	str	r2, [r3, #8]
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <LL_ADC_GetCommonPathInternalCh>:
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <LL_ADC_SetOffset>:
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	3360      	adds	r3, #96	@ 0x60
 8003aba:	461a      	mov	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	4b08      	ldr	r3, [pc, #32]	@ (8003aec <LL_ADC_SetOffset+0x44>)
 8003aca:	4013      	ands	r3, r2
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	601a      	str	r2, [r3, #0]
}
 8003ae0:	bf00      	nop
 8003ae2:	371c      	adds	r7, #28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	03fff000 	.word	0x03fff000

08003af0 <LL_ADC_GetOffsetChannel>:
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3360      	adds	r3, #96	@ 0x60
 8003afe:	461a      	mov	r2, r3
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <LL_ADC_SetOffsetState>:
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	3360      	adds	r3, #96	@ 0x60
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	431a      	orrs	r2, r3
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	601a      	str	r2, [r3, #0]
}
 8003b46:	bf00      	nop
 8003b48:	371c      	adds	r7, #28
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <LL_ADC_SetOffsetSign>:
{
 8003b52:	b480      	push	{r7}
 8003b54:	b087      	sub	sp, #28
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	60f8      	str	r0, [r7, #12]
 8003b5a:	60b9      	str	r1, [r7, #8]
 8003b5c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3360      	adds	r3, #96	@ 0x60
 8003b62:	461a      	mov	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	431a      	orrs	r2, r3
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	601a      	str	r2, [r3, #0]
}
 8003b7c:	bf00      	nop
 8003b7e:	371c      	adds	r7, #28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <LL_ADC_SetOffsetSaturation>:
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	3360      	adds	r3, #96	@ 0x60
 8003b98:	461a      	mov	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	431a      	orrs	r2, r3
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	601a      	str	r2, [r3, #0]
}
 8003bb2:	bf00      	nop
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	615a      	str	r2, [r3, #20]
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <LL_ADC_INJ_GetTrigAuto>:
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <LL_ADC_SetChannelSamplingTime>:
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	3314      	adds	r3, #20
 8003c10:	461a      	mov	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	0e5b      	lsrs	r3, r3, #25
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	4413      	add	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	0d1b      	lsrs	r3, r3, #20
 8003c28:	f003 031f 	and.w	r3, r3, #31
 8003c2c:	2107      	movs	r1, #7
 8003c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c32:	43db      	mvns	r3, r3
 8003c34:	401a      	ands	r2, r3
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	0d1b      	lsrs	r3, r3, #20
 8003c3a:	f003 031f 	and.w	r3, r3, #31
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	fa01 f303 	lsl.w	r3, r1, r3
 8003c44:	431a      	orrs	r2, r3
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	601a      	str	r2, [r3, #0]
}
 8003c4a:	bf00      	nop
 8003c4c:	371c      	adds	r7, #28
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
	...

08003c58 <LL_ADC_SetChannelSingleDiff>:
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c70:	43db      	mvns	r3, r3
 8003c72:	401a      	ands	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f003 0318 	and.w	r3, r3, #24
 8003c7a:	4908      	ldr	r1, [pc, #32]	@ (8003c9c <LL_ADC_SetChannelSingleDiff+0x44>)
 8003c7c:	40d9      	lsrs	r1, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	400b      	ands	r3, r1
 8003c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c86:	431a      	orrs	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8003c8e:	bf00      	nop
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	0007ffff 	.word	0x0007ffff

08003ca0 <LL_ADC_GetMultimode>:
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 031f 	and.w	r3, r3, #31
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <LL_ADC_IsEnabled>:
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <LL_ADC_IsEnabled+0x18>
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <LL_ADC_IsEnabled+0x1a>
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <LL_ADC_StartCalibration>:
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003cf4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	609a      	str	r2, [r3, #8]
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <LL_ADC_IsCalibrationOnGoing>:
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d28:	d101      	bne.n	8003d2e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <LL_ADC_REG_IsConversionOngoing>:
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d101      	bne.n	8003d54 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d50:	2301      	movs	r3, #1
 8003d52:	e000      	b.n	8003d56 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <LL_ADC_INJ_StartConversion>:
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d72:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d76:	f043 0208 	orr.w	r2, r3, #8
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	609a      	str	r2, [r3, #8]
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <LL_ADC_INJ_IsConversionOngoing>:
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d101      	bne.n	8003da2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e000      	b.n	8003da4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d101      	bne.n	8003dcc <HAL_ADCEx_Calibration_Start+0x1c>
 8003dc8:	2302      	movs	r3, #2
 8003dca:	e04d      	b.n	8003e68 <HAL_ADCEx_Calibration_Start+0xb8>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff fde7 	bl	80039a8 <ADC_Disable>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d136      	bne.n	8003e52 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003dec:	f023 0302 	bic.w	r3, r3, #2
 8003df0:	f043 0202 	orr.w	r2, r3, #2
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6839      	ldr	r1, [r7, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff ff6f 	bl	8003ce2 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e04:	e014      	b.n	8003e30 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4a18      	ldr	r2, [pc, #96]	@ (8003e70 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d90d      	bls.n	8003e30 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e18:	f023 0312 	bic.w	r3, r3, #18
 8003e1c:	f043 0210 	orr.w	r2, r3, #16
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e01b      	b.n	8003e68 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff ff6d 	bl	8003d14 <LL_ADC_IsCalibrationOnGoing>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e2      	bne.n	8003e06 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e44:	f023 0303 	bic.w	r3, r3, #3
 8003e48:	f043 0201 	orr.w	r2, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e50:	e005      	b.n	8003e5e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e56:	f043 0210 	orr.w	r2, r3, #16
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	0004de01 	.word	0x0004de01

08003e74 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e7c:	4853      	ldr	r0, [pc, #332]	@ (8003fcc <HAL_ADCEx_InjectedStart+0x158>)
 8003e7e:	f7ff ff0f 	bl	8003ca0 <LL_ADC_GetMultimode>
 8003e82:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff ff7e 	bl	8003d8a <LL_ADC_INJ_IsConversionOngoing>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 8003e94:	2302      	movs	r3, #2
 8003e96:	e094      	b.n	8003fc2 <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ea2:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eaa:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10a      	bne.n	8003ec8 <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d107      	bne.n	8003ec8 <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ebc:	f043 0220 	orr.w	r2, r3, #32
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e07c      	b.n	8003fc2 <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d101      	bne.n	8003ed6 <HAL_ADCEx_InjectedStart+0x62>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e075      	b.n	8003fc2 <HAL_ADCEx_InjectedStart+0x14e>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff fcdc 	bl	800389c <ADC_Enable>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d164      	bne.n	8003fb8 <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d006      	beq.n	8003f08 <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003efe:	f023 0208 	bic.w	r2, r3, #8
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	661a      	str	r2, [r3, #96]	@ 0x60
 8003f06:	e002      	b.n	8003f0e <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f12:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003f16:	f023 0301 	bic.w	r3, r3, #1
 8003f1a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a2a      	ldr	r2, [pc, #168]	@ (8003fd0 <HAL_ADCEx_InjectedStart+0x15c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d002      	beq.n	8003f32 <HAL_ADCEx_InjectedStart+0xbe>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	e001      	b.n	8003f36 <HAL_ADCEx_InjectedStart+0xc2>
 8003f32:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6812      	ldr	r2, [r2, #0]
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d002      	beq.n	8003f44 <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d105      	bne.n	8003f50 <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f48:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2260      	movs	r2, #96	@ 0x60
 8003f56:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a1a      	ldr	r2, [pc, #104]	@ (8003fd0 <HAL_ADCEx_InjectedStart+0x15c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d002      	beq.n	8003f70 <HAL_ADCEx_InjectedStart+0xfc>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	e001      	b.n	8003f74 <HAL_ADCEx_InjectedStart+0x100>
 8003f70:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6812      	ldr	r2, [r2, #0]
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d008      	beq.n	8003f8e <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d005      	beq.n	8003f8e <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	2b06      	cmp	r3, #6
 8003f86:	d002      	beq.n	8003f8e <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2b07      	cmp	r3, #7
 8003f8c:	d10d      	bne.n	8003faa <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff fe26 	bl	8003be4 <LL_ADC_INJ_GetTrigAuto>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d110      	bne.n	8003fc0 <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff fedd 	bl	8003d62 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003fa8:	e00a      	b.n	8003fc0 <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003fb6:	e003      	b.n	8003fc0 <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	50000300 	.word	0x50000300
 8003fd0:	50000100 	.word	0x50000100

08003fd4 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fdc:	486e      	ldr	r0, [pc, #440]	@ (8004198 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 8003fde:	f7ff fe5f 	bl	8003ca0 <LL_ADC_GetMultimode>
 8003fe2:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff fece 	bl	8003d8a <LL_ADC_INJ_IsConversionOngoing>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	e0ca      	b.n	800418e <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004002:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800400a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10a      	bne.n	8004028 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d107      	bne.n	8004028 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800401c:	f043 0220 	orr.w	r2, r3, #32
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e0b2      	b.n	800418e <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800402e:	2b01      	cmp	r3, #1
 8004030:	d101      	bne.n	8004036 <HAL_ADCEx_InjectedStart_IT+0x62>
 8004032:	2302      	movs	r3, #2
 8004034:	e0ab      	b.n	800418e <HAL_ADCEx_InjectedStart_IT+0x1ba>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7ff fc2c 	bl	800389c <ADC_Enable>
 8004044:	4603      	mov	r3, r0
 8004046:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004048:	7bfb      	ldrb	r3, [r7, #15]
 800404a:	2b00      	cmp	r3, #0
 800404c:	f040 809a 	bne.w	8004184 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004058:	2b00      	cmp	r3, #0
 800405a:	d006      	beq.n	800406a <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004060:	f023 0208 	bic.w	r2, r3, #8
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	661a      	str	r2, [r3, #96]	@ 0x60
 8004068:	e002      	b.n	8004070 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004074:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004078:	f023 0301 	bic.w	r3, r3, #1
 800407c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a44      	ldr	r2, [pc, #272]	@ (800419c <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d002      	beq.n	8004094 <HAL_ADCEx_InjectedStart_IT+0xc0>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	e001      	b.n	8004098 <HAL_ADCEx_InjectedStart_IT+0xc4>
 8004094:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6812      	ldr	r2, [r2, #0]
 800409c:	4293      	cmp	r3, r2
 800409e:	d002      	beq.n	80040a6 <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d105      	bne.n	80040b2 <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040aa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2260      	movs	r2, #96	@ 0x60
 80040b8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d007      	beq.n	80040e0 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040de:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d110      	bne.n	800410a <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0220 	bic.w	r2, r2, #32
 80040f6:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004106:	605a      	str	r2, [r3, #4]
          break;
 8004108:	e010      	b.n	800412c <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004118:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f042 0220 	orr.w	r2, r2, #32
 8004128:	605a      	str	r2, [r3, #4]
          break;
 800412a:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a1a      	ldr	r2, [pc, #104]	@ (800419c <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d002      	beq.n	800413c <HAL_ADCEx_InjectedStart_IT+0x168>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	e001      	b.n	8004140 <HAL_ADCEx_InjectedStart_IT+0x16c>
 800413c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6812      	ldr	r2, [r2, #0]
 8004144:	4293      	cmp	r3, r2
 8004146:	d008      	beq.n	800415a <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d005      	beq.n	800415a <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2b06      	cmp	r3, #6
 8004152:	d002      	beq.n	800415a <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	2b07      	cmp	r3, #7
 8004158:	d10d      	bne.n	8004176 <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff fd40 	bl	8003be4 <LL_ADC_INJ_GetTrigAuto>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d110      	bne.n	800418c <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f7ff fdf7 	bl	8003d62 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004174:	e00a      	b.n	800418c <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800417a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004182:	e003      	b.n	800418c <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 800418c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800418e:	4618      	mov	r0, r3
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	50000300 	.word	0x50000300
 800419c:	50000100 	.word	0x50000100

080041a0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b0b6      	sub	sp, #216	@ 0xd8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8004200:	2300      	movs	r3, #0
 8004202:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004210:	2b01      	cmp	r3, #1
 8004212:	d102      	bne.n	800421a <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8004214:	2302      	movs	r3, #2
 8004216:	f000 bcb5 	b.w	8004b84 <HAL_ADCEx_InjectedConfigChannel+0x994>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800422e:	2b01      	cmp	r3, #1
 8004230:	d130      	bne.n	8004294 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2b09      	cmp	r3, #9
 8004238:	d179      	bne.n	800432e <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423e:	2b00      	cmp	r3, #0
 8004240:	d010      	beq.n	8004264 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	0e9b      	lsrs	r3, r3, #26
 8004248:	025b      	lsls	r3, r3, #9
 800424a:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004252:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8004256:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800425c:	4313      	orrs	r3, r2
 800425e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004262:	e007      	b.n	8004274 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	0e9b      	lsrs	r3, r3, #26
 800426a:	025b      	lsls	r3, r3, #9
 800426c:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 8004270:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800427a:	4b84      	ldr	r3, [pc, #528]	@ (800448c <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 800427c:	4013      	ands	r3, r2
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6812      	ldr	r2, [r2, #0]
 8004282:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004286:	430b      	orrs	r3, r1
 8004288:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004290:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004292:	e04c      	b.n	800432e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004298:	2b00      	cmp	r3, #0
 800429a:	d11d      	bne.n	80042d8 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	6a1a      	ldr	r2, [r3, #32]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00d      	beq.n	80042ce <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042bc:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80042c0:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042cc:	e004      	b.n	80042d8 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	0e9b      	lsrs	r3, r3, #26
 80042de:	f003 021f 	and.w	r2, r3, #31
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f003 031f 	and.w	r3, r3, #31
 80042ea:	fa02 f303 	lsl.w	r3, r2, r3
 80042ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042fc:	1e5a      	subs	r2, r3, #1
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004306:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10a      	bne.n	800432e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800431e:	4b5b      	ldr	r3, [pc, #364]	@ (800448c <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004320:	4013      	ands	r3, r2
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6812      	ldr	r2, [r2, #0]
 800432a:	430b      	orrs	r3, r1
 800432c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff fd29 	bl	8003d8a <LL_ADC_INJ_IsConversionOngoing>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d124      	bne.n	8004388 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004344:	2b00      	cmp	r3, #0
 8004346:	d112      	bne.n	800436e <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8004358:	055a      	lsls	r2, r3, #21
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004360:	051b      	lsls	r3, r3, #20
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	60da      	str	r2, [r3, #12]
 800436c:	e00c      	b.n	8004388 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800437e:	055a      	lsls	r2, r3, #21
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4618      	mov	r0, r3
 800438e:	f7ff fcd5 	bl	8003d3c <LL_ADC_REG_IsConversionOngoing>
 8004392:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f7ff fcf5 	bl	8003d8a <LL_ADC_INJ_IsConversionOngoing>
 80043a0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80043a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f040 822e 	bne.w	800480a <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80043ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f040 8229 	bne.w	800480a <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d116      	bne.n	80043f6 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d108      	bne.n	80043e4 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80043e0:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80043e2:	e01f      	b.n	8004424 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80043f2:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80043f4:	e016      	b.n	8004424 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d109      	bne.n	8004414 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004404:	f043 0220 	orr.w	r2, r3, #32
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004412:	e007      	b.n	8004424 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8004422:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800442a:	2b01      	cmp	r3, #1
 800442c:	d110      	bne.n	8004450 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004440:	430b      	orrs	r3, r1
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f042 0202 	orr.w	r2, r2, #2
 800444c:	611a      	str	r2, [r3, #16]
 800444e:	e007      	b.n	8004460 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0202 	bic.w	r2, r2, #2
 800445e:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004468:	d112      	bne.n	8004490 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2200      	movs	r2, #0
 8004474:	4619      	mov	r1, r3
 8004476:	f7ff fbc3 	bl	8003c00 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff fb9b 	bl	8003bbe <LL_ADC_SetSamplingTimeCommonConfig>
 8004488:	e011      	b.n	80044ae <HAL_ADCEx_InjectedConfigChannel+0x2be>
 800448a:	bf00      	nop
 800448c:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 800449c:	461a      	mov	r2, r3
 800449e:	f7ff fbaf 	bl	8003c00 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2100      	movs	r1, #0
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff fb88 	bl	8003bbe <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	695a      	ldr	r2, [r3, #20]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	08db      	lsrs	r3, r3, #3
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	d022      	beq.n	8004516 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6818      	ldr	r0, [r3, #0]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	6919      	ldr	r1, [r3, #16]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044e0:	f7ff fae2 	bl	8003aa8 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	6919      	ldr	r1, [r3, #16]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	461a      	mov	r2, r3
 80044f2:	f7ff fb2e 	bl	8003b52 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004502:	2b01      	cmp	r3, #1
 8004504:	d102      	bne.n	800450c <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8004506:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800450a:	e000      	b.n	800450e <HAL_ADCEx_InjectedConfigChannel+0x31e>
 800450c:	2300      	movs	r3, #0
 800450e:	461a      	mov	r2, r3
 8004510:	f7ff fb3a 	bl	8003b88 <LL_ADC_SetOffsetSaturation>
 8004514:	e179      	b.n	800480a <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2100      	movs	r1, #0
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff fae7 	bl	8003af0 <LL_ADC_GetOffsetChannel>
 8004522:	4603      	mov	r3, r0
 8004524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10a      	bne.n	8004542 <HAL_ADCEx_InjectedConfigChannel+0x352>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2100      	movs	r1, #0
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff fadc 	bl	8003af0 <LL_ADC_GetOffsetChannel>
 8004538:	4603      	mov	r3, r0
 800453a:	0e9b      	lsrs	r3, r3, #26
 800453c:	f003 021f 	and.w	r2, r3, #31
 8004540:	e01e      	b.n	8004580 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2100      	movs	r1, #0
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff fad1 	bl	8003af0 <LL_ADC_GetOffsetChannel>
 800454e:	4603      	mov	r3, r0
 8004550:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004554:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004558:	fa93 f3a3 	rbit	r3, r3
 800455c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004560:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004564:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004568:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8004570:	2320      	movs	r3, #32
 8004572:	e004      	b.n	800457e <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8004574:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004578:	fab3 f383 	clz	r3, r3
 800457c:	b2db      	uxtb	r3, r3
 800457e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004588:	2b00      	cmp	r3, #0
 800458a:	d105      	bne.n	8004598 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	0e9b      	lsrs	r3, r3, #26
 8004592:	f003 031f 	and.w	r3, r3, #31
 8004596:	e018      	b.n	80045ca <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80045a4:	fa93 f3a3 	rbit	r3, r3
 80045a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80045ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80045b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80045b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 80045bc:	2320      	movs	r3, #32
 80045be:	e004      	b.n	80045ca <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 80045c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80045c4:	fab3 f383 	clz	r3, r3
 80045c8:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d106      	bne.n	80045dc <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2200      	movs	r2, #0
 80045d4:	2100      	movs	r1, #0
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff faa0 	bl	8003b1c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2101      	movs	r1, #1
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7ff fa84 	bl	8003af0 <LL_ADC_GetOffsetChannel>
 80045e8:	4603      	mov	r3, r0
 80045ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10a      	bne.n	8004608 <HAL_ADCEx_InjectedConfigChannel+0x418>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2101      	movs	r1, #1
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff fa79 	bl	8003af0 <LL_ADC_GetOffsetChannel>
 80045fe:	4603      	mov	r3, r0
 8004600:	0e9b      	lsrs	r3, r3, #26
 8004602:	f003 021f 	and.w	r2, r3, #31
 8004606:	e01e      	b.n	8004646 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2101      	movs	r1, #1
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff fa6e 	bl	8003af0 <LL_ADC_GetOffsetChannel>
 8004614:	4603      	mov	r3, r0
 8004616:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800461e:	fa93 f3a3 	rbit	r3, r3
 8004622:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004626:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800462a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800462e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8004636:	2320      	movs	r3, #32
 8004638:	e004      	b.n	8004644 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 800463a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800463e:	fab3 f383 	clz	r3, r3
 8004642:	b2db      	uxtb	r3, r3
 8004644:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800464e:	2b00      	cmp	r3, #0
 8004650:	d105      	bne.n	800465e <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	0e9b      	lsrs	r3, r3, #26
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	e018      	b.n	8004690 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004666:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800466a:	fa93 f3a3 	rbit	r3, r3
 800466e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004672:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004676:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800467a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8004682:	2320      	movs	r3, #32
 8004684:	e004      	b.n	8004690 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8004686:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800468a:	fab3 f383 	clz	r3, r3
 800468e:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004690:	429a      	cmp	r2, r3
 8004692:	d106      	bne.n	80046a2 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2200      	movs	r2, #0
 800469a:	2101      	movs	r1, #1
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff fa3d 	bl	8003b1c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2102      	movs	r1, #2
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff fa21 	bl	8003af0 <LL_ADC_GetOffsetChannel>
 80046ae:	4603      	mov	r3, r0
 80046b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10a      	bne.n	80046ce <HAL_ADCEx_InjectedConfigChannel+0x4de>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2102      	movs	r1, #2
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff fa16 	bl	8003af0 <LL_ADC_GetOffsetChannel>
 80046c4:	4603      	mov	r3, r0
 80046c6:	0e9b      	lsrs	r3, r3, #26
 80046c8:	f003 021f 	and.w	r2, r3, #31
 80046cc:	e01e      	b.n	800470c <HAL_ADCEx_InjectedConfigChannel+0x51c>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2102      	movs	r1, #2
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff fa0b 	bl	8003af0 <LL_ADC_GetOffsetChannel>
 80046da:	4603      	mov	r3, r0
 80046dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80046e4:	fa93 f3a3 	rbit	r3, r3
 80046e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80046ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80046f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 80046fc:	2320      	movs	r3, #32
 80046fe:	e004      	b.n	800470a <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8004700:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004704:	fab3 f383 	clz	r3, r3
 8004708:	b2db      	uxtb	r3, r3
 800470a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004714:	2b00      	cmp	r3, #0
 8004716:	d105      	bne.n	8004724 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	0e9b      	lsrs	r3, r3, #26
 800471e:	f003 031f 	and.w	r3, r3, #31
 8004722:	e014      	b.n	800474e <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800472c:	fa93 f3a3 	rbit	r3, r3
 8004730:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004732:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004734:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004738:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8004740:	2320      	movs	r3, #32
 8004742:	e004      	b.n	800474e <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004744:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004748:	fab3 f383 	clz	r3, r3
 800474c:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800474e:	429a      	cmp	r2, r3
 8004750:	d106      	bne.n	8004760 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2200      	movs	r2, #0
 8004758:	2102      	movs	r1, #2
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff f9de 	bl	8003b1c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2103      	movs	r1, #3
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff f9c2 	bl	8003af0 <LL_ADC_GetOffsetChannel>
 800476c:	4603      	mov	r3, r0
 800476e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10a      	bne.n	800478c <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2103      	movs	r1, #3
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff f9b7 	bl	8003af0 <LL_ADC_GetOffsetChannel>
 8004782:	4603      	mov	r3, r0
 8004784:	0e9b      	lsrs	r3, r3, #26
 8004786:	f003 021f 	and.w	r2, r3, #31
 800478a:	e017      	b.n	80047bc <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2103      	movs	r1, #3
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff f9ac 	bl	8003af0 <LL_ADC_GetOffsetChannel>
 8004798:	4603      	mov	r3, r0
 800479a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800479e:	fa93 f3a3 	rbit	r3, r3
 80047a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80047a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047a6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80047a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 80047ae:	2320      	movs	r3, #32
 80047b0:	e003      	b.n	80047ba <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 80047b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047b4:	fab3 f383 	clz	r3, r3
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d105      	bne.n	80047d4 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	0e9b      	lsrs	r3, r3, #26
 80047ce:	f003 031f 	and.w	r3, r3, #31
 80047d2:	e011      	b.n	80047f8 <HAL_ADCEx_InjectedConfigChannel+0x608>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047dc:	fa93 f3a3 	rbit	r3, r3
 80047e0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80047e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047e4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80047e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 80047ec:	2320      	movs	r3, #32
 80047ee:	e003      	b.n	80047f8 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 80047f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047f2:	fab3 f383 	clz	r3, r3
 80047f6:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d106      	bne.n	800480a <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2200      	movs	r2, #0
 8004802:	2103      	movs	r1, #3
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff f989 	bl	8003b1c <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f7ff fa54 	bl	8003cbc <LL_ADC_IsEnabled>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	f040 8140 	bne.w	8004a9c <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	6819      	ldr	r1, [r3, #0]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	461a      	mov	r2, r3
 800482a:	f7ff fa15 	bl	8003c58 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	4a8f      	ldr	r2, [pc, #572]	@ (8004a70 <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8004834:	4293      	cmp	r3, r2
 8004836:	f040 8131 	bne.w	8004a9c <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10b      	bne.n	8004862 <HAL_ADCEx_InjectedConfigChannel+0x672>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	0e9b      	lsrs	r3, r3, #26
 8004850:	3301      	adds	r3, #1
 8004852:	f003 031f 	and.w	r3, r3, #31
 8004856:	2b09      	cmp	r3, #9
 8004858:	bf94      	ite	ls
 800485a:	2301      	movls	r3, #1
 800485c:	2300      	movhi	r3, #0
 800485e:	b2db      	uxtb	r3, r3
 8004860:	e019      	b.n	8004896 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004868:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800486a:	fa93 f3a3 	rbit	r3, r3
 800486e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004870:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004872:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004874:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 800487a:	2320      	movs	r3, #32
 800487c:	e003      	b.n	8004886 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 800487e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004880:	fab3 f383 	clz	r3, r3
 8004884:	b2db      	uxtb	r3, r3
 8004886:	3301      	adds	r3, #1
 8004888:	f003 031f 	and.w	r3, r3, #31
 800488c:	2b09      	cmp	r3, #9
 800488e:	bf94      	ite	ls
 8004890:	2301      	movls	r3, #1
 8004892:	2300      	movhi	r3, #0
 8004894:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004896:	2b00      	cmp	r3, #0
 8004898:	d079      	beq.n	800498e <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d107      	bne.n	80048b6 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	0e9b      	lsrs	r3, r3, #26
 80048ac:	3301      	adds	r3, #1
 80048ae:	069b      	lsls	r3, r3, #26
 80048b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048b4:	e015      	b.n	80048e2 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048be:	fa93 f3a3 	rbit	r3, r3
 80048c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80048c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048c6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80048c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 80048ce:	2320      	movs	r3, #32
 80048d0:	e003      	b.n	80048da <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 80048d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048d4:	fab3 f383 	clz	r3, r3
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	3301      	adds	r3, #1
 80048dc:	069b      	lsls	r3, r3, #26
 80048de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d109      	bne.n	8004902 <HAL_ADCEx_InjectedConfigChannel+0x712>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	0e9b      	lsrs	r3, r3, #26
 80048f4:	3301      	adds	r3, #1
 80048f6:	f003 031f 	and.w	r3, r3, #31
 80048fa:	2101      	movs	r1, #1
 80048fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004900:	e017      	b.n	8004932 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004908:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800490a:	fa93 f3a3 	rbit	r3, r3
 800490e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004912:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004914:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 800491a:	2320      	movs	r3, #32
 800491c:	e003      	b.n	8004926 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 800491e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004920:	fab3 f383 	clz	r3, r3
 8004924:	b2db      	uxtb	r3, r3
 8004926:	3301      	adds	r3, #1
 8004928:	f003 031f 	and.w	r3, r3, #31
 800492c:	2101      	movs	r1, #1
 800492e:	fa01 f303 	lsl.w	r3, r1, r3
 8004932:	ea42 0103 	orr.w	r1, r2, r3
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10a      	bne.n	8004958 <HAL_ADCEx_InjectedConfigChannel+0x768>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	0e9b      	lsrs	r3, r3, #26
 8004948:	3301      	adds	r3, #1
 800494a:	f003 021f 	and.w	r2, r3, #31
 800494e:	4613      	mov	r3, r2
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	4413      	add	r3, r2
 8004954:	051b      	lsls	r3, r3, #20
 8004956:	e018      	b.n	800498a <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004960:	fa93 f3a3 	rbit	r3, r3
 8004964:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004968:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800496a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8004970:	2320      	movs	r3, #32
 8004972:	e003      	b.n	800497c <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8004974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004976:	fab3 f383 	clz	r3, r3
 800497a:	b2db      	uxtb	r3, r3
 800497c:	3301      	adds	r3, #1
 800497e:	f003 021f 	and.w	r2, r3, #31
 8004982:	4613      	mov	r3, r2
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	4413      	add	r3, r2
 8004988:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800498a:	430b      	orrs	r3, r1
 800498c:	e081      	b.n	8004a92 <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004996:	2b00      	cmp	r3, #0
 8004998:	d107      	bne.n	80049aa <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	0e9b      	lsrs	r3, r3, #26
 80049a0:	3301      	adds	r3, #1
 80049a2:	069b      	lsls	r3, r3, #26
 80049a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80049a8:	e015      	b.n	80049d6 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b2:	fa93 f3a3 	rbit	r3, r3
 80049b6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80049b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80049bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 80049c2:	2320      	movs	r3, #32
 80049c4:	e003      	b.n	80049ce <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 80049c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049c8:	fab3 f383 	clz	r3, r3
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	3301      	adds	r3, #1
 80049d0:	069b      	lsls	r3, r3, #26
 80049d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d109      	bne.n	80049f6 <HAL_ADCEx_InjectedConfigChannel+0x806>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	0e9b      	lsrs	r3, r3, #26
 80049e8:	3301      	adds	r3, #1
 80049ea:	f003 031f 	and.w	r3, r3, #31
 80049ee:	2101      	movs	r1, #1
 80049f0:	fa01 f303 	lsl.w	r3, r1, r3
 80049f4:	e017      	b.n	8004a26 <HAL_ADCEx_InjectedConfigChannel+0x836>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	fa93 f3a3 	rbit	r3, r3
 8004a02:	61bb      	str	r3, [r7, #24]
  return result;
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8004a0e:	2320      	movs	r3, #32
 8004a10:	e003      	b.n	8004a1a <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8004a12:	6a3b      	ldr	r3, [r7, #32]
 8004a14:	fab3 f383 	clz	r3, r3
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	f003 031f 	and.w	r3, r3, #31
 8004a20:	2101      	movs	r1, #1
 8004a22:	fa01 f303 	lsl.w	r3, r1, r3
 8004a26:	ea42 0103 	orr.w	r1, r2, r3
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10d      	bne.n	8004a52 <HAL_ADCEx_InjectedConfigChannel+0x862>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	0e9b      	lsrs	r3, r3, #26
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	f003 021f 	and.w	r2, r3, #31
 8004a42:	4613      	mov	r3, r2
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	4413      	add	r3, r2
 8004a48:	3b1e      	subs	r3, #30
 8004a4a:	051b      	lsls	r3, r3, #20
 8004a4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a50:	e01e      	b.n	8004a90 <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	fa93 f3a3 	rbit	r3, r3
 8004a5e:	60fb      	str	r3, [r7, #12]
  return result;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d104      	bne.n	8004a74 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 8004a6a:	2320      	movs	r3, #32
 8004a6c:	e006      	b.n	8004a7c <HAL_ADCEx_InjectedConfigChannel+0x88c>
 8004a6e:	bf00      	nop
 8004a70:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	fab3 f383 	clz	r3, r3
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	f003 021f 	and.w	r2, r3, #31
 8004a82:	4613      	mov	r3, r2
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	4413      	add	r3, r2
 8004a88:	3b1e      	subs	r3, #30
 8004a8a:	051b      	lsls	r3, r3, #20
 8004a8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a90:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a96:	4619      	mov	r1, r3
 8004a98:	f7ff f8b2 	bl	8003c00 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	4b3a      	ldr	r3, [pc, #232]	@ (8004b8c <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d067      	beq.n	8004b78 <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004aa8:	4839      	ldr	r0, [pc, #228]	@ (8004b90 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004aaa:	f7fe ffef 	bl	8003a8c <LL_ADC_GetCommonPathInternalCh>
 8004aae:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a37      	ldr	r2, [pc, #220]	@ (8004b94 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d004      	beq.n	8004ac6 <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a35      	ldr	r2, [pc, #212]	@ (8004b98 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d127      	bne.n	8004b16 <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ac6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004aca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d121      	bne.n	8004b16 <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ada:	d14d      	bne.n	8004b78 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004adc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ae0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	482a      	ldr	r0, [pc, #168]	@ (8004b90 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004ae8:	f7fe ffbd 	bl	8003a66 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004aec:	4b2b      	ldr	r3, [pc, #172]	@ (8004b9c <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	099b      	lsrs	r3, r3, #6
 8004af2:	4a2b      	ldr	r2, [pc, #172]	@ (8004ba0 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8004af4:	fba2 2303 	umull	r2, r3, r2, r3
 8004af8:	099a      	lsrs	r2, r3, #6
 8004afa:	4613      	mov	r3, r2
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	4413      	add	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004b04:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004b06:	e002      	b.n	8004b0e <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1f9      	bne.n	8004b08 <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b14:	e030      	b.n	8004b78 <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a22      	ldr	r2, [pc, #136]	@ (8004ba4 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d113      	bne.n	8004b48 <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10d      	bne.n	8004b48 <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a1d      	ldr	r2, [pc, #116]	@ (8004ba8 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d020      	beq.n	8004b78 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4813      	ldr	r0, [pc, #76]	@ (8004b90 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004b42:	f7fe ff90 	bl	8003a66 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b46:	e017      	b.n	8004b78 <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a17      	ldr	r2, [pc, #92]	@ (8004bac <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d112      	bne.n	8004b78 <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10c      	bne.n	8004b78 <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a11      	ldr	r2, [pc, #68]	@ (8004ba8 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d007      	beq.n	8004b78 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b6c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b70:	4619      	mov	r1, r3
 8004b72:	4807      	ldr	r0, [pc, #28]	@ (8004b90 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004b74:	f7fe ff77 	bl	8003a66 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b80:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	37d8      	adds	r7, #216	@ 0xd8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	80080000 	.word	0x80080000
 8004b90:	50000300 	.word	0x50000300
 8004b94:	c3210000 	.word	0xc3210000
 8004b98:	90c00010 	.word	0x90c00010
 8004b9c:	20000000 	.word	0x20000000
 8004ba0:	053e2d63 	.word	0x053e2d63
 8004ba4:	c7520000 	.word	0xc7520000
 8004ba8:	50000100 	.word	0x50000100
 8004bac:	cb840000 	.word	0xcb840000

08004bb0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004bb0:	b590      	push	{r4, r7, lr}
 8004bb2:	b0a1      	sub	sp, #132	@ 0x84
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d101      	bne.n	8004bce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004bca:	2302      	movs	r3, #2
 8004bcc:	e08b      	b.n	8004ce6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004bda:	2300      	movs	r3, #0
 8004bdc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004be6:	d102      	bne.n	8004bee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004be8:	4b41      	ldr	r3, [pc, #260]	@ (8004cf0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004bea:	60bb      	str	r3, [r7, #8]
 8004bec:	e001      	b.n	8004bf2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10b      	bne.n	8004c10 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bfc:	f043 0220 	orr.w	r2, r3, #32
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e06a      	b.n	8004ce6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff f892 	bl	8003d3c <LL_ADC_REG_IsConversionOngoing>
 8004c18:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff f88c 	bl	8003d3c <LL_ADC_REG_IsConversionOngoing>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d14c      	bne.n	8004cc4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004c2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d149      	bne.n	8004cc4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004c30:	4b30      	ldr	r3, [pc, #192]	@ (8004cf4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004c32:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d028      	beq.n	8004c8e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004c3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	6859      	ldr	r1, [r3, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004c4e:	035b      	lsls	r3, r3, #13
 8004c50:	430b      	orrs	r3, r1
 8004c52:	431a      	orrs	r2, r3
 8004c54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c56:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c58:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004c5c:	f7ff f82e 	bl	8003cbc <LL_ADC_IsEnabled>
 8004c60:	4604      	mov	r4, r0
 8004c62:	4823      	ldr	r0, [pc, #140]	@ (8004cf0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004c64:	f7ff f82a 	bl	8003cbc <LL_ADC_IsEnabled>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	4323      	orrs	r3, r4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d133      	bne.n	8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004c70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004c78:	f023 030f 	bic.w	r3, r3, #15
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	6811      	ldr	r1, [r2, #0]
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	6892      	ldr	r2, [r2, #8]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	431a      	orrs	r2, r3
 8004c88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c8a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c8c:	e024      	b.n	8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004c8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c98:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c9a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004c9e:	f7ff f80d 	bl	8003cbc <LL_ADC_IsEnabled>
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	4812      	ldr	r0, [pc, #72]	@ (8004cf0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004ca6:	f7ff f809 	bl	8003cbc <LL_ADC_IsEnabled>
 8004caa:	4603      	mov	r3, r0
 8004cac:	4323      	orrs	r3, r4
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d112      	bne.n	8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004cb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004cba:	f023 030f 	bic.w	r3, r3, #15
 8004cbe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004cc0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004cc2:	e009      	b.n	8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc8:	f043 0220 	orr.w	r2, r3, #32
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004cd6:	e000      	b.n	8004cda <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004cd8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004ce2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3784      	adds	r7, #132	@ 0x84
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd90      	pop	{r4, r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	50000100 	.word	0x50000100
 8004cf4:	50000300 	.word	0x50000300

08004cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d08:	4b0c      	ldr	r3, [pc, #48]	@ (8004d3c <__NVIC_SetPriorityGrouping+0x44>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d14:	4013      	ands	r3, r2
 8004d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004d24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d2a:	4a04      	ldr	r2, [pc, #16]	@ (8004d3c <__NVIC_SetPriorityGrouping+0x44>)
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	60d3      	str	r3, [r2, #12]
}
 8004d30:	bf00      	nop
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	e000ed00 	.word	0xe000ed00

08004d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d44:	4b04      	ldr	r3, [pc, #16]	@ (8004d58 <__NVIC_GetPriorityGrouping+0x18>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	0a1b      	lsrs	r3, r3, #8
 8004d4a:	f003 0307 	and.w	r3, r3, #7
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	e000ed00 	.word	0xe000ed00

08004d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	4603      	mov	r3, r0
 8004d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	db0b      	blt.n	8004d86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d6e:	79fb      	ldrb	r3, [r7, #7]
 8004d70:	f003 021f 	and.w	r2, r3, #31
 8004d74:	4907      	ldr	r1, [pc, #28]	@ (8004d94 <__NVIC_EnableIRQ+0x38>)
 8004d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d7a:	095b      	lsrs	r3, r3, #5
 8004d7c:	2001      	movs	r0, #1
 8004d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8004d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	e000e100 	.word	0xe000e100

08004d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	4603      	mov	r3, r0
 8004da0:	6039      	str	r1, [r7, #0]
 8004da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	db0a      	blt.n	8004dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	490c      	ldr	r1, [pc, #48]	@ (8004de4 <__NVIC_SetPriority+0x4c>)
 8004db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db6:	0112      	lsls	r2, r2, #4
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	440b      	add	r3, r1
 8004dbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004dc0:	e00a      	b.n	8004dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	4908      	ldr	r1, [pc, #32]	@ (8004de8 <__NVIC_SetPriority+0x50>)
 8004dc8:	79fb      	ldrb	r3, [r7, #7]
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	3b04      	subs	r3, #4
 8004dd0:	0112      	lsls	r2, r2, #4
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	761a      	strb	r2, [r3, #24]
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr
 8004de4:	e000e100 	.word	0xe000e100
 8004de8:	e000ed00 	.word	0xe000ed00

08004dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b089      	sub	sp, #36	@ 0x24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f003 0307 	and.w	r3, r3, #7
 8004dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f1c3 0307 	rsb	r3, r3, #7
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	bf28      	it	cs
 8004e0a:	2304      	movcs	r3, #4
 8004e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	3304      	adds	r3, #4
 8004e12:	2b06      	cmp	r3, #6
 8004e14:	d902      	bls.n	8004e1c <NVIC_EncodePriority+0x30>
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	3b03      	subs	r3, #3
 8004e1a:	e000      	b.n	8004e1e <NVIC_EncodePriority+0x32>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e20:	f04f 32ff 	mov.w	r2, #4294967295
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	43da      	mvns	r2, r3
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	401a      	ands	r2, r3
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e34:	f04f 31ff 	mov.w	r1, #4294967295
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3e:	43d9      	mvns	r1, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e44:	4313      	orrs	r3, r2
         );
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3724      	adds	r7, #36	@ 0x24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
	...

08004e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e64:	d301      	bcc.n	8004e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e66:	2301      	movs	r3, #1
 8004e68:	e00f      	b.n	8004e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8004e94 <SysTick_Config+0x40>)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e72:	210f      	movs	r1, #15
 8004e74:	f04f 30ff 	mov.w	r0, #4294967295
 8004e78:	f7ff ff8e 	bl	8004d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e7c:	4b05      	ldr	r3, [pc, #20]	@ (8004e94 <SysTick_Config+0x40>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e82:	4b04      	ldr	r3, [pc, #16]	@ (8004e94 <SysTick_Config+0x40>)
 8004e84:	2207      	movs	r2, #7
 8004e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	e000e010 	.word	0xe000e010

08004e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7ff ff29 	bl	8004cf8 <__NVIC_SetPriorityGrouping>
}
 8004ea6:	bf00      	nop
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b086      	sub	sp, #24
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	607a      	str	r2, [r7, #4]
 8004eba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ebc:	f7ff ff40 	bl	8004d40 <__NVIC_GetPriorityGrouping>
 8004ec0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	68b9      	ldr	r1, [r7, #8]
 8004ec6:	6978      	ldr	r0, [r7, #20]
 8004ec8:	f7ff ff90 	bl	8004dec <NVIC_EncodePriority>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ed2:	4611      	mov	r1, r2
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff ff5f 	bl	8004d98 <__NVIC_SetPriority>
}
 8004eda:	bf00      	nop
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b082      	sub	sp, #8
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	4603      	mov	r3, r0
 8004eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7ff ff33 	bl	8004d5c <__NVIC_EnableIRQ>
}
 8004ef6:	bf00      	nop
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b082      	sub	sp, #8
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff ffa4 	bl	8004e54 <SysTick_Config>
 8004f0c:	4603      	mov	r3, r0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b082      	sub	sp, #8
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e014      	b.n	8004f52 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	791b      	ldrb	r3, [r3, #4]
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d105      	bne.n	8004f3e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7fc fabf 	bl	80014bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2202      	movs	r2, #2
 8004f42:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08a      	sub	sp, #40	@ 0x28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <HAL_DAC_ConfigChannel+0x1c>
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e19e      	b.n	80052ba <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	795b      	ldrb	r3, [r3, #5]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_DAC_ConfigChannel+0x2c>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e198      	b.n	80052ba <HAL_DAC_ConfigChannel+0x35e>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2202      	movs	r2, #2
 8004f92:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d17a      	bne.n	8005092 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004f9c:	f7fd fa74 	bl	8002488 <HAL_GetTick>
 8004fa0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d13d      	bne.n	8005024 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004fa8:	e018      	b.n	8004fdc <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004faa:	f7fd fa6d 	bl	8002488 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d911      	bls.n	8004fdc <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f043 0208 	orr.w	r2, r3, #8
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2203      	movs	r2, #3
 8004fd6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e16e      	b.n	80052ba <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fe2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1df      	bne.n	8004faa <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ff2:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ff4:	e020      	b.n	8005038 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004ff6:	f7fd fa47 	bl	8002488 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b01      	cmp	r3, #1
 8005002:	d90f      	bls.n	8005024 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800500a:	2b00      	cmp	r3, #0
 800500c:	da0a      	bge.n	8005024 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	f043 0208 	orr.w	r2, r3, #8
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2203      	movs	r2, #3
 800501e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e14a      	b.n	80052ba <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800502a:	2b00      	cmp	r3, #0
 800502c:	dbe3      	blt.n	8004ff6 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005036:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f003 0310 	and.w	r3, r3, #16
 8005044:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005048:	fa01 f303 	lsl.w	r3, r1, r3
 800504c:	43db      	mvns	r3, r3
 800504e:	ea02 0103 	and.w	r1, r2, r3
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f003 0310 	and.w	r3, r3, #16
 800505c:	409a      	lsls	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f003 0310 	and.w	r3, r3, #16
 8005072:	21ff      	movs	r1, #255	@ 0xff
 8005074:	fa01 f303 	lsl.w	r3, r1, r3
 8005078:	43db      	mvns	r3, r3
 800507a:	ea02 0103 	and.w	r1, r2, r3
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f003 0310 	and.w	r3, r3, #16
 8005088:	409a      	lsls	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d11d      	bne.n	80050d6 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f003 0310 	and.w	r3, r3, #16
 80050a8:	221f      	movs	r2, #31
 80050aa:	fa02 f303 	lsl.w	r3, r2, r3
 80050ae:	43db      	mvns	r3, r3
 80050b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050b2:	4013      	ands	r3, r2
 80050b4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f003 0310 	and.w	r3, r3, #16
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050ca:	4313      	orrs	r3, r2
 80050cc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050dc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f003 0310 	and.w	r3, r3, #16
 80050e4:	2207      	movs	r2, #7
 80050e6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ea:	43db      	mvns	r3, r3
 80050ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050ee:	4013      	ands	r3, r2
 80050f0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d102      	bne.n	8005100 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	623b      	str	r3, [r7, #32]
 80050fe:	e00f      	b.n	8005120 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	2b02      	cmp	r3, #2
 8005106:	d102      	bne.n	800510e <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005108:	2301      	movs	r3, #1
 800510a:	623b      	str	r3, [r7, #32]
 800510c:	e008      	b.n	8005120 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d102      	bne.n	800511c <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005116:	2301      	movs	r3, #1
 8005118:	623b      	str	r3, [r7, #32]
 800511a:	e001      	b.n	8005120 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800511c:	2300      	movs	r3, #0
 800511e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	4313      	orrs	r3, r2
 800512a:	6a3a      	ldr	r2, [r7, #32]
 800512c:	4313      	orrs	r3, r2
 800512e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f003 0310 	and.w	r3, r3, #16
 8005136:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	43db      	mvns	r3, r3
 8005140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005142:	4013      	ands	r3, r2
 8005144:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	791b      	ldrb	r3, [r3, #4]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d102      	bne.n	8005154 <HAL_DAC_ConfigChannel+0x1f8>
 800514e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005152:	e000      	b.n	8005156 <HAL_DAC_ConfigChannel+0x1fa>
 8005154:	2300      	movs	r3, #0
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	4313      	orrs	r3, r2
 800515a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f003 0310 	and.w	r3, r3, #16
 8005162:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005166:	fa02 f303 	lsl.w	r3, r2, r3
 800516a:	43db      	mvns	r3, r3
 800516c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800516e:	4013      	ands	r3, r2
 8005170:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	795b      	ldrb	r3, [r3, #5]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d102      	bne.n	8005180 <HAL_DAC_ConfigChannel+0x224>
 800517a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800517e:	e000      	b.n	8005182 <HAL_DAC_ConfigChannel+0x226>
 8005180:	2300      	movs	r3, #0
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	4313      	orrs	r3, r2
 8005186:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800518e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2b02      	cmp	r3, #2
 8005196:	d114      	bne.n	80051c2 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005198:	f001 fac8 	bl	800672c <HAL_RCC_GetHCLKFreq>
 800519c:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	4a48      	ldr	r2, [pc, #288]	@ (80052c4 <HAL_DAC_ConfigChannel+0x368>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d904      	bls.n	80051b0 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80051a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80051ae:	e00f      	b.n	80051d0 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	4a45      	ldr	r2, [pc, #276]	@ (80052c8 <HAL_DAC_ConfigChannel+0x36c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d90a      	bls.n	80051ce <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80051b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80051be:	627b      	str	r3, [r7, #36]	@ 0x24
 80051c0:	e006      	b.n	80051d0 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051c8:	4313      	orrs	r3, r2
 80051ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80051cc:	e000      	b.n	80051d0 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80051ce:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f003 0310 	and.w	r3, r3, #16
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	fa02 f303 	lsl.w	r3, r2, r3
 80051dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051de:	4313      	orrs	r3, r2
 80051e0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6819      	ldr	r1, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f003 0310 	and.w	r3, r3, #16
 80051f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80051fa:	fa02 f303 	lsl.w	r3, r2, r3
 80051fe:	43da      	mvns	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	400a      	ands	r2, r1
 8005206:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f003 0310 	and.w	r3, r3, #16
 8005216:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800521a:	fa02 f303 	lsl.w	r3, r2, r3
 800521e:	43db      	mvns	r3, r3
 8005220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005222:	4013      	ands	r3, r2
 8005224:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f003 0310 	and.w	r3, r3, #16
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	fa02 f303 	lsl.w	r3, r2, r3
 8005238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800523a:	4313      	orrs	r3, r2
 800523c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005244:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6819      	ldr	r1, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f003 0310 	and.w	r3, r3, #16
 8005252:	22c0      	movs	r2, #192	@ 0xc0
 8005254:	fa02 f303 	lsl.w	r3, r2, r3
 8005258:	43da      	mvns	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	400a      	ands	r2, r1
 8005260:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	089b      	lsrs	r3, r3, #2
 8005268:	f003 030f 	and.w	r3, r3, #15
 800526c:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	089b      	lsrs	r3, r3, #2
 8005274:	021b      	lsls	r3, r3, #8
 8005276:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8005290:	fa01 f303 	lsl.w	r3, r1, r3
 8005294:	43db      	mvns	r3, r3
 8005296:	ea02 0103 	and.w	r1, r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f003 0310 	and.w	r3, r3, #16
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	409a      	lsls	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2201      	movs	r2, #1
 80052b0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80052b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3728      	adds	r7, #40	@ 0x28
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	09896800 	.word	0x09896800
 80052c8:	04c4b400 	.word	0x04c4b400

080052cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e08d      	b.n	80053fa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	4b47      	ldr	r3, [pc, #284]	@ (8005404 <HAL_DMA_Init+0x138>)
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d80f      	bhi.n	800530a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	461a      	mov	r2, r3
 80052f0:	4b45      	ldr	r3, [pc, #276]	@ (8005408 <HAL_DMA_Init+0x13c>)
 80052f2:	4413      	add	r3, r2
 80052f4:	4a45      	ldr	r2, [pc, #276]	@ (800540c <HAL_DMA_Init+0x140>)
 80052f6:	fba2 2303 	umull	r2, r3, r2, r3
 80052fa:	091b      	lsrs	r3, r3, #4
 80052fc:	009a      	lsls	r2, r3, #2
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a42      	ldr	r2, [pc, #264]	@ (8005410 <HAL_DMA_Init+0x144>)
 8005306:	641a      	str	r2, [r3, #64]	@ 0x40
 8005308:	e00e      	b.n	8005328 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	4b40      	ldr	r3, [pc, #256]	@ (8005414 <HAL_DMA_Init+0x148>)
 8005312:	4413      	add	r3, r2
 8005314:	4a3d      	ldr	r2, [pc, #244]	@ (800540c <HAL_DMA_Init+0x140>)
 8005316:	fba2 2303 	umull	r2, r3, r2, r3
 800531a:	091b      	lsrs	r3, r3, #4
 800531c:	009a      	lsls	r2, r3, #2
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a3c      	ldr	r2, [pc, #240]	@ (8005418 <HAL_DMA_Init+0x14c>)
 8005326:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800533e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005342:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800534c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005358:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005364:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 fa76 	bl	800586c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005388:	d102      	bne.n	8005390 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005398:	b2d2      	uxtb	r2, r2
 800539a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80053a4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d010      	beq.n	80053d0 <HAL_DMA_Init+0x104>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d80c      	bhi.n	80053d0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fa96 	bl	80058e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80053cc:	605a      	str	r2, [r3, #4]
 80053ce:	e008      	b.n	80053e2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	40020407 	.word	0x40020407
 8005408:	bffdfff8 	.word	0xbffdfff8
 800540c:	cccccccd 	.word	0xcccccccd
 8005410:	40020000 	.word	0x40020000
 8005414:	bffdfbf8 	.word	0xbffdfbf8
 8005418:	40020400 	.word	0x40020400

0800541c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
 8005428:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800542a:	2300      	movs	r3, #0
 800542c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_DMA_Start_IT+0x20>
 8005438:	2302      	movs	r3, #2
 800543a:	e066      	b.n	800550a <HAL_DMA_Start_IT+0xee>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b01      	cmp	r3, #1
 800544e:	d155      	bne.n	80054fc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2202      	movs	r2, #2
 8005454:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 0201 	bic.w	r2, r2, #1
 800546c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	68b9      	ldr	r1, [r7, #8]
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 f9bb 	bl	80057f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800547e:	2b00      	cmp	r3, #0
 8005480:	d008      	beq.n	8005494 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f042 020e 	orr.w	r2, r2, #14
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	e00f      	b.n	80054b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 0204 	bic.w	r2, r2, #4
 80054a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 020a 	orr.w	r2, r2, #10
 80054b2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d007      	beq.n	80054d2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054d0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d007      	beq.n	80054ea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f042 0201 	orr.w	r2, r2, #1
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	e005      	b.n	8005508 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005504:	2302      	movs	r3, #2
 8005506:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005508:	7dfb      	ldrb	r3, [r7, #23]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005512:	b480      	push	{r7}
 8005514:	b085      	sub	sp, #20
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800551a:	2300      	movs	r3, #0
 800551c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d005      	beq.n	8005536 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2204      	movs	r2, #4
 800552e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	73fb      	strb	r3, [r7, #15]
 8005534:	e037      	b.n	80055a6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 020e 	bic.w	r2, r2, #14
 8005544:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005550:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005554:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 0201 	bic.w	r2, r2, #1
 8005564:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800556a:	f003 021f 	and.w	r2, r3, #31
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005572:	2101      	movs	r1, #1
 8005574:	fa01 f202 	lsl.w	r2, r1, r2
 8005578:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005582:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00c      	beq.n	80055a6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005596:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800559a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80055a4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80055b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d00d      	beq.n	80055f8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2204      	movs	r2, #4
 80055e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	73fb      	strb	r3, [r7, #15]
 80055f6:	e047      	b.n	8005688 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 020e 	bic.w	r2, r2, #14
 8005606:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0201 	bic.w	r2, r2, #1
 8005616:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005622:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005626:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800562c:	f003 021f 	and.w	r2, r3, #31
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005634:	2101      	movs	r1, #1
 8005636:	fa01 f202 	lsl.w	r2, r1, r2
 800563a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005644:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00c      	beq.n	8005668 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005658:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800565c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005666:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800567c:	2b00      	cmp	r3, #0
 800567e:	d003      	beq.n	8005688 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	4798      	blx	r3
    }
  }
  return status;
 8005688:	7bfb      	ldrb	r3, [r7, #15]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b084      	sub	sp, #16
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ae:	f003 031f 	and.w	r3, r3, #31
 80056b2:	2204      	movs	r2, #4
 80056b4:	409a      	lsls	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4013      	ands	r3, r2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d026      	beq.n	800570c <HAL_DMA_IRQHandler+0x7a>
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	f003 0304 	and.w	r3, r3, #4
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d021      	beq.n	800570c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0320 	and.w	r3, r3, #32
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d107      	bne.n	80056e6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0204 	bic.w	r2, r2, #4
 80056e4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ea:	f003 021f 	and.w	r2, r3, #31
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f2:	2104      	movs	r1, #4
 80056f4:	fa01 f202 	lsl.w	r2, r1, r2
 80056f8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d071      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800570a:	e06c      	b.n	80057e6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005710:	f003 031f 	and.w	r3, r3, #31
 8005714:	2202      	movs	r2, #2
 8005716:	409a      	lsls	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4013      	ands	r3, r2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d02e      	beq.n	800577e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d029      	beq.n	800577e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0320 	and.w	r3, r3, #32
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10b      	bne.n	8005750 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 020a 	bic.w	r2, r2, #10
 8005746:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005754:	f003 021f 	and.w	r2, r3, #31
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575c:	2102      	movs	r1, #2
 800575e:	fa01 f202 	lsl.w	r2, r1, r2
 8005762:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005770:	2b00      	cmp	r3, #0
 8005772:	d038      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800577c:	e033      	b.n	80057e6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005782:	f003 031f 	and.w	r3, r3, #31
 8005786:	2208      	movs	r2, #8
 8005788:	409a      	lsls	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4013      	ands	r3, r2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d02a      	beq.n	80057e8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	f003 0308 	and.w	r3, r3, #8
 8005798:	2b00      	cmp	r3, #0
 800579a:	d025      	beq.n	80057e8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 020e 	bic.w	r2, r2, #14
 80057aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b0:	f003 021f 	and.w	r2, r3, #31
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b8:	2101      	movs	r1, #1
 80057ba:	fa01 f202 	lsl.w	r2, r1, r2
 80057be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d004      	beq.n	80057e8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80057e6:	bf00      	nop
 80057e8:	bf00      	nop
}
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
 80057fc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005806:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800580c:	2b00      	cmp	r3, #0
 800580e:	d004      	beq.n	800581a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005818:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581e:	f003 021f 	and.w	r2, r3, #31
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005826:	2101      	movs	r1, #1
 8005828:	fa01 f202 	lsl.w	r2, r1, r2
 800582c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	2b10      	cmp	r3, #16
 800583c:	d108      	bne.n	8005850 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800584e:	e007      	b.n	8005860 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	60da      	str	r2, [r3, #12]
}
 8005860:	bf00      	nop
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	461a      	mov	r2, r3
 800587a:	4b16      	ldr	r3, [pc, #88]	@ (80058d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800587c:	429a      	cmp	r2, r3
 800587e:	d802      	bhi.n	8005886 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005880:	4b15      	ldr	r3, [pc, #84]	@ (80058d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005882:	617b      	str	r3, [r7, #20]
 8005884:	e001      	b.n	800588a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005886:	4b15      	ldr	r3, [pc, #84]	@ (80058dc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005888:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	b2db      	uxtb	r3, r3
 8005894:	3b08      	subs	r3, #8
 8005896:	4a12      	ldr	r2, [pc, #72]	@ (80058e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005898:	fba2 2303 	umull	r2, r3, r2, r3
 800589c:	091b      	lsrs	r3, r3, #4
 800589e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058a4:	089b      	lsrs	r3, r3, #2
 80058a6:	009a      	lsls	r2, r3, #2
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	4413      	add	r3, r2
 80058ac:	461a      	mov	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a0b      	ldr	r2, [pc, #44]	@ (80058e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80058b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f003 031f 	and.w	r3, r3, #31
 80058be:	2201      	movs	r2, #1
 80058c0:	409a      	lsls	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80058c6:	bf00      	nop
 80058c8:	371c      	adds	r7, #28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	40020407 	.word	0x40020407
 80058d8:	40020800 	.word	0x40020800
 80058dc:	40020820 	.word	0x40020820
 80058e0:	cccccccd 	.word	0xcccccccd
 80058e4:	40020880 	.word	0x40020880

080058e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80058fc:	4413      	add	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	461a      	mov	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a08      	ldr	r2, [pc, #32]	@ (800592c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800590a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3b01      	subs	r3, #1
 8005910:	f003 031f 	and.w	r3, r3, #31
 8005914:	2201      	movs	r2, #1
 8005916:	409a      	lsls	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800591c:	bf00      	nop
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	1000823f 	.word	0x1000823f
 800592c:	40020940 	.word	0x40020940

08005930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005930:	b480      	push	{r7}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800593a:	2300      	movs	r3, #0
 800593c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800593e:	e15a      	b.n	8005bf6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	2101      	movs	r1, #1
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	fa01 f303 	lsl.w	r3, r1, r3
 800594c:	4013      	ands	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 814c 	beq.w	8005bf0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f003 0303 	and.w	r3, r3, #3
 8005960:	2b01      	cmp	r3, #1
 8005962:	d005      	beq.n	8005970 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800596c:	2b02      	cmp	r3, #2
 800596e:	d130      	bne.n	80059d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	2203      	movs	r2, #3
 800597c:	fa02 f303 	lsl.w	r3, r2, r3
 8005980:	43db      	mvns	r3, r3
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	4013      	ands	r3, r2
 8005986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	fa02 f303 	lsl.w	r3, r2, r3
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	4313      	orrs	r3, r2
 8005998:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80059a6:	2201      	movs	r2, #1
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	fa02 f303 	lsl.w	r3, r2, r3
 80059ae:	43db      	mvns	r3, r3
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	4013      	ands	r3, r2
 80059b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	091b      	lsrs	r3, r3, #4
 80059bc:	f003 0201 	and.w	r2, r3, #1
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	fa02 f303 	lsl.w	r3, r2, r3
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f003 0303 	and.w	r3, r3, #3
 80059da:	2b03      	cmp	r3, #3
 80059dc:	d017      	beq.n	8005a0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	2203      	movs	r2, #3
 80059ea:	fa02 f303 	lsl.w	r3, r2, r3
 80059ee:	43db      	mvns	r3, r3
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	4013      	ands	r3, r2
 80059f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	689a      	ldr	r2, [r3, #8]
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d123      	bne.n	8005a62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	08da      	lsrs	r2, r3, #3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	3208      	adds	r2, #8
 8005a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	220f      	movs	r2, #15
 8005a32:	fa02 f303 	lsl.w	r3, r2, r3
 8005a36:	43db      	mvns	r3, r3
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	691a      	ldr	r2, [r3, #16]
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f003 0307 	and.w	r3, r3, #7
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	08da      	lsrs	r2, r3, #3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3208      	adds	r2, #8
 8005a5c:	6939      	ldr	r1, [r7, #16]
 8005a5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	2203      	movs	r2, #3
 8005a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a72:	43db      	mvns	r3, r3
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	4013      	ands	r3, r2
 8005a78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f003 0203 	and.w	r2, r3, #3
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f000 80a6 	beq.w	8005bf0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005aa4:	4b5b      	ldr	r3, [pc, #364]	@ (8005c14 <HAL_GPIO_Init+0x2e4>)
 8005aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aa8:	4a5a      	ldr	r2, [pc, #360]	@ (8005c14 <HAL_GPIO_Init+0x2e4>)
 8005aaa:	f043 0301 	orr.w	r3, r3, #1
 8005aae:	6613      	str	r3, [r2, #96]	@ 0x60
 8005ab0:	4b58      	ldr	r3, [pc, #352]	@ (8005c14 <HAL_GPIO_Init+0x2e4>)
 8005ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	60bb      	str	r3, [r7, #8]
 8005aba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005abc:	4a56      	ldr	r2, [pc, #344]	@ (8005c18 <HAL_GPIO_Init+0x2e8>)
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	089b      	lsrs	r3, r3, #2
 8005ac2:	3302      	adds	r3, #2
 8005ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f003 0303 	and.w	r3, r3, #3
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	220f      	movs	r2, #15
 8005ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad8:	43db      	mvns	r3, r3
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	4013      	ands	r3, r2
 8005ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005ae6:	d01f      	beq.n	8005b28 <HAL_GPIO_Init+0x1f8>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a4c      	ldr	r2, [pc, #304]	@ (8005c1c <HAL_GPIO_Init+0x2ec>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d019      	beq.n	8005b24 <HAL_GPIO_Init+0x1f4>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a4b      	ldr	r2, [pc, #300]	@ (8005c20 <HAL_GPIO_Init+0x2f0>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d013      	beq.n	8005b20 <HAL_GPIO_Init+0x1f0>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a4a      	ldr	r2, [pc, #296]	@ (8005c24 <HAL_GPIO_Init+0x2f4>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d00d      	beq.n	8005b1c <HAL_GPIO_Init+0x1ec>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a49      	ldr	r2, [pc, #292]	@ (8005c28 <HAL_GPIO_Init+0x2f8>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d007      	beq.n	8005b18 <HAL_GPIO_Init+0x1e8>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a48      	ldr	r2, [pc, #288]	@ (8005c2c <HAL_GPIO_Init+0x2fc>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d101      	bne.n	8005b14 <HAL_GPIO_Init+0x1e4>
 8005b10:	2305      	movs	r3, #5
 8005b12:	e00a      	b.n	8005b2a <HAL_GPIO_Init+0x1fa>
 8005b14:	2306      	movs	r3, #6
 8005b16:	e008      	b.n	8005b2a <HAL_GPIO_Init+0x1fa>
 8005b18:	2304      	movs	r3, #4
 8005b1a:	e006      	b.n	8005b2a <HAL_GPIO_Init+0x1fa>
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e004      	b.n	8005b2a <HAL_GPIO_Init+0x1fa>
 8005b20:	2302      	movs	r3, #2
 8005b22:	e002      	b.n	8005b2a <HAL_GPIO_Init+0x1fa>
 8005b24:	2301      	movs	r3, #1
 8005b26:	e000      	b.n	8005b2a <HAL_GPIO_Init+0x1fa>
 8005b28:	2300      	movs	r3, #0
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	f002 0203 	and.w	r2, r2, #3
 8005b30:	0092      	lsls	r2, r2, #2
 8005b32:	4093      	lsls	r3, r2
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b3a:	4937      	ldr	r1, [pc, #220]	@ (8005c18 <HAL_GPIO_Init+0x2e8>)
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	089b      	lsrs	r3, r3, #2
 8005b40:	3302      	adds	r3, #2
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b48:	4b39      	ldr	r3, [pc, #228]	@ (8005c30 <HAL_GPIO_Init+0x300>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	43db      	mvns	r3, r3
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	4013      	ands	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005b6c:	4a30      	ldr	r2, [pc, #192]	@ (8005c30 <HAL_GPIO_Init+0x300>)
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005b72:	4b2f      	ldr	r3, [pc, #188]	@ (8005c30 <HAL_GPIO_Init+0x300>)
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	43db      	mvns	r3, r3
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005b96:	4a26      	ldr	r2, [pc, #152]	@ (8005c30 <HAL_GPIO_Init+0x300>)
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005b9c:	4b24      	ldr	r3, [pc, #144]	@ (8005c30 <HAL_GPIO_Init+0x300>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	43db      	mvns	r3, r3
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	4013      	ands	r3, r2
 8005baa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8005c30 <HAL_GPIO_Init+0x300>)
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8005c30 <HAL_GPIO_Init+0x300>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	43db      	mvns	r3, r3
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005bea:	4a11      	ldr	r2, [pc, #68]	@ (8005c30 <HAL_GPIO_Init+0x300>)
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f47f ae9d 	bne.w	8005940 <HAL_GPIO_Init+0x10>
  }
}
 8005c06:	bf00      	nop
 8005c08:	bf00      	nop
 8005c0a:	371c      	adds	r7, #28
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	40021000 	.word	0x40021000
 8005c18:	40010000 	.word	0x40010000
 8005c1c:	48000400 	.word	0x48000400
 8005c20:	48000800 	.word	0x48000800
 8005c24:	48000c00 	.word	0x48000c00
 8005c28:	48001000 	.word	0x48001000
 8005c2c:	48001400 	.word	0x48001400
 8005c30:	40010400 	.word	0x40010400

08005c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	807b      	strh	r3, [r7, #2]
 8005c40:	4613      	mov	r3, r2
 8005c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c44:	787b      	ldrb	r3, [r7, #1]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c4a:	887a      	ldrh	r2, [r7, #2]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005c50:	e002      	b.n	8005c58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005c52:	887a      	ldrh	r2, [r7, #2]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d141      	bne.n	8005cf6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c72:	4b4b      	ldr	r3, [pc, #300]	@ (8005da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005c7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c7e:	d131      	bne.n	8005ce4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c80:	4b47      	ldr	r3, [pc, #284]	@ (8005da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c86:	4a46      	ldr	r2, [pc, #280]	@ (8005da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c90:	4b43      	ldr	r3, [pc, #268]	@ (8005da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005c98:	4a41      	ldr	r2, [pc, #260]	@ (8005da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ca0:	4b40      	ldr	r3, [pc, #256]	@ (8005da4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2232      	movs	r2, #50	@ 0x32
 8005ca6:	fb02 f303 	mul.w	r3, r2, r3
 8005caa:	4a3f      	ldr	r2, [pc, #252]	@ (8005da8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005cac:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb0:	0c9b      	lsrs	r3, r3, #18
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005cb6:	e002      	b.n	8005cbe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005cbe:	4b38      	ldr	r3, [pc, #224]	@ (8005da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cca:	d102      	bne.n	8005cd2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1f2      	bne.n	8005cb8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005cd2:	4b33      	ldr	r3, [pc, #204]	@ (8005da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cde:	d158      	bne.n	8005d92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e057      	b.n	8005d94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ce4:	4b2e      	ldr	r3, [pc, #184]	@ (8005da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cea:	4a2d      	ldr	r2, [pc, #180]	@ (8005da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cf0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005cf4:	e04d      	b.n	8005d92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cfc:	d141      	bne.n	8005d82 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005cfe:	4b28      	ldr	r3, [pc, #160]	@ (8005da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005d06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d0a:	d131      	bne.n	8005d70 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d0c:	4b24      	ldr	r3, [pc, #144]	@ (8005da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d12:	4a23      	ldr	r2, [pc, #140]	@ (8005da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d1c:	4b20      	ldr	r3, [pc, #128]	@ (8005da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d24:	4a1e      	ldr	r2, [pc, #120]	@ (8005da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8005da4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2232      	movs	r2, #50	@ 0x32
 8005d32:	fb02 f303 	mul.w	r3, r2, r3
 8005d36:	4a1c      	ldr	r2, [pc, #112]	@ (8005da8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d38:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3c:	0c9b      	lsrs	r3, r3, #18
 8005d3e:	3301      	adds	r3, #1
 8005d40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d42:	e002      	b.n	8005d4a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d4a:	4b15      	ldr	r3, [pc, #84]	@ (8005da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d56:	d102      	bne.n	8005d5e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1f2      	bne.n	8005d44 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d5e:	4b10      	ldr	r3, [pc, #64]	@ (8005da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d6a:	d112      	bne.n	8005d92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e011      	b.n	8005d94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d70:	4b0b      	ldr	r3, [pc, #44]	@ (8005da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d76:	4a0a      	ldr	r2, [pc, #40]	@ (8005da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005d80:	e007      	b.n	8005d92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005d82:	4b07      	ldr	r3, [pc, #28]	@ (8005da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d8a:	4a05      	ldr	r2, [pc, #20]	@ (8005da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d90:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	40007000 	.word	0x40007000
 8005da4:	20000000 	.word	0x20000000
 8005da8:	431bde83 	.word	0x431bde83

08005dac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005db0:	4b05      	ldr	r3, [pc, #20]	@ (8005dc8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	4a04      	ldr	r2, [pc, #16]	@ (8005dc8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005db6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005dba:	6093      	str	r3, [r2, #8]
}
 8005dbc:	bf00      	nop
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	40007000 	.word	0x40007000

08005dcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b088      	sub	sp, #32
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e2fe      	b.n	80063dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d075      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dea:	4b97      	ldr	r3, [pc, #604]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 030c 	and.w	r3, r3, #12
 8005df2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005df4:	4b94      	ldr	r3, [pc, #592]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f003 0303 	and.w	r3, r3, #3
 8005dfc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	2b0c      	cmp	r3, #12
 8005e02:	d102      	bne.n	8005e0a <HAL_RCC_OscConfig+0x3e>
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	2b03      	cmp	r3, #3
 8005e08:	d002      	beq.n	8005e10 <HAL_RCC_OscConfig+0x44>
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	2b08      	cmp	r3, #8
 8005e0e:	d10b      	bne.n	8005e28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e10:	4b8d      	ldr	r3, [pc, #564]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d05b      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x108>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d157      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e2d9      	b.n	80063dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e30:	d106      	bne.n	8005e40 <HAL_RCC_OscConfig+0x74>
 8005e32:	4b85      	ldr	r3, [pc, #532]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a84      	ldr	r2, [pc, #528]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	e01d      	b.n	8005e7c <HAL_RCC_OscConfig+0xb0>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e48:	d10c      	bne.n	8005e64 <HAL_RCC_OscConfig+0x98>
 8005e4a:	4b7f      	ldr	r3, [pc, #508]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a7e      	ldr	r2, [pc, #504]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005e50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	4b7c      	ldr	r3, [pc, #496]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a7b      	ldr	r2, [pc, #492]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005e5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e60:	6013      	str	r3, [r2, #0]
 8005e62:	e00b      	b.n	8005e7c <HAL_RCC_OscConfig+0xb0>
 8005e64:	4b78      	ldr	r3, [pc, #480]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a77      	ldr	r2, [pc, #476]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005e6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	4b75      	ldr	r3, [pc, #468]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a74      	ldr	r2, [pc, #464]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005e76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d013      	beq.n	8005eac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e84:	f7fc fb00 	bl	8002488 <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e8a:	e008      	b.n	8005e9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e8c:	f7fc fafc 	bl	8002488 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b64      	cmp	r3, #100	@ 0x64
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e29e      	b.n	80063dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e9e:	4b6a      	ldr	r3, [pc, #424]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d0f0      	beq.n	8005e8c <HAL_RCC_OscConfig+0xc0>
 8005eaa:	e014      	b.n	8005ed6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eac:	f7fc faec 	bl	8002488 <HAL_GetTick>
 8005eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005eb2:	e008      	b.n	8005ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005eb4:	f7fc fae8 	bl	8002488 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b64      	cmp	r3, #100	@ 0x64
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e28a      	b.n	80063dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ec6:	4b60      	ldr	r3, [pc, #384]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1f0      	bne.n	8005eb4 <HAL_RCC_OscConfig+0xe8>
 8005ed2:	e000      	b.n	8005ed6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d075      	beq.n	8005fce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ee2:	4b59      	ldr	r3, [pc, #356]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f003 030c 	and.w	r3, r3, #12
 8005eea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005eec:	4b56      	ldr	r3, [pc, #344]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f003 0303 	and.w	r3, r3, #3
 8005ef4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	2b0c      	cmp	r3, #12
 8005efa:	d102      	bne.n	8005f02 <HAL_RCC_OscConfig+0x136>
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d002      	beq.n	8005f08 <HAL_RCC_OscConfig+0x13c>
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	2b04      	cmp	r3, #4
 8005f06:	d11f      	bne.n	8005f48 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f08:	4b4f      	ldr	r3, [pc, #316]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d005      	beq.n	8005f20 <HAL_RCC_OscConfig+0x154>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e25d      	b.n	80063dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f20:	4b49      	ldr	r3, [pc, #292]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	061b      	lsls	r3, r3, #24
 8005f2e:	4946      	ldr	r1, [pc, #280]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005f34:	4b45      	ldr	r3, [pc, #276]	@ (800604c <HAL_RCC_OscConfig+0x280>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fc fa59 	bl	80023f0 <HAL_InitTick>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d043      	beq.n	8005fcc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e249      	b.n	80063dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d023      	beq.n	8005f98 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f50:	4b3d      	ldr	r3, [pc, #244]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a3c      	ldr	r2, [pc, #240]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005f56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f5c:	f7fc fa94 	bl	8002488 <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f62:	e008      	b.n	8005f76 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f64:	f7fc fa90 	bl	8002488 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e232      	b.n	80063dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f76:	4b34      	ldr	r3, [pc, #208]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0f0      	beq.n	8005f64 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f82:	4b31      	ldr	r3, [pc, #196]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	061b      	lsls	r3, r3, #24
 8005f90:	492d      	ldr	r1, [pc, #180]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	604b      	str	r3, [r1, #4]
 8005f96:	e01a      	b.n	8005fce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f98:	4b2b      	ldr	r3, [pc, #172]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a2a      	ldr	r2, [pc, #168]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005f9e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa4:	f7fc fa70 	bl	8002488 <HAL_GetTick>
 8005fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005faa:	e008      	b.n	8005fbe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fac:	f7fc fa6c 	bl	8002488 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e20e      	b.n	80063dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005fbe:	4b22      	ldr	r3, [pc, #136]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1f0      	bne.n	8005fac <HAL_RCC_OscConfig+0x1e0>
 8005fca:	e000      	b.n	8005fce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fcc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0308 	and.w	r3, r3, #8
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d041      	beq.n	800605e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d01c      	beq.n	800601c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fe2:	4b19      	ldr	r3, [pc, #100]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fe8:	4a17      	ldr	r2, [pc, #92]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff2:	f7fc fa49 	bl	8002488 <HAL_GetTick>
 8005ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ff8:	e008      	b.n	800600c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ffa:	f7fc fa45 	bl	8002488 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	2b02      	cmp	r3, #2
 8006006:	d901      	bls.n	800600c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e1e7      	b.n	80063dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800600c:	4b0e      	ldr	r3, [pc, #56]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 800600e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d0ef      	beq.n	8005ffa <HAL_RCC_OscConfig+0x22e>
 800601a:	e020      	b.n	800605e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800601c:	4b0a      	ldr	r3, [pc, #40]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 800601e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006022:	4a09      	ldr	r2, [pc, #36]	@ (8006048 <HAL_RCC_OscConfig+0x27c>)
 8006024:	f023 0301 	bic.w	r3, r3, #1
 8006028:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800602c:	f7fc fa2c 	bl	8002488 <HAL_GetTick>
 8006030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006032:	e00d      	b.n	8006050 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006034:	f7fc fa28 	bl	8002488 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d906      	bls.n	8006050 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e1ca      	b.n	80063dc <HAL_RCC_OscConfig+0x610>
 8006046:	bf00      	nop
 8006048:	40021000 	.word	0x40021000
 800604c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006050:	4b8c      	ldr	r3, [pc, #560]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 8006052:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1ea      	bne.n	8006034 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0304 	and.w	r3, r3, #4
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 80a6 	beq.w	80061b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800606c:	2300      	movs	r3, #0
 800606e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006070:	4b84      	ldr	r3, [pc, #528]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 8006072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d101      	bne.n	8006080 <HAL_RCC_OscConfig+0x2b4>
 800607c:	2301      	movs	r3, #1
 800607e:	e000      	b.n	8006082 <HAL_RCC_OscConfig+0x2b6>
 8006080:	2300      	movs	r3, #0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00d      	beq.n	80060a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006086:	4b7f      	ldr	r3, [pc, #508]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 8006088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800608a:	4a7e      	ldr	r2, [pc, #504]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 800608c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006090:	6593      	str	r3, [r2, #88]	@ 0x58
 8006092:	4b7c      	ldr	r3, [pc, #496]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 8006094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800609e:	2301      	movs	r3, #1
 80060a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060a2:	4b79      	ldr	r3, [pc, #484]	@ (8006288 <HAL_RCC_OscConfig+0x4bc>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d118      	bne.n	80060e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060ae:	4b76      	ldr	r3, [pc, #472]	@ (8006288 <HAL_RCC_OscConfig+0x4bc>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a75      	ldr	r2, [pc, #468]	@ (8006288 <HAL_RCC_OscConfig+0x4bc>)
 80060b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060ba:	f7fc f9e5 	bl	8002488 <HAL_GetTick>
 80060be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060c0:	e008      	b.n	80060d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060c2:	f7fc f9e1 	bl	8002488 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e183      	b.n	80063dc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060d4:	4b6c      	ldr	r3, [pc, #432]	@ (8006288 <HAL_RCC_OscConfig+0x4bc>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0f0      	beq.n	80060c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d108      	bne.n	80060fa <HAL_RCC_OscConfig+0x32e>
 80060e8:	4b66      	ldr	r3, [pc, #408]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 80060ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ee:	4a65      	ldr	r2, [pc, #404]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 80060f0:	f043 0301 	orr.w	r3, r3, #1
 80060f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80060f8:	e024      	b.n	8006144 <HAL_RCC_OscConfig+0x378>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	2b05      	cmp	r3, #5
 8006100:	d110      	bne.n	8006124 <HAL_RCC_OscConfig+0x358>
 8006102:	4b60      	ldr	r3, [pc, #384]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 8006104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006108:	4a5e      	ldr	r2, [pc, #376]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 800610a:	f043 0304 	orr.w	r3, r3, #4
 800610e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006112:	4b5c      	ldr	r3, [pc, #368]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 8006114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006118:	4a5a      	ldr	r2, [pc, #360]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 800611a:	f043 0301 	orr.w	r3, r3, #1
 800611e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006122:	e00f      	b.n	8006144 <HAL_RCC_OscConfig+0x378>
 8006124:	4b57      	ldr	r3, [pc, #348]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 8006126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800612a:	4a56      	ldr	r2, [pc, #344]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 800612c:	f023 0301 	bic.w	r3, r3, #1
 8006130:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006134:	4b53      	ldr	r3, [pc, #332]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 8006136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800613a:	4a52      	ldr	r2, [pc, #328]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 800613c:	f023 0304 	bic.w	r3, r3, #4
 8006140:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d016      	beq.n	800617a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800614c:	f7fc f99c 	bl	8002488 <HAL_GetTick>
 8006150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006152:	e00a      	b.n	800616a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006154:	f7fc f998 	bl	8002488 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006162:	4293      	cmp	r3, r2
 8006164:	d901      	bls.n	800616a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e138      	b.n	80063dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800616a:	4b46      	ldr	r3, [pc, #280]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 800616c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b00      	cmp	r3, #0
 8006176:	d0ed      	beq.n	8006154 <HAL_RCC_OscConfig+0x388>
 8006178:	e015      	b.n	80061a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800617a:	f7fc f985 	bl	8002488 <HAL_GetTick>
 800617e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006180:	e00a      	b.n	8006198 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006182:	f7fc f981 	bl	8002488 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006190:	4293      	cmp	r3, r2
 8006192:	d901      	bls.n	8006198 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e121      	b.n	80063dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006198:	4b3a      	ldr	r3, [pc, #232]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 800619a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1ed      	bne.n	8006182 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80061a6:	7ffb      	ldrb	r3, [r7, #31]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d105      	bne.n	80061b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061ac:	4b35      	ldr	r3, [pc, #212]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 80061ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061b0:	4a34      	ldr	r2, [pc, #208]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 80061b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061b6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0320 	and.w	r3, r3, #32
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d03c      	beq.n	800623e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d01c      	beq.n	8006206 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061cc:	4b2d      	ldr	r3, [pc, #180]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 80061ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061d2:	4a2c      	ldr	r2, [pc, #176]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 80061d4:	f043 0301 	orr.w	r3, r3, #1
 80061d8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061dc:	f7fc f954 	bl	8002488 <HAL_GetTick>
 80061e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061e2:	e008      	b.n	80061f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061e4:	f7fc f950 	bl	8002488 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e0f2      	b.n	80063dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061f6:	4b23      	ldr	r3, [pc, #140]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 80061f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061fc:	f003 0302 	and.w	r3, r3, #2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d0ef      	beq.n	80061e4 <HAL_RCC_OscConfig+0x418>
 8006204:	e01b      	b.n	800623e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006206:	4b1f      	ldr	r3, [pc, #124]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 8006208:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800620c:	4a1d      	ldr	r2, [pc, #116]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 800620e:	f023 0301 	bic.w	r3, r3, #1
 8006212:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006216:	f7fc f937 	bl	8002488 <HAL_GetTick>
 800621a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800621c:	e008      	b.n	8006230 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800621e:	f7fc f933 	bl	8002488 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	2b02      	cmp	r3, #2
 800622a:	d901      	bls.n	8006230 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e0d5      	b.n	80063dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006230:	4b14      	ldr	r3, [pc, #80]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 8006232:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1ef      	bne.n	800621e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 80c9 	beq.w	80063da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006248:	4b0e      	ldr	r3, [pc, #56]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f003 030c 	and.w	r3, r3, #12
 8006250:	2b0c      	cmp	r3, #12
 8006252:	f000 8083 	beq.w	800635c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	2b02      	cmp	r3, #2
 800625c:	d15e      	bne.n	800631c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800625e:	4b09      	ldr	r3, [pc, #36]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a08      	ldr	r2, [pc, #32]	@ (8006284 <HAL_RCC_OscConfig+0x4b8>)
 8006264:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006268:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800626a:	f7fc f90d 	bl	8002488 <HAL_GetTick>
 800626e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006270:	e00c      	b.n	800628c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006272:	f7fc f909 	bl	8002488 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	2b02      	cmp	r3, #2
 800627e:	d905      	bls.n	800628c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e0ab      	b.n	80063dc <HAL_RCC_OscConfig+0x610>
 8006284:	40021000 	.word	0x40021000
 8006288:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800628c:	4b55      	ldr	r3, [pc, #340]	@ (80063e4 <HAL_RCC_OscConfig+0x618>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1ec      	bne.n	8006272 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006298:	4b52      	ldr	r3, [pc, #328]	@ (80063e4 <HAL_RCC_OscConfig+0x618>)
 800629a:	68da      	ldr	r2, [r3, #12]
 800629c:	4b52      	ldr	r3, [pc, #328]	@ (80063e8 <HAL_RCC_OscConfig+0x61c>)
 800629e:	4013      	ands	r3, r2
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	6a11      	ldr	r1, [r2, #32]
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80062a8:	3a01      	subs	r2, #1
 80062aa:	0112      	lsls	r2, r2, #4
 80062ac:	4311      	orrs	r1, r2
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80062b2:	0212      	lsls	r2, r2, #8
 80062b4:	4311      	orrs	r1, r2
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80062ba:	0852      	lsrs	r2, r2, #1
 80062bc:	3a01      	subs	r2, #1
 80062be:	0552      	lsls	r2, r2, #21
 80062c0:	4311      	orrs	r1, r2
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80062c6:	0852      	lsrs	r2, r2, #1
 80062c8:	3a01      	subs	r2, #1
 80062ca:	0652      	lsls	r2, r2, #25
 80062cc:	4311      	orrs	r1, r2
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80062d2:	06d2      	lsls	r2, r2, #27
 80062d4:	430a      	orrs	r2, r1
 80062d6:	4943      	ldr	r1, [pc, #268]	@ (80063e4 <HAL_RCC_OscConfig+0x618>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062dc:	4b41      	ldr	r3, [pc, #260]	@ (80063e4 <HAL_RCC_OscConfig+0x618>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a40      	ldr	r2, [pc, #256]	@ (80063e4 <HAL_RCC_OscConfig+0x618>)
 80062e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80062e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062e8:	4b3e      	ldr	r3, [pc, #248]	@ (80063e4 <HAL_RCC_OscConfig+0x618>)
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	4a3d      	ldr	r2, [pc, #244]	@ (80063e4 <HAL_RCC_OscConfig+0x618>)
 80062ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80062f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f4:	f7fc f8c8 	bl	8002488 <HAL_GetTick>
 80062f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062fa:	e008      	b.n	800630e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062fc:	f7fc f8c4 	bl	8002488 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b02      	cmp	r3, #2
 8006308:	d901      	bls.n	800630e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e066      	b.n	80063dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800630e:	4b35      	ldr	r3, [pc, #212]	@ (80063e4 <HAL_RCC_OscConfig+0x618>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d0f0      	beq.n	80062fc <HAL_RCC_OscConfig+0x530>
 800631a:	e05e      	b.n	80063da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800631c:	4b31      	ldr	r3, [pc, #196]	@ (80063e4 <HAL_RCC_OscConfig+0x618>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a30      	ldr	r2, [pc, #192]	@ (80063e4 <HAL_RCC_OscConfig+0x618>)
 8006322:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006328:	f7fc f8ae 	bl	8002488 <HAL_GetTick>
 800632c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800632e:	e008      	b.n	8006342 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006330:	f7fc f8aa 	bl	8002488 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	2b02      	cmp	r3, #2
 800633c:	d901      	bls.n	8006342 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e04c      	b.n	80063dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006342:	4b28      	ldr	r3, [pc, #160]	@ (80063e4 <HAL_RCC_OscConfig+0x618>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1f0      	bne.n	8006330 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800634e:	4b25      	ldr	r3, [pc, #148]	@ (80063e4 <HAL_RCC_OscConfig+0x618>)
 8006350:	68da      	ldr	r2, [r3, #12]
 8006352:	4924      	ldr	r1, [pc, #144]	@ (80063e4 <HAL_RCC_OscConfig+0x618>)
 8006354:	4b25      	ldr	r3, [pc, #148]	@ (80063ec <HAL_RCC_OscConfig+0x620>)
 8006356:	4013      	ands	r3, r2
 8006358:	60cb      	str	r3, [r1, #12]
 800635a:	e03e      	b.n	80063da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	69db      	ldr	r3, [r3, #28]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d101      	bne.n	8006368 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e039      	b.n	80063dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006368:	4b1e      	ldr	r3, [pc, #120]	@ (80063e4 <HAL_RCC_OscConfig+0x618>)
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f003 0203 	and.w	r2, r3, #3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a1b      	ldr	r3, [r3, #32]
 8006378:	429a      	cmp	r2, r3
 800637a:	d12c      	bne.n	80063d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006386:	3b01      	subs	r3, #1
 8006388:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800638a:	429a      	cmp	r2, r3
 800638c:	d123      	bne.n	80063d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006398:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800639a:	429a      	cmp	r2, r3
 800639c:	d11b      	bne.n	80063d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d113      	bne.n	80063d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b8:	085b      	lsrs	r3, r3, #1
 80063ba:	3b01      	subs	r3, #1
 80063bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80063be:	429a      	cmp	r2, r3
 80063c0:	d109      	bne.n	80063d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063cc:	085b      	lsrs	r3, r3, #1
 80063ce:	3b01      	subs	r3, #1
 80063d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d001      	beq.n	80063da <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e000      	b.n	80063dc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3720      	adds	r7, #32
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	40021000 	.word	0x40021000
 80063e8:	019f800c 	.word	0x019f800c
 80063ec:	feeefffc 	.word	0xfeeefffc

080063f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80063fa:	2300      	movs	r3, #0
 80063fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e11e      	b.n	8006646 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006408:	4b91      	ldr	r3, [pc, #580]	@ (8006650 <HAL_RCC_ClockConfig+0x260>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 030f 	and.w	r3, r3, #15
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	429a      	cmp	r2, r3
 8006414:	d910      	bls.n	8006438 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006416:	4b8e      	ldr	r3, [pc, #568]	@ (8006650 <HAL_RCC_ClockConfig+0x260>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f023 020f 	bic.w	r2, r3, #15
 800641e:	498c      	ldr	r1, [pc, #560]	@ (8006650 <HAL_RCC_ClockConfig+0x260>)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	4313      	orrs	r3, r2
 8006424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006426:	4b8a      	ldr	r3, [pc, #552]	@ (8006650 <HAL_RCC_ClockConfig+0x260>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 030f 	and.w	r3, r3, #15
 800642e:	683a      	ldr	r2, [r7, #0]
 8006430:	429a      	cmp	r2, r3
 8006432:	d001      	beq.n	8006438 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e106      	b.n	8006646 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b00      	cmp	r3, #0
 8006442:	d073      	beq.n	800652c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	2b03      	cmp	r3, #3
 800644a:	d129      	bne.n	80064a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800644c:	4b81      	ldr	r3, [pc, #516]	@ (8006654 <HAL_RCC_ClockConfig+0x264>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e0f4      	b.n	8006646 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800645c:	f000 f99e 	bl	800679c <RCC_GetSysClockFreqFromPLLSource>
 8006460:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	4a7c      	ldr	r2, [pc, #496]	@ (8006658 <HAL_RCC_ClockConfig+0x268>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d93f      	bls.n	80064ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800646a:	4b7a      	ldr	r3, [pc, #488]	@ (8006654 <HAL_RCC_ClockConfig+0x264>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d009      	beq.n	800648a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800647e:	2b00      	cmp	r3, #0
 8006480:	d033      	beq.n	80064ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006486:	2b00      	cmp	r3, #0
 8006488:	d12f      	bne.n	80064ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800648a:	4b72      	ldr	r3, [pc, #456]	@ (8006654 <HAL_RCC_ClockConfig+0x264>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006492:	4a70      	ldr	r2, [pc, #448]	@ (8006654 <HAL_RCC_ClockConfig+0x264>)
 8006494:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006498:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800649a:	2380      	movs	r3, #128	@ 0x80
 800649c:	617b      	str	r3, [r7, #20]
 800649e:	e024      	b.n	80064ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d107      	bne.n	80064b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064a8:	4b6a      	ldr	r3, [pc, #424]	@ (8006654 <HAL_RCC_ClockConfig+0x264>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d109      	bne.n	80064c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e0c6      	b.n	8006646 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064b8:	4b66      	ldr	r3, [pc, #408]	@ (8006654 <HAL_RCC_ClockConfig+0x264>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e0be      	b.n	8006646 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80064c8:	f000 f8ce 	bl	8006668 <HAL_RCC_GetSysClockFreq>
 80064cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	4a61      	ldr	r2, [pc, #388]	@ (8006658 <HAL_RCC_ClockConfig+0x268>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d909      	bls.n	80064ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80064d6:	4b5f      	ldr	r3, [pc, #380]	@ (8006654 <HAL_RCC_ClockConfig+0x264>)
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064de:	4a5d      	ldr	r2, [pc, #372]	@ (8006654 <HAL_RCC_ClockConfig+0x264>)
 80064e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80064e6:	2380      	movs	r3, #128	@ 0x80
 80064e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80064ea:	4b5a      	ldr	r3, [pc, #360]	@ (8006654 <HAL_RCC_ClockConfig+0x264>)
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f023 0203 	bic.w	r2, r3, #3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	4957      	ldr	r1, [pc, #348]	@ (8006654 <HAL_RCC_ClockConfig+0x264>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064fc:	f7fb ffc4 	bl	8002488 <HAL_GetTick>
 8006500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006502:	e00a      	b.n	800651a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006504:	f7fb ffc0 	bl	8002488 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006512:	4293      	cmp	r3, r2
 8006514:	d901      	bls.n	800651a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e095      	b.n	8006646 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800651a:	4b4e      	ldr	r3, [pc, #312]	@ (8006654 <HAL_RCC_ClockConfig+0x264>)
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f003 020c 	and.w	r2, r3, #12
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	429a      	cmp	r2, r3
 800652a:	d1eb      	bne.n	8006504 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d023      	beq.n	8006580 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006544:	4b43      	ldr	r3, [pc, #268]	@ (8006654 <HAL_RCC_ClockConfig+0x264>)
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	4a42      	ldr	r2, [pc, #264]	@ (8006654 <HAL_RCC_ClockConfig+0x264>)
 800654a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800654e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0308 	and.w	r3, r3, #8
 8006558:	2b00      	cmp	r3, #0
 800655a:	d007      	beq.n	800656c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800655c:	4b3d      	ldr	r3, [pc, #244]	@ (8006654 <HAL_RCC_ClockConfig+0x264>)
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006564:	4a3b      	ldr	r2, [pc, #236]	@ (8006654 <HAL_RCC_ClockConfig+0x264>)
 8006566:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800656a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800656c:	4b39      	ldr	r3, [pc, #228]	@ (8006654 <HAL_RCC_ClockConfig+0x264>)
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	4936      	ldr	r1, [pc, #216]	@ (8006654 <HAL_RCC_ClockConfig+0x264>)
 800657a:	4313      	orrs	r3, r2
 800657c:	608b      	str	r3, [r1, #8]
 800657e:	e008      	b.n	8006592 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	2b80      	cmp	r3, #128	@ 0x80
 8006584:	d105      	bne.n	8006592 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006586:	4b33      	ldr	r3, [pc, #204]	@ (8006654 <HAL_RCC_ClockConfig+0x264>)
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	4a32      	ldr	r2, [pc, #200]	@ (8006654 <HAL_RCC_ClockConfig+0x264>)
 800658c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006590:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006592:	4b2f      	ldr	r3, [pc, #188]	@ (8006650 <HAL_RCC_ClockConfig+0x260>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 030f 	and.w	r3, r3, #15
 800659a:	683a      	ldr	r2, [r7, #0]
 800659c:	429a      	cmp	r2, r3
 800659e:	d21d      	bcs.n	80065dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065a0:	4b2b      	ldr	r3, [pc, #172]	@ (8006650 <HAL_RCC_ClockConfig+0x260>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f023 020f 	bic.w	r2, r3, #15
 80065a8:	4929      	ldr	r1, [pc, #164]	@ (8006650 <HAL_RCC_ClockConfig+0x260>)
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80065b0:	f7fb ff6a 	bl	8002488 <HAL_GetTick>
 80065b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065b6:	e00a      	b.n	80065ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065b8:	f7fb ff66 	bl	8002488 <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d901      	bls.n	80065ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e03b      	b.n	8006646 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ce:	4b20      	ldr	r3, [pc, #128]	@ (8006650 <HAL_RCC_ClockConfig+0x260>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 030f 	and.w	r3, r3, #15
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d1ed      	bne.n	80065b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0304 	and.w	r3, r3, #4
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d008      	beq.n	80065fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006654 <HAL_RCC_ClockConfig+0x264>)
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	4917      	ldr	r1, [pc, #92]	@ (8006654 <HAL_RCC_ClockConfig+0x264>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0308 	and.w	r3, r3, #8
 8006602:	2b00      	cmp	r3, #0
 8006604:	d009      	beq.n	800661a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006606:	4b13      	ldr	r3, [pc, #76]	@ (8006654 <HAL_RCC_ClockConfig+0x264>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	00db      	lsls	r3, r3, #3
 8006614:	490f      	ldr	r1, [pc, #60]	@ (8006654 <HAL_RCC_ClockConfig+0x264>)
 8006616:	4313      	orrs	r3, r2
 8006618:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800661a:	f000 f825 	bl	8006668 <HAL_RCC_GetSysClockFreq>
 800661e:	4602      	mov	r2, r0
 8006620:	4b0c      	ldr	r3, [pc, #48]	@ (8006654 <HAL_RCC_ClockConfig+0x264>)
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	091b      	lsrs	r3, r3, #4
 8006626:	f003 030f 	and.w	r3, r3, #15
 800662a:	490c      	ldr	r1, [pc, #48]	@ (800665c <HAL_RCC_ClockConfig+0x26c>)
 800662c:	5ccb      	ldrb	r3, [r1, r3]
 800662e:	f003 031f 	and.w	r3, r3, #31
 8006632:	fa22 f303 	lsr.w	r3, r2, r3
 8006636:	4a0a      	ldr	r2, [pc, #40]	@ (8006660 <HAL_RCC_ClockConfig+0x270>)
 8006638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800663a:	4b0a      	ldr	r3, [pc, #40]	@ (8006664 <HAL_RCC_ClockConfig+0x274>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4618      	mov	r0, r3
 8006640:	f7fb fed6 	bl	80023f0 <HAL_InitTick>
 8006644:	4603      	mov	r3, r0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3718      	adds	r7, #24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	40022000 	.word	0x40022000
 8006654:	40021000 	.word	0x40021000
 8006658:	04c4b400 	.word	0x04c4b400
 800665c:	08011848 	.word	0x08011848
 8006660:	20000000 	.word	0x20000000
 8006664:	20000004 	.word	0x20000004

08006668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006668:	b480      	push	{r7}
 800666a:	b087      	sub	sp, #28
 800666c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800666e:	4b2c      	ldr	r3, [pc, #176]	@ (8006720 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f003 030c 	and.w	r3, r3, #12
 8006676:	2b04      	cmp	r3, #4
 8006678:	d102      	bne.n	8006680 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800667a:	4b2a      	ldr	r3, [pc, #168]	@ (8006724 <HAL_RCC_GetSysClockFreq+0xbc>)
 800667c:	613b      	str	r3, [r7, #16]
 800667e:	e047      	b.n	8006710 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006680:	4b27      	ldr	r3, [pc, #156]	@ (8006720 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f003 030c 	and.w	r3, r3, #12
 8006688:	2b08      	cmp	r3, #8
 800668a:	d102      	bne.n	8006692 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800668c:	4b26      	ldr	r3, [pc, #152]	@ (8006728 <HAL_RCC_GetSysClockFreq+0xc0>)
 800668e:	613b      	str	r3, [r7, #16]
 8006690:	e03e      	b.n	8006710 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006692:	4b23      	ldr	r3, [pc, #140]	@ (8006720 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f003 030c 	and.w	r3, r3, #12
 800669a:	2b0c      	cmp	r3, #12
 800669c:	d136      	bne.n	800670c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800669e:	4b20      	ldr	r3, [pc, #128]	@ (8006720 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	f003 0303 	and.w	r3, r3, #3
 80066a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066a8:	4b1d      	ldr	r3, [pc, #116]	@ (8006720 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	091b      	lsrs	r3, r3, #4
 80066ae:	f003 030f 	and.w	r3, r3, #15
 80066b2:	3301      	adds	r3, #1
 80066b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2b03      	cmp	r3, #3
 80066ba:	d10c      	bne.n	80066d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066bc:	4a1a      	ldr	r2, [pc, #104]	@ (8006728 <HAL_RCC_GetSysClockFreq+0xc0>)
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c4:	4a16      	ldr	r2, [pc, #88]	@ (8006720 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066c6:	68d2      	ldr	r2, [r2, #12]
 80066c8:	0a12      	lsrs	r2, r2, #8
 80066ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80066ce:	fb02 f303 	mul.w	r3, r2, r3
 80066d2:	617b      	str	r3, [r7, #20]
      break;
 80066d4:	e00c      	b.n	80066f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066d6:	4a13      	ldr	r2, [pc, #76]	@ (8006724 <HAL_RCC_GetSysClockFreq+0xbc>)
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	fbb2 f3f3 	udiv	r3, r2, r3
 80066de:	4a10      	ldr	r2, [pc, #64]	@ (8006720 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066e0:	68d2      	ldr	r2, [r2, #12]
 80066e2:	0a12      	lsrs	r2, r2, #8
 80066e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80066e8:	fb02 f303 	mul.w	r3, r2, r3
 80066ec:	617b      	str	r3, [r7, #20]
      break;
 80066ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80066f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006720 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	0e5b      	lsrs	r3, r3, #25
 80066f6:	f003 0303 	and.w	r3, r3, #3
 80066fa:	3301      	adds	r3, #1
 80066fc:	005b      	lsls	r3, r3, #1
 80066fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	fbb2 f3f3 	udiv	r3, r2, r3
 8006708:	613b      	str	r3, [r7, #16]
 800670a:	e001      	b.n	8006710 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800670c:	2300      	movs	r3, #0
 800670e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006710:	693b      	ldr	r3, [r7, #16]
}
 8006712:	4618      	mov	r0, r3
 8006714:	371c      	adds	r7, #28
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	40021000 	.word	0x40021000
 8006724:	00f42400 	.word	0x00f42400
 8006728:	016e3600 	.word	0x016e3600

0800672c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800672c:	b480      	push	{r7}
 800672e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006730:	4b03      	ldr	r3, [pc, #12]	@ (8006740 <HAL_RCC_GetHCLKFreq+0x14>)
 8006732:	681b      	ldr	r3, [r3, #0]
}
 8006734:	4618      	mov	r0, r3
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	20000000 	.word	0x20000000

08006744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006748:	f7ff fff0 	bl	800672c <HAL_RCC_GetHCLKFreq>
 800674c:	4602      	mov	r2, r0
 800674e:	4b06      	ldr	r3, [pc, #24]	@ (8006768 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	0a1b      	lsrs	r3, r3, #8
 8006754:	f003 0307 	and.w	r3, r3, #7
 8006758:	4904      	ldr	r1, [pc, #16]	@ (800676c <HAL_RCC_GetPCLK1Freq+0x28>)
 800675a:	5ccb      	ldrb	r3, [r1, r3]
 800675c:	f003 031f 	and.w	r3, r3, #31
 8006760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006764:	4618      	mov	r0, r3
 8006766:	bd80      	pop	{r7, pc}
 8006768:	40021000 	.word	0x40021000
 800676c:	08011858 	.word	0x08011858

08006770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006774:	f7ff ffda 	bl	800672c <HAL_RCC_GetHCLKFreq>
 8006778:	4602      	mov	r2, r0
 800677a:	4b06      	ldr	r3, [pc, #24]	@ (8006794 <HAL_RCC_GetPCLK2Freq+0x24>)
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	0adb      	lsrs	r3, r3, #11
 8006780:	f003 0307 	and.w	r3, r3, #7
 8006784:	4904      	ldr	r1, [pc, #16]	@ (8006798 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006786:	5ccb      	ldrb	r3, [r1, r3]
 8006788:	f003 031f 	and.w	r3, r3, #31
 800678c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006790:	4618      	mov	r0, r3
 8006792:	bd80      	pop	{r7, pc}
 8006794:	40021000 	.word	0x40021000
 8006798:	08011858 	.word	0x08011858

0800679c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80067a2:	4b1e      	ldr	r3, [pc, #120]	@ (800681c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	f003 0303 	and.w	r3, r3, #3
 80067aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80067ac:	4b1b      	ldr	r3, [pc, #108]	@ (800681c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	091b      	lsrs	r3, r3, #4
 80067b2:	f003 030f 	and.w	r3, r3, #15
 80067b6:	3301      	adds	r3, #1
 80067b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	2b03      	cmp	r3, #3
 80067be:	d10c      	bne.n	80067da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067c0:	4a17      	ldr	r2, [pc, #92]	@ (8006820 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c8:	4a14      	ldr	r2, [pc, #80]	@ (800681c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067ca:	68d2      	ldr	r2, [r2, #12]
 80067cc:	0a12      	lsrs	r2, r2, #8
 80067ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80067d2:	fb02 f303 	mul.w	r3, r2, r3
 80067d6:	617b      	str	r3, [r7, #20]
    break;
 80067d8:	e00c      	b.n	80067f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067da:	4a12      	ldr	r2, [pc, #72]	@ (8006824 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e2:	4a0e      	ldr	r2, [pc, #56]	@ (800681c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067e4:	68d2      	ldr	r2, [r2, #12]
 80067e6:	0a12      	lsrs	r2, r2, #8
 80067e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80067ec:	fb02 f303 	mul.w	r3, r2, r3
 80067f0:	617b      	str	r3, [r7, #20]
    break;
 80067f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80067f4:	4b09      	ldr	r3, [pc, #36]	@ (800681c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	0e5b      	lsrs	r3, r3, #25
 80067fa:	f003 0303 	and.w	r3, r3, #3
 80067fe:	3301      	adds	r3, #1
 8006800:	005b      	lsls	r3, r3, #1
 8006802:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	fbb2 f3f3 	udiv	r3, r2, r3
 800680c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800680e:	687b      	ldr	r3, [r7, #4]
}
 8006810:	4618      	mov	r0, r3
 8006812:	371c      	adds	r7, #28
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	40021000 	.word	0x40021000
 8006820:	016e3600 	.word	0x016e3600
 8006824:	00f42400 	.word	0x00f42400

08006828 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006830:	2300      	movs	r3, #0
 8006832:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006834:	2300      	movs	r3, #0
 8006836:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 8098 	beq.w	8006976 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006846:	2300      	movs	r3, #0
 8006848:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800684a:	4b43      	ldr	r3, [pc, #268]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800684c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800684e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10d      	bne.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006856:	4b40      	ldr	r3, [pc, #256]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800685a:	4a3f      	ldr	r2, [pc, #252]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800685c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006860:	6593      	str	r3, [r2, #88]	@ 0x58
 8006862:	4b3d      	ldr	r3, [pc, #244]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800686a:	60bb      	str	r3, [r7, #8]
 800686c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800686e:	2301      	movs	r3, #1
 8006870:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006872:	4b3a      	ldr	r3, [pc, #232]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a39      	ldr	r2, [pc, #228]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800687c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800687e:	f7fb fe03 	bl	8002488 <HAL_GetTick>
 8006882:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006884:	e009      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006886:	f7fb fdff 	bl	8002488 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	2b02      	cmp	r3, #2
 8006892:	d902      	bls.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	74fb      	strb	r3, [r7, #19]
        break;
 8006898:	e005      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800689a:	4b30      	ldr	r3, [pc, #192]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0ef      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80068a6:	7cfb      	ldrb	r3, [r7, #19]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d159      	bne.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80068ac:	4b2a      	ldr	r3, [pc, #168]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d01e      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d019      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80068c8:	4b23      	ldr	r3, [pc, #140]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068d4:	4b20      	ldr	r3, [pc, #128]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068da:	4a1f      	ldr	r2, [pc, #124]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068e4:	4b1c      	ldr	r3, [pc, #112]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80068f4:	4a18      	ldr	r2, [pc, #96]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	d016      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006906:	f7fb fdbf 	bl	8002488 <HAL_GetTick>
 800690a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800690c:	e00b      	b.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800690e:	f7fb fdbb 	bl	8002488 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	f241 3288 	movw	r2, #5000	@ 0x1388
 800691c:	4293      	cmp	r3, r2
 800691e:	d902      	bls.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	74fb      	strb	r3, [r7, #19]
            break;
 8006924:	e006      	b.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006926:	4b0c      	ldr	r3, [pc, #48]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b00      	cmp	r3, #0
 8006932:	d0ec      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006934:	7cfb      	ldrb	r3, [r7, #19]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10b      	bne.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800693a:	4b07      	ldr	r3, [pc, #28]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800693c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006940:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006948:	4903      	ldr	r1, [pc, #12]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800694a:	4313      	orrs	r3, r2
 800694c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006950:	e008      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006952:	7cfb      	ldrb	r3, [r7, #19]
 8006954:	74bb      	strb	r3, [r7, #18]
 8006956:	e005      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006958:	40021000 	.word	0x40021000
 800695c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006960:	7cfb      	ldrb	r3, [r7, #19]
 8006962:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006964:	7c7b      	ldrb	r3, [r7, #17]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d105      	bne.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800696a:	4ba6      	ldr	r3, [pc, #664]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800696c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800696e:	4aa5      	ldr	r2, [pc, #660]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006970:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006974:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00a      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006982:	4ba0      	ldr	r3, [pc, #640]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006988:	f023 0203 	bic.w	r2, r3, #3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	499c      	ldr	r1, [pc, #624]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006992:	4313      	orrs	r3, r2
 8006994:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0302 	and.w	r3, r3, #2
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00a      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069a4:	4b97      	ldr	r3, [pc, #604]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069aa:	f023 020c 	bic.w	r2, r3, #12
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	4994      	ldr	r1, [pc, #592]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0304 	and.w	r3, r3, #4
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80069c6:	4b8f      	ldr	r3, [pc, #572]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	498b      	ldr	r1, [pc, #556]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0308 	and.w	r3, r3, #8
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00a      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80069e8:	4b86      	ldr	r3, [pc, #536]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	4983      	ldr	r1, [pc, #524]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0320 	and.w	r3, r3, #32
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a0a:	4b7e      	ldr	r3, [pc, #504]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a10:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	497a      	ldr	r1, [pc, #488]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00a      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a2c:	4b75      	ldr	r3, [pc, #468]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a32:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	4972      	ldr	r1, [pc, #456]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00a      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a4e:	4b6d      	ldr	r3, [pc, #436]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a54:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	69db      	ldr	r3, [r3, #28]
 8006a5c:	4969      	ldr	r1, [pc, #420]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00a      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006a70:	4b64      	ldr	r3, [pc, #400]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a76:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	4961      	ldr	r1, [pc, #388]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00a      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a92:	4b5c      	ldr	r3, [pc, #368]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a98:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa0:	4958      	ldr	r1, [pc, #352]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d015      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ab4:	4b53      	ldr	r3, [pc, #332]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac2:	4950      	ldr	r1, [pc, #320]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ace:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ad2:	d105      	bne.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ad4:	4b4b      	ldr	r3, [pc, #300]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	4a4a      	ldr	r2, [pc, #296]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ada:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ade:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d015      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006aec:	4b45      	ldr	r3, [pc, #276]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006af2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afa:	4942      	ldr	r1, [pc, #264]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b0a:	d105      	bne.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b0c:	4b3d      	ldr	r3, [pc, #244]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	4a3c      	ldr	r2, [pc, #240]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b16:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d015      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b24:	4b37      	ldr	r3, [pc, #220]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b2a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b32:	4934      	ldr	r1, [pc, #208]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b42:	d105      	bne.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b44:	4b2f      	ldr	r3, [pc, #188]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	4a2e      	ldr	r2, [pc, #184]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b4e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d015      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b5c:	4b29      	ldr	r3, [pc, #164]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b6a:	4926      	ldr	r1, [pc, #152]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b7a:	d105      	bne.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b7c:	4b21      	ldr	r3, [pc, #132]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	4a20      	ldr	r2, [pc, #128]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b86:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d015      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b94:	4b1b      	ldr	r3, [pc, #108]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b9a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba2:	4918      	ldr	r1, [pc, #96]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bb2:	d105      	bne.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bb4:	4b13      	ldr	r3, [pc, #76]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	4a12      	ldr	r2, [pc, #72]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bbe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d015      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bda:	490a      	ldr	r1, [pc, #40]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006be6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bea:	d105      	bne.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006bec:	4b05      	ldr	r3, [pc, #20]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	4a04      	ldr	r2, [pc, #16]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bf6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006bf8:	7cbb      	ldrb	r3, [r7, #18]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3718      	adds	r7, #24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	40021000 	.word	0x40021000

08006c08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e09d      	b.n	8006d56 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d108      	bne.n	8006c34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c2a:	d009      	beq.n	8006c40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	61da      	str	r2, [r3, #28]
 8006c32:	e005      	b.n	8006c40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d106      	bne.n	8006c60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7fa fe38 	bl	80018d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2202      	movs	r2, #2
 8006c64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c80:	d902      	bls.n	8006c88 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c82:	2300      	movs	r3, #0
 8006c84:	60fb      	str	r3, [r7, #12]
 8006c86:	e002      	b.n	8006c8e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006c8c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006c96:	d007      	beq.n	8006ca8 <HAL_SPI_Init+0xa0>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ca0:	d002      	beq.n	8006ca8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	f003 0302 	and.w	r3, r3, #2
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	431a      	orrs	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cea:	ea42 0103 	orr.w	r1, r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	0c1b      	lsrs	r3, r3, #16
 8006d04:	f003 0204 	and.w	r2, r3, #4
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0c:	f003 0310 	and.w	r3, r3, #16
 8006d10:	431a      	orrs	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d16:	f003 0308 	and.w	r3, r3, #8
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006d24:	ea42 0103 	orr.w	r1, r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	69da      	ldr	r2, [r3, #28]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b08a      	sub	sp, #40	@ 0x28
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	60f8      	str	r0, [r7, #12]
 8006d66:	60b9      	str	r1, [r7, #8]
 8006d68:	607a      	str	r2, [r7, #4]
 8006d6a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d70:	2300      	movs	r3, #0
 8006d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d101      	bne.n	8006d84 <HAL_SPI_TransmitReceive+0x26>
 8006d80:	2302      	movs	r3, #2
 8006d82:	e20a      	b.n	800719a <HAL_SPI_TransmitReceive+0x43c>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d8c:	f7fb fb7c 	bl	8002488 <HAL_GetTick>
 8006d90:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d98:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006da0:	887b      	ldrh	r3, [r7, #2]
 8006da2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006da4:	887b      	ldrh	r3, [r7, #2]
 8006da6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006da8:	7efb      	ldrb	r3, [r7, #27]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d00e      	beq.n	8006dcc <HAL_SPI_TransmitReceive+0x6e>
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006db4:	d106      	bne.n	8006dc4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d102      	bne.n	8006dc4 <HAL_SPI_TransmitReceive+0x66>
 8006dbe:	7efb      	ldrb	r3, [r7, #27]
 8006dc0:	2b04      	cmp	r3, #4
 8006dc2:	d003      	beq.n	8006dcc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006dca:	e1e0      	b.n	800718e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d005      	beq.n	8006dde <HAL_SPI_TransmitReceive+0x80>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d002      	beq.n	8006dde <HAL_SPI_TransmitReceive+0x80>
 8006dd8:	887b      	ldrh	r3, [r7, #2]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d103      	bne.n	8006de6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006de4:	e1d3      	b.n	800718e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b04      	cmp	r3, #4
 8006df0:	d003      	beq.n	8006dfa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2205      	movs	r2, #5
 8006df6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	887a      	ldrh	r2, [r7, #2]
 8006e0a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	887a      	ldrh	r2, [r7, #2]
 8006e12:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	887a      	ldrh	r2, [r7, #2]
 8006e20:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	887a      	ldrh	r2, [r7, #2]
 8006e26:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e3c:	d802      	bhi.n	8006e44 <HAL_SPI_TransmitReceive+0xe6>
 8006e3e:	8a3b      	ldrh	r3, [r7, #16]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d908      	bls.n	8006e56 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e52:	605a      	str	r2, [r3, #4]
 8006e54:	e007      	b.n	8006e66 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e64:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e70:	2b40      	cmp	r3, #64	@ 0x40
 8006e72:	d007      	beq.n	8006e84 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e8c:	f240 8081 	bls.w	8006f92 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <HAL_SPI_TransmitReceive+0x140>
 8006e98:	8a7b      	ldrh	r3, [r7, #18]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d16d      	bne.n	8006f7a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ea2:	881a      	ldrh	r2, [r3, #0]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eae:	1c9a      	adds	r2, r3, #2
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ec2:	e05a      	b.n	8006f7a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f003 0302 	and.w	r3, r3, #2
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d11b      	bne.n	8006f0a <HAL_SPI_TransmitReceive+0x1ac>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d016      	beq.n	8006f0a <HAL_SPI_TransmitReceive+0x1ac>
 8006edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d113      	bne.n	8006f0a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee6:	881a      	ldrh	r2, [r3, #0]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef2:	1c9a      	adds	r2, r3, #2
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	3b01      	subs	r3, #1
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f003 0301 	and.w	r3, r3, #1
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d11c      	bne.n	8006f52 <HAL_SPI_TransmitReceive+0x1f4>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d016      	beq.n	8006f52 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68da      	ldr	r2, [r3, #12]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f2e:	b292      	uxth	r2, r2
 8006f30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f36:	1c9a      	adds	r2, r3, #2
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	3b01      	subs	r3, #1
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f52:	f7fb fa99 	bl	8002488 <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d80b      	bhi.n	8006f7a <HAL_SPI_TransmitReceive+0x21c>
 8006f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f68:	d007      	beq.n	8006f7a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006f78:	e109      	b.n	800718e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d19f      	bne.n	8006ec4 <HAL_SPI_TransmitReceive+0x166>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d199      	bne.n	8006ec4 <HAL_SPI_TransmitReceive+0x166>
 8006f90:	e0e3      	b.n	800715a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d003      	beq.n	8006fa2 <HAL_SPI_TransmitReceive+0x244>
 8006f9a:	8a7b      	ldrh	r3, [r7, #18]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	f040 80cf 	bne.w	8007140 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d912      	bls.n	8006fd2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb0:	881a      	ldrh	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fbc:	1c9a      	adds	r2, r3, #2
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	3b02      	subs	r3, #2
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006fd0:	e0b6      	b.n	8007140 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	330c      	adds	r3, #12
 8006fdc:	7812      	ldrb	r2, [r2, #0]
 8006fde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe4:	1c5a      	adds	r2, r3, #1
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ff8:	e0a2      	b.n	8007140 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f003 0302 	and.w	r3, r3, #2
 8007004:	2b02      	cmp	r3, #2
 8007006:	d134      	bne.n	8007072 <HAL_SPI_TransmitReceive+0x314>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800700c:	b29b      	uxth	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d02f      	beq.n	8007072 <HAL_SPI_TransmitReceive+0x314>
 8007012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007014:	2b01      	cmp	r3, #1
 8007016:	d12c      	bne.n	8007072 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800701c:	b29b      	uxth	r3, r3
 800701e:	2b01      	cmp	r3, #1
 8007020:	d912      	bls.n	8007048 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007026:	881a      	ldrh	r2, [r3, #0]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007032:	1c9a      	adds	r2, r3, #2
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800703c:	b29b      	uxth	r3, r3
 800703e:	3b02      	subs	r3, #2
 8007040:	b29a      	uxth	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007046:	e012      	b.n	800706e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	330c      	adds	r3, #12
 8007052:	7812      	ldrb	r2, [r2, #0]
 8007054:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007064:	b29b      	uxth	r3, r3
 8007066:	3b01      	subs	r3, #1
 8007068:	b29a      	uxth	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800706e:	2300      	movs	r3, #0
 8007070:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	2b01      	cmp	r3, #1
 800707e:	d148      	bne.n	8007112 <HAL_SPI_TransmitReceive+0x3b4>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007086:	b29b      	uxth	r3, r3
 8007088:	2b00      	cmp	r3, #0
 800708a:	d042      	beq.n	8007112 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007092:	b29b      	uxth	r3, r3
 8007094:	2b01      	cmp	r3, #1
 8007096:	d923      	bls.n	80070e0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68da      	ldr	r2, [r3, #12]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a2:	b292      	uxth	r2, r2
 80070a4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070aa:	1c9a      	adds	r2, r3, #2
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	3b02      	subs	r3, #2
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d81f      	bhi.n	800710e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685a      	ldr	r2, [r3, #4]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80070dc:	605a      	str	r2, [r3, #4]
 80070de:	e016      	b.n	800710e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f103 020c 	add.w	r2, r3, #12
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ec:	7812      	ldrb	r2, [r2, #0]
 80070ee:	b2d2      	uxtb	r2, r2
 80070f0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f6:	1c5a      	adds	r2, r3, #1
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007102:	b29b      	uxth	r3, r3
 8007104:	3b01      	subs	r3, #1
 8007106:	b29a      	uxth	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800710e:	2301      	movs	r3, #1
 8007110:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007112:	f7fb f9b9 	bl	8002488 <HAL_GetTick>
 8007116:	4602      	mov	r2, r0
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800711e:	429a      	cmp	r2, r3
 8007120:	d803      	bhi.n	800712a <HAL_SPI_TransmitReceive+0x3cc>
 8007122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007128:	d102      	bne.n	8007130 <HAL_SPI_TransmitReceive+0x3d2>
 800712a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712c:	2b00      	cmp	r3, #0
 800712e:	d107      	bne.n	8007140 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800713e:	e026      	b.n	800718e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007144:	b29b      	uxth	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	f47f af57 	bne.w	8006ffa <HAL_SPI_TransmitReceive+0x29c>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007152:	b29b      	uxth	r3, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	f47f af50 	bne.w	8006ffa <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800715a:	69fa      	ldr	r2, [r7, #28]
 800715c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f000 f94c 	bl	80073fc <SPI_EndRxTxTransaction>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d005      	beq.n	8007176 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2220      	movs	r2, #32
 8007174:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800717a:	2b00      	cmp	r3, #0
 800717c:	d003      	beq.n	8007186 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007184:	e003      	b.n	800718e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007196:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800719a:	4618      	mov	r0, r3
 800719c:	3728      	adds	r7, #40	@ 0x28
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b083      	sub	sp, #12
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80071b0:	b2db      	uxtb	r3, r3
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
	...

080071c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b088      	sub	sp, #32
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	603b      	str	r3, [r7, #0]
 80071cc:	4613      	mov	r3, r2
 80071ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80071d0:	f7fb f95a 	bl	8002488 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d8:	1a9b      	subs	r3, r3, r2
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	4413      	add	r3, r2
 80071de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071e0:	f7fb f952 	bl	8002488 <HAL_GetTick>
 80071e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071e6:	4b39      	ldr	r3, [pc, #228]	@ (80072cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	015b      	lsls	r3, r3, #5
 80071ec:	0d1b      	lsrs	r3, r3, #20
 80071ee:	69fa      	ldr	r2, [r7, #28]
 80071f0:	fb02 f303 	mul.w	r3, r2, r3
 80071f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071f6:	e054      	b.n	80072a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fe:	d050      	beq.n	80072a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007200:	f7fb f942 	bl	8002488 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	69fa      	ldr	r2, [r7, #28]
 800720c:	429a      	cmp	r2, r3
 800720e:	d902      	bls.n	8007216 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d13d      	bne.n	8007292 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007224:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800722e:	d111      	bne.n	8007254 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007238:	d004      	beq.n	8007244 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007242:	d107      	bne.n	8007254 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007252:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007258:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800725c:	d10f      	bne.n	800727e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800726c:	601a      	str	r2, [r3, #0]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800727c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e017      	b.n	80072c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	3b01      	subs	r3, #1
 80072a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	4013      	ands	r3, r2
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	bf0c      	ite	eq
 80072b2:	2301      	moveq	r3, #1
 80072b4:	2300      	movne	r3, #0
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	461a      	mov	r2, r3
 80072ba:	79fb      	ldrb	r3, [r7, #7]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d19b      	bne.n	80071f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3720      	adds	r7, #32
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	20000000 	.word	0x20000000

080072d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b08a      	sub	sp, #40	@ 0x28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
 80072dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80072de:	2300      	movs	r3, #0
 80072e0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80072e2:	f7fb f8d1 	bl	8002488 <HAL_GetTick>
 80072e6:	4602      	mov	r2, r0
 80072e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ea:	1a9b      	subs	r3, r3, r2
 80072ec:	683a      	ldr	r2, [r7, #0]
 80072ee:	4413      	add	r3, r2
 80072f0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80072f2:	f7fb f8c9 	bl	8002488 <HAL_GetTick>
 80072f6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	330c      	adds	r3, #12
 80072fe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007300:	4b3d      	ldr	r3, [pc, #244]	@ (80073f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	4613      	mov	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4413      	add	r3, r2
 800730a:	00da      	lsls	r2, r3, #3
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	0d1b      	lsrs	r3, r3, #20
 8007310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007312:	fb02 f303 	mul.w	r3, r2, r3
 8007316:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007318:	e060      	b.n	80073dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007320:	d107      	bne.n	8007332 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d104      	bne.n	8007332 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	b2db      	uxtb	r3, r3
 800732e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007330:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007338:	d050      	beq.n	80073dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800733a:	f7fb f8a5 	bl	8002488 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007346:	429a      	cmp	r2, r3
 8007348:	d902      	bls.n	8007350 <SPI_WaitFifoStateUntilTimeout+0x80>
 800734a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734c:	2b00      	cmp	r3, #0
 800734e:	d13d      	bne.n	80073cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	685a      	ldr	r2, [r3, #4]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800735e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007368:	d111      	bne.n	800738e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007372:	d004      	beq.n	800737e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800737c:	d107      	bne.n	800738e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800738c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007392:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007396:	d10f      	bne.n	80073b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80073a6:	601a      	str	r2, [r3, #0]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80073b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e010      	b.n	80073ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	3b01      	subs	r3, #1
 80073da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	689a      	ldr	r2, [r3, #8]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	4013      	ands	r3, r2
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d196      	bne.n	800731a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3728      	adds	r7, #40	@ 0x28
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	20000000 	.word	0x20000000

080073fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af02      	add	r7, sp, #8
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	2200      	movs	r2, #0
 8007410:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f7ff ff5b 	bl	80072d0 <SPI_WaitFifoStateUntilTimeout>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d007      	beq.n	8007430 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007424:	f043 0220 	orr.w	r2, r3, #32
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e027      	b.n	8007480 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2200      	movs	r2, #0
 8007438:	2180      	movs	r1, #128	@ 0x80
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f7ff fec0 	bl	80071c0 <SPI_WaitFlagStateUntilTimeout>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d007      	beq.n	8007456 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800744a:	f043 0220 	orr.w	r2, r3, #32
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e014      	b.n	8007480 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	2200      	movs	r2, #0
 800745e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f7ff ff34 	bl	80072d0 <SPI_WaitFifoStateUntilTimeout>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d007      	beq.n	800747e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007472:	f043 0220 	orr.w	r2, r3, #32
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e000      	b.n	8007480 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e049      	b.n	800752e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d106      	bne.n	80074b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7fa fdb0 	bl	8002014 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2202      	movs	r2, #2
 80074b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	3304      	adds	r3, #4
 80074c4:	4619      	mov	r1, r3
 80074c6:	4610      	mov	r0, r2
 80074c8:	f000 fc9e 	bl	8007e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3708      	adds	r7, #8
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
	...

08007538 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b01      	cmp	r3, #1
 800754a:	d001      	beq.n	8007550 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e042      	b.n	80075d6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2202      	movs	r2, #2
 8007554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a21      	ldr	r2, [pc, #132]	@ (80075e4 <HAL_TIM_Base_Start+0xac>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d018      	beq.n	8007594 <HAL_TIM_Base_Start+0x5c>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800756a:	d013      	beq.n	8007594 <HAL_TIM_Base_Start+0x5c>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a1d      	ldr	r2, [pc, #116]	@ (80075e8 <HAL_TIM_Base_Start+0xb0>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d00e      	beq.n	8007594 <HAL_TIM_Base_Start+0x5c>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a1c      	ldr	r2, [pc, #112]	@ (80075ec <HAL_TIM_Base_Start+0xb4>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d009      	beq.n	8007594 <HAL_TIM_Base_Start+0x5c>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a1a      	ldr	r2, [pc, #104]	@ (80075f0 <HAL_TIM_Base_Start+0xb8>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d004      	beq.n	8007594 <HAL_TIM_Base_Start+0x5c>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a19      	ldr	r2, [pc, #100]	@ (80075f4 <HAL_TIM_Base_Start+0xbc>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d115      	bne.n	80075c0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	689a      	ldr	r2, [r3, #8]
 800759a:	4b17      	ldr	r3, [pc, #92]	@ (80075f8 <HAL_TIM_Base_Start+0xc0>)
 800759c:	4013      	ands	r3, r2
 800759e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2b06      	cmp	r3, #6
 80075a4:	d015      	beq.n	80075d2 <HAL_TIM_Base_Start+0x9a>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075ac:	d011      	beq.n	80075d2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f042 0201 	orr.w	r2, r2, #1
 80075bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075be:	e008      	b.n	80075d2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f042 0201 	orr.w	r2, r2, #1
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	e000      	b.n	80075d4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	40012c00 	.word	0x40012c00
 80075e8:	40000400 	.word	0x40000400
 80075ec:	40000800 	.word	0x40000800
 80075f0:	40013400 	.word	0x40013400
 80075f4:	40014000 	.word	0x40014000
 80075f8:	00010007 	.word	0x00010007

080075fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d101      	bne.n	800760e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e049      	b.n	80076a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d106      	bne.n	8007628 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f841 	bl	80076aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2202      	movs	r2, #2
 800762c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	3304      	adds	r3, #4
 8007638:	4619      	mov	r1, r3
 800763a:	4610      	mov	r0, r2
 800763c:	f000 fbe4 	bl	8007e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80076aa:	b480      	push	{r7}
 80076ac:	b083      	sub	sp, #12
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80076b2:	bf00      	nop
 80076b4:	370c      	adds	r7, #12
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
	...

080076c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d109      	bne.n	80076e4 <HAL_TIM_PWM_Start+0x24>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b01      	cmp	r3, #1
 80076da:	bf14      	ite	ne
 80076dc:	2301      	movne	r3, #1
 80076de:	2300      	moveq	r3, #0
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	e03c      	b.n	800775e <HAL_TIM_PWM_Start+0x9e>
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	2b04      	cmp	r3, #4
 80076e8:	d109      	bne.n	80076fe <HAL_TIM_PWM_Start+0x3e>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	bf14      	ite	ne
 80076f6:	2301      	movne	r3, #1
 80076f8:	2300      	moveq	r3, #0
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	e02f      	b.n	800775e <HAL_TIM_PWM_Start+0x9e>
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2b08      	cmp	r3, #8
 8007702:	d109      	bne.n	8007718 <HAL_TIM_PWM_Start+0x58>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b01      	cmp	r3, #1
 800770e:	bf14      	ite	ne
 8007710:	2301      	movne	r3, #1
 8007712:	2300      	moveq	r3, #0
 8007714:	b2db      	uxtb	r3, r3
 8007716:	e022      	b.n	800775e <HAL_TIM_PWM_Start+0x9e>
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	2b0c      	cmp	r3, #12
 800771c:	d109      	bne.n	8007732 <HAL_TIM_PWM_Start+0x72>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b01      	cmp	r3, #1
 8007728:	bf14      	ite	ne
 800772a:	2301      	movne	r3, #1
 800772c:	2300      	moveq	r3, #0
 800772e:	b2db      	uxtb	r3, r3
 8007730:	e015      	b.n	800775e <HAL_TIM_PWM_Start+0x9e>
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	2b10      	cmp	r3, #16
 8007736:	d109      	bne.n	800774c <HAL_TIM_PWM_Start+0x8c>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800773e:	b2db      	uxtb	r3, r3
 8007740:	2b01      	cmp	r3, #1
 8007742:	bf14      	ite	ne
 8007744:	2301      	movne	r3, #1
 8007746:	2300      	moveq	r3, #0
 8007748:	b2db      	uxtb	r3, r3
 800774a:	e008      	b.n	800775e <HAL_TIM_PWM_Start+0x9e>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b01      	cmp	r3, #1
 8007756:	bf14      	ite	ne
 8007758:	2301      	movne	r3, #1
 800775a:	2300      	moveq	r3, #0
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e097      	b.n	8007896 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d104      	bne.n	8007776 <HAL_TIM_PWM_Start+0xb6>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2202      	movs	r2, #2
 8007770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007774:	e023      	b.n	80077be <HAL_TIM_PWM_Start+0xfe>
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	2b04      	cmp	r3, #4
 800777a:	d104      	bne.n	8007786 <HAL_TIM_PWM_Start+0xc6>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2202      	movs	r2, #2
 8007780:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007784:	e01b      	b.n	80077be <HAL_TIM_PWM_Start+0xfe>
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	2b08      	cmp	r3, #8
 800778a:	d104      	bne.n	8007796 <HAL_TIM_PWM_Start+0xd6>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2202      	movs	r2, #2
 8007790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007794:	e013      	b.n	80077be <HAL_TIM_PWM_Start+0xfe>
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	2b0c      	cmp	r3, #12
 800779a:	d104      	bne.n	80077a6 <HAL_TIM_PWM_Start+0xe6>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2202      	movs	r2, #2
 80077a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80077a4:	e00b      	b.n	80077be <HAL_TIM_PWM_Start+0xfe>
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	2b10      	cmp	r3, #16
 80077aa:	d104      	bne.n	80077b6 <HAL_TIM_PWM_Start+0xf6>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2202      	movs	r2, #2
 80077b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077b4:	e003      	b.n	80077be <HAL_TIM_PWM_Start+0xfe>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2202      	movs	r2, #2
 80077ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2201      	movs	r2, #1
 80077c4:	6839      	ldr	r1, [r7, #0]
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 ff4c 	bl	8008664 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a33      	ldr	r2, [pc, #204]	@ (80078a0 <HAL_TIM_PWM_Start+0x1e0>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d013      	beq.n	80077fe <HAL_TIM_PWM_Start+0x13e>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a32      	ldr	r2, [pc, #200]	@ (80078a4 <HAL_TIM_PWM_Start+0x1e4>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d00e      	beq.n	80077fe <HAL_TIM_PWM_Start+0x13e>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a30      	ldr	r2, [pc, #192]	@ (80078a8 <HAL_TIM_PWM_Start+0x1e8>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d009      	beq.n	80077fe <HAL_TIM_PWM_Start+0x13e>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a2f      	ldr	r2, [pc, #188]	@ (80078ac <HAL_TIM_PWM_Start+0x1ec>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d004      	beq.n	80077fe <HAL_TIM_PWM_Start+0x13e>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a2d      	ldr	r2, [pc, #180]	@ (80078b0 <HAL_TIM_PWM_Start+0x1f0>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d101      	bne.n	8007802 <HAL_TIM_PWM_Start+0x142>
 80077fe:	2301      	movs	r3, #1
 8007800:	e000      	b.n	8007804 <HAL_TIM_PWM_Start+0x144>
 8007802:	2300      	movs	r3, #0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d007      	beq.n	8007818 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007816:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a20      	ldr	r2, [pc, #128]	@ (80078a0 <HAL_TIM_PWM_Start+0x1e0>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d018      	beq.n	8007854 <HAL_TIM_PWM_Start+0x194>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800782a:	d013      	beq.n	8007854 <HAL_TIM_PWM_Start+0x194>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a20      	ldr	r2, [pc, #128]	@ (80078b4 <HAL_TIM_PWM_Start+0x1f4>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d00e      	beq.n	8007854 <HAL_TIM_PWM_Start+0x194>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a1f      	ldr	r2, [pc, #124]	@ (80078b8 <HAL_TIM_PWM_Start+0x1f8>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d009      	beq.n	8007854 <HAL_TIM_PWM_Start+0x194>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a17      	ldr	r2, [pc, #92]	@ (80078a4 <HAL_TIM_PWM_Start+0x1e4>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d004      	beq.n	8007854 <HAL_TIM_PWM_Start+0x194>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a16      	ldr	r2, [pc, #88]	@ (80078a8 <HAL_TIM_PWM_Start+0x1e8>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d115      	bne.n	8007880 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	689a      	ldr	r2, [r3, #8]
 800785a:	4b18      	ldr	r3, [pc, #96]	@ (80078bc <HAL_TIM_PWM_Start+0x1fc>)
 800785c:	4013      	ands	r3, r2
 800785e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2b06      	cmp	r3, #6
 8007864:	d015      	beq.n	8007892 <HAL_TIM_PWM_Start+0x1d2>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800786c:	d011      	beq.n	8007892 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f042 0201 	orr.w	r2, r2, #1
 800787c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800787e:	e008      	b.n	8007892 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f042 0201 	orr.w	r2, r2, #1
 800788e:	601a      	str	r2, [r3, #0]
 8007890:	e000      	b.n	8007894 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007892:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	40012c00 	.word	0x40012c00
 80078a4:	40013400 	.word	0x40013400
 80078a8:	40014000 	.word	0x40014000
 80078ac:	40014400 	.word	0x40014400
 80078b0:	40014800 	.word	0x40014800
 80078b4:	40000400 	.word	0x40000400
 80078b8:	40000800 	.word	0x40000800
 80078bc:	00010007 	.word	0x00010007

080078c0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2200      	movs	r2, #0
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	4618      	mov	r0, r3
 80078d4:	f000 fec6 	bl	8008664 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a3e      	ldr	r2, [pc, #248]	@ (80079d8 <HAL_TIM_PWM_Stop+0x118>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d013      	beq.n	800790a <HAL_TIM_PWM_Stop+0x4a>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a3d      	ldr	r2, [pc, #244]	@ (80079dc <HAL_TIM_PWM_Stop+0x11c>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d00e      	beq.n	800790a <HAL_TIM_PWM_Stop+0x4a>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a3b      	ldr	r2, [pc, #236]	@ (80079e0 <HAL_TIM_PWM_Stop+0x120>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d009      	beq.n	800790a <HAL_TIM_PWM_Stop+0x4a>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a3a      	ldr	r2, [pc, #232]	@ (80079e4 <HAL_TIM_PWM_Stop+0x124>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d004      	beq.n	800790a <HAL_TIM_PWM_Stop+0x4a>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a38      	ldr	r2, [pc, #224]	@ (80079e8 <HAL_TIM_PWM_Stop+0x128>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d101      	bne.n	800790e <HAL_TIM_PWM_Stop+0x4e>
 800790a:	2301      	movs	r3, #1
 800790c:	e000      	b.n	8007910 <HAL_TIM_PWM_Stop+0x50>
 800790e:	2300      	movs	r3, #0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d017      	beq.n	8007944 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6a1a      	ldr	r2, [r3, #32]
 800791a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800791e:	4013      	ands	r3, r2
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10f      	bne.n	8007944 <HAL_TIM_PWM_Stop+0x84>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6a1a      	ldr	r2, [r3, #32]
 800792a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800792e:	4013      	ands	r3, r2
 8007930:	2b00      	cmp	r3, #0
 8007932:	d107      	bne.n	8007944 <HAL_TIM_PWM_Stop+0x84>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007942:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6a1a      	ldr	r2, [r3, #32]
 800794a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800794e:	4013      	ands	r3, r2
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10f      	bne.n	8007974 <HAL_TIM_PWM_Stop+0xb4>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6a1a      	ldr	r2, [r3, #32]
 800795a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800795e:	4013      	ands	r3, r2
 8007960:	2b00      	cmp	r3, #0
 8007962:	d107      	bne.n	8007974 <HAL_TIM_PWM_Stop+0xb4>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f022 0201 	bic.w	r2, r2, #1
 8007972:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d104      	bne.n	8007984 <HAL_TIM_PWM_Stop+0xc4>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007982:	e023      	b.n	80079cc <HAL_TIM_PWM_Stop+0x10c>
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	2b04      	cmp	r3, #4
 8007988:	d104      	bne.n	8007994 <HAL_TIM_PWM_Stop+0xd4>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007992:	e01b      	b.n	80079cc <HAL_TIM_PWM_Stop+0x10c>
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	2b08      	cmp	r3, #8
 8007998:	d104      	bne.n	80079a4 <HAL_TIM_PWM_Stop+0xe4>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079a2:	e013      	b.n	80079cc <HAL_TIM_PWM_Stop+0x10c>
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	2b0c      	cmp	r3, #12
 80079a8:	d104      	bne.n	80079b4 <HAL_TIM_PWM_Stop+0xf4>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80079b2:	e00b      	b.n	80079cc <HAL_TIM_PWM_Stop+0x10c>
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	2b10      	cmp	r3, #16
 80079b8:	d104      	bne.n	80079c4 <HAL_TIM_PWM_Stop+0x104>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079c2:	e003      	b.n	80079cc <HAL_TIM_PWM_Stop+0x10c>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	40012c00 	.word	0x40012c00
 80079dc:	40013400 	.word	0x40013400
 80079e0:	40014000 	.word	0x40014000
 80079e4:	40014400 	.word	0x40014400
 80079e8:	40014800 	.word	0x40014800

080079ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079f8:	2300      	movs	r3, #0
 80079fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d101      	bne.n	8007a0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a06:	2302      	movs	r3, #2
 8007a08:	e0ff      	b.n	8007c0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b14      	cmp	r3, #20
 8007a16:	f200 80f0 	bhi.w	8007bfa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a20:	08007a75 	.word	0x08007a75
 8007a24:	08007bfb 	.word	0x08007bfb
 8007a28:	08007bfb 	.word	0x08007bfb
 8007a2c:	08007bfb 	.word	0x08007bfb
 8007a30:	08007ab5 	.word	0x08007ab5
 8007a34:	08007bfb 	.word	0x08007bfb
 8007a38:	08007bfb 	.word	0x08007bfb
 8007a3c:	08007bfb 	.word	0x08007bfb
 8007a40:	08007af7 	.word	0x08007af7
 8007a44:	08007bfb 	.word	0x08007bfb
 8007a48:	08007bfb 	.word	0x08007bfb
 8007a4c:	08007bfb 	.word	0x08007bfb
 8007a50:	08007b37 	.word	0x08007b37
 8007a54:	08007bfb 	.word	0x08007bfb
 8007a58:	08007bfb 	.word	0x08007bfb
 8007a5c:	08007bfb 	.word	0x08007bfb
 8007a60:	08007b79 	.word	0x08007b79
 8007a64:	08007bfb 	.word	0x08007bfb
 8007a68:	08007bfb 	.word	0x08007bfb
 8007a6c:	08007bfb 	.word	0x08007bfb
 8007a70:	08007bb9 	.word	0x08007bb9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68b9      	ldr	r1, [r7, #8]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 fa60 	bl	8007f40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	699a      	ldr	r2, [r3, #24]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f042 0208 	orr.w	r2, r2, #8
 8007a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	699a      	ldr	r2, [r3, #24]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f022 0204 	bic.w	r2, r2, #4
 8007a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6999      	ldr	r1, [r3, #24]
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	691a      	ldr	r2, [r3, #16]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	619a      	str	r2, [r3, #24]
      break;
 8007ab2:	e0a5      	b.n	8007c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68b9      	ldr	r1, [r7, #8]
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 fad0 	bl	8008060 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	699a      	ldr	r2, [r3, #24]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	699a      	ldr	r2, [r3, #24]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6999      	ldr	r1, [r3, #24]
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	021a      	lsls	r2, r3, #8
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	430a      	orrs	r2, r1
 8007af2:	619a      	str	r2, [r3, #24]
      break;
 8007af4:	e084      	b.n	8007c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68b9      	ldr	r1, [r7, #8]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 fb39 	bl	8008174 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	69da      	ldr	r2, [r3, #28]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f042 0208 	orr.w	r2, r2, #8
 8007b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	69da      	ldr	r2, [r3, #28]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f022 0204 	bic.w	r2, r2, #4
 8007b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	69d9      	ldr	r1, [r3, #28]
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	691a      	ldr	r2, [r3, #16]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	430a      	orrs	r2, r1
 8007b32:	61da      	str	r2, [r3, #28]
      break;
 8007b34:	e064      	b.n	8007c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68b9      	ldr	r1, [r7, #8]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f000 fba1 	bl	8008284 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	69da      	ldr	r2, [r3, #28]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	69da      	ldr	r2, [r3, #28]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	69d9      	ldr	r1, [r3, #28]
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	021a      	lsls	r2, r3, #8
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	430a      	orrs	r2, r1
 8007b74:	61da      	str	r2, [r3, #28]
      break;
 8007b76:	e043      	b.n	8007c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68b9      	ldr	r1, [r7, #8]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f000 fc0a 	bl	8008398 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f042 0208 	orr.w	r2, r2, #8
 8007b92:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f022 0204 	bic.w	r2, r2, #4
 8007ba2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	691a      	ldr	r2, [r3, #16]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	430a      	orrs	r2, r1
 8007bb4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007bb6:	e023      	b.n	8007c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68b9      	ldr	r1, [r7, #8]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 fc4e 	bl	8008460 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007bd2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007be2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	021a      	lsls	r2, r3, #8
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	430a      	orrs	r2, r1
 8007bf6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007bf8:	e002      	b.n	8007c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	75fb      	strb	r3, [r7, #23]
      break;
 8007bfe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3718      	adds	r7, #24
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop

08007c14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d101      	bne.n	8007c30 <HAL_TIM_ConfigClockSource+0x1c>
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	e0de      	b.n	8007dee <HAL_TIM_ConfigClockSource+0x1da>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007c4e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007c52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a63      	ldr	r2, [pc, #396]	@ (8007df8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	f000 80a9 	beq.w	8007dc2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007c70:	4a61      	ldr	r2, [pc, #388]	@ (8007df8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	f200 80ae 	bhi.w	8007dd4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007c78:	4a60      	ldr	r2, [pc, #384]	@ (8007dfc <HAL_TIM_ConfigClockSource+0x1e8>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	f000 80a1 	beq.w	8007dc2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007c80:	4a5e      	ldr	r2, [pc, #376]	@ (8007dfc <HAL_TIM_ConfigClockSource+0x1e8>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	f200 80a6 	bhi.w	8007dd4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007c88:	4a5d      	ldr	r2, [pc, #372]	@ (8007e00 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	f000 8099 	beq.w	8007dc2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007c90:	4a5b      	ldr	r2, [pc, #364]	@ (8007e00 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	f200 809e 	bhi.w	8007dd4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007c98:	4a5a      	ldr	r2, [pc, #360]	@ (8007e04 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	f000 8091 	beq.w	8007dc2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007ca0:	4a58      	ldr	r2, [pc, #352]	@ (8007e04 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	f200 8096 	bhi.w	8007dd4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007ca8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007cac:	f000 8089 	beq.w	8007dc2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007cb0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007cb4:	f200 808e 	bhi.w	8007dd4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007cb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cbc:	d03e      	beq.n	8007d3c <HAL_TIM_ConfigClockSource+0x128>
 8007cbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cc2:	f200 8087 	bhi.w	8007dd4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007cc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cca:	f000 8086 	beq.w	8007dda <HAL_TIM_ConfigClockSource+0x1c6>
 8007cce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cd2:	d87f      	bhi.n	8007dd4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007cd4:	2b70      	cmp	r3, #112	@ 0x70
 8007cd6:	d01a      	beq.n	8007d0e <HAL_TIM_ConfigClockSource+0xfa>
 8007cd8:	2b70      	cmp	r3, #112	@ 0x70
 8007cda:	d87b      	bhi.n	8007dd4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007cdc:	2b60      	cmp	r3, #96	@ 0x60
 8007cde:	d050      	beq.n	8007d82 <HAL_TIM_ConfigClockSource+0x16e>
 8007ce0:	2b60      	cmp	r3, #96	@ 0x60
 8007ce2:	d877      	bhi.n	8007dd4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007ce4:	2b50      	cmp	r3, #80	@ 0x50
 8007ce6:	d03c      	beq.n	8007d62 <HAL_TIM_ConfigClockSource+0x14e>
 8007ce8:	2b50      	cmp	r3, #80	@ 0x50
 8007cea:	d873      	bhi.n	8007dd4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007cec:	2b40      	cmp	r3, #64	@ 0x40
 8007cee:	d058      	beq.n	8007da2 <HAL_TIM_ConfigClockSource+0x18e>
 8007cf0:	2b40      	cmp	r3, #64	@ 0x40
 8007cf2:	d86f      	bhi.n	8007dd4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007cf4:	2b30      	cmp	r3, #48	@ 0x30
 8007cf6:	d064      	beq.n	8007dc2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007cf8:	2b30      	cmp	r3, #48	@ 0x30
 8007cfa:	d86b      	bhi.n	8007dd4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007cfc:	2b20      	cmp	r3, #32
 8007cfe:	d060      	beq.n	8007dc2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007d00:	2b20      	cmp	r3, #32
 8007d02:	d867      	bhi.n	8007dd4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d05c      	beq.n	8007dc2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007d08:	2b10      	cmp	r3, #16
 8007d0a:	d05a      	beq.n	8007dc2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007d0c:	e062      	b.n	8007dd4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d1e:	f000 fc81 	bl	8008624 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007d30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	609a      	str	r2, [r3, #8]
      break;
 8007d3a:	e04f      	b.n	8007ddc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d4c:	f000 fc6a 	bl	8008624 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689a      	ldr	r2, [r3, #8]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d5e:	609a      	str	r2, [r3, #8]
      break;
 8007d60:	e03c      	b.n	8007ddc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d6e:	461a      	mov	r2, r3
 8007d70:	f000 fbdc 	bl	800852c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2150      	movs	r1, #80	@ 0x50
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 fc35 	bl	80085ea <TIM_ITRx_SetConfig>
      break;
 8007d80:	e02c      	b.n	8007ddc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d8e:	461a      	mov	r2, r3
 8007d90:	f000 fbfb 	bl	800858a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2160      	movs	r1, #96	@ 0x60
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f000 fc25 	bl	80085ea <TIM_ITRx_SetConfig>
      break;
 8007da0:	e01c      	b.n	8007ddc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dae:	461a      	mov	r2, r3
 8007db0:	f000 fbbc 	bl	800852c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2140      	movs	r1, #64	@ 0x40
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f000 fc15 	bl	80085ea <TIM_ITRx_SetConfig>
      break;
 8007dc0:	e00c      	b.n	8007ddc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4619      	mov	r1, r3
 8007dcc:	4610      	mov	r0, r2
 8007dce:	f000 fc0c 	bl	80085ea <TIM_ITRx_SetConfig>
      break;
 8007dd2:	e003      	b.n	8007ddc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8007dd8:	e000      	b.n	8007ddc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8007dda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	00100070 	.word	0x00100070
 8007dfc:	00100040 	.word	0x00100040
 8007e00:	00100030 	.word	0x00100030
 8007e04:	00100020 	.word	0x00100020

08007e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a42      	ldr	r2, [pc, #264]	@ (8007f24 <TIM_Base_SetConfig+0x11c>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d00f      	beq.n	8007e40 <TIM_Base_SetConfig+0x38>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e26:	d00b      	beq.n	8007e40 <TIM_Base_SetConfig+0x38>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a3f      	ldr	r2, [pc, #252]	@ (8007f28 <TIM_Base_SetConfig+0x120>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d007      	beq.n	8007e40 <TIM_Base_SetConfig+0x38>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a3e      	ldr	r2, [pc, #248]	@ (8007f2c <TIM_Base_SetConfig+0x124>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d003      	beq.n	8007e40 <TIM_Base_SetConfig+0x38>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a3d      	ldr	r2, [pc, #244]	@ (8007f30 <TIM_Base_SetConfig+0x128>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d108      	bne.n	8007e52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a33      	ldr	r2, [pc, #204]	@ (8007f24 <TIM_Base_SetConfig+0x11c>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d01b      	beq.n	8007e92 <TIM_Base_SetConfig+0x8a>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e60:	d017      	beq.n	8007e92 <TIM_Base_SetConfig+0x8a>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a30      	ldr	r2, [pc, #192]	@ (8007f28 <TIM_Base_SetConfig+0x120>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d013      	beq.n	8007e92 <TIM_Base_SetConfig+0x8a>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a2f      	ldr	r2, [pc, #188]	@ (8007f2c <TIM_Base_SetConfig+0x124>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d00f      	beq.n	8007e92 <TIM_Base_SetConfig+0x8a>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a2e      	ldr	r2, [pc, #184]	@ (8007f30 <TIM_Base_SetConfig+0x128>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d00b      	beq.n	8007e92 <TIM_Base_SetConfig+0x8a>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a2d      	ldr	r2, [pc, #180]	@ (8007f34 <TIM_Base_SetConfig+0x12c>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d007      	beq.n	8007e92 <TIM_Base_SetConfig+0x8a>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a2c      	ldr	r2, [pc, #176]	@ (8007f38 <TIM_Base_SetConfig+0x130>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d003      	beq.n	8007e92 <TIM_Base_SetConfig+0x8a>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a2b      	ldr	r2, [pc, #172]	@ (8007f3c <TIM_Base_SetConfig+0x134>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d108      	bne.n	8007ea4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	689a      	ldr	r2, [r3, #8]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a16      	ldr	r2, [pc, #88]	@ (8007f24 <TIM_Base_SetConfig+0x11c>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d00f      	beq.n	8007ef0 <TIM_Base_SetConfig+0xe8>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a17      	ldr	r2, [pc, #92]	@ (8007f30 <TIM_Base_SetConfig+0x128>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d00b      	beq.n	8007ef0 <TIM_Base_SetConfig+0xe8>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a16      	ldr	r2, [pc, #88]	@ (8007f34 <TIM_Base_SetConfig+0x12c>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d007      	beq.n	8007ef0 <TIM_Base_SetConfig+0xe8>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a15      	ldr	r2, [pc, #84]	@ (8007f38 <TIM_Base_SetConfig+0x130>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d003      	beq.n	8007ef0 <TIM_Base_SetConfig+0xe8>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a14      	ldr	r2, [pc, #80]	@ (8007f3c <TIM_Base_SetConfig+0x134>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d103      	bne.n	8007ef8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	691a      	ldr	r2, [r3, #16]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d105      	bne.n	8007f16 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	f023 0201 	bic.w	r2, r3, #1
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	611a      	str	r2, [r3, #16]
  }
}
 8007f16:	bf00      	nop
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	40012c00 	.word	0x40012c00
 8007f28:	40000400 	.word	0x40000400
 8007f2c:	40000800 	.word	0x40000800
 8007f30:	40013400 	.word	0x40013400
 8007f34:	40014000 	.word	0x40014000
 8007f38:	40014400 	.word	0x40014400
 8007f3c:	40014800 	.word	0x40014800

08007f40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b087      	sub	sp, #28
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a1b      	ldr	r3, [r3, #32]
 8007f4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a1b      	ldr	r3, [r3, #32]
 8007f54:	f023 0201 	bic.w	r2, r3, #1
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f023 0303 	bic.w	r3, r3, #3
 8007f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	f023 0302 	bic.w	r3, r3, #2
 8007f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a2c      	ldr	r2, [pc, #176]	@ (800804c <TIM_OC1_SetConfig+0x10c>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d00f      	beq.n	8007fc0 <TIM_OC1_SetConfig+0x80>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a2b      	ldr	r2, [pc, #172]	@ (8008050 <TIM_OC1_SetConfig+0x110>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d00b      	beq.n	8007fc0 <TIM_OC1_SetConfig+0x80>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a2a      	ldr	r2, [pc, #168]	@ (8008054 <TIM_OC1_SetConfig+0x114>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d007      	beq.n	8007fc0 <TIM_OC1_SetConfig+0x80>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a29      	ldr	r2, [pc, #164]	@ (8008058 <TIM_OC1_SetConfig+0x118>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d003      	beq.n	8007fc0 <TIM_OC1_SetConfig+0x80>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a28      	ldr	r2, [pc, #160]	@ (800805c <TIM_OC1_SetConfig+0x11c>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d10c      	bne.n	8007fda <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	f023 0308 	bic.w	r3, r3, #8
 8007fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	f023 0304 	bic.w	r3, r3, #4
 8007fd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800804c <TIM_OC1_SetConfig+0x10c>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d00f      	beq.n	8008002 <TIM_OC1_SetConfig+0xc2>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a1a      	ldr	r2, [pc, #104]	@ (8008050 <TIM_OC1_SetConfig+0x110>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d00b      	beq.n	8008002 <TIM_OC1_SetConfig+0xc2>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a19      	ldr	r2, [pc, #100]	@ (8008054 <TIM_OC1_SetConfig+0x114>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d007      	beq.n	8008002 <TIM_OC1_SetConfig+0xc2>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a18      	ldr	r2, [pc, #96]	@ (8008058 <TIM_OC1_SetConfig+0x118>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d003      	beq.n	8008002 <TIM_OC1_SetConfig+0xc2>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a17      	ldr	r2, [pc, #92]	@ (800805c <TIM_OC1_SetConfig+0x11c>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d111      	bne.n	8008026 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	4313      	orrs	r3, r2
 800801a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	699b      	ldr	r3, [r3, #24]
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	4313      	orrs	r3, r2
 8008024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	621a      	str	r2, [r3, #32]
}
 8008040:	bf00      	nop
 8008042:	371c      	adds	r7, #28
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr
 800804c:	40012c00 	.word	0x40012c00
 8008050:	40013400 	.word	0x40013400
 8008054:	40014000 	.word	0x40014000
 8008058:	40014400 	.word	0x40014400
 800805c:	40014800 	.word	0x40014800

08008060 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008060:	b480      	push	{r7}
 8008062:	b087      	sub	sp, #28
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a1b      	ldr	r3, [r3, #32]
 8008074:	f023 0210 	bic.w	r2, r3, #16
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800808e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800809a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	021b      	lsls	r3, r3, #8
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	f023 0320 	bic.w	r3, r3, #32
 80080ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	011b      	lsls	r3, r3, #4
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a28      	ldr	r2, [pc, #160]	@ (8008160 <TIM_OC2_SetConfig+0x100>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d003      	beq.n	80080cc <TIM_OC2_SetConfig+0x6c>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a27      	ldr	r2, [pc, #156]	@ (8008164 <TIM_OC2_SetConfig+0x104>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d10d      	bne.n	80080e8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	011b      	lsls	r3, r3, #4
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	4313      	orrs	r3, r2
 80080de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a1d      	ldr	r2, [pc, #116]	@ (8008160 <TIM_OC2_SetConfig+0x100>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d00f      	beq.n	8008110 <TIM_OC2_SetConfig+0xb0>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a1c      	ldr	r2, [pc, #112]	@ (8008164 <TIM_OC2_SetConfig+0x104>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d00b      	beq.n	8008110 <TIM_OC2_SetConfig+0xb0>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a1b      	ldr	r2, [pc, #108]	@ (8008168 <TIM_OC2_SetConfig+0x108>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d007      	beq.n	8008110 <TIM_OC2_SetConfig+0xb0>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a1a      	ldr	r2, [pc, #104]	@ (800816c <TIM_OC2_SetConfig+0x10c>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d003      	beq.n	8008110 <TIM_OC2_SetConfig+0xb0>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a19      	ldr	r2, [pc, #100]	@ (8008170 <TIM_OC2_SetConfig+0x110>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d113      	bne.n	8008138 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008116:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800811e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	695b      	ldr	r3, [r3, #20]
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	4313      	orrs	r3, r2
 800812a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	693a      	ldr	r2, [r7, #16]
 8008134:	4313      	orrs	r3, r2
 8008136:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	685a      	ldr	r2, [r3, #4]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	697a      	ldr	r2, [r7, #20]
 8008150:	621a      	str	r2, [r3, #32]
}
 8008152:	bf00      	nop
 8008154:	371c      	adds	r7, #28
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	40012c00 	.word	0x40012c00
 8008164:	40013400 	.word	0x40013400
 8008168:	40014000 	.word	0x40014000
 800816c:	40014400 	.word	0x40014400
 8008170:	40014800 	.word	0x40014800

08008174 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008174:	b480      	push	{r7}
 8008176:	b087      	sub	sp, #28
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a1b      	ldr	r3, [r3, #32]
 8008188:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	69db      	ldr	r3, [r3, #28]
 800819a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f023 0303 	bic.w	r3, r3, #3
 80081ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80081c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	021b      	lsls	r3, r3, #8
 80081c8:	697a      	ldr	r2, [r7, #20]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a27      	ldr	r2, [pc, #156]	@ (8008270 <TIM_OC3_SetConfig+0xfc>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d003      	beq.n	80081de <TIM_OC3_SetConfig+0x6a>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a26      	ldr	r2, [pc, #152]	@ (8008274 <TIM_OC3_SetConfig+0x100>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d10d      	bne.n	80081fa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80081e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	021b      	lsls	r3, r3, #8
 80081ec:	697a      	ldr	r2, [r7, #20]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80081f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a1c      	ldr	r2, [pc, #112]	@ (8008270 <TIM_OC3_SetConfig+0xfc>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d00f      	beq.n	8008222 <TIM_OC3_SetConfig+0xae>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a1b      	ldr	r2, [pc, #108]	@ (8008274 <TIM_OC3_SetConfig+0x100>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d00b      	beq.n	8008222 <TIM_OC3_SetConfig+0xae>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a1a      	ldr	r2, [pc, #104]	@ (8008278 <TIM_OC3_SetConfig+0x104>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d007      	beq.n	8008222 <TIM_OC3_SetConfig+0xae>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a19      	ldr	r2, [pc, #100]	@ (800827c <TIM_OC3_SetConfig+0x108>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d003      	beq.n	8008222 <TIM_OC3_SetConfig+0xae>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a18      	ldr	r2, [pc, #96]	@ (8008280 <TIM_OC3_SetConfig+0x10c>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d113      	bne.n	800824a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	011b      	lsls	r3, r3, #4
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	4313      	orrs	r3, r2
 800823c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	011b      	lsls	r3, r3, #4
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	4313      	orrs	r3, r2
 8008248:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	685a      	ldr	r2, [r3, #4]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	621a      	str	r2, [r3, #32]
}
 8008264:	bf00      	nop
 8008266:	371c      	adds	r7, #28
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr
 8008270:	40012c00 	.word	0x40012c00
 8008274:	40013400 	.word	0x40013400
 8008278:	40014000 	.word	0x40014000
 800827c:	40014400 	.word	0x40014400
 8008280:	40014800 	.word	0x40014800

08008284 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008284:	b480      	push	{r7}
 8008286:	b087      	sub	sp, #28
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a1b      	ldr	r3, [r3, #32]
 8008298:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	69db      	ldr	r3, [r3, #28]
 80082aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80082b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	021b      	lsls	r3, r3, #8
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80082d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	031b      	lsls	r3, r3, #12
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	4313      	orrs	r3, r2
 80082de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a28      	ldr	r2, [pc, #160]	@ (8008384 <TIM_OC4_SetConfig+0x100>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d003      	beq.n	80082f0 <TIM_OC4_SetConfig+0x6c>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a27      	ldr	r2, [pc, #156]	@ (8008388 <TIM_OC4_SetConfig+0x104>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d10d      	bne.n	800830c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80082f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	031b      	lsls	r3, r3, #12
 80082fe:	697a      	ldr	r2, [r7, #20]
 8008300:	4313      	orrs	r3, r2
 8008302:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800830a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a1d      	ldr	r2, [pc, #116]	@ (8008384 <TIM_OC4_SetConfig+0x100>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d00f      	beq.n	8008334 <TIM_OC4_SetConfig+0xb0>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a1c      	ldr	r2, [pc, #112]	@ (8008388 <TIM_OC4_SetConfig+0x104>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d00b      	beq.n	8008334 <TIM_OC4_SetConfig+0xb0>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a1b      	ldr	r2, [pc, #108]	@ (800838c <TIM_OC4_SetConfig+0x108>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d007      	beq.n	8008334 <TIM_OC4_SetConfig+0xb0>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a1a      	ldr	r2, [pc, #104]	@ (8008390 <TIM_OC4_SetConfig+0x10c>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d003      	beq.n	8008334 <TIM_OC4_SetConfig+0xb0>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a19      	ldr	r2, [pc, #100]	@ (8008394 <TIM_OC4_SetConfig+0x110>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d113      	bne.n	800835c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800833a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008342:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	695b      	ldr	r3, [r3, #20]
 8008348:	019b      	lsls	r3, r3, #6
 800834a:	693a      	ldr	r2, [r7, #16]
 800834c:	4313      	orrs	r3, r2
 800834e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	699b      	ldr	r3, [r3, #24]
 8008354:	019b      	lsls	r3, r3, #6
 8008356:	693a      	ldr	r2, [r7, #16]
 8008358:	4313      	orrs	r3, r2
 800835a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	693a      	ldr	r2, [r7, #16]
 8008360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	685a      	ldr	r2, [r3, #4]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	621a      	str	r2, [r3, #32]
}
 8008376:	bf00      	nop
 8008378:	371c      	adds	r7, #28
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	40012c00 	.word	0x40012c00
 8008388:	40013400 	.word	0x40013400
 800838c:	40014000 	.word	0x40014000
 8008390:	40014400 	.word	0x40014400
 8008394:	40014800 	.word	0x40014800

08008398 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008398:	b480      	push	{r7}
 800839a:	b087      	sub	sp, #28
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a1b      	ldr	r3, [r3, #32]
 80083ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80083dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	041b      	lsls	r3, r3, #16
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a17      	ldr	r2, [pc, #92]	@ (800844c <TIM_OC5_SetConfig+0xb4>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d00f      	beq.n	8008412 <TIM_OC5_SetConfig+0x7a>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a16      	ldr	r2, [pc, #88]	@ (8008450 <TIM_OC5_SetConfig+0xb8>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d00b      	beq.n	8008412 <TIM_OC5_SetConfig+0x7a>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a15      	ldr	r2, [pc, #84]	@ (8008454 <TIM_OC5_SetConfig+0xbc>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d007      	beq.n	8008412 <TIM_OC5_SetConfig+0x7a>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a14      	ldr	r2, [pc, #80]	@ (8008458 <TIM_OC5_SetConfig+0xc0>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d003      	beq.n	8008412 <TIM_OC5_SetConfig+0x7a>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a13      	ldr	r2, [pc, #76]	@ (800845c <TIM_OC5_SetConfig+0xc4>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d109      	bne.n	8008426 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008418:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	695b      	ldr	r3, [r3, #20]
 800841e:	021b      	lsls	r3, r3, #8
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	4313      	orrs	r3, r2
 8008424:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	697a      	ldr	r2, [r7, #20]
 800842a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	685a      	ldr	r2, [r3, #4]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	621a      	str	r2, [r3, #32]
}
 8008440:	bf00      	nop
 8008442:	371c      	adds	r7, #28
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr
 800844c:	40012c00 	.word	0x40012c00
 8008450:	40013400 	.word	0x40013400
 8008454:	40014000 	.word	0x40014000
 8008458:	40014400 	.word	0x40014400
 800845c:	40014800 	.word	0x40014800

08008460 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008460:	b480      	push	{r7}
 8008462:	b087      	sub	sp, #28
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a1b      	ldr	r3, [r3, #32]
 8008474:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800848e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	021b      	lsls	r3, r3, #8
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	4313      	orrs	r3, r2
 800849e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80084a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	051b      	lsls	r3, r3, #20
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a18      	ldr	r2, [pc, #96]	@ (8008518 <TIM_OC6_SetConfig+0xb8>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d00f      	beq.n	80084dc <TIM_OC6_SetConfig+0x7c>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a17      	ldr	r2, [pc, #92]	@ (800851c <TIM_OC6_SetConfig+0xbc>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d00b      	beq.n	80084dc <TIM_OC6_SetConfig+0x7c>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a16      	ldr	r2, [pc, #88]	@ (8008520 <TIM_OC6_SetConfig+0xc0>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d007      	beq.n	80084dc <TIM_OC6_SetConfig+0x7c>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a15      	ldr	r2, [pc, #84]	@ (8008524 <TIM_OC6_SetConfig+0xc4>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d003      	beq.n	80084dc <TIM_OC6_SetConfig+0x7c>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a14      	ldr	r2, [pc, #80]	@ (8008528 <TIM_OC6_SetConfig+0xc8>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d109      	bne.n	80084f0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80084e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	695b      	ldr	r3, [r3, #20]
 80084e8:	029b      	lsls	r3, r3, #10
 80084ea:	697a      	ldr	r2, [r7, #20]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	685a      	ldr	r2, [r3, #4]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	693a      	ldr	r2, [r7, #16]
 8008508:	621a      	str	r2, [r3, #32]
}
 800850a:	bf00      	nop
 800850c:	371c      	adds	r7, #28
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	40012c00 	.word	0x40012c00
 800851c:	40013400 	.word	0x40013400
 8008520:	40014000 	.word	0x40014000
 8008524:	40014400 	.word	0x40014400
 8008528:	40014800 	.word	0x40014800

0800852c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800852c:	b480      	push	{r7}
 800852e:	b087      	sub	sp, #28
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	f023 0201 	bic.w	r2, r3, #1
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	699b      	ldr	r3, [r3, #24]
 800854e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	011b      	lsls	r3, r3, #4
 800855c:	693a      	ldr	r2, [r7, #16]
 800855e:	4313      	orrs	r3, r2
 8008560:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	f023 030a 	bic.w	r3, r3, #10
 8008568:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	4313      	orrs	r3, r2
 8008570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	693a      	ldr	r2, [r7, #16]
 8008576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	621a      	str	r2, [r3, #32]
}
 800857e:	bf00      	nop
 8008580:	371c      	adds	r7, #28
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800858a:	b480      	push	{r7}
 800858c:	b087      	sub	sp, #28
 800858e:	af00      	add	r7, sp, #0
 8008590:	60f8      	str	r0, [r7, #12]
 8008592:	60b9      	str	r1, [r7, #8]
 8008594:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6a1b      	ldr	r3, [r3, #32]
 80085a0:	f023 0210 	bic.w	r2, r3, #16
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80085b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	031b      	lsls	r3, r3, #12
 80085ba:	693a      	ldr	r2, [r7, #16]
 80085bc:	4313      	orrs	r3, r2
 80085be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80085c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	011b      	lsls	r3, r3, #4
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	621a      	str	r2, [r3, #32]
}
 80085de:	bf00      	nop
 80085e0:	371c      	adds	r7, #28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b085      	sub	sp, #20
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008600:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008604:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008606:	683a      	ldr	r2, [r7, #0]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	4313      	orrs	r3, r2
 800860c:	f043 0307 	orr.w	r3, r3, #7
 8008610:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	609a      	str	r2, [r3, #8]
}
 8008618:	bf00      	nop
 800861a:	3714      	adds	r7, #20
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008624:	b480      	push	{r7}
 8008626:	b087      	sub	sp, #28
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
 8008630:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800863e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	021a      	lsls	r2, r3, #8
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	431a      	orrs	r2, r3
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	4313      	orrs	r3, r2
 800864c:	697a      	ldr	r2, [r7, #20]
 800864e:	4313      	orrs	r3, r2
 8008650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	609a      	str	r2, [r3, #8]
}
 8008658:	bf00      	nop
 800865a:	371c      	adds	r7, #28
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008664:	b480      	push	{r7}
 8008666:	b087      	sub	sp, #28
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	f003 031f 	and.w	r3, r3, #31
 8008676:	2201      	movs	r2, #1
 8008678:	fa02 f303 	lsl.w	r3, r2, r3
 800867c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6a1a      	ldr	r2, [r3, #32]
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	43db      	mvns	r3, r3
 8008686:	401a      	ands	r2, r3
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6a1a      	ldr	r2, [r3, #32]
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	f003 031f 	and.w	r3, r3, #31
 8008696:	6879      	ldr	r1, [r7, #4]
 8008698:	fa01 f303 	lsl.w	r3, r1, r3
 800869c:	431a      	orrs	r2, r3
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	621a      	str	r2, [r3, #32]
}
 80086a2:	bf00      	nop
 80086a4:	371c      	adds	r7, #28
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
	...

080086b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d101      	bne.n	80086c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086c4:	2302      	movs	r3, #2
 80086c6:	e065      	b.n	8008794 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2202      	movs	r2, #2
 80086d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a2c      	ldr	r2, [pc, #176]	@ (80087a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d004      	beq.n	80086fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a2b      	ldr	r2, [pc, #172]	@ (80087a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d108      	bne.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008702:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	4313      	orrs	r3, r2
 800870c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008714:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008718:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	4313      	orrs	r3, r2
 8008722:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a1b      	ldr	r2, [pc, #108]	@ (80087a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d018      	beq.n	8008768 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800873e:	d013      	beq.n	8008768 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a18      	ldr	r2, [pc, #96]	@ (80087a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d00e      	beq.n	8008768 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a17      	ldr	r2, [pc, #92]	@ (80087ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d009      	beq.n	8008768 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a12      	ldr	r2, [pc, #72]	@ (80087a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d004      	beq.n	8008768 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a13      	ldr	r2, [pc, #76]	@ (80087b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d10c      	bne.n	8008782 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800876e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	68ba      	ldr	r2, [r7, #8]
 8008776:	4313      	orrs	r3, r2
 8008778:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3714      	adds	r7, #20
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	40012c00 	.word	0x40012c00
 80087a4:	40013400 	.word	0x40013400
 80087a8:	40000400 	.word	0x40000400
 80087ac:	40000800 	.word	0x40000800
 80087b0:	40014000 	.word	0x40014000

080087b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80087be:	2300      	movs	r3, #0
 80087c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d101      	bne.n	80087d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80087cc:	2302      	movs	r3, #2
 80087ce:	e073      	b.n	80088b8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	4313      	orrs	r3, r2
 8008800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4313      	orrs	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	4313      	orrs	r3, r2
 800881c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	695b      	ldr	r3, [r3, #20]
 8008828:	4313      	orrs	r3, r2
 800882a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008836:	4313      	orrs	r3, r2
 8008838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	699b      	ldr	r3, [r3, #24]
 8008844:	041b      	lsls	r3, r3, #16
 8008846:	4313      	orrs	r3, r2
 8008848:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	69db      	ldr	r3, [r3, #28]
 8008854:	4313      	orrs	r3, r2
 8008856:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a19      	ldr	r2, [pc, #100]	@ (80088c4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d004      	beq.n	800886c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a18      	ldr	r2, [pc, #96]	@ (80088c8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d11c      	bne.n	80088a6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008876:	051b      	lsls	r3, r3, #20
 8008878:	4313      	orrs	r3, r2
 800887a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	6a1b      	ldr	r3, [r3, #32]
 8008886:	4313      	orrs	r3, r2
 8008888:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008894:	4313      	orrs	r3, r2
 8008896:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a2:	4313      	orrs	r3, r2
 80088a4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	68fa      	ldr	r2, [r7, #12]
 80088ac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr
 80088c4:	40012c00 	.word	0x40012c00
 80088c8:	40013400 	.word	0x40013400

080088cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d101      	bne.n	80088de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e042      	b.n	8008964 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d106      	bne.n	80088f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f7f9 fc7d 	bl	80021f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2224      	movs	r2, #36	@ 0x24
 80088fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f022 0201 	bic.w	r2, r2, #1
 800890c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008912:	2b00      	cmp	r3, #0
 8008914:	d002      	beq.n	800891c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 ff6e 	bl	80097f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 fc9f 	bl	8009260 <UART_SetConfig>
 8008922:	4603      	mov	r3, r0
 8008924:	2b01      	cmp	r3, #1
 8008926:	d101      	bne.n	800892c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	e01b      	b.n	8008964 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	685a      	ldr	r2, [r3, #4]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800893a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	689a      	ldr	r2, [r3, #8]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800894a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f042 0201 	orr.w	r2, r2, #1
 800895a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 ffed 	bl	800993c <UART_CheckIdleState>
 8008962:	4603      	mov	r3, r0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b08a      	sub	sp, #40	@ 0x28
 8008970:	af02      	add	r7, sp, #8
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	603b      	str	r3, [r7, #0]
 8008978:	4613      	mov	r3, r2
 800897a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008982:	2b20      	cmp	r3, #32
 8008984:	d17b      	bne.n	8008a7e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d002      	beq.n	8008992 <HAL_UART_Transmit+0x26>
 800898c:	88fb      	ldrh	r3, [r7, #6]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d101      	bne.n	8008996 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e074      	b.n	8008a80 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2221      	movs	r2, #33	@ 0x21
 80089a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089a6:	f7f9 fd6f 	bl	8002488 <HAL_GetTick>
 80089aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	88fa      	ldrh	r2, [r7, #6]
 80089b0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	88fa      	ldrh	r2, [r7, #6]
 80089b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089c4:	d108      	bne.n	80089d8 <HAL_UART_Transmit+0x6c>
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d104      	bne.n	80089d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80089ce:	2300      	movs	r3, #0
 80089d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	61bb      	str	r3, [r7, #24]
 80089d6:	e003      	b.n	80089e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089dc:	2300      	movs	r3, #0
 80089de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80089e0:	e030      	b.n	8008a44 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	9300      	str	r3, [sp, #0]
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	2200      	movs	r2, #0
 80089ea:	2180      	movs	r1, #128	@ 0x80
 80089ec:	68f8      	ldr	r0, [r7, #12]
 80089ee:	f001 f84f 	bl	8009a90 <UART_WaitOnFlagUntilTimeout>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d005      	beq.n	8008a04 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2220      	movs	r2, #32
 80089fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008a00:	2303      	movs	r3, #3
 8008a02:	e03d      	b.n	8008a80 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10b      	bne.n	8008a22 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	881b      	ldrh	r3, [r3, #0]
 8008a0e:	461a      	mov	r2, r3
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a18:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	3302      	adds	r3, #2
 8008a1e:	61bb      	str	r3, [r7, #24]
 8008a20:	e007      	b.n	8008a32 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	781a      	ldrb	r2, [r3, #0]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1c8      	bne.n	80089e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	2200      	movs	r2, #0
 8008a58:	2140      	movs	r1, #64	@ 0x40
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f001 f818 	bl	8009a90 <UART_WaitOnFlagUntilTimeout>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d005      	beq.n	8008a72 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2220      	movs	r2, #32
 8008a6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	e006      	b.n	8008a80 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2220      	movs	r2, #32
 8008a76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	e000      	b.n	8008a80 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008a7e:	2302      	movs	r3, #2
  }
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3720      	adds	r7, #32
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b08a      	sub	sp, #40	@ 0x28
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	4613      	mov	r3, r2
 8008a94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a9c:	2b20      	cmp	r3, #32
 8008a9e:	d167      	bne.n	8008b70 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d002      	beq.n	8008aac <HAL_UART_Transmit_DMA+0x24>
 8008aa6:	88fb      	ldrh	r3, [r7, #6]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d101      	bne.n	8008ab0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e060      	b.n	8008b72 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	88fa      	ldrh	r2, [r7, #6]
 8008aba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	88fa      	ldrh	r2, [r7, #6]
 8008ac2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2221      	movs	r2, #33	@ 0x21
 8008ad2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d028      	beq.n	8008b30 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ae2:	4a26      	ldr	r2, [pc, #152]	@ (8008b7c <HAL_UART_Transmit_DMA+0xf4>)
 8008ae4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008aea:	4a25      	ldr	r2, [pc, #148]	@ (8008b80 <HAL_UART_Transmit_DMA+0xf8>)
 8008aec:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008af2:	4a24      	ldr	r2, [pc, #144]	@ (8008b84 <HAL_UART_Transmit_DMA+0xfc>)
 8008af4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008afa:	2200      	movs	r2, #0
 8008afc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b06:	4619      	mov	r1, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	3328      	adds	r3, #40	@ 0x28
 8008b0e:	461a      	mov	r2, r3
 8008b10:	88fb      	ldrh	r3, [r7, #6]
 8008b12:	f7fc fc83 	bl	800541c <HAL_DMA_Start_IT>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d009      	beq.n	8008b30 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2210      	movs	r2, #16
 8008b20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2220      	movs	r2, #32
 8008b28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e020      	b.n	8008b72 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2240      	movs	r2, #64	@ 0x40
 8008b36:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	3308      	adds	r3, #8
 8008b3e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	e853 3f00 	ldrex	r3, [r3]
 8008b46:	613b      	str	r3, [r7, #16]
   return(result);
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	3308      	adds	r3, #8
 8008b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b58:	623a      	str	r2, [r7, #32]
 8008b5a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5c:	69f9      	ldr	r1, [r7, #28]
 8008b5e:	6a3a      	ldr	r2, [r7, #32]
 8008b60:	e841 2300 	strex	r3, r2, [r1]
 8008b64:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d1e5      	bne.n	8008b38 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	e000      	b.n	8008b72 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008b70:	2302      	movs	r3, #2
  }
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3728      	adds	r7, #40	@ 0x28
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	08009e07 	.word	0x08009e07
 8008b80:	08009ea1 	.word	0x08009ea1
 8008b84:	0800a027 	.word	0x0800a027

08008b88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b0ba      	sub	sp, #232	@ 0xe8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	69db      	ldr	r3, [r3, #28]
 8008b96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008bae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008bb2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008bbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d11b      	bne.n	8008bfc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bc8:	f003 0320 	and.w	r3, r3, #32
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d015      	beq.n	8008bfc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bd4:	f003 0320 	and.w	r3, r3, #32
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d105      	bne.n	8008be8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008bdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d009      	beq.n	8008bfc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f000 82e3 	beq.w	80091b8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	4798      	blx	r3
      }
      return;
 8008bfa:	e2dd      	b.n	80091b8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008bfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 8123 	beq.w	8008e4c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008c06:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008c0a:	4b8d      	ldr	r3, [pc, #564]	@ (8008e40 <HAL_UART_IRQHandler+0x2b8>)
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d106      	bne.n	8008c20 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008c12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008c16:	4b8b      	ldr	r3, [pc, #556]	@ (8008e44 <HAL_UART_IRQHandler+0x2bc>)
 8008c18:	4013      	ands	r3, r2
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	f000 8116 	beq.w	8008e4c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c24:	f003 0301 	and.w	r3, r3, #1
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d011      	beq.n	8008c50 <HAL_UART_IRQHandler+0xc8>
 8008c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00b      	beq.n	8008c50 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c46:	f043 0201 	orr.w	r2, r3, #1
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c54:	f003 0302 	and.w	r3, r3, #2
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d011      	beq.n	8008c80 <HAL_UART_IRQHandler+0xf8>
 8008c5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c60:	f003 0301 	and.w	r3, r3, #1
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00b      	beq.n	8008c80 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2202      	movs	r2, #2
 8008c6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c76:	f043 0204 	orr.w	r2, r3, #4
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c84:	f003 0304 	and.w	r3, r3, #4
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d011      	beq.n	8008cb0 <HAL_UART_IRQHandler+0x128>
 8008c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c90:	f003 0301 	and.w	r3, r3, #1
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00b      	beq.n	8008cb0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2204      	movs	r2, #4
 8008c9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ca6:	f043 0202 	orr.w	r2, r3, #2
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cb4:	f003 0308 	and.w	r3, r3, #8
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d017      	beq.n	8008cec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cc0:	f003 0320 	and.w	r3, r3, #32
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d105      	bne.n	8008cd4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008cc8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008ccc:	4b5c      	ldr	r3, [pc, #368]	@ (8008e40 <HAL_UART_IRQHandler+0x2b8>)
 8008cce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00b      	beq.n	8008cec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2208      	movs	r2, #8
 8008cda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ce2:	f043 0208 	orr.w	r2, r3, #8
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d012      	beq.n	8008d1e <HAL_UART_IRQHandler+0x196>
 8008cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cfc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d00c      	beq.n	8008d1e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d14:	f043 0220 	orr.w	r2, r3, #32
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f000 8249 	beq.w	80091bc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d2e:	f003 0320 	and.w	r3, r3, #32
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d013      	beq.n	8008d5e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d3a:	f003 0320 	and.w	r3, r3, #32
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d105      	bne.n	8008d4e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d007      	beq.n	8008d5e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d003      	beq.n	8008d5e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d64:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d72:	2b40      	cmp	r3, #64	@ 0x40
 8008d74:	d005      	beq.n	8008d82 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008d7a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d054      	beq.n	8008e2c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 ffd9 	bl	8009d3a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d92:	2b40      	cmp	r3, #64	@ 0x40
 8008d94:	d146      	bne.n	8008e24 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	3308      	adds	r3, #8
 8008d9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008da4:	e853 3f00 	ldrex	r3, [r3]
 8008da8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008dac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008db0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008db4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3308      	adds	r3, #8
 8008dbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008dc2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008dc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008dce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008dd2:	e841 2300 	strex	r3, r2, [r1]
 8008dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008dda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1d9      	bne.n	8008d96 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d017      	beq.n	8008e1c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008df2:	4a15      	ldr	r2, [pc, #84]	@ (8008e48 <HAL_UART_IRQHandler+0x2c0>)
 8008df4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7fc fbe1 	bl	80055c4 <HAL_DMA_Abort_IT>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d019      	beq.n	8008e3c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008e16:	4610      	mov	r0, r2
 8008e18:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e1a:	e00f      	b.n	8008e3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f9ff 	bl	8009220 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e22:	e00b      	b.n	8008e3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 f9fb 	bl	8009220 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e2a:	e007      	b.n	8008e3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 f9f7 	bl	8009220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008e3a:	e1bf      	b.n	80091bc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e3c:	bf00      	nop
    return;
 8008e3e:	e1bd      	b.n	80091bc <HAL_UART_IRQHandler+0x634>
 8008e40:	10000001 	.word	0x10000001
 8008e44:	04000120 	.word	0x04000120
 8008e48:	0800a0a7 	.word	0x0800a0a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	f040 8153 	bne.w	80090fc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e5a:	f003 0310 	and.w	r3, r3, #16
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f000 814c 	beq.w	80090fc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e68:	f003 0310 	and.w	r3, r3, #16
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f000 8145 	beq.w	80090fc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2210      	movs	r2, #16
 8008e78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e84:	2b40      	cmp	r3, #64	@ 0x40
 8008e86:	f040 80bb 	bne.w	8009000 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f000 818f 	beq.w	80091c0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ea8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008eac:	429a      	cmp	r2, r3
 8008eae:	f080 8187 	bcs.w	80091c0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008eb8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 0320 	and.w	r3, r3, #32
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f040 8087 	bne.w	8008fde <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008edc:	e853 3f00 	ldrex	r3, [r3]
 8008ee0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008ee8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008eec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008efa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008efe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008f06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008f0a:	e841 2300 	strex	r3, r2, [r1]
 8008f0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1da      	bne.n	8008ed0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	3308      	adds	r3, #8
 8008f20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f24:	e853 3f00 	ldrex	r3, [r3]
 8008f28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008f2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f2c:	f023 0301 	bic.w	r3, r3, #1
 8008f30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	3308      	adds	r3, #8
 8008f3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008f3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008f42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008f46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008f4a:	e841 2300 	strex	r3, r2, [r1]
 8008f4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008f50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1e1      	bne.n	8008f1a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3308      	adds	r3, #8
 8008f5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f60:	e853 3f00 	ldrex	r3, [r3]
 8008f64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008f66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	3308      	adds	r3, #8
 8008f76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008f7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008f7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008f80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008f82:	e841 2300 	strex	r3, r2, [r1]
 8008f86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008f88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1e3      	bne.n	8008f56 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2220      	movs	r2, #32
 8008f92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fa4:	e853 3f00 	ldrex	r3, [r3]
 8008fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008faa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fac:	f023 0310 	bic.w	r3, r3, #16
 8008fb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	461a      	mov	r2, r3
 8008fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008fc0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008fc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008fc6:	e841 2300 	strex	r3, r2, [r1]
 8008fca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008fcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1e4      	bne.n	8008f9c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fc fa9a 	bl	8005512 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2202      	movs	r2, #2
 8008fe2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f002 fe83 	bl	800bd04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008ffe:	e0df      	b.n	80091c0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800900c:	b29b      	uxth	r3, r3
 800900e:	1ad3      	subs	r3, r2, r3
 8009010:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800901a:	b29b      	uxth	r3, r3
 800901c:	2b00      	cmp	r3, #0
 800901e:	f000 80d1 	beq.w	80091c4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8009022:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009026:	2b00      	cmp	r3, #0
 8009028:	f000 80cc 	beq.w	80091c4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009034:	e853 3f00 	ldrex	r3, [r3]
 8009038:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800903a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800903c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009040:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	461a      	mov	r2, r3
 800904a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800904e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009050:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009052:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009054:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009056:	e841 2300 	strex	r3, r2, [r1]
 800905a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800905c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800905e:	2b00      	cmp	r3, #0
 8009060:	d1e4      	bne.n	800902c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3308      	adds	r3, #8
 8009068:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906c:	e853 3f00 	ldrex	r3, [r3]
 8009070:	623b      	str	r3, [r7, #32]
   return(result);
 8009072:	6a3b      	ldr	r3, [r7, #32]
 8009074:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009078:	f023 0301 	bic.w	r3, r3, #1
 800907c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	3308      	adds	r3, #8
 8009086:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800908a:	633a      	str	r2, [r7, #48]	@ 0x30
 800908c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009090:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009092:	e841 2300 	strex	r3, r2, [r1]
 8009096:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1e1      	bne.n	8009062 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2220      	movs	r2, #32
 80090a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	e853 3f00 	ldrex	r3, [r3]
 80090be:	60fb      	str	r3, [r7, #12]
   return(result);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f023 0310 	bic.w	r3, r3, #16
 80090c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	461a      	mov	r2, r3
 80090d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80090d4:	61fb      	str	r3, [r7, #28]
 80090d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d8:	69b9      	ldr	r1, [r7, #24]
 80090da:	69fa      	ldr	r2, [r7, #28]
 80090dc:	e841 2300 	strex	r3, r2, [r1]
 80090e0:	617b      	str	r3, [r7, #20]
   return(result);
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d1e4      	bne.n	80090b2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2202      	movs	r2, #2
 80090ec:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80090ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80090f2:	4619      	mov	r1, r3
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f002 fe05 	bl	800bd04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090fa:	e063      	b.n	80091c4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80090fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009100:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00e      	beq.n	8009126 <HAL_UART_IRQHandler+0x59e>
 8009108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800910c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009110:	2b00      	cmp	r3, #0
 8009112:	d008      	beq.n	8009126 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800911c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f001 f802 	bl	800a128 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009124:	e051      	b.n	80091ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800912a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800912e:	2b00      	cmp	r3, #0
 8009130:	d014      	beq.n	800915c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800913a:	2b00      	cmp	r3, #0
 800913c:	d105      	bne.n	800914a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800913e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009142:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009146:	2b00      	cmp	r3, #0
 8009148:	d008      	beq.n	800915c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800914e:	2b00      	cmp	r3, #0
 8009150:	d03a      	beq.n	80091c8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	4798      	blx	r3
    }
    return;
 800915a:	e035      	b.n	80091c8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800915c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009164:	2b00      	cmp	r3, #0
 8009166:	d009      	beq.n	800917c <HAL_UART_IRQHandler+0x5f4>
 8009168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800916c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009170:	2b00      	cmp	r3, #0
 8009172:	d003      	beq.n	800917c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 ffac 	bl	800a0d2 <UART_EndTransmit_IT>
    return;
 800917a:	e026      	b.n	80091ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800917c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009180:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009184:	2b00      	cmp	r3, #0
 8009186:	d009      	beq.n	800919c <HAL_UART_IRQHandler+0x614>
 8009188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800918c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009190:	2b00      	cmp	r3, #0
 8009192:	d003      	beq.n	800919c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 ffdb 	bl	800a150 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800919a:	e016      	b.n	80091ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800919c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d010      	beq.n	80091ca <HAL_UART_IRQHandler+0x642>
 80091a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	da0c      	bge.n	80091ca <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 ffc3 	bl	800a13c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091b6:	e008      	b.n	80091ca <HAL_UART_IRQHandler+0x642>
      return;
 80091b8:	bf00      	nop
 80091ba:	e006      	b.n	80091ca <HAL_UART_IRQHandler+0x642>
    return;
 80091bc:	bf00      	nop
 80091be:	e004      	b.n	80091ca <HAL_UART_IRQHandler+0x642>
      return;
 80091c0:	bf00      	nop
 80091c2:	e002      	b.n	80091ca <HAL_UART_IRQHandler+0x642>
      return;
 80091c4:	bf00      	nop
 80091c6:	e000      	b.n	80091ca <HAL_UART_IRQHandler+0x642>
    return;
 80091c8:	bf00      	nop
  }
}
 80091ca:	37e8      	adds	r7, #232	@ 0xe8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80091ec:	bf00      	nop
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009200:	bf00      	nop
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009214:	bf00      	nop
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009228:	bf00      	nop
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009242:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800924a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	4313      	orrs	r3, r2
}
 8009252:	4618      	mov	r0, r3
 8009254:	3714      	adds	r7, #20
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
	...

08009260 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009264:	b08c      	sub	sp, #48	@ 0x30
 8009266:	af00      	add	r7, sp, #0
 8009268:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	689a      	ldr	r2, [r3, #8]
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	431a      	orrs	r2, r3
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	695b      	ldr	r3, [r3, #20]
 800927e:	431a      	orrs	r2, r3
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	69db      	ldr	r3, [r3, #28]
 8009284:	4313      	orrs	r3, r2
 8009286:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	4bab      	ldr	r3, [pc, #684]	@ (800953c <UART_SetConfig+0x2dc>)
 8009290:	4013      	ands	r3, r2
 8009292:	697a      	ldr	r2, [r7, #20]
 8009294:	6812      	ldr	r2, [r2, #0]
 8009296:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009298:	430b      	orrs	r3, r1
 800929a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	68da      	ldr	r2, [r3, #12]
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	430a      	orrs	r2, r1
 80092b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	699b      	ldr	r3, [r3, #24]
 80092b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4aa0      	ldr	r2, [pc, #640]	@ (8009540 <UART_SetConfig+0x2e0>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d004      	beq.n	80092cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	6a1b      	ldr	r3, [r3, #32]
 80092c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092c8:	4313      	orrs	r3, r2
 80092ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80092d6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80092da:	697a      	ldr	r2, [r7, #20]
 80092dc:	6812      	ldr	r2, [r2, #0]
 80092de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092e0:	430b      	orrs	r3, r1
 80092e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ea:	f023 010f 	bic.w	r1, r3, #15
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	430a      	orrs	r2, r1
 80092f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a91      	ldr	r2, [pc, #580]	@ (8009544 <UART_SetConfig+0x2e4>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d125      	bne.n	8009350 <UART_SetConfig+0xf0>
 8009304:	4b90      	ldr	r3, [pc, #576]	@ (8009548 <UART_SetConfig+0x2e8>)
 8009306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800930a:	f003 0303 	and.w	r3, r3, #3
 800930e:	2b03      	cmp	r3, #3
 8009310:	d81a      	bhi.n	8009348 <UART_SetConfig+0xe8>
 8009312:	a201      	add	r2, pc, #4	@ (adr r2, 8009318 <UART_SetConfig+0xb8>)
 8009314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009318:	08009329 	.word	0x08009329
 800931c:	08009339 	.word	0x08009339
 8009320:	08009331 	.word	0x08009331
 8009324:	08009341 	.word	0x08009341
 8009328:	2301      	movs	r3, #1
 800932a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800932e:	e0d6      	b.n	80094de <UART_SetConfig+0x27e>
 8009330:	2302      	movs	r3, #2
 8009332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009336:	e0d2      	b.n	80094de <UART_SetConfig+0x27e>
 8009338:	2304      	movs	r3, #4
 800933a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800933e:	e0ce      	b.n	80094de <UART_SetConfig+0x27e>
 8009340:	2308      	movs	r3, #8
 8009342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009346:	e0ca      	b.n	80094de <UART_SetConfig+0x27e>
 8009348:	2310      	movs	r3, #16
 800934a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800934e:	e0c6      	b.n	80094de <UART_SetConfig+0x27e>
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a7d      	ldr	r2, [pc, #500]	@ (800954c <UART_SetConfig+0x2ec>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d138      	bne.n	80093cc <UART_SetConfig+0x16c>
 800935a:	4b7b      	ldr	r3, [pc, #492]	@ (8009548 <UART_SetConfig+0x2e8>)
 800935c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009360:	f003 030c 	and.w	r3, r3, #12
 8009364:	2b0c      	cmp	r3, #12
 8009366:	d82d      	bhi.n	80093c4 <UART_SetConfig+0x164>
 8009368:	a201      	add	r2, pc, #4	@ (adr r2, 8009370 <UART_SetConfig+0x110>)
 800936a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800936e:	bf00      	nop
 8009370:	080093a5 	.word	0x080093a5
 8009374:	080093c5 	.word	0x080093c5
 8009378:	080093c5 	.word	0x080093c5
 800937c:	080093c5 	.word	0x080093c5
 8009380:	080093b5 	.word	0x080093b5
 8009384:	080093c5 	.word	0x080093c5
 8009388:	080093c5 	.word	0x080093c5
 800938c:	080093c5 	.word	0x080093c5
 8009390:	080093ad 	.word	0x080093ad
 8009394:	080093c5 	.word	0x080093c5
 8009398:	080093c5 	.word	0x080093c5
 800939c:	080093c5 	.word	0x080093c5
 80093a0:	080093bd 	.word	0x080093bd
 80093a4:	2300      	movs	r3, #0
 80093a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093aa:	e098      	b.n	80094de <UART_SetConfig+0x27e>
 80093ac:	2302      	movs	r3, #2
 80093ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093b2:	e094      	b.n	80094de <UART_SetConfig+0x27e>
 80093b4:	2304      	movs	r3, #4
 80093b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093ba:	e090      	b.n	80094de <UART_SetConfig+0x27e>
 80093bc:	2308      	movs	r3, #8
 80093be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093c2:	e08c      	b.n	80094de <UART_SetConfig+0x27e>
 80093c4:	2310      	movs	r3, #16
 80093c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093ca:	e088      	b.n	80094de <UART_SetConfig+0x27e>
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a5f      	ldr	r2, [pc, #380]	@ (8009550 <UART_SetConfig+0x2f0>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d125      	bne.n	8009422 <UART_SetConfig+0x1c2>
 80093d6:	4b5c      	ldr	r3, [pc, #368]	@ (8009548 <UART_SetConfig+0x2e8>)
 80093d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80093e0:	2b30      	cmp	r3, #48	@ 0x30
 80093e2:	d016      	beq.n	8009412 <UART_SetConfig+0x1b2>
 80093e4:	2b30      	cmp	r3, #48	@ 0x30
 80093e6:	d818      	bhi.n	800941a <UART_SetConfig+0x1ba>
 80093e8:	2b20      	cmp	r3, #32
 80093ea:	d00a      	beq.n	8009402 <UART_SetConfig+0x1a2>
 80093ec:	2b20      	cmp	r3, #32
 80093ee:	d814      	bhi.n	800941a <UART_SetConfig+0x1ba>
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d002      	beq.n	80093fa <UART_SetConfig+0x19a>
 80093f4:	2b10      	cmp	r3, #16
 80093f6:	d008      	beq.n	800940a <UART_SetConfig+0x1aa>
 80093f8:	e00f      	b.n	800941a <UART_SetConfig+0x1ba>
 80093fa:	2300      	movs	r3, #0
 80093fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009400:	e06d      	b.n	80094de <UART_SetConfig+0x27e>
 8009402:	2302      	movs	r3, #2
 8009404:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009408:	e069      	b.n	80094de <UART_SetConfig+0x27e>
 800940a:	2304      	movs	r3, #4
 800940c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009410:	e065      	b.n	80094de <UART_SetConfig+0x27e>
 8009412:	2308      	movs	r3, #8
 8009414:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009418:	e061      	b.n	80094de <UART_SetConfig+0x27e>
 800941a:	2310      	movs	r3, #16
 800941c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009420:	e05d      	b.n	80094de <UART_SetConfig+0x27e>
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a4b      	ldr	r2, [pc, #300]	@ (8009554 <UART_SetConfig+0x2f4>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d125      	bne.n	8009478 <UART_SetConfig+0x218>
 800942c:	4b46      	ldr	r3, [pc, #280]	@ (8009548 <UART_SetConfig+0x2e8>)
 800942e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009432:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009436:	2bc0      	cmp	r3, #192	@ 0xc0
 8009438:	d016      	beq.n	8009468 <UART_SetConfig+0x208>
 800943a:	2bc0      	cmp	r3, #192	@ 0xc0
 800943c:	d818      	bhi.n	8009470 <UART_SetConfig+0x210>
 800943e:	2b80      	cmp	r3, #128	@ 0x80
 8009440:	d00a      	beq.n	8009458 <UART_SetConfig+0x1f8>
 8009442:	2b80      	cmp	r3, #128	@ 0x80
 8009444:	d814      	bhi.n	8009470 <UART_SetConfig+0x210>
 8009446:	2b00      	cmp	r3, #0
 8009448:	d002      	beq.n	8009450 <UART_SetConfig+0x1f0>
 800944a:	2b40      	cmp	r3, #64	@ 0x40
 800944c:	d008      	beq.n	8009460 <UART_SetConfig+0x200>
 800944e:	e00f      	b.n	8009470 <UART_SetConfig+0x210>
 8009450:	2300      	movs	r3, #0
 8009452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009456:	e042      	b.n	80094de <UART_SetConfig+0x27e>
 8009458:	2302      	movs	r3, #2
 800945a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800945e:	e03e      	b.n	80094de <UART_SetConfig+0x27e>
 8009460:	2304      	movs	r3, #4
 8009462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009466:	e03a      	b.n	80094de <UART_SetConfig+0x27e>
 8009468:	2308      	movs	r3, #8
 800946a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800946e:	e036      	b.n	80094de <UART_SetConfig+0x27e>
 8009470:	2310      	movs	r3, #16
 8009472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009476:	e032      	b.n	80094de <UART_SetConfig+0x27e>
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a30      	ldr	r2, [pc, #192]	@ (8009540 <UART_SetConfig+0x2e0>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d12a      	bne.n	80094d8 <UART_SetConfig+0x278>
 8009482:	4b31      	ldr	r3, [pc, #196]	@ (8009548 <UART_SetConfig+0x2e8>)
 8009484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009488:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800948c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009490:	d01a      	beq.n	80094c8 <UART_SetConfig+0x268>
 8009492:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009496:	d81b      	bhi.n	80094d0 <UART_SetConfig+0x270>
 8009498:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800949c:	d00c      	beq.n	80094b8 <UART_SetConfig+0x258>
 800949e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094a2:	d815      	bhi.n	80094d0 <UART_SetConfig+0x270>
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d003      	beq.n	80094b0 <UART_SetConfig+0x250>
 80094a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094ac:	d008      	beq.n	80094c0 <UART_SetConfig+0x260>
 80094ae:	e00f      	b.n	80094d0 <UART_SetConfig+0x270>
 80094b0:	2300      	movs	r3, #0
 80094b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094b6:	e012      	b.n	80094de <UART_SetConfig+0x27e>
 80094b8:	2302      	movs	r3, #2
 80094ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094be:	e00e      	b.n	80094de <UART_SetConfig+0x27e>
 80094c0:	2304      	movs	r3, #4
 80094c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094c6:	e00a      	b.n	80094de <UART_SetConfig+0x27e>
 80094c8:	2308      	movs	r3, #8
 80094ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094ce:	e006      	b.n	80094de <UART_SetConfig+0x27e>
 80094d0:	2310      	movs	r3, #16
 80094d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094d6:	e002      	b.n	80094de <UART_SetConfig+0x27e>
 80094d8:	2310      	movs	r3, #16
 80094da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a17      	ldr	r2, [pc, #92]	@ (8009540 <UART_SetConfig+0x2e0>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	f040 80a8 	bne.w	800963a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80094ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80094ee:	2b08      	cmp	r3, #8
 80094f0:	d834      	bhi.n	800955c <UART_SetConfig+0x2fc>
 80094f2:	a201      	add	r2, pc, #4	@ (adr r2, 80094f8 <UART_SetConfig+0x298>)
 80094f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f8:	0800951d 	.word	0x0800951d
 80094fc:	0800955d 	.word	0x0800955d
 8009500:	08009525 	.word	0x08009525
 8009504:	0800955d 	.word	0x0800955d
 8009508:	0800952b 	.word	0x0800952b
 800950c:	0800955d 	.word	0x0800955d
 8009510:	0800955d 	.word	0x0800955d
 8009514:	0800955d 	.word	0x0800955d
 8009518:	08009533 	.word	0x08009533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800951c:	f7fd f912 	bl	8006744 <HAL_RCC_GetPCLK1Freq>
 8009520:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009522:	e021      	b.n	8009568 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009524:	4b0c      	ldr	r3, [pc, #48]	@ (8009558 <UART_SetConfig+0x2f8>)
 8009526:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009528:	e01e      	b.n	8009568 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800952a:	f7fd f89d 	bl	8006668 <HAL_RCC_GetSysClockFreq>
 800952e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009530:	e01a      	b.n	8009568 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009532:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009536:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009538:	e016      	b.n	8009568 <UART_SetConfig+0x308>
 800953a:	bf00      	nop
 800953c:	cfff69f3 	.word	0xcfff69f3
 8009540:	40008000 	.word	0x40008000
 8009544:	40013800 	.word	0x40013800
 8009548:	40021000 	.word	0x40021000
 800954c:	40004400 	.word	0x40004400
 8009550:	40004800 	.word	0x40004800
 8009554:	40004c00 	.word	0x40004c00
 8009558:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800955c:	2300      	movs	r3, #0
 800955e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009566:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956a:	2b00      	cmp	r3, #0
 800956c:	f000 812a 	beq.w	80097c4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009574:	4a9e      	ldr	r2, [pc, #632]	@ (80097f0 <UART_SetConfig+0x590>)
 8009576:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800957a:	461a      	mov	r2, r3
 800957c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009582:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	685a      	ldr	r2, [r3, #4]
 8009588:	4613      	mov	r3, r2
 800958a:	005b      	lsls	r3, r3, #1
 800958c:	4413      	add	r3, r2
 800958e:	69ba      	ldr	r2, [r7, #24]
 8009590:	429a      	cmp	r2, r3
 8009592:	d305      	bcc.n	80095a0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800959a:	69ba      	ldr	r2, [r7, #24]
 800959c:	429a      	cmp	r2, r3
 800959e:	d903      	bls.n	80095a8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
 80095a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80095a6:	e10d      	b.n	80097c4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095aa:	2200      	movs	r2, #0
 80095ac:	60bb      	str	r3, [r7, #8]
 80095ae:	60fa      	str	r2, [r7, #12]
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b4:	4a8e      	ldr	r2, [pc, #568]	@ (80097f0 <UART_SetConfig+0x590>)
 80095b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	2200      	movs	r2, #0
 80095be:	603b      	str	r3, [r7, #0]
 80095c0:	607a      	str	r2, [r7, #4]
 80095c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80095ca:	f7f7 fb85 	bl	8000cd8 <__aeabi_uldivmod>
 80095ce:	4602      	mov	r2, r0
 80095d0:	460b      	mov	r3, r1
 80095d2:	4610      	mov	r0, r2
 80095d4:	4619      	mov	r1, r3
 80095d6:	f04f 0200 	mov.w	r2, #0
 80095da:	f04f 0300 	mov.w	r3, #0
 80095de:	020b      	lsls	r3, r1, #8
 80095e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80095e4:	0202      	lsls	r2, r0, #8
 80095e6:	6979      	ldr	r1, [r7, #20]
 80095e8:	6849      	ldr	r1, [r1, #4]
 80095ea:	0849      	lsrs	r1, r1, #1
 80095ec:	2000      	movs	r0, #0
 80095ee:	460c      	mov	r4, r1
 80095f0:	4605      	mov	r5, r0
 80095f2:	eb12 0804 	adds.w	r8, r2, r4
 80095f6:	eb43 0905 	adc.w	r9, r3, r5
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	469a      	mov	sl, r3
 8009602:	4693      	mov	fp, r2
 8009604:	4652      	mov	r2, sl
 8009606:	465b      	mov	r3, fp
 8009608:	4640      	mov	r0, r8
 800960a:	4649      	mov	r1, r9
 800960c:	f7f7 fb64 	bl	8000cd8 <__aeabi_uldivmod>
 8009610:	4602      	mov	r2, r0
 8009612:	460b      	mov	r3, r1
 8009614:	4613      	mov	r3, r2
 8009616:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009618:	6a3b      	ldr	r3, [r7, #32]
 800961a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800961e:	d308      	bcc.n	8009632 <UART_SetConfig+0x3d2>
 8009620:	6a3b      	ldr	r3, [r7, #32]
 8009622:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009626:	d204      	bcs.n	8009632 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	6a3a      	ldr	r2, [r7, #32]
 800962e:	60da      	str	r2, [r3, #12]
 8009630:	e0c8      	b.n	80097c4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009638:	e0c4      	b.n	80097c4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	69db      	ldr	r3, [r3, #28]
 800963e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009642:	d167      	bne.n	8009714 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009644:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009648:	2b08      	cmp	r3, #8
 800964a:	d828      	bhi.n	800969e <UART_SetConfig+0x43e>
 800964c:	a201      	add	r2, pc, #4	@ (adr r2, 8009654 <UART_SetConfig+0x3f4>)
 800964e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009652:	bf00      	nop
 8009654:	08009679 	.word	0x08009679
 8009658:	08009681 	.word	0x08009681
 800965c:	08009689 	.word	0x08009689
 8009660:	0800969f 	.word	0x0800969f
 8009664:	0800968f 	.word	0x0800968f
 8009668:	0800969f 	.word	0x0800969f
 800966c:	0800969f 	.word	0x0800969f
 8009670:	0800969f 	.word	0x0800969f
 8009674:	08009697 	.word	0x08009697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009678:	f7fd f864 	bl	8006744 <HAL_RCC_GetPCLK1Freq>
 800967c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800967e:	e014      	b.n	80096aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009680:	f7fd f876 	bl	8006770 <HAL_RCC_GetPCLK2Freq>
 8009684:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009686:	e010      	b.n	80096aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009688:	4b5a      	ldr	r3, [pc, #360]	@ (80097f4 <UART_SetConfig+0x594>)
 800968a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800968c:	e00d      	b.n	80096aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800968e:	f7fc ffeb 	bl	8006668 <HAL_RCC_GetSysClockFreq>
 8009692:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009694:	e009      	b.n	80096aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800969a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800969c:	e005      	b.n	80096aa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800969e:	2300      	movs	r3, #0
 80096a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80096a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80096aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f000 8089 	beq.w	80097c4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096b6:	4a4e      	ldr	r2, [pc, #312]	@ (80097f0 <UART_SetConfig+0x590>)
 80096b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096bc:	461a      	mov	r2, r3
 80096be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80096c4:	005a      	lsls	r2, r3, #1
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	085b      	lsrs	r3, r3, #1
 80096cc:	441a      	add	r2, r3
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80096d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096d8:	6a3b      	ldr	r3, [r7, #32]
 80096da:	2b0f      	cmp	r3, #15
 80096dc:	d916      	bls.n	800970c <UART_SetConfig+0x4ac>
 80096de:	6a3b      	ldr	r3, [r7, #32]
 80096e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096e4:	d212      	bcs.n	800970c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80096e6:	6a3b      	ldr	r3, [r7, #32]
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	f023 030f 	bic.w	r3, r3, #15
 80096ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80096f0:	6a3b      	ldr	r3, [r7, #32]
 80096f2:	085b      	lsrs	r3, r3, #1
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	f003 0307 	and.w	r3, r3, #7
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	8bfb      	ldrh	r3, [r7, #30]
 80096fe:	4313      	orrs	r3, r2
 8009700:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	8bfa      	ldrh	r2, [r7, #30]
 8009708:	60da      	str	r2, [r3, #12]
 800970a:	e05b      	b.n	80097c4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800970c:	2301      	movs	r3, #1
 800970e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009712:	e057      	b.n	80097c4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009714:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009718:	2b08      	cmp	r3, #8
 800971a:	d828      	bhi.n	800976e <UART_SetConfig+0x50e>
 800971c:	a201      	add	r2, pc, #4	@ (adr r2, 8009724 <UART_SetConfig+0x4c4>)
 800971e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009722:	bf00      	nop
 8009724:	08009749 	.word	0x08009749
 8009728:	08009751 	.word	0x08009751
 800972c:	08009759 	.word	0x08009759
 8009730:	0800976f 	.word	0x0800976f
 8009734:	0800975f 	.word	0x0800975f
 8009738:	0800976f 	.word	0x0800976f
 800973c:	0800976f 	.word	0x0800976f
 8009740:	0800976f 	.word	0x0800976f
 8009744:	08009767 	.word	0x08009767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009748:	f7fc fffc 	bl	8006744 <HAL_RCC_GetPCLK1Freq>
 800974c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800974e:	e014      	b.n	800977a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009750:	f7fd f80e 	bl	8006770 <HAL_RCC_GetPCLK2Freq>
 8009754:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009756:	e010      	b.n	800977a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009758:	4b26      	ldr	r3, [pc, #152]	@ (80097f4 <UART_SetConfig+0x594>)
 800975a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800975c:	e00d      	b.n	800977a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800975e:	f7fc ff83 	bl	8006668 <HAL_RCC_GetSysClockFreq>
 8009762:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009764:	e009      	b.n	800977a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800976a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800976c:	e005      	b.n	800977a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800976e:	2300      	movs	r3, #0
 8009770:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009778:	bf00      	nop
    }

    if (pclk != 0U)
 800977a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800977c:	2b00      	cmp	r3, #0
 800977e:	d021      	beq.n	80097c4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009784:	4a1a      	ldr	r2, [pc, #104]	@ (80097f0 <UART_SetConfig+0x590>)
 8009786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800978a:	461a      	mov	r2, r3
 800978c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800978e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	085b      	lsrs	r3, r3, #1
 8009798:	441a      	add	r2, r3
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	fbb2 f3f3 	udiv	r3, r2, r3
 80097a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097a4:	6a3b      	ldr	r3, [r7, #32]
 80097a6:	2b0f      	cmp	r3, #15
 80097a8:	d909      	bls.n	80097be <UART_SetConfig+0x55e>
 80097aa:	6a3b      	ldr	r3, [r7, #32]
 80097ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097b0:	d205      	bcs.n	80097be <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80097b2:	6a3b      	ldr	r3, [r7, #32]
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	60da      	str	r2, [r3, #12]
 80097bc:	e002      	b.n	80097c4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	2200      	movs	r2, #0
 80097d8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	2200      	movs	r2, #0
 80097de:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80097e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3730      	adds	r7, #48	@ 0x30
 80097e8:	46bd      	mov	sp, r7
 80097ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097ee:	bf00      	nop
 80097f0:	08011860 	.word	0x08011860
 80097f4:	00f42400 	.word	0x00f42400

080097f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009804:	f003 0308 	and.w	r3, r3, #8
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00a      	beq.n	8009822 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	430a      	orrs	r2, r1
 8009820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009826:	f003 0301 	and.w	r3, r3, #1
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00a      	beq.n	8009844 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	430a      	orrs	r2, r1
 8009842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009848:	f003 0302 	and.w	r3, r3, #2
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00a      	beq.n	8009866 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	430a      	orrs	r2, r1
 8009864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800986a:	f003 0304 	and.w	r3, r3, #4
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00a      	beq.n	8009888 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	430a      	orrs	r2, r1
 8009886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800988c:	f003 0310 	and.w	r3, r3, #16
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00a      	beq.n	80098aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	430a      	orrs	r2, r1
 80098a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ae:	f003 0320 	and.w	r3, r3, #32
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00a      	beq.n	80098cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	430a      	orrs	r2, r1
 80098ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d01a      	beq.n	800990e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	430a      	orrs	r2, r1
 80098ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098f6:	d10a      	bne.n	800990e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	430a      	orrs	r2, r1
 800990c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00a      	beq.n	8009930 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	430a      	orrs	r2, r1
 800992e:	605a      	str	r2, [r3, #4]
  }
}
 8009930:	bf00      	nop
 8009932:	370c      	adds	r7, #12
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b098      	sub	sp, #96	@ 0x60
 8009940:	af02      	add	r7, sp, #8
 8009942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800994c:	f7f8 fd9c 	bl	8002488 <HAL_GetTick>
 8009950:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f003 0308 	and.w	r3, r3, #8
 800995c:	2b08      	cmp	r3, #8
 800995e:	d12f      	bne.n	80099c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009960:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009968:	2200      	movs	r2, #0
 800996a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f88e 	bl	8009a90 <UART_WaitOnFlagUntilTimeout>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d022      	beq.n	80099c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009982:	e853 3f00 	ldrex	r3, [r3]
 8009986:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800998a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800998e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	461a      	mov	r2, r3
 8009996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009998:	647b      	str	r3, [r7, #68]	@ 0x44
 800999a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800999e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099a0:	e841 2300 	strex	r3, r2, [r1]
 80099a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80099a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1e6      	bne.n	800997a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2220      	movs	r2, #32
 80099b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099bc:	2303      	movs	r3, #3
 80099be:	e063      	b.n	8009a88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f003 0304 	and.w	r3, r3, #4
 80099ca:	2b04      	cmp	r3, #4
 80099cc:	d149      	bne.n	8009a62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80099d2:	9300      	str	r3, [sp, #0]
 80099d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099d6:	2200      	movs	r2, #0
 80099d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 f857 	bl	8009a90 <UART_WaitOnFlagUntilTimeout>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d03c      	beq.n	8009a62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f0:	e853 3f00 	ldrex	r3, [r3]
 80099f4:	623b      	str	r3, [r7, #32]
   return(result);
 80099f6:	6a3b      	ldr	r3, [r7, #32]
 80099f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	461a      	mov	r2, r3
 8009a04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a06:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a08:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a0e:	e841 2300 	strex	r3, r2, [r1]
 8009a12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1e6      	bne.n	80099e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	3308      	adds	r3, #8
 8009a20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	e853 3f00 	ldrex	r3, [r3]
 8009a28:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f023 0301 	bic.w	r3, r3, #1
 8009a30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	3308      	adds	r3, #8
 8009a38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a3a:	61fa      	str	r2, [r7, #28]
 8009a3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3e:	69b9      	ldr	r1, [r7, #24]
 8009a40:	69fa      	ldr	r2, [r7, #28]
 8009a42:	e841 2300 	strex	r3, r2, [r1]
 8009a46:	617b      	str	r3, [r7, #20]
   return(result);
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1e5      	bne.n	8009a1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2220      	movs	r2, #32
 8009a52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a5e:	2303      	movs	r3, #3
 8009a60:	e012      	b.n	8009a88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2220      	movs	r2, #32
 8009a66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2220      	movs	r2, #32
 8009a6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3758      	adds	r7, #88	@ 0x58
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	603b      	str	r3, [r7, #0]
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009aa0:	e04f      	b.n	8009b42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa8:	d04b      	beq.n	8009b42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009aaa:	f7f8 fced 	bl	8002488 <HAL_GetTick>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	1ad3      	subs	r3, r2, r3
 8009ab4:	69ba      	ldr	r2, [r7, #24]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d302      	bcc.n	8009ac0 <UART_WaitOnFlagUntilTimeout+0x30>
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d101      	bne.n	8009ac4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009ac0:	2303      	movs	r3, #3
 8009ac2:	e04e      	b.n	8009b62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f003 0304 	and.w	r3, r3, #4
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d037      	beq.n	8009b42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	2b80      	cmp	r3, #128	@ 0x80
 8009ad6:	d034      	beq.n	8009b42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	2b40      	cmp	r3, #64	@ 0x40
 8009adc:	d031      	beq.n	8009b42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	69db      	ldr	r3, [r3, #28]
 8009ae4:	f003 0308 	and.w	r3, r3, #8
 8009ae8:	2b08      	cmp	r3, #8
 8009aea:	d110      	bne.n	8009b0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2208      	movs	r2, #8
 8009af2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	f000 f920 	bl	8009d3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2208      	movs	r2, #8
 8009afe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e029      	b.n	8009b62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	69db      	ldr	r3, [r3, #28]
 8009b14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b1c:	d111      	bne.n	8009b42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009b26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b28:	68f8      	ldr	r0, [r7, #12]
 8009b2a:	f000 f906 	bl	8009d3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2220      	movs	r2, #32
 8009b32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009b3e:	2303      	movs	r3, #3
 8009b40:	e00f      	b.n	8009b62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	69da      	ldr	r2, [r3, #28]
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	4013      	ands	r3, r2
 8009b4c:	68ba      	ldr	r2, [r7, #8]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	bf0c      	ite	eq
 8009b52:	2301      	moveq	r3, #1
 8009b54:	2300      	movne	r3, #0
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	461a      	mov	r2, r3
 8009b5a:	79fb      	ldrb	r3, [r7, #7]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d0a0      	beq.n	8009aa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
	...

08009b6c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b096      	sub	sp, #88	@ 0x58
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	4613      	mov	r3, r2
 8009b78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	68ba      	ldr	r2, [r7, #8]
 8009b7e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	88fa      	ldrh	r2, [r7, #6]
 8009b84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2222      	movs	r2, #34	@ 0x22
 8009b94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d02d      	beq.n	8009bfe <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ba8:	4a40      	ldr	r2, [pc, #256]	@ (8009cac <UART_Start_Receive_DMA+0x140>)
 8009baa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bb2:	4a3f      	ldr	r2, [pc, #252]	@ (8009cb0 <UART_Start_Receive_DMA+0x144>)
 8009bb4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bbc:	4a3d      	ldr	r2, [pc, #244]	@ (8009cb4 <UART_Start_Receive_DMA+0x148>)
 8009bbe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	3324      	adds	r3, #36	@ 0x24
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bdc:	461a      	mov	r2, r3
 8009bde:	88fb      	ldrh	r3, [r7, #6]
 8009be0:	f7fb fc1c 	bl	800541c <HAL_DMA_Start_IT>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d009      	beq.n	8009bfe <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2210      	movs	r2, #16
 8009bee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2220      	movs	r2, #32
 8009bf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e051      	b.n	8009ca2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	691b      	ldr	r3, [r3, #16]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d018      	beq.n	8009c38 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c0e:	e853 3f00 	ldrex	r3, [r3]
 8009c12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	461a      	mov	r2, r3
 8009c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c26:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c28:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009c2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c2c:	e841 2300 	strex	r3, r2, [r1]
 8009c30:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009c32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d1e6      	bne.n	8009c06 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	3308      	adds	r3, #8
 8009c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c42:	e853 3f00 	ldrex	r3, [r3]
 8009c46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c4a:	f043 0301 	orr.w	r3, r3, #1
 8009c4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	3308      	adds	r3, #8
 8009c56:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009c58:	637a      	str	r2, [r7, #52]	@ 0x34
 8009c5a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009c5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c60:	e841 2300 	strex	r3, r2, [r1]
 8009c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d1e5      	bne.n	8009c38 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	3308      	adds	r3, #8
 8009c72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	e853 3f00 	ldrex	r3, [r3]
 8009c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	3308      	adds	r3, #8
 8009c8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009c8c:	623a      	str	r2, [r7, #32]
 8009c8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c90:	69f9      	ldr	r1, [r7, #28]
 8009c92:	6a3a      	ldr	r2, [r7, #32]
 8009c94:	e841 2300 	strex	r3, r2, [r1]
 8009c98:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d1e5      	bne.n	8009c6c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3758      	adds	r7, #88	@ 0x58
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	08009ebd 	.word	0x08009ebd
 8009cb0:	08009fe9 	.word	0x08009fe9
 8009cb4:	0800a027 	.word	0x0800a027

08009cb8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b08f      	sub	sp, #60	@ 0x3c
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
 8009cc8:	e853 3f00 	ldrex	r3, [r3]
 8009ccc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009cd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ce0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ce4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ce6:	e841 2300 	strex	r3, r2, [r1]
 8009cea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d1e6      	bne.n	8009cc0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	3308      	adds	r3, #8
 8009cf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	e853 3f00 	ldrex	r3, [r3]
 8009d00:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009d08:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	3308      	adds	r3, #8
 8009d10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d12:	61ba      	str	r2, [r7, #24]
 8009d14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d16:	6979      	ldr	r1, [r7, #20]
 8009d18:	69ba      	ldr	r2, [r7, #24]
 8009d1a:	e841 2300 	strex	r3, r2, [r1]
 8009d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d1e5      	bne.n	8009cf2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2220      	movs	r2, #32
 8009d2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009d2e:	bf00      	nop
 8009d30:	373c      	adds	r7, #60	@ 0x3c
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr

08009d3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d3a:	b480      	push	{r7}
 8009d3c:	b095      	sub	sp, #84	@ 0x54
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d4a:	e853 3f00 	ldrex	r3, [r3]
 8009d4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d60:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009d66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d68:	e841 2300 	strex	r3, r2, [r1]
 8009d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d1e6      	bne.n	8009d42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	3308      	adds	r3, #8
 8009d7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7c:	6a3b      	ldr	r3, [r7, #32]
 8009d7e:	e853 3f00 	ldrex	r3, [r3]
 8009d82:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d8a:	f023 0301 	bic.w	r3, r3, #1
 8009d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	3308      	adds	r3, #8
 8009d96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009da0:	e841 2300 	strex	r3, r2, [r1]
 8009da4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d1e3      	bne.n	8009d74 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d118      	bne.n	8009de6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	e853 3f00 	ldrex	r3, [r3]
 8009dc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	f023 0310 	bic.w	r3, r3, #16
 8009dc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	461a      	mov	r2, r3
 8009dd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009dd2:	61bb      	str	r3, [r7, #24]
 8009dd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd6:	6979      	ldr	r1, [r7, #20]
 8009dd8:	69ba      	ldr	r2, [r7, #24]
 8009dda:	e841 2300 	strex	r3, r2, [r1]
 8009dde:	613b      	str	r3, [r7, #16]
   return(result);
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d1e6      	bne.n	8009db4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2220      	movs	r2, #32
 8009dea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009dfa:	bf00      	nop
 8009dfc:	3754      	adds	r7, #84	@ 0x54
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr

08009e06 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b090      	sub	sp, #64	@ 0x40
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e12:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f003 0320 	and.w	r3, r3, #32
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d137      	bne.n	8009e92 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009e22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e24:	2200      	movs	r2, #0
 8009e26:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	3308      	adds	r3, #8
 8009e30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e34:	e853 3f00 	ldrex	r3, [r3]
 8009e38:	623b      	str	r3, [r7, #32]
   return(result);
 8009e3a:	6a3b      	ldr	r3, [r7, #32]
 8009e3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	3308      	adds	r3, #8
 8009e48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e52:	e841 2300 	strex	r3, r2, [r1]
 8009e56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d1e5      	bne.n	8009e2a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	e853 3f00 	ldrex	r3, [r3]
 8009e6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e72:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	461a      	mov	r2, r3
 8009e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e7c:	61fb      	str	r3, [r7, #28]
 8009e7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e80:	69b9      	ldr	r1, [r7, #24]
 8009e82:	69fa      	ldr	r2, [r7, #28]
 8009e84:	e841 2300 	strex	r3, r2, [r1]
 8009e88:	617b      	str	r3, [r7, #20]
   return(result);
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1e6      	bne.n	8009e5e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e90:	e002      	b.n	8009e98 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009e92:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009e94:	f7ff f99c 	bl	80091d0 <HAL_UART_TxCpltCallback>
}
 8009e98:	bf00      	nop
 8009e9a:	3740      	adds	r7, #64	@ 0x40
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eac:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009eae:	68f8      	ldr	r0, [r7, #12]
 8009eb0:	f7ff f998 	bl	80091e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009eb4:	bf00      	nop
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b09c      	sub	sp, #112	@ 0x70
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ec8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f003 0320 	and.w	r3, r3, #32
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d171      	bne.n	8009fbc <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009ed8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009eda:	2200      	movs	r2, #0
 8009edc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ee0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ee8:	e853 3f00 	ldrex	r3, [r3]
 8009eec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009eee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ef4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ef6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	461a      	mov	r2, r3
 8009efc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009efe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f00:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f06:	e841 2300 	strex	r3, r2, [r1]
 8009f0a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d1e6      	bne.n	8009ee0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	3308      	adds	r3, #8
 8009f18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f1c:	e853 3f00 	ldrex	r3, [r3]
 8009f20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f24:	f023 0301 	bic.w	r3, r3, #1
 8009f28:	667b      	str	r3, [r7, #100]	@ 0x64
 8009f2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	3308      	adds	r3, #8
 8009f30:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009f32:	647a      	str	r2, [r7, #68]	@ 0x44
 8009f34:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f3a:	e841 2300 	strex	r3, r2, [r1]
 8009f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d1e5      	bne.n	8009f12 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	3308      	adds	r3, #8
 8009f4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f50:	e853 3f00 	ldrex	r3, [r3]
 8009f54:	623b      	str	r3, [r7, #32]
   return(result);
 8009f56:	6a3b      	ldr	r3, [r7, #32]
 8009f58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	3308      	adds	r3, #8
 8009f64:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009f66:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f6e:	e841 2300 	strex	r3, r2, [r1]
 8009f72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1e5      	bne.n	8009f46 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009f7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f7c:	2220      	movs	r2, #32
 8009f7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d118      	bne.n	8009fbc <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	e853 3f00 	ldrex	r3, [r3]
 8009f96:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f023 0310 	bic.w	r3, r3, #16
 8009f9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009fa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009fa8:	61fb      	str	r3, [r7, #28]
 8009faa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fac:	69b9      	ldr	r1, [r7, #24]
 8009fae:	69fa      	ldr	r2, [r7, #28]
 8009fb0:	e841 2300 	strex	r3, r2, [r1]
 8009fb4:	617b      	str	r3, [r7, #20]
   return(result);
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d1e6      	bne.n	8009f8a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d107      	bne.n	8009fda <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009fd4:	f001 fe96 	bl	800bd04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009fd8:	e002      	b.n	8009fe0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009fda:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009fdc:	f7ff f90c 	bl	80091f8 <HAL_UART_RxCpltCallback>
}
 8009fe0:	bf00      	nop
 8009fe2:	3770      	adds	r7, #112	@ 0x70
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ff4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a000:	2b01      	cmp	r3, #1
 800a002:	d109      	bne.n	800a018 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a00a:	085b      	lsrs	r3, r3, #1
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	4619      	mov	r1, r3
 800a010:	68f8      	ldr	r0, [r7, #12]
 800a012:	f001 fe77 	bl	800bd04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a016:	e002      	b.n	800a01e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	f7ff f8f7 	bl	800920c <HAL_UART_RxHalfCpltCallback>
}
 800a01e:	bf00      	nop
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b086      	sub	sp, #24
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a032:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a03a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a042:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a04e:	2b80      	cmp	r3, #128	@ 0x80
 800a050:	d109      	bne.n	800a066 <UART_DMAError+0x40>
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	2b21      	cmp	r3, #33	@ 0x21
 800a056:	d106      	bne.n	800a066 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a060:	6978      	ldr	r0, [r7, #20]
 800a062:	f7ff fe29 	bl	8009cb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a070:	2b40      	cmp	r3, #64	@ 0x40
 800a072:	d109      	bne.n	800a088 <UART_DMAError+0x62>
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2b22      	cmp	r3, #34	@ 0x22
 800a078:	d106      	bne.n	800a088 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a082:	6978      	ldr	r0, [r7, #20]
 800a084:	f7ff fe59 	bl	8009d3a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a08e:	f043 0210 	orr.w	r2, r3, #16
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a098:	6978      	ldr	r0, [r7, #20]
 800a09a:	f7ff f8c1 	bl	8009220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a09e:	bf00      	nop
 800a0a0:	3718      	adds	r7, #24
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}

0800a0a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b084      	sub	sp, #16
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f7ff f8ab 	bl	8009220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0ca:	bf00      	nop
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b088      	sub	sp, #32
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	e853 3f00 	ldrex	r3, [r3]
 800a0e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0ee:	61fb      	str	r3, [r7, #28]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	69fb      	ldr	r3, [r7, #28]
 800a0f8:	61bb      	str	r3, [r7, #24]
 800a0fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0fc:	6979      	ldr	r1, [r7, #20]
 800a0fe:	69ba      	ldr	r2, [r7, #24]
 800a100:	e841 2300 	strex	r3, r2, [r1]
 800a104:	613b      	str	r3, [r7, #16]
   return(result);
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1e6      	bne.n	800a0da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2220      	movs	r2, #32
 800a110:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f7ff f858 	bl	80091d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a120:	bf00      	nop
 800a122:	3720      	adds	r7, #32
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a144:	bf00      	nop
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a158:	bf00      	nop
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a164:	b480      	push	{r7}
 800a166:	b085      	sub	sp, #20
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a172:	2b01      	cmp	r3, #1
 800a174:	d101      	bne.n	800a17a <HAL_UARTEx_DisableFifoMode+0x16>
 800a176:	2302      	movs	r3, #2
 800a178:	e027      	b.n	800a1ca <HAL_UARTEx_DisableFifoMode+0x66>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2201      	movs	r2, #1
 800a17e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2224      	movs	r2, #36	@ 0x24
 800a186:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f022 0201 	bic.w	r2, r2, #1
 800a1a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a1a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	68fa      	ldr	r2, [r7, #12]
 800a1b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2220      	movs	r2, #32
 800a1bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3714      	adds	r7, #20
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr

0800a1d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b084      	sub	sp, #16
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
 800a1de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d101      	bne.n	800a1ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a1ea:	2302      	movs	r3, #2
 800a1ec:	e02d      	b.n	800a24a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2224      	movs	r2, #36	@ 0x24
 800a1fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f022 0201 	bic.w	r2, r2, #1
 800a214:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	683a      	ldr	r2, [r7, #0]
 800a226:	430a      	orrs	r2, r1
 800a228:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 f8a4 	bl	800a378 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	68fa      	ldr	r2, [r7, #12]
 800a236:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2220      	movs	r2, #32
 800a23c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b084      	sub	sp, #16
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
 800a25a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a262:	2b01      	cmp	r3, #1
 800a264:	d101      	bne.n	800a26a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a266:	2302      	movs	r3, #2
 800a268:	e02d      	b.n	800a2c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2201      	movs	r2, #1
 800a26e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2224      	movs	r2, #36	@ 0x24
 800a276:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f022 0201 	bic.w	r2, r2, #1
 800a290:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	683a      	ldr	r2, [r7, #0]
 800a2a2:	430a      	orrs	r2, r1
 800a2a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 f866 	bl	800a378 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2220      	movs	r2, #32
 800a2b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b08c      	sub	sp, #48	@ 0x30
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	60f8      	str	r0, [r7, #12]
 800a2d6:	60b9      	str	r1, [r7, #8]
 800a2d8:	4613      	mov	r3, r2
 800a2da:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a2e2:	2b20      	cmp	r3, #32
 800a2e4:	d142      	bne.n	800a36c <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d002      	beq.n	800a2f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800a2ec:	88fb      	ldrh	r3, [r7, #6]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d101      	bne.n	800a2f6 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e03b      	b.n	800a36e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2200      	movs	r2, #0
 800a300:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a302:	88fb      	ldrh	r3, [r7, #6]
 800a304:	461a      	mov	r2, r3
 800a306:	68b9      	ldr	r1, [r7, #8]
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f7ff fc2f 	bl	8009b6c <UART_Start_Receive_DMA>
 800a30e:	4603      	mov	r3, r0
 800a310:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a314:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d124      	bne.n	800a366 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a320:	2b01      	cmp	r3, #1
 800a322:	d11d      	bne.n	800a360 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2210      	movs	r2, #16
 800a32a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	e853 3f00 	ldrex	r3, [r3]
 800a338:	617b      	str	r3, [r7, #20]
   return(result);
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	f043 0310 	orr.w	r3, r3, #16
 800a340:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	461a      	mov	r2, r3
 800a348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a34a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a34c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34e:	6a39      	ldr	r1, [r7, #32]
 800a350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a352:	e841 2300 	strex	r3, r2, [r1]
 800a356:	61fb      	str	r3, [r7, #28]
   return(result);
 800a358:	69fb      	ldr	r3, [r7, #28]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d1e6      	bne.n	800a32c <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800a35e:	e002      	b.n	800a366 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800a366:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a36a:	e000      	b.n	800a36e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a36c:	2302      	movs	r3, #2
  }
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3730      	adds	r7, #48	@ 0x30
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
	...

0800a378 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a384:	2b00      	cmp	r3, #0
 800a386:	d108      	bne.n	800a39a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2201      	movs	r2, #1
 800a38c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a398:	e031      	b.n	800a3fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a39a:	2308      	movs	r3, #8
 800a39c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a39e:	2308      	movs	r3, #8
 800a3a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	0e5b      	lsrs	r3, r3, #25
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	f003 0307 	and.w	r3, r3, #7
 800a3b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	0f5b      	lsrs	r3, r3, #29
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	f003 0307 	and.w	r3, r3, #7
 800a3c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a3c2:	7bbb      	ldrb	r3, [r7, #14]
 800a3c4:	7b3a      	ldrb	r2, [r7, #12]
 800a3c6:	4911      	ldr	r1, [pc, #68]	@ (800a40c <UARTEx_SetNbDataToProcess+0x94>)
 800a3c8:	5c8a      	ldrb	r2, [r1, r2]
 800a3ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a3ce:	7b3a      	ldrb	r2, [r7, #12]
 800a3d0:	490f      	ldr	r1, [pc, #60]	@ (800a410 <UARTEx_SetNbDataToProcess+0x98>)
 800a3d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a3d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3d8:	b29a      	uxth	r2, r3
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3e0:	7bfb      	ldrb	r3, [r7, #15]
 800a3e2:	7b7a      	ldrb	r2, [r7, #13]
 800a3e4:	4909      	ldr	r1, [pc, #36]	@ (800a40c <UARTEx_SetNbDataToProcess+0x94>)
 800a3e6:	5c8a      	ldrb	r2, [r1, r2]
 800a3e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a3ec:	7b7a      	ldrb	r2, [r7, #13]
 800a3ee:	4908      	ldr	r1, [pc, #32]	@ (800a410 <UARTEx_SetNbDataToProcess+0x98>)
 800a3f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3f6:	b29a      	uxth	r2, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a3fe:	bf00      	nop
 800a400:	3714      	adds	r7, #20
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	08011878 	.word	0x08011878
 800a410:	08011880 	.word	0x08011880

0800a414 <goToZeroElecAngle>:
#include "pid.h"
#include "lowpass_filter.h"
#include "focLib.h"

void goToZeroElecAngle(BldcMotor *motor)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
    setTorque(motor, 0, OPEN_LOOP_TORQUE, 0);
 800a41c:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 800a440 <goToZeroElecAngle+0x2c>
 800a420:	eddf 0a08 	vldr	s1, [pc, #32]	@ 800a444 <goToZeroElecAngle+0x30>
 800a424:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 800a440 <goToZeroElecAngle+0x2c>
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f001 f855 	bl	800b4d8 <setTorque>
    delay(700);
 800a42e:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800a432:	f002 f95b 	bl	800c6ec <delay>
}
 800a436:	bf00      	nop
 800a438:	3708      	adds	r7, #8
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	00000000 	.word	0x00000000
 800a444:	4013cd3a 	.word	0x4013cd3a

0800a448 <alignSensor>:
int alignSensor(BldcMotor *motor)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b08a      	sub	sp, #40	@ 0x28
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
    // setTorque(motor, OPEN_LOOP_TORQUE, 0, _3PI_2);
    // delay(200);
    // encoderUpdate(&motor->magEncoder);
    // float start_angle = motor->magEncoder.fullAngle;
    // printLog("start_angle:%f\n", start_angle);
    for (int i = 0; i <= 500; i++)
 800a450:	2300      	movs	r3, #0
 800a452:	627b      	str	r3, [r7, #36]	@ 0x24
 800a454:	e025      	b.n	800a4a2 <alignSensor+0x5a>
    {
        float angle = _3PI_2 + _2PI * i / 500.0f;
 800a456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a458:	ee07 3a90 	vmov	s15, r3
 800a45c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a460:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 800a668 <alignSensor+0x220>
 800a464:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a468:	eddf 6a80 	vldr	s13, [pc, #512]	@ 800a66c <alignSensor+0x224>
 800a46c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a470:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 800a670 <alignSensor+0x228>
 800a474:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a478:	edc7 7a02 	vstr	s15, [r7, #8]
        setTorque(motor, OPEN_LOOP_TORQUE, 0, angle);
 800a47c:	ed97 1a02 	vldr	s2, [r7, #8]
 800a480:	eddf 0a7c 	vldr	s1, [pc, #496]	@ 800a674 <alignSensor+0x22c>
 800a484:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 800a678 <alignSensor+0x230>
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f001 f825 	bl	800b4d8 <setTorque>
        encoderUpdate(&motor->magEncoder);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	4618      	mov	r0, r3
 800a492:	f000 fcf7 	bl	800ae84 <encoderUpdate>
        delay(2);
 800a496:	2002      	movs	r0, #2
 800a498:	f002 f928 	bl	800c6ec <delay>
    for (int i = 0; i <= 500; i++)
 800a49c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a49e:	3301      	adds	r3, #1
 800a4a0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800a4a8:	ddd5      	ble.n	800a456 <alignSensor+0xe>
    }
    // encoderUpdate(&motor->magEncoder);

    float mid_angle = motor->magEncoder.fullAngle;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	695b      	ldr	r3, [r3, #20]
 800a4ae:	61fb      	str	r3, [r7, #28]
    printLog("mid_angle:%f\n", mid_angle);
 800a4b0:	69f8      	ldr	r0, [r7, #28]
 800a4b2:	f7f6 f871 	bl	8000598 <__aeabi_f2d>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	4870      	ldr	r0, [pc, #448]	@ (800a67c <alignSensor+0x234>)
 800a4bc:	f001 fc3e 	bl	800bd3c <printLog>
    // move one electrical revolution backwards
    for (int i = 500; i >= 0; i--)
 800a4c0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800a4c4:	623b      	str	r3, [r7, #32]
 800a4c6:	e025      	b.n	800a514 <alignSensor+0xcc>
    {
        float angle = _3PI_2 + _2PI * i / 500.0f;
 800a4c8:	6a3b      	ldr	r3, [r7, #32]
 800a4ca:	ee07 3a90 	vmov	s15, r3
 800a4ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4d2:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 800a668 <alignSensor+0x220>
 800a4d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a4da:	eddf 6a64 	vldr	s13, [pc, #400]	@ 800a66c <alignSensor+0x224>
 800a4de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a4e2:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 800a670 <alignSensor+0x228>
 800a4e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a4ea:	edc7 7a03 	vstr	s15, [r7, #12]
        setTorque(motor, OPEN_LOOP_TORQUE, 0, angle);
 800a4ee:	ed97 1a03 	vldr	s2, [r7, #12]
 800a4f2:	eddf 0a60 	vldr	s1, [pc, #384]	@ 800a674 <alignSensor+0x22c>
 800a4f6:	ed9f 0a60 	vldr	s0, [pc, #384]	@ 800a678 <alignSensor+0x230>
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 ffec 	bl	800b4d8 <setTorque>
        encoderUpdate(&motor->magEncoder);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	4618      	mov	r0, r3
 800a504:	f000 fcbe 	bl	800ae84 <encoderUpdate>
        delay(2);
 800a508:	2002      	movs	r0, #2
 800a50a:	f002 f8ef 	bl	800c6ec <delay>
    for (int i = 500; i >= 0; i--)
 800a50e:	6a3b      	ldr	r3, [r7, #32]
 800a510:	3b01      	subs	r3, #1
 800a512:	623b      	str	r3, [r7, #32]
 800a514:	6a3b      	ldr	r3, [r7, #32]
 800a516:	2b00      	cmp	r3, #0
 800a518:	dad6      	bge.n	800a4c8 <alignSensor+0x80>
    }
    // encoderUpdate(&motor->magEncoder);

    float end_angle = motor->magEncoder.fullAngle;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	695b      	ldr	r3, [r3, #20]
 800a51e:	61bb      	str	r3, [r7, #24]
    printLog("end_angle:%f\n", end_angle);
 800a520:	69b8      	ldr	r0, [r7, #24]
 800a522:	f7f6 f839 	bl	8000598 <__aeabi_f2d>
 800a526:	4602      	mov	r2, r0
 800a528:	460b      	mov	r3, r1
 800a52a:	4855      	ldr	r0, [pc, #340]	@ (800a680 <alignSensor+0x238>)
 800a52c:	f001 fc06 	bl	800bd3c <printLog>
    // setPhaseVoltage(0, 0, 0);
    delay(200);
 800a530:	20c8      	movs	r0, #200	@ 0xc8
 800a532:	f002 f8db 	bl	800c6ec <delay>

    // determine the direction the sensor moved
    float moved = fabsf(mid_angle - end_angle);
 800a536:	ed97 7a07 	vldr	s14, [r7, #28]
 800a53a:	edd7 7a06 	vldr	s15, [r7, #24]
 800a53e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a542:	eef0 7ae7 	vabs.f32	s15, s15
 800a546:	edc7 7a05 	vstr	s15, [r7, #20]
    printLog("moved:%f\n", moved);
 800a54a:	6978      	ldr	r0, [r7, #20]
 800a54c:	f7f6 f824 	bl	8000598 <__aeabi_f2d>
 800a550:	4602      	mov	r2, r0
 800a552:	460b      	mov	r3, r1
 800a554:	484b      	ldr	r0, [pc, #300]	@ (800a684 <alignSensor+0x23c>)
 800a556:	f001 fbf1 	bl	800bd3c <printLog>
    if (moved < MIN_ANGLE_DETECT_MOVEMENT)
 800a55a:	edd7 7a05 	vldr	s15, [r7, #20]
 800a55e:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800a688 <alignSensor+0x240>
 800a562:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a56a:	d504      	bpl.n	800a576 <alignSensor+0x12e>
    { // minimum angle to detect movement
        printLog("Failed to notice movement\n");
 800a56c:	4847      	ldr	r0, [pc, #284]	@ (800a68c <alignSensor+0x244>)
 800a56e:	f001 fbe5 	bl	800bd3c <printLog>
        return 0; // failed calibration
 800a572:	2300      	movs	r3, #0
 800a574:	e073      	b.n	800a65e <alignSensor+0x216>
    }
    else if (mid_angle < end_angle)
 800a576:	ed97 7a07 	vldr	s14, [r7, #28]
 800a57a:	edd7 7a06 	vldr	s15, [r7, #24]
 800a57e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a586:	d507      	bpl.n	800a598 <alignSensor+0x150>
    {
        printLog("sensor_direction==CCW\n");
 800a588:	4841      	ldr	r0, [pc, #260]	@ (800a690 <alignSensor+0x248>)
 800a58a:	f001 fbd7 	bl	800bd3c <printLog>
        motor->magEncoder.direction = CCW;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	22ff      	movs	r2, #255	@ 0xff
 800a592:	f883 2020 	strb.w	r2, [r3, #32]
 800a596:	e006      	b.n	800a5a6 <alignSensor+0x15e>
    }
    else
    {
        printLog("sensor_direction==CW\n");
 800a598:	483e      	ldr	r0, [pc, #248]	@ (800a694 <alignSensor+0x24c>)
 800a59a:	f001 fbcf 	bl	800bd3c <printLog>
        motor->magEncoder.direction = CW;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	f883 2020 	strb.w	r2, [r3, #32]
    }
    // check pole pair number
    bool pp_check_result = !(fabsf(moved * motor->pole_pairs - _2PI) > 0.5f); // 0.5f is arbitrary number it can be lower or higher!
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a5ac:	ee07 3a90 	vmov	s15, r3
 800a5b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a5b4:	edd7 7a05 	vldr	s15, [r7, #20]
 800a5b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5bc:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800a668 <alignSensor+0x220>
 800a5c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a5c4:	eef0 7ae7 	vabs.f32	s15, s15
 800a5c8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a5cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5d4:	bfcc      	ite	gt
 800a5d6:	2301      	movgt	r3, #1
 800a5d8:	2300      	movle	r3, #0
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	f083 0301 	eor.w	r3, r3, #1
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	74fb      	strb	r3, [r7, #19]
    if (pp_check_result == false)
 800a5e4:	7cfb      	ldrb	r3, [r7, #19]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d10d      	bne.n	800a606 <alignSensor+0x1be>
    {
        printLog("PP check: fail - estimated pp: %d\n", (int)(_2PI / moved));
 800a5ea:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800a668 <alignSensor+0x220>
 800a5ee:	ed97 7a05 	vldr	s14, [r7, #20]
 800a5f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a5fa:	ee17 1a90 	vmov	r1, s15
 800a5fe:	4826      	ldr	r0, [pc, #152]	@ (800a698 <alignSensor+0x250>)
 800a600:	f001 fb9c 	bl	800bd3c <printLog>
 800a604:	e002      	b.n	800a60c <alignSensor+0x1c4>
    }
    else
    {
        printLog("PP check: OK!\n");
 800a606:	4825      	ldr	r0, [pc, #148]	@ (800a69c <alignSensor+0x254>)
 800a608:	f001 fb98 	bl	800bd3c <printLog>
    }

    // align the electrical phases of the motor and sensor
    // set angle -90(270 = 3PI/2) degrees
    goToZeroElecAngle(motor);
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f7ff ff01 	bl	800a414 <goToZeroElecAngle>
    // read the sensor
    encoderUpdate(&motor->magEncoder);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	4618      	mov	r0, r3
 800a616:	f000 fc35 	bl	800ae84 <encoderUpdate>
    // get the current zero electric angle
    motor->zeroElectricAngleOffSet = 0;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f04f 0200 	mov.w	r2, #0
 800a620:	635a      	str	r2, [r3, #52]	@ 0x34
    getElecAngle(motor);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 f840 	bl	800a6a8 <getElecAngle>
    motor->zeroElectricAngleOffSet = motor->angle_el;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	635a      	str	r2, [r3, #52]	@ 0x34
    // zero_electric_angle =  _normalizeAngle(_electricalAngle(sensor_direction*sensor->getAngle(), pole_pairs));

    // encoderUpdate(&motor->magEncoder);
    getElecAngle(motor);
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 f839 	bl	800a6a8 <getElecAngle>
    // motor->zeroElectricAngleOffSet = 0;
    // printLog("[zeroAngleOffset]:%f  [zeroAngle]:%f\r\n", motor->zeroElectricAngleOffSet, motor->angle_el);
    printLog("[zeroAngleOffset]:%f\n", motor->zeroElectricAngleOffSet);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7f5 ffac 	bl	8000598 <__aeabi_f2d>
 800a640:	4602      	mov	r2, r0
 800a642:	460b      	mov	r3, r1
 800a644:	4816      	ldr	r0, [pc, #88]	@ (800a6a0 <alignSensor+0x258>)
 800a646:	f001 fb79 	bl	800bd3c <printLog>
    printLog("[zeroAngle]:%f\n", motor->angle_el);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a64e:	4618      	mov	r0, r3
 800a650:	f7f5 ffa2 	bl	8000598 <__aeabi_f2d>
 800a654:	4602      	mov	r2, r0
 800a656:	460b      	mov	r3, r1
 800a658:	4812      	ldr	r0, [pc, #72]	@ (800a6a4 <alignSensor+0x25c>)
 800a65a:	f001 fb6f 	bl	800bd3c <printLog>
    // // make sure the angle_el is about zero

    // delay(200);
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3728      	adds	r7, #40	@ 0x28
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
 800a666:	bf00      	nop
 800a668:	40c90fdb 	.word	0x40c90fdb
 800a66c:	43fa0000 	.word	0x43fa0000
 800a670:	4096cbe4 	.word	0x4096cbe4
 800a674:	00000000 	.word	0x00000000
 800a678:	4013cd3a 	.word	0x4013cd3a
 800a67c:	080116f0 	.word	0x080116f0
 800a680:	08011700 	.word	0x08011700
 800a684:	08011710 	.word	0x08011710
 800a688:	3d7ecfa9 	.word	0x3d7ecfa9
 800a68c:	0801171c 	.word	0x0801171c
 800a690:	08011738 	.word	0x08011738
 800a694:	08011750 	.word	0x08011750
 800a698:	08011768 	.word	0x08011768
 800a69c:	0801178c 	.word	0x0801178c
 800a6a0:	0801179c 	.word	0x0801179c
 800a6a4:	080117b4 	.word	0x080117b4

0800a6a8 <getElecAngle>:

void getElecAngle(BldcMotor *motor)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
    motor->angle_el = _normalizeAngle(motor->pole_pairs * motor->magEncoder.shaftAngle - motor->zeroElectricAngleOffSet);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a6b6:	ee07 3a90 	vmov	s15, r3
 800a6ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	edd3 7a04 	vldr	s15, [r3, #16]
 800a6c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800a6ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6d2:	eeb0 0a67 	vmov.f32	s0, s15
 800a6d6:	f000 fd77 	bl	800b1c8 <_normalizeAngle>
 800a6da:	eef0 7a40 	vmov.f32	s15, s0
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
}
 800a6e4:	bf00      	nop
 800a6e6:	3708      	adds	r7, #8
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <foc>:

void foc(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b088      	sub	sp, #32
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	607a      	str	r2, [r7, #4]

    if (motor->state == MOTOR_CALIBRATE)
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d10d      	bne.n	800a71e <foc+0x32>
    {
        getCurrentOffsets(motor, adc_a, adc_b, 100);
 800a702:	2364      	movs	r3, #100	@ 0x64
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	68b9      	ldr	r1, [r7, #8]
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f000 f9b5 	bl	800aa78 <getCurrentOffsets>
        alignSensor(motor);
 800a70e:	68f8      	ldr	r0, [r7, #12]
 800a710:	f7ff fe9a 	bl	800a448 <alignSensor>
        motor->state = MOTOR_START;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2202      	movs	r2, #2
 800a718:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                break;
            }
            setTorque(motor, motor->Uq, motor->Ud, motor->angle_el);
        }
    }
}
 800a71c:	e19a      	b.n	800aa54 <foc+0x368>
        getPhaseCurrents(motor, adc_a, adc_b);
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	68b9      	ldr	r1, [r7, #8]
 800a722:	68f8      	ldr	r0, [r7, #12]
 800a724:	f000 fa78 	bl	800ac18 <getPhaseCurrents>
        getABCurrents(motor);
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f000 fb17 	bl	800ad5c <getABCurrents>
        getDQCurrents(motor);
 800a72e:	68f8      	ldr	r0, [r7, #12]
 800a730:	f000 fb3a 	bl	800ada8 <getDQCurrents>
        motor->Iq = lpfOperator(&motor->IqFilter, motor->Iq);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f103 02f4 	add.w	r2, r3, #244	@ 0xf4
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800a740:	eeb0 0a67 	vmov.f32	s0, s15
 800a744:	4610      	mov	r0, r2
 800a746:	f000 fc37 	bl	800afb8 <lpfOperator>
 800a74a:	eef0 7a40 	vmov.f32	s15, s0
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
        motor->Id = lpfOperator(&motor->IdFilter, motor->Id);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f503 7280 	add.w	r2, r3, #256	@ 0x100
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800a760:	eeb0 0a67 	vmov.f32	s0, s15
 800a764:	4610      	mov	r0, r2
 800a766:	f000 fc27 	bl	800afb8 <lpfOperator>
 800a76a:	eef0 7a40 	vmov.f32	s15, s0
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
        encoderUpdate(&motor->magEncoder);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	4618      	mov	r0, r3
 800a778:	f000 fb84 	bl	800ae84 <encoderUpdate>
        motor->magEncoder.velocity = lpfOperator(&motor->velocityFilter, motor->magEncoder.velocity);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f503 7286 	add.w	r2, r3, #268	@ 0x10c
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	edd3 7a06 	vldr	s15, [r3, #24]
 800a788:	eeb0 0a67 	vmov.f32	s0, s15
 800a78c:	4610      	mov	r0, r2
 800a78e:	f000 fc13 	bl	800afb8 <lpfOperator>
 800a792:	eef0 7a40 	vmov.f32	s15, s0
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	edc3 7a06 	vstr	s15, [r3, #24]
        getElecAngle(motor);
 800a79c:	68f8      	ldr	r0, [r7, #12]
 800a79e:	f7ff ff83 	bl	800a6a8 <getElecAngle>
        if (motor->state == MOTOR_READY)
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	f000 8153 	beq.w	800aa54 <foc+0x368>
        else if (motor->state == MOTOR_START)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a7b4:	2b02      	cmp	r3, #2
 800a7b6:	f040 814d 	bne.w	800aa54 <foc+0x368>
            switch (motor->controlType)
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800a7c0:	2b03      	cmp	r3, #3
 800a7c2:	f200 8135 	bhi.w	800aa30 <foc+0x344>
 800a7c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a7cc <foc+0xe0>)
 800a7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7cc:	0800a839 	.word	0x0800a839
 800a7d0:	0800a7dd 	.word	0x0800a7dd
 800a7d4:	0800a8a9 	.word	0x0800a8a9
 800a7d8:	0800a95f 	.word	0x0800a95f
                motor->target = 50;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	4a9f      	ldr	r2, [pc, #636]	@ (800aa5c <foc+0x370>)
 800a7e0:	631a      	str	r2, [r3, #48]	@ 0x30
                shaftAngle = _normalizeAngle(shaftAngle + motor->target * motor->Ts);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800a7ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7f2:	4b9b      	ldr	r3, [pc, #620]	@ (800aa60 <foc+0x374>)
 800a7f4:	edd3 7a00 	vldr	s15, [r3]
 800a7f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7fc:	eeb0 0a67 	vmov.f32	s0, s15
 800a800:	f000 fce2 	bl	800b1c8 <_normalizeAngle>
 800a804:	eef0 7a40 	vmov.f32	s15, s0
 800a808:	4b95      	ldr	r3, [pc, #596]	@ (800aa60 <foc+0x374>)
 800a80a:	edc3 7a00 	vstr	s15, [r3]
                motor->angle_el = _electricalAngle(shaftAngle, motor->pole_pairs);
 800a80e:	4b94      	ldr	r3, [pc, #592]	@ (800aa60 <foc+0x374>)
 800a810:	edd3 7a00 	vldr	s15, [r3]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a81a:	4618      	mov	r0, r3
 800a81c:	eeb0 0a67 	vmov.f32	s0, s15
 800a820:	f000 fd08 	bl	800b234 <_electricalAngle>
 800a824:	eef0 7a40 	vmov.f32	s15, s0
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                motor->Uq = OPEN_LOOP_TORQUE;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	4a8c      	ldr	r2, [pc, #560]	@ (800aa64 <foc+0x378>)
 800a832:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
                break;
 800a836:	e0fb      	b.n	800aa30 <foc+0x344>
                if (motor->torqueType == VOLTAGE)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d108      	bne.n	800a854 <foc+0x168>
                    motor->target = UqMAX;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	4a88      	ldr	r2, [pc, #544]	@ (800aa68 <foc+0x37c>)
 800a846:	631a      	str	r2, [r3, #48]	@ 0x30
                    motor->Uq = motor->target;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
                break;
 800a852:	e0ed      	b.n	800aa30 <foc+0x344>
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800a860:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 800aa6c <foc+0x380>
 800a864:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a868:	eeb0 0a67 	vmov.f32	s0, s15
 800a86c:	4610      	mov	r0, r2
 800a86e:	f000 fd2b 	bl	800b2c8 <pidOperator>
 800a872:	eef0 7a40 	vmov.f32	s15, s0
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                    motor->Uq = pidOperator(&motor->pidIq, motor->target - motor->Iq);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800a88e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a892:	eeb0 0a67 	vmov.f32	s0, s15
 800a896:	4610      	mov	r0, r2
 800a898:	f000 fd16 	bl	800b2c8 <pidOperator>
 800a89c:	eef0 7a40 	vmov.f32	s15, s0
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800a8a6:	e0c3      	b.n	800aa30 <foc+0x344>
                if (motor->torqueType == VOLTAGE)
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d119      	bne.n	800a8e6 <foc+0x1fa>
                    motor->target = 190;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	4a6e      	ldr	r2, [pc, #440]	@ (800aa70 <foc+0x384>)
 800a8b6:	631a      	str	r2, [r3, #48]	@ 0x30
                    velocityErr = motor->target - motor->magEncoder.velocity;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	edd3 7a06 	vldr	s15, [r3, #24]
 800a8c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8c8:	edc7 7a04 	vstr	s15, [r7, #16]
                    motor->Uq = pidOperator(&motor->velocityPID, velocityErr);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	33ac      	adds	r3, #172	@ 0xac
 800a8d0:	ed97 0a04 	vldr	s0, [r7, #16]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f000 fcf7 	bl	800b2c8 <pidOperator>
 800a8da:	eef0 7a40 	vmov.f32	s15, s0
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800a8e4:	e0a4      	b.n	800aa30 <foc+0x344>
                    velocityErr = motor->target - motor->magEncoder.velocity;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	edd3 7a06 	vldr	s15, [r3, #24]
 800a8f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8f6:	edc7 7a04 	vstr	s15, [r7, #16]
                    IqRef = pidOperator(&motor->velocityPID, velocityErr);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	33ac      	adds	r3, #172	@ 0xac
 800a8fe:	ed97 0a04 	vldr	s0, [r7, #16]
 800a902:	4618      	mov	r0, r3
 800a904:	f000 fce0 	bl	800b2c8 <pidOperator>
 800a908:	ed87 0a05 	vstr	s0, [r7, #20]
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800a918:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 800aa6c <foc+0x380>
 800a91c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a920:	eeb0 0a67 	vmov.f32	s0, s15
 800a924:	4610      	mov	r0, r2
 800a926:	f000 fccf 	bl	800b2c8 <pidOperator>
 800a92a:	eef0 7a40 	vmov.f32	s15, s0
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                    motor->Uq = pidOperator(&motor->pidIq, IqRef - motor->Iq);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800a940:	ed97 7a05 	vldr	s14, [r7, #20]
 800a944:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a948:	eeb0 0a67 	vmov.f32	s0, s15
 800a94c:	4610      	mov	r0, r2
 800a94e:	f000 fcbb 	bl	800b2c8 <pidOperator>
 800a952:	eef0 7a40 	vmov.f32	s15, s0
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800a95c:	e068      	b.n	800aa30 <foc+0x344>
                if (motor->torqueType == VOLTAGE)
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800a964:	2b00      	cmp	r3, #0
 800a966:	d116      	bne.n	800a996 <foc+0x2aa>
                    angleErr = motor->target - motor->magEncoder.fullAngle;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	edd3 7a05 	vldr	s15, [r3, #20]
 800a974:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a978:	edc7 7a07 	vstr	s15, [r7, #28]
                    motor->Uq = pidOperator(&motor->anglePID, angleErr);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	33d0      	adds	r3, #208	@ 0xd0
 800a980:	ed97 0a07 	vldr	s0, [r7, #28]
 800a984:	4618      	mov	r0, r3
 800a986:	f000 fc9f 	bl	800b2c8 <pidOperator>
 800a98a:	eef0 7a40 	vmov.f32	s15, s0
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800a994:	e04b      	b.n	800aa2e <foc+0x342>
                    angleErr = motor->target - motor->magEncoder.fullAngle;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	edd3 7a05 	vldr	s15, [r3, #20]
 800a9a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9a6:	edc7 7a07 	vstr	s15, [r7, #28]
                    velocityRef = pidOperator(&motor->anglePID, angleErr);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	33d0      	adds	r3, #208	@ 0xd0
 800a9ae:	ed97 0a07 	vldr	s0, [r7, #28]
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f000 fc88 	bl	800b2c8 <pidOperator>
 800a9b8:	ed87 0a06 	vstr	s0, [r7, #24]
                    IqRef = pidOperator(&motor->velocityPID, velocityRef - motor->magEncoder.velocity);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f103 02ac 	add.w	r2, r3, #172	@ 0xac
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	edd3 7a06 	vldr	s15, [r3, #24]
 800a9c8:	ed97 7a06 	vldr	s14, [r7, #24]
 800a9cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9d0:	eeb0 0a67 	vmov.f32	s0, s15
 800a9d4:	4610      	mov	r0, r2
 800a9d6:	f000 fc77 	bl	800b2c8 <pidOperator>
 800a9da:	ed87 0a05 	vstr	s0, [r7, #20]
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800a9ea:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800aa6c <foc+0x380>
 800a9ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9f2:	eeb0 0a67 	vmov.f32	s0, s15
 800a9f6:	4610      	mov	r0, r2
 800a9f8:	f000 fc66 	bl	800b2c8 <pidOperator>
 800a9fc:	eef0 7a40 	vmov.f32	s15, s0
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                    motor->Uq = pidOperator(&motor->pidIq, IqRef - motor->Iq);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800aa12:	ed97 7a05 	vldr	s14, [r7, #20]
 800aa16:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa1a:	eeb0 0a67 	vmov.f32	s0, s15
 800aa1e:	4610      	mov	r0, r2
 800aa20:	f000 fc52 	bl	800b2c8 <pidOperator>
 800aa24:	eef0 7a40 	vmov.f32	s15, s0
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800aa2e:	bf00      	nop
            setTorque(motor, motor->Uq, motor->Ud, motor->angle_el);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	edd3 7a47 	vldr	s15, [r3, #284]	@ 0x11c
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	ed93 7a46 	vldr	s14, [r3, #280]	@ 0x118
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800aa42:	eeb0 1a66 	vmov.f32	s2, s13
 800aa46:	eef0 0a47 	vmov.f32	s1, s14
 800aa4a:	eeb0 0a67 	vmov.f32	s0, s15
 800aa4e:	68f8      	ldr	r0, [r7, #12]
 800aa50:	f000 fd42 	bl	800b4d8 <setTorque>
}
 800aa54:	bf00      	nop
 800aa56:	3720      	adds	r7, #32
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}
 800aa5c:	42480000 	.word	0x42480000
 800aa60:	20000620 	.word	0x20000620
 800aa64:	4013cd3a 	.word	0x4013cd3a
 800aa68:	4093cd3a 	.word	0x4093cd3a
 800aa6c:	00000000 	.word	0x00000000
 800aa70:	433e0000 	.word	0x433e0000
 800aa74:	00000000 	.word	0x00000000

0800aa78 <getCurrentOffsets>:
#include "math_utils.h"
#include "focLib.h"

// Function finding zero offsets of the ADC
void getCurrentOffsets(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b, uint32_t rounds)
{
 800aa78:	b5b0      	push	{r4, r5, r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	607a      	str	r2, [r7, #4]
 800aa84:	603b      	str	r3, [r7, #0]
    // find adc offset = zero current voltage
    motor->offset_ia = 0;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f04f 0200 	mov.w	r2, #0
 800aa8c:	641a      	str	r2, [r3, #64]	@ 0x40
    motor->offset_ib = 0;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f04f 0200 	mov.w	r2, #0
 800aa94:	645a      	str	r2, [r3, #68]	@ 0x44
    // read the adc voltage  times ( arbitrary number )
    for (int i = 0; i < rounds; i++)
 800aa96:	2300      	movs	r3, #0
 800aa98:	617b      	str	r3, [r7, #20]
 800aa9a:	e076      	b.n	800ab8a <getCurrentOffsets+0x112>
    {
        motor->offset_ia += ADC_2_CURRENT(adc_a);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7f5 fd79 	bl	8000598 <__aeabi_f2d>
 800aaa6:	4604      	mov	r4, r0
 800aaa8:	460d      	mov	r5, r1
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	ee07 3a90 	vmov	s15, r3
 800aab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aab4:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 800ac08 <getCurrentOffsets+0x190>
 800aab8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aabc:	ee17 0a90 	vmov	r0, s15
 800aac0:	f7f5 fd6a 	bl	8000598 <__aeabi_f2d>
 800aac4:	a34c      	add	r3, pc, #304	@ (adr r3, 800abf8 <getCurrentOffsets+0x180>)
 800aac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaca:	f7f5 fee7 	bl	800089c <__aeabi_ddiv>
 800aace:	4602      	mov	r2, r0
 800aad0:	460b      	mov	r3, r1
 800aad2:	4610      	mov	r0, r2
 800aad4:	4619      	mov	r1, r3
 800aad6:	a34a      	add	r3, pc, #296	@ (adr r3, 800ac00 <getCurrentOffsets+0x188>)
 800aad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aadc:	f7f5 fede 	bl	800089c <__aeabi_ddiv>
 800aae0:	4602      	mov	r2, r0
 800aae2:	460b      	mov	r3, r1
 800aae4:	4610      	mov	r0, r2
 800aae6:	4619      	mov	r1, r3
 800aae8:	f04f 0200 	mov.w	r2, #0
 800aaec:	4b47      	ldr	r3, [pc, #284]	@ (800ac0c <getCurrentOffsets+0x194>)
 800aaee:	f7f5 fed5 	bl	800089c <__aeabi_ddiv>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	4629      	mov	r1, r5
 800aafa:	f7f5 fbef 	bl	80002dc <__adddf3>
 800aafe:	4602      	mov	r2, r0
 800ab00:	460b      	mov	r3, r1
 800ab02:	4610      	mov	r0, r2
 800ab04:	4619      	mov	r1, r3
 800ab06:	f7f6 f897 	bl	8000c38 <__aeabi_d2f>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	641a      	str	r2, [r3, #64]	@ 0x40
        motor->offset_ib += ADC_2_CURRENT(adc_b);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7f5 fd3f 	bl	8000598 <__aeabi_f2d>
 800ab1a:	4604      	mov	r4, r0
 800ab1c:	460d      	mov	r5, r1
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	ee07 3a90 	vmov	s15, r3
 800ab24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab28:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800ac08 <getCurrentOffsets+0x190>
 800ab2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab30:	ee17 0a90 	vmov	r0, s15
 800ab34:	f7f5 fd30 	bl	8000598 <__aeabi_f2d>
 800ab38:	a32f      	add	r3, pc, #188	@ (adr r3, 800abf8 <getCurrentOffsets+0x180>)
 800ab3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3e:	f7f5 fead 	bl	800089c <__aeabi_ddiv>
 800ab42:	4602      	mov	r2, r0
 800ab44:	460b      	mov	r3, r1
 800ab46:	4610      	mov	r0, r2
 800ab48:	4619      	mov	r1, r3
 800ab4a:	a32d      	add	r3, pc, #180	@ (adr r3, 800ac00 <getCurrentOffsets+0x188>)
 800ab4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab50:	f7f5 fea4 	bl	800089c <__aeabi_ddiv>
 800ab54:	4602      	mov	r2, r0
 800ab56:	460b      	mov	r3, r1
 800ab58:	4610      	mov	r0, r2
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	f04f 0200 	mov.w	r2, #0
 800ab60:	4b2a      	ldr	r3, [pc, #168]	@ (800ac0c <getCurrentOffsets+0x194>)
 800ab62:	f7f5 fe9b 	bl	800089c <__aeabi_ddiv>
 800ab66:	4602      	mov	r2, r0
 800ab68:	460b      	mov	r3, r1
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	4629      	mov	r1, r5
 800ab6e:	f7f5 fbb5 	bl	80002dc <__adddf3>
 800ab72:	4602      	mov	r2, r0
 800ab74:	460b      	mov	r3, r1
 800ab76:	4610      	mov	r0, r2
 800ab78:	4619      	mov	r1, r3
 800ab7a:	f7f6 f85d 	bl	8000c38 <__aeabi_d2f>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	645a      	str	r2, [r3, #68]	@ 0x44
    for (int i = 0; i < rounds; i++)
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	3301      	adds	r3, #1
 800ab88:	617b      	str	r3, [r7, #20]
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	683a      	ldr	r2, [r7, #0]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d884      	bhi.n	800aa9c <getCurrentOffsets+0x24>
    }
    // calculate the mean offsets
    motor->offset_ia = motor->offset_ia / rounds;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	ee07 3a90 	vmov	s15, r3
 800ab9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    motor->offset_ib = motor->offset_ib / rounds;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	ee07 3a90 	vmov	s15, r3
 800abb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800abbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    // printLog("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
    // printf("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
    printLog("[offset_ia]:%f\r\n", motor->offset_ia);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abca:	4618      	mov	r0, r3
 800abcc:	f7f5 fce4 	bl	8000598 <__aeabi_f2d>
 800abd0:	4602      	mov	r2, r0
 800abd2:	460b      	mov	r3, r1
 800abd4:	480e      	ldr	r0, [pc, #56]	@ (800ac10 <getCurrentOffsets+0x198>)
 800abd6:	f001 f8b1 	bl	800bd3c <printLog>
    printLog("[offset_ib]:%f\r\n", motor->offset_ib);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abde:	4618      	mov	r0, r3
 800abe0:	f7f5 fcda 	bl	8000598 <__aeabi_f2d>
 800abe4:	4602      	mov	r2, r0
 800abe6:	460b      	mov	r3, r1
 800abe8:	480a      	ldr	r0, [pc, #40]	@ (800ac14 <getCurrentOffsets+0x19c>)
 800abea:	f001 f8a7 	bl	800bd3c <printLog>
    // _dbg_printf("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
}
 800abee:	bf00      	nop
 800abf0:	3718      	adds	r7, #24
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bdb0      	pop	{r4, r5, r7, pc}
 800abf6:	bf00      	nop
 800abf8:	00000000 	.word	0x00000000
 800abfc:	40affe00 	.word	0x40affe00
 800ac00:	40000000 	.word	0x40000000
 800ac04:	3f847ae1 	.word	0x3f847ae1
 800ac08:	40533333 	.word	0x40533333
 800ac0c:	40240000 	.word	0x40240000
 800ac10:	080117c4 	.word	0x080117c4
 800ac14:	080117d8 	.word	0x080117d8

0800ac18 <getPhaseCurrents>:

// read all three phase currents (if possible 2 or 3)
void getPhaseCurrents(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800ac18:	b5b0      	push	{r4, r5, r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	60b9      	str	r1, [r7, #8]
 800ac22:	607a      	str	r2, [r7, #4]
    motor->Ia = ADC_2_CURRENT(adc_a) - motor->offset_ia; // amps
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	ee07 3a90 	vmov	s15, r3
 800ac2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac2e:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800ad50 <getPhaseCurrents+0x138>
 800ac32:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac36:	ee17 0a90 	vmov	r0, s15
 800ac3a:	f7f5 fcad 	bl	8000598 <__aeabi_f2d>
 800ac3e:	a340      	add	r3, pc, #256	@ (adr r3, 800ad40 <getPhaseCurrents+0x128>)
 800ac40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac44:	f7f5 fe2a 	bl	800089c <__aeabi_ddiv>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	4610      	mov	r0, r2
 800ac4e:	4619      	mov	r1, r3
 800ac50:	a33d      	add	r3, pc, #244	@ (adr r3, 800ad48 <getPhaseCurrents+0x130>)
 800ac52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac56:	f7f5 fe21 	bl	800089c <__aeabi_ddiv>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	4610      	mov	r0, r2
 800ac60:	4619      	mov	r1, r3
 800ac62:	f04f 0200 	mov.w	r2, #0
 800ac66:	4b3b      	ldr	r3, [pc, #236]	@ (800ad54 <getPhaseCurrents+0x13c>)
 800ac68:	f7f5 fe18 	bl	800089c <__aeabi_ddiv>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	460b      	mov	r3, r1
 800ac70:	4614      	mov	r4, r2
 800ac72:	461d      	mov	r5, r3
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7f5 fc8d 	bl	8000598 <__aeabi_f2d>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	460b      	mov	r3, r1
 800ac82:	4620      	mov	r0, r4
 800ac84:	4629      	mov	r1, r5
 800ac86:	f7f5 fb27 	bl	80002d8 <__aeabi_dsub>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	4610      	mov	r0, r2
 800ac90:	4619      	mov	r1, r3
 800ac92:	f7f5 ffd1 	bl	8000c38 <__aeabi_d2f>
 800ac96:	4602      	mov	r2, r0
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	649a      	str	r2, [r3, #72]	@ 0x48
    motor->Ic = ADC_2_CURRENT(adc_b) - motor->offset_ib;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	ee07 3a90 	vmov	s15, r3
 800aca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aca6:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800ad50 <getPhaseCurrents+0x138>
 800acaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800acae:	ee17 0a90 	vmov	r0, s15
 800acb2:	f7f5 fc71 	bl	8000598 <__aeabi_f2d>
 800acb6:	a322      	add	r3, pc, #136	@ (adr r3, 800ad40 <getPhaseCurrents+0x128>)
 800acb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acbc:	f7f5 fdee 	bl	800089c <__aeabi_ddiv>
 800acc0:	4602      	mov	r2, r0
 800acc2:	460b      	mov	r3, r1
 800acc4:	4610      	mov	r0, r2
 800acc6:	4619      	mov	r1, r3
 800acc8:	a31f      	add	r3, pc, #124	@ (adr r3, 800ad48 <getPhaseCurrents+0x130>)
 800acca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acce:	f7f5 fde5 	bl	800089c <__aeabi_ddiv>
 800acd2:	4602      	mov	r2, r0
 800acd4:	460b      	mov	r3, r1
 800acd6:	4610      	mov	r0, r2
 800acd8:	4619      	mov	r1, r3
 800acda:	f04f 0200 	mov.w	r2, #0
 800acde:	4b1d      	ldr	r3, [pc, #116]	@ (800ad54 <getPhaseCurrents+0x13c>)
 800ace0:	f7f5 fddc 	bl	800089c <__aeabi_ddiv>
 800ace4:	4602      	mov	r2, r0
 800ace6:	460b      	mov	r3, r1
 800ace8:	4614      	mov	r4, r2
 800acea:	461d      	mov	r5, r3
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7f5 fc51 	bl	8000598 <__aeabi_f2d>
 800acf6:	4602      	mov	r2, r0
 800acf8:	460b      	mov	r3, r1
 800acfa:	4620      	mov	r0, r4
 800acfc:	4629      	mov	r1, r5
 800acfe:	f7f5 faeb 	bl	80002d8 <__aeabi_dsub>
 800ad02:	4602      	mov	r2, r0
 800ad04:	460b      	mov	r3, r1
 800ad06:	4610      	mov	r0, r2
 800ad08:	4619      	mov	r1, r3
 800ad0a:	f7f5 ff95 	bl	8000c38 <__aeabi_d2f>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	651a      	str	r2, [r3, #80]	@ 0x50
    motor->Ib = 0 - motor->Ia - motor->Ic;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800ad1a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800ad58 <getPhaseCurrents+0x140>
 800ad1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800ad28:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
}
 800ad32:	bf00      	nop
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bdb0      	pop	{r4, r5, r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	f3af 8000 	nop.w
 800ad40:	00000000 	.word	0x00000000
 800ad44:	40affe00 	.word	0x40affe00
 800ad48:	40000000 	.word	0x40000000
 800ad4c:	3f847ae1 	.word	0x3f847ae1
 800ad50:	40533333 	.word	0x40533333
 800ad54:	40240000 	.word	0x40240000
 800ad58:	00000000 	.word	0x00000000

0800ad5c <getABCurrents>:
// Ibeta = 1/sqrt(3) * Ia + 1/sqrt(3) * 2Ib
/*============================================================================*/
//   calculating Alpha Beta currents from phase currents
//   - function calculating Clarke transform of the phase currents
void getABCurrents(BldcMotor *motor)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
    motor->Ialpha = motor->Ia;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	655a      	str	r2, [r3, #84]	@ 0x54
    motor->Ibeta = _1_SQRT3 * motor->Ia + _2_SQRT3 * motor->Ib;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800ad72:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800ada0 <getABCurrents+0x44>
 800ad76:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800ad80:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800ada4 <getABCurrents+0x48>
 800ad84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ad88:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
}
 800ad92:	bf00      	nop
 800ad94:	370c      	adds	r7, #12
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr
 800ad9e:	bf00      	nop
 800ada0:	3f13cd3a 	.word	0x3f13cd3a
 800ada4:	3f93cd3a 	.word	0x3f93cd3a

0800ada8 <getDQCurrents>:
/*============================================================================*/
// function used with the foc algorihtm
//   calculating D and Q currents from Alpha Beta currents and electrical angle
//   - function calculating Clarke transform of the phase currents
void getDQCurrents(BldcMotor *motor)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
    float ct;
    float st;
    _sincos(motor->angle_el, &st, &ct);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800adb6:	f107 020c 	add.w	r2, r7, #12
 800adba:	f107 0308 	add.w	r3, r7, #8
 800adbe:	4611      	mov	r1, r2
 800adc0:	4618      	mov	r0, r3
 800adc2:	eeb0 0a67 	vmov.f32	s0, s15
 800adc6:	f000 f9df 	bl	800b188 <_sincos>
    motor->Id = motor->Ialpha * ct + motor->Ibeta * st;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 800add0:	edd7 7a03 	vldr	s15, [r7, #12]
 800add4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 800adde:	edd7 7a02 	vldr	s15, [r7, #8]
 800ade2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ade6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
    motor->Iq = motor->Ibeta * ct - motor->Ialpha * st;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 800adf6:	edd7 7a03 	vldr	s15, [r7, #12]
 800adfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 800ae04:	edd7 7a02 	vldr	s15, [r7, #8]
 800ae08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ae0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
 800ae16:	bf00      	nop
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <encoderInit>:

#include "encoder.h"
#include "math_utils.h"
#include "focLib.h"
void encoderInit(MagEncoder *encoder, float _Ts, float (*_getRawAngle)(void), Direction _direction)
{
 800ae1e:	b480      	push	{r7}
 800ae20:	b085      	sub	sp, #20
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	60f8      	str	r0, [r7, #12]
 800ae26:	ed87 0a02 	vstr	s0, [r7, #8]
 800ae2a:	6079      	str	r1, [r7, #4]
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	70fb      	strb	r3, [r7, #3]
    encoder->angle_prev = 0;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f04f 0200 	mov.w	r2, #0
 800ae36:	601a      	str	r2, [r3, #0]
    encoder->vel_angle_prev = 0;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f04f 0200 	mov.w	r2, #0
 800ae3e:	605a      	str	r2, [r3, #4]
    encoder->full_rotations = 0;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2200      	movs	r2, #0
 800ae44:	609a      	str	r2, [r3, #8]
    encoder->vel_full_rotations = 0;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	60da      	str	r2, [r3, #12]
    encoder->shaftAngle = 0;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f04f 0200 	mov.w	r2, #0
 800ae52:	611a      	str	r2, [r3, #16]
    encoder->fullAngle = 0;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f04f 0200 	mov.w	r2, #0
 800ae5a:	615a      	str	r2, [r3, #20]
    encoder->velocity = 0;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f04f 0200 	mov.w	r2, #0
 800ae62:	619a      	str	r2, [r3, #24]
    encoder->Ts = _Ts;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	68ba      	ldr	r2, [r7, #8]
 800ae68:	61da      	str	r2, [r3, #28]
    encoder->getRawAngle = _getRawAngle;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	625a      	str	r2, [r3, #36]	@ 0x24
    encoder->direction = _direction;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	78fa      	ldrb	r2, [r7, #3]
 800ae74:	f883 2020 	strb.w	r2, [r3, #32]
}
 800ae78:	bf00      	nop
 800ae7a:	3714      	adds	r7, #20
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <encoderUpdate>:

void encoderUpdate(MagEncoder *encoder)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
    float val = encoder->getRawAngle() * encoder->direction;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae90:	4798      	blx	r3
 800ae92:	eeb0 7a40 	vmov.f32	s14, s0
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800ae9c:	ee07 3a90 	vmov	s15, r3
 800aea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aea8:	edc7 7a03 	vstr	s15, [r7, #12]

    float d_angle = val - encoder->angle_prev;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	edd3 7a00 	vldr	s15, [r3]
 800aeb2:	ed97 7a03 	vldr	s14, [r7, #12]
 800aeb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aeba:	edc7 7a02 	vstr	s15, [r7, #8]
    // 圈数检测
    if (fabsf(d_angle) > (0.8f * _2PI))
 800aebe:	edd7 7a02 	vldr	s15, [r7, #8]
 800aec2:	eef0 7ae7 	vabs.f32	s15, s15
 800aec6:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800af80 <encoderUpdate+0xfc>
 800aeca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aed2:	dd0f      	ble.n	800aef4 <encoderUpdate+0x70>
        encoder->full_rotations += (d_angle > 0) ? -1 : 1;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	edd7 7a02 	vldr	s15, [r7, #8]
 800aedc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aee4:	dd02      	ble.n	800aeec <encoderUpdate+0x68>
 800aee6:	f04f 32ff 	mov.w	r2, #4294967295
 800aeea:	e000      	b.n	800aeee <encoderUpdate+0x6a>
 800aeec:	2201      	movs	r2, #1
 800aeee:	441a      	add	r2, r3
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	609a      	str	r2, [r3, #8]

    // angle
    encoder->angle_prev = val;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	68fa      	ldr	r2, [r7, #12]
 800aef8:	601a      	str	r2, [r3, #0]
    encoder->shaftAngle = val;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	68fa      	ldr	r2, [r7, #12]
 800aefe:	611a      	str	r2, [r3, #16]
    encoder->fullAngle = (float)encoder->full_rotations * _2PI + encoder->angle_prev;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	ee07 3a90 	vmov	s15, r3
 800af08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af0c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800af84 <encoderUpdate+0x100>
 800af10:	ee27 7a87 	vmul.f32	s14, s15, s14
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	edd3 7a00 	vldr	s15, [r3]
 800af1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	edc3 7a05 	vstr	s15, [r3, #20]

    // 速度计算
    val = ((float)(encoder->full_rotations - encoder->vel_full_rotations) * _2PI + (encoder->angle_prev - encoder->vel_angle_prev)) / encoder->Ts;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	689a      	ldr	r2, [r3, #8]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	1ad3      	subs	r3, r2, r3
 800af2e:	ee07 3a90 	vmov	s15, r3
 800af32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af36:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800af84 <encoderUpdate+0x100>
 800af3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	edd3 6a00 	vldr	s13, [r3]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	edd3 7a01 	vldr	s15, [r3, #4]
 800af4a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800af4e:	ee77 6a27 	vadd.f32	s13, s14, s15
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	ed93 7a07 	vldr	s14, [r3, #28]
 800af58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af5c:	edc7 7a03 	vstr	s15, [r7, #12]
    // 保存变量以待将来使用
    encoder->vel_angle_prev = encoder->angle_prev;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681a      	ldr	r2, [r3, #0]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	605a      	str	r2, [r3, #4]
    encoder->vel_full_rotations = encoder->full_rotations;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	689a      	ldr	r2, [r3, #8]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	60da      	str	r2, [r3, #12]
    encoder->velocity = val;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	68fa      	ldr	r2, [r7, #12]
 800af74:	619a      	str	r2, [r3, #24]
}
 800af76:	bf00      	nop
 800af78:	3710      	adds	r7, #16
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	40a0d97c 	.word	0x40a0d97c
 800af84:	40c90fdb 	.word	0x40c90fdb

0800af88 <lpfInit>:
#include "lowpass_filter.h"

void lpfInit(LowPassFilter *filter, const float _Tf, const float _dt)
{
 800af88:	b480      	push	{r7}
 800af8a:	b085      	sub	sp, #20
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	ed87 0a02 	vstr	s0, [r7, #8]
 800af94:	edc7 0a01 	vstr	s1, [r7, #4]
    filter->Tf = _Tf;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	68ba      	ldr	r2, [r7, #8]
 800af9c:	601a      	str	r2, [r3, #0]
    filter->dt = _dt;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	605a      	str	r2, [r3, #4]
    filter->y_prev = 0;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f04f 0200 	mov.w	r2, #0
 800afaa:	609a      	str	r2, [r3, #8]
}
 800afac:	bf00      	nop
 800afae:	3714      	adds	r7, #20
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <lpfOperator>:

float lpfOperator(LowPassFilter *filter, float x)
{
 800afb8:	b480      	push	{r7}
 800afba:	b085      	sub	sp, #20
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	ed87 0a00 	vstr	s0, [r7]

    float alpha = filter->Tf / (filter->Tf + filter->dt);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	edd3 6a00 	vldr	s13, [r3]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	ed93 7a00 	vldr	s14, [r3]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	edd3 7a01 	vldr	s15, [r3, #4]
 800afd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800afda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afde:	edc7 7a03 	vstr	s15, [r7, #12]
    float y = alpha * filter->y_prev + (1.0f - alpha) * x;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	ed93 7a02 	vldr	s14, [r3, #8]
 800afe8:	edd7 7a03 	vldr	s15, [r7, #12]
 800afec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aff0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aff4:	edd7 7a03 	vldr	s15, [r7, #12]
 800aff8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800affc:	edd7 7a00 	vldr	s15, [r7]
 800b000:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b004:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b008:	edc7 7a02 	vstr	s15, [r7, #8]
    filter->y_prev = y;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	68ba      	ldr	r2, [r7, #8]
 800b010:	609a      	str	r2, [r3, #8]

    return y;
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	ee07 3a90 	vmov	s15, r3
}
 800b018:	eeb0 0a67 	vmov.f32	s0, s15
 800b01c:	3714      	adds	r7, #20
 800b01e:	46bd      	mov	sp, r7
 800b020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b024:	4770      	bx	lr
	...

0800b028 <_sin>:
#include "focLib.h"
// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b086      	sub	sp, #24
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0, 804, 1608, 2411, 3212, 4011, 4808, 5602, 6393, 7180, 7962, 8740, 9512, 10279, 11039, 11793, 12540, 13279, 14010, 14733, 15447, 16151, 16846, 17531, 18205, 18868, 19520, 20160, 20788, 21403, 22006, 22595, 23170, 23732, 24279, 24812, 25330, 25833, 26320, 26791, 27246, 27684, 28106, 28511, 28899, 29269, 29622, 29957, 30274, 30572, 30853, 31114, 31357, 31581, 31786, 31972, 32138, 32286, 32413, 32522, 32610, 32679, 32729, 32758, 32768};
  unsigned int i = (unsigned int)(a * (64 * 4 * 256.0 / _2PI));
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f7f5 fab0 	bl	8000598 <__aeabi_f2d>
 800b038:	a339      	add	r3, pc, #228	@ (adr r3, 800b120 <_sin+0xf8>)
 800b03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03e:	f7f5 fb03 	bl	8000648 <__aeabi_dmul>
 800b042:	4602      	mov	r2, r0
 800b044:	460b      	mov	r3, r1
 800b046:	4610      	mov	r0, r2
 800b048:	4619      	mov	r1, r3
 800b04a:	f7f5 fdd5 	bl	8000bf8 <__aeabi_d2uiz>
 800b04e:	4603      	mov	r3, r0
 800b050:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	b2db      	uxtb	r3, r3
 800b056:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	0a1b      	lsrs	r3, r3, #8
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	60fb      	str	r3, [r7, #12]
  if (i < 64)
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2b3f      	cmp	r3, #63	@ 0x3f
 800b064:	d80b      	bhi.n	800b07e <_sin+0x56>
  {
    t1 = sine_array[i];
 800b066:	4a2c      	ldr	r2, [pc, #176]	@ (800b118 <_sin+0xf0>)
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b06e:	617b      	str	r3, [r7, #20]
    t2 = sine_array[i + 1];
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	3301      	adds	r3, #1
 800b074:	4a28      	ldr	r2, [pc, #160]	@ (800b118 <_sin+0xf0>)
 800b076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b07a:	613b      	str	r3, [r7, #16]
 800b07c:	e033      	b.n	800b0e6 <_sin+0xbe>
  }
  else if (i < 128)
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2b7f      	cmp	r3, #127	@ 0x7f
 800b082:	d80e      	bhi.n	800b0a2 <_sin+0x7a>
  {
    t1 = sine_array[128 - i];
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800b08a:	4a23      	ldr	r2, [pc, #140]	@ (800b118 <_sin+0xf0>)
 800b08c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b090:	617b      	str	r3, [r7, #20]
    t2 = sine_array[127 - i];
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800b098:	4a1f      	ldr	r2, [pc, #124]	@ (800b118 <_sin+0xf0>)
 800b09a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b09e:	613b      	str	r3, [r7, #16]
 800b0a0:	e021      	b.n	800b0e6 <_sin+0xbe>
  }
  else if (i < 192)
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2bbf      	cmp	r3, #191	@ 0xbf
 800b0a6:	d80e      	bhi.n	800b0c6 <_sin+0x9e>
  {
    t1 = -sine_array[-128 + i];
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	3b80      	subs	r3, #128	@ 0x80
 800b0ac:	4a1a      	ldr	r2, [pc, #104]	@ (800b118 <_sin+0xf0>)
 800b0ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0b2:	425b      	negs	r3, r3
 800b0b4:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[-127 + i];
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	3b7f      	subs	r3, #127	@ 0x7f
 800b0ba:	4a17      	ldr	r2, [pc, #92]	@ (800b118 <_sin+0xf0>)
 800b0bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0c0:	425b      	negs	r3, r3
 800b0c2:	613b      	str	r3, [r7, #16]
 800b0c4:	e00f      	b.n	800b0e6 <_sin+0xbe>
  }
  else
  {
    t1 = -sine_array[256 - i];
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800b0cc:	4a12      	ldr	r2, [pc, #72]	@ (800b118 <_sin+0xf0>)
 800b0ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0d2:	425b      	negs	r3, r3
 800b0d4:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[255 - i];
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800b0dc:	4a0e      	ldr	r2, [pc, #56]	@ (800b118 <_sin+0xf0>)
 800b0de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0e2:	425b      	negs	r3, r3
 800b0e4:	613b      	str	r3, [r7, #16]
  }
  return (1.0f / 32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 800b0e6:	693a      	ldr	r2, [r7, #16]
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	1ad3      	subs	r3, r2, r3
 800b0ec:	68ba      	ldr	r2, [r7, #8]
 800b0ee:	fb02 f303 	mul.w	r3, r2, r3
 800b0f2:	121a      	asrs	r2, r3, #8
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	4413      	add	r3, r2
 800b0f8:	ee07 3a90 	vmov	s15, r3
 800b0fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b100:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800b11c <_sin+0xf4>
 800b104:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b108:	eeb0 0a67 	vmov.f32	s0, s15
 800b10c:	3718      	adds	r7, #24
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
 800b112:	bf00      	nop
 800b114:	f3af 8000 	nop.w
 800b118:	2000000c 	.word	0x2000000c
 800b11c:	38000000 	.word	0x38000000
 800b120:	6446f9b4 	.word	0x6446f9b4
 800b124:	40c45f30 	.word	0x40c45f30

0800b128 <_cos>:
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 800b132:	edd7 7a01 	vldr	s15, [r7, #4]
 800b136:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800b180 <_cos+0x58>
 800b13a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b13e:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 800b142:	edd7 7a03 	vldr	s15, [r7, #12]
 800b146:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800b184 <_cos+0x5c>
 800b14a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b152:	dd06      	ble.n	800b162 <_cos+0x3a>
 800b154:	edd7 7a03 	vldr	s15, [r7, #12]
 800b158:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800b184 <_cos+0x5c>
 800b15c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b160:	e001      	b.n	800b166 <_cos+0x3e>
 800b162:	edd7 7a03 	vldr	s15, [r7, #12]
 800b166:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 800b16a:	ed97 0a03 	vldr	s0, [r7, #12]
 800b16e:	f7ff ff5b 	bl	800b028 <_sin>
 800b172:	eef0 7a40 	vmov.f32	s15, s0
}
 800b176:	eeb0 0a67 	vmov.f32	s0, s15
 800b17a:	3710      	adds	r7, #16
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	3fc90fdb 	.word	0x3fc90fdb
 800b184:	40c90fdb 	.word	0x40c90fdb

0800b188 <_sincos>:

__attribute__((weak)) void _sincos(float a, float *s, float *c)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	ed87 0a03 	vstr	s0, [r7, #12]
 800b192:	60b8      	str	r0, [r7, #8]
 800b194:	6079      	str	r1, [r7, #4]
  *s = _sin(a);
 800b196:	ed97 0a03 	vldr	s0, [r7, #12]
 800b19a:	f7ff ff45 	bl	800b028 <_sin>
 800b19e:	eef0 7a40 	vmov.f32	s15, s0
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	edc3 7a00 	vstr	s15, [r3]
  *c = _cos(a);
 800b1a8:	ed97 0a03 	vldr	s0, [r7, #12]
 800b1ac:	f7ff ffbc 	bl	800b128 <_cos>
 800b1b0:	eef0 7a40 	vmov.f32	s15, s0
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	edc3 7a00 	vstr	s15, [r3]
}
 800b1ba:	bf00      	nop
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	0000      	movs	r0, r0
 800b1c4:	0000      	movs	r0, r0
	...

0800b1c8 <_normalizeAngle>:
  return r;
}

// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f7f5 f9e0 	bl	8000598 <__aeabi_f2d>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	460b      	mov	r3, r1
 800b1dc:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 800b228 <_normalizeAngle+0x60>
 800b1e0:	ec43 2b10 	vmov	d0, r2, r3
 800b1e4:	f005 ffc2 	bl	801116c <fmod>
 800b1e8:	ec53 2b10 	vmov	r2, r3, d0
 800b1ec:	4610      	mov	r0, r2
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	f7f5 fd22 	bl	8000c38 <__aeabi_d2f>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 800b1f8:	edd7 7a03 	vldr	s15, [r7, #12]
 800b1fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b204:	db02      	blt.n	800b20c <_normalizeAngle+0x44>
 800b206:	edd7 7a03 	vldr	s15, [r7, #12]
 800b20a:	e005      	b.n	800b218 <_normalizeAngle+0x50>
 800b20c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b210:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800b230 <_normalizeAngle+0x68>
 800b214:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800b218:	eeb0 0a67 	vmov.f32	s0, s15
 800b21c:	3710      	adds	r7, #16
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	f3af 8000 	nop.w
 800b228:	60000000 	.word	0x60000000
 800b22c:	401921fb 	.word	0x401921fb
 800b230:	40c90fdb 	.word	0x40c90fdb

0800b234 <_electricalAngle>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs)
{
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
 800b23a:	ed87 0a01 	vstr	s0, [r7, #4]
 800b23e:	6038      	str	r0, [r7, #0]
  return (shaft_angle * pole_pairs);
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	ee07 3a90 	vmov	s15, r3
 800b246:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b24a:	edd7 7a01 	vldr	s15, [r7, #4]
 800b24e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800b252:	eeb0 0a67 	vmov.f32	s0, s15
 800b256:	370c      	adds	r7, #12
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <pidInit>:
#include "pid.h"
#include "math_utils.h"

void pidInit(PidController *pidController, float _P, float _I, float _D, float _ramp, float _limit, float _Ts)
{
 800b260:	b480      	push	{r7}
 800b262:	b089      	sub	sp, #36	@ 0x24
 800b264:	af00      	add	r7, sp, #0
 800b266:	61f8      	str	r0, [r7, #28]
 800b268:	ed87 0a06 	vstr	s0, [r7, #24]
 800b26c:	edc7 0a05 	vstr	s1, [r7, #20]
 800b270:	ed87 1a04 	vstr	s2, [r7, #16]
 800b274:	edc7 1a03 	vstr	s3, [r7, #12]
 800b278:	ed87 2a02 	vstr	s4, [r7, #8]
 800b27c:	edc7 2a01 	vstr	s5, [r7, #4]
    pidController->P = _P;
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	69ba      	ldr	r2, [r7, #24]
 800b284:	601a      	str	r2, [r3, #0]
    pidController->I = _I;
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	697a      	ldr	r2, [r7, #20]
 800b28a:	605a      	str	r2, [r3, #4]
    pidController->D = _D;
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	693a      	ldr	r2, [r7, #16]
 800b290:	609a      	str	r2, [r3, #8]
    pidController->output_ramp = _ramp;
 800b292:	69fb      	ldr	r3, [r7, #28]
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	60da      	str	r2, [r3, #12]
    pidController->limit = _limit;
 800b298:	69fb      	ldr	r3, [r7, #28]
 800b29a:	68ba      	ldr	r2, [r7, #8]
 800b29c:	611a      	str	r2, [r3, #16]
    pidController->Ts = _Ts;
 800b29e:	69fb      	ldr	r3, [r7, #28]
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	621a      	str	r2, [r3, #32]
    pidController->error_prev = 0;
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	f04f 0200 	mov.w	r2, #0
 800b2aa:	615a      	str	r2, [r3, #20]
    pidController->output_prev = 0;
 800b2ac:	69fb      	ldr	r3, [r7, #28]
 800b2ae:	f04f 0200 	mov.w	r2, #0
 800b2b2:	619a      	str	r2, [r3, #24]
    pidController->integral_prev = 0;
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	f04f 0200 	mov.w	r2, #0
 800b2ba:	61da      	str	r2, [r3, #28]
}
 800b2bc:	bf00      	nop
 800b2be:	3724      	adds	r7, #36	@ 0x24
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <pidOperator>:

// PID controller function
float pidOperator(PidController *pidController, float error)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b08b      	sub	sp, #44	@ 0x2c
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	ed87 0a00 	vstr	s0, [r7]
    // u(s) = (P + I/s + Ds)e(s)
    // Discrete implementations
    // proportional part
    // u_p  = P *e(k)
    float proportional = pidController->P * error;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	edd3 7a00 	vldr	s15, [r3]
 800b2da:	ed97 7a00 	vldr	s14, [r7]
 800b2de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2e2:	edc7 7a08 	vstr	s15, [r7, #32]
    // Tustin transform of the integral part
    // u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
    float a = 0.5f * (error + pidController->error_prev);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	ed93 7a05 	vldr	s14, [r3, #20]
 800b2ec:	edd7 7a00 	vldr	s15, [r7]
 800b2f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2f4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b2f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b2fc:	edc7 7a07 	vstr	s15, [r7, #28]
    float b = pidController->I * pidController->Ts;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	ed93 7a01 	vldr	s14, [r3, #4]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	edd3 7a08 	vldr	s15, [r3, #32]
 800b30c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b310:	edc7 7a06 	vstr	s15, [r7, #24]
    float integral = pidController->integral_prev + pidController->I * pidController->Ts * 0.5f * (error + pidController->error_prev);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	ed93 7a07 	vldr	s14, [r3, #28]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	edd3 6a01 	vldr	s13, [r3, #4]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	edd3 7a08 	vldr	s15, [r3, #32]
 800b326:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b32a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800b32e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	ed93 6a05 	vldr	s12, [r3, #20]
 800b338:	edd7 7a00 	vldr	s15, [r7]
 800b33c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800b340:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b344:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b348:	edc7 7a05 	vstr	s15, [r7, #20]
    // antiwindup - limit the output
    integral = _constrain(integral, -pidController->limit, pidController->limit);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	edd3 7a04 	vldr	s15, [r3, #16]
 800b352:	eef1 7a67 	vneg.f32	s15, s15
 800b356:	ed97 7a05 	vldr	s14, [r7, #20]
 800b35a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b35e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b362:	d505      	bpl.n	800b370 <pidOperator+0xa8>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	edd3 7a04 	vldr	s15, [r3, #16]
 800b36a:	eef1 7a67 	vneg.f32	s15, s15
 800b36e:	e00f      	b.n	800b390 <pidOperator+0xc8>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	edd3 7a04 	vldr	s15, [r3, #16]
 800b376:	ed97 7a05 	vldr	s14, [r7, #20]
 800b37a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b382:	dd03      	ble.n	800b38c <pidOperator+0xc4>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	edd3 7a04 	vldr	s15, [r3, #16]
 800b38a:	e001      	b.n	800b390 <pidOperator+0xc8>
 800b38c:	edd7 7a05 	vldr	s15, [r7, #20]
 800b390:	edc7 7a05 	vstr	s15, [r7, #20]
    // Discrete derivation
    // u_dk = D(ek - ek_1)/Ts
    float derivative = pidController->D * (error - pidController->error_prev) / pidController->Ts;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	ed93 7a02 	vldr	s14, [r3, #8]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	edd3 7a05 	vldr	s15, [r3, #20]
 800b3a0:	edd7 6a00 	vldr	s13, [r7]
 800b3a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b3a8:	ee67 6a27 	vmul.f32	s13, s14, s15
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	ed93 7a08 	vldr	s14, [r3, #32]
 800b3b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3b6:	edc7 7a04 	vstr	s15, [r7, #16]

    // sum all the components
    float output = proportional + integral + derivative;
 800b3ba:	ed97 7a08 	vldr	s14, [r7, #32]
 800b3be:	edd7 7a05 	vldr	s15, [r7, #20]
 800b3c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3c6:	ed97 7a04 	vldr	s14, [r7, #16]
 800b3ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3ce:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    // antiwindup - limit the output variable
    output = _constrain(output, -pidController->limit, pidController->limit);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	edd3 7a04 	vldr	s15, [r3, #16]
 800b3d8:	eef1 7a67 	vneg.f32	s15, s15
 800b3dc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b3e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3e8:	d505      	bpl.n	800b3f6 <pidOperator+0x12e>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	edd3 7a04 	vldr	s15, [r3, #16]
 800b3f0:	eef1 7a67 	vneg.f32	s15, s15
 800b3f4:	e00f      	b.n	800b416 <pidOperator+0x14e>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	edd3 7a04 	vldr	s15, [r3, #16]
 800b3fc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b400:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b408:	dd03      	ble.n	800b412 <pidOperator+0x14a>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	edd3 7a04 	vldr	s15, [r3, #16]
 800b410:	e001      	b.n	800b416 <pidOperator+0x14e>
 800b412:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b416:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // if output ramp defined
    if (pidController->output_ramp > 0)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	edd3 7a03 	vldr	s15, [r3, #12]
 800b420:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b428:	dd42      	ble.n	800b4b0 <pidOperator+0x1e8>
    {
        // limit the acceleration by ramping the output
        float output_rate = (output - pidController->output_prev) / pidController->Ts;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	edd3 7a06 	vldr	s15, [r3, #24]
 800b430:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b434:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	ed93 7a08 	vldr	s14, [r3, #32]
 800b43e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b442:	edc7 7a03 	vstr	s15, [r7, #12]
        if (output_rate > pidController->output_ramp)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	edd3 7a03 	vldr	s15, [r3, #12]
 800b44c:	ed97 7a03 	vldr	s14, [r7, #12]
 800b450:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b458:	dd0f      	ble.n	800b47a <pidOperator+0x1b2>
            output = pidController->output_prev + pidController->output_ramp * pidController->Ts;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	ed93 7a06 	vldr	s14, [r3, #24]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	edd3 6a03 	vldr	s13, [r3, #12]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	edd3 7a08 	vldr	s15, [r3, #32]
 800b46c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b470:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b474:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 800b478:	e01a      	b.n	800b4b0 <pidOperator+0x1e8>
        else if (output_rate < -pidController->output_ramp)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	edd3 7a03 	vldr	s15, [r3, #12]
 800b480:	eef1 7a67 	vneg.f32	s15, s15
 800b484:	ed97 7a03 	vldr	s14, [r7, #12]
 800b488:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b48c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b490:	d50e      	bpl.n	800b4b0 <pidOperator+0x1e8>
            output = pidController->output_prev - pidController->output_ramp * pidController->Ts;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	ed93 7a06 	vldr	s14, [r3, #24]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	edd3 6a03 	vldr	s13, [r3, #12]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	edd3 7a08 	vldr	s15, [r3, #32]
 800b4a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b4a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4ac:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }
    // saving for the next pass
    pidController->integral_prev = integral;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	697a      	ldr	r2, [r7, #20]
 800b4b4:	61da      	str	r2, [r3, #28]
    pidController->output_prev = output;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4ba:	619a      	str	r2, [r3, #24]
    pidController->error_prev = error;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	683a      	ldr	r2, [r7, #0]
 800b4c0:	615a      	str	r2, [r3, #20]
    return output;
 800b4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c4:	ee07 3a90 	vmov	s15, r3
}
 800b4c8:	eeb0 0a67 	vmov.f32	s0, s15
 800b4cc:	372c      	adds	r7, #44	@ 0x2c
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr
	...

0800b4d8 <setTorque>:
    motor->updatePwm(HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Tc);
}
#elif 1

void setTorque(BldcMotor *motor, float Uq, float Ud, float angle_el)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b08e      	sub	sp, #56	@ 0x38
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	ed87 0a02 	vstr	s0, [r7, #8]
 800b4e4:	edc7 0a01 	vstr	s1, [r7, #4]
 800b4e8:	ed87 1a00 	vstr	s2, [r7]
    float Ualpha, Ubeta;
    float Ua, Ub, Uc;

    // Sinusoidal PWM modulation
    // Inverse Park + Clarke transformation
    _sincos(angle_el, &_sa, &_ca);
 800b4ec:	f107 0214 	add.w	r2, r7, #20
 800b4f0:	f107 0310 	add.w	r3, r7, #16
 800b4f4:	4611      	mov	r1, r2
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	ed97 0a00 	vldr	s0, [r7]
 800b4fc:	f7ff fe44 	bl	800b188 <_sincos>

    // Inverse park transform
    Ualpha = _ca * Ud - _sa * Uq; // -sin(angle) * Uq;
 800b500:	ed97 7a05 	vldr	s14, [r7, #20]
 800b504:	edd7 7a01 	vldr	s15, [r7, #4]
 800b508:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b50c:	edd7 6a04 	vldr	s13, [r7, #16]
 800b510:	edd7 7a02 	vldr	s15, [r7, #8]
 800b514:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b518:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b51c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    Ubeta = _sa * Ud + _ca * Uq;  //  cos(angle) * Uq;
 800b520:	ed97 7a04 	vldr	s14, [r7, #16]
 800b524:	edd7 7a01 	vldr	s15, [r7, #4]
 800b528:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b52c:	edd7 6a05 	vldr	s13, [r7, #20]
 800b530:	edd7 7a02 	vldr	s15, [r7, #8]
 800b534:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b53c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Clarke transform
    Ua = Ualpha;
 800b540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b542:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Ub = -0.5f * Ualpha + _SQRT3_2 * Ubeta;
 800b544:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800b548:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800b54c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b550:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800b554:	eddf 6a95 	vldr	s13, [pc, #596]	@ 800b7ac <setTorque+0x2d4>
 800b558:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b55c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b560:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc = -0.5f * Ualpha - _SQRT3_2 * Ubeta;
 800b564:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800b568:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800b56c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b570:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800b574:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 800b7ac <setTorque+0x2d4>
 800b578:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b57c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b580:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    center = UqMAX / 2;
 800b584:	4b8a      	ldr	r3, [pc, #552]	@ (800b7b0 <setTorque+0x2d8>)
 800b586:	623b      	str	r3, [r7, #32]

    // discussed here: https://community.simplefoc.com/t/embedded-world-2023-stm32-cordic-co-processor/3107/165?u=candas1
    // a bit more info here: https://microchipdeveloper.com/mct5001:which-zsm-is-best
    // Midpoint Clamp
    float Umin = min(Ua, min(Ub, Uc));
 800b588:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b58c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b590:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b598:	d502      	bpl.n	800b5a0 <setTorque+0xc8>
 800b59a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800b59e:	e001      	b.n	800b5a4 <setTorque+0xcc>
 800b5a0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b5a4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b5a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b5ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5b0:	dd01      	ble.n	800b5b6 <setTorque+0xde>
 800b5b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5b4:	e00b      	b.n	800b5ce <setTorque+0xf6>
 800b5b6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b5ba:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b5be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5c6:	d501      	bpl.n	800b5cc <setTorque+0xf4>
 800b5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ca:	e000      	b.n	800b5ce <setTorque+0xf6>
 800b5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ce:	61fb      	str	r3, [r7, #28]
    float Umax = max(Ua, max(Ub, Uc));
 800b5d0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b5d4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b5d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b5dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5e0:	dd02      	ble.n	800b5e8 <setTorque+0x110>
 800b5e2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800b5e6:	e001      	b.n	800b5ec <setTorque+0x114>
 800b5e8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b5ec:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b5f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b5f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5f8:	d501      	bpl.n	800b5fe <setTorque+0x126>
 800b5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5fc:	e00b      	b.n	800b616 <setTorque+0x13e>
 800b5fe:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b602:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b606:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b60a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b60e:	dd01      	ble.n	800b614 <setTorque+0x13c>
 800b610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b612:	e000      	b.n	800b616 <setTorque+0x13e>
 800b614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b616:	61bb      	str	r3, [r7, #24]
    center -= (Umax + Umin) / 2;
 800b618:	ed97 7a06 	vldr	s14, [r7, #24]
 800b61c:	edd7 7a07 	vldr	s15, [r7, #28]
 800b620:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b624:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800b628:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b62c:	ed97 7a08 	vldr	s14, [r7, #32]
 800b630:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b634:	edc7 7a08 	vstr	s15, [r7, #32]

    Ua += center;
 800b638:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b63c:	edd7 7a08 	vldr	s15, [r7, #32]
 800b640:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b644:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    Ub += center;
 800b648:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b64c:	edd7 7a08 	vldr	s15, [r7, #32]
 800b650:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b654:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc += center;
 800b658:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b65c:	edd7 7a08 	vldr	s15, [r7, #32]
 800b660:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b664:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    motor->Ta = _constrain(Ua / U_DC, 0.0f, 1.0f);
 800b668:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b66c:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b670:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b674:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b67c:	d502      	bpl.n	800b684 <setTorque+0x1ac>
 800b67e:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800b7b4 <setTorque+0x2dc>
 800b682:	e015      	b.n	800b6b0 <setTorque+0x1d8>
 800b684:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b688:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b68c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b690:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b694:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b69c:	dd02      	ble.n	800b6a4 <setTorque+0x1cc>
 800b69e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b6a2:	e005      	b.n	800b6b0 <setTorque+0x1d8>
 800b6a4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b6a8:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b6ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128
    motor->Tb = _constrain(Ub / U_DC, 0.0f, 1.0f);
 800b6b6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b6ba:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b6be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b6c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ca:	d502      	bpl.n	800b6d2 <setTorque+0x1fa>
 800b6cc:	eddf 7a39 	vldr	s15, [pc, #228]	@ 800b7b4 <setTorque+0x2dc>
 800b6d0:	e015      	b.n	800b6fe <setTorque+0x226>
 800b6d2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b6d6:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b6da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b6de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b6e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ea:	dd02      	ble.n	800b6f2 <setTorque+0x21a>
 800b6ec:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b6f0:	e005      	b.n	800b6fe <setTorque+0x226>
 800b6f2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b6f6:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b6fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	edc3 7a4b 	vstr	s15, [r3, #300]	@ 0x12c
    motor->Tc = _constrain(Uc / U_DC, 0.0f, 1.0f);
 800b704:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b708:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b70c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b710:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b718:	d502      	bpl.n	800b720 <setTorque+0x248>
 800b71a:	eddf 7a26 	vldr	s15, [pc, #152]	@ 800b7b4 <setTorque+0x2dc>
 800b71e:	e015      	b.n	800b74c <setTorque+0x274>
 800b720:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b724:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b728:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b72c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b730:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b738:	dd02      	ble.n	800b740 <setTorque+0x268>
 800b73a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b73e:	e005      	b.n	800b74c <setTorque+0x274>
 800b740:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b744:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b748:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	edc3 7a4c 	vstr	s15, [r3, #304]	@ 0x130

    motor->updatePwm(HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Tc);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	edd2 7a4a 	vldr	s15, [r2, #296]	@ 0x128
 800b75e:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800b7b8 <setTorque+0x2e0>
 800b762:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b76a:	ee17 2a90 	vmov	r2, s15
 800b76e:	b290      	uxth	r0, r2
 800b770:	68fa      	ldr	r2, [r7, #12]
 800b772:	edd2 7a4b 	vldr	s15, [r2, #300]	@ 0x12c
 800b776:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800b7b8 <setTorque+0x2e0>
 800b77a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b77e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b782:	ee17 2a90 	vmov	r2, s15
 800b786:	b291      	uxth	r1, r2
 800b788:	68fa      	ldr	r2, [r7, #12]
 800b78a:	edd2 7a4c 	vldr	s15, [r2, #304]	@ 0x130
 800b78e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800b7b8 <setTorque+0x2e0>
 800b792:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b79a:	ee17 2a90 	vmov	r2, s15
 800b79e:	b292      	uxth	r2, r2
 800b7a0:	4798      	blx	r3
    // set the voltages in driver
    // driver->setPwm(Ua, Ub, Uc);
}
 800b7a2:	bf00      	nop
 800b7a4:	3738      	adds	r7, #56	@ 0x38
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	3f5db3d7 	.word	0x3f5db3d7
 800b7b0:	4013cd3a 	.word	0x4013cd3a
 800b7b4:	00000000 	.word	0x00000000
 800b7b8:	45fa0000 	.word	0x45fa0000

0800b7bc <startPwm1>:

static void standingBy();
static void working(void);
static void updatePwm1(unsigned short int a, unsigned short int b, unsigned short int c);
static void startPwm1()
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800b7c0:	2100      	movs	r1, #0
 800b7c2:	4806      	ldr	r0, [pc, #24]	@ (800b7dc <startPwm1+0x20>)
 800b7c4:	f7fb ff7c 	bl	80076c0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800b7c8:	2104      	movs	r1, #4
 800b7ca:	4804      	ldr	r0, [pc, #16]	@ (800b7dc <startPwm1+0x20>)
 800b7cc:	f7fb ff78 	bl	80076c0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800b7d0:	2108      	movs	r1, #8
 800b7d2:	4802      	ldr	r0, [pc, #8]	@ (800b7dc <startPwm1+0x20>)
 800b7d4:	f7fb ff74 	bl	80076c0 <HAL_TIM_PWM_Start>
    // HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
    // HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
    // HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
}
 800b7d8:	bf00      	nop
 800b7da:	bd80      	pop	{r7, pc}
 800b7dc:	2000047c 	.word	0x2000047c

0800b7e0 <stopPwm1>:
static void stopPwm1()
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 800b7e4:	2100      	movs	r1, #0
 800b7e6:	4806      	ldr	r0, [pc, #24]	@ (800b800 <stopPwm1+0x20>)
 800b7e8:	f7fc f86a 	bl	80078c0 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 800b7ec:	2104      	movs	r1, #4
 800b7ee:	4804      	ldr	r0, [pc, #16]	@ (800b800 <stopPwm1+0x20>)
 800b7f0:	f7fc f866 	bl	80078c0 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 800b7f4:	2108      	movs	r1, #8
 800b7f6:	4802      	ldr	r0, [pc, #8]	@ (800b800 <stopPwm1+0x20>)
 800b7f8:	f7fc f862 	bl	80078c0 <HAL_TIM_PWM_Stop>
    // HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
    // HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
    // HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
}
 800b7fc:	bf00      	nop
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	2000047c 	.word	0x2000047c

0800b804 <updatePwm1>:
static void updatePwm1(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800b804:	b480      	push	{r7}
 800b806:	b083      	sub	sp, #12
 800b808:	af00      	add	r7, sp, #0
 800b80a:	4603      	mov	r3, r0
 800b80c:	80fb      	strh	r3, [r7, #6]
 800b80e:	460b      	mov	r3, r1
 800b810:	80bb      	strh	r3, [r7, #4]
 800b812:	4613      	mov	r3, r2
 800b814:	807b      	strh	r3, [r7, #2]
    TIM8->CCR1 = a;
 800b816:	4a07      	ldr	r2, [pc, #28]	@ (800b834 <updatePwm1+0x30>)
 800b818:	88fb      	ldrh	r3, [r7, #6]
 800b81a:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM8->CCR2 = b;
 800b81c:	4a05      	ldr	r2, [pc, #20]	@ (800b834 <updatePwm1+0x30>)
 800b81e:	88bb      	ldrh	r3, [r7, #4]
 800b820:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM8->CCR3 = c;
 800b822:	4a04      	ldr	r2, [pc, #16]	@ (800b834 <updatePwm1+0x30>)
 800b824:	887b      	ldrh	r3, [r7, #2]
 800b826:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800b828:	bf00      	nop
 800b82a:	370c      	adds	r7, #12
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr
 800b834:	40013400 	.word	0x40013400

0800b838 <motorInit>:
// should be called before interruption enabled

static void motorInit()
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b086      	sub	sp, #24
 800b83c:	af00      	add	r7, sp, #0
    motor1.pole_pairs = 7;
 800b83e:	4ba1      	ldr	r3, [pc, #644]	@ (800bac4 <motorInit+0x28c>)
 800b840:	2207      	movs	r2, #7
 800b842:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    motor1.updatePwm = updatePwm1;
 800b846:	4b9f      	ldr	r3, [pc, #636]	@ (800bac4 <motorInit+0x28c>)
 800b848:	4a9f      	ldr	r2, [pc, #636]	@ (800bac8 <motorInit+0x290>)
 800b84a:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    motor1.startPwm = startPwm1;
 800b84e:	4b9d      	ldr	r3, [pc, #628]	@ (800bac4 <motorInit+0x28c>)
 800b850:	4a9e      	ldr	r2, [pc, #632]	@ (800bacc <motorInit+0x294>)
 800b852:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor1.stopPwm = stopPwm1;
 800b856:	4b9b      	ldr	r3, [pc, #620]	@ (800bac4 <motorInit+0x28c>)
 800b858:	4a9d      	ldr	r2, [pc, #628]	@ (800bad0 <motorInit+0x298>)
 800b85a:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    motor1.zeroElectricAngleOffSet = 0;
 800b85e:	4b99      	ldr	r3, [pc, #612]	@ (800bac4 <motorInit+0x28c>)
 800b860:	f04f 0200 	mov.w	r2, #0
 800b864:	635a      	str	r2, [r3, #52]	@ 0x34
    motor1.Ts = 100 * 1e-6f;
 800b866:	4b97      	ldr	r3, [pc, #604]	@ (800bac4 <motorInit+0x28c>)
 800b868:	4a9a      	ldr	r2, [pc, #616]	@ (800bad4 <motorInit+0x29c>)
 800b86a:	62da      	str	r2, [r3, #44]	@ 0x2c
    motor1.torqueType = CURRENT;
 800b86c:	4b95      	ldr	r3, [pc, #596]	@ (800bac4 <motorInit+0x28c>)
 800b86e:	2201      	movs	r2, #1
 800b870:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

    motor1.controlType = VELOCITY;
 800b874:	4b93      	ldr	r3, [pc, #588]	@ (800bac4 <motorInit+0x28c>)
 800b876:	2202      	movs	r2, #2
 800b878:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

    motor1.state = MOTOR_CALIBRATE;
 800b87c:	4b91      	ldr	r3, [pc, #580]	@ (800bac4 <motorInit+0x28c>)
 800b87e:	2200      	movs	r2, #0
 800b880:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    encoderInit(&motor1.magEncoder, motor1.Ts, MT6701_GetRawAngle, UNKNOWN);
 800b884:	4b8f      	ldr	r3, [pc, #572]	@ (800bac4 <motorInit+0x28c>)
 800b886:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b88a:	2201      	movs	r2, #1
 800b88c:	4992      	ldr	r1, [pc, #584]	@ (800bad8 <motorInit+0x2a0>)
 800b88e:	eeb0 0a67 	vmov.f32	s0, s15
 800b892:	488c      	ldr	r0, [pc, #560]	@ (800bac4 <motorInit+0x28c>)
 800b894:	f7ff fac3 	bl	800ae1e <encoderInit>

    if (motor1.controlType == TORQUE && motor1.torqueType == CURRENT)
 800b898:	4b8a      	ldr	r3, [pc, #552]	@ (800bac4 <motorInit+0x28c>)
 800b89a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d12d      	bne.n	800b8fe <motorInit+0xc6>
 800b8a2:	4b88      	ldr	r3, [pc, #544]	@ (800bac4 <motorInit+0x28c>)
 800b8a4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d128      	bne.n	800b8fe <motorInit+0xc6>
    {
        float kp, ki;
        kp = 500.0f;
 800b8ac:	4b8b      	ldr	r3, [pc, #556]	@ (800badc <motorInit+0x2a4>)
 800b8ae:	617b      	str	r3, [r7, #20]
        ki = 50.0f;
 800b8b0:	4b8b      	ldr	r3, [pc, #556]	@ (800bae0 <motorInit+0x2a8>)
 800b8b2:	613b      	str	r3, [r7, #16]
        pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800b8b4:	4b83      	ldr	r3, [pc, #524]	@ (800bac4 <motorInit+0x28c>)
 800b8b6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b8ba:	eef0 2a67 	vmov.f32	s5, s15
 800b8be:	ed9f 2a89 	vldr	s4, [pc, #548]	@ 800bae4 <motorInit+0x2ac>
 800b8c2:	eddf 1a89 	vldr	s3, [pc, #548]	@ 800bae8 <motorInit+0x2b0>
 800b8c6:	ed9f 1a88 	vldr	s2, [pc, #544]	@ 800bae8 <motorInit+0x2b0>
 800b8ca:	edd7 0a04 	vldr	s1, [r7, #16]
 800b8ce:	ed97 0a05 	vldr	s0, [r7, #20]
 800b8d2:	4886      	ldr	r0, [pc, #536]	@ (800baec <motorInit+0x2b4>)
 800b8d4:	f7ff fcc4 	bl	800b260 <pidInit>
        pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800b8d8:	4b7a      	ldr	r3, [pc, #488]	@ (800bac4 <motorInit+0x28c>)
 800b8da:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b8de:	eef0 2a67 	vmov.f32	s5, s15
 800b8e2:	ed9f 2a80 	vldr	s4, [pc, #512]	@ 800bae4 <motorInit+0x2ac>
 800b8e6:	eddf 1a80 	vldr	s3, [pc, #512]	@ 800bae8 <motorInit+0x2b0>
 800b8ea:	ed9f 1a7f 	vldr	s2, [pc, #508]	@ 800bae8 <motorInit+0x2b0>
 800b8ee:	edd7 0a04 	vldr	s1, [r7, #16]
 800b8f2:	ed97 0a05 	vldr	s0, [r7, #20]
 800b8f6:	487e      	ldr	r0, [pc, #504]	@ (800baf0 <motorInit+0x2b8>)
 800b8f8:	f7ff fcb2 	bl	800b260 <pidInit>
    {
 800b8fc:	e0c0      	b.n	800ba80 <motorInit+0x248>
    }
    else if (motor1.controlType == VELOCITY)
 800b8fe:	4b71      	ldr	r3, [pc, #452]	@ (800bac4 <motorInit+0x28c>)
 800b900:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800b904:	2b02      	cmp	r3, #2
 800b906:	d152      	bne.n	800b9ae <motorInit+0x176>
    {
        if (motor1.torqueType == CURRENT)
 800b908:	4b6e      	ldr	r3, [pc, #440]	@ (800bac4 <motorInit+0x28c>)
 800b90a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d13a      	bne.n	800b988 <motorInit+0x150>
        {
            pidInit(&motor1.velocityPID, 0.02, 0.01, 0, 0, CURRENT_MAX, motor1.Ts);
 800b912:	4b6c      	ldr	r3, [pc, #432]	@ (800bac4 <motorInit+0x28c>)
 800b914:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b918:	eef0 2a67 	vmov.f32	s5, s15
 800b91c:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800b920:	eddf 1a71 	vldr	s3, [pc, #452]	@ 800bae8 <motorInit+0x2b0>
 800b924:	ed9f 1a70 	vldr	s2, [pc, #448]	@ 800bae8 <motorInit+0x2b0>
 800b928:	eddf 0a72 	vldr	s1, [pc, #456]	@ 800baf4 <motorInit+0x2bc>
 800b92c:	ed9f 0a72 	vldr	s0, [pc, #456]	@ 800baf8 <motorInit+0x2c0>
 800b930:	4872      	ldr	r0, [pc, #456]	@ (800bafc <motorInit+0x2c4>)
 800b932:	f7ff fc95 	bl	800b260 <pidInit>

            float kp, ki;
            kp = 500.0f;
 800b936:	4b69      	ldr	r3, [pc, #420]	@ (800badc <motorInit+0x2a4>)
 800b938:	607b      	str	r3, [r7, #4]
            ki = 50.0f;
 800b93a:	4b69      	ldr	r3, [pc, #420]	@ (800bae0 <motorInit+0x2a8>)
 800b93c:	603b      	str	r3, [r7, #0]
            pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800b93e:	4b61      	ldr	r3, [pc, #388]	@ (800bac4 <motorInit+0x28c>)
 800b940:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b944:	eef0 2a67 	vmov.f32	s5, s15
 800b948:	ed9f 2a66 	vldr	s4, [pc, #408]	@ 800bae4 <motorInit+0x2ac>
 800b94c:	eddf 1a66 	vldr	s3, [pc, #408]	@ 800bae8 <motorInit+0x2b0>
 800b950:	ed9f 1a65 	vldr	s2, [pc, #404]	@ 800bae8 <motorInit+0x2b0>
 800b954:	edd7 0a00 	vldr	s1, [r7]
 800b958:	ed97 0a01 	vldr	s0, [r7, #4]
 800b95c:	4863      	ldr	r0, [pc, #396]	@ (800baec <motorInit+0x2b4>)
 800b95e:	f7ff fc7f 	bl	800b260 <pidInit>
            pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800b962:	4b58      	ldr	r3, [pc, #352]	@ (800bac4 <motorInit+0x28c>)
 800b964:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b968:	eef0 2a67 	vmov.f32	s5, s15
 800b96c:	ed9f 2a5d 	vldr	s4, [pc, #372]	@ 800bae4 <motorInit+0x2ac>
 800b970:	eddf 1a5d 	vldr	s3, [pc, #372]	@ 800bae8 <motorInit+0x2b0>
 800b974:	ed9f 1a5c 	vldr	s2, [pc, #368]	@ 800bae8 <motorInit+0x2b0>
 800b978:	edd7 0a00 	vldr	s1, [r7]
 800b97c:	ed97 0a01 	vldr	s0, [r7, #4]
 800b980:	485b      	ldr	r0, [pc, #364]	@ (800baf0 <motorInit+0x2b8>)
 800b982:	f7ff fc6d 	bl	800b260 <pidInit>
 800b986:	e07b      	b.n	800ba80 <motorInit+0x248>
        }
        else
        {
            pidInit(&motor1.velocityPID, 0.15, 0.05, 0, 0, UqMAX, motor1.Ts);
 800b988:	4b4e      	ldr	r3, [pc, #312]	@ (800bac4 <motorInit+0x28c>)
 800b98a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b98e:	eef0 2a67 	vmov.f32	s5, s15
 800b992:	ed9f 2a54 	vldr	s4, [pc, #336]	@ 800bae4 <motorInit+0x2ac>
 800b996:	eddf 1a54 	vldr	s3, [pc, #336]	@ 800bae8 <motorInit+0x2b0>
 800b99a:	ed9f 1a53 	vldr	s2, [pc, #332]	@ 800bae8 <motorInit+0x2b0>
 800b99e:	eddf 0a58 	vldr	s1, [pc, #352]	@ 800bb00 <motorInit+0x2c8>
 800b9a2:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 800bb04 <motorInit+0x2cc>
 800b9a6:	4855      	ldr	r0, [pc, #340]	@ (800bafc <motorInit+0x2c4>)
 800b9a8:	f7ff fc5a 	bl	800b260 <pidInit>
 800b9ac:	e068      	b.n	800ba80 <motorInit+0x248>
        }
    }
    else if (motor1.controlType == ANGLE)
 800b9ae:	4b45      	ldr	r3, [pc, #276]	@ (800bac4 <motorInit+0x28c>)
 800b9b0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800b9b4:	2b03      	cmp	r3, #3
 800b9b6:	d163      	bne.n	800ba80 <motorInit+0x248>
    {
        if (motor1.torqueType == CURRENT)
 800b9b8:	4b42      	ldr	r3, [pc, #264]	@ (800bac4 <motorInit+0x28c>)
 800b9ba:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	d14c      	bne.n	800ba5c <motorInit+0x224>
        {
            pidInit(&motor1.anglePID, 2, 0, 0, 0, MAX_VELOCITY, motor1.Ts);
 800b9c2:	4b40      	ldr	r3, [pc, #256]	@ (800bac4 <motorInit+0x28c>)
 800b9c4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b9c8:	eef0 2a67 	vmov.f32	s5, s15
 800b9cc:	ed9f 2a4e 	vldr	s4, [pc, #312]	@ 800bb08 <motorInit+0x2d0>
 800b9d0:	eddf 1a45 	vldr	s3, [pc, #276]	@ 800bae8 <motorInit+0x2b0>
 800b9d4:	ed9f 1a44 	vldr	s2, [pc, #272]	@ 800bae8 <motorInit+0x2b0>
 800b9d8:	eddf 0a43 	vldr	s1, [pc, #268]	@ 800bae8 <motorInit+0x2b0>
 800b9dc:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800b9e0:	484a      	ldr	r0, [pc, #296]	@ (800bb0c <motorInit+0x2d4>)
 800b9e2:	f7ff fc3d 	bl	800b260 <pidInit>

            pidInit(&motor1.velocityPID, -0.02, -0.01, 0, 0, CURRENT_MAX, motor1.Ts);
 800b9e6:	4b37      	ldr	r3, [pc, #220]	@ (800bac4 <motorInit+0x28c>)
 800b9e8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b9ec:	eef0 2a67 	vmov.f32	s5, s15
 800b9f0:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800b9f4:	eddf 1a3c 	vldr	s3, [pc, #240]	@ 800bae8 <motorInit+0x2b0>
 800b9f8:	ed9f 1a3b 	vldr	s2, [pc, #236]	@ 800bae8 <motorInit+0x2b0>
 800b9fc:	eddf 0a44 	vldr	s1, [pc, #272]	@ 800bb10 <motorInit+0x2d8>
 800ba00:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 800bb14 <motorInit+0x2dc>
 800ba04:	483d      	ldr	r0, [pc, #244]	@ (800bafc <motorInit+0x2c4>)
 800ba06:	f7ff fc2b 	bl	800b260 <pidInit>

            // pidInit(&motor1.anglePID, -0.001, -0.0001, 0, 0, CURRENT_MAX / 2, motor1.Ts);

            float kp, ki;
            kp = -200;
 800ba0a:	4b43      	ldr	r3, [pc, #268]	@ (800bb18 <motorInit+0x2e0>)
 800ba0c:	60fb      	str	r3, [r7, #12]
            ki = -20;
 800ba0e:	4b43      	ldr	r3, [pc, #268]	@ (800bb1c <motorInit+0x2e4>)
 800ba10:	60bb      	str	r3, [r7, #8]
            pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800ba12:	4b2c      	ldr	r3, [pc, #176]	@ (800bac4 <motorInit+0x28c>)
 800ba14:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ba18:	eef0 2a67 	vmov.f32	s5, s15
 800ba1c:	ed9f 2a31 	vldr	s4, [pc, #196]	@ 800bae4 <motorInit+0x2ac>
 800ba20:	eddf 1a31 	vldr	s3, [pc, #196]	@ 800bae8 <motorInit+0x2b0>
 800ba24:	ed9f 1a30 	vldr	s2, [pc, #192]	@ 800bae8 <motorInit+0x2b0>
 800ba28:	edd7 0a02 	vldr	s1, [r7, #8]
 800ba2c:	ed97 0a03 	vldr	s0, [r7, #12]
 800ba30:	482e      	ldr	r0, [pc, #184]	@ (800baec <motorInit+0x2b4>)
 800ba32:	f7ff fc15 	bl	800b260 <pidInit>
            pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800ba36:	4b23      	ldr	r3, [pc, #140]	@ (800bac4 <motorInit+0x28c>)
 800ba38:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ba3c:	eef0 2a67 	vmov.f32	s5, s15
 800ba40:	ed9f 2a28 	vldr	s4, [pc, #160]	@ 800bae4 <motorInit+0x2ac>
 800ba44:	eddf 1a28 	vldr	s3, [pc, #160]	@ 800bae8 <motorInit+0x2b0>
 800ba48:	ed9f 1a27 	vldr	s2, [pc, #156]	@ 800bae8 <motorInit+0x2b0>
 800ba4c:	edd7 0a02 	vldr	s1, [r7, #8]
 800ba50:	ed97 0a03 	vldr	s0, [r7, #12]
 800ba54:	4826      	ldr	r0, [pc, #152]	@ (800baf0 <motorInit+0x2b8>)
 800ba56:	f7ff fc03 	bl	800b260 <pidInit>
 800ba5a:	e011      	b.n	800ba80 <motorInit+0x248>
        }
        else
        {
            pidInit(&motor1.anglePID, 0.3, 0.001, 0, 0, UqMAX / 2, motor1.Ts);
 800ba5c:	4b19      	ldr	r3, [pc, #100]	@ (800bac4 <motorInit+0x28c>)
 800ba5e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ba62:	eef0 2a67 	vmov.f32	s5, s15
 800ba66:	ed9f 2a2e 	vldr	s4, [pc, #184]	@ 800bb20 <motorInit+0x2e8>
 800ba6a:	eddf 1a1f 	vldr	s3, [pc, #124]	@ 800bae8 <motorInit+0x2b0>
 800ba6e:	ed9f 1a1e 	vldr	s2, [pc, #120]	@ 800bae8 <motorInit+0x2b0>
 800ba72:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 800bb24 <motorInit+0x2ec>
 800ba76:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800bb28 <motorInit+0x2f0>
 800ba7a:	4824      	ldr	r0, [pc, #144]	@ (800bb0c <motorInit+0x2d4>)
 800ba7c:	f7ff fbf0 	bl	800b260 <pidInit>
        }
    }

    lpfInit(&motor1.IqFilter, 0.05, motor1.Ts);
 800ba80:	4b10      	ldr	r3, [pc, #64]	@ (800bac4 <motorInit+0x28c>)
 800ba82:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ba86:	eef0 0a67 	vmov.f32	s1, s15
 800ba8a:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 800bb00 <motorInit+0x2c8>
 800ba8e:	4827      	ldr	r0, [pc, #156]	@ (800bb2c <motorInit+0x2f4>)
 800ba90:	f7ff fa7a 	bl	800af88 <lpfInit>
    lpfInit(&motor1.IdFilter, 0.05, motor1.Ts);
 800ba94:	4b0b      	ldr	r3, [pc, #44]	@ (800bac4 <motorInit+0x28c>)
 800ba96:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ba9a:	eef0 0a67 	vmov.f32	s1, s15
 800ba9e:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 800bb00 <motorInit+0x2c8>
 800baa2:	4823      	ldr	r0, [pc, #140]	@ (800bb30 <motorInit+0x2f8>)
 800baa4:	f7ff fa70 	bl	800af88 <lpfInit>
    lpfInit(&motor1.velocityFilter, 0.01, motor1.Ts);
 800baa8:	4b06      	ldr	r3, [pc, #24]	@ (800bac4 <motorInit+0x28c>)
 800baaa:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800baae:	eef0 0a67 	vmov.f32	s1, s15
 800bab2:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 800baf4 <motorInit+0x2bc>
 800bab6:	481f      	ldr	r0, [pc, #124]	@ (800bb34 <motorInit+0x2fc>)
 800bab8:	f7ff fa66 	bl	800af88 <lpfInit>
}
 800babc:	bf00      	nop
 800babe:	3718      	adds	r7, #24
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	20000628 	.word	0x20000628
 800bac8:	0800b805 	.word	0x0800b805
 800bacc:	0800b7bd 	.word	0x0800b7bd
 800bad0:	0800b7e1 	.word	0x0800b7e1
 800bad4:	38d1b717 	.word	0x38d1b717
 800bad8:	0800c6b1 	.word	0x0800c6b1
 800badc:	43fa0000 	.word	0x43fa0000
 800bae0:	42480000 	.word	0x42480000
 800bae4:	4093cd3a 	.word	0x4093cd3a
 800bae8:	00000000 	.word	0x00000000
 800baec:	2000068c 	.word	0x2000068c
 800baf0:	200006b0 	.word	0x200006b0
 800baf4:	3c23d70a 	.word	0x3c23d70a
 800baf8:	3ca3d70a 	.word	0x3ca3d70a
 800bafc:	200006d4 	.word	0x200006d4
 800bb00:	3d4ccccd 	.word	0x3d4ccccd
 800bb04:	3e19999a 	.word	0x3e19999a
 800bb08:	43960000 	.word	0x43960000
 800bb0c:	200006f8 	.word	0x200006f8
 800bb10:	bc23d70a 	.word	0xbc23d70a
 800bb14:	bca3d70a 	.word	0xbca3d70a
 800bb18:	c3480000 	.word	0xc3480000
 800bb1c:	c1a00000 	.word	0xc1a00000
 800bb20:	4013cd3a 	.word	0x4013cd3a
 800bb24:	3a83126f 	.word	0x3a83126f
 800bb28:	3e99999a 	.word	0x3e99999a
 800bb2c:	2000071c 	.word	0x2000071c
 800bb30:	20000728 	.word	0x20000728
 800bb34:	20000734 	.word	0x20000734

0800bb38 <appInit>:
void appInit()
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	af00      	add	r7, sp, #0
    motorInit();
 800bb3c:	f7ff fe7c 	bl	800b838 <motorInit>
    devState = WORK;
 800bb40:	4b06      	ldr	r3, [pc, #24]	@ (800bb5c <appInit+0x24>)
 800bb42:	2201      	movs	r2, #1
 800bb44:	701a      	strb	r2, [r3, #0]
    if (IMU_Init() == 1)
 800bb46:	f000 fa03 	bl	800bf50 <IMU_Init>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d102      	bne.n	800bb56 <appInit+0x1e>
    {
        printLog("IMU_Init failed\n");
 800bb50:	4803      	ldr	r0, [pc, #12]	@ (800bb60 <appInit+0x28>)
 800bb52:	f000 f8f3 	bl	800bd3c <printLog>
    }
    //    MPU6050_Init(); // MPU6050初始化
}
 800bb56:	bf00      	nop
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	2000008e 	.word	0x2000008e
 800bb60:	080117ec 	.word	0x080117ec

0800bb64 <appRunning>:
static bool zeroReset;
void appRunning()
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	af00      	add	r7, sp, #0

    //  getKeyState(&keyState);
    commander_run(&motor1);
 800bb68:	4811      	ldr	r0, [pc, #68]	@ (800bbb0 <appRunning+0x4c>)
 800bb6a:	f000 f925 	bl	800bdb8 <commander_run>
    if (++flashCnt >= 10)
 800bb6e:	4b11      	ldr	r3, [pc, #68]	@ (800bbb4 <appRunning+0x50>)
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	3301      	adds	r3, #1
 800bb74:	b2da      	uxtb	r2, r3
 800bb76:	4b0f      	ldr	r3, [pc, #60]	@ (800bbb4 <appRunning+0x50>)
 800bb78:	701a      	strb	r2, [r3, #0]
 800bb7a:	4b0e      	ldr	r3, [pc, #56]	@ (800bbb4 <appRunning+0x50>)
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	2b09      	cmp	r3, #9
 800bb80:	d902      	bls.n	800bb88 <appRunning+0x24>
        flashCnt = 0;
 800bb82:	4b0c      	ldr	r3, [pc, #48]	@ (800bbb4 <appRunning+0x50>)
 800bb84:	2200      	movs	r2, #0
 800bb86:	701a      	strb	r2, [r3, #0]

    ledOn = 0;
 800bb88:	4b0b      	ldr	r3, [pc, #44]	@ (800bbb8 <appRunning+0x54>)
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	701a      	strb	r2, [r3, #0]
    //         motor1.target = goalTorqueV;
    //     else
    //         motor1.target = goalTorqueC;
    // }

    switch (devState)
 800bb8e:	4b0b      	ldr	r3, [pc, #44]	@ (800bbbc <appRunning+0x58>)
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d002      	beq.n	800bb9c <appRunning+0x38>
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d003      	beq.n	800bba2 <appRunning+0x3e>
 800bb9a:	e005      	b.n	800bba8 <appRunning+0x44>
    {
    case STANDBY:
        standingBy();
 800bb9c:	f000 f810 	bl	800bbc0 <standingBy>
        break;
 800bba0:	e002      	b.n	800bba8 <appRunning+0x44>

    case WORK:
        working();
 800bba2:	f000 f847 	bl	800bc34 <working>
        break;
 800bba6:	bf00      	nop
    }

    LED_drive();
 800bba8:	f000 f952 	bl	800be50 <LED_drive>
}
 800bbac:	bf00      	nop
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	20000628 	.word	0x20000628
 800bbb4:	20000624 	.word	0x20000624
 800bbb8:	20000835 	.word	0x20000835
 800bbbc:	2000008e 	.word	0x2000008e

0800bbc0 <standingBy>:
static void standingBy()
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	af00      	add	r7, sp, #0
    static uchar cnt;

    ledOn = 1;
 800bbc4:	4b15      	ldr	r3, [pc, #84]	@ (800bc1c <standingBy+0x5c>)
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	701a      	strb	r2, [r3, #0]
    // setTorque(&motor1, 0, OPEN_LOOP_TORQUE, 0);
    if (zeroReset == 0)
 800bbca:	4b15      	ldr	r3, [pc, #84]	@ (800bc20 <standingBy+0x60>)
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d106      	bne.n	800bbe0 <standingBy+0x20>
    {
        goToZeroElecAngle(&motor1);
 800bbd2:	4814      	ldr	r0, [pc, #80]	@ (800bc24 <standingBy+0x64>)
 800bbd4:	f7fe fc1e 	bl	800a414 <goToZeroElecAngle>
        zeroReset = 1;
 800bbd8:	4b11      	ldr	r3, [pc, #68]	@ (800bc20 <standingBy+0x60>)
 800bbda:	2201      	movs	r2, #1
 800bbdc:	701a      	strb	r2, [r3, #0]
 800bbde:	e003      	b.n	800bbe8 <standingBy+0x28>
    }
    else
        motor1.stopPwm();
 800bbe0:	4b10      	ldr	r3, [pc, #64]	@ (800bc24 <standingBy+0x64>)
 800bbe2:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800bbe6:	4798      	blx	r3

    if (++cnt >= 10)
 800bbe8:	4b0f      	ldr	r3, [pc, #60]	@ (800bc28 <standingBy+0x68>)
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	3301      	adds	r3, #1
 800bbee:	b2da      	uxtb	r2, r3
 800bbf0:	4b0d      	ldr	r3, [pc, #52]	@ (800bc28 <standingBy+0x68>)
 800bbf2:	701a      	strb	r2, [r3, #0]
 800bbf4:	4b0c      	ldr	r3, [pc, #48]	@ (800bc28 <standingBy+0x68>)
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	2b09      	cmp	r3, #9
 800bbfa:	d90d      	bls.n	800bc18 <standingBy+0x58>
    {
        WORK_INIT;
 800bbfc:	4b0b      	ldr	r3, [pc, #44]	@ (800bc2c <standingBy+0x6c>)
 800bbfe:	2201      	movs	r2, #1
 800bc00:	701a      	strb	r2, [r3, #0]
 800bc02:	4b0b      	ldr	r3, [pc, #44]	@ (800bc30 <standingBy+0x70>)
 800bc04:	2200      	movs	r2, #0
 800bc06:	701a      	strb	r2, [r3, #0]
 800bc08:	4b06      	ldr	r3, [pc, #24]	@ (800bc24 <standingBy+0x64>)
 800bc0a:	2202      	movs	r2, #2
 800bc0c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800bc10:	4b04      	ldr	r3, [pc, #16]	@ (800bc24 <standingBy+0x64>)
 800bc12:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800bc16:	4798      	blx	r3
    }
}
 800bc18:	bf00      	nop
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	20000835 	.word	0x20000835
 800bc20:	20000768 	.word	0x20000768
 800bc24:	20000628 	.word	0x20000628
 800bc28:	20000769 	.word	0x20000769
 800bc2c:	2000008e 	.word	0x2000008e
 800bc30:	20000624 	.word	0x20000624

0800bc34 <working>:

static void working(void)
{
 800bc34:	b480      	push	{r7}
 800bc36:	af00      	add	r7, sp, #0
    zeroReset = 0;
 800bc38:	4b07      	ldr	r3, [pc, #28]	@ (800bc58 <working+0x24>)
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	701a      	strb	r2, [r3, #0]
    if (flashCnt < 5)
 800bc3e:	4b07      	ldr	r3, [pc, #28]	@ (800bc5c <working+0x28>)
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	2b04      	cmp	r3, #4
 800bc44:	d802      	bhi.n	800bc4c <working+0x18>
        ledOn = 1;
 800bc46:	4b06      	ldr	r3, [pc, #24]	@ (800bc60 <working+0x2c>)
 800bc48:	2201      	movs	r2, #1
 800bc4a:	701a      	strb	r2, [r3, #0]
    //        //     {
    //        //         bldcMotor.focTarget = 23;
    //        //     }
    //        // }
    //    }
}
 800bc4c:	bf00      	nop
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr
 800bc56:	bf00      	nop
 800bc58:	20000768 	.word	0x20000768
 800bc5c:	20000624 	.word	0x20000624
 800bc60:	20000835 	.word	0x20000835

0800bc64 <txDataProcess>:

void txDataProcess()
{
 800bc64:	b590      	push	{r4, r7, lr}
 800bc66:	b085      	sub	sp, #20
 800bc68:	af02      	add	r7, sp, #8
    uint8_t Who_Am_I = IMU_Read_Reg(MPU6500_WHO_AM_I);
 800bc6a:	2075      	movs	r0, #117	@ 0x75
 800bc6c:	f000 f93e 	bl	800beec <IMU_Read_Reg>
 800bc70:	4603      	mov	r3, r0
 800bc72:	71fb      	strb	r3, [r7, #7]
    sprintf(txBuffer, "Who_Am_I:%d, mpu6500.gyroAngle.y: %.2f\n", Who_Am_I, mpu6500.gyroAngle.y);
 800bc74:	79fc      	ldrb	r4, [r7, #7]
 800bc76:	4b09      	ldr	r3, [pc, #36]	@ (800bc9c <txDataProcess+0x38>)
 800bc78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f7f4 fc8c 	bl	8000598 <__aeabi_f2d>
 800bc80:	4602      	mov	r2, r0
 800bc82:	460b      	mov	r3, r1
 800bc84:	e9cd 2300 	strd	r2, r3, [sp]
 800bc88:	4622      	mov	r2, r4
 800bc8a:	4905      	ldr	r1, [pc, #20]	@ (800bca0 <txDataProcess+0x3c>)
 800bc8c:	4805      	ldr	r0, [pc, #20]	@ (800bca4 <txDataProcess+0x40>)
 800bc8e:	f002 fc1b 	bl	800e4c8 <siprintf>
    // sprintf(txBuffer, "target:%.2f fullAngle:%.2f velocity:%.2f Uq:%.2f Ud:%.2f Iq:%.2f Id:%.2f elec_angle:%.2f\n", motor1.target, motor1.magEncoder.fullAngle, motor1.magEncoder.velocity, motor1.Uq, motor1.Ud, motor1.Iq, motor1.Id, motor1.angle_el);

    // sprintf(txBuffer, "target:%.2f  velocity:%.2f  Uq:%.2f\n", motor1.target, motor1.magEncoder.velocity, motor1.Uq);
    // sprintf(txBuffer, "target:%.2f,velocity:%.2f,Uq%.2f,Ud%.2f,Iq:%.2f,Id:%.2f\n", motor1.target, motor1.magEncoder.velocity, motor1.Uq, motor1.Ud, motor1.Iq, motor1.Id);
    // sprintf(txBuffer, "offset_ia:%f offset_ib:%f, Ia:%f, Ib:%f\n", motor1.offset_ia, motor1.offset_ib, motor1.Ia, motor1.Ib);
}
 800bc92:	bf00      	nop
 800bc94:	370c      	adds	r7, #12
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd90      	pop	{r4, r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	20000838 	.word	0x20000838
 800bca0:	08011800 	.word	0x08011800
 800bca4:	2000076c 	.word	0x2000076c

0800bca8 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_SET);
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800bcb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bcba:	f7f9 ffbb 	bl	8005c34 <HAL_GPIO_WritePin>
    if (hadc == &hadc1)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4a0d      	ldr	r2, [pc, #52]	@ (800bcf8 <HAL_ADCEx_InjectedConvCpltCallback+0x50>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d10d      	bne.n	800bce2 <HAL_ADCEx_InjectedConvCpltCallback+0x3a>
    {

        foc(&motor1, hadc1.Instance->JDR1, hadc2.Instance->JDR1);
 800bcc6:	4b0c      	ldr	r3, [pc, #48]	@ (800bcf8 <HAL_ADCEx_InjectedConvCpltCallback+0x50>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 800bcce:	4b0b      	ldr	r3, [pc, #44]	@ (800bcfc <HAL_ADCEx_InjectedConvCpltCallback+0x54>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	4809      	ldr	r0, [pc, #36]	@ (800bd00 <HAL_ADCEx_InjectedConvCpltCallback+0x58>)
 800bcda:	f7fe fd07 	bl	800a6ec <foc>

        dealPer100us();
 800bcde:	f000 fda9 	bl	800c834 <dealPer100us>

        memcpy(tempData, (uint8_t *)&load_data, sizeof(load_data));
        HAL_UART_Transmit_DMA(&huart3, (uint8_t *)tempData, sizeof(tempData));
#endif
    }
    HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 800bce2:	2200      	movs	r2, #0
 800bce4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800bce8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bcec:	f7f9 ffa2 	bl	8005c34 <HAL_GPIO_WritePin>
}
 800bcf0:	bf00      	nop
 800bcf2:	3708      	adds	r7, #8
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}
 800bcf8:	20000274 	.word	0x20000274
 800bcfc:	200002e0 	.word	0x200002e0
 800bd00:	20000628 	.word	0x20000628

0800bd04 <HAL_UARTEx_RxEventCallback>:
bool toProcessData;
uint8_t aRxBuffer;
float comm1, comm2, comm3, comm4, comm5, comm6, comm7, comm8, comm9, comm10, comm11;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b082      	sub	sp, #8
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	460b      	mov	r3, r1
 800bd0e:	807b      	strh	r3, [r7, #2]
  if (huart == &huart3)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	4a07      	ldr	r2, [pc, #28]	@ (800bd30 <HAL_UARTEx_RxEventCallback+0x2c>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d107      	bne.n	800bd28 <HAL_UARTEx_RxEventCallback+0x24>
  {
    // HAL_UART_Transmit_DMA(&huart3, rxBuffer, Size);
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 800bd18:	2264      	movs	r2, #100	@ 0x64
 800bd1a:	4906      	ldr	r1, [pc, #24]	@ (800bd34 <HAL_UARTEx_RxEventCallback+0x30>)
 800bd1c:	4804      	ldr	r0, [pc, #16]	@ (800bd30 <HAL_UARTEx_RxEventCallback+0x2c>)
 800bd1e:	f7fe fad6 	bl	800a2ce <HAL_UARTEx_ReceiveToIdle_DMA>
    toProcessData = 1;
 800bd22:	4b05      	ldr	r3, [pc, #20]	@ (800bd38 <HAL_UARTEx_RxEventCallback+0x34>)
 800bd24:	2201      	movs	r2, #1
 800bd26:	701a      	strb	r2, [r3, #0]
  }
}
 800bd28:	bf00      	nop
 800bd2a:	3708      	adds	r7, #8
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	200004c8 	.word	0x200004c8
 800bd34:	200007d0 	.word	0x200007d0
 800bd38:	20000834 	.word	0x20000834

0800bd3c <printLog>:

// DMA模式
void printLog(const char *format, ...)
{
 800bd3c:	b40f      	push	{r0, r1, r2, r3}
 800bd3e:	b580      	push	{r7, lr}
 800bd40:	b0c2      	sub	sp, #264	@ 0x108
 800bd42:	af00      	add	r7, sp, #0
  // length = vsnprintf((char *)txBuffer, sizeof(txBuffer), (char *)format, args);
  // va_end(args);
  // HAL_UART_Transmit_DMA(&huart3, (const char *)txBuffer, length);

  va_list args;           // 定义参数列表变量
  va_start(args, format); // 从format位置开始接收参数表，放在arg里面
 800bd44:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800bd48:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

  char strBuf[256];               // 定义输出的字符串
  vsprintf(strBuf, format, args); // 使用vsprintf将格式化的数据写入缓冲区
 800bd4c:	1d3b      	adds	r3, r7, #4
 800bd4e:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800bd52:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 800bd56:	4618      	mov	r0, r3
 800bd58:	f002 fc30 	bl	800e5bc <vsiprintf>
  va_end(args);                   // 结束可变参数的使用

  // 等待上次的数据发送完成，避免新的数据覆盖正在传输的数据，导致混乱
  while (HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX)
 800bd5c:	bf00      	nop
 800bd5e:	480d      	ldr	r0, [pc, #52]	@ (800bd94 <printLog+0x58>)
 800bd60:	f7fd fa68 	bl	8009234 <HAL_UART_GetState>
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b21      	cmp	r3, #33	@ 0x21
 800bd68:	d0f9      	beq.n	800bd5e <printLog+0x22>
  {
    // Wait for DMA transfer to complete
  }
  HAL_UART_Transmit(&huart3, (uint8_t *)strBuf, strlen(strBuf), 1000);
 800bd6a:	1d3b      	adds	r3, r7, #4
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f7f4 faa7 	bl	80002c0 <strlen>
 800bd72:	4603      	mov	r3, r0
 800bd74:	b29a      	uxth	r2, r3
 800bd76:	1d39      	adds	r1, r7, #4
 800bd78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bd7c:	4805      	ldr	r0, [pc, #20]	@ (800bd94 <printLog+0x58>)
 800bd7e:	f7fc fdf5 	bl	800896c <HAL_UART_Transmit>
}
 800bd82:	bf00      	nop
 800bd84:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd8e:	b004      	add	sp, #16
 800bd90:	4770      	bx	lr
 800bd92:	bf00      	nop
 800bd94:	200004c8 	.word	0x200004c8

0800bd98 <uartTx>:
//   va_end(args);
//   HAL_UART_Transmit_DMA(&huart3, (const char *)txBuffer, length);
// }

void uartTx()
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	af00      	add	r7, sp, #0

#if SHOW_WAVE == 0
  txDataProcess();
 800bd9c:	f7ff ff62 	bl	800bc64 <txDataProcess>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800bda0:	2264      	movs	r2, #100	@ 0x64
 800bda2:	4903      	ldr	r1, [pc, #12]	@ (800bdb0 <uartTx+0x18>)
 800bda4:	4803      	ldr	r0, [pc, #12]	@ (800bdb4 <uartTx+0x1c>)
 800bda6:	f7fc fe6f 	bl	8008a88 <HAL_UART_Transmit_DMA>
#endif
}
 800bdaa:	bf00      	nop
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	2000076c 	.word	0x2000076c
 800bdb4:	200004c8 	.word	0x200004c8

0800bdb8 <commander_run>:

void commander_run(BldcMotor *motor)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  if (toProcessData == 1)
 800bdc0:	4b1c      	ldr	r3, [pc, #112]	@ (800be34 <commander_run+0x7c>)
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d131      	bne.n	800be2c <commander_run+0x74>
  {
    // memset(txBuffer, '\0', sizeof(txBuffer));

    switch (rxBuffer[0])
 800bdc8:	4b1b      	ldr	r3, [pc, #108]	@ (800be38 <commander_run+0x80>)
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	2b48      	cmp	r3, #72	@ 0x48
 800bdce:	d002      	beq.n	800bdd6 <commander_run+0x1e>
 800bdd0:	2b54      	cmp	r3, #84	@ 0x54
 800bdd2:	d00a      	beq.n	800bdea <commander_run+0x32>
 800bdd4:	e027      	b.n	800be26 <commander_run+0x6e>
    {
    case 'H':
      // sprintf(sndBuff, "Hello World!\r\n");
      // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)sndBuff, sizeof(sndBuff));
      sprintf(txBuffer, "Hello World!\r\n");
 800bdd6:	4919      	ldr	r1, [pc, #100]	@ (800be3c <commander_run+0x84>)
 800bdd8:	4819      	ldr	r0, [pc, #100]	@ (800be40 <commander_run+0x88>)
 800bdda:	f002 fb75 	bl	800e4c8 <siprintf>
      HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800bdde:	2264      	movs	r2, #100	@ 0x64
 800bde0:	4917      	ldr	r1, [pc, #92]	@ (800be40 <commander_run+0x88>)
 800bde2:	4818      	ldr	r0, [pc, #96]	@ (800be44 <commander_run+0x8c>)
 800bde4:	f7fc fe50 	bl	8008a88 <HAL_UART_Transmit_DMA>
      break;
 800bde8:	e01d      	b.n	800be26 <commander_run+0x6e>
    case 'T': // T6.28

      motor->target = atof((const char *)(rxBuffer + 1));
 800bdea:	4b17      	ldr	r3, [pc, #92]	@ (800be48 <commander_run+0x90>)
 800bdec:	4618      	mov	r0, r3
 800bdee:	f000 fe23 	bl	800ca38 <atof>
 800bdf2:	ec53 2b10 	vmov	r2, r3, d0
 800bdf6:	4610      	mov	r0, r2
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	f7f4 ff1d 	bl	8000c38 <__aeabi_d2f>
 800bdfe:	4602      	mov	r2, r0
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	631a      	str	r2, [r3, #48]	@ 0x30
      sprintf(txBuffer, "Target=%.2f\r\n", motor->target);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be08:	4618      	mov	r0, r3
 800be0a:	f7f4 fbc5 	bl	8000598 <__aeabi_f2d>
 800be0e:	4602      	mov	r2, r0
 800be10:	460b      	mov	r3, r1
 800be12:	490e      	ldr	r1, [pc, #56]	@ (800be4c <commander_run+0x94>)
 800be14:	480a      	ldr	r0, [pc, #40]	@ (800be40 <commander_run+0x88>)
 800be16:	f002 fb57 	bl	800e4c8 <siprintf>
      HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800be1a:	2264      	movs	r2, #100	@ 0x64
 800be1c:	4908      	ldr	r1, [pc, #32]	@ (800be40 <commander_run+0x88>)
 800be1e:	4809      	ldr	r0, [pc, #36]	@ (800be44 <commander_run+0x8c>)
 800be20:	f7fc fe32 	bl	8008a88 <HAL_UART_Transmit_DMA>
      // printf("%s", sndBuff);
      // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)sndBuff, sizeof(sndBuff));
      break;
 800be24:	bf00      	nop
      // case 'A': // A
      //   sprintf(sndBuff, "Ang=%.2f\r\n", shaftAngle);
      //   printf("%s", sndBuff);
      //   break;
    }
    toProcessData = 0;
 800be26:	4b03      	ldr	r3, [pc, #12]	@ (800be34 <commander_run+0x7c>)
 800be28:	2200      	movs	r2, #0
 800be2a:	701a      	strb	r2, [r3, #0]
  }
}
 800be2c:	bf00      	nop
 800be2e:	3708      	adds	r7, #8
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}
 800be34:	20000834 	.word	0x20000834
 800be38:	200007d0 	.word	0x200007d0
 800be3c:	08011828 	.word	0x08011828
 800be40:	2000076c 	.word	0x2000076c
 800be44:	200004c8 	.word	0x200004c8
 800be48:	200007d1 	.word	0x200007d1
 800be4c:	08011838 	.word	0x08011838

0800be50 <LED_drive>:
#include "led.h"

bool ledOn;

void LED_drive()
{
 800be50:	b580      	push	{r7, lr}
 800be52:	af00      	add	r7, sp, #0
    if (ledOn)
 800be54:	4b08      	ldr	r3, [pc, #32]	@ (800be78 <LED_drive+0x28>)
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d005      	beq.n	800be68 <LED_drive+0x18>
        LED_ON;
 800be5c:	2200      	movs	r2, #0
 800be5e:	2101      	movs	r1, #1
 800be60:	4806      	ldr	r0, [pc, #24]	@ (800be7c <LED_drive+0x2c>)
 800be62:	f7f9 fee7 	bl	8005c34 <HAL_GPIO_WritePin>
    else
        LED_OFF;
}
 800be66:	e004      	b.n	800be72 <LED_drive+0x22>
        LED_OFF;
 800be68:	2201      	movs	r2, #1
 800be6a:	2101      	movs	r1, #1
 800be6c:	4803      	ldr	r0, [pc, #12]	@ (800be7c <LED_drive+0x2c>)
 800be6e:	f7f9 fee1 	bl	8005c34 <HAL_GPIO_WritePin>
}
 800be72:	bf00      	nop
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	20000835 	.word	0x20000835
 800be7c:	48000400 	.word	0x48000400

0800be80 <IMU_Write_Reg>:
mpu6500_t mpu6500;
uint8_t IMU_data[14];
bool IMU_flag = 0;
// MPU6500单次写命令
uint8_t IMU_Write_Reg(uint8_t const reg, uint8_t const data)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b086      	sub	sp, #24
 800be84:	af02      	add	r7, sp, #8
 800be86:	4603      	mov	r3, r0
 800be88:	460a      	mov	r2, r1
 800be8a:	71fb      	strb	r3, [r7, #7]
 800be8c:	4613      	mov	r3, r2
 800be8e:	71bb      	strb	r3, [r7, #6]

    MPU_NSS_LOW; // 开始通讯
 800be90:	2200      	movs	r2, #0
 800be92:	2110      	movs	r1, #16
 800be94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800be98:	f7f9 fecc 	bl	8005c34 <HAL_GPIO_WritePin>
    uint8_t tx = reg & 0x7F;
 800be9c:	79fb      	ldrb	r3, [r7, #7]
 800be9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bea2:	b2db      	uxtb	r3, r3
 800bea4:	73fb      	strb	r3, [r7, #15]
    uint8_t rx, x;                                       // 使第一位为0（写模式）
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55); // 写入命令地址
 800bea6:	f107 020e 	add.w	r2, r7, #14
 800beaa:	f107 010f 	add.w	r1, r7, #15
 800beae:	2337      	movs	r3, #55	@ 0x37
 800beb0:	9300      	str	r3, [sp, #0]
 800beb2:	2301      	movs	r3, #1
 800beb4:	480c      	ldr	r0, [pc, #48]	@ (800bee8 <IMU_Write_Reg+0x68>)
 800beb6:	f7fa ff52 	bl	8006d5e <HAL_SPI_TransmitReceive>
    tx = data;
 800beba:	79bb      	ldrb	r3, [r7, #6]
 800bebc:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &x, 1, 55); // 写入数据
 800bebe:	f107 020d 	add.w	r2, r7, #13
 800bec2:	f107 010f 	add.w	r1, r7, #15
 800bec6:	2337      	movs	r3, #55	@ 0x37
 800bec8:	9300      	str	r3, [sp, #0]
 800beca:	2301      	movs	r3, #1
 800becc:	4806      	ldr	r0, [pc, #24]	@ (800bee8 <IMU_Write_Reg+0x68>)
 800bece:	f7fa ff46 	bl	8006d5e <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;                                       // 结束通讯
 800bed2:	2201      	movs	r2, #1
 800bed4:	2110      	movs	r1, #16
 800bed6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800beda:	f7f9 feab 	bl	8005c34 <HAL_GPIO_WritePin>
    return rx;
 800bede:	7bbb      	ldrb	r3, [r7, #14]
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3710      	adds	r7, #16
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	20000364 	.word	0x20000364

0800beec <IMU_Read_Reg>:
// MPU6500单次读取单字节数据
uint8_t IMU_Read_Reg(uint8_t const reg)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b086      	sub	sp, #24
 800bef0:	af02      	add	r7, sp, #8
 800bef2:	4603      	mov	r3, r0
 800bef4:	71fb      	strb	r3, [r7, #7]
    MPU_NSS_LOW;
 800bef6:	2200      	movs	r2, #0
 800bef8:	2110      	movs	r1, #16
 800befa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800befe:	f7f9 fe99 	bl	8005c34 <HAL_GPIO_WritePin>
    uint8_t tx = reg | 0x80; // 使地址第一位为1（读模式）
 800bf02:	79fb      	ldrb	r3, [r7, #7]
 800bf04:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	73fb      	strb	r3, [r7, #15]
    uint8_t rx;
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55); // 写入需要读取的地址
 800bf0c:	f107 020e 	add.w	r2, r7, #14
 800bf10:	f107 010f 	add.w	r1, r7, #15
 800bf14:	2337      	movs	r3, #55	@ 0x37
 800bf16:	9300      	str	r3, [sp, #0]
 800bf18:	2301      	movs	r3, #1
 800bf1a:	480c      	ldr	r0, [pc, #48]	@ (800bf4c <IMU_Read_Reg+0x60>)
 800bf1c:	f7fa ff1f 	bl	8006d5e <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55); // 为读取的数据提供存储空间
 800bf20:	f107 020e 	add.w	r2, r7, #14
 800bf24:	f107 010f 	add.w	r1, r7, #15
 800bf28:	2337      	movs	r3, #55	@ 0x37
 800bf2a:	9300      	str	r3, [sp, #0]
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	4807      	ldr	r0, [pc, #28]	@ (800bf4c <IMU_Read_Reg+0x60>)
 800bf30:	f7fa ff15 	bl	8006d5e <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 800bf34:	2201      	movs	r2, #1
 800bf36:	2110      	movs	r1, #16
 800bf38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bf3c:	f7f9 fe7a 	bl	8005c34 <HAL_GPIO_WritePin>
    return rx;
 800bf40:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3710      	adds	r7, #16
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	20000364 	.word	0x20000364

0800bf50 <IMU_Init>:

uint8_t Who_Am_I = 0;

bool IMU_Init(void)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	af00      	add	r7, sp, #0

    Who_Am_I = IMU_Read_Reg(MPU6500_WHO_AM_I); // 读取MPU6500地址
 800bf54:	2075      	movs	r0, #117	@ 0x75
 800bf56:	f7ff ffc9 	bl	800beec <IMU_Read_Reg>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	4b1c      	ldr	r3, [pc, #112]	@ (800bfd0 <IMU_Init+0x80>)
 800bf60:	701a      	strb	r2, [r3, #0]
    if (Who_Am_I != 0x70)
 800bf62:	4b1b      	ldr	r3, [pc, #108]	@ (800bfd0 <IMU_Init+0x80>)
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	2b70      	cmp	r3, #112	@ 0x70
 800bf68:	d001      	beq.n	800bf6e <IMU_Init+0x1e>
        return 1;
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	e02d      	b.n	800bfca <IMU_Init+0x7a>
    else
    {
        delay(10);
 800bf6e:	200a      	movs	r0, #10
 800bf70:	f000 fbbc 	bl	800c6ec <delay>
        IMU_Write_Reg(MPU6500_PWR_MGMT_1, 0X80);
 800bf74:	2180      	movs	r1, #128	@ 0x80
 800bf76:	206b      	movs	r0, #107	@ 0x6b
 800bf78:	f7ff ff82 	bl	800be80 <IMU_Write_Reg>
        delay(10);
 800bf7c:	200a      	movs	r0, #10
 800bf7e:	f000 fbb5 	bl	800c6ec <delay>
        IMU_Write_Reg(MPU6500_PWR_MGMT_1, 0X01);
 800bf82:	2101      	movs	r1, #1
 800bf84:	206b      	movs	r0, #107	@ 0x6b
 800bf86:	f7ff ff7b 	bl	800be80 <IMU_Write_Reg>
        delay(10);
 800bf8a:	200a      	movs	r0, #10
 800bf8c:	f000 fbae 	bl	800c6ec <delay>
        IMU_Write_Reg(MPU6500_SIGNAL_PATH_RESET, 0X07);
 800bf90:	2107      	movs	r1, #7
 800bf92:	2068      	movs	r0, #104	@ 0x68
 800bf94:	f7ff ff74 	bl	800be80 <IMU_Write_Reg>
        delay(10);
 800bf98:	200a      	movs	r0, #10
 800bf9a:	f000 fba7 	bl	800c6ec <delay>
        IMU_Write_Reg(MPU6500_CONFIG, 0X0);
 800bf9e:	2100      	movs	r1, #0
 800bfa0:	201a      	movs	r0, #26
 800bfa2:	f7ff ff6d 	bl	800be80 <IMU_Write_Reg>
        delay(10);
 800bfa6:	200a      	movs	r0, #10
 800bfa8:	f000 fba0 	bl	800c6ec <delay>
        IMU_Write_Reg(MPU6500_GYRO_CONFIG, 0x18);
 800bfac:	2118      	movs	r1, #24
 800bfae:	201b      	movs	r0, #27
 800bfb0:	f7ff ff66 	bl	800be80 <IMU_Write_Reg>
        delay(10);
 800bfb4:	200a      	movs	r0, #10
 800bfb6:	f000 fb99 	bl	800c6ec <delay>
        IMU_Write_Reg(MPU6500_ACCEL_CONFIG, 0x10);
 800bfba:	2110      	movs	r1, #16
 800bfbc:	201c      	movs	r0, #28
 800bfbe:	f7ff ff5f 	bl	800be80 <IMU_Write_Reg>
        delay(10);
 800bfc2:	200a      	movs	r0, #10
 800bfc4:	f000 fb92 	bl	800c6ec <delay>
        return 0;
 800bfc8:	2300      	movs	r3, #0
    }
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	200008e7 	.word	0x200008e7

0800bfd4 <Get_mpu6500>:
void Get_mpu6500(uint8_t *data)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b086      	sub	sp, #24
 800bfd8:	af02      	add	r7, sp, #8
 800bfda:	6078      	str	r0, [r7, #4]
    uint8_t i;
    MPU_NSS_LOW;
 800bfdc:	2200      	movs	r2, #0
 800bfde:	2110      	movs	r1, #16
 800bfe0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bfe4:	f7f9 fe26 	bl	8005c34 <HAL_GPIO_WritePin>

    uint8_t tx = MPU6500_ACCEL_XOUT_H | 0x80; // 使地址第一位为1（读模式）
 800bfe8:	23bb      	movs	r3, #187	@ 0xbb
 800bfea:	73fb      	strb	r3, [r7, #15]
    uint8_t rx;
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800bfec:	f107 020e 	add.w	r2, r7, #14
 800bff0:	f107 010f 	add.w	r1, r7, #15
 800bff4:	2337      	movs	r3, #55	@ 0x37
 800bff6:	9300      	str	r3, [sp, #0]
 800bff8:	2301      	movs	r3, #1
 800bffa:	480b      	ldr	r0, [pc, #44]	@ (800c028 <Get_mpu6500+0x54>)
 800bffc:	f7fa feaf 	bl	8006d5e <HAL_SPI_TransmitReceive>
    // for (i = 0; i < 14; i++)
    // {
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, data, 14, 55);
 800c000:	f107 010f 	add.w	r1, r7, #15
 800c004:	2337      	movs	r3, #55	@ 0x37
 800c006:	9300      	str	r3, [sp, #0]
 800c008:	230e      	movs	r3, #14
 800c00a:	687a      	ldr	r2, [r7, #4]
 800c00c:	4806      	ldr	r0, [pc, #24]	@ (800c028 <Get_mpu6500+0x54>)
 800c00e:	f7fa fea6 	bl	8006d5e <HAL_SPI_TransmitReceive>
    // }
    MPU_NSS_HIGH;
 800c012:	2201      	movs	r2, #1
 800c014:	2110      	movs	r1, #16
 800c016:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c01a:	f7f9 fe0b 	bl	8005c34 <HAL_GPIO_WritePin>
}
 800c01e:	bf00      	nop
 800c020:	3710      	adds	r7, #16
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}
 800c026:	bf00      	nop
 800c028:	20000364 	.word	0x20000364

0800c02c <IMU_handle>:

void IMU_handle(void) // 姿态计算
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	af00      	add	r7, sp, #0
    Get_mpu6500(IMU_data); // 获取mpu6500数据
 800c030:	48a8      	ldr	r0, [pc, #672]	@ (800c2d4 <IMU_handle+0x2a8>)
 800c032:	f7ff ffcf 	bl	800bfd4 <Get_mpu6500>

    mpu6500.acc.data.x = ((IMU_data[0] << 8) | IMU_data[1]);
 800c036:	4ba7      	ldr	r3, [pc, #668]	@ (800c2d4 <IMU_handle+0x2a8>)
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	021b      	lsls	r3, r3, #8
 800c03c:	b21a      	sxth	r2, r3
 800c03e:	4ba5      	ldr	r3, [pc, #660]	@ (800c2d4 <IMU_handle+0x2a8>)
 800c040:	785b      	ldrb	r3, [r3, #1]
 800c042:	b21b      	sxth	r3, r3
 800c044:	4313      	orrs	r3, r2
 800c046:	b21a      	sxth	r2, r3
 800c048:	4ba3      	ldr	r3, [pc, #652]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c04a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    mpu6500.acc.data.y = ((IMU_data[2] << 8) | IMU_data[3]);
 800c04e:	4ba1      	ldr	r3, [pc, #644]	@ (800c2d4 <IMU_handle+0x2a8>)
 800c050:	789b      	ldrb	r3, [r3, #2]
 800c052:	021b      	lsls	r3, r3, #8
 800c054:	b21a      	sxth	r2, r3
 800c056:	4b9f      	ldr	r3, [pc, #636]	@ (800c2d4 <IMU_handle+0x2a8>)
 800c058:	78db      	ldrb	r3, [r3, #3]
 800c05a:	b21b      	sxth	r3, r3
 800c05c:	4313      	orrs	r3, r2
 800c05e:	b21a      	sxth	r2, r3
 800c060:	4b9d      	ldr	r3, [pc, #628]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c062:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    mpu6500.acc.data.z = ((IMU_data[4] << 8) | IMU_data[5]);
 800c066:	4b9b      	ldr	r3, [pc, #620]	@ (800c2d4 <IMU_handle+0x2a8>)
 800c068:	791b      	ldrb	r3, [r3, #4]
 800c06a:	021b      	lsls	r3, r3, #8
 800c06c:	b21a      	sxth	r2, r3
 800c06e:	4b99      	ldr	r3, [pc, #612]	@ (800c2d4 <IMU_handle+0x2a8>)
 800c070:	795b      	ldrb	r3, [r3, #5]
 800c072:	b21b      	sxth	r3, r3
 800c074:	4313      	orrs	r3, r2
 800c076:	b21a      	sxth	r2, r3
 800c078:	4b97      	ldr	r3, [pc, #604]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c07a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    mpu6500.gyro.data.x = ((IMU_data[8] << 8) | IMU_data[9]);
 800c07e:	4b95      	ldr	r3, [pc, #596]	@ (800c2d4 <IMU_handle+0x2a8>)
 800c080:	7a1b      	ldrb	r3, [r3, #8]
 800c082:	021b      	lsls	r3, r3, #8
 800c084:	b21a      	sxth	r2, r3
 800c086:	4b93      	ldr	r3, [pc, #588]	@ (800c2d4 <IMU_handle+0x2a8>)
 800c088:	7a5b      	ldrb	r3, [r3, #9]
 800c08a:	b21b      	sxth	r3, r3
 800c08c:	4313      	orrs	r3, r2
 800c08e:	b21a      	sxth	r2, r3
 800c090:	4b91      	ldr	r3, [pc, #580]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c092:	83da      	strh	r2, [r3, #30]
    mpu6500.gyro.data.y = ((IMU_data[10] << 8) | IMU_data[11]);
 800c094:	4b8f      	ldr	r3, [pc, #572]	@ (800c2d4 <IMU_handle+0x2a8>)
 800c096:	7a9b      	ldrb	r3, [r3, #10]
 800c098:	021b      	lsls	r3, r3, #8
 800c09a:	b21a      	sxth	r2, r3
 800c09c:	4b8d      	ldr	r3, [pc, #564]	@ (800c2d4 <IMU_handle+0x2a8>)
 800c09e:	7adb      	ldrb	r3, [r3, #11]
 800c0a0:	b21b      	sxth	r3, r3
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	b21a      	sxth	r2, r3
 800c0a6:	4b8c      	ldr	r3, [pc, #560]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c0a8:	841a      	strh	r2, [r3, #32]
    mpu6500.gyro.data.z = ((IMU_data[12] << 8) | IMU_data[13]);
 800c0aa:	4b8a      	ldr	r3, [pc, #552]	@ (800c2d4 <IMU_handle+0x2a8>)
 800c0ac:	7b1b      	ldrb	r3, [r3, #12]
 800c0ae:	021b      	lsls	r3, r3, #8
 800c0b0:	b21a      	sxth	r2, r3
 800c0b2:	4b88      	ldr	r3, [pc, #544]	@ (800c2d4 <IMU_handle+0x2a8>)
 800c0b4:	7b5b      	ldrb	r3, [r3, #13]
 800c0b6:	b21b      	sxth	r3, r3
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	b21a      	sxth	r2, r3
 800c0bc:	4b86      	ldr	r3, [pc, #536]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c0be:	845a      	strh	r2, [r3, #34]	@ 0x22

    if (mpu6500.Cali_Flag == 1) // 温补已经校准
 800c0c0:	4b85      	ldr	r3, [pc, #532]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c0c2:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	f040 810e 	bne.w	800c2e8 <IMU_handle+0x2bc>
    {
        if (mpu6500.Offset_Flag == 0)
 800c0cc:	4b82      	ldr	r3, [pc, #520]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c0ce:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d121      	bne.n	800c11a <IMU_handle+0xee>
        {
            mpu6500.Offset_Flag = 1;
 800c0d6:	4b80      	ldr	r3, [pc, #512]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c0d8:	2201      	movs	r2, #1
 800c0da:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
            mpu6500.gyro.filter.x = mpu6500.gyro.Primitive.x;
 800c0de:	4b7e      	ldr	r3, [pc, #504]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c0e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0e2:	4a7d      	ldr	r2, [pc, #500]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c0e4:	60d3      	str	r3, [r2, #12]
            mpu6500.gyro.filter.y = mpu6500.gyro.Primitive.y;
 800c0e6:	4b7c      	ldr	r3, [pc, #496]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c0e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0ea:	4a7b      	ldr	r2, [pc, #492]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c0ec:	6113      	str	r3, [r2, #16]
            mpu6500.gyro.filter.z = mpu6500.gyro.Primitive.z;
 800c0ee:	4b7a      	ldr	r3, [pc, #488]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c0f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0f2:	4a79      	ldr	r2, [pc, #484]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c0f4:	6153      	str	r3, [r2, #20]

            mpu6500.acc.Initial.x = mpu6500.acc.data.x;
 800c0f6:	4b78      	ldr	r3, [pc, #480]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c0f8:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	@ 0x4e
 800c0fc:	4b76      	ldr	r3, [pc, #472]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c0fe:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            mpu6500.acc.Initial.y = mpu6500.acc.data.y;
 800c102:	4b75      	ldr	r3, [pc, #468]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c104:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	@ 0x50
 800c108:	4b73      	ldr	r3, [pc, #460]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c10a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            mpu6500.acc.Initial.z = mpu6500.acc.data.z;
 800c10e:	4b72      	ldr	r3, [pc, #456]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c110:	f9b3 2052 	ldrsh.w	r2, [r3, #82]	@ 0x52
 800c114:	4b70      	ldr	r3, [pc, #448]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c116:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
        }

        mpu6500.gyro.Primitive.x = (float)mpu6500.gyro.data.x / 16.4f - mpu6500.gyro.offset.x; // 换算成 度/秒
 800c11a:	4b6f      	ldr	r3, [pc, #444]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c11c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800c120:	ee07 3a90 	vmov	s15, r3
 800c124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c128:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 800c2dc <IMU_handle+0x2b0>
 800c12c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c130:	4b69      	ldr	r3, [pc, #420]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c132:	edd3 7a00 	vldr	s15, [r3]
 800c136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c13a:	4b67      	ldr	r3, [pc, #412]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c13c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        mpu6500.gyro.Primitive.y = (float)mpu6500.gyro.data.y / 16.4f - mpu6500.gyro.offset.y;
 800c140:	4b65      	ldr	r3, [pc, #404]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c142:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800c146:	ee07 3a90 	vmov	s15, r3
 800c14a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c14e:	eddf 6a63 	vldr	s13, [pc, #396]	@ 800c2dc <IMU_handle+0x2b0>
 800c152:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c156:	4b60      	ldr	r3, [pc, #384]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c158:	edd3 7a01 	vldr	s15, [r3, #4]
 800c15c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c160:	4b5d      	ldr	r3, [pc, #372]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c162:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        mpu6500.gyro.Primitive.z = (float)mpu6500.gyro.data.z / 16.4f - mpu6500.gyro.offset.z;
 800c166:	4b5c      	ldr	r3, [pc, #368]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c168:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 800c16c:	ee07 3a90 	vmov	s15, r3
 800c170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c174:	eddf 6a59 	vldr	s13, [pc, #356]	@ 800c2dc <IMU_handle+0x2b0>
 800c178:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c17c:	4b56      	ldr	r3, [pc, #344]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c17e:	edd3 7a02 	vldr	s15, [r3, #8]
 800c182:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c186:	4b54      	ldr	r3, [pc, #336]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c188:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

        mpu6500.gyro.filter.x += (mpu6500.gyro.Primitive.x - mpu6500.gyro.filter.x) * 0.5f; // 滤波
 800c18c:	4b52      	ldr	r3, [pc, #328]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c18e:	ed93 7a03 	vldr	s14, [r3, #12]
 800c192:	4b51      	ldr	r3, [pc, #324]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c194:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800c198:	4b4f      	ldr	r3, [pc, #316]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c19a:	edd3 7a03 	vldr	s15, [r3, #12]
 800c19e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c1a2:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800c1a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c1aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1ae:	4b4a      	ldr	r3, [pc, #296]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c1b0:	edc3 7a03 	vstr	s15, [r3, #12]
        mpu6500.gyro.filter.y += (mpu6500.gyro.Primitive.y - mpu6500.gyro.filter.y) * 0.5f;
 800c1b4:	4b48      	ldr	r3, [pc, #288]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c1b6:	ed93 7a04 	vldr	s14, [r3, #16]
 800c1ba:	4b47      	ldr	r3, [pc, #284]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c1bc:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800c1c0:	4b45      	ldr	r3, [pc, #276]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c1c2:	edd3 7a04 	vldr	s15, [r3, #16]
 800c1c6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c1ca:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800c1ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c1d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1d6:	4b40      	ldr	r3, [pc, #256]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c1d8:	edc3 7a04 	vstr	s15, [r3, #16]
        mpu6500.gyro.filter.z += (mpu6500.gyro.Primitive.z - mpu6500.gyro.filter.z) * 0.5f;
 800c1dc:	4b3e      	ldr	r3, [pc, #248]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c1de:	ed93 7a05 	vldr	s14, [r3, #20]
 800c1e2:	4b3d      	ldr	r3, [pc, #244]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c1e4:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800c1e8:	4b3b      	ldr	r3, [pc, #236]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c1ea:	edd3 7a05 	vldr	s15, [r3, #20]
 800c1ee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c1f2:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800c1f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c1fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1fe:	4b36      	ldr	r3, [pc, #216]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c200:	edc3 7a05 	vstr	s15, [r3, #20]

        mpu6500.acc.Primitive.x = (float)mpu6500.acc.data.x / 4096.0f; // 换算成 度/秒
 800c204:	4b34      	ldr	r3, [pc, #208]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c206:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	@ 0x4e
 800c20a:	ee07 3a90 	vmov	s15, r3
 800c20e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c212:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800c2e0 <IMU_handle+0x2b4>
 800c216:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c21a:	4b2f      	ldr	r3, [pc, #188]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c21c:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
        mpu6500.acc.Primitive.y = (float)mpu6500.acc.data.y / 4096.0f;
 800c220:	4b2d      	ldr	r3, [pc, #180]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c222:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	@ 0x50
 800c226:	ee07 3a90 	vmov	s15, r3
 800c22a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c22e:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 800c2e0 <IMU_handle+0x2b4>
 800c232:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c236:	4b28      	ldr	r3, [pc, #160]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c238:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
        mpu6500.acc.Primitive.z = (float)mpu6500.acc.data.z / 4096.0f;
 800c23c:	4b26      	ldr	r3, [pc, #152]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c23e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	@ 0x52
 800c242:	ee07 3a90 	vmov	s15, r3
 800c246:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c24a:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800c2e0 <IMU_handle+0x2b4>
 800c24e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c252:	4b21      	ldr	r3, [pc, #132]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c254:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c

        mpu6500.acc.filter.x += (mpu6500.acc.Primitive.x - mpu6500.acc.filter.x) * 0.01f; // 滤波
 800c258:	4b1f      	ldr	r3, [pc, #124]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c25a:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800c25e:	4b1e      	ldr	r3, [pc, #120]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c260:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 800c264:	4b1c      	ldr	r3, [pc, #112]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c266:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800c26a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c26e:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 800c2e4 <IMU_handle+0x2b8>
 800c272:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c27a:	4b17      	ldr	r3, [pc, #92]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c27c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
        mpu6500.acc.filter.y += (mpu6500.acc.Primitive.y - mpu6500.acc.filter.y) * 0.01f;
 800c280:	4b15      	ldr	r3, [pc, #84]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c282:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800c286:	4b14      	ldr	r3, [pc, #80]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c288:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 800c28c:	4b12      	ldr	r3, [pc, #72]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c28e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800c292:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c296:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800c2e4 <IMU_handle+0x2b8>
 800c29a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c29e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c2a4:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
        mpu6500.acc.filter.z += (mpu6500.acc.Primitive.z - mpu6500.acc.filter.z) * 0.01f;
 800c2a8:	4b0b      	ldr	r3, [pc, #44]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c2aa:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800c2ae:	4b0a      	ldr	r3, [pc, #40]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c2b0:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 800c2b4:	4b08      	ldr	r3, [pc, #32]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c2b6:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800c2ba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c2be:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800c2e4 <IMU_handle+0x2b8>
 800c2c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c2c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2ca:	4b03      	ldr	r3, [pc, #12]	@ (800c2d8 <IMU_handle+0x2ac>)
 800c2cc:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
 800c2d0:	e103      	b.n	800c4da <IMU_handle+0x4ae>
 800c2d2:	bf00      	nop
 800c2d4:	200008d8 	.word	0x200008d8
 800c2d8:	20000838 	.word	0x20000838
 800c2dc:	41833333 	.word	0x41833333
 800c2e0:	45800000 	.word	0x45800000
 800c2e4:	3c23d70a 	.word	0x3c23d70a
    }
    else if (mpu6500.Cali_Flag == 0)
 800c2e8:	4bc4      	ldr	r3, [pc, #784]	@ (800c5fc <IMU_handle+0x5d0>)
 800c2ea:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	f040 80f3 	bne.w	800c4da <IMU_handle+0x4ae>
    {
        if (mpu6500.Offset_Flag == 0)
 800c2f4:	4bc1      	ldr	r3, [pc, #772]	@ (800c5fc <IMU_handle+0x5d0>)
 800c2f6:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d121      	bne.n	800c342 <IMU_handle+0x316>
        {
            mpu6500.Offset_Flag = 1;
 800c2fe:	4bbf      	ldr	r3, [pc, #764]	@ (800c5fc <IMU_handle+0x5d0>)
 800c300:	2201      	movs	r2, #1
 800c302:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
            mpu6500.gyro.filter.x = mpu6500.gyro.Primitive.x;
 800c306:	4bbd      	ldr	r3, [pc, #756]	@ (800c5fc <IMU_handle+0x5d0>)
 800c308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c30a:	4abc      	ldr	r2, [pc, #752]	@ (800c5fc <IMU_handle+0x5d0>)
 800c30c:	60d3      	str	r3, [r2, #12]
            mpu6500.gyro.filter.y = mpu6500.gyro.Primitive.y;
 800c30e:	4bbb      	ldr	r3, [pc, #748]	@ (800c5fc <IMU_handle+0x5d0>)
 800c310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c312:	4aba      	ldr	r2, [pc, #744]	@ (800c5fc <IMU_handle+0x5d0>)
 800c314:	6113      	str	r3, [r2, #16]
            mpu6500.gyro.filter.z = mpu6500.gyro.Primitive.z;
 800c316:	4bb9      	ldr	r3, [pc, #740]	@ (800c5fc <IMU_handle+0x5d0>)
 800c318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c31a:	4ab8      	ldr	r2, [pc, #736]	@ (800c5fc <IMU_handle+0x5d0>)
 800c31c:	6153      	str	r3, [r2, #20]

            mpu6500.acc.Initial.x = mpu6500.acc.data.x;
 800c31e:	4bb7      	ldr	r3, [pc, #732]	@ (800c5fc <IMU_handle+0x5d0>)
 800c320:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	@ 0x4e
 800c324:	4bb5      	ldr	r3, [pc, #724]	@ (800c5fc <IMU_handle+0x5d0>)
 800c326:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            mpu6500.acc.Initial.y = mpu6500.acc.data.y;
 800c32a:	4bb4      	ldr	r3, [pc, #720]	@ (800c5fc <IMU_handle+0x5d0>)
 800c32c:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	@ 0x50
 800c330:	4bb2      	ldr	r3, [pc, #712]	@ (800c5fc <IMU_handle+0x5d0>)
 800c332:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            mpu6500.acc.Initial.z = mpu6500.acc.data.z;
 800c336:	4bb1      	ldr	r3, [pc, #708]	@ (800c5fc <IMU_handle+0x5d0>)
 800c338:	f9b3 2052 	ldrsh.w	r2, [r3, #82]	@ 0x52
 800c33c:	4baf      	ldr	r3, [pc, #700]	@ (800c5fc <IMU_handle+0x5d0>)
 800c33e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
        }

        mpu6500.gyro.Primitive.x = (float)mpu6500.gyro.data.x / 16.4f; // 换算成 度/秒
 800c342:	4bae      	ldr	r3, [pc, #696]	@ (800c5fc <IMU_handle+0x5d0>)
 800c344:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800c348:	ee07 3a90 	vmov	s15, r3
 800c34c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c350:	eddf 6aab 	vldr	s13, [pc, #684]	@ 800c600 <IMU_handle+0x5d4>
 800c354:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c358:	4ba8      	ldr	r3, [pc, #672]	@ (800c5fc <IMU_handle+0x5d0>)
 800c35a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        mpu6500.gyro.Primitive.y = (float)mpu6500.gyro.data.y / 16.4f;
 800c35e:	4ba7      	ldr	r3, [pc, #668]	@ (800c5fc <IMU_handle+0x5d0>)
 800c360:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800c364:	ee07 3a90 	vmov	s15, r3
 800c368:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c36c:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 800c600 <IMU_handle+0x5d4>
 800c370:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c374:	4ba1      	ldr	r3, [pc, #644]	@ (800c5fc <IMU_handle+0x5d0>)
 800c376:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        mpu6500.gyro.Primitive.z = (float)mpu6500.gyro.data.z / 16.4f;
 800c37a:	4ba0      	ldr	r3, [pc, #640]	@ (800c5fc <IMU_handle+0x5d0>)
 800c37c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 800c380:	ee07 3a90 	vmov	s15, r3
 800c384:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c388:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 800c600 <IMU_handle+0x5d4>
 800c38c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c390:	4b9a      	ldr	r3, [pc, #616]	@ (800c5fc <IMU_handle+0x5d0>)
 800c392:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

        mpu6500.gyro.filter.x += (mpu6500.gyro.Primitive.x - mpu6500.gyro.filter.x) * 0.05f; // 滤波
 800c396:	4b99      	ldr	r3, [pc, #612]	@ (800c5fc <IMU_handle+0x5d0>)
 800c398:	ed93 7a03 	vldr	s14, [r3, #12]
 800c39c:	4b97      	ldr	r3, [pc, #604]	@ (800c5fc <IMU_handle+0x5d0>)
 800c39e:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800c3a2:	4b96      	ldr	r3, [pc, #600]	@ (800c5fc <IMU_handle+0x5d0>)
 800c3a4:	edd3 7a03 	vldr	s15, [r3, #12]
 800c3a8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c3ac:	eddf 6a95 	vldr	s13, [pc, #596]	@ 800c604 <IMU_handle+0x5d8>
 800c3b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c3b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3b8:	4b90      	ldr	r3, [pc, #576]	@ (800c5fc <IMU_handle+0x5d0>)
 800c3ba:	edc3 7a03 	vstr	s15, [r3, #12]
        mpu6500.gyro.filter.y += (mpu6500.gyro.Primitive.y - mpu6500.gyro.filter.y) * 0.05f;
 800c3be:	4b8f      	ldr	r3, [pc, #572]	@ (800c5fc <IMU_handle+0x5d0>)
 800c3c0:	ed93 7a04 	vldr	s14, [r3, #16]
 800c3c4:	4b8d      	ldr	r3, [pc, #564]	@ (800c5fc <IMU_handle+0x5d0>)
 800c3c6:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800c3ca:	4b8c      	ldr	r3, [pc, #560]	@ (800c5fc <IMU_handle+0x5d0>)
 800c3cc:	edd3 7a04 	vldr	s15, [r3, #16]
 800c3d0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c3d4:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 800c604 <IMU_handle+0x5d8>
 800c3d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c3dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3e0:	4b86      	ldr	r3, [pc, #536]	@ (800c5fc <IMU_handle+0x5d0>)
 800c3e2:	edc3 7a04 	vstr	s15, [r3, #16]
        mpu6500.gyro.filter.z += (mpu6500.gyro.Primitive.z - mpu6500.gyro.filter.z) * 0.05f;
 800c3e6:	4b85      	ldr	r3, [pc, #532]	@ (800c5fc <IMU_handle+0x5d0>)
 800c3e8:	ed93 7a05 	vldr	s14, [r3, #20]
 800c3ec:	4b83      	ldr	r3, [pc, #524]	@ (800c5fc <IMU_handle+0x5d0>)
 800c3ee:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800c3f2:	4b82      	ldr	r3, [pc, #520]	@ (800c5fc <IMU_handle+0x5d0>)
 800c3f4:	edd3 7a05 	vldr	s15, [r3, #20]
 800c3f8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c3fc:	eddf 6a81 	vldr	s13, [pc, #516]	@ 800c604 <IMU_handle+0x5d8>
 800c400:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c404:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c408:	4b7c      	ldr	r3, [pc, #496]	@ (800c5fc <IMU_handle+0x5d0>)
 800c40a:	edc3 7a05 	vstr	s15, [r3, #20]

        mpu6500.acc.Primitive.x = (float)mpu6500.acc.data.x / 4096.0f; // 换算成 度/秒
 800c40e:	4b7b      	ldr	r3, [pc, #492]	@ (800c5fc <IMU_handle+0x5d0>)
 800c410:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	@ 0x4e
 800c414:	ee07 3a90 	vmov	s15, r3
 800c418:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c41c:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 800c608 <IMU_handle+0x5dc>
 800c420:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c424:	4b75      	ldr	r3, [pc, #468]	@ (800c5fc <IMU_handle+0x5d0>)
 800c426:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
        mpu6500.acc.Primitive.y = (float)mpu6500.acc.data.y / 4096.0f;
 800c42a:	4b74      	ldr	r3, [pc, #464]	@ (800c5fc <IMU_handle+0x5d0>)
 800c42c:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	@ 0x50
 800c430:	ee07 3a90 	vmov	s15, r3
 800c434:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c438:	eddf 6a73 	vldr	s13, [pc, #460]	@ 800c608 <IMU_handle+0x5dc>
 800c43c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c440:	4b6e      	ldr	r3, [pc, #440]	@ (800c5fc <IMU_handle+0x5d0>)
 800c442:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
        mpu6500.acc.Primitive.z = (float)mpu6500.acc.data.z / 4096.0f;
 800c446:	4b6d      	ldr	r3, [pc, #436]	@ (800c5fc <IMU_handle+0x5d0>)
 800c448:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	@ 0x52
 800c44c:	ee07 3a90 	vmov	s15, r3
 800c450:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c454:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 800c608 <IMU_handle+0x5dc>
 800c458:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c45c:	4b67      	ldr	r3, [pc, #412]	@ (800c5fc <IMU_handle+0x5d0>)
 800c45e:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c

        mpu6500.acc.filter.x += (mpu6500.acc.Primitive.x - mpu6500.acc.filter.x) * 0.01f; // 滤波
 800c462:	4b66      	ldr	r3, [pc, #408]	@ (800c5fc <IMU_handle+0x5d0>)
 800c464:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800c468:	4b64      	ldr	r3, [pc, #400]	@ (800c5fc <IMU_handle+0x5d0>)
 800c46a:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 800c46e:	4b63      	ldr	r3, [pc, #396]	@ (800c5fc <IMU_handle+0x5d0>)
 800c470:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800c474:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c478:	eddf 6a64 	vldr	s13, [pc, #400]	@ 800c60c <IMU_handle+0x5e0>
 800c47c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c480:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c484:	4b5d      	ldr	r3, [pc, #372]	@ (800c5fc <IMU_handle+0x5d0>)
 800c486:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
        mpu6500.acc.filter.y += (mpu6500.acc.Primitive.y - mpu6500.acc.filter.y) * 0.01f;
 800c48a:	4b5c      	ldr	r3, [pc, #368]	@ (800c5fc <IMU_handle+0x5d0>)
 800c48c:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800c490:	4b5a      	ldr	r3, [pc, #360]	@ (800c5fc <IMU_handle+0x5d0>)
 800c492:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 800c496:	4b59      	ldr	r3, [pc, #356]	@ (800c5fc <IMU_handle+0x5d0>)
 800c498:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800c49c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c4a0:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 800c60c <IMU_handle+0x5e0>
 800c4a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c4a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4ac:	4b53      	ldr	r3, [pc, #332]	@ (800c5fc <IMU_handle+0x5d0>)
 800c4ae:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
        mpu6500.acc.filter.z += (mpu6500.acc.Primitive.z - mpu6500.acc.filter.z) * 0.01f;
 800c4b2:	4b52      	ldr	r3, [pc, #328]	@ (800c5fc <IMU_handle+0x5d0>)
 800c4b4:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800c4b8:	4b50      	ldr	r3, [pc, #320]	@ (800c5fc <IMU_handle+0x5d0>)
 800c4ba:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 800c4be:	4b4f      	ldr	r3, [pc, #316]	@ (800c5fc <IMU_handle+0x5d0>)
 800c4c0:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800c4c4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c4c8:	eddf 6a50 	vldr	s13, [pc, #320]	@ 800c60c <IMU_handle+0x5e0>
 800c4cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c4d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4d4:	4b49      	ldr	r3, [pc, #292]	@ (800c5fc <IMU_handle+0x5d0>)
 800c4d6:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    }

    mpu6500.accAngle.y = -atan2f(mpu6500.acc.filter.x, mpu6500.acc.filter.z) * 57.2957795f; // 计算加速度倾角
 800c4da:	4b48      	ldr	r3, [pc, #288]	@ (800c5fc <IMU_handle+0x5d0>)
 800c4dc:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800c4e0:	4b46      	ldr	r3, [pc, #280]	@ (800c5fc <IMU_handle+0x5d0>)
 800c4e2:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800c4e6:	eef0 0a47 	vmov.f32	s1, s14
 800c4ea:	eeb0 0a67 	vmov.f32	s0, s15
 800c4ee:	f004 fe6b 	bl	80111c8 <atan2f>
 800c4f2:	eef0 7a40 	vmov.f32	s15, s0
 800c4f6:	eef1 7a67 	vneg.f32	s15, s15
 800c4fa:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800c610 <IMU_handle+0x5e4>
 800c4fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c502:	4b3e      	ldr	r3, [pc, #248]	@ (800c5fc <IMU_handle+0x5d0>)
 800c504:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70

    if (IMU_flag == 0) // 使用加速度计算的姿态角赋初值
 800c508:	4b42      	ldr	r3, [pc, #264]	@ (800c614 <IMU_handle+0x5e8>)
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d106      	bne.n	800c51e <IMU_handle+0x4f2>
    {
        IMU_flag = 1;
 800c510:	4b40      	ldr	r3, [pc, #256]	@ (800c614 <IMU_handle+0x5e8>)
 800c512:	2201      	movs	r2, #1
 800c514:	701a      	strb	r2, [r3, #0]
        mpu6500.gyroAngle.y = mpu6500.accAngle.y;
 800c516:	4b39      	ldr	r3, [pc, #228]	@ (800c5fc <IMU_handle+0x5d0>)
 800c518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c51a:	4a38      	ldr	r2, [pc, #224]	@ (800c5fc <IMU_handle+0x5d0>)
 800c51c:	6653      	str	r3, [r2, #100]	@ 0x64
    }

    if (fabsf(mpu6500.accAngle.y) > 90.0f)
 800c51e:	4b37      	ldr	r3, [pc, #220]	@ (800c5fc <IMU_handle+0x5d0>)
 800c520:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 800c524:	eef0 7ae7 	vabs.f32	s15, s15
 800c528:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800c618 <IMU_handle+0x5ec>
 800c52c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c534:	dd04      	ble.n	800c540 <IMU_handle+0x514>
    {
        mpu6500.gyroAngle.y = mpu6500.accAngle.y;
 800c536:	4b31      	ldr	r3, [pc, #196]	@ (800c5fc <IMU_handle+0x5d0>)
 800c538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c53a:	4a30      	ldr	r2, [pc, #192]	@ (800c5fc <IMU_handle+0x5d0>)
 800c53c:	6653      	str	r3, [r2, #100]	@ 0x64
        if (mpu6500.gyroAngle.z > 180.0f)
            mpu6500.gyroAngle.z -= 360.0f;
        else if (mpu6500.gyroAngle.z < -180.0f)
            mpu6500.gyroAngle.z += 360.0f;
    }
}
 800c53e:	e05a      	b.n	800c5f6 <IMU_handle+0x5ca>
        mpu6500.gyroAngle.y += mpu6500.gyro.Primitive.y * 0.001f;                         // 角速度积分
 800c540:	4b2e      	ldr	r3, [pc, #184]	@ (800c5fc <IMU_handle+0x5d0>)
 800c542:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 800c546:	4b2d      	ldr	r3, [pc, #180]	@ (800c5fc <IMU_handle+0x5d0>)
 800c548:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800c54c:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800c61c <IMU_handle+0x5f0>
 800c550:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c554:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c558:	4b28      	ldr	r3, [pc, #160]	@ (800c5fc <IMU_handle+0x5d0>)
 800c55a:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
        mpu6500.gyroAngle.y = mpu6500.gyroAngle.y * 0.999f + mpu6500.accAngle.y * 0.001f; // 陀螺积分角度与加速度倾角进行融合
 800c55e:	4b27      	ldr	r3, [pc, #156]	@ (800c5fc <IMU_handle+0x5d0>)
 800c560:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800c564:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800c620 <IMU_handle+0x5f4>
 800c568:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c56c:	4b23      	ldr	r3, [pc, #140]	@ (800c5fc <IMU_handle+0x5d0>)
 800c56e:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 800c572:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800c61c <IMU_handle+0x5f0>
 800c576:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c57a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c57e:	4b1f      	ldr	r3, [pc, #124]	@ (800c5fc <IMU_handle+0x5d0>)
 800c580:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
        mpu6500.gyroAngle.z += mpu6500.gyro.Primitive.z * 0.001f; // 角速度积分，暂未使用
 800c584:	4b1d      	ldr	r3, [pc, #116]	@ (800c5fc <IMU_handle+0x5d0>)
 800c586:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 800c58a:	4b1c      	ldr	r3, [pc, #112]	@ (800c5fc <IMU_handle+0x5d0>)
 800c58c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c590:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800c61c <IMU_handle+0x5f0>
 800c594:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c59c:	4b17      	ldr	r3, [pc, #92]	@ (800c5fc <IMU_handle+0x5d0>)
 800c59e:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
        if (mpu6500.gyroAngle.z > 180.0f)
 800c5a2:	4b16      	ldr	r3, [pc, #88]	@ (800c5fc <IMU_handle+0x5d0>)
 800c5a4:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 800c5a8:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800c624 <IMU_handle+0x5f8>
 800c5ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5b4:	dd0a      	ble.n	800c5cc <IMU_handle+0x5a0>
            mpu6500.gyroAngle.z -= 360.0f;
 800c5b6:	4b11      	ldr	r3, [pc, #68]	@ (800c5fc <IMU_handle+0x5d0>)
 800c5b8:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 800c5bc:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800c628 <IMU_handle+0x5fc>
 800c5c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c5c4:	4b0d      	ldr	r3, [pc, #52]	@ (800c5fc <IMU_handle+0x5d0>)
 800c5c6:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
}
 800c5ca:	e014      	b.n	800c5f6 <IMU_handle+0x5ca>
        else if (mpu6500.gyroAngle.z < -180.0f)
 800c5cc:	4b0b      	ldr	r3, [pc, #44]	@ (800c5fc <IMU_handle+0x5d0>)
 800c5ce:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 800c5d2:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800c62c <IMU_handle+0x600>
 800c5d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5de:	d400      	bmi.n	800c5e2 <IMU_handle+0x5b6>
}
 800c5e0:	e009      	b.n	800c5f6 <IMU_handle+0x5ca>
            mpu6500.gyroAngle.z += 360.0f;
 800c5e2:	4b06      	ldr	r3, [pc, #24]	@ (800c5fc <IMU_handle+0x5d0>)
 800c5e4:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 800c5e8:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800c628 <IMU_handle+0x5fc>
 800c5ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c5f0:	4b02      	ldr	r3, [pc, #8]	@ (800c5fc <IMU_handle+0x5d0>)
 800c5f2:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
}
 800c5f6:	bf00      	nop
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	20000838 	.word	0x20000838
 800c600:	41833333 	.word	0x41833333
 800c604:	3d4ccccd 	.word	0x3d4ccccd
 800c608:	45800000 	.word	0x45800000
 800c60c:	3c23d70a 	.word	0x3c23d70a
 800c610:	42652ee1 	.word	0x42652ee1
 800c614:	200008e6 	.word	0x200008e6
 800c618:	42b40000 	.word	0x42b40000
 800c61c:	3a83126f 	.word	0x3a83126f
 800c620:	3f7fbe77 	.word	0x3f7fbe77
 800c624:	43340000 	.word	0x43340000
 800c628:	43b40000 	.word	0x43b40000
 800c62c:	c3340000 	.word	0xc3340000

0800c630 <MT6701_GetRawData>:
#include "focLib.h"
#include "time_utils.h"
// static unsigned int rotationCount, rotationCount_Last;

uint16_t MT6701_GetRawData(void)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b084      	sub	sp, #16
 800c634:	af02      	add	r7, sp, #8
    uint16_t rawData;
    uint16_t txData = 0xFFFF;
 800c636:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c63a:	803b      	strh	r3, [r7, #0]
    uint16_t timeOut = 200;
 800c63c:	23c8      	movs	r3, #200	@ 0xc8
 800c63e:	80fb      	strh	r3, [r7, #6]

    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800c640:	e006      	b.n	800c650 <MT6701_GetRawData+0x20>
    {
        if (timeOut-- == 0)
 800c642:	88fb      	ldrh	r3, [r7, #6]
 800c644:	1e5a      	subs	r2, r3, #1
 800c646:	80fa      	strh	r2, [r7, #6]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d101      	bne.n	800c650 <MT6701_GetRawData+0x20>
        {
            //   printLog("SPI state error!\r\n");
            return 0; // 在超时时直接返回，避免继续执行后续代码
 800c64c:	2300      	movs	r3, #0
 800c64e:	e027      	b.n	800c6a0 <MT6701_GetRawData+0x70>
    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800c650:	4815      	ldr	r0, [pc, #84]	@ (800c6a8 <MT6701_GetRawData+0x78>)
 800c652:	f7fa fda6 	bl	80071a2 <HAL_SPI_GetState>
 800c656:	4603      	mov	r3, r0
 800c658:	2b01      	cmp	r3, #1
 800c65a:	d1f2      	bne.n	800c642 <MT6701_GetRawData+0x12>
        }
    }

    MT6701_CS_Enable;
 800c65c:	2200      	movs	r2, #0
 800c65e:	2108      	movs	r1, #8
 800c660:	4812      	ldr	r0, [pc, #72]	@ (800c6ac <MT6701_GetRawData+0x7c>)
 800c662:	f7f9 fae7 	bl	8005c34 <HAL_GPIO_WritePin>

    HAL_StatusTypeDef spiStatus = HAL_SPI_TransmitReceive(&hspi3, (uint8_t *)&txData, (uint8_t *)&rawData, 1, HAL_MAX_DELAY);
 800c666:	1cba      	adds	r2, r7, #2
 800c668:	4639      	mov	r1, r7
 800c66a:	f04f 33ff 	mov.w	r3, #4294967295
 800c66e:	9300      	str	r3, [sp, #0]
 800c670:	2301      	movs	r3, #1
 800c672:	480d      	ldr	r0, [pc, #52]	@ (800c6a8 <MT6701_GetRawData+0x78>)
 800c674:	f7fa fb73 	bl	8006d5e <HAL_SPI_TransmitReceive>
 800c678:	4603      	mov	r3, r0
 800c67a:	717b      	strb	r3, [r7, #5]
    if (spiStatus != HAL_OK)
 800c67c:	797b      	ldrb	r3, [r7, #5]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d006      	beq.n	800c690 <MT6701_GetRawData+0x60>
    {
        MT6701_CS_Disable;
 800c682:	2201      	movs	r2, #1
 800c684:	2108      	movs	r1, #8
 800c686:	4809      	ldr	r0, [pc, #36]	@ (800c6ac <MT6701_GetRawData+0x7c>)
 800c688:	f7f9 fad4 	bl	8005c34 <HAL_GPIO_WritePin>
        //  printLog("MT6701 read data error!\r\n");
        return 0; // 在SPI传输错误时直接返回，避免继续执行后续代码
 800c68c:	2300      	movs	r3, #0
 800c68e:	e007      	b.n	800c6a0 <MT6701_GetRawData+0x70>
    }

    MT6701_CS_Disable;
 800c690:	2201      	movs	r2, #1
 800c692:	2108      	movs	r1, #8
 800c694:	4805      	ldr	r0, [pc, #20]	@ (800c6ac <MT6701_GetRawData+0x7c>)
 800c696:	f7f9 facd 	bl	8005c34 <HAL_GPIO_WritePin>

    return rawData >> 2; // 取高14位的角度数据
 800c69a:	887b      	ldrh	r3, [r7, #2]
 800c69c:	089b      	lsrs	r3, r3, #2
 800c69e:	b29b      	uxth	r3, r3
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3708      	adds	r7, #8
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	200003c8 	.word	0x200003c8
 800c6ac:	48000400 	.word	0x48000400

0800c6b0 <MT6701_GetRawAngle>:

// 将传感器原始数据转化为弧度
float MT6701_GetRawAngle(void)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b082      	sub	sp, #8
 800c6b4:	af00      	add	r7, sp, #0
    uint16_t rawData = MT6701_GetRawData();
 800c6b6:	f7ff ffbb 	bl	800c630 <MT6701_GetRawData>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	80fb      	strh	r3, [r7, #6]
    return (float)rawData / 16384.0f * _2PI;
 800c6be:	88fb      	ldrh	r3, [r7, #6]
 800c6c0:	ee07 3a90 	vmov	s15, r3
 800c6c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c6c8:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800c6e4 <MT6701_GetRawAngle+0x34>
 800c6cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c6d0:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800c6e8 <MT6701_GetRawAngle+0x38>
 800c6d4:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800c6d8:	eeb0 0a67 	vmov.f32	s0, s15
 800c6dc:	3708      	adds	r7, #8
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	46800000 	.word	0x46800000
 800c6e8:	40c90fdb 	.word	0x40c90fdb

0800c6ec <delay>:
#include "time_utils.h"

__IO uint32_t m, tms, u, t0;

void delay(uint32_t _ms)
{
 800c6ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c6f0:	b082      	sub	sp, #8
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	6078      	str	r0, [r7, #4]
    t0 = micros();
 800c6f6:	f000 f83b 	bl	800c770 <micros>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	4b11      	ldr	r3, [pc, #68]	@ (800c744 <delay+0x58>)
 800c700:	601a      	str	r2, [r3, #0]
    while (micros() - t0 < _ms * 1000)
 800c702:	e000      	b.n	800c706 <delay+0x1a>
        __NOP();
 800c704:	bf00      	nop
    while (micros() - t0 < _ms * 1000)
 800c706:	f000 f833 	bl	800c770 <micros>
 800c70a:	4602      	mov	r2, r0
 800c70c:	460b      	mov	r3, r1
 800c70e:	490d      	ldr	r1, [pc, #52]	@ (800c744 <delay+0x58>)
 800c710:	6809      	ldr	r1, [r1, #0]
 800c712:	2000      	movs	r0, #0
 800c714:	468a      	mov	sl, r1
 800c716:	4683      	mov	fp, r0
 800c718:	ebb2 040a 	subs.w	r4, r2, sl
 800c71c:	eb63 050b 	sbc.w	r5, r3, fp
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c726:	fb02 f303 	mul.w	r3, r2, r3
 800c72a:	2200      	movs	r2, #0
 800c72c:	4698      	mov	r8, r3
 800c72e:	4691      	mov	r9, r2
 800c730:	4544      	cmp	r4, r8
 800c732:	eb75 0309 	sbcs.w	r3, r5, r9
 800c736:	d3e5      	bcc.n	800c704 <delay+0x18>
}
 800c738:	bf00      	nop
 800c73a:	bf00      	nop
 800c73c:	3708      	adds	r7, #8
 800c73e:	46bd      	mov	sp, r7
 800c740:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c744:	200008f4 	.word	0x200008f4

0800c748 <LL_SYSTICK_IsActiveCounterFlag>:
    while (_us--)
        __NOP();
}

__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag()
{
 800c748:	b480      	push	{r7}
 800c74a:	af00      	add	r7, sp, #0
    return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 800c74c:	4b07      	ldr	r3, [pc, #28]	@ (800c76c <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c758:	bf0c      	ite	eq
 800c75a:	2301      	moveq	r3, #1
 800c75c:	2300      	movne	r3, #0
 800c75e:	b2db      	uxtb	r3, r3
}
 800c760:	4618      	mov	r0, r3
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr
 800c76a:	bf00      	nop
 800c76c:	e000e010 	.word	0xe000e010

0800c770 <micros>:

uint64_t micros()
{
 800c770:	b5b0      	push	{r4, r5, r7, lr}
 800c772:	af00      	add	r7, sp, #0
    /* Ensure COUNTFLAG is reset by reading SysTick control and status register */
    LL_SYSTICK_IsActiveCounterFlag();
 800c774:	f7ff ffe8 	bl	800c748 <LL_SYSTICK_IsActiveCounterFlag>
    m = HAL_GetTick();
 800c778:	f7f5 fe86 	bl	8002488 <HAL_GetTick>
 800c77c:	4603      	mov	r3, r0
 800c77e:	4a1c      	ldr	r2, [pc, #112]	@ (800c7f0 <micros+0x80>)
 800c780:	6013      	str	r3, [r2, #0]
    tms = SysTick->LOAD + 1;
 800c782:	4b1c      	ldr	r3, [pc, #112]	@ (800c7f4 <micros+0x84>)
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	3301      	adds	r3, #1
 800c788:	4a1b      	ldr	r2, [pc, #108]	@ (800c7f8 <micros+0x88>)
 800c78a:	6013      	str	r3, [r2, #0]
    u = tms - SysTick->VAL;
 800c78c:	4b1a      	ldr	r3, [pc, #104]	@ (800c7f8 <micros+0x88>)
 800c78e:	681a      	ldr	r2, [r3, #0]
 800c790:	4b18      	ldr	r3, [pc, #96]	@ (800c7f4 <micros+0x84>)
 800c792:	689b      	ldr	r3, [r3, #8]
 800c794:	1ad3      	subs	r3, r2, r3
 800c796:	4a19      	ldr	r2, [pc, #100]	@ (800c7fc <micros+0x8c>)
 800c798:	6013      	str	r3, [r2, #0]
    if (LL_SYSTICK_IsActiveCounterFlag())
 800c79a:	f7ff ffd5 	bl	800c748 <LL_SYSTICK_IsActiveCounterFlag>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d00b      	beq.n	800c7bc <micros+0x4c>
    {
        m = HAL_GetTick();
 800c7a4:	f7f5 fe70 	bl	8002488 <HAL_GetTick>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	4a11      	ldr	r2, [pc, #68]	@ (800c7f0 <micros+0x80>)
 800c7ac:	6013      	str	r3, [r2, #0]
        u = tms - SysTick->VAL;
 800c7ae:	4b12      	ldr	r3, [pc, #72]	@ (800c7f8 <micros+0x88>)
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	4b10      	ldr	r3, [pc, #64]	@ (800c7f4 <micros+0x84>)
 800c7b4:	689b      	ldr	r3, [r3, #8]
 800c7b6:	1ad3      	subs	r3, r2, r3
 800c7b8:	4a10      	ldr	r2, [pc, #64]	@ (800c7fc <micros+0x8c>)
 800c7ba:	6013      	str	r3, [r2, #0]
    }
    return (m * 1000 + (u * 1000) / tms);
 800c7bc:	4b0c      	ldr	r3, [pc, #48]	@ (800c7f0 <micros+0x80>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c7c4:	fb03 f202 	mul.w	r2, r3, r2
 800c7c8:	4b0c      	ldr	r3, [pc, #48]	@ (800c7fc <micros+0x8c>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800c7d0:	fb03 f101 	mul.w	r1, r3, r1
 800c7d4:	4b08      	ldr	r3, [pc, #32]	@ (800c7f8 <micros+0x88>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	fbb1 f3f3 	udiv	r3, r1, r3
 800c7dc:	4413      	add	r3, r2
 800c7de:	2200      	movs	r2, #0
 800c7e0:	461c      	mov	r4, r3
 800c7e2:	4615      	mov	r5, r2
 800c7e4:	4622      	mov	r2, r4
 800c7e6:	462b      	mov	r3, r5
}
 800c7e8:	4610      	mov	r0, r2
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	bdb0      	pop	{r4, r5, r7, pc}
 800c7ee:	bf00      	nop
 800c7f0:	200008e8 	.word	0x200008e8
 800c7f4:	e000e010 	.word	0xe000e010
 800c7f8:	200008ec 	.word	0x200008ec
 800c7fc:	200008f0 	.word	0x200008f0

0800c800 <userMain>:
float HallTheta = 0;
float HallSpeed = 0;
uint8_t HallReadTemp = 0;
// static bool powerLost;
void userMain(void)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	af00      	add	r7, sp, #0

	//	if (get5MsFlag())
	//	{
	//		keyScan();
	//	}
	if (getOneMsFlag())
 800c804:	f000 f8f0 	bl	800c9e8 <getOneMsFlag>
 800c808:	4603      	mov	r3, r0
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d001      	beq.n	800c812 <userMain+0x12>
	{
		IMU_handle();
 800c80e:	f7ff fc0d 	bl	800c02c <IMU_handle>
	}

	if (get100MsFlag())
 800c812:	f000 f8fd 	bl	800ca10 <get100MsFlag>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d001      	beq.n	800c820 <userMain+0x20>
	{
		appRunning();
 800c81c:	f7ff f9a2 	bl	800bb64 <appRunning>
	}
#if SHOW_WAVE == 0 //&& COMMAMNDER == 0
	// if (get500MsFlag())
	if (getOneSecFlag())
 800c820:	f000 f8ce 	bl	800c9c0 <getOneSecFlag>
 800c824:	4603      	mov	r3, r0
 800c826:	2b00      	cmp	r3, #0
 800c828:	d001      	beq.n	800c82e <userMain+0x2e>
	{
		uartTx();
 800c82a:	f7ff fab5 	bl	800bd98 <uartTx>
	}
#endif
}
 800c82e:	bf00      	nop
 800c830:	bd80      	pop	{r7, pc}
	...

0800c834 <dealPer100us>:


static bool _5msFlag, _10msFlag, _20msFlag, _30msFlag, _100msFlag, _500msFlag, _1s;
static void dealPerMs();
void dealPer100us()
{
 800c834:	b580      	push	{r7, lr}
 800c836:	af00      	add	r7, sp, #0
    static unsigned char cnt;
    if (++cnt >= 10)
 800c838:	4b08      	ldr	r3, [pc, #32]	@ (800c85c <dealPer100us+0x28>)
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	3301      	adds	r3, #1
 800c83e:	b2da      	uxtb	r2, r3
 800c840:	4b06      	ldr	r3, [pc, #24]	@ (800c85c <dealPer100us+0x28>)
 800c842:	701a      	strb	r2, [r3, #0]
 800c844:	4b05      	ldr	r3, [pc, #20]	@ (800c85c <dealPer100us+0x28>)
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	2b09      	cmp	r3, #9
 800c84a:	d904      	bls.n	800c856 <dealPer100us+0x22>
    {
        cnt = 0;
 800c84c:	4b03      	ldr	r3, [pc, #12]	@ (800c85c <dealPer100us+0x28>)
 800c84e:	2200      	movs	r2, #0
 800c850:	701a      	strb	r2, [r3, #0]
        dealPerMs();
 800c852:	f000 f805 	bl	800c860 <dealPerMs>
    }

}
 800c856:	bf00      	nop
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	20000907 	.word	0x20000907

0800c860 <dealPerMs>:

static void dealPerMs()
{
 800c860:	b480      	push	{r7}
 800c862:	af00      	add	r7, sp, #0
    static unsigned char _5msCnt, _30msCnt, _20msCnt, _100msCnt, _10msCnt;
    static uint _500msCnt, _1000msCnt;
    if (++_5msCnt >= 5)
 800c864:	4b45      	ldr	r3, [pc, #276]	@ (800c97c <dealPerMs+0x11c>)
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	3301      	adds	r3, #1
 800c86a:	b2da      	uxtb	r2, r3
 800c86c:	4b43      	ldr	r3, [pc, #268]	@ (800c97c <dealPerMs+0x11c>)
 800c86e:	701a      	strb	r2, [r3, #0]
 800c870:	4b42      	ldr	r3, [pc, #264]	@ (800c97c <dealPerMs+0x11c>)
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	2b04      	cmp	r3, #4
 800c876:	d905      	bls.n	800c884 <dealPerMs+0x24>
    {
        _5msCnt = 0;
 800c878:	4b40      	ldr	r3, [pc, #256]	@ (800c97c <dealPerMs+0x11c>)
 800c87a:	2200      	movs	r2, #0
 800c87c:	701a      	strb	r2, [r3, #0]
        _5msFlag = 1;
 800c87e:	4b40      	ldr	r3, [pc, #256]	@ (800c980 <dealPerMs+0x120>)
 800c880:	2201      	movs	r2, #1
 800c882:	701a      	strb	r2, [r3, #0]
    }

    if (++_10msCnt >= 10)
 800c884:	4b3f      	ldr	r3, [pc, #252]	@ (800c984 <dealPerMs+0x124>)
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	3301      	adds	r3, #1
 800c88a:	b2da      	uxtb	r2, r3
 800c88c:	4b3d      	ldr	r3, [pc, #244]	@ (800c984 <dealPerMs+0x124>)
 800c88e:	701a      	strb	r2, [r3, #0]
 800c890:	4b3c      	ldr	r3, [pc, #240]	@ (800c984 <dealPerMs+0x124>)
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	2b09      	cmp	r3, #9
 800c896:	d905      	bls.n	800c8a4 <dealPerMs+0x44>
    {
        _10msCnt = 0;
 800c898:	4b3a      	ldr	r3, [pc, #232]	@ (800c984 <dealPerMs+0x124>)
 800c89a:	2200      	movs	r2, #0
 800c89c:	701a      	strb	r2, [r3, #0]
        _10msFlag = 1;
 800c89e:	4b3a      	ldr	r3, [pc, #232]	@ (800c988 <dealPerMs+0x128>)
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	701a      	strb	r2, [r3, #0]
    }

    if (++_20msCnt >= 20)
 800c8a4:	4b39      	ldr	r3, [pc, #228]	@ (800c98c <dealPerMs+0x12c>)
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	b2da      	uxtb	r2, r3
 800c8ac:	4b37      	ldr	r3, [pc, #220]	@ (800c98c <dealPerMs+0x12c>)
 800c8ae:	701a      	strb	r2, [r3, #0]
 800c8b0:	4b36      	ldr	r3, [pc, #216]	@ (800c98c <dealPerMs+0x12c>)
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	2b13      	cmp	r3, #19
 800c8b6:	d905      	bls.n	800c8c4 <dealPerMs+0x64>
    {
        _20msCnt = 0;
 800c8b8:	4b34      	ldr	r3, [pc, #208]	@ (800c98c <dealPerMs+0x12c>)
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	701a      	strb	r2, [r3, #0]
        _20msFlag = 1;
 800c8be:	4b34      	ldr	r3, [pc, #208]	@ (800c990 <dealPerMs+0x130>)
 800c8c0:	2201      	movs	r2, #1
 800c8c2:	701a      	strb	r2, [r3, #0]
    }

    if (++_30msCnt >= 30)
 800c8c4:	4b33      	ldr	r3, [pc, #204]	@ (800c994 <dealPerMs+0x134>)
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	b2da      	uxtb	r2, r3
 800c8cc:	4b31      	ldr	r3, [pc, #196]	@ (800c994 <dealPerMs+0x134>)
 800c8ce:	701a      	strb	r2, [r3, #0]
 800c8d0:	4b30      	ldr	r3, [pc, #192]	@ (800c994 <dealPerMs+0x134>)
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	2b1d      	cmp	r3, #29
 800c8d6:	d905      	bls.n	800c8e4 <dealPerMs+0x84>
    {
        _30msCnt = 0;
 800c8d8:	4b2e      	ldr	r3, [pc, #184]	@ (800c994 <dealPerMs+0x134>)
 800c8da:	2200      	movs	r2, #0
 800c8dc:	701a      	strb	r2, [r3, #0]
        _30msFlag = 1;
 800c8de:	4b2e      	ldr	r3, [pc, #184]	@ (800c998 <dealPerMs+0x138>)
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	701a      	strb	r2, [r3, #0]
    }

    if (++_100msCnt >= 100)
 800c8e4:	4b2d      	ldr	r3, [pc, #180]	@ (800c99c <dealPerMs+0x13c>)
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	b2da      	uxtb	r2, r3
 800c8ec:	4b2b      	ldr	r3, [pc, #172]	@ (800c99c <dealPerMs+0x13c>)
 800c8ee:	701a      	strb	r2, [r3, #0]
 800c8f0:	4b2a      	ldr	r3, [pc, #168]	@ (800c99c <dealPerMs+0x13c>)
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	2b63      	cmp	r3, #99	@ 0x63
 800c8f6:	d905      	bls.n	800c904 <dealPerMs+0xa4>
    {
        _100msCnt = 0;
 800c8f8:	4b28      	ldr	r3, [pc, #160]	@ (800c99c <dealPerMs+0x13c>)
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	701a      	strb	r2, [r3, #0]
        _100msFlag = 1;
 800c8fe:	4b28      	ldr	r3, [pc, #160]	@ (800c9a0 <dealPerMs+0x140>)
 800c900:	2201      	movs	r2, #1
 800c902:	701a      	strb	r2, [r3, #0]
    }

    if (++_500msCnt >= 500)
 800c904:	4b27      	ldr	r3, [pc, #156]	@ (800c9a4 <dealPerMs+0x144>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	3301      	adds	r3, #1
 800c90a:	4a26      	ldr	r2, [pc, #152]	@ (800c9a4 <dealPerMs+0x144>)
 800c90c:	6013      	str	r3, [r2, #0]
 800c90e:	4b25      	ldr	r3, [pc, #148]	@ (800c9a4 <dealPerMs+0x144>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800c916:	d305      	bcc.n	800c924 <dealPerMs+0xc4>
    {
        _500msCnt = 0;
 800c918:	4b22      	ldr	r3, [pc, #136]	@ (800c9a4 <dealPerMs+0x144>)
 800c91a:	2200      	movs	r2, #0
 800c91c:	601a      	str	r2, [r3, #0]
        _500msFlag = 1;
 800c91e:	4b22      	ldr	r3, [pc, #136]	@ (800c9a8 <dealPerMs+0x148>)
 800c920:	2201      	movs	r2, #1
 800c922:	701a      	strb	r2, [r3, #0]
    }
    if (++_1000msCnt >= 1000)
 800c924:	4b21      	ldr	r3, [pc, #132]	@ (800c9ac <dealPerMs+0x14c>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	3301      	adds	r3, #1
 800c92a:	4a20      	ldr	r2, [pc, #128]	@ (800c9ac <dealPerMs+0x14c>)
 800c92c:	6013      	str	r3, [r2, #0]
 800c92e:	4b1f      	ldr	r3, [pc, #124]	@ (800c9ac <dealPerMs+0x14c>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c936:	d305      	bcc.n	800c944 <dealPerMs+0xe4>
    {
        _1000msCnt = 0;
 800c938:	4b1c      	ldr	r3, [pc, #112]	@ (800c9ac <dealPerMs+0x14c>)
 800c93a:	2200      	movs	r2, #0
 800c93c:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800c93e:	4b1c      	ldr	r3, [pc, #112]	@ (800c9b0 <dealPerMs+0x150>)
 800c940:	2201      	movs	r2, #1
 800c942:	701a      	strb	r2, [r3, #0]

        cnt = 0;
    }

#else
    frequence = 50;
 800c944:	4b1b      	ldr	r3, [pc, #108]	@ (800c9b4 <dealPerMs+0x154>)
 800c946:	2232      	movs	r2, #50	@ 0x32
 800c948:	701a      	strb	r2, [r3, #0]
            _1s = 1;
        }
    }
#else

    if (++_1msCnt >= 1000)
 800c94a:	4b1b      	ldr	r3, [pc, #108]	@ (800c9b8 <dealPerMs+0x158>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	3301      	adds	r3, #1
 800c950:	4a19      	ldr	r2, [pc, #100]	@ (800c9b8 <dealPerMs+0x158>)
 800c952:	6013      	str	r3, [r2, #0]
 800c954:	4b18      	ldr	r3, [pc, #96]	@ (800c9b8 <dealPerMs+0x158>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c95c:	d305      	bcc.n	800c96a <dealPerMs+0x10a>
    {
        _1msCnt = 0;
 800c95e:	4b16      	ldr	r3, [pc, #88]	@ (800c9b8 <dealPerMs+0x158>)
 800c960:	2200      	movs	r2, #0
 800c962:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800c964:	4b12      	ldr	r3, [pc, #72]	@ (800c9b0 <dealPerMs+0x150>)
 800c966:	2201      	movs	r2, #1
 800c968:	701a      	strb	r2, [r3, #0]
    }
#endif
#if SPEED_UP
    _1s = 1;
#endif
    _1ms = 1;
 800c96a:	4b14      	ldr	r3, [pc, #80]	@ (800c9bc <dealPerMs+0x15c>)
 800c96c:	2201      	movs	r2, #1
 800c96e:	701a      	strb	r2, [r3, #0]




}
 800c970:	bf00      	nop
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop
 800c97c:	20000908 	.word	0x20000908
 800c980:	20000901 	.word	0x20000901
 800c984:	20000909 	.word	0x20000909
 800c988:	20000902 	.word	0x20000902
 800c98c:	2000090a 	.word	0x2000090a
 800c990:	20000903 	.word	0x20000903
 800c994:	2000090b 	.word	0x2000090b
 800c998:	20000904 	.word	0x20000904
 800c99c:	2000090c 	.word	0x2000090c
 800c9a0:	20000905 	.word	0x20000905
 800c9a4:	20000910 	.word	0x20000910
 800c9a8:	20000906 	.word	0x20000906
 800c9ac:	20000914 	.word	0x20000914
 800c9b0:	200008f8 	.word	0x200008f8
 800c9b4:	20000900 	.word	0x20000900
 800c9b8:	200008fc 	.word	0x200008fc
 800c9bc:	200008f9 	.word	0x200008f9

0800c9c0 <getOneSecFlag>:
}



bool getOneSecFlag()
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	af00      	add	r7, sp, #0
    if (_1s)
 800c9c4:	4b07      	ldr	r3, [pc, #28]	@ (800c9e4 <getOneSecFlag+0x24>)
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d004      	beq.n	800c9d6 <getOneSecFlag+0x16>
    {
        _1s = 0;
 800c9cc:	4b05      	ldr	r3, [pc, #20]	@ (800c9e4 <getOneSecFlag+0x24>)
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	701a      	strb	r2, [r3, #0]
        return 1;
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	e000      	b.n	800c9d8 <getOneSecFlag+0x18>
    }
    else
        return 0;
 800c9d6:	2300      	movs	r3, #0
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr
 800c9e2:	bf00      	nop
 800c9e4:	200008f8 	.word	0x200008f8

0800c9e8 <getOneMsFlag>:

bool getOneMsFlag()
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	af00      	add	r7, sp, #0
    if (_1ms)
 800c9ec:	4b07      	ldr	r3, [pc, #28]	@ (800ca0c <getOneMsFlag+0x24>)
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d004      	beq.n	800c9fe <getOneMsFlag+0x16>
    {
        _1ms = 0;
 800c9f4:	4b05      	ldr	r3, [pc, #20]	@ (800ca0c <getOneMsFlag+0x24>)
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	701a      	strb	r2, [r3, #0]
        return 1;
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	e000      	b.n	800ca00 <getOneMsFlag+0x18>
    }
    else
        return 0;
 800c9fe:	2300      	movs	r3, #0
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	46bd      	mov	sp, r7
 800ca04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca08:	4770      	bx	lr
 800ca0a:	bf00      	nop
 800ca0c:	200008f9 	.word	0x200008f9

0800ca10 <get100MsFlag>:
        return 0;
    }
}

bool get100MsFlag()
{
 800ca10:	b480      	push	{r7}
 800ca12:	af00      	add	r7, sp, #0
    if (_100msFlag)
 800ca14:	4b07      	ldr	r3, [pc, #28]	@ (800ca34 <get100MsFlag+0x24>)
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d004      	beq.n	800ca26 <get100MsFlag+0x16>
    {
        _100msFlag = 0;
 800ca1c:	4b05      	ldr	r3, [pc, #20]	@ (800ca34 <get100MsFlag+0x24>)
 800ca1e:	2200      	movs	r2, #0
 800ca20:	701a      	strb	r2, [r3, #0]
        return 1;
 800ca22:	2301      	movs	r3, #1
 800ca24:	e000      	b.n	800ca28 <get100MsFlag+0x18>
    }
    else
    {
        return 0;
 800ca26:	2300      	movs	r3, #0
    }
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr
 800ca32:	bf00      	nop
 800ca34:	20000905 	.word	0x20000905

0800ca38 <atof>:
 800ca38:	2100      	movs	r1, #0
 800ca3a:	f000 be0b 	b.w	800d654 <strtod>

0800ca3e <sulp>:
 800ca3e:	b570      	push	{r4, r5, r6, lr}
 800ca40:	4604      	mov	r4, r0
 800ca42:	460d      	mov	r5, r1
 800ca44:	ec45 4b10 	vmov	d0, r4, r5
 800ca48:	4616      	mov	r6, r2
 800ca4a:	f003 fc7d 	bl	8010348 <__ulp>
 800ca4e:	ec51 0b10 	vmov	r0, r1, d0
 800ca52:	b17e      	cbz	r6, 800ca74 <sulp+0x36>
 800ca54:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ca58:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	dd09      	ble.n	800ca74 <sulp+0x36>
 800ca60:	051b      	lsls	r3, r3, #20
 800ca62:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ca66:	2400      	movs	r4, #0
 800ca68:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ca6c:	4622      	mov	r2, r4
 800ca6e:	462b      	mov	r3, r5
 800ca70:	f7f3 fdea 	bl	8000648 <__aeabi_dmul>
 800ca74:	ec41 0b10 	vmov	d0, r0, r1
 800ca78:	bd70      	pop	{r4, r5, r6, pc}
 800ca7a:	0000      	movs	r0, r0
 800ca7c:	0000      	movs	r0, r0
	...

0800ca80 <_strtod_l>:
 800ca80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca84:	b09f      	sub	sp, #124	@ 0x7c
 800ca86:	460c      	mov	r4, r1
 800ca88:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ca8e:	9005      	str	r0, [sp, #20]
 800ca90:	f04f 0a00 	mov.w	sl, #0
 800ca94:	f04f 0b00 	mov.w	fp, #0
 800ca98:	460a      	mov	r2, r1
 800ca9a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca9c:	7811      	ldrb	r1, [r2, #0]
 800ca9e:	292b      	cmp	r1, #43	@ 0x2b
 800caa0:	d04a      	beq.n	800cb38 <_strtod_l+0xb8>
 800caa2:	d838      	bhi.n	800cb16 <_strtod_l+0x96>
 800caa4:	290d      	cmp	r1, #13
 800caa6:	d832      	bhi.n	800cb0e <_strtod_l+0x8e>
 800caa8:	2908      	cmp	r1, #8
 800caaa:	d832      	bhi.n	800cb12 <_strtod_l+0x92>
 800caac:	2900      	cmp	r1, #0
 800caae:	d03b      	beq.n	800cb28 <_strtod_l+0xa8>
 800cab0:	2200      	movs	r2, #0
 800cab2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cab4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800cab6:	782a      	ldrb	r2, [r5, #0]
 800cab8:	2a30      	cmp	r2, #48	@ 0x30
 800caba:	f040 80b3 	bne.w	800cc24 <_strtod_l+0x1a4>
 800cabe:	786a      	ldrb	r2, [r5, #1]
 800cac0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cac4:	2a58      	cmp	r2, #88	@ 0x58
 800cac6:	d16e      	bne.n	800cba6 <_strtod_l+0x126>
 800cac8:	9302      	str	r3, [sp, #8]
 800caca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cacc:	9301      	str	r3, [sp, #4]
 800cace:	ab1a      	add	r3, sp, #104	@ 0x68
 800cad0:	9300      	str	r3, [sp, #0]
 800cad2:	4a8e      	ldr	r2, [pc, #568]	@ (800cd0c <_strtod_l+0x28c>)
 800cad4:	9805      	ldr	r0, [sp, #20]
 800cad6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cad8:	a919      	add	r1, sp, #100	@ 0x64
 800cada:	f002 fd27 	bl	800f52c <__gethex>
 800cade:	f010 060f 	ands.w	r6, r0, #15
 800cae2:	4604      	mov	r4, r0
 800cae4:	d005      	beq.n	800caf2 <_strtod_l+0x72>
 800cae6:	2e06      	cmp	r6, #6
 800cae8:	d128      	bne.n	800cb3c <_strtod_l+0xbc>
 800caea:	3501      	adds	r5, #1
 800caec:	2300      	movs	r3, #0
 800caee:	9519      	str	r5, [sp, #100]	@ 0x64
 800caf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800caf2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	f040 858e 	bne.w	800d616 <_strtod_l+0xb96>
 800cafa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cafc:	b1cb      	cbz	r3, 800cb32 <_strtod_l+0xb2>
 800cafe:	4652      	mov	r2, sl
 800cb00:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cb04:	ec43 2b10 	vmov	d0, r2, r3
 800cb08:	b01f      	add	sp, #124	@ 0x7c
 800cb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb0e:	2920      	cmp	r1, #32
 800cb10:	d1ce      	bne.n	800cab0 <_strtod_l+0x30>
 800cb12:	3201      	adds	r2, #1
 800cb14:	e7c1      	b.n	800ca9a <_strtod_l+0x1a>
 800cb16:	292d      	cmp	r1, #45	@ 0x2d
 800cb18:	d1ca      	bne.n	800cab0 <_strtod_l+0x30>
 800cb1a:	2101      	movs	r1, #1
 800cb1c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cb1e:	1c51      	adds	r1, r2, #1
 800cb20:	9119      	str	r1, [sp, #100]	@ 0x64
 800cb22:	7852      	ldrb	r2, [r2, #1]
 800cb24:	2a00      	cmp	r2, #0
 800cb26:	d1c5      	bne.n	800cab4 <_strtod_l+0x34>
 800cb28:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cb2a:	9419      	str	r4, [sp, #100]	@ 0x64
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	f040 8570 	bne.w	800d612 <_strtod_l+0xb92>
 800cb32:	4652      	mov	r2, sl
 800cb34:	465b      	mov	r3, fp
 800cb36:	e7e5      	b.n	800cb04 <_strtod_l+0x84>
 800cb38:	2100      	movs	r1, #0
 800cb3a:	e7ef      	b.n	800cb1c <_strtod_l+0x9c>
 800cb3c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cb3e:	b13a      	cbz	r2, 800cb50 <_strtod_l+0xd0>
 800cb40:	2135      	movs	r1, #53	@ 0x35
 800cb42:	a81c      	add	r0, sp, #112	@ 0x70
 800cb44:	f003 fcfa 	bl	801053c <__copybits>
 800cb48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb4a:	9805      	ldr	r0, [sp, #20]
 800cb4c:	f003 f8c8 	bl	800fce0 <_Bfree>
 800cb50:	3e01      	subs	r6, #1
 800cb52:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cb54:	2e04      	cmp	r6, #4
 800cb56:	d806      	bhi.n	800cb66 <_strtod_l+0xe6>
 800cb58:	e8df f006 	tbb	[pc, r6]
 800cb5c:	201d0314 	.word	0x201d0314
 800cb60:	14          	.byte	0x14
 800cb61:	00          	.byte	0x00
 800cb62:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cb66:	05e1      	lsls	r1, r4, #23
 800cb68:	bf48      	it	mi
 800cb6a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cb6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cb72:	0d1b      	lsrs	r3, r3, #20
 800cb74:	051b      	lsls	r3, r3, #20
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d1bb      	bne.n	800caf2 <_strtod_l+0x72>
 800cb7a:	f001 fd8d 	bl	800e698 <__errno>
 800cb7e:	2322      	movs	r3, #34	@ 0x22
 800cb80:	6003      	str	r3, [r0, #0]
 800cb82:	e7b6      	b.n	800caf2 <_strtod_l+0x72>
 800cb84:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cb88:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cb8c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cb90:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cb94:	e7e7      	b.n	800cb66 <_strtod_l+0xe6>
 800cb96:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800cd14 <_strtod_l+0x294>
 800cb9a:	e7e4      	b.n	800cb66 <_strtod_l+0xe6>
 800cb9c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cba0:	f04f 3aff 	mov.w	sl, #4294967295
 800cba4:	e7df      	b.n	800cb66 <_strtod_l+0xe6>
 800cba6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cba8:	1c5a      	adds	r2, r3, #1
 800cbaa:	9219      	str	r2, [sp, #100]	@ 0x64
 800cbac:	785b      	ldrb	r3, [r3, #1]
 800cbae:	2b30      	cmp	r3, #48	@ 0x30
 800cbb0:	d0f9      	beq.n	800cba6 <_strtod_l+0x126>
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d09d      	beq.n	800caf2 <_strtod_l+0x72>
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbbc:	930c      	str	r3, [sp, #48]	@ 0x30
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	9308      	str	r3, [sp, #32]
 800cbc2:	930a      	str	r3, [sp, #40]	@ 0x28
 800cbc4:	461f      	mov	r7, r3
 800cbc6:	220a      	movs	r2, #10
 800cbc8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cbca:	7805      	ldrb	r5, [r0, #0]
 800cbcc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cbd0:	b2d9      	uxtb	r1, r3
 800cbd2:	2909      	cmp	r1, #9
 800cbd4:	d928      	bls.n	800cc28 <_strtod_l+0x1a8>
 800cbd6:	494e      	ldr	r1, [pc, #312]	@ (800cd10 <_strtod_l+0x290>)
 800cbd8:	2201      	movs	r2, #1
 800cbda:	f001 fd01 	bl	800e5e0 <strncmp>
 800cbde:	2800      	cmp	r0, #0
 800cbe0:	d032      	beq.n	800cc48 <_strtod_l+0x1c8>
 800cbe2:	2000      	movs	r0, #0
 800cbe4:	462a      	mov	r2, r5
 800cbe6:	4681      	mov	r9, r0
 800cbe8:	463d      	mov	r5, r7
 800cbea:	4603      	mov	r3, r0
 800cbec:	2a65      	cmp	r2, #101	@ 0x65
 800cbee:	d001      	beq.n	800cbf4 <_strtod_l+0x174>
 800cbf0:	2a45      	cmp	r2, #69	@ 0x45
 800cbf2:	d114      	bne.n	800cc1e <_strtod_l+0x19e>
 800cbf4:	b91d      	cbnz	r5, 800cbfe <_strtod_l+0x17e>
 800cbf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbf8:	4302      	orrs	r2, r0
 800cbfa:	d095      	beq.n	800cb28 <_strtod_l+0xa8>
 800cbfc:	2500      	movs	r5, #0
 800cbfe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cc00:	1c62      	adds	r2, r4, #1
 800cc02:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc04:	7862      	ldrb	r2, [r4, #1]
 800cc06:	2a2b      	cmp	r2, #43	@ 0x2b
 800cc08:	d077      	beq.n	800ccfa <_strtod_l+0x27a>
 800cc0a:	2a2d      	cmp	r2, #45	@ 0x2d
 800cc0c:	d07b      	beq.n	800cd06 <_strtod_l+0x286>
 800cc0e:	f04f 0c00 	mov.w	ip, #0
 800cc12:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cc16:	2909      	cmp	r1, #9
 800cc18:	f240 8082 	bls.w	800cd20 <_strtod_l+0x2a0>
 800cc1c:	9419      	str	r4, [sp, #100]	@ 0x64
 800cc1e:	f04f 0800 	mov.w	r8, #0
 800cc22:	e0a2      	b.n	800cd6a <_strtod_l+0x2ea>
 800cc24:	2300      	movs	r3, #0
 800cc26:	e7c7      	b.n	800cbb8 <_strtod_l+0x138>
 800cc28:	2f08      	cmp	r7, #8
 800cc2a:	bfd5      	itete	le
 800cc2c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800cc2e:	9908      	ldrgt	r1, [sp, #32]
 800cc30:	fb02 3301 	mlale	r3, r2, r1, r3
 800cc34:	fb02 3301 	mlagt	r3, r2, r1, r3
 800cc38:	f100 0001 	add.w	r0, r0, #1
 800cc3c:	bfd4      	ite	le
 800cc3e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800cc40:	9308      	strgt	r3, [sp, #32]
 800cc42:	3701      	adds	r7, #1
 800cc44:	9019      	str	r0, [sp, #100]	@ 0x64
 800cc46:	e7bf      	b.n	800cbc8 <_strtod_l+0x148>
 800cc48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc4a:	1c5a      	adds	r2, r3, #1
 800cc4c:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc4e:	785a      	ldrb	r2, [r3, #1]
 800cc50:	b37f      	cbz	r7, 800ccb2 <_strtod_l+0x232>
 800cc52:	4681      	mov	r9, r0
 800cc54:	463d      	mov	r5, r7
 800cc56:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800cc5a:	2b09      	cmp	r3, #9
 800cc5c:	d912      	bls.n	800cc84 <_strtod_l+0x204>
 800cc5e:	2301      	movs	r3, #1
 800cc60:	e7c4      	b.n	800cbec <_strtod_l+0x16c>
 800cc62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc64:	1c5a      	adds	r2, r3, #1
 800cc66:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc68:	785a      	ldrb	r2, [r3, #1]
 800cc6a:	3001      	adds	r0, #1
 800cc6c:	2a30      	cmp	r2, #48	@ 0x30
 800cc6e:	d0f8      	beq.n	800cc62 <_strtod_l+0x1e2>
 800cc70:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cc74:	2b08      	cmp	r3, #8
 800cc76:	f200 84d3 	bhi.w	800d620 <_strtod_l+0xba0>
 800cc7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc7c:	930c      	str	r3, [sp, #48]	@ 0x30
 800cc7e:	4681      	mov	r9, r0
 800cc80:	2000      	movs	r0, #0
 800cc82:	4605      	mov	r5, r0
 800cc84:	3a30      	subs	r2, #48	@ 0x30
 800cc86:	f100 0301 	add.w	r3, r0, #1
 800cc8a:	d02a      	beq.n	800cce2 <_strtod_l+0x262>
 800cc8c:	4499      	add	r9, r3
 800cc8e:	eb00 0c05 	add.w	ip, r0, r5
 800cc92:	462b      	mov	r3, r5
 800cc94:	210a      	movs	r1, #10
 800cc96:	4563      	cmp	r3, ip
 800cc98:	d10d      	bne.n	800ccb6 <_strtod_l+0x236>
 800cc9a:	1c69      	adds	r1, r5, #1
 800cc9c:	4401      	add	r1, r0
 800cc9e:	4428      	add	r0, r5
 800cca0:	2808      	cmp	r0, #8
 800cca2:	dc16      	bgt.n	800ccd2 <_strtod_l+0x252>
 800cca4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cca6:	230a      	movs	r3, #10
 800cca8:	fb03 2300 	mla	r3, r3, r0, r2
 800ccac:	930a      	str	r3, [sp, #40]	@ 0x28
 800ccae:	2300      	movs	r3, #0
 800ccb0:	e018      	b.n	800cce4 <_strtod_l+0x264>
 800ccb2:	4638      	mov	r0, r7
 800ccb4:	e7da      	b.n	800cc6c <_strtod_l+0x1ec>
 800ccb6:	2b08      	cmp	r3, #8
 800ccb8:	f103 0301 	add.w	r3, r3, #1
 800ccbc:	dc03      	bgt.n	800ccc6 <_strtod_l+0x246>
 800ccbe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ccc0:	434e      	muls	r6, r1
 800ccc2:	960a      	str	r6, [sp, #40]	@ 0x28
 800ccc4:	e7e7      	b.n	800cc96 <_strtod_l+0x216>
 800ccc6:	2b10      	cmp	r3, #16
 800ccc8:	bfde      	ittt	le
 800ccca:	9e08      	ldrle	r6, [sp, #32]
 800cccc:	434e      	mulle	r6, r1
 800ccce:	9608      	strle	r6, [sp, #32]
 800ccd0:	e7e1      	b.n	800cc96 <_strtod_l+0x216>
 800ccd2:	280f      	cmp	r0, #15
 800ccd4:	dceb      	bgt.n	800ccae <_strtod_l+0x22e>
 800ccd6:	9808      	ldr	r0, [sp, #32]
 800ccd8:	230a      	movs	r3, #10
 800ccda:	fb03 2300 	mla	r3, r3, r0, r2
 800ccde:	9308      	str	r3, [sp, #32]
 800cce0:	e7e5      	b.n	800ccae <_strtod_l+0x22e>
 800cce2:	4629      	mov	r1, r5
 800cce4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cce6:	1c50      	adds	r0, r2, #1
 800cce8:	9019      	str	r0, [sp, #100]	@ 0x64
 800ccea:	7852      	ldrb	r2, [r2, #1]
 800ccec:	4618      	mov	r0, r3
 800ccee:	460d      	mov	r5, r1
 800ccf0:	e7b1      	b.n	800cc56 <_strtod_l+0x1d6>
 800ccf2:	f04f 0900 	mov.w	r9, #0
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	e77d      	b.n	800cbf6 <_strtod_l+0x176>
 800ccfa:	f04f 0c00 	mov.w	ip, #0
 800ccfe:	1ca2      	adds	r2, r4, #2
 800cd00:	9219      	str	r2, [sp, #100]	@ 0x64
 800cd02:	78a2      	ldrb	r2, [r4, #2]
 800cd04:	e785      	b.n	800cc12 <_strtod_l+0x192>
 800cd06:	f04f 0c01 	mov.w	ip, #1
 800cd0a:	e7f8      	b.n	800ccfe <_strtod_l+0x27e>
 800cd0c:	080118a0 	.word	0x080118a0
 800cd10:	08011888 	.word	0x08011888
 800cd14:	7ff00000 	.word	0x7ff00000
 800cd18:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd1a:	1c51      	adds	r1, r2, #1
 800cd1c:	9119      	str	r1, [sp, #100]	@ 0x64
 800cd1e:	7852      	ldrb	r2, [r2, #1]
 800cd20:	2a30      	cmp	r2, #48	@ 0x30
 800cd22:	d0f9      	beq.n	800cd18 <_strtod_l+0x298>
 800cd24:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cd28:	2908      	cmp	r1, #8
 800cd2a:	f63f af78 	bhi.w	800cc1e <_strtod_l+0x19e>
 800cd2e:	3a30      	subs	r2, #48	@ 0x30
 800cd30:	920e      	str	r2, [sp, #56]	@ 0x38
 800cd32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd34:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cd36:	f04f 080a 	mov.w	r8, #10
 800cd3a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd3c:	1c56      	adds	r6, r2, #1
 800cd3e:	9619      	str	r6, [sp, #100]	@ 0x64
 800cd40:	7852      	ldrb	r2, [r2, #1]
 800cd42:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cd46:	f1be 0f09 	cmp.w	lr, #9
 800cd4a:	d939      	bls.n	800cdc0 <_strtod_l+0x340>
 800cd4c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cd4e:	1a76      	subs	r6, r6, r1
 800cd50:	2e08      	cmp	r6, #8
 800cd52:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cd56:	dc03      	bgt.n	800cd60 <_strtod_l+0x2e0>
 800cd58:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cd5a:	4588      	cmp	r8, r1
 800cd5c:	bfa8      	it	ge
 800cd5e:	4688      	movge	r8, r1
 800cd60:	f1bc 0f00 	cmp.w	ip, #0
 800cd64:	d001      	beq.n	800cd6a <_strtod_l+0x2ea>
 800cd66:	f1c8 0800 	rsb	r8, r8, #0
 800cd6a:	2d00      	cmp	r5, #0
 800cd6c:	d14e      	bne.n	800ce0c <_strtod_l+0x38c>
 800cd6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd70:	4308      	orrs	r0, r1
 800cd72:	f47f aebe 	bne.w	800caf2 <_strtod_l+0x72>
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	f47f aed6 	bne.w	800cb28 <_strtod_l+0xa8>
 800cd7c:	2a69      	cmp	r2, #105	@ 0x69
 800cd7e:	d028      	beq.n	800cdd2 <_strtod_l+0x352>
 800cd80:	dc25      	bgt.n	800cdce <_strtod_l+0x34e>
 800cd82:	2a49      	cmp	r2, #73	@ 0x49
 800cd84:	d025      	beq.n	800cdd2 <_strtod_l+0x352>
 800cd86:	2a4e      	cmp	r2, #78	@ 0x4e
 800cd88:	f47f aece 	bne.w	800cb28 <_strtod_l+0xa8>
 800cd8c:	499b      	ldr	r1, [pc, #620]	@ (800cffc <_strtod_l+0x57c>)
 800cd8e:	a819      	add	r0, sp, #100	@ 0x64
 800cd90:	f002 fdee 	bl	800f970 <__match>
 800cd94:	2800      	cmp	r0, #0
 800cd96:	f43f aec7 	beq.w	800cb28 <_strtod_l+0xa8>
 800cd9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	2b28      	cmp	r3, #40	@ 0x28
 800cda0:	d12e      	bne.n	800ce00 <_strtod_l+0x380>
 800cda2:	4997      	ldr	r1, [pc, #604]	@ (800d000 <_strtod_l+0x580>)
 800cda4:	aa1c      	add	r2, sp, #112	@ 0x70
 800cda6:	a819      	add	r0, sp, #100	@ 0x64
 800cda8:	f002 fdf6 	bl	800f998 <__hexnan>
 800cdac:	2805      	cmp	r0, #5
 800cdae:	d127      	bne.n	800ce00 <_strtod_l+0x380>
 800cdb0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cdb2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cdb6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cdba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cdbe:	e698      	b.n	800caf2 <_strtod_l+0x72>
 800cdc0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cdc2:	fb08 2101 	mla	r1, r8, r1, r2
 800cdc6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cdca:	920e      	str	r2, [sp, #56]	@ 0x38
 800cdcc:	e7b5      	b.n	800cd3a <_strtod_l+0x2ba>
 800cdce:	2a6e      	cmp	r2, #110	@ 0x6e
 800cdd0:	e7da      	b.n	800cd88 <_strtod_l+0x308>
 800cdd2:	498c      	ldr	r1, [pc, #560]	@ (800d004 <_strtod_l+0x584>)
 800cdd4:	a819      	add	r0, sp, #100	@ 0x64
 800cdd6:	f002 fdcb 	bl	800f970 <__match>
 800cdda:	2800      	cmp	r0, #0
 800cddc:	f43f aea4 	beq.w	800cb28 <_strtod_l+0xa8>
 800cde0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cde2:	4989      	ldr	r1, [pc, #548]	@ (800d008 <_strtod_l+0x588>)
 800cde4:	3b01      	subs	r3, #1
 800cde6:	a819      	add	r0, sp, #100	@ 0x64
 800cde8:	9319      	str	r3, [sp, #100]	@ 0x64
 800cdea:	f002 fdc1 	bl	800f970 <__match>
 800cdee:	b910      	cbnz	r0, 800cdf6 <_strtod_l+0x376>
 800cdf0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	9319      	str	r3, [sp, #100]	@ 0x64
 800cdf6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d018 <_strtod_l+0x598>
 800cdfa:	f04f 0a00 	mov.w	sl, #0
 800cdfe:	e678      	b.n	800caf2 <_strtod_l+0x72>
 800ce00:	4882      	ldr	r0, [pc, #520]	@ (800d00c <_strtod_l+0x58c>)
 800ce02:	f001 fc85 	bl	800e710 <nan>
 800ce06:	ec5b ab10 	vmov	sl, fp, d0
 800ce0a:	e672      	b.n	800caf2 <_strtod_l+0x72>
 800ce0c:	eba8 0309 	sub.w	r3, r8, r9
 800ce10:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ce12:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce14:	2f00      	cmp	r7, #0
 800ce16:	bf08      	it	eq
 800ce18:	462f      	moveq	r7, r5
 800ce1a:	2d10      	cmp	r5, #16
 800ce1c:	462c      	mov	r4, r5
 800ce1e:	bfa8      	it	ge
 800ce20:	2410      	movge	r4, #16
 800ce22:	f7f3 fb97 	bl	8000554 <__aeabi_ui2d>
 800ce26:	2d09      	cmp	r5, #9
 800ce28:	4682      	mov	sl, r0
 800ce2a:	468b      	mov	fp, r1
 800ce2c:	dc13      	bgt.n	800ce56 <_strtod_l+0x3d6>
 800ce2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	f43f ae5e 	beq.w	800caf2 <_strtod_l+0x72>
 800ce36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce38:	dd78      	ble.n	800cf2c <_strtod_l+0x4ac>
 800ce3a:	2b16      	cmp	r3, #22
 800ce3c:	dc5f      	bgt.n	800cefe <_strtod_l+0x47e>
 800ce3e:	4974      	ldr	r1, [pc, #464]	@ (800d010 <_strtod_l+0x590>)
 800ce40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce48:	4652      	mov	r2, sl
 800ce4a:	465b      	mov	r3, fp
 800ce4c:	f7f3 fbfc 	bl	8000648 <__aeabi_dmul>
 800ce50:	4682      	mov	sl, r0
 800ce52:	468b      	mov	fp, r1
 800ce54:	e64d      	b.n	800caf2 <_strtod_l+0x72>
 800ce56:	4b6e      	ldr	r3, [pc, #440]	@ (800d010 <_strtod_l+0x590>)
 800ce58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce5c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ce60:	f7f3 fbf2 	bl	8000648 <__aeabi_dmul>
 800ce64:	4682      	mov	sl, r0
 800ce66:	9808      	ldr	r0, [sp, #32]
 800ce68:	468b      	mov	fp, r1
 800ce6a:	f7f3 fb73 	bl	8000554 <__aeabi_ui2d>
 800ce6e:	4602      	mov	r2, r0
 800ce70:	460b      	mov	r3, r1
 800ce72:	4650      	mov	r0, sl
 800ce74:	4659      	mov	r1, fp
 800ce76:	f7f3 fa31 	bl	80002dc <__adddf3>
 800ce7a:	2d0f      	cmp	r5, #15
 800ce7c:	4682      	mov	sl, r0
 800ce7e:	468b      	mov	fp, r1
 800ce80:	ddd5      	ble.n	800ce2e <_strtod_l+0x3ae>
 800ce82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce84:	1b2c      	subs	r4, r5, r4
 800ce86:	441c      	add	r4, r3
 800ce88:	2c00      	cmp	r4, #0
 800ce8a:	f340 8096 	ble.w	800cfba <_strtod_l+0x53a>
 800ce8e:	f014 030f 	ands.w	r3, r4, #15
 800ce92:	d00a      	beq.n	800ceaa <_strtod_l+0x42a>
 800ce94:	495e      	ldr	r1, [pc, #376]	@ (800d010 <_strtod_l+0x590>)
 800ce96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce9a:	4652      	mov	r2, sl
 800ce9c:	465b      	mov	r3, fp
 800ce9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cea2:	f7f3 fbd1 	bl	8000648 <__aeabi_dmul>
 800cea6:	4682      	mov	sl, r0
 800cea8:	468b      	mov	fp, r1
 800ceaa:	f034 040f 	bics.w	r4, r4, #15
 800ceae:	d073      	beq.n	800cf98 <_strtod_l+0x518>
 800ceb0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ceb4:	dd48      	ble.n	800cf48 <_strtod_l+0x4c8>
 800ceb6:	2400      	movs	r4, #0
 800ceb8:	46a0      	mov	r8, r4
 800ceba:	940a      	str	r4, [sp, #40]	@ 0x28
 800cebc:	46a1      	mov	r9, r4
 800cebe:	9a05      	ldr	r2, [sp, #20]
 800cec0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d018 <_strtod_l+0x598>
 800cec4:	2322      	movs	r3, #34	@ 0x22
 800cec6:	6013      	str	r3, [r2, #0]
 800cec8:	f04f 0a00 	mov.w	sl, #0
 800cecc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cece:	2b00      	cmp	r3, #0
 800ced0:	f43f ae0f 	beq.w	800caf2 <_strtod_l+0x72>
 800ced4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ced6:	9805      	ldr	r0, [sp, #20]
 800ced8:	f002 ff02 	bl	800fce0 <_Bfree>
 800cedc:	9805      	ldr	r0, [sp, #20]
 800cede:	4649      	mov	r1, r9
 800cee0:	f002 fefe 	bl	800fce0 <_Bfree>
 800cee4:	9805      	ldr	r0, [sp, #20]
 800cee6:	4641      	mov	r1, r8
 800cee8:	f002 fefa 	bl	800fce0 <_Bfree>
 800ceec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ceee:	9805      	ldr	r0, [sp, #20]
 800cef0:	f002 fef6 	bl	800fce0 <_Bfree>
 800cef4:	9805      	ldr	r0, [sp, #20]
 800cef6:	4621      	mov	r1, r4
 800cef8:	f002 fef2 	bl	800fce0 <_Bfree>
 800cefc:	e5f9      	b.n	800caf2 <_strtod_l+0x72>
 800cefe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf00:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cf04:	4293      	cmp	r3, r2
 800cf06:	dbbc      	blt.n	800ce82 <_strtod_l+0x402>
 800cf08:	4c41      	ldr	r4, [pc, #260]	@ (800d010 <_strtod_l+0x590>)
 800cf0a:	f1c5 050f 	rsb	r5, r5, #15
 800cf0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cf12:	4652      	mov	r2, sl
 800cf14:	465b      	mov	r3, fp
 800cf16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf1a:	f7f3 fb95 	bl	8000648 <__aeabi_dmul>
 800cf1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf20:	1b5d      	subs	r5, r3, r5
 800cf22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cf26:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cf2a:	e78f      	b.n	800ce4c <_strtod_l+0x3cc>
 800cf2c:	3316      	adds	r3, #22
 800cf2e:	dba8      	blt.n	800ce82 <_strtod_l+0x402>
 800cf30:	4b37      	ldr	r3, [pc, #220]	@ (800d010 <_strtod_l+0x590>)
 800cf32:	eba9 0808 	sub.w	r8, r9, r8
 800cf36:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cf3a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cf3e:	4650      	mov	r0, sl
 800cf40:	4659      	mov	r1, fp
 800cf42:	f7f3 fcab 	bl	800089c <__aeabi_ddiv>
 800cf46:	e783      	b.n	800ce50 <_strtod_l+0x3d0>
 800cf48:	4b32      	ldr	r3, [pc, #200]	@ (800d014 <_strtod_l+0x594>)
 800cf4a:	9308      	str	r3, [sp, #32]
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	1124      	asrs	r4, r4, #4
 800cf50:	4650      	mov	r0, sl
 800cf52:	4659      	mov	r1, fp
 800cf54:	461e      	mov	r6, r3
 800cf56:	2c01      	cmp	r4, #1
 800cf58:	dc21      	bgt.n	800cf9e <_strtod_l+0x51e>
 800cf5a:	b10b      	cbz	r3, 800cf60 <_strtod_l+0x4e0>
 800cf5c:	4682      	mov	sl, r0
 800cf5e:	468b      	mov	fp, r1
 800cf60:	492c      	ldr	r1, [pc, #176]	@ (800d014 <_strtod_l+0x594>)
 800cf62:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cf66:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cf6a:	4652      	mov	r2, sl
 800cf6c:	465b      	mov	r3, fp
 800cf6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf72:	f7f3 fb69 	bl	8000648 <__aeabi_dmul>
 800cf76:	4b28      	ldr	r3, [pc, #160]	@ (800d018 <_strtod_l+0x598>)
 800cf78:	460a      	mov	r2, r1
 800cf7a:	400b      	ands	r3, r1
 800cf7c:	4927      	ldr	r1, [pc, #156]	@ (800d01c <_strtod_l+0x59c>)
 800cf7e:	428b      	cmp	r3, r1
 800cf80:	4682      	mov	sl, r0
 800cf82:	d898      	bhi.n	800ceb6 <_strtod_l+0x436>
 800cf84:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cf88:	428b      	cmp	r3, r1
 800cf8a:	bf86      	itte	hi
 800cf8c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d020 <_strtod_l+0x5a0>
 800cf90:	f04f 3aff 	movhi.w	sl, #4294967295
 800cf94:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cf98:	2300      	movs	r3, #0
 800cf9a:	9308      	str	r3, [sp, #32]
 800cf9c:	e07a      	b.n	800d094 <_strtod_l+0x614>
 800cf9e:	07e2      	lsls	r2, r4, #31
 800cfa0:	d505      	bpl.n	800cfae <_strtod_l+0x52e>
 800cfa2:	9b08      	ldr	r3, [sp, #32]
 800cfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa8:	f7f3 fb4e 	bl	8000648 <__aeabi_dmul>
 800cfac:	2301      	movs	r3, #1
 800cfae:	9a08      	ldr	r2, [sp, #32]
 800cfb0:	3208      	adds	r2, #8
 800cfb2:	3601      	adds	r6, #1
 800cfb4:	1064      	asrs	r4, r4, #1
 800cfb6:	9208      	str	r2, [sp, #32]
 800cfb8:	e7cd      	b.n	800cf56 <_strtod_l+0x4d6>
 800cfba:	d0ed      	beq.n	800cf98 <_strtod_l+0x518>
 800cfbc:	4264      	negs	r4, r4
 800cfbe:	f014 020f 	ands.w	r2, r4, #15
 800cfc2:	d00a      	beq.n	800cfda <_strtod_l+0x55a>
 800cfc4:	4b12      	ldr	r3, [pc, #72]	@ (800d010 <_strtod_l+0x590>)
 800cfc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfca:	4650      	mov	r0, sl
 800cfcc:	4659      	mov	r1, fp
 800cfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd2:	f7f3 fc63 	bl	800089c <__aeabi_ddiv>
 800cfd6:	4682      	mov	sl, r0
 800cfd8:	468b      	mov	fp, r1
 800cfda:	1124      	asrs	r4, r4, #4
 800cfdc:	d0dc      	beq.n	800cf98 <_strtod_l+0x518>
 800cfde:	2c1f      	cmp	r4, #31
 800cfe0:	dd20      	ble.n	800d024 <_strtod_l+0x5a4>
 800cfe2:	2400      	movs	r4, #0
 800cfe4:	46a0      	mov	r8, r4
 800cfe6:	940a      	str	r4, [sp, #40]	@ 0x28
 800cfe8:	46a1      	mov	r9, r4
 800cfea:	9a05      	ldr	r2, [sp, #20]
 800cfec:	2322      	movs	r3, #34	@ 0x22
 800cfee:	f04f 0a00 	mov.w	sl, #0
 800cff2:	f04f 0b00 	mov.w	fp, #0
 800cff6:	6013      	str	r3, [r2, #0]
 800cff8:	e768      	b.n	800cecc <_strtod_l+0x44c>
 800cffa:	bf00      	nop
 800cffc:	080118ed 	.word	0x080118ed
 800d000:	0801188c 	.word	0x0801188c
 800d004:	080118e5 	.word	0x080118e5
 800d008:	08011924 	.word	0x08011924
 800d00c:	08011cb5 	.word	0x08011cb5
 800d010:	08011aa0 	.word	0x08011aa0
 800d014:	08011a78 	.word	0x08011a78
 800d018:	7ff00000 	.word	0x7ff00000
 800d01c:	7ca00000 	.word	0x7ca00000
 800d020:	7fefffff 	.word	0x7fefffff
 800d024:	f014 0310 	ands.w	r3, r4, #16
 800d028:	bf18      	it	ne
 800d02a:	236a      	movne	r3, #106	@ 0x6a
 800d02c:	4ea9      	ldr	r6, [pc, #676]	@ (800d2d4 <_strtod_l+0x854>)
 800d02e:	9308      	str	r3, [sp, #32]
 800d030:	4650      	mov	r0, sl
 800d032:	4659      	mov	r1, fp
 800d034:	2300      	movs	r3, #0
 800d036:	07e2      	lsls	r2, r4, #31
 800d038:	d504      	bpl.n	800d044 <_strtod_l+0x5c4>
 800d03a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d03e:	f7f3 fb03 	bl	8000648 <__aeabi_dmul>
 800d042:	2301      	movs	r3, #1
 800d044:	1064      	asrs	r4, r4, #1
 800d046:	f106 0608 	add.w	r6, r6, #8
 800d04a:	d1f4      	bne.n	800d036 <_strtod_l+0x5b6>
 800d04c:	b10b      	cbz	r3, 800d052 <_strtod_l+0x5d2>
 800d04e:	4682      	mov	sl, r0
 800d050:	468b      	mov	fp, r1
 800d052:	9b08      	ldr	r3, [sp, #32]
 800d054:	b1b3      	cbz	r3, 800d084 <_strtod_l+0x604>
 800d056:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d05a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d05e:	2b00      	cmp	r3, #0
 800d060:	4659      	mov	r1, fp
 800d062:	dd0f      	ble.n	800d084 <_strtod_l+0x604>
 800d064:	2b1f      	cmp	r3, #31
 800d066:	dd55      	ble.n	800d114 <_strtod_l+0x694>
 800d068:	2b34      	cmp	r3, #52	@ 0x34
 800d06a:	bfde      	ittt	le
 800d06c:	f04f 33ff 	movle.w	r3, #4294967295
 800d070:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d074:	4093      	lslle	r3, r2
 800d076:	f04f 0a00 	mov.w	sl, #0
 800d07a:	bfcc      	ite	gt
 800d07c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d080:	ea03 0b01 	andle.w	fp, r3, r1
 800d084:	2200      	movs	r2, #0
 800d086:	2300      	movs	r3, #0
 800d088:	4650      	mov	r0, sl
 800d08a:	4659      	mov	r1, fp
 800d08c:	f7f3 fd44 	bl	8000b18 <__aeabi_dcmpeq>
 800d090:	2800      	cmp	r0, #0
 800d092:	d1a6      	bne.n	800cfe2 <_strtod_l+0x562>
 800d094:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d096:	9300      	str	r3, [sp, #0]
 800d098:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d09a:	9805      	ldr	r0, [sp, #20]
 800d09c:	462b      	mov	r3, r5
 800d09e:	463a      	mov	r2, r7
 800d0a0:	f002 fe86 	bl	800fdb0 <__s2b>
 800d0a4:	900a      	str	r0, [sp, #40]	@ 0x28
 800d0a6:	2800      	cmp	r0, #0
 800d0a8:	f43f af05 	beq.w	800ceb6 <_strtod_l+0x436>
 800d0ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d0ae:	2a00      	cmp	r2, #0
 800d0b0:	eba9 0308 	sub.w	r3, r9, r8
 800d0b4:	bfa8      	it	ge
 800d0b6:	2300      	movge	r3, #0
 800d0b8:	9312      	str	r3, [sp, #72]	@ 0x48
 800d0ba:	2400      	movs	r4, #0
 800d0bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d0c0:	9316      	str	r3, [sp, #88]	@ 0x58
 800d0c2:	46a0      	mov	r8, r4
 800d0c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0c6:	9805      	ldr	r0, [sp, #20]
 800d0c8:	6859      	ldr	r1, [r3, #4]
 800d0ca:	f002 fdc9 	bl	800fc60 <_Balloc>
 800d0ce:	4681      	mov	r9, r0
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	f43f aef4 	beq.w	800cebe <_strtod_l+0x43e>
 800d0d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0d8:	691a      	ldr	r2, [r3, #16]
 800d0da:	3202      	adds	r2, #2
 800d0dc:	f103 010c 	add.w	r1, r3, #12
 800d0e0:	0092      	lsls	r2, r2, #2
 800d0e2:	300c      	adds	r0, #12
 800d0e4:	f001 fb05 	bl	800e6f2 <memcpy>
 800d0e8:	ec4b ab10 	vmov	d0, sl, fp
 800d0ec:	9805      	ldr	r0, [sp, #20]
 800d0ee:	aa1c      	add	r2, sp, #112	@ 0x70
 800d0f0:	a91b      	add	r1, sp, #108	@ 0x6c
 800d0f2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d0f6:	f003 f997 	bl	8010428 <__d2b>
 800d0fa:	901a      	str	r0, [sp, #104]	@ 0x68
 800d0fc:	2800      	cmp	r0, #0
 800d0fe:	f43f aede 	beq.w	800cebe <_strtod_l+0x43e>
 800d102:	9805      	ldr	r0, [sp, #20]
 800d104:	2101      	movs	r1, #1
 800d106:	f002 fee9 	bl	800fedc <__i2b>
 800d10a:	4680      	mov	r8, r0
 800d10c:	b948      	cbnz	r0, 800d122 <_strtod_l+0x6a2>
 800d10e:	f04f 0800 	mov.w	r8, #0
 800d112:	e6d4      	b.n	800cebe <_strtod_l+0x43e>
 800d114:	f04f 32ff 	mov.w	r2, #4294967295
 800d118:	fa02 f303 	lsl.w	r3, r2, r3
 800d11c:	ea03 0a0a 	and.w	sl, r3, sl
 800d120:	e7b0      	b.n	800d084 <_strtod_l+0x604>
 800d122:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d124:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d126:	2d00      	cmp	r5, #0
 800d128:	bfab      	itete	ge
 800d12a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d12c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d12e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d130:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d132:	bfac      	ite	ge
 800d134:	18ef      	addge	r7, r5, r3
 800d136:	1b5e      	sublt	r6, r3, r5
 800d138:	9b08      	ldr	r3, [sp, #32]
 800d13a:	1aed      	subs	r5, r5, r3
 800d13c:	4415      	add	r5, r2
 800d13e:	4b66      	ldr	r3, [pc, #408]	@ (800d2d8 <_strtod_l+0x858>)
 800d140:	3d01      	subs	r5, #1
 800d142:	429d      	cmp	r5, r3
 800d144:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d148:	da50      	bge.n	800d1ec <_strtod_l+0x76c>
 800d14a:	1b5b      	subs	r3, r3, r5
 800d14c:	2b1f      	cmp	r3, #31
 800d14e:	eba2 0203 	sub.w	r2, r2, r3
 800d152:	f04f 0101 	mov.w	r1, #1
 800d156:	dc3d      	bgt.n	800d1d4 <_strtod_l+0x754>
 800d158:	fa01 f303 	lsl.w	r3, r1, r3
 800d15c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d15e:	2300      	movs	r3, #0
 800d160:	9310      	str	r3, [sp, #64]	@ 0x40
 800d162:	18bd      	adds	r5, r7, r2
 800d164:	9b08      	ldr	r3, [sp, #32]
 800d166:	42af      	cmp	r7, r5
 800d168:	4416      	add	r6, r2
 800d16a:	441e      	add	r6, r3
 800d16c:	463b      	mov	r3, r7
 800d16e:	bfa8      	it	ge
 800d170:	462b      	movge	r3, r5
 800d172:	42b3      	cmp	r3, r6
 800d174:	bfa8      	it	ge
 800d176:	4633      	movge	r3, r6
 800d178:	2b00      	cmp	r3, #0
 800d17a:	bfc2      	ittt	gt
 800d17c:	1aed      	subgt	r5, r5, r3
 800d17e:	1af6      	subgt	r6, r6, r3
 800d180:	1aff      	subgt	r7, r7, r3
 800d182:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d184:	2b00      	cmp	r3, #0
 800d186:	dd16      	ble.n	800d1b6 <_strtod_l+0x736>
 800d188:	4641      	mov	r1, r8
 800d18a:	9805      	ldr	r0, [sp, #20]
 800d18c:	461a      	mov	r2, r3
 800d18e:	f002 ff65 	bl	801005c <__pow5mult>
 800d192:	4680      	mov	r8, r0
 800d194:	2800      	cmp	r0, #0
 800d196:	d0ba      	beq.n	800d10e <_strtod_l+0x68e>
 800d198:	4601      	mov	r1, r0
 800d19a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d19c:	9805      	ldr	r0, [sp, #20]
 800d19e:	f002 feb3 	bl	800ff08 <__multiply>
 800d1a2:	900e      	str	r0, [sp, #56]	@ 0x38
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	f43f ae8a 	beq.w	800cebe <_strtod_l+0x43e>
 800d1aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d1ac:	9805      	ldr	r0, [sp, #20]
 800d1ae:	f002 fd97 	bl	800fce0 <_Bfree>
 800d1b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800d1b6:	2d00      	cmp	r5, #0
 800d1b8:	dc1d      	bgt.n	800d1f6 <_strtod_l+0x776>
 800d1ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	dd23      	ble.n	800d208 <_strtod_l+0x788>
 800d1c0:	4649      	mov	r1, r9
 800d1c2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d1c4:	9805      	ldr	r0, [sp, #20]
 800d1c6:	f002 ff49 	bl	801005c <__pow5mult>
 800d1ca:	4681      	mov	r9, r0
 800d1cc:	b9e0      	cbnz	r0, 800d208 <_strtod_l+0x788>
 800d1ce:	f04f 0900 	mov.w	r9, #0
 800d1d2:	e674      	b.n	800cebe <_strtod_l+0x43e>
 800d1d4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d1d8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d1dc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d1e0:	35e2      	adds	r5, #226	@ 0xe2
 800d1e2:	fa01 f305 	lsl.w	r3, r1, r5
 800d1e6:	9310      	str	r3, [sp, #64]	@ 0x40
 800d1e8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d1ea:	e7ba      	b.n	800d162 <_strtod_l+0x6e2>
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	9310      	str	r3, [sp, #64]	@ 0x40
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d1f4:	e7b5      	b.n	800d162 <_strtod_l+0x6e2>
 800d1f6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d1f8:	9805      	ldr	r0, [sp, #20]
 800d1fa:	462a      	mov	r2, r5
 800d1fc:	f002 ff88 	bl	8010110 <__lshift>
 800d200:	901a      	str	r0, [sp, #104]	@ 0x68
 800d202:	2800      	cmp	r0, #0
 800d204:	d1d9      	bne.n	800d1ba <_strtod_l+0x73a>
 800d206:	e65a      	b.n	800cebe <_strtod_l+0x43e>
 800d208:	2e00      	cmp	r6, #0
 800d20a:	dd07      	ble.n	800d21c <_strtod_l+0x79c>
 800d20c:	4649      	mov	r1, r9
 800d20e:	9805      	ldr	r0, [sp, #20]
 800d210:	4632      	mov	r2, r6
 800d212:	f002 ff7d 	bl	8010110 <__lshift>
 800d216:	4681      	mov	r9, r0
 800d218:	2800      	cmp	r0, #0
 800d21a:	d0d8      	beq.n	800d1ce <_strtod_l+0x74e>
 800d21c:	2f00      	cmp	r7, #0
 800d21e:	dd08      	ble.n	800d232 <_strtod_l+0x7b2>
 800d220:	4641      	mov	r1, r8
 800d222:	9805      	ldr	r0, [sp, #20]
 800d224:	463a      	mov	r2, r7
 800d226:	f002 ff73 	bl	8010110 <__lshift>
 800d22a:	4680      	mov	r8, r0
 800d22c:	2800      	cmp	r0, #0
 800d22e:	f43f ae46 	beq.w	800cebe <_strtod_l+0x43e>
 800d232:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d234:	9805      	ldr	r0, [sp, #20]
 800d236:	464a      	mov	r2, r9
 800d238:	f002 fff2 	bl	8010220 <__mdiff>
 800d23c:	4604      	mov	r4, r0
 800d23e:	2800      	cmp	r0, #0
 800d240:	f43f ae3d 	beq.w	800cebe <_strtod_l+0x43e>
 800d244:	68c3      	ldr	r3, [r0, #12]
 800d246:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d248:	2300      	movs	r3, #0
 800d24a:	60c3      	str	r3, [r0, #12]
 800d24c:	4641      	mov	r1, r8
 800d24e:	f002 ffcb 	bl	80101e8 <__mcmp>
 800d252:	2800      	cmp	r0, #0
 800d254:	da46      	bge.n	800d2e4 <_strtod_l+0x864>
 800d256:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d258:	ea53 030a 	orrs.w	r3, r3, sl
 800d25c:	d16c      	bne.n	800d338 <_strtod_l+0x8b8>
 800d25e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d262:	2b00      	cmp	r3, #0
 800d264:	d168      	bne.n	800d338 <_strtod_l+0x8b8>
 800d266:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d26a:	0d1b      	lsrs	r3, r3, #20
 800d26c:	051b      	lsls	r3, r3, #20
 800d26e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d272:	d961      	bls.n	800d338 <_strtod_l+0x8b8>
 800d274:	6963      	ldr	r3, [r4, #20]
 800d276:	b913      	cbnz	r3, 800d27e <_strtod_l+0x7fe>
 800d278:	6923      	ldr	r3, [r4, #16]
 800d27a:	2b01      	cmp	r3, #1
 800d27c:	dd5c      	ble.n	800d338 <_strtod_l+0x8b8>
 800d27e:	4621      	mov	r1, r4
 800d280:	2201      	movs	r2, #1
 800d282:	9805      	ldr	r0, [sp, #20]
 800d284:	f002 ff44 	bl	8010110 <__lshift>
 800d288:	4641      	mov	r1, r8
 800d28a:	4604      	mov	r4, r0
 800d28c:	f002 ffac 	bl	80101e8 <__mcmp>
 800d290:	2800      	cmp	r0, #0
 800d292:	dd51      	ble.n	800d338 <_strtod_l+0x8b8>
 800d294:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d298:	9a08      	ldr	r2, [sp, #32]
 800d29a:	0d1b      	lsrs	r3, r3, #20
 800d29c:	051b      	lsls	r3, r3, #20
 800d29e:	2a00      	cmp	r2, #0
 800d2a0:	d06b      	beq.n	800d37a <_strtod_l+0x8fa>
 800d2a2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d2a6:	d868      	bhi.n	800d37a <_strtod_l+0x8fa>
 800d2a8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d2ac:	f67f ae9d 	bls.w	800cfea <_strtod_l+0x56a>
 800d2b0:	4b0a      	ldr	r3, [pc, #40]	@ (800d2dc <_strtod_l+0x85c>)
 800d2b2:	4650      	mov	r0, sl
 800d2b4:	4659      	mov	r1, fp
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	f7f3 f9c6 	bl	8000648 <__aeabi_dmul>
 800d2bc:	4b08      	ldr	r3, [pc, #32]	@ (800d2e0 <_strtod_l+0x860>)
 800d2be:	400b      	ands	r3, r1
 800d2c0:	4682      	mov	sl, r0
 800d2c2:	468b      	mov	fp, r1
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	f47f ae05 	bne.w	800ced4 <_strtod_l+0x454>
 800d2ca:	9a05      	ldr	r2, [sp, #20]
 800d2cc:	2322      	movs	r3, #34	@ 0x22
 800d2ce:	6013      	str	r3, [r2, #0]
 800d2d0:	e600      	b.n	800ced4 <_strtod_l+0x454>
 800d2d2:	bf00      	nop
 800d2d4:	080118b8 	.word	0x080118b8
 800d2d8:	fffffc02 	.word	0xfffffc02
 800d2dc:	39500000 	.word	0x39500000
 800d2e0:	7ff00000 	.word	0x7ff00000
 800d2e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d2e8:	d165      	bne.n	800d3b6 <_strtod_l+0x936>
 800d2ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d2ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d2f0:	b35a      	cbz	r2, 800d34a <_strtod_l+0x8ca>
 800d2f2:	4a9f      	ldr	r2, [pc, #636]	@ (800d570 <_strtod_l+0xaf0>)
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	d12b      	bne.n	800d350 <_strtod_l+0x8d0>
 800d2f8:	9b08      	ldr	r3, [sp, #32]
 800d2fa:	4651      	mov	r1, sl
 800d2fc:	b303      	cbz	r3, 800d340 <_strtod_l+0x8c0>
 800d2fe:	4b9d      	ldr	r3, [pc, #628]	@ (800d574 <_strtod_l+0xaf4>)
 800d300:	465a      	mov	r2, fp
 800d302:	4013      	ands	r3, r2
 800d304:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d308:	f04f 32ff 	mov.w	r2, #4294967295
 800d30c:	d81b      	bhi.n	800d346 <_strtod_l+0x8c6>
 800d30e:	0d1b      	lsrs	r3, r3, #20
 800d310:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d314:	fa02 f303 	lsl.w	r3, r2, r3
 800d318:	4299      	cmp	r1, r3
 800d31a:	d119      	bne.n	800d350 <_strtod_l+0x8d0>
 800d31c:	4b96      	ldr	r3, [pc, #600]	@ (800d578 <_strtod_l+0xaf8>)
 800d31e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d320:	429a      	cmp	r2, r3
 800d322:	d102      	bne.n	800d32a <_strtod_l+0x8aa>
 800d324:	3101      	adds	r1, #1
 800d326:	f43f adca 	beq.w	800cebe <_strtod_l+0x43e>
 800d32a:	4b92      	ldr	r3, [pc, #584]	@ (800d574 <_strtod_l+0xaf4>)
 800d32c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d32e:	401a      	ands	r2, r3
 800d330:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d334:	f04f 0a00 	mov.w	sl, #0
 800d338:	9b08      	ldr	r3, [sp, #32]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d1b8      	bne.n	800d2b0 <_strtod_l+0x830>
 800d33e:	e5c9      	b.n	800ced4 <_strtod_l+0x454>
 800d340:	f04f 33ff 	mov.w	r3, #4294967295
 800d344:	e7e8      	b.n	800d318 <_strtod_l+0x898>
 800d346:	4613      	mov	r3, r2
 800d348:	e7e6      	b.n	800d318 <_strtod_l+0x898>
 800d34a:	ea53 030a 	orrs.w	r3, r3, sl
 800d34e:	d0a1      	beq.n	800d294 <_strtod_l+0x814>
 800d350:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d352:	b1db      	cbz	r3, 800d38c <_strtod_l+0x90c>
 800d354:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d356:	4213      	tst	r3, r2
 800d358:	d0ee      	beq.n	800d338 <_strtod_l+0x8b8>
 800d35a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d35c:	9a08      	ldr	r2, [sp, #32]
 800d35e:	4650      	mov	r0, sl
 800d360:	4659      	mov	r1, fp
 800d362:	b1bb      	cbz	r3, 800d394 <_strtod_l+0x914>
 800d364:	f7ff fb6b 	bl	800ca3e <sulp>
 800d368:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d36c:	ec53 2b10 	vmov	r2, r3, d0
 800d370:	f7f2 ffb4 	bl	80002dc <__adddf3>
 800d374:	4682      	mov	sl, r0
 800d376:	468b      	mov	fp, r1
 800d378:	e7de      	b.n	800d338 <_strtod_l+0x8b8>
 800d37a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d37e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d382:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d386:	f04f 3aff 	mov.w	sl, #4294967295
 800d38a:	e7d5      	b.n	800d338 <_strtod_l+0x8b8>
 800d38c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d38e:	ea13 0f0a 	tst.w	r3, sl
 800d392:	e7e1      	b.n	800d358 <_strtod_l+0x8d8>
 800d394:	f7ff fb53 	bl	800ca3e <sulp>
 800d398:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d39c:	ec53 2b10 	vmov	r2, r3, d0
 800d3a0:	f7f2 ff9a 	bl	80002d8 <__aeabi_dsub>
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	4682      	mov	sl, r0
 800d3aa:	468b      	mov	fp, r1
 800d3ac:	f7f3 fbb4 	bl	8000b18 <__aeabi_dcmpeq>
 800d3b0:	2800      	cmp	r0, #0
 800d3b2:	d0c1      	beq.n	800d338 <_strtod_l+0x8b8>
 800d3b4:	e619      	b.n	800cfea <_strtod_l+0x56a>
 800d3b6:	4641      	mov	r1, r8
 800d3b8:	4620      	mov	r0, r4
 800d3ba:	f003 f88d 	bl	80104d8 <__ratio>
 800d3be:	ec57 6b10 	vmov	r6, r7, d0
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d3c8:	4630      	mov	r0, r6
 800d3ca:	4639      	mov	r1, r7
 800d3cc:	f7f3 fbb8 	bl	8000b40 <__aeabi_dcmple>
 800d3d0:	2800      	cmp	r0, #0
 800d3d2:	d06f      	beq.n	800d4b4 <_strtod_l+0xa34>
 800d3d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d17a      	bne.n	800d4d0 <_strtod_l+0xa50>
 800d3da:	f1ba 0f00 	cmp.w	sl, #0
 800d3de:	d158      	bne.n	800d492 <_strtod_l+0xa12>
 800d3e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d15a      	bne.n	800d4a0 <_strtod_l+0xa20>
 800d3ea:	4b64      	ldr	r3, [pc, #400]	@ (800d57c <_strtod_l+0xafc>)
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	4630      	mov	r0, r6
 800d3f0:	4639      	mov	r1, r7
 800d3f2:	f7f3 fb9b 	bl	8000b2c <__aeabi_dcmplt>
 800d3f6:	2800      	cmp	r0, #0
 800d3f8:	d159      	bne.n	800d4ae <_strtod_l+0xa2e>
 800d3fa:	4630      	mov	r0, r6
 800d3fc:	4639      	mov	r1, r7
 800d3fe:	4b60      	ldr	r3, [pc, #384]	@ (800d580 <_strtod_l+0xb00>)
 800d400:	2200      	movs	r2, #0
 800d402:	f7f3 f921 	bl	8000648 <__aeabi_dmul>
 800d406:	4606      	mov	r6, r0
 800d408:	460f      	mov	r7, r1
 800d40a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d40e:	9606      	str	r6, [sp, #24]
 800d410:	9307      	str	r3, [sp, #28]
 800d412:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d416:	4d57      	ldr	r5, [pc, #348]	@ (800d574 <_strtod_l+0xaf4>)
 800d418:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d41c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d41e:	401d      	ands	r5, r3
 800d420:	4b58      	ldr	r3, [pc, #352]	@ (800d584 <_strtod_l+0xb04>)
 800d422:	429d      	cmp	r5, r3
 800d424:	f040 80b2 	bne.w	800d58c <_strtod_l+0xb0c>
 800d428:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d42a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d42e:	ec4b ab10 	vmov	d0, sl, fp
 800d432:	f002 ff89 	bl	8010348 <__ulp>
 800d436:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d43a:	ec51 0b10 	vmov	r0, r1, d0
 800d43e:	f7f3 f903 	bl	8000648 <__aeabi_dmul>
 800d442:	4652      	mov	r2, sl
 800d444:	465b      	mov	r3, fp
 800d446:	f7f2 ff49 	bl	80002dc <__adddf3>
 800d44a:	460b      	mov	r3, r1
 800d44c:	4949      	ldr	r1, [pc, #292]	@ (800d574 <_strtod_l+0xaf4>)
 800d44e:	4a4e      	ldr	r2, [pc, #312]	@ (800d588 <_strtod_l+0xb08>)
 800d450:	4019      	ands	r1, r3
 800d452:	4291      	cmp	r1, r2
 800d454:	4682      	mov	sl, r0
 800d456:	d942      	bls.n	800d4de <_strtod_l+0xa5e>
 800d458:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d45a:	4b47      	ldr	r3, [pc, #284]	@ (800d578 <_strtod_l+0xaf8>)
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d103      	bne.n	800d468 <_strtod_l+0x9e8>
 800d460:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d462:	3301      	adds	r3, #1
 800d464:	f43f ad2b 	beq.w	800cebe <_strtod_l+0x43e>
 800d468:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d578 <_strtod_l+0xaf8>
 800d46c:	f04f 3aff 	mov.w	sl, #4294967295
 800d470:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d472:	9805      	ldr	r0, [sp, #20]
 800d474:	f002 fc34 	bl	800fce0 <_Bfree>
 800d478:	9805      	ldr	r0, [sp, #20]
 800d47a:	4649      	mov	r1, r9
 800d47c:	f002 fc30 	bl	800fce0 <_Bfree>
 800d480:	9805      	ldr	r0, [sp, #20]
 800d482:	4641      	mov	r1, r8
 800d484:	f002 fc2c 	bl	800fce0 <_Bfree>
 800d488:	9805      	ldr	r0, [sp, #20]
 800d48a:	4621      	mov	r1, r4
 800d48c:	f002 fc28 	bl	800fce0 <_Bfree>
 800d490:	e618      	b.n	800d0c4 <_strtod_l+0x644>
 800d492:	f1ba 0f01 	cmp.w	sl, #1
 800d496:	d103      	bne.n	800d4a0 <_strtod_l+0xa20>
 800d498:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	f43f ada5 	beq.w	800cfea <_strtod_l+0x56a>
 800d4a0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d550 <_strtod_l+0xad0>
 800d4a4:	4f35      	ldr	r7, [pc, #212]	@ (800d57c <_strtod_l+0xafc>)
 800d4a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d4aa:	2600      	movs	r6, #0
 800d4ac:	e7b1      	b.n	800d412 <_strtod_l+0x992>
 800d4ae:	4f34      	ldr	r7, [pc, #208]	@ (800d580 <_strtod_l+0xb00>)
 800d4b0:	2600      	movs	r6, #0
 800d4b2:	e7aa      	b.n	800d40a <_strtod_l+0x98a>
 800d4b4:	4b32      	ldr	r3, [pc, #200]	@ (800d580 <_strtod_l+0xb00>)
 800d4b6:	4630      	mov	r0, r6
 800d4b8:	4639      	mov	r1, r7
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	f7f3 f8c4 	bl	8000648 <__aeabi_dmul>
 800d4c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4c2:	4606      	mov	r6, r0
 800d4c4:	460f      	mov	r7, r1
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d09f      	beq.n	800d40a <_strtod_l+0x98a>
 800d4ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d4ce:	e7a0      	b.n	800d412 <_strtod_l+0x992>
 800d4d0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d558 <_strtod_l+0xad8>
 800d4d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d4d8:	ec57 6b17 	vmov	r6, r7, d7
 800d4dc:	e799      	b.n	800d412 <_strtod_l+0x992>
 800d4de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d4e2:	9b08      	ldr	r3, [sp, #32]
 800d4e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d1c1      	bne.n	800d470 <_strtod_l+0x9f0>
 800d4ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d4f0:	0d1b      	lsrs	r3, r3, #20
 800d4f2:	051b      	lsls	r3, r3, #20
 800d4f4:	429d      	cmp	r5, r3
 800d4f6:	d1bb      	bne.n	800d470 <_strtod_l+0x9f0>
 800d4f8:	4630      	mov	r0, r6
 800d4fa:	4639      	mov	r1, r7
 800d4fc:	f7f3 fc04 	bl	8000d08 <__aeabi_d2lz>
 800d500:	f7f3 f874 	bl	80005ec <__aeabi_l2d>
 800d504:	4602      	mov	r2, r0
 800d506:	460b      	mov	r3, r1
 800d508:	4630      	mov	r0, r6
 800d50a:	4639      	mov	r1, r7
 800d50c:	f7f2 fee4 	bl	80002d8 <__aeabi_dsub>
 800d510:	460b      	mov	r3, r1
 800d512:	4602      	mov	r2, r0
 800d514:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d518:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d51c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d51e:	ea46 060a 	orr.w	r6, r6, sl
 800d522:	431e      	orrs	r6, r3
 800d524:	d06f      	beq.n	800d606 <_strtod_l+0xb86>
 800d526:	a30e      	add	r3, pc, #56	@ (adr r3, 800d560 <_strtod_l+0xae0>)
 800d528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52c:	f7f3 fafe 	bl	8000b2c <__aeabi_dcmplt>
 800d530:	2800      	cmp	r0, #0
 800d532:	f47f accf 	bne.w	800ced4 <_strtod_l+0x454>
 800d536:	a30c      	add	r3, pc, #48	@ (adr r3, 800d568 <_strtod_l+0xae8>)
 800d538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d540:	f7f3 fb12 	bl	8000b68 <__aeabi_dcmpgt>
 800d544:	2800      	cmp	r0, #0
 800d546:	d093      	beq.n	800d470 <_strtod_l+0x9f0>
 800d548:	e4c4      	b.n	800ced4 <_strtod_l+0x454>
 800d54a:	bf00      	nop
 800d54c:	f3af 8000 	nop.w
 800d550:	00000000 	.word	0x00000000
 800d554:	bff00000 	.word	0xbff00000
 800d558:	00000000 	.word	0x00000000
 800d55c:	3ff00000 	.word	0x3ff00000
 800d560:	94a03595 	.word	0x94a03595
 800d564:	3fdfffff 	.word	0x3fdfffff
 800d568:	35afe535 	.word	0x35afe535
 800d56c:	3fe00000 	.word	0x3fe00000
 800d570:	000fffff 	.word	0x000fffff
 800d574:	7ff00000 	.word	0x7ff00000
 800d578:	7fefffff 	.word	0x7fefffff
 800d57c:	3ff00000 	.word	0x3ff00000
 800d580:	3fe00000 	.word	0x3fe00000
 800d584:	7fe00000 	.word	0x7fe00000
 800d588:	7c9fffff 	.word	0x7c9fffff
 800d58c:	9b08      	ldr	r3, [sp, #32]
 800d58e:	b323      	cbz	r3, 800d5da <_strtod_l+0xb5a>
 800d590:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d594:	d821      	bhi.n	800d5da <_strtod_l+0xb5a>
 800d596:	a328      	add	r3, pc, #160	@ (adr r3, 800d638 <_strtod_l+0xbb8>)
 800d598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59c:	4630      	mov	r0, r6
 800d59e:	4639      	mov	r1, r7
 800d5a0:	f7f3 face 	bl	8000b40 <__aeabi_dcmple>
 800d5a4:	b1a0      	cbz	r0, 800d5d0 <_strtod_l+0xb50>
 800d5a6:	4639      	mov	r1, r7
 800d5a8:	4630      	mov	r0, r6
 800d5aa:	f7f3 fb25 	bl	8000bf8 <__aeabi_d2uiz>
 800d5ae:	2801      	cmp	r0, #1
 800d5b0:	bf38      	it	cc
 800d5b2:	2001      	movcc	r0, #1
 800d5b4:	f7f2 ffce 	bl	8000554 <__aeabi_ui2d>
 800d5b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5ba:	4606      	mov	r6, r0
 800d5bc:	460f      	mov	r7, r1
 800d5be:	b9fb      	cbnz	r3, 800d600 <_strtod_l+0xb80>
 800d5c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d5c4:	9014      	str	r0, [sp, #80]	@ 0x50
 800d5c6:	9315      	str	r3, [sp, #84]	@ 0x54
 800d5c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d5cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d5d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d5d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d5d6:	1b5b      	subs	r3, r3, r5
 800d5d8:	9311      	str	r3, [sp, #68]	@ 0x44
 800d5da:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d5de:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d5e2:	f002 feb1 	bl	8010348 <__ulp>
 800d5e6:	4650      	mov	r0, sl
 800d5e8:	ec53 2b10 	vmov	r2, r3, d0
 800d5ec:	4659      	mov	r1, fp
 800d5ee:	f7f3 f82b 	bl	8000648 <__aeabi_dmul>
 800d5f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d5f6:	f7f2 fe71 	bl	80002dc <__adddf3>
 800d5fa:	4682      	mov	sl, r0
 800d5fc:	468b      	mov	fp, r1
 800d5fe:	e770      	b.n	800d4e2 <_strtod_l+0xa62>
 800d600:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d604:	e7e0      	b.n	800d5c8 <_strtod_l+0xb48>
 800d606:	a30e      	add	r3, pc, #56	@ (adr r3, 800d640 <_strtod_l+0xbc0>)
 800d608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60c:	f7f3 fa8e 	bl	8000b2c <__aeabi_dcmplt>
 800d610:	e798      	b.n	800d544 <_strtod_l+0xac4>
 800d612:	2300      	movs	r3, #0
 800d614:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d616:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d618:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d61a:	6013      	str	r3, [r2, #0]
 800d61c:	f7ff ba6d 	b.w	800cafa <_strtod_l+0x7a>
 800d620:	2a65      	cmp	r2, #101	@ 0x65
 800d622:	f43f ab66 	beq.w	800ccf2 <_strtod_l+0x272>
 800d626:	2a45      	cmp	r2, #69	@ 0x45
 800d628:	f43f ab63 	beq.w	800ccf2 <_strtod_l+0x272>
 800d62c:	2301      	movs	r3, #1
 800d62e:	f7ff bb9e 	b.w	800cd6e <_strtod_l+0x2ee>
 800d632:	bf00      	nop
 800d634:	f3af 8000 	nop.w
 800d638:	ffc00000 	.word	0xffc00000
 800d63c:	41dfffff 	.word	0x41dfffff
 800d640:	94a03595 	.word	0x94a03595
 800d644:	3fcfffff 	.word	0x3fcfffff

0800d648 <_strtod_r>:
 800d648:	4b01      	ldr	r3, [pc, #4]	@ (800d650 <_strtod_r+0x8>)
 800d64a:	f7ff ba19 	b.w	800ca80 <_strtod_l>
 800d64e:	bf00      	nop
 800d650:	2000009c 	.word	0x2000009c

0800d654 <strtod>:
 800d654:	460a      	mov	r2, r1
 800d656:	4601      	mov	r1, r0
 800d658:	4802      	ldr	r0, [pc, #8]	@ (800d664 <strtod+0x10>)
 800d65a:	4b03      	ldr	r3, [pc, #12]	@ (800d668 <strtod+0x14>)
 800d65c:	6800      	ldr	r0, [r0, #0]
 800d65e:	f7ff ba0f 	b.w	800ca80 <_strtod_l>
 800d662:	bf00      	nop
 800d664:	20000208 	.word	0x20000208
 800d668:	2000009c 	.word	0x2000009c

0800d66c <__cvt>:
 800d66c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d670:	ec57 6b10 	vmov	r6, r7, d0
 800d674:	2f00      	cmp	r7, #0
 800d676:	460c      	mov	r4, r1
 800d678:	4619      	mov	r1, r3
 800d67a:	463b      	mov	r3, r7
 800d67c:	bfbb      	ittet	lt
 800d67e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d682:	461f      	movlt	r7, r3
 800d684:	2300      	movge	r3, #0
 800d686:	232d      	movlt	r3, #45	@ 0x2d
 800d688:	700b      	strb	r3, [r1, #0]
 800d68a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d68c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d690:	4691      	mov	r9, r2
 800d692:	f023 0820 	bic.w	r8, r3, #32
 800d696:	bfbc      	itt	lt
 800d698:	4632      	movlt	r2, r6
 800d69a:	4616      	movlt	r6, r2
 800d69c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d6a0:	d005      	beq.n	800d6ae <__cvt+0x42>
 800d6a2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d6a6:	d100      	bne.n	800d6aa <__cvt+0x3e>
 800d6a8:	3401      	adds	r4, #1
 800d6aa:	2102      	movs	r1, #2
 800d6ac:	e000      	b.n	800d6b0 <__cvt+0x44>
 800d6ae:	2103      	movs	r1, #3
 800d6b0:	ab03      	add	r3, sp, #12
 800d6b2:	9301      	str	r3, [sp, #4]
 800d6b4:	ab02      	add	r3, sp, #8
 800d6b6:	9300      	str	r3, [sp, #0]
 800d6b8:	ec47 6b10 	vmov	d0, r6, r7
 800d6bc:	4653      	mov	r3, sl
 800d6be:	4622      	mov	r2, r4
 800d6c0:	f001 f8be 	bl	800e840 <_dtoa_r>
 800d6c4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d6c8:	4605      	mov	r5, r0
 800d6ca:	d119      	bne.n	800d700 <__cvt+0x94>
 800d6cc:	f019 0f01 	tst.w	r9, #1
 800d6d0:	d00e      	beq.n	800d6f0 <__cvt+0x84>
 800d6d2:	eb00 0904 	add.w	r9, r0, r4
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	2300      	movs	r3, #0
 800d6da:	4630      	mov	r0, r6
 800d6dc:	4639      	mov	r1, r7
 800d6de:	f7f3 fa1b 	bl	8000b18 <__aeabi_dcmpeq>
 800d6e2:	b108      	cbz	r0, 800d6e8 <__cvt+0x7c>
 800d6e4:	f8cd 900c 	str.w	r9, [sp, #12]
 800d6e8:	2230      	movs	r2, #48	@ 0x30
 800d6ea:	9b03      	ldr	r3, [sp, #12]
 800d6ec:	454b      	cmp	r3, r9
 800d6ee:	d31e      	bcc.n	800d72e <__cvt+0xc2>
 800d6f0:	9b03      	ldr	r3, [sp, #12]
 800d6f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d6f4:	1b5b      	subs	r3, r3, r5
 800d6f6:	4628      	mov	r0, r5
 800d6f8:	6013      	str	r3, [r2, #0]
 800d6fa:	b004      	add	sp, #16
 800d6fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d700:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d704:	eb00 0904 	add.w	r9, r0, r4
 800d708:	d1e5      	bne.n	800d6d6 <__cvt+0x6a>
 800d70a:	7803      	ldrb	r3, [r0, #0]
 800d70c:	2b30      	cmp	r3, #48	@ 0x30
 800d70e:	d10a      	bne.n	800d726 <__cvt+0xba>
 800d710:	2200      	movs	r2, #0
 800d712:	2300      	movs	r3, #0
 800d714:	4630      	mov	r0, r6
 800d716:	4639      	mov	r1, r7
 800d718:	f7f3 f9fe 	bl	8000b18 <__aeabi_dcmpeq>
 800d71c:	b918      	cbnz	r0, 800d726 <__cvt+0xba>
 800d71e:	f1c4 0401 	rsb	r4, r4, #1
 800d722:	f8ca 4000 	str.w	r4, [sl]
 800d726:	f8da 3000 	ldr.w	r3, [sl]
 800d72a:	4499      	add	r9, r3
 800d72c:	e7d3      	b.n	800d6d6 <__cvt+0x6a>
 800d72e:	1c59      	adds	r1, r3, #1
 800d730:	9103      	str	r1, [sp, #12]
 800d732:	701a      	strb	r2, [r3, #0]
 800d734:	e7d9      	b.n	800d6ea <__cvt+0x7e>

0800d736 <__exponent>:
 800d736:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d738:	2900      	cmp	r1, #0
 800d73a:	bfba      	itte	lt
 800d73c:	4249      	neglt	r1, r1
 800d73e:	232d      	movlt	r3, #45	@ 0x2d
 800d740:	232b      	movge	r3, #43	@ 0x2b
 800d742:	2909      	cmp	r1, #9
 800d744:	7002      	strb	r2, [r0, #0]
 800d746:	7043      	strb	r3, [r0, #1]
 800d748:	dd29      	ble.n	800d79e <__exponent+0x68>
 800d74a:	f10d 0307 	add.w	r3, sp, #7
 800d74e:	461d      	mov	r5, r3
 800d750:	270a      	movs	r7, #10
 800d752:	461a      	mov	r2, r3
 800d754:	fbb1 f6f7 	udiv	r6, r1, r7
 800d758:	fb07 1416 	mls	r4, r7, r6, r1
 800d75c:	3430      	adds	r4, #48	@ 0x30
 800d75e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d762:	460c      	mov	r4, r1
 800d764:	2c63      	cmp	r4, #99	@ 0x63
 800d766:	f103 33ff 	add.w	r3, r3, #4294967295
 800d76a:	4631      	mov	r1, r6
 800d76c:	dcf1      	bgt.n	800d752 <__exponent+0x1c>
 800d76e:	3130      	adds	r1, #48	@ 0x30
 800d770:	1e94      	subs	r4, r2, #2
 800d772:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d776:	1c41      	adds	r1, r0, #1
 800d778:	4623      	mov	r3, r4
 800d77a:	42ab      	cmp	r3, r5
 800d77c:	d30a      	bcc.n	800d794 <__exponent+0x5e>
 800d77e:	f10d 0309 	add.w	r3, sp, #9
 800d782:	1a9b      	subs	r3, r3, r2
 800d784:	42ac      	cmp	r4, r5
 800d786:	bf88      	it	hi
 800d788:	2300      	movhi	r3, #0
 800d78a:	3302      	adds	r3, #2
 800d78c:	4403      	add	r3, r0
 800d78e:	1a18      	subs	r0, r3, r0
 800d790:	b003      	add	sp, #12
 800d792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d794:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d798:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d79c:	e7ed      	b.n	800d77a <__exponent+0x44>
 800d79e:	2330      	movs	r3, #48	@ 0x30
 800d7a0:	3130      	adds	r1, #48	@ 0x30
 800d7a2:	7083      	strb	r3, [r0, #2]
 800d7a4:	70c1      	strb	r1, [r0, #3]
 800d7a6:	1d03      	adds	r3, r0, #4
 800d7a8:	e7f1      	b.n	800d78e <__exponent+0x58>
	...

0800d7ac <_printf_float>:
 800d7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b0:	b08d      	sub	sp, #52	@ 0x34
 800d7b2:	460c      	mov	r4, r1
 800d7b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d7b8:	4616      	mov	r6, r2
 800d7ba:	461f      	mov	r7, r3
 800d7bc:	4605      	mov	r5, r0
 800d7be:	f000 ff21 	bl	800e604 <_localeconv_r>
 800d7c2:	6803      	ldr	r3, [r0, #0]
 800d7c4:	9304      	str	r3, [sp, #16]
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7f2 fd7a 	bl	80002c0 <strlen>
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800d7d0:	f8d8 3000 	ldr.w	r3, [r8]
 800d7d4:	9005      	str	r0, [sp, #20]
 800d7d6:	3307      	adds	r3, #7
 800d7d8:	f023 0307 	bic.w	r3, r3, #7
 800d7dc:	f103 0208 	add.w	r2, r3, #8
 800d7e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d7e4:	f8d4 b000 	ldr.w	fp, [r4]
 800d7e8:	f8c8 2000 	str.w	r2, [r8]
 800d7ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d7f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d7f4:	9307      	str	r3, [sp, #28]
 800d7f6:	f8cd 8018 	str.w	r8, [sp, #24]
 800d7fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d7fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d802:	4b9c      	ldr	r3, [pc, #624]	@ (800da74 <_printf_float+0x2c8>)
 800d804:	f04f 32ff 	mov.w	r2, #4294967295
 800d808:	f7f3 f9b8 	bl	8000b7c <__aeabi_dcmpun>
 800d80c:	bb70      	cbnz	r0, 800d86c <_printf_float+0xc0>
 800d80e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d812:	4b98      	ldr	r3, [pc, #608]	@ (800da74 <_printf_float+0x2c8>)
 800d814:	f04f 32ff 	mov.w	r2, #4294967295
 800d818:	f7f3 f992 	bl	8000b40 <__aeabi_dcmple>
 800d81c:	bb30      	cbnz	r0, 800d86c <_printf_float+0xc0>
 800d81e:	2200      	movs	r2, #0
 800d820:	2300      	movs	r3, #0
 800d822:	4640      	mov	r0, r8
 800d824:	4649      	mov	r1, r9
 800d826:	f7f3 f981 	bl	8000b2c <__aeabi_dcmplt>
 800d82a:	b110      	cbz	r0, 800d832 <_printf_float+0x86>
 800d82c:	232d      	movs	r3, #45	@ 0x2d
 800d82e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d832:	4a91      	ldr	r2, [pc, #580]	@ (800da78 <_printf_float+0x2cc>)
 800d834:	4b91      	ldr	r3, [pc, #580]	@ (800da7c <_printf_float+0x2d0>)
 800d836:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d83a:	bf94      	ite	ls
 800d83c:	4690      	movls	r8, r2
 800d83e:	4698      	movhi	r8, r3
 800d840:	2303      	movs	r3, #3
 800d842:	6123      	str	r3, [r4, #16]
 800d844:	f02b 0304 	bic.w	r3, fp, #4
 800d848:	6023      	str	r3, [r4, #0]
 800d84a:	f04f 0900 	mov.w	r9, #0
 800d84e:	9700      	str	r7, [sp, #0]
 800d850:	4633      	mov	r3, r6
 800d852:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d854:	4621      	mov	r1, r4
 800d856:	4628      	mov	r0, r5
 800d858:	f000 f9d2 	bl	800dc00 <_printf_common>
 800d85c:	3001      	adds	r0, #1
 800d85e:	f040 808d 	bne.w	800d97c <_printf_float+0x1d0>
 800d862:	f04f 30ff 	mov.w	r0, #4294967295
 800d866:	b00d      	add	sp, #52	@ 0x34
 800d868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d86c:	4642      	mov	r2, r8
 800d86e:	464b      	mov	r3, r9
 800d870:	4640      	mov	r0, r8
 800d872:	4649      	mov	r1, r9
 800d874:	f7f3 f982 	bl	8000b7c <__aeabi_dcmpun>
 800d878:	b140      	cbz	r0, 800d88c <_printf_float+0xe0>
 800d87a:	464b      	mov	r3, r9
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	bfbc      	itt	lt
 800d880:	232d      	movlt	r3, #45	@ 0x2d
 800d882:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d886:	4a7e      	ldr	r2, [pc, #504]	@ (800da80 <_printf_float+0x2d4>)
 800d888:	4b7e      	ldr	r3, [pc, #504]	@ (800da84 <_printf_float+0x2d8>)
 800d88a:	e7d4      	b.n	800d836 <_printf_float+0x8a>
 800d88c:	6863      	ldr	r3, [r4, #4]
 800d88e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d892:	9206      	str	r2, [sp, #24]
 800d894:	1c5a      	adds	r2, r3, #1
 800d896:	d13b      	bne.n	800d910 <_printf_float+0x164>
 800d898:	2306      	movs	r3, #6
 800d89a:	6063      	str	r3, [r4, #4]
 800d89c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	6022      	str	r2, [r4, #0]
 800d8a4:	9303      	str	r3, [sp, #12]
 800d8a6:	ab0a      	add	r3, sp, #40	@ 0x28
 800d8a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d8ac:	ab09      	add	r3, sp, #36	@ 0x24
 800d8ae:	9300      	str	r3, [sp, #0]
 800d8b0:	6861      	ldr	r1, [r4, #4]
 800d8b2:	ec49 8b10 	vmov	d0, r8, r9
 800d8b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d8ba:	4628      	mov	r0, r5
 800d8bc:	f7ff fed6 	bl	800d66c <__cvt>
 800d8c0:	9b06      	ldr	r3, [sp, #24]
 800d8c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d8c4:	2b47      	cmp	r3, #71	@ 0x47
 800d8c6:	4680      	mov	r8, r0
 800d8c8:	d129      	bne.n	800d91e <_printf_float+0x172>
 800d8ca:	1cc8      	adds	r0, r1, #3
 800d8cc:	db02      	blt.n	800d8d4 <_printf_float+0x128>
 800d8ce:	6863      	ldr	r3, [r4, #4]
 800d8d0:	4299      	cmp	r1, r3
 800d8d2:	dd41      	ble.n	800d958 <_printf_float+0x1ac>
 800d8d4:	f1aa 0a02 	sub.w	sl, sl, #2
 800d8d8:	fa5f fa8a 	uxtb.w	sl, sl
 800d8dc:	3901      	subs	r1, #1
 800d8de:	4652      	mov	r2, sl
 800d8e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d8e4:	9109      	str	r1, [sp, #36]	@ 0x24
 800d8e6:	f7ff ff26 	bl	800d736 <__exponent>
 800d8ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d8ec:	1813      	adds	r3, r2, r0
 800d8ee:	2a01      	cmp	r2, #1
 800d8f0:	4681      	mov	r9, r0
 800d8f2:	6123      	str	r3, [r4, #16]
 800d8f4:	dc02      	bgt.n	800d8fc <_printf_float+0x150>
 800d8f6:	6822      	ldr	r2, [r4, #0]
 800d8f8:	07d2      	lsls	r2, r2, #31
 800d8fa:	d501      	bpl.n	800d900 <_printf_float+0x154>
 800d8fc:	3301      	adds	r3, #1
 800d8fe:	6123      	str	r3, [r4, #16]
 800d900:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d904:	2b00      	cmp	r3, #0
 800d906:	d0a2      	beq.n	800d84e <_printf_float+0xa2>
 800d908:	232d      	movs	r3, #45	@ 0x2d
 800d90a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d90e:	e79e      	b.n	800d84e <_printf_float+0xa2>
 800d910:	9a06      	ldr	r2, [sp, #24]
 800d912:	2a47      	cmp	r2, #71	@ 0x47
 800d914:	d1c2      	bne.n	800d89c <_printf_float+0xf0>
 800d916:	2b00      	cmp	r3, #0
 800d918:	d1c0      	bne.n	800d89c <_printf_float+0xf0>
 800d91a:	2301      	movs	r3, #1
 800d91c:	e7bd      	b.n	800d89a <_printf_float+0xee>
 800d91e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d922:	d9db      	bls.n	800d8dc <_printf_float+0x130>
 800d924:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d928:	d118      	bne.n	800d95c <_printf_float+0x1b0>
 800d92a:	2900      	cmp	r1, #0
 800d92c:	6863      	ldr	r3, [r4, #4]
 800d92e:	dd0b      	ble.n	800d948 <_printf_float+0x19c>
 800d930:	6121      	str	r1, [r4, #16]
 800d932:	b913      	cbnz	r3, 800d93a <_printf_float+0x18e>
 800d934:	6822      	ldr	r2, [r4, #0]
 800d936:	07d0      	lsls	r0, r2, #31
 800d938:	d502      	bpl.n	800d940 <_printf_float+0x194>
 800d93a:	3301      	adds	r3, #1
 800d93c:	440b      	add	r3, r1
 800d93e:	6123      	str	r3, [r4, #16]
 800d940:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d942:	f04f 0900 	mov.w	r9, #0
 800d946:	e7db      	b.n	800d900 <_printf_float+0x154>
 800d948:	b913      	cbnz	r3, 800d950 <_printf_float+0x1a4>
 800d94a:	6822      	ldr	r2, [r4, #0]
 800d94c:	07d2      	lsls	r2, r2, #31
 800d94e:	d501      	bpl.n	800d954 <_printf_float+0x1a8>
 800d950:	3302      	adds	r3, #2
 800d952:	e7f4      	b.n	800d93e <_printf_float+0x192>
 800d954:	2301      	movs	r3, #1
 800d956:	e7f2      	b.n	800d93e <_printf_float+0x192>
 800d958:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d95c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d95e:	4299      	cmp	r1, r3
 800d960:	db05      	blt.n	800d96e <_printf_float+0x1c2>
 800d962:	6823      	ldr	r3, [r4, #0]
 800d964:	6121      	str	r1, [r4, #16]
 800d966:	07d8      	lsls	r0, r3, #31
 800d968:	d5ea      	bpl.n	800d940 <_printf_float+0x194>
 800d96a:	1c4b      	adds	r3, r1, #1
 800d96c:	e7e7      	b.n	800d93e <_printf_float+0x192>
 800d96e:	2900      	cmp	r1, #0
 800d970:	bfd4      	ite	le
 800d972:	f1c1 0202 	rsble	r2, r1, #2
 800d976:	2201      	movgt	r2, #1
 800d978:	4413      	add	r3, r2
 800d97a:	e7e0      	b.n	800d93e <_printf_float+0x192>
 800d97c:	6823      	ldr	r3, [r4, #0]
 800d97e:	055a      	lsls	r2, r3, #21
 800d980:	d407      	bmi.n	800d992 <_printf_float+0x1e6>
 800d982:	6923      	ldr	r3, [r4, #16]
 800d984:	4642      	mov	r2, r8
 800d986:	4631      	mov	r1, r6
 800d988:	4628      	mov	r0, r5
 800d98a:	47b8      	blx	r7
 800d98c:	3001      	adds	r0, #1
 800d98e:	d12b      	bne.n	800d9e8 <_printf_float+0x23c>
 800d990:	e767      	b.n	800d862 <_printf_float+0xb6>
 800d992:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d996:	f240 80dd 	bls.w	800db54 <_printf_float+0x3a8>
 800d99a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d99e:	2200      	movs	r2, #0
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	f7f3 f8b9 	bl	8000b18 <__aeabi_dcmpeq>
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	d033      	beq.n	800da12 <_printf_float+0x266>
 800d9aa:	4a37      	ldr	r2, [pc, #220]	@ (800da88 <_printf_float+0x2dc>)
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	4631      	mov	r1, r6
 800d9b0:	4628      	mov	r0, r5
 800d9b2:	47b8      	blx	r7
 800d9b4:	3001      	adds	r0, #1
 800d9b6:	f43f af54 	beq.w	800d862 <_printf_float+0xb6>
 800d9ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d9be:	4543      	cmp	r3, r8
 800d9c0:	db02      	blt.n	800d9c8 <_printf_float+0x21c>
 800d9c2:	6823      	ldr	r3, [r4, #0]
 800d9c4:	07d8      	lsls	r0, r3, #31
 800d9c6:	d50f      	bpl.n	800d9e8 <_printf_float+0x23c>
 800d9c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9cc:	4631      	mov	r1, r6
 800d9ce:	4628      	mov	r0, r5
 800d9d0:	47b8      	blx	r7
 800d9d2:	3001      	adds	r0, #1
 800d9d4:	f43f af45 	beq.w	800d862 <_printf_float+0xb6>
 800d9d8:	f04f 0900 	mov.w	r9, #0
 800d9dc:	f108 38ff 	add.w	r8, r8, #4294967295
 800d9e0:	f104 0a1a 	add.w	sl, r4, #26
 800d9e4:	45c8      	cmp	r8, r9
 800d9e6:	dc09      	bgt.n	800d9fc <_printf_float+0x250>
 800d9e8:	6823      	ldr	r3, [r4, #0]
 800d9ea:	079b      	lsls	r3, r3, #30
 800d9ec:	f100 8103 	bmi.w	800dbf6 <_printf_float+0x44a>
 800d9f0:	68e0      	ldr	r0, [r4, #12]
 800d9f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d9f4:	4298      	cmp	r0, r3
 800d9f6:	bfb8      	it	lt
 800d9f8:	4618      	movlt	r0, r3
 800d9fa:	e734      	b.n	800d866 <_printf_float+0xba>
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	4652      	mov	r2, sl
 800da00:	4631      	mov	r1, r6
 800da02:	4628      	mov	r0, r5
 800da04:	47b8      	blx	r7
 800da06:	3001      	adds	r0, #1
 800da08:	f43f af2b 	beq.w	800d862 <_printf_float+0xb6>
 800da0c:	f109 0901 	add.w	r9, r9, #1
 800da10:	e7e8      	b.n	800d9e4 <_printf_float+0x238>
 800da12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da14:	2b00      	cmp	r3, #0
 800da16:	dc39      	bgt.n	800da8c <_printf_float+0x2e0>
 800da18:	4a1b      	ldr	r2, [pc, #108]	@ (800da88 <_printf_float+0x2dc>)
 800da1a:	2301      	movs	r3, #1
 800da1c:	4631      	mov	r1, r6
 800da1e:	4628      	mov	r0, r5
 800da20:	47b8      	blx	r7
 800da22:	3001      	adds	r0, #1
 800da24:	f43f af1d 	beq.w	800d862 <_printf_float+0xb6>
 800da28:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800da2c:	ea59 0303 	orrs.w	r3, r9, r3
 800da30:	d102      	bne.n	800da38 <_printf_float+0x28c>
 800da32:	6823      	ldr	r3, [r4, #0]
 800da34:	07d9      	lsls	r1, r3, #31
 800da36:	d5d7      	bpl.n	800d9e8 <_printf_float+0x23c>
 800da38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da3c:	4631      	mov	r1, r6
 800da3e:	4628      	mov	r0, r5
 800da40:	47b8      	blx	r7
 800da42:	3001      	adds	r0, #1
 800da44:	f43f af0d 	beq.w	800d862 <_printf_float+0xb6>
 800da48:	f04f 0a00 	mov.w	sl, #0
 800da4c:	f104 0b1a 	add.w	fp, r4, #26
 800da50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da52:	425b      	negs	r3, r3
 800da54:	4553      	cmp	r3, sl
 800da56:	dc01      	bgt.n	800da5c <_printf_float+0x2b0>
 800da58:	464b      	mov	r3, r9
 800da5a:	e793      	b.n	800d984 <_printf_float+0x1d8>
 800da5c:	2301      	movs	r3, #1
 800da5e:	465a      	mov	r2, fp
 800da60:	4631      	mov	r1, r6
 800da62:	4628      	mov	r0, r5
 800da64:	47b8      	blx	r7
 800da66:	3001      	adds	r0, #1
 800da68:	f43f aefb 	beq.w	800d862 <_printf_float+0xb6>
 800da6c:	f10a 0a01 	add.w	sl, sl, #1
 800da70:	e7ee      	b.n	800da50 <_printf_float+0x2a4>
 800da72:	bf00      	nop
 800da74:	7fefffff 	.word	0x7fefffff
 800da78:	080118e0 	.word	0x080118e0
 800da7c:	080118e4 	.word	0x080118e4
 800da80:	080118e8 	.word	0x080118e8
 800da84:	080118ec 	.word	0x080118ec
 800da88:	080118f0 	.word	0x080118f0
 800da8c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800da8e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800da92:	4553      	cmp	r3, sl
 800da94:	bfa8      	it	ge
 800da96:	4653      	movge	r3, sl
 800da98:	2b00      	cmp	r3, #0
 800da9a:	4699      	mov	r9, r3
 800da9c:	dc36      	bgt.n	800db0c <_printf_float+0x360>
 800da9e:	f04f 0b00 	mov.w	fp, #0
 800daa2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800daa6:	f104 021a 	add.w	r2, r4, #26
 800daaa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800daac:	9306      	str	r3, [sp, #24]
 800daae:	eba3 0309 	sub.w	r3, r3, r9
 800dab2:	455b      	cmp	r3, fp
 800dab4:	dc31      	bgt.n	800db1a <_printf_float+0x36e>
 800dab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dab8:	459a      	cmp	sl, r3
 800daba:	dc3a      	bgt.n	800db32 <_printf_float+0x386>
 800dabc:	6823      	ldr	r3, [r4, #0]
 800dabe:	07da      	lsls	r2, r3, #31
 800dac0:	d437      	bmi.n	800db32 <_printf_float+0x386>
 800dac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dac4:	ebaa 0903 	sub.w	r9, sl, r3
 800dac8:	9b06      	ldr	r3, [sp, #24]
 800daca:	ebaa 0303 	sub.w	r3, sl, r3
 800dace:	4599      	cmp	r9, r3
 800dad0:	bfa8      	it	ge
 800dad2:	4699      	movge	r9, r3
 800dad4:	f1b9 0f00 	cmp.w	r9, #0
 800dad8:	dc33      	bgt.n	800db42 <_printf_float+0x396>
 800dada:	f04f 0800 	mov.w	r8, #0
 800dade:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dae2:	f104 0b1a 	add.w	fp, r4, #26
 800dae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dae8:	ebaa 0303 	sub.w	r3, sl, r3
 800daec:	eba3 0309 	sub.w	r3, r3, r9
 800daf0:	4543      	cmp	r3, r8
 800daf2:	f77f af79 	ble.w	800d9e8 <_printf_float+0x23c>
 800daf6:	2301      	movs	r3, #1
 800daf8:	465a      	mov	r2, fp
 800dafa:	4631      	mov	r1, r6
 800dafc:	4628      	mov	r0, r5
 800dafe:	47b8      	blx	r7
 800db00:	3001      	adds	r0, #1
 800db02:	f43f aeae 	beq.w	800d862 <_printf_float+0xb6>
 800db06:	f108 0801 	add.w	r8, r8, #1
 800db0a:	e7ec      	b.n	800dae6 <_printf_float+0x33a>
 800db0c:	4642      	mov	r2, r8
 800db0e:	4631      	mov	r1, r6
 800db10:	4628      	mov	r0, r5
 800db12:	47b8      	blx	r7
 800db14:	3001      	adds	r0, #1
 800db16:	d1c2      	bne.n	800da9e <_printf_float+0x2f2>
 800db18:	e6a3      	b.n	800d862 <_printf_float+0xb6>
 800db1a:	2301      	movs	r3, #1
 800db1c:	4631      	mov	r1, r6
 800db1e:	4628      	mov	r0, r5
 800db20:	9206      	str	r2, [sp, #24]
 800db22:	47b8      	blx	r7
 800db24:	3001      	adds	r0, #1
 800db26:	f43f ae9c 	beq.w	800d862 <_printf_float+0xb6>
 800db2a:	9a06      	ldr	r2, [sp, #24]
 800db2c:	f10b 0b01 	add.w	fp, fp, #1
 800db30:	e7bb      	b.n	800daaa <_printf_float+0x2fe>
 800db32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db36:	4631      	mov	r1, r6
 800db38:	4628      	mov	r0, r5
 800db3a:	47b8      	blx	r7
 800db3c:	3001      	adds	r0, #1
 800db3e:	d1c0      	bne.n	800dac2 <_printf_float+0x316>
 800db40:	e68f      	b.n	800d862 <_printf_float+0xb6>
 800db42:	9a06      	ldr	r2, [sp, #24]
 800db44:	464b      	mov	r3, r9
 800db46:	4442      	add	r2, r8
 800db48:	4631      	mov	r1, r6
 800db4a:	4628      	mov	r0, r5
 800db4c:	47b8      	blx	r7
 800db4e:	3001      	adds	r0, #1
 800db50:	d1c3      	bne.n	800dada <_printf_float+0x32e>
 800db52:	e686      	b.n	800d862 <_printf_float+0xb6>
 800db54:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800db58:	f1ba 0f01 	cmp.w	sl, #1
 800db5c:	dc01      	bgt.n	800db62 <_printf_float+0x3b6>
 800db5e:	07db      	lsls	r3, r3, #31
 800db60:	d536      	bpl.n	800dbd0 <_printf_float+0x424>
 800db62:	2301      	movs	r3, #1
 800db64:	4642      	mov	r2, r8
 800db66:	4631      	mov	r1, r6
 800db68:	4628      	mov	r0, r5
 800db6a:	47b8      	blx	r7
 800db6c:	3001      	adds	r0, #1
 800db6e:	f43f ae78 	beq.w	800d862 <_printf_float+0xb6>
 800db72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db76:	4631      	mov	r1, r6
 800db78:	4628      	mov	r0, r5
 800db7a:	47b8      	blx	r7
 800db7c:	3001      	adds	r0, #1
 800db7e:	f43f ae70 	beq.w	800d862 <_printf_float+0xb6>
 800db82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800db86:	2200      	movs	r2, #0
 800db88:	2300      	movs	r3, #0
 800db8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800db8e:	f7f2 ffc3 	bl	8000b18 <__aeabi_dcmpeq>
 800db92:	b9c0      	cbnz	r0, 800dbc6 <_printf_float+0x41a>
 800db94:	4653      	mov	r3, sl
 800db96:	f108 0201 	add.w	r2, r8, #1
 800db9a:	4631      	mov	r1, r6
 800db9c:	4628      	mov	r0, r5
 800db9e:	47b8      	blx	r7
 800dba0:	3001      	adds	r0, #1
 800dba2:	d10c      	bne.n	800dbbe <_printf_float+0x412>
 800dba4:	e65d      	b.n	800d862 <_printf_float+0xb6>
 800dba6:	2301      	movs	r3, #1
 800dba8:	465a      	mov	r2, fp
 800dbaa:	4631      	mov	r1, r6
 800dbac:	4628      	mov	r0, r5
 800dbae:	47b8      	blx	r7
 800dbb0:	3001      	adds	r0, #1
 800dbb2:	f43f ae56 	beq.w	800d862 <_printf_float+0xb6>
 800dbb6:	f108 0801 	add.w	r8, r8, #1
 800dbba:	45d0      	cmp	r8, sl
 800dbbc:	dbf3      	blt.n	800dba6 <_printf_float+0x3fa>
 800dbbe:	464b      	mov	r3, r9
 800dbc0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800dbc4:	e6df      	b.n	800d986 <_printf_float+0x1da>
 800dbc6:	f04f 0800 	mov.w	r8, #0
 800dbca:	f104 0b1a 	add.w	fp, r4, #26
 800dbce:	e7f4      	b.n	800dbba <_printf_float+0x40e>
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	4642      	mov	r2, r8
 800dbd4:	e7e1      	b.n	800db9a <_printf_float+0x3ee>
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	464a      	mov	r2, r9
 800dbda:	4631      	mov	r1, r6
 800dbdc:	4628      	mov	r0, r5
 800dbde:	47b8      	blx	r7
 800dbe0:	3001      	adds	r0, #1
 800dbe2:	f43f ae3e 	beq.w	800d862 <_printf_float+0xb6>
 800dbe6:	f108 0801 	add.w	r8, r8, #1
 800dbea:	68e3      	ldr	r3, [r4, #12]
 800dbec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dbee:	1a5b      	subs	r3, r3, r1
 800dbf0:	4543      	cmp	r3, r8
 800dbf2:	dcf0      	bgt.n	800dbd6 <_printf_float+0x42a>
 800dbf4:	e6fc      	b.n	800d9f0 <_printf_float+0x244>
 800dbf6:	f04f 0800 	mov.w	r8, #0
 800dbfa:	f104 0919 	add.w	r9, r4, #25
 800dbfe:	e7f4      	b.n	800dbea <_printf_float+0x43e>

0800dc00 <_printf_common>:
 800dc00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc04:	4616      	mov	r6, r2
 800dc06:	4698      	mov	r8, r3
 800dc08:	688a      	ldr	r2, [r1, #8]
 800dc0a:	690b      	ldr	r3, [r1, #16]
 800dc0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dc10:	4293      	cmp	r3, r2
 800dc12:	bfb8      	it	lt
 800dc14:	4613      	movlt	r3, r2
 800dc16:	6033      	str	r3, [r6, #0]
 800dc18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dc1c:	4607      	mov	r7, r0
 800dc1e:	460c      	mov	r4, r1
 800dc20:	b10a      	cbz	r2, 800dc26 <_printf_common+0x26>
 800dc22:	3301      	adds	r3, #1
 800dc24:	6033      	str	r3, [r6, #0]
 800dc26:	6823      	ldr	r3, [r4, #0]
 800dc28:	0699      	lsls	r1, r3, #26
 800dc2a:	bf42      	ittt	mi
 800dc2c:	6833      	ldrmi	r3, [r6, #0]
 800dc2e:	3302      	addmi	r3, #2
 800dc30:	6033      	strmi	r3, [r6, #0]
 800dc32:	6825      	ldr	r5, [r4, #0]
 800dc34:	f015 0506 	ands.w	r5, r5, #6
 800dc38:	d106      	bne.n	800dc48 <_printf_common+0x48>
 800dc3a:	f104 0a19 	add.w	sl, r4, #25
 800dc3e:	68e3      	ldr	r3, [r4, #12]
 800dc40:	6832      	ldr	r2, [r6, #0]
 800dc42:	1a9b      	subs	r3, r3, r2
 800dc44:	42ab      	cmp	r3, r5
 800dc46:	dc26      	bgt.n	800dc96 <_printf_common+0x96>
 800dc48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dc4c:	6822      	ldr	r2, [r4, #0]
 800dc4e:	3b00      	subs	r3, #0
 800dc50:	bf18      	it	ne
 800dc52:	2301      	movne	r3, #1
 800dc54:	0692      	lsls	r2, r2, #26
 800dc56:	d42b      	bmi.n	800dcb0 <_printf_common+0xb0>
 800dc58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dc5c:	4641      	mov	r1, r8
 800dc5e:	4638      	mov	r0, r7
 800dc60:	47c8      	blx	r9
 800dc62:	3001      	adds	r0, #1
 800dc64:	d01e      	beq.n	800dca4 <_printf_common+0xa4>
 800dc66:	6823      	ldr	r3, [r4, #0]
 800dc68:	6922      	ldr	r2, [r4, #16]
 800dc6a:	f003 0306 	and.w	r3, r3, #6
 800dc6e:	2b04      	cmp	r3, #4
 800dc70:	bf02      	ittt	eq
 800dc72:	68e5      	ldreq	r5, [r4, #12]
 800dc74:	6833      	ldreq	r3, [r6, #0]
 800dc76:	1aed      	subeq	r5, r5, r3
 800dc78:	68a3      	ldr	r3, [r4, #8]
 800dc7a:	bf0c      	ite	eq
 800dc7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc80:	2500      	movne	r5, #0
 800dc82:	4293      	cmp	r3, r2
 800dc84:	bfc4      	itt	gt
 800dc86:	1a9b      	subgt	r3, r3, r2
 800dc88:	18ed      	addgt	r5, r5, r3
 800dc8a:	2600      	movs	r6, #0
 800dc8c:	341a      	adds	r4, #26
 800dc8e:	42b5      	cmp	r5, r6
 800dc90:	d11a      	bne.n	800dcc8 <_printf_common+0xc8>
 800dc92:	2000      	movs	r0, #0
 800dc94:	e008      	b.n	800dca8 <_printf_common+0xa8>
 800dc96:	2301      	movs	r3, #1
 800dc98:	4652      	mov	r2, sl
 800dc9a:	4641      	mov	r1, r8
 800dc9c:	4638      	mov	r0, r7
 800dc9e:	47c8      	blx	r9
 800dca0:	3001      	adds	r0, #1
 800dca2:	d103      	bne.n	800dcac <_printf_common+0xac>
 800dca4:	f04f 30ff 	mov.w	r0, #4294967295
 800dca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcac:	3501      	adds	r5, #1
 800dcae:	e7c6      	b.n	800dc3e <_printf_common+0x3e>
 800dcb0:	18e1      	adds	r1, r4, r3
 800dcb2:	1c5a      	adds	r2, r3, #1
 800dcb4:	2030      	movs	r0, #48	@ 0x30
 800dcb6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dcba:	4422      	add	r2, r4
 800dcbc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dcc0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dcc4:	3302      	adds	r3, #2
 800dcc6:	e7c7      	b.n	800dc58 <_printf_common+0x58>
 800dcc8:	2301      	movs	r3, #1
 800dcca:	4622      	mov	r2, r4
 800dccc:	4641      	mov	r1, r8
 800dcce:	4638      	mov	r0, r7
 800dcd0:	47c8      	blx	r9
 800dcd2:	3001      	adds	r0, #1
 800dcd4:	d0e6      	beq.n	800dca4 <_printf_common+0xa4>
 800dcd6:	3601      	adds	r6, #1
 800dcd8:	e7d9      	b.n	800dc8e <_printf_common+0x8e>
	...

0800dcdc <_printf_i>:
 800dcdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dce0:	7e0f      	ldrb	r7, [r1, #24]
 800dce2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dce4:	2f78      	cmp	r7, #120	@ 0x78
 800dce6:	4691      	mov	r9, r2
 800dce8:	4680      	mov	r8, r0
 800dcea:	460c      	mov	r4, r1
 800dcec:	469a      	mov	sl, r3
 800dcee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dcf2:	d807      	bhi.n	800dd04 <_printf_i+0x28>
 800dcf4:	2f62      	cmp	r7, #98	@ 0x62
 800dcf6:	d80a      	bhi.n	800dd0e <_printf_i+0x32>
 800dcf8:	2f00      	cmp	r7, #0
 800dcfa:	f000 80d2 	beq.w	800dea2 <_printf_i+0x1c6>
 800dcfe:	2f58      	cmp	r7, #88	@ 0x58
 800dd00:	f000 80b9 	beq.w	800de76 <_printf_i+0x19a>
 800dd04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dd08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dd0c:	e03a      	b.n	800dd84 <_printf_i+0xa8>
 800dd0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dd12:	2b15      	cmp	r3, #21
 800dd14:	d8f6      	bhi.n	800dd04 <_printf_i+0x28>
 800dd16:	a101      	add	r1, pc, #4	@ (adr r1, 800dd1c <_printf_i+0x40>)
 800dd18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dd1c:	0800dd75 	.word	0x0800dd75
 800dd20:	0800dd89 	.word	0x0800dd89
 800dd24:	0800dd05 	.word	0x0800dd05
 800dd28:	0800dd05 	.word	0x0800dd05
 800dd2c:	0800dd05 	.word	0x0800dd05
 800dd30:	0800dd05 	.word	0x0800dd05
 800dd34:	0800dd89 	.word	0x0800dd89
 800dd38:	0800dd05 	.word	0x0800dd05
 800dd3c:	0800dd05 	.word	0x0800dd05
 800dd40:	0800dd05 	.word	0x0800dd05
 800dd44:	0800dd05 	.word	0x0800dd05
 800dd48:	0800de89 	.word	0x0800de89
 800dd4c:	0800ddb3 	.word	0x0800ddb3
 800dd50:	0800de43 	.word	0x0800de43
 800dd54:	0800dd05 	.word	0x0800dd05
 800dd58:	0800dd05 	.word	0x0800dd05
 800dd5c:	0800deab 	.word	0x0800deab
 800dd60:	0800dd05 	.word	0x0800dd05
 800dd64:	0800ddb3 	.word	0x0800ddb3
 800dd68:	0800dd05 	.word	0x0800dd05
 800dd6c:	0800dd05 	.word	0x0800dd05
 800dd70:	0800de4b 	.word	0x0800de4b
 800dd74:	6833      	ldr	r3, [r6, #0]
 800dd76:	1d1a      	adds	r2, r3, #4
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	6032      	str	r2, [r6, #0]
 800dd7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dd80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dd84:	2301      	movs	r3, #1
 800dd86:	e09d      	b.n	800dec4 <_printf_i+0x1e8>
 800dd88:	6833      	ldr	r3, [r6, #0]
 800dd8a:	6820      	ldr	r0, [r4, #0]
 800dd8c:	1d19      	adds	r1, r3, #4
 800dd8e:	6031      	str	r1, [r6, #0]
 800dd90:	0606      	lsls	r6, r0, #24
 800dd92:	d501      	bpl.n	800dd98 <_printf_i+0xbc>
 800dd94:	681d      	ldr	r5, [r3, #0]
 800dd96:	e003      	b.n	800dda0 <_printf_i+0xc4>
 800dd98:	0645      	lsls	r5, r0, #25
 800dd9a:	d5fb      	bpl.n	800dd94 <_printf_i+0xb8>
 800dd9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dda0:	2d00      	cmp	r5, #0
 800dda2:	da03      	bge.n	800ddac <_printf_i+0xd0>
 800dda4:	232d      	movs	r3, #45	@ 0x2d
 800dda6:	426d      	negs	r5, r5
 800dda8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ddac:	4859      	ldr	r0, [pc, #356]	@ (800df14 <_printf_i+0x238>)
 800ddae:	230a      	movs	r3, #10
 800ddb0:	e011      	b.n	800ddd6 <_printf_i+0xfa>
 800ddb2:	6821      	ldr	r1, [r4, #0]
 800ddb4:	6833      	ldr	r3, [r6, #0]
 800ddb6:	0608      	lsls	r0, r1, #24
 800ddb8:	f853 5b04 	ldr.w	r5, [r3], #4
 800ddbc:	d402      	bmi.n	800ddc4 <_printf_i+0xe8>
 800ddbe:	0649      	lsls	r1, r1, #25
 800ddc0:	bf48      	it	mi
 800ddc2:	b2ad      	uxthmi	r5, r5
 800ddc4:	2f6f      	cmp	r7, #111	@ 0x6f
 800ddc6:	4853      	ldr	r0, [pc, #332]	@ (800df14 <_printf_i+0x238>)
 800ddc8:	6033      	str	r3, [r6, #0]
 800ddca:	bf14      	ite	ne
 800ddcc:	230a      	movne	r3, #10
 800ddce:	2308      	moveq	r3, #8
 800ddd0:	2100      	movs	r1, #0
 800ddd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ddd6:	6866      	ldr	r6, [r4, #4]
 800ddd8:	60a6      	str	r6, [r4, #8]
 800ddda:	2e00      	cmp	r6, #0
 800dddc:	bfa2      	ittt	ge
 800ddde:	6821      	ldrge	r1, [r4, #0]
 800dde0:	f021 0104 	bicge.w	r1, r1, #4
 800dde4:	6021      	strge	r1, [r4, #0]
 800dde6:	b90d      	cbnz	r5, 800ddec <_printf_i+0x110>
 800dde8:	2e00      	cmp	r6, #0
 800ddea:	d04b      	beq.n	800de84 <_printf_i+0x1a8>
 800ddec:	4616      	mov	r6, r2
 800ddee:	fbb5 f1f3 	udiv	r1, r5, r3
 800ddf2:	fb03 5711 	mls	r7, r3, r1, r5
 800ddf6:	5dc7      	ldrb	r7, [r0, r7]
 800ddf8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ddfc:	462f      	mov	r7, r5
 800ddfe:	42bb      	cmp	r3, r7
 800de00:	460d      	mov	r5, r1
 800de02:	d9f4      	bls.n	800ddee <_printf_i+0x112>
 800de04:	2b08      	cmp	r3, #8
 800de06:	d10b      	bne.n	800de20 <_printf_i+0x144>
 800de08:	6823      	ldr	r3, [r4, #0]
 800de0a:	07df      	lsls	r7, r3, #31
 800de0c:	d508      	bpl.n	800de20 <_printf_i+0x144>
 800de0e:	6923      	ldr	r3, [r4, #16]
 800de10:	6861      	ldr	r1, [r4, #4]
 800de12:	4299      	cmp	r1, r3
 800de14:	bfde      	ittt	le
 800de16:	2330      	movle	r3, #48	@ 0x30
 800de18:	f806 3c01 	strble.w	r3, [r6, #-1]
 800de1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800de20:	1b92      	subs	r2, r2, r6
 800de22:	6122      	str	r2, [r4, #16]
 800de24:	f8cd a000 	str.w	sl, [sp]
 800de28:	464b      	mov	r3, r9
 800de2a:	aa03      	add	r2, sp, #12
 800de2c:	4621      	mov	r1, r4
 800de2e:	4640      	mov	r0, r8
 800de30:	f7ff fee6 	bl	800dc00 <_printf_common>
 800de34:	3001      	adds	r0, #1
 800de36:	d14a      	bne.n	800dece <_printf_i+0x1f2>
 800de38:	f04f 30ff 	mov.w	r0, #4294967295
 800de3c:	b004      	add	sp, #16
 800de3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de42:	6823      	ldr	r3, [r4, #0]
 800de44:	f043 0320 	orr.w	r3, r3, #32
 800de48:	6023      	str	r3, [r4, #0]
 800de4a:	4833      	ldr	r0, [pc, #204]	@ (800df18 <_printf_i+0x23c>)
 800de4c:	2778      	movs	r7, #120	@ 0x78
 800de4e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800de52:	6823      	ldr	r3, [r4, #0]
 800de54:	6831      	ldr	r1, [r6, #0]
 800de56:	061f      	lsls	r7, r3, #24
 800de58:	f851 5b04 	ldr.w	r5, [r1], #4
 800de5c:	d402      	bmi.n	800de64 <_printf_i+0x188>
 800de5e:	065f      	lsls	r7, r3, #25
 800de60:	bf48      	it	mi
 800de62:	b2ad      	uxthmi	r5, r5
 800de64:	6031      	str	r1, [r6, #0]
 800de66:	07d9      	lsls	r1, r3, #31
 800de68:	bf44      	itt	mi
 800de6a:	f043 0320 	orrmi.w	r3, r3, #32
 800de6e:	6023      	strmi	r3, [r4, #0]
 800de70:	b11d      	cbz	r5, 800de7a <_printf_i+0x19e>
 800de72:	2310      	movs	r3, #16
 800de74:	e7ac      	b.n	800ddd0 <_printf_i+0xf4>
 800de76:	4827      	ldr	r0, [pc, #156]	@ (800df14 <_printf_i+0x238>)
 800de78:	e7e9      	b.n	800de4e <_printf_i+0x172>
 800de7a:	6823      	ldr	r3, [r4, #0]
 800de7c:	f023 0320 	bic.w	r3, r3, #32
 800de80:	6023      	str	r3, [r4, #0]
 800de82:	e7f6      	b.n	800de72 <_printf_i+0x196>
 800de84:	4616      	mov	r6, r2
 800de86:	e7bd      	b.n	800de04 <_printf_i+0x128>
 800de88:	6833      	ldr	r3, [r6, #0]
 800de8a:	6825      	ldr	r5, [r4, #0]
 800de8c:	6961      	ldr	r1, [r4, #20]
 800de8e:	1d18      	adds	r0, r3, #4
 800de90:	6030      	str	r0, [r6, #0]
 800de92:	062e      	lsls	r6, r5, #24
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	d501      	bpl.n	800de9c <_printf_i+0x1c0>
 800de98:	6019      	str	r1, [r3, #0]
 800de9a:	e002      	b.n	800dea2 <_printf_i+0x1c6>
 800de9c:	0668      	lsls	r0, r5, #25
 800de9e:	d5fb      	bpl.n	800de98 <_printf_i+0x1bc>
 800dea0:	8019      	strh	r1, [r3, #0]
 800dea2:	2300      	movs	r3, #0
 800dea4:	6123      	str	r3, [r4, #16]
 800dea6:	4616      	mov	r6, r2
 800dea8:	e7bc      	b.n	800de24 <_printf_i+0x148>
 800deaa:	6833      	ldr	r3, [r6, #0]
 800deac:	1d1a      	adds	r2, r3, #4
 800deae:	6032      	str	r2, [r6, #0]
 800deb0:	681e      	ldr	r6, [r3, #0]
 800deb2:	6862      	ldr	r2, [r4, #4]
 800deb4:	2100      	movs	r1, #0
 800deb6:	4630      	mov	r0, r6
 800deb8:	f7f2 f9b2 	bl	8000220 <memchr>
 800debc:	b108      	cbz	r0, 800dec2 <_printf_i+0x1e6>
 800debe:	1b80      	subs	r0, r0, r6
 800dec0:	6060      	str	r0, [r4, #4]
 800dec2:	6863      	ldr	r3, [r4, #4]
 800dec4:	6123      	str	r3, [r4, #16]
 800dec6:	2300      	movs	r3, #0
 800dec8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800decc:	e7aa      	b.n	800de24 <_printf_i+0x148>
 800dece:	6923      	ldr	r3, [r4, #16]
 800ded0:	4632      	mov	r2, r6
 800ded2:	4649      	mov	r1, r9
 800ded4:	4640      	mov	r0, r8
 800ded6:	47d0      	blx	sl
 800ded8:	3001      	adds	r0, #1
 800deda:	d0ad      	beq.n	800de38 <_printf_i+0x15c>
 800dedc:	6823      	ldr	r3, [r4, #0]
 800dede:	079b      	lsls	r3, r3, #30
 800dee0:	d413      	bmi.n	800df0a <_printf_i+0x22e>
 800dee2:	68e0      	ldr	r0, [r4, #12]
 800dee4:	9b03      	ldr	r3, [sp, #12]
 800dee6:	4298      	cmp	r0, r3
 800dee8:	bfb8      	it	lt
 800deea:	4618      	movlt	r0, r3
 800deec:	e7a6      	b.n	800de3c <_printf_i+0x160>
 800deee:	2301      	movs	r3, #1
 800def0:	4632      	mov	r2, r6
 800def2:	4649      	mov	r1, r9
 800def4:	4640      	mov	r0, r8
 800def6:	47d0      	blx	sl
 800def8:	3001      	adds	r0, #1
 800defa:	d09d      	beq.n	800de38 <_printf_i+0x15c>
 800defc:	3501      	adds	r5, #1
 800defe:	68e3      	ldr	r3, [r4, #12]
 800df00:	9903      	ldr	r1, [sp, #12]
 800df02:	1a5b      	subs	r3, r3, r1
 800df04:	42ab      	cmp	r3, r5
 800df06:	dcf2      	bgt.n	800deee <_printf_i+0x212>
 800df08:	e7eb      	b.n	800dee2 <_printf_i+0x206>
 800df0a:	2500      	movs	r5, #0
 800df0c:	f104 0619 	add.w	r6, r4, #25
 800df10:	e7f5      	b.n	800defe <_printf_i+0x222>
 800df12:	bf00      	nop
 800df14:	080118f2 	.word	0x080118f2
 800df18:	08011903 	.word	0x08011903

0800df1c <_scanf_float>:
 800df1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df20:	b087      	sub	sp, #28
 800df22:	4617      	mov	r7, r2
 800df24:	9303      	str	r3, [sp, #12]
 800df26:	688b      	ldr	r3, [r1, #8]
 800df28:	1e5a      	subs	r2, r3, #1
 800df2a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800df2e:	bf81      	itttt	hi
 800df30:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800df34:	eb03 0b05 	addhi.w	fp, r3, r5
 800df38:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800df3c:	608b      	strhi	r3, [r1, #8]
 800df3e:	680b      	ldr	r3, [r1, #0]
 800df40:	460a      	mov	r2, r1
 800df42:	f04f 0500 	mov.w	r5, #0
 800df46:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800df4a:	f842 3b1c 	str.w	r3, [r2], #28
 800df4e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800df52:	4680      	mov	r8, r0
 800df54:	460c      	mov	r4, r1
 800df56:	bf98      	it	ls
 800df58:	f04f 0b00 	movls.w	fp, #0
 800df5c:	9201      	str	r2, [sp, #4]
 800df5e:	4616      	mov	r6, r2
 800df60:	46aa      	mov	sl, r5
 800df62:	46a9      	mov	r9, r5
 800df64:	9502      	str	r5, [sp, #8]
 800df66:	68a2      	ldr	r2, [r4, #8]
 800df68:	b152      	cbz	r2, 800df80 <_scanf_float+0x64>
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	781b      	ldrb	r3, [r3, #0]
 800df6e:	2b4e      	cmp	r3, #78	@ 0x4e
 800df70:	d864      	bhi.n	800e03c <_scanf_float+0x120>
 800df72:	2b40      	cmp	r3, #64	@ 0x40
 800df74:	d83c      	bhi.n	800dff0 <_scanf_float+0xd4>
 800df76:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800df7a:	b2c8      	uxtb	r0, r1
 800df7c:	280e      	cmp	r0, #14
 800df7e:	d93a      	bls.n	800dff6 <_scanf_float+0xda>
 800df80:	f1b9 0f00 	cmp.w	r9, #0
 800df84:	d003      	beq.n	800df8e <_scanf_float+0x72>
 800df86:	6823      	ldr	r3, [r4, #0]
 800df88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800df8c:	6023      	str	r3, [r4, #0]
 800df8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800df92:	f1ba 0f01 	cmp.w	sl, #1
 800df96:	f200 8117 	bhi.w	800e1c8 <_scanf_float+0x2ac>
 800df9a:	9b01      	ldr	r3, [sp, #4]
 800df9c:	429e      	cmp	r6, r3
 800df9e:	f200 8108 	bhi.w	800e1b2 <_scanf_float+0x296>
 800dfa2:	2001      	movs	r0, #1
 800dfa4:	b007      	add	sp, #28
 800dfa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfaa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800dfae:	2a0d      	cmp	r2, #13
 800dfb0:	d8e6      	bhi.n	800df80 <_scanf_float+0x64>
 800dfb2:	a101      	add	r1, pc, #4	@ (adr r1, 800dfb8 <_scanf_float+0x9c>)
 800dfb4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dfb8:	0800e0ff 	.word	0x0800e0ff
 800dfbc:	0800df81 	.word	0x0800df81
 800dfc0:	0800df81 	.word	0x0800df81
 800dfc4:	0800df81 	.word	0x0800df81
 800dfc8:	0800e15f 	.word	0x0800e15f
 800dfcc:	0800e137 	.word	0x0800e137
 800dfd0:	0800df81 	.word	0x0800df81
 800dfd4:	0800df81 	.word	0x0800df81
 800dfd8:	0800e10d 	.word	0x0800e10d
 800dfdc:	0800df81 	.word	0x0800df81
 800dfe0:	0800df81 	.word	0x0800df81
 800dfe4:	0800df81 	.word	0x0800df81
 800dfe8:	0800df81 	.word	0x0800df81
 800dfec:	0800e0c5 	.word	0x0800e0c5
 800dff0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800dff4:	e7db      	b.n	800dfae <_scanf_float+0x92>
 800dff6:	290e      	cmp	r1, #14
 800dff8:	d8c2      	bhi.n	800df80 <_scanf_float+0x64>
 800dffa:	a001      	add	r0, pc, #4	@ (adr r0, 800e000 <_scanf_float+0xe4>)
 800dffc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e000:	0800e0b5 	.word	0x0800e0b5
 800e004:	0800df81 	.word	0x0800df81
 800e008:	0800e0b5 	.word	0x0800e0b5
 800e00c:	0800e14b 	.word	0x0800e14b
 800e010:	0800df81 	.word	0x0800df81
 800e014:	0800e05d 	.word	0x0800e05d
 800e018:	0800e09b 	.word	0x0800e09b
 800e01c:	0800e09b 	.word	0x0800e09b
 800e020:	0800e09b 	.word	0x0800e09b
 800e024:	0800e09b 	.word	0x0800e09b
 800e028:	0800e09b 	.word	0x0800e09b
 800e02c:	0800e09b 	.word	0x0800e09b
 800e030:	0800e09b 	.word	0x0800e09b
 800e034:	0800e09b 	.word	0x0800e09b
 800e038:	0800e09b 	.word	0x0800e09b
 800e03c:	2b6e      	cmp	r3, #110	@ 0x6e
 800e03e:	d809      	bhi.n	800e054 <_scanf_float+0x138>
 800e040:	2b60      	cmp	r3, #96	@ 0x60
 800e042:	d8b2      	bhi.n	800dfaa <_scanf_float+0x8e>
 800e044:	2b54      	cmp	r3, #84	@ 0x54
 800e046:	d07b      	beq.n	800e140 <_scanf_float+0x224>
 800e048:	2b59      	cmp	r3, #89	@ 0x59
 800e04a:	d199      	bne.n	800df80 <_scanf_float+0x64>
 800e04c:	2d07      	cmp	r5, #7
 800e04e:	d197      	bne.n	800df80 <_scanf_float+0x64>
 800e050:	2508      	movs	r5, #8
 800e052:	e02c      	b.n	800e0ae <_scanf_float+0x192>
 800e054:	2b74      	cmp	r3, #116	@ 0x74
 800e056:	d073      	beq.n	800e140 <_scanf_float+0x224>
 800e058:	2b79      	cmp	r3, #121	@ 0x79
 800e05a:	e7f6      	b.n	800e04a <_scanf_float+0x12e>
 800e05c:	6821      	ldr	r1, [r4, #0]
 800e05e:	05c8      	lsls	r0, r1, #23
 800e060:	d51b      	bpl.n	800e09a <_scanf_float+0x17e>
 800e062:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e066:	6021      	str	r1, [r4, #0]
 800e068:	f109 0901 	add.w	r9, r9, #1
 800e06c:	f1bb 0f00 	cmp.w	fp, #0
 800e070:	d003      	beq.n	800e07a <_scanf_float+0x15e>
 800e072:	3201      	adds	r2, #1
 800e074:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e078:	60a2      	str	r2, [r4, #8]
 800e07a:	68a3      	ldr	r3, [r4, #8]
 800e07c:	3b01      	subs	r3, #1
 800e07e:	60a3      	str	r3, [r4, #8]
 800e080:	6923      	ldr	r3, [r4, #16]
 800e082:	3301      	adds	r3, #1
 800e084:	6123      	str	r3, [r4, #16]
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	3b01      	subs	r3, #1
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	607b      	str	r3, [r7, #4]
 800e08e:	f340 8087 	ble.w	800e1a0 <_scanf_float+0x284>
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	3301      	adds	r3, #1
 800e096:	603b      	str	r3, [r7, #0]
 800e098:	e765      	b.n	800df66 <_scanf_float+0x4a>
 800e09a:	eb1a 0105 	adds.w	r1, sl, r5
 800e09e:	f47f af6f 	bne.w	800df80 <_scanf_float+0x64>
 800e0a2:	6822      	ldr	r2, [r4, #0]
 800e0a4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e0a8:	6022      	str	r2, [r4, #0]
 800e0aa:	460d      	mov	r5, r1
 800e0ac:	468a      	mov	sl, r1
 800e0ae:	f806 3b01 	strb.w	r3, [r6], #1
 800e0b2:	e7e2      	b.n	800e07a <_scanf_float+0x15e>
 800e0b4:	6822      	ldr	r2, [r4, #0]
 800e0b6:	0610      	lsls	r0, r2, #24
 800e0b8:	f57f af62 	bpl.w	800df80 <_scanf_float+0x64>
 800e0bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e0c0:	6022      	str	r2, [r4, #0]
 800e0c2:	e7f4      	b.n	800e0ae <_scanf_float+0x192>
 800e0c4:	f1ba 0f00 	cmp.w	sl, #0
 800e0c8:	d10e      	bne.n	800e0e8 <_scanf_float+0x1cc>
 800e0ca:	f1b9 0f00 	cmp.w	r9, #0
 800e0ce:	d10e      	bne.n	800e0ee <_scanf_float+0x1d2>
 800e0d0:	6822      	ldr	r2, [r4, #0]
 800e0d2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e0d6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e0da:	d108      	bne.n	800e0ee <_scanf_float+0x1d2>
 800e0dc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e0e0:	6022      	str	r2, [r4, #0]
 800e0e2:	f04f 0a01 	mov.w	sl, #1
 800e0e6:	e7e2      	b.n	800e0ae <_scanf_float+0x192>
 800e0e8:	f1ba 0f02 	cmp.w	sl, #2
 800e0ec:	d055      	beq.n	800e19a <_scanf_float+0x27e>
 800e0ee:	2d01      	cmp	r5, #1
 800e0f0:	d002      	beq.n	800e0f8 <_scanf_float+0x1dc>
 800e0f2:	2d04      	cmp	r5, #4
 800e0f4:	f47f af44 	bne.w	800df80 <_scanf_float+0x64>
 800e0f8:	3501      	adds	r5, #1
 800e0fa:	b2ed      	uxtb	r5, r5
 800e0fc:	e7d7      	b.n	800e0ae <_scanf_float+0x192>
 800e0fe:	f1ba 0f01 	cmp.w	sl, #1
 800e102:	f47f af3d 	bne.w	800df80 <_scanf_float+0x64>
 800e106:	f04f 0a02 	mov.w	sl, #2
 800e10a:	e7d0      	b.n	800e0ae <_scanf_float+0x192>
 800e10c:	b97d      	cbnz	r5, 800e12e <_scanf_float+0x212>
 800e10e:	f1b9 0f00 	cmp.w	r9, #0
 800e112:	f47f af38 	bne.w	800df86 <_scanf_float+0x6a>
 800e116:	6822      	ldr	r2, [r4, #0]
 800e118:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e11c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e120:	f040 8108 	bne.w	800e334 <_scanf_float+0x418>
 800e124:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e128:	6022      	str	r2, [r4, #0]
 800e12a:	2501      	movs	r5, #1
 800e12c:	e7bf      	b.n	800e0ae <_scanf_float+0x192>
 800e12e:	2d03      	cmp	r5, #3
 800e130:	d0e2      	beq.n	800e0f8 <_scanf_float+0x1dc>
 800e132:	2d05      	cmp	r5, #5
 800e134:	e7de      	b.n	800e0f4 <_scanf_float+0x1d8>
 800e136:	2d02      	cmp	r5, #2
 800e138:	f47f af22 	bne.w	800df80 <_scanf_float+0x64>
 800e13c:	2503      	movs	r5, #3
 800e13e:	e7b6      	b.n	800e0ae <_scanf_float+0x192>
 800e140:	2d06      	cmp	r5, #6
 800e142:	f47f af1d 	bne.w	800df80 <_scanf_float+0x64>
 800e146:	2507      	movs	r5, #7
 800e148:	e7b1      	b.n	800e0ae <_scanf_float+0x192>
 800e14a:	6822      	ldr	r2, [r4, #0]
 800e14c:	0591      	lsls	r1, r2, #22
 800e14e:	f57f af17 	bpl.w	800df80 <_scanf_float+0x64>
 800e152:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e156:	6022      	str	r2, [r4, #0]
 800e158:	f8cd 9008 	str.w	r9, [sp, #8]
 800e15c:	e7a7      	b.n	800e0ae <_scanf_float+0x192>
 800e15e:	6822      	ldr	r2, [r4, #0]
 800e160:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e164:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e168:	d006      	beq.n	800e178 <_scanf_float+0x25c>
 800e16a:	0550      	lsls	r0, r2, #21
 800e16c:	f57f af08 	bpl.w	800df80 <_scanf_float+0x64>
 800e170:	f1b9 0f00 	cmp.w	r9, #0
 800e174:	f000 80de 	beq.w	800e334 <_scanf_float+0x418>
 800e178:	0591      	lsls	r1, r2, #22
 800e17a:	bf58      	it	pl
 800e17c:	9902      	ldrpl	r1, [sp, #8]
 800e17e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e182:	bf58      	it	pl
 800e184:	eba9 0101 	subpl.w	r1, r9, r1
 800e188:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e18c:	bf58      	it	pl
 800e18e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e192:	6022      	str	r2, [r4, #0]
 800e194:	f04f 0900 	mov.w	r9, #0
 800e198:	e789      	b.n	800e0ae <_scanf_float+0x192>
 800e19a:	f04f 0a03 	mov.w	sl, #3
 800e19e:	e786      	b.n	800e0ae <_scanf_float+0x192>
 800e1a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e1a4:	4639      	mov	r1, r7
 800e1a6:	4640      	mov	r0, r8
 800e1a8:	4798      	blx	r3
 800e1aa:	2800      	cmp	r0, #0
 800e1ac:	f43f aedb 	beq.w	800df66 <_scanf_float+0x4a>
 800e1b0:	e6e6      	b.n	800df80 <_scanf_float+0x64>
 800e1b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e1b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e1ba:	463a      	mov	r2, r7
 800e1bc:	4640      	mov	r0, r8
 800e1be:	4798      	blx	r3
 800e1c0:	6923      	ldr	r3, [r4, #16]
 800e1c2:	3b01      	subs	r3, #1
 800e1c4:	6123      	str	r3, [r4, #16]
 800e1c6:	e6e8      	b.n	800df9a <_scanf_float+0x7e>
 800e1c8:	1e6b      	subs	r3, r5, #1
 800e1ca:	2b06      	cmp	r3, #6
 800e1cc:	d824      	bhi.n	800e218 <_scanf_float+0x2fc>
 800e1ce:	2d02      	cmp	r5, #2
 800e1d0:	d836      	bhi.n	800e240 <_scanf_float+0x324>
 800e1d2:	9b01      	ldr	r3, [sp, #4]
 800e1d4:	429e      	cmp	r6, r3
 800e1d6:	f67f aee4 	bls.w	800dfa2 <_scanf_float+0x86>
 800e1da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e1de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e1e2:	463a      	mov	r2, r7
 800e1e4:	4640      	mov	r0, r8
 800e1e6:	4798      	blx	r3
 800e1e8:	6923      	ldr	r3, [r4, #16]
 800e1ea:	3b01      	subs	r3, #1
 800e1ec:	6123      	str	r3, [r4, #16]
 800e1ee:	e7f0      	b.n	800e1d2 <_scanf_float+0x2b6>
 800e1f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e1f4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e1f8:	463a      	mov	r2, r7
 800e1fa:	4640      	mov	r0, r8
 800e1fc:	4798      	blx	r3
 800e1fe:	6923      	ldr	r3, [r4, #16]
 800e200:	3b01      	subs	r3, #1
 800e202:	6123      	str	r3, [r4, #16]
 800e204:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e208:	fa5f fa8a 	uxtb.w	sl, sl
 800e20c:	f1ba 0f02 	cmp.w	sl, #2
 800e210:	d1ee      	bne.n	800e1f0 <_scanf_float+0x2d4>
 800e212:	3d03      	subs	r5, #3
 800e214:	b2ed      	uxtb	r5, r5
 800e216:	1b76      	subs	r6, r6, r5
 800e218:	6823      	ldr	r3, [r4, #0]
 800e21a:	05da      	lsls	r2, r3, #23
 800e21c:	d530      	bpl.n	800e280 <_scanf_float+0x364>
 800e21e:	055b      	lsls	r3, r3, #21
 800e220:	d511      	bpl.n	800e246 <_scanf_float+0x32a>
 800e222:	9b01      	ldr	r3, [sp, #4]
 800e224:	429e      	cmp	r6, r3
 800e226:	f67f aebc 	bls.w	800dfa2 <_scanf_float+0x86>
 800e22a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e22e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e232:	463a      	mov	r2, r7
 800e234:	4640      	mov	r0, r8
 800e236:	4798      	blx	r3
 800e238:	6923      	ldr	r3, [r4, #16]
 800e23a:	3b01      	subs	r3, #1
 800e23c:	6123      	str	r3, [r4, #16]
 800e23e:	e7f0      	b.n	800e222 <_scanf_float+0x306>
 800e240:	46aa      	mov	sl, r5
 800e242:	46b3      	mov	fp, r6
 800e244:	e7de      	b.n	800e204 <_scanf_float+0x2e8>
 800e246:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e24a:	6923      	ldr	r3, [r4, #16]
 800e24c:	2965      	cmp	r1, #101	@ 0x65
 800e24e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e252:	f106 35ff 	add.w	r5, r6, #4294967295
 800e256:	6123      	str	r3, [r4, #16]
 800e258:	d00c      	beq.n	800e274 <_scanf_float+0x358>
 800e25a:	2945      	cmp	r1, #69	@ 0x45
 800e25c:	d00a      	beq.n	800e274 <_scanf_float+0x358>
 800e25e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e262:	463a      	mov	r2, r7
 800e264:	4640      	mov	r0, r8
 800e266:	4798      	blx	r3
 800e268:	6923      	ldr	r3, [r4, #16]
 800e26a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e26e:	3b01      	subs	r3, #1
 800e270:	1eb5      	subs	r5, r6, #2
 800e272:	6123      	str	r3, [r4, #16]
 800e274:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e278:	463a      	mov	r2, r7
 800e27a:	4640      	mov	r0, r8
 800e27c:	4798      	blx	r3
 800e27e:	462e      	mov	r6, r5
 800e280:	6822      	ldr	r2, [r4, #0]
 800e282:	f012 0210 	ands.w	r2, r2, #16
 800e286:	d001      	beq.n	800e28c <_scanf_float+0x370>
 800e288:	2000      	movs	r0, #0
 800e28a:	e68b      	b.n	800dfa4 <_scanf_float+0x88>
 800e28c:	7032      	strb	r2, [r6, #0]
 800e28e:	6823      	ldr	r3, [r4, #0]
 800e290:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e298:	d11c      	bne.n	800e2d4 <_scanf_float+0x3b8>
 800e29a:	9b02      	ldr	r3, [sp, #8]
 800e29c:	454b      	cmp	r3, r9
 800e29e:	eba3 0209 	sub.w	r2, r3, r9
 800e2a2:	d123      	bne.n	800e2ec <_scanf_float+0x3d0>
 800e2a4:	9901      	ldr	r1, [sp, #4]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	4640      	mov	r0, r8
 800e2aa:	f7ff f9cd 	bl	800d648 <_strtod_r>
 800e2ae:	9b03      	ldr	r3, [sp, #12]
 800e2b0:	6821      	ldr	r1, [r4, #0]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	f011 0f02 	tst.w	r1, #2
 800e2b8:	ec57 6b10 	vmov	r6, r7, d0
 800e2bc:	f103 0204 	add.w	r2, r3, #4
 800e2c0:	d01f      	beq.n	800e302 <_scanf_float+0x3e6>
 800e2c2:	9903      	ldr	r1, [sp, #12]
 800e2c4:	600a      	str	r2, [r1, #0]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	e9c3 6700 	strd	r6, r7, [r3]
 800e2cc:	68e3      	ldr	r3, [r4, #12]
 800e2ce:	3301      	adds	r3, #1
 800e2d0:	60e3      	str	r3, [r4, #12]
 800e2d2:	e7d9      	b.n	800e288 <_scanf_float+0x36c>
 800e2d4:	9b04      	ldr	r3, [sp, #16]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d0e4      	beq.n	800e2a4 <_scanf_float+0x388>
 800e2da:	9905      	ldr	r1, [sp, #20]
 800e2dc:	230a      	movs	r3, #10
 800e2de:	3101      	adds	r1, #1
 800e2e0:	4640      	mov	r0, r8
 800e2e2:	f002 f9e9 	bl	80106b8 <_strtol_r>
 800e2e6:	9b04      	ldr	r3, [sp, #16]
 800e2e8:	9e05      	ldr	r6, [sp, #20]
 800e2ea:	1ac2      	subs	r2, r0, r3
 800e2ec:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e2f0:	429e      	cmp	r6, r3
 800e2f2:	bf28      	it	cs
 800e2f4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e2f8:	4910      	ldr	r1, [pc, #64]	@ (800e33c <_scanf_float+0x420>)
 800e2fa:	4630      	mov	r0, r6
 800e2fc:	f000 f8e4 	bl	800e4c8 <siprintf>
 800e300:	e7d0      	b.n	800e2a4 <_scanf_float+0x388>
 800e302:	f011 0f04 	tst.w	r1, #4
 800e306:	9903      	ldr	r1, [sp, #12]
 800e308:	600a      	str	r2, [r1, #0]
 800e30a:	d1dc      	bne.n	800e2c6 <_scanf_float+0x3aa>
 800e30c:	681d      	ldr	r5, [r3, #0]
 800e30e:	4632      	mov	r2, r6
 800e310:	463b      	mov	r3, r7
 800e312:	4630      	mov	r0, r6
 800e314:	4639      	mov	r1, r7
 800e316:	f7f2 fc31 	bl	8000b7c <__aeabi_dcmpun>
 800e31a:	b128      	cbz	r0, 800e328 <_scanf_float+0x40c>
 800e31c:	4808      	ldr	r0, [pc, #32]	@ (800e340 <_scanf_float+0x424>)
 800e31e:	f000 f9ff 	bl	800e720 <nanf>
 800e322:	ed85 0a00 	vstr	s0, [r5]
 800e326:	e7d1      	b.n	800e2cc <_scanf_float+0x3b0>
 800e328:	4630      	mov	r0, r6
 800e32a:	4639      	mov	r1, r7
 800e32c:	f7f2 fc84 	bl	8000c38 <__aeabi_d2f>
 800e330:	6028      	str	r0, [r5, #0]
 800e332:	e7cb      	b.n	800e2cc <_scanf_float+0x3b0>
 800e334:	f04f 0900 	mov.w	r9, #0
 800e338:	e629      	b.n	800df8e <_scanf_float+0x72>
 800e33a:	bf00      	nop
 800e33c:	08011914 	.word	0x08011914
 800e340:	08011cb5 	.word	0x08011cb5

0800e344 <std>:
 800e344:	2300      	movs	r3, #0
 800e346:	b510      	push	{r4, lr}
 800e348:	4604      	mov	r4, r0
 800e34a:	e9c0 3300 	strd	r3, r3, [r0]
 800e34e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e352:	6083      	str	r3, [r0, #8]
 800e354:	8181      	strh	r1, [r0, #12]
 800e356:	6643      	str	r3, [r0, #100]	@ 0x64
 800e358:	81c2      	strh	r2, [r0, #14]
 800e35a:	6183      	str	r3, [r0, #24]
 800e35c:	4619      	mov	r1, r3
 800e35e:	2208      	movs	r2, #8
 800e360:	305c      	adds	r0, #92	@ 0x5c
 800e362:	f000 f935 	bl	800e5d0 <memset>
 800e366:	4b0d      	ldr	r3, [pc, #52]	@ (800e39c <std+0x58>)
 800e368:	6263      	str	r3, [r4, #36]	@ 0x24
 800e36a:	4b0d      	ldr	r3, [pc, #52]	@ (800e3a0 <std+0x5c>)
 800e36c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e36e:	4b0d      	ldr	r3, [pc, #52]	@ (800e3a4 <std+0x60>)
 800e370:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e372:	4b0d      	ldr	r3, [pc, #52]	@ (800e3a8 <std+0x64>)
 800e374:	6323      	str	r3, [r4, #48]	@ 0x30
 800e376:	4b0d      	ldr	r3, [pc, #52]	@ (800e3ac <std+0x68>)
 800e378:	6224      	str	r4, [r4, #32]
 800e37a:	429c      	cmp	r4, r3
 800e37c:	d006      	beq.n	800e38c <std+0x48>
 800e37e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e382:	4294      	cmp	r4, r2
 800e384:	d002      	beq.n	800e38c <std+0x48>
 800e386:	33d0      	adds	r3, #208	@ 0xd0
 800e388:	429c      	cmp	r4, r3
 800e38a:	d105      	bne.n	800e398 <std+0x54>
 800e38c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e394:	f000 b9aa 	b.w	800e6ec <__retarget_lock_init_recursive>
 800e398:	bd10      	pop	{r4, pc}
 800e39a:	bf00      	nop
 800e39c:	0800e509 	.word	0x0800e509
 800e3a0:	0800e52b 	.word	0x0800e52b
 800e3a4:	0800e563 	.word	0x0800e563
 800e3a8:	0800e587 	.word	0x0800e587
 800e3ac:	20000918 	.word	0x20000918

0800e3b0 <stdio_exit_handler>:
 800e3b0:	4a02      	ldr	r2, [pc, #8]	@ (800e3bc <stdio_exit_handler+0xc>)
 800e3b2:	4903      	ldr	r1, [pc, #12]	@ (800e3c0 <stdio_exit_handler+0x10>)
 800e3b4:	4803      	ldr	r0, [pc, #12]	@ (800e3c4 <stdio_exit_handler+0x14>)
 800e3b6:	f000 b869 	b.w	800e48c <_fwalk_sglue>
 800e3ba:	bf00      	nop
 800e3bc:	20000090 	.word	0x20000090
 800e3c0:	08010a8d 	.word	0x08010a8d
 800e3c4:	2000020c 	.word	0x2000020c

0800e3c8 <cleanup_stdio>:
 800e3c8:	6841      	ldr	r1, [r0, #4]
 800e3ca:	4b0c      	ldr	r3, [pc, #48]	@ (800e3fc <cleanup_stdio+0x34>)
 800e3cc:	4299      	cmp	r1, r3
 800e3ce:	b510      	push	{r4, lr}
 800e3d0:	4604      	mov	r4, r0
 800e3d2:	d001      	beq.n	800e3d8 <cleanup_stdio+0x10>
 800e3d4:	f002 fb5a 	bl	8010a8c <_fflush_r>
 800e3d8:	68a1      	ldr	r1, [r4, #8]
 800e3da:	4b09      	ldr	r3, [pc, #36]	@ (800e400 <cleanup_stdio+0x38>)
 800e3dc:	4299      	cmp	r1, r3
 800e3de:	d002      	beq.n	800e3e6 <cleanup_stdio+0x1e>
 800e3e0:	4620      	mov	r0, r4
 800e3e2:	f002 fb53 	bl	8010a8c <_fflush_r>
 800e3e6:	68e1      	ldr	r1, [r4, #12]
 800e3e8:	4b06      	ldr	r3, [pc, #24]	@ (800e404 <cleanup_stdio+0x3c>)
 800e3ea:	4299      	cmp	r1, r3
 800e3ec:	d004      	beq.n	800e3f8 <cleanup_stdio+0x30>
 800e3ee:	4620      	mov	r0, r4
 800e3f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3f4:	f002 bb4a 	b.w	8010a8c <_fflush_r>
 800e3f8:	bd10      	pop	{r4, pc}
 800e3fa:	bf00      	nop
 800e3fc:	20000918 	.word	0x20000918
 800e400:	20000980 	.word	0x20000980
 800e404:	200009e8 	.word	0x200009e8

0800e408 <global_stdio_init.part.0>:
 800e408:	b510      	push	{r4, lr}
 800e40a:	4b0b      	ldr	r3, [pc, #44]	@ (800e438 <global_stdio_init.part.0+0x30>)
 800e40c:	4c0b      	ldr	r4, [pc, #44]	@ (800e43c <global_stdio_init.part.0+0x34>)
 800e40e:	4a0c      	ldr	r2, [pc, #48]	@ (800e440 <global_stdio_init.part.0+0x38>)
 800e410:	601a      	str	r2, [r3, #0]
 800e412:	4620      	mov	r0, r4
 800e414:	2200      	movs	r2, #0
 800e416:	2104      	movs	r1, #4
 800e418:	f7ff ff94 	bl	800e344 <std>
 800e41c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e420:	2201      	movs	r2, #1
 800e422:	2109      	movs	r1, #9
 800e424:	f7ff ff8e 	bl	800e344 <std>
 800e428:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e42c:	2202      	movs	r2, #2
 800e42e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e432:	2112      	movs	r1, #18
 800e434:	f7ff bf86 	b.w	800e344 <std>
 800e438:	20000a50 	.word	0x20000a50
 800e43c:	20000918 	.word	0x20000918
 800e440:	0800e3b1 	.word	0x0800e3b1

0800e444 <__sfp_lock_acquire>:
 800e444:	4801      	ldr	r0, [pc, #4]	@ (800e44c <__sfp_lock_acquire+0x8>)
 800e446:	f000 b952 	b.w	800e6ee <__retarget_lock_acquire_recursive>
 800e44a:	bf00      	nop
 800e44c:	20000a59 	.word	0x20000a59

0800e450 <__sfp_lock_release>:
 800e450:	4801      	ldr	r0, [pc, #4]	@ (800e458 <__sfp_lock_release+0x8>)
 800e452:	f000 b94d 	b.w	800e6f0 <__retarget_lock_release_recursive>
 800e456:	bf00      	nop
 800e458:	20000a59 	.word	0x20000a59

0800e45c <__sinit>:
 800e45c:	b510      	push	{r4, lr}
 800e45e:	4604      	mov	r4, r0
 800e460:	f7ff fff0 	bl	800e444 <__sfp_lock_acquire>
 800e464:	6a23      	ldr	r3, [r4, #32]
 800e466:	b11b      	cbz	r3, 800e470 <__sinit+0x14>
 800e468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e46c:	f7ff bff0 	b.w	800e450 <__sfp_lock_release>
 800e470:	4b04      	ldr	r3, [pc, #16]	@ (800e484 <__sinit+0x28>)
 800e472:	6223      	str	r3, [r4, #32]
 800e474:	4b04      	ldr	r3, [pc, #16]	@ (800e488 <__sinit+0x2c>)
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d1f5      	bne.n	800e468 <__sinit+0xc>
 800e47c:	f7ff ffc4 	bl	800e408 <global_stdio_init.part.0>
 800e480:	e7f2      	b.n	800e468 <__sinit+0xc>
 800e482:	bf00      	nop
 800e484:	0800e3c9 	.word	0x0800e3c9
 800e488:	20000a50 	.word	0x20000a50

0800e48c <_fwalk_sglue>:
 800e48c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e490:	4607      	mov	r7, r0
 800e492:	4688      	mov	r8, r1
 800e494:	4614      	mov	r4, r2
 800e496:	2600      	movs	r6, #0
 800e498:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e49c:	f1b9 0901 	subs.w	r9, r9, #1
 800e4a0:	d505      	bpl.n	800e4ae <_fwalk_sglue+0x22>
 800e4a2:	6824      	ldr	r4, [r4, #0]
 800e4a4:	2c00      	cmp	r4, #0
 800e4a6:	d1f7      	bne.n	800e498 <_fwalk_sglue+0xc>
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4ae:	89ab      	ldrh	r3, [r5, #12]
 800e4b0:	2b01      	cmp	r3, #1
 800e4b2:	d907      	bls.n	800e4c4 <_fwalk_sglue+0x38>
 800e4b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e4b8:	3301      	adds	r3, #1
 800e4ba:	d003      	beq.n	800e4c4 <_fwalk_sglue+0x38>
 800e4bc:	4629      	mov	r1, r5
 800e4be:	4638      	mov	r0, r7
 800e4c0:	47c0      	blx	r8
 800e4c2:	4306      	orrs	r6, r0
 800e4c4:	3568      	adds	r5, #104	@ 0x68
 800e4c6:	e7e9      	b.n	800e49c <_fwalk_sglue+0x10>

0800e4c8 <siprintf>:
 800e4c8:	b40e      	push	{r1, r2, r3}
 800e4ca:	b500      	push	{lr}
 800e4cc:	b09c      	sub	sp, #112	@ 0x70
 800e4ce:	ab1d      	add	r3, sp, #116	@ 0x74
 800e4d0:	9002      	str	r0, [sp, #8]
 800e4d2:	9006      	str	r0, [sp, #24]
 800e4d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e4d8:	4809      	ldr	r0, [pc, #36]	@ (800e500 <siprintf+0x38>)
 800e4da:	9107      	str	r1, [sp, #28]
 800e4dc:	9104      	str	r1, [sp, #16]
 800e4de:	4909      	ldr	r1, [pc, #36]	@ (800e504 <siprintf+0x3c>)
 800e4e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4e4:	9105      	str	r1, [sp, #20]
 800e4e6:	6800      	ldr	r0, [r0, #0]
 800e4e8:	9301      	str	r3, [sp, #4]
 800e4ea:	a902      	add	r1, sp, #8
 800e4ec:	f002 f94e 	bl	801078c <_svfiprintf_r>
 800e4f0:	9b02      	ldr	r3, [sp, #8]
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	701a      	strb	r2, [r3, #0]
 800e4f6:	b01c      	add	sp, #112	@ 0x70
 800e4f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e4fc:	b003      	add	sp, #12
 800e4fe:	4770      	bx	lr
 800e500:	20000208 	.word	0x20000208
 800e504:	ffff0208 	.word	0xffff0208

0800e508 <__sread>:
 800e508:	b510      	push	{r4, lr}
 800e50a:	460c      	mov	r4, r1
 800e50c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e510:	f000 f89e 	bl	800e650 <_read_r>
 800e514:	2800      	cmp	r0, #0
 800e516:	bfab      	itete	ge
 800e518:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e51a:	89a3      	ldrhlt	r3, [r4, #12]
 800e51c:	181b      	addge	r3, r3, r0
 800e51e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e522:	bfac      	ite	ge
 800e524:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e526:	81a3      	strhlt	r3, [r4, #12]
 800e528:	bd10      	pop	{r4, pc}

0800e52a <__swrite>:
 800e52a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e52e:	461f      	mov	r7, r3
 800e530:	898b      	ldrh	r3, [r1, #12]
 800e532:	05db      	lsls	r3, r3, #23
 800e534:	4605      	mov	r5, r0
 800e536:	460c      	mov	r4, r1
 800e538:	4616      	mov	r6, r2
 800e53a:	d505      	bpl.n	800e548 <__swrite+0x1e>
 800e53c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e540:	2302      	movs	r3, #2
 800e542:	2200      	movs	r2, #0
 800e544:	f000 f872 	bl	800e62c <_lseek_r>
 800e548:	89a3      	ldrh	r3, [r4, #12]
 800e54a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e54e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e552:	81a3      	strh	r3, [r4, #12]
 800e554:	4632      	mov	r2, r6
 800e556:	463b      	mov	r3, r7
 800e558:	4628      	mov	r0, r5
 800e55a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e55e:	f000 b889 	b.w	800e674 <_write_r>

0800e562 <__sseek>:
 800e562:	b510      	push	{r4, lr}
 800e564:	460c      	mov	r4, r1
 800e566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e56a:	f000 f85f 	bl	800e62c <_lseek_r>
 800e56e:	1c43      	adds	r3, r0, #1
 800e570:	89a3      	ldrh	r3, [r4, #12]
 800e572:	bf15      	itete	ne
 800e574:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e576:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e57a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e57e:	81a3      	strheq	r3, [r4, #12]
 800e580:	bf18      	it	ne
 800e582:	81a3      	strhne	r3, [r4, #12]
 800e584:	bd10      	pop	{r4, pc}

0800e586 <__sclose>:
 800e586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e58a:	f000 b83f 	b.w	800e60c <_close_r>
	...

0800e590 <_vsiprintf_r>:
 800e590:	b500      	push	{lr}
 800e592:	b09b      	sub	sp, #108	@ 0x6c
 800e594:	9100      	str	r1, [sp, #0]
 800e596:	9104      	str	r1, [sp, #16]
 800e598:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e59c:	9105      	str	r1, [sp, #20]
 800e59e:	9102      	str	r1, [sp, #8]
 800e5a0:	4905      	ldr	r1, [pc, #20]	@ (800e5b8 <_vsiprintf_r+0x28>)
 800e5a2:	9103      	str	r1, [sp, #12]
 800e5a4:	4669      	mov	r1, sp
 800e5a6:	f002 f8f1 	bl	801078c <_svfiprintf_r>
 800e5aa:	9b00      	ldr	r3, [sp, #0]
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	701a      	strb	r2, [r3, #0]
 800e5b0:	b01b      	add	sp, #108	@ 0x6c
 800e5b2:	f85d fb04 	ldr.w	pc, [sp], #4
 800e5b6:	bf00      	nop
 800e5b8:	ffff0208 	.word	0xffff0208

0800e5bc <vsiprintf>:
 800e5bc:	4613      	mov	r3, r2
 800e5be:	460a      	mov	r2, r1
 800e5c0:	4601      	mov	r1, r0
 800e5c2:	4802      	ldr	r0, [pc, #8]	@ (800e5cc <vsiprintf+0x10>)
 800e5c4:	6800      	ldr	r0, [r0, #0]
 800e5c6:	f7ff bfe3 	b.w	800e590 <_vsiprintf_r>
 800e5ca:	bf00      	nop
 800e5cc:	20000208 	.word	0x20000208

0800e5d0 <memset>:
 800e5d0:	4402      	add	r2, r0
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	4293      	cmp	r3, r2
 800e5d6:	d100      	bne.n	800e5da <memset+0xa>
 800e5d8:	4770      	bx	lr
 800e5da:	f803 1b01 	strb.w	r1, [r3], #1
 800e5de:	e7f9      	b.n	800e5d4 <memset+0x4>

0800e5e0 <strncmp>:
 800e5e0:	b510      	push	{r4, lr}
 800e5e2:	b16a      	cbz	r2, 800e600 <strncmp+0x20>
 800e5e4:	3901      	subs	r1, #1
 800e5e6:	1884      	adds	r4, r0, r2
 800e5e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d103      	bne.n	800e5fc <strncmp+0x1c>
 800e5f4:	42a0      	cmp	r0, r4
 800e5f6:	d001      	beq.n	800e5fc <strncmp+0x1c>
 800e5f8:	2a00      	cmp	r2, #0
 800e5fa:	d1f5      	bne.n	800e5e8 <strncmp+0x8>
 800e5fc:	1ad0      	subs	r0, r2, r3
 800e5fe:	bd10      	pop	{r4, pc}
 800e600:	4610      	mov	r0, r2
 800e602:	e7fc      	b.n	800e5fe <strncmp+0x1e>

0800e604 <_localeconv_r>:
 800e604:	4800      	ldr	r0, [pc, #0]	@ (800e608 <_localeconv_r+0x4>)
 800e606:	4770      	bx	lr
 800e608:	2000018c 	.word	0x2000018c

0800e60c <_close_r>:
 800e60c:	b538      	push	{r3, r4, r5, lr}
 800e60e:	4d06      	ldr	r5, [pc, #24]	@ (800e628 <_close_r+0x1c>)
 800e610:	2300      	movs	r3, #0
 800e612:	4604      	mov	r4, r0
 800e614:	4608      	mov	r0, r1
 800e616:	602b      	str	r3, [r5, #0]
 800e618:	f7f3 faca 	bl	8001bb0 <_close>
 800e61c:	1c43      	adds	r3, r0, #1
 800e61e:	d102      	bne.n	800e626 <_close_r+0x1a>
 800e620:	682b      	ldr	r3, [r5, #0]
 800e622:	b103      	cbz	r3, 800e626 <_close_r+0x1a>
 800e624:	6023      	str	r3, [r4, #0]
 800e626:	bd38      	pop	{r3, r4, r5, pc}
 800e628:	20000a54 	.word	0x20000a54

0800e62c <_lseek_r>:
 800e62c:	b538      	push	{r3, r4, r5, lr}
 800e62e:	4d07      	ldr	r5, [pc, #28]	@ (800e64c <_lseek_r+0x20>)
 800e630:	4604      	mov	r4, r0
 800e632:	4608      	mov	r0, r1
 800e634:	4611      	mov	r1, r2
 800e636:	2200      	movs	r2, #0
 800e638:	602a      	str	r2, [r5, #0]
 800e63a:	461a      	mov	r2, r3
 800e63c:	f7f3 fadf 	bl	8001bfe <_lseek>
 800e640:	1c43      	adds	r3, r0, #1
 800e642:	d102      	bne.n	800e64a <_lseek_r+0x1e>
 800e644:	682b      	ldr	r3, [r5, #0]
 800e646:	b103      	cbz	r3, 800e64a <_lseek_r+0x1e>
 800e648:	6023      	str	r3, [r4, #0]
 800e64a:	bd38      	pop	{r3, r4, r5, pc}
 800e64c:	20000a54 	.word	0x20000a54

0800e650 <_read_r>:
 800e650:	b538      	push	{r3, r4, r5, lr}
 800e652:	4d07      	ldr	r5, [pc, #28]	@ (800e670 <_read_r+0x20>)
 800e654:	4604      	mov	r4, r0
 800e656:	4608      	mov	r0, r1
 800e658:	4611      	mov	r1, r2
 800e65a:	2200      	movs	r2, #0
 800e65c:	602a      	str	r2, [r5, #0]
 800e65e:	461a      	mov	r2, r3
 800e660:	f7f3 fa6d 	bl	8001b3e <_read>
 800e664:	1c43      	adds	r3, r0, #1
 800e666:	d102      	bne.n	800e66e <_read_r+0x1e>
 800e668:	682b      	ldr	r3, [r5, #0]
 800e66a:	b103      	cbz	r3, 800e66e <_read_r+0x1e>
 800e66c:	6023      	str	r3, [r4, #0]
 800e66e:	bd38      	pop	{r3, r4, r5, pc}
 800e670:	20000a54 	.word	0x20000a54

0800e674 <_write_r>:
 800e674:	b538      	push	{r3, r4, r5, lr}
 800e676:	4d07      	ldr	r5, [pc, #28]	@ (800e694 <_write_r+0x20>)
 800e678:	4604      	mov	r4, r0
 800e67a:	4608      	mov	r0, r1
 800e67c:	4611      	mov	r1, r2
 800e67e:	2200      	movs	r2, #0
 800e680:	602a      	str	r2, [r5, #0]
 800e682:	461a      	mov	r2, r3
 800e684:	f7f3 fa78 	bl	8001b78 <_write>
 800e688:	1c43      	adds	r3, r0, #1
 800e68a:	d102      	bne.n	800e692 <_write_r+0x1e>
 800e68c:	682b      	ldr	r3, [r5, #0]
 800e68e:	b103      	cbz	r3, 800e692 <_write_r+0x1e>
 800e690:	6023      	str	r3, [r4, #0]
 800e692:	bd38      	pop	{r3, r4, r5, pc}
 800e694:	20000a54 	.word	0x20000a54

0800e698 <__errno>:
 800e698:	4b01      	ldr	r3, [pc, #4]	@ (800e6a0 <__errno+0x8>)
 800e69a:	6818      	ldr	r0, [r3, #0]
 800e69c:	4770      	bx	lr
 800e69e:	bf00      	nop
 800e6a0:	20000208 	.word	0x20000208

0800e6a4 <__libc_init_array>:
 800e6a4:	b570      	push	{r4, r5, r6, lr}
 800e6a6:	4d0d      	ldr	r5, [pc, #52]	@ (800e6dc <__libc_init_array+0x38>)
 800e6a8:	4c0d      	ldr	r4, [pc, #52]	@ (800e6e0 <__libc_init_array+0x3c>)
 800e6aa:	1b64      	subs	r4, r4, r5
 800e6ac:	10a4      	asrs	r4, r4, #2
 800e6ae:	2600      	movs	r6, #0
 800e6b0:	42a6      	cmp	r6, r4
 800e6b2:	d109      	bne.n	800e6c8 <__libc_init_array+0x24>
 800e6b4:	4d0b      	ldr	r5, [pc, #44]	@ (800e6e4 <__libc_init_array+0x40>)
 800e6b6:	4c0c      	ldr	r4, [pc, #48]	@ (800e6e8 <__libc_init_array+0x44>)
 800e6b8:	f003 f80e 	bl	80116d8 <_init>
 800e6bc:	1b64      	subs	r4, r4, r5
 800e6be:	10a4      	asrs	r4, r4, #2
 800e6c0:	2600      	movs	r6, #0
 800e6c2:	42a6      	cmp	r6, r4
 800e6c4:	d105      	bne.n	800e6d2 <__libc_init_array+0x2e>
 800e6c6:	bd70      	pop	{r4, r5, r6, pc}
 800e6c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6cc:	4798      	blx	r3
 800e6ce:	3601      	adds	r6, #1
 800e6d0:	e7ee      	b.n	800e6b0 <__libc_init_array+0xc>
 800e6d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6d6:	4798      	blx	r3
 800e6d8:	3601      	adds	r6, #1
 800e6da:	e7f2      	b.n	800e6c2 <__libc_init_array+0x1e>
 800e6dc:	08011d08 	.word	0x08011d08
 800e6e0:	08011d08 	.word	0x08011d08
 800e6e4:	08011d08 	.word	0x08011d08
 800e6e8:	08011d0c 	.word	0x08011d0c

0800e6ec <__retarget_lock_init_recursive>:
 800e6ec:	4770      	bx	lr

0800e6ee <__retarget_lock_acquire_recursive>:
 800e6ee:	4770      	bx	lr

0800e6f0 <__retarget_lock_release_recursive>:
 800e6f0:	4770      	bx	lr

0800e6f2 <memcpy>:
 800e6f2:	440a      	add	r2, r1
 800e6f4:	4291      	cmp	r1, r2
 800e6f6:	f100 33ff 	add.w	r3, r0, #4294967295
 800e6fa:	d100      	bne.n	800e6fe <memcpy+0xc>
 800e6fc:	4770      	bx	lr
 800e6fe:	b510      	push	{r4, lr}
 800e700:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e704:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e708:	4291      	cmp	r1, r2
 800e70a:	d1f9      	bne.n	800e700 <memcpy+0xe>
 800e70c:	bd10      	pop	{r4, pc}
	...

0800e710 <nan>:
 800e710:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e718 <nan+0x8>
 800e714:	4770      	bx	lr
 800e716:	bf00      	nop
 800e718:	00000000 	.word	0x00000000
 800e71c:	7ff80000 	.word	0x7ff80000

0800e720 <nanf>:
 800e720:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e728 <nanf+0x8>
 800e724:	4770      	bx	lr
 800e726:	bf00      	nop
 800e728:	7fc00000 	.word	0x7fc00000

0800e72c <quorem>:
 800e72c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e730:	6903      	ldr	r3, [r0, #16]
 800e732:	690c      	ldr	r4, [r1, #16]
 800e734:	42a3      	cmp	r3, r4
 800e736:	4607      	mov	r7, r0
 800e738:	db7e      	blt.n	800e838 <quorem+0x10c>
 800e73a:	3c01      	subs	r4, #1
 800e73c:	f101 0814 	add.w	r8, r1, #20
 800e740:	00a3      	lsls	r3, r4, #2
 800e742:	f100 0514 	add.w	r5, r0, #20
 800e746:	9300      	str	r3, [sp, #0]
 800e748:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e74c:	9301      	str	r3, [sp, #4]
 800e74e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e752:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e756:	3301      	adds	r3, #1
 800e758:	429a      	cmp	r2, r3
 800e75a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e75e:	fbb2 f6f3 	udiv	r6, r2, r3
 800e762:	d32e      	bcc.n	800e7c2 <quorem+0x96>
 800e764:	f04f 0a00 	mov.w	sl, #0
 800e768:	46c4      	mov	ip, r8
 800e76a:	46ae      	mov	lr, r5
 800e76c:	46d3      	mov	fp, sl
 800e76e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e772:	b298      	uxth	r0, r3
 800e774:	fb06 a000 	mla	r0, r6, r0, sl
 800e778:	0c02      	lsrs	r2, r0, #16
 800e77a:	0c1b      	lsrs	r3, r3, #16
 800e77c:	fb06 2303 	mla	r3, r6, r3, r2
 800e780:	f8de 2000 	ldr.w	r2, [lr]
 800e784:	b280      	uxth	r0, r0
 800e786:	b292      	uxth	r2, r2
 800e788:	1a12      	subs	r2, r2, r0
 800e78a:	445a      	add	r2, fp
 800e78c:	f8de 0000 	ldr.w	r0, [lr]
 800e790:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e794:	b29b      	uxth	r3, r3
 800e796:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e79a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e79e:	b292      	uxth	r2, r2
 800e7a0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e7a4:	45e1      	cmp	r9, ip
 800e7a6:	f84e 2b04 	str.w	r2, [lr], #4
 800e7aa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e7ae:	d2de      	bcs.n	800e76e <quorem+0x42>
 800e7b0:	9b00      	ldr	r3, [sp, #0]
 800e7b2:	58eb      	ldr	r3, [r5, r3]
 800e7b4:	b92b      	cbnz	r3, 800e7c2 <quorem+0x96>
 800e7b6:	9b01      	ldr	r3, [sp, #4]
 800e7b8:	3b04      	subs	r3, #4
 800e7ba:	429d      	cmp	r5, r3
 800e7bc:	461a      	mov	r2, r3
 800e7be:	d32f      	bcc.n	800e820 <quorem+0xf4>
 800e7c0:	613c      	str	r4, [r7, #16]
 800e7c2:	4638      	mov	r0, r7
 800e7c4:	f001 fd10 	bl	80101e8 <__mcmp>
 800e7c8:	2800      	cmp	r0, #0
 800e7ca:	db25      	blt.n	800e818 <quorem+0xec>
 800e7cc:	4629      	mov	r1, r5
 800e7ce:	2000      	movs	r0, #0
 800e7d0:	f858 2b04 	ldr.w	r2, [r8], #4
 800e7d4:	f8d1 c000 	ldr.w	ip, [r1]
 800e7d8:	fa1f fe82 	uxth.w	lr, r2
 800e7dc:	fa1f f38c 	uxth.w	r3, ip
 800e7e0:	eba3 030e 	sub.w	r3, r3, lr
 800e7e4:	4403      	add	r3, r0
 800e7e6:	0c12      	lsrs	r2, r2, #16
 800e7e8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e7ec:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e7f0:	b29b      	uxth	r3, r3
 800e7f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e7f6:	45c1      	cmp	r9, r8
 800e7f8:	f841 3b04 	str.w	r3, [r1], #4
 800e7fc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e800:	d2e6      	bcs.n	800e7d0 <quorem+0xa4>
 800e802:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e806:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e80a:	b922      	cbnz	r2, 800e816 <quorem+0xea>
 800e80c:	3b04      	subs	r3, #4
 800e80e:	429d      	cmp	r5, r3
 800e810:	461a      	mov	r2, r3
 800e812:	d30b      	bcc.n	800e82c <quorem+0x100>
 800e814:	613c      	str	r4, [r7, #16]
 800e816:	3601      	adds	r6, #1
 800e818:	4630      	mov	r0, r6
 800e81a:	b003      	add	sp, #12
 800e81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e820:	6812      	ldr	r2, [r2, #0]
 800e822:	3b04      	subs	r3, #4
 800e824:	2a00      	cmp	r2, #0
 800e826:	d1cb      	bne.n	800e7c0 <quorem+0x94>
 800e828:	3c01      	subs	r4, #1
 800e82a:	e7c6      	b.n	800e7ba <quorem+0x8e>
 800e82c:	6812      	ldr	r2, [r2, #0]
 800e82e:	3b04      	subs	r3, #4
 800e830:	2a00      	cmp	r2, #0
 800e832:	d1ef      	bne.n	800e814 <quorem+0xe8>
 800e834:	3c01      	subs	r4, #1
 800e836:	e7ea      	b.n	800e80e <quorem+0xe2>
 800e838:	2000      	movs	r0, #0
 800e83a:	e7ee      	b.n	800e81a <quorem+0xee>
 800e83c:	0000      	movs	r0, r0
	...

0800e840 <_dtoa_r>:
 800e840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e844:	69c7      	ldr	r7, [r0, #28]
 800e846:	b099      	sub	sp, #100	@ 0x64
 800e848:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e84c:	ec55 4b10 	vmov	r4, r5, d0
 800e850:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e852:	9109      	str	r1, [sp, #36]	@ 0x24
 800e854:	4683      	mov	fp, r0
 800e856:	920e      	str	r2, [sp, #56]	@ 0x38
 800e858:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e85a:	b97f      	cbnz	r7, 800e87c <_dtoa_r+0x3c>
 800e85c:	2010      	movs	r0, #16
 800e85e:	f001 f937 	bl	800fad0 <malloc>
 800e862:	4602      	mov	r2, r0
 800e864:	f8cb 001c 	str.w	r0, [fp, #28]
 800e868:	b920      	cbnz	r0, 800e874 <_dtoa_r+0x34>
 800e86a:	4ba7      	ldr	r3, [pc, #668]	@ (800eb08 <_dtoa_r+0x2c8>)
 800e86c:	21ef      	movs	r1, #239	@ 0xef
 800e86e:	48a7      	ldr	r0, [pc, #668]	@ (800eb0c <_dtoa_r+0x2cc>)
 800e870:	f002 f95e 	bl	8010b30 <__assert_func>
 800e874:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e878:	6007      	str	r7, [r0, #0]
 800e87a:	60c7      	str	r7, [r0, #12]
 800e87c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e880:	6819      	ldr	r1, [r3, #0]
 800e882:	b159      	cbz	r1, 800e89c <_dtoa_r+0x5c>
 800e884:	685a      	ldr	r2, [r3, #4]
 800e886:	604a      	str	r2, [r1, #4]
 800e888:	2301      	movs	r3, #1
 800e88a:	4093      	lsls	r3, r2
 800e88c:	608b      	str	r3, [r1, #8]
 800e88e:	4658      	mov	r0, fp
 800e890:	f001 fa26 	bl	800fce0 <_Bfree>
 800e894:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e898:	2200      	movs	r2, #0
 800e89a:	601a      	str	r2, [r3, #0]
 800e89c:	1e2b      	subs	r3, r5, #0
 800e89e:	bfb9      	ittee	lt
 800e8a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e8a4:	9303      	strlt	r3, [sp, #12]
 800e8a6:	2300      	movge	r3, #0
 800e8a8:	6033      	strge	r3, [r6, #0]
 800e8aa:	9f03      	ldr	r7, [sp, #12]
 800e8ac:	4b98      	ldr	r3, [pc, #608]	@ (800eb10 <_dtoa_r+0x2d0>)
 800e8ae:	bfbc      	itt	lt
 800e8b0:	2201      	movlt	r2, #1
 800e8b2:	6032      	strlt	r2, [r6, #0]
 800e8b4:	43bb      	bics	r3, r7
 800e8b6:	d112      	bne.n	800e8de <_dtoa_r+0x9e>
 800e8b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e8ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e8be:	6013      	str	r3, [r2, #0]
 800e8c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e8c4:	4323      	orrs	r3, r4
 800e8c6:	f000 854d 	beq.w	800f364 <_dtoa_r+0xb24>
 800e8ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e8cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800eb24 <_dtoa_r+0x2e4>
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	f000 854f 	beq.w	800f374 <_dtoa_r+0xb34>
 800e8d6:	f10a 0303 	add.w	r3, sl, #3
 800e8da:	f000 bd49 	b.w	800f370 <_dtoa_r+0xb30>
 800e8de:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	ec51 0b17 	vmov	r0, r1, d7
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e8ee:	f7f2 f913 	bl	8000b18 <__aeabi_dcmpeq>
 800e8f2:	4680      	mov	r8, r0
 800e8f4:	b158      	cbz	r0, 800e90e <_dtoa_r+0xce>
 800e8f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	6013      	str	r3, [r2, #0]
 800e8fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e8fe:	b113      	cbz	r3, 800e906 <_dtoa_r+0xc6>
 800e900:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e902:	4b84      	ldr	r3, [pc, #528]	@ (800eb14 <_dtoa_r+0x2d4>)
 800e904:	6013      	str	r3, [r2, #0]
 800e906:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800eb28 <_dtoa_r+0x2e8>
 800e90a:	f000 bd33 	b.w	800f374 <_dtoa_r+0xb34>
 800e90e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e912:	aa16      	add	r2, sp, #88	@ 0x58
 800e914:	a917      	add	r1, sp, #92	@ 0x5c
 800e916:	4658      	mov	r0, fp
 800e918:	f001 fd86 	bl	8010428 <__d2b>
 800e91c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e920:	4681      	mov	r9, r0
 800e922:	2e00      	cmp	r6, #0
 800e924:	d077      	beq.n	800ea16 <_dtoa_r+0x1d6>
 800e926:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e928:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e92c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e930:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e934:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e938:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e93c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e940:	4619      	mov	r1, r3
 800e942:	2200      	movs	r2, #0
 800e944:	4b74      	ldr	r3, [pc, #464]	@ (800eb18 <_dtoa_r+0x2d8>)
 800e946:	f7f1 fcc7 	bl	80002d8 <__aeabi_dsub>
 800e94a:	a369      	add	r3, pc, #420	@ (adr r3, 800eaf0 <_dtoa_r+0x2b0>)
 800e94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e950:	f7f1 fe7a 	bl	8000648 <__aeabi_dmul>
 800e954:	a368      	add	r3, pc, #416	@ (adr r3, 800eaf8 <_dtoa_r+0x2b8>)
 800e956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e95a:	f7f1 fcbf 	bl	80002dc <__adddf3>
 800e95e:	4604      	mov	r4, r0
 800e960:	4630      	mov	r0, r6
 800e962:	460d      	mov	r5, r1
 800e964:	f7f1 fe06 	bl	8000574 <__aeabi_i2d>
 800e968:	a365      	add	r3, pc, #404	@ (adr r3, 800eb00 <_dtoa_r+0x2c0>)
 800e96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e96e:	f7f1 fe6b 	bl	8000648 <__aeabi_dmul>
 800e972:	4602      	mov	r2, r0
 800e974:	460b      	mov	r3, r1
 800e976:	4620      	mov	r0, r4
 800e978:	4629      	mov	r1, r5
 800e97a:	f7f1 fcaf 	bl	80002dc <__adddf3>
 800e97e:	4604      	mov	r4, r0
 800e980:	460d      	mov	r5, r1
 800e982:	f7f2 f911 	bl	8000ba8 <__aeabi_d2iz>
 800e986:	2200      	movs	r2, #0
 800e988:	4607      	mov	r7, r0
 800e98a:	2300      	movs	r3, #0
 800e98c:	4620      	mov	r0, r4
 800e98e:	4629      	mov	r1, r5
 800e990:	f7f2 f8cc 	bl	8000b2c <__aeabi_dcmplt>
 800e994:	b140      	cbz	r0, 800e9a8 <_dtoa_r+0x168>
 800e996:	4638      	mov	r0, r7
 800e998:	f7f1 fdec 	bl	8000574 <__aeabi_i2d>
 800e99c:	4622      	mov	r2, r4
 800e99e:	462b      	mov	r3, r5
 800e9a0:	f7f2 f8ba 	bl	8000b18 <__aeabi_dcmpeq>
 800e9a4:	b900      	cbnz	r0, 800e9a8 <_dtoa_r+0x168>
 800e9a6:	3f01      	subs	r7, #1
 800e9a8:	2f16      	cmp	r7, #22
 800e9aa:	d851      	bhi.n	800ea50 <_dtoa_r+0x210>
 800e9ac:	4b5b      	ldr	r3, [pc, #364]	@ (800eb1c <_dtoa_r+0x2dc>)
 800e9ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e9ba:	f7f2 f8b7 	bl	8000b2c <__aeabi_dcmplt>
 800e9be:	2800      	cmp	r0, #0
 800e9c0:	d048      	beq.n	800ea54 <_dtoa_r+0x214>
 800e9c2:	3f01      	subs	r7, #1
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	9312      	str	r3, [sp, #72]	@ 0x48
 800e9c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e9ca:	1b9b      	subs	r3, r3, r6
 800e9cc:	1e5a      	subs	r2, r3, #1
 800e9ce:	bf44      	itt	mi
 800e9d0:	f1c3 0801 	rsbmi	r8, r3, #1
 800e9d4:	2300      	movmi	r3, #0
 800e9d6:	9208      	str	r2, [sp, #32]
 800e9d8:	bf54      	ite	pl
 800e9da:	f04f 0800 	movpl.w	r8, #0
 800e9de:	9308      	strmi	r3, [sp, #32]
 800e9e0:	2f00      	cmp	r7, #0
 800e9e2:	db39      	blt.n	800ea58 <_dtoa_r+0x218>
 800e9e4:	9b08      	ldr	r3, [sp, #32]
 800e9e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e9e8:	443b      	add	r3, r7
 800e9ea:	9308      	str	r3, [sp, #32]
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800e9f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9f2:	2b09      	cmp	r3, #9
 800e9f4:	d864      	bhi.n	800eac0 <_dtoa_r+0x280>
 800e9f6:	2b05      	cmp	r3, #5
 800e9f8:	bfc4      	itt	gt
 800e9fa:	3b04      	subgt	r3, #4
 800e9fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e9fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea00:	f1a3 0302 	sub.w	r3, r3, #2
 800ea04:	bfcc      	ite	gt
 800ea06:	2400      	movgt	r4, #0
 800ea08:	2401      	movle	r4, #1
 800ea0a:	2b03      	cmp	r3, #3
 800ea0c:	d863      	bhi.n	800ead6 <_dtoa_r+0x296>
 800ea0e:	e8df f003 	tbb	[pc, r3]
 800ea12:	372a      	.short	0x372a
 800ea14:	5535      	.short	0x5535
 800ea16:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ea1a:	441e      	add	r6, r3
 800ea1c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ea20:	2b20      	cmp	r3, #32
 800ea22:	bfc1      	itttt	gt
 800ea24:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ea28:	409f      	lslgt	r7, r3
 800ea2a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ea2e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ea32:	bfd6      	itet	le
 800ea34:	f1c3 0320 	rsble	r3, r3, #32
 800ea38:	ea47 0003 	orrgt.w	r0, r7, r3
 800ea3c:	fa04 f003 	lslle.w	r0, r4, r3
 800ea40:	f7f1 fd88 	bl	8000554 <__aeabi_ui2d>
 800ea44:	2201      	movs	r2, #1
 800ea46:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ea4a:	3e01      	subs	r6, #1
 800ea4c:	9214      	str	r2, [sp, #80]	@ 0x50
 800ea4e:	e777      	b.n	800e940 <_dtoa_r+0x100>
 800ea50:	2301      	movs	r3, #1
 800ea52:	e7b8      	b.n	800e9c6 <_dtoa_r+0x186>
 800ea54:	9012      	str	r0, [sp, #72]	@ 0x48
 800ea56:	e7b7      	b.n	800e9c8 <_dtoa_r+0x188>
 800ea58:	427b      	negs	r3, r7
 800ea5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	eba8 0807 	sub.w	r8, r8, r7
 800ea62:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ea64:	e7c4      	b.n	800e9f0 <_dtoa_r+0x1b0>
 800ea66:	2300      	movs	r3, #0
 800ea68:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ea6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	dc35      	bgt.n	800eadc <_dtoa_r+0x29c>
 800ea70:	2301      	movs	r3, #1
 800ea72:	9300      	str	r3, [sp, #0]
 800ea74:	9307      	str	r3, [sp, #28]
 800ea76:	461a      	mov	r2, r3
 800ea78:	920e      	str	r2, [sp, #56]	@ 0x38
 800ea7a:	e00b      	b.n	800ea94 <_dtoa_r+0x254>
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	e7f3      	b.n	800ea68 <_dtoa_r+0x228>
 800ea80:	2300      	movs	r3, #0
 800ea82:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ea84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea86:	18fb      	adds	r3, r7, r3
 800ea88:	9300      	str	r3, [sp, #0]
 800ea8a:	3301      	adds	r3, #1
 800ea8c:	2b01      	cmp	r3, #1
 800ea8e:	9307      	str	r3, [sp, #28]
 800ea90:	bfb8      	it	lt
 800ea92:	2301      	movlt	r3, #1
 800ea94:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ea98:	2100      	movs	r1, #0
 800ea9a:	2204      	movs	r2, #4
 800ea9c:	f102 0514 	add.w	r5, r2, #20
 800eaa0:	429d      	cmp	r5, r3
 800eaa2:	d91f      	bls.n	800eae4 <_dtoa_r+0x2a4>
 800eaa4:	6041      	str	r1, [r0, #4]
 800eaa6:	4658      	mov	r0, fp
 800eaa8:	f001 f8da 	bl	800fc60 <_Balloc>
 800eaac:	4682      	mov	sl, r0
 800eaae:	2800      	cmp	r0, #0
 800eab0:	d13c      	bne.n	800eb2c <_dtoa_r+0x2ec>
 800eab2:	4b1b      	ldr	r3, [pc, #108]	@ (800eb20 <_dtoa_r+0x2e0>)
 800eab4:	4602      	mov	r2, r0
 800eab6:	f240 11af 	movw	r1, #431	@ 0x1af
 800eaba:	e6d8      	b.n	800e86e <_dtoa_r+0x2e>
 800eabc:	2301      	movs	r3, #1
 800eabe:	e7e0      	b.n	800ea82 <_dtoa_r+0x242>
 800eac0:	2401      	movs	r4, #1
 800eac2:	2300      	movs	r3, #0
 800eac4:	9309      	str	r3, [sp, #36]	@ 0x24
 800eac6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800eac8:	f04f 33ff 	mov.w	r3, #4294967295
 800eacc:	9300      	str	r3, [sp, #0]
 800eace:	9307      	str	r3, [sp, #28]
 800ead0:	2200      	movs	r2, #0
 800ead2:	2312      	movs	r3, #18
 800ead4:	e7d0      	b.n	800ea78 <_dtoa_r+0x238>
 800ead6:	2301      	movs	r3, #1
 800ead8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eada:	e7f5      	b.n	800eac8 <_dtoa_r+0x288>
 800eadc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eade:	9300      	str	r3, [sp, #0]
 800eae0:	9307      	str	r3, [sp, #28]
 800eae2:	e7d7      	b.n	800ea94 <_dtoa_r+0x254>
 800eae4:	3101      	adds	r1, #1
 800eae6:	0052      	lsls	r2, r2, #1
 800eae8:	e7d8      	b.n	800ea9c <_dtoa_r+0x25c>
 800eaea:	bf00      	nop
 800eaec:	f3af 8000 	nop.w
 800eaf0:	636f4361 	.word	0x636f4361
 800eaf4:	3fd287a7 	.word	0x3fd287a7
 800eaf8:	8b60c8b3 	.word	0x8b60c8b3
 800eafc:	3fc68a28 	.word	0x3fc68a28
 800eb00:	509f79fb 	.word	0x509f79fb
 800eb04:	3fd34413 	.word	0x3fd34413
 800eb08:	0801192e 	.word	0x0801192e
 800eb0c:	08011945 	.word	0x08011945
 800eb10:	7ff00000 	.word	0x7ff00000
 800eb14:	080118f1 	.word	0x080118f1
 800eb18:	3ff80000 	.word	0x3ff80000
 800eb1c:	08011aa0 	.word	0x08011aa0
 800eb20:	0801199d 	.word	0x0801199d
 800eb24:	0801192a 	.word	0x0801192a
 800eb28:	080118f0 	.word	0x080118f0
 800eb2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800eb30:	6018      	str	r0, [r3, #0]
 800eb32:	9b07      	ldr	r3, [sp, #28]
 800eb34:	2b0e      	cmp	r3, #14
 800eb36:	f200 80a4 	bhi.w	800ec82 <_dtoa_r+0x442>
 800eb3a:	2c00      	cmp	r4, #0
 800eb3c:	f000 80a1 	beq.w	800ec82 <_dtoa_r+0x442>
 800eb40:	2f00      	cmp	r7, #0
 800eb42:	dd33      	ble.n	800ebac <_dtoa_r+0x36c>
 800eb44:	4bad      	ldr	r3, [pc, #692]	@ (800edfc <_dtoa_r+0x5bc>)
 800eb46:	f007 020f 	and.w	r2, r7, #15
 800eb4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eb4e:	ed93 7b00 	vldr	d7, [r3]
 800eb52:	05f8      	lsls	r0, r7, #23
 800eb54:	ed8d 7b04 	vstr	d7, [sp, #16]
 800eb58:	ea4f 1427 	mov.w	r4, r7, asr #4
 800eb5c:	d516      	bpl.n	800eb8c <_dtoa_r+0x34c>
 800eb5e:	4ba8      	ldr	r3, [pc, #672]	@ (800ee00 <_dtoa_r+0x5c0>)
 800eb60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eb64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800eb68:	f7f1 fe98 	bl	800089c <__aeabi_ddiv>
 800eb6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb70:	f004 040f 	and.w	r4, r4, #15
 800eb74:	2603      	movs	r6, #3
 800eb76:	4da2      	ldr	r5, [pc, #648]	@ (800ee00 <_dtoa_r+0x5c0>)
 800eb78:	b954      	cbnz	r4, 800eb90 <_dtoa_r+0x350>
 800eb7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb82:	f7f1 fe8b 	bl	800089c <__aeabi_ddiv>
 800eb86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb8a:	e028      	b.n	800ebde <_dtoa_r+0x39e>
 800eb8c:	2602      	movs	r6, #2
 800eb8e:	e7f2      	b.n	800eb76 <_dtoa_r+0x336>
 800eb90:	07e1      	lsls	r1, r4, #31
 800eb92:	d508      	bpl.n	800eba6 <_dtoa_r+0x366>
 800eb94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb98:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eb9c:	f7f1 fd54 	bl	8000648 <__aeabi_dmul>
 800eba0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eba4:	3601      	adds	r6, #1
 800eba6:	1064      	asrs	r4, r4, #1
 800eba8:	3508      	adds	r5, #8
 800ebaa:	e7e5      	b.n	800eb78 <_dtoa_r+0x338>
 800ebac:	f000 80d2 	beq.w	800ed54 <_dtoa_r+0x514>
 800ebb0:	427c      	negs	r4, r7
 800ebb2:	4b92      	ldr	r3, [pc, #584]	@ (800edfc <_dtoa_r+0x5bc>)
 800ebb4:	4d92      	ldr	r5, [pc, #584]	@ (800ee00 <_dtoa_r+0x5c0>)
 800ebb6:	f004 020f 	and.w	r2, r4, #15
 800ebba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ebbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ebc6:	f7f1 fd3f 	bl	8000648 <__aeabi_dmul>
 800ebca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebce:	1124      	asrs	r4, r4, #4
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	2602      	movs	r6, #2
 800ebd4:	2c00      	cmp	r4, #0
 800ebd6:	f040 80b2 	bne.w	800ed3e <_dtoa_r+0x4fe>
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d1d3      	bne.n	800eb86 <_dtoa_r+0x346>
 800ebde:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ebe0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	f000 80b7 	beq.w	800ed58 <_dtoa_r+0x518>
 800ebea:	4b86      	ldr	r3, [pc, #536]	@ (800ee04 <_dtoa_r+0x5c4>)
 800ebec:	2200      	movs	r2, #0
 800ebee:	4620      	mov	r0, r4
 800ebf0:	4629      	mov	r1, r5
 800ebf2:	f7f1 ff9b 	bl	8000b2c <__aeabi_dcmplt>
 800ebf6:	2800      	cmp	r0, #0
 800ebf8:	f000 80ae 	beq.w	800ed58 <_dtoa_r+0x518>
 800ebfc:	9b07      	ldr	r3, [sp, #28]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	f000 80aa 	beq.w	800ed58 <_dtoa_r+0x518>
 800ec04:	9b00      	ldr	r3, [sp, #0]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	dd37      	ble.n	800ec7a <_dtoa_r+0x43a>
 800ec0a:	1e7b      	subs	r3, r7, #1
 800ec0c:	9304      	str	r3, [sp, #16]
 800ec0e:	4620      	mov	r0, r4
 800ec10:	4b7d      	ldr	r3, [pc, #500]	@ (800ee08 <_dtoa_r+0x5c8>)
 800ec12:	2200      	movs	r2, #0
 800ec14:	4629      	mov	r1, r5
 800ec16:	f7f1 fd17 	bl	8000648 <__aeabi_dmul>
 800ec1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec1e:	9c00      	ldr	r4, [sp, #0]
 800ec20:	3601      	adds	r6, #1
 800ec22:	4630      	mov	r0, r6
 800ec24:	f7f1 fca6 	bl	8000574 <__aeabi_i2d>
 800ec28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec2c:	f7f1 fd0c 	bl	8000648 <__aeabi_dmul>
 800ec30:	4b76      	ldr	r3, [pc, #472]	@ (800ee0c <_dtoa_r+0x5cc>)
 800ec32:	2200      	movs	r2, #0
 800ec34:	f7f1 fb52 	bl	80002dc <__adddf3>
 800ec38:	4605      	mov	r5, r0
 800ec3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ec3e:	2c00      	cmp	r4, #0
 800ec40:	f040 808d 	bne.w	800ed5e <_dtoa_r+0x51e>
 800ec44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec48:	4b71      	ldr	r3, [pc, #452]	@ (800ee10 <_dtoa_r+0x5d0>)
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	f7f1 fb44 	bl	80002d8 <__aeabi_dsub>
 800ec50:	4602      	mov	r2, r0
 800ec52:	460b      	mov	r3, r1
 800ec54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ec58:	462a      	mov	r2, r5
 800ec5a:	4633      	mov	r3, r6
 800ec5c:	f7f1 ff84 	bl	8000b68 <__aeabi_dcmpgt>
 800ec60:	2800      	cmp	r0, #0
 800ec62:	f040 828b 	bne.w	800f17c <_dtoa_r+0x93c>
 800ec66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec6a:	462a      	mov	r2, r5
 800ec6c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ec70:	f7f1 ff5c 	bl	8000b2c <__aeabi_dcmplt>
 800ec74:	2800      	cmp	r0, #0
 800ec76:	f040 8128 	bne.w	800eeca <_dtoa_r+0x68a>
 800ec7a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ec7e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ec82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	f2c0 815a 	blt.w	800ef3e <_dtoa_r+0x6fe>
 800ec8a:	2f0e      	cmp	r7, #14
 800ec8c:	f300 8157 	bgt.w	800ef3e <_dtoa_r+0x6fe>
 800ec90:	4b5a      	ldr	r3, [pc, #360]	@ (800edfc <_dtoa_r+0x5bc>)
 800ec92:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ec96:	ed93 7b00 	vldr	d7, [r3]
 800ec9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	ed8d 7b00 	vstr	d7, [sp]
 800eca2:	da03      	bge.n	800ecac <_dtoa_r+0x46c>
 800eca4:	9b07      	ldr	r3, [sp, #28]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	f340 8101 	ble.w	800eeae <_dtoa_r+0x66e>
 800ecac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ecb0:	4656      	mov	r6, sl
 800ecb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ecb6:	4620      	mov	r0, r4
 800ecb8:	4629      	mov	r1, r5
 800ecba:	f7f1 fdef 	bl	800089c <__aeabi_ddiv>
 800ecbe:	f7f1 ff73 	bl	8000ba8 <__aeabi_d2iz>
 800ecc2:	4680      	mov	r8, r0
 800ecc4:	f7f1 fc56 	bl	8000574 <__aeabi_i2d>
 800ecc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eccc:	f7f1 fcbc 	bl	8000648 <__aeabi_dmul>
 800ecd0:	4602      	mov	r2, r0
 800ecd2:	460b      	mov	r3, r1
 800ecd4:	4620      	mov	r0, r4
 800ecd6:	4629      	mov	r1, r5
 800ecd8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ecdc:	f7f1 fafc 	bl	80002d8 <__aeabi_dsub>
 800ece0:	f806 4b01 	strb.w	r4, [r6], #1
 800ece4:	9d07      	ldr	r5, [sp, #28]
 800ece6:	eba6 040a 	sub.w	r4, r6, sl
 800ecea:	42a5      	cmp	r5, r4
 800ecec:	4602      	mov	r2, r0
 800ecee:	460b      	mov	r3, r1
 800ecf0:	f040 8117 	bne.w	800ef22 <_dtoa_r+0x6e2>
 800ecf4:	f7f1 faf2 	bl	80002dc <__adddf3>
 800ecf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ecfc:	4604      	mov	r4, r0
 800ecfe:	460d      	mov	r5, r1
 800ed00:	f7f1 ff32 	bl	8000b68 <__aeabi_dcmpgt>
 800ed04:	2800      	cmp	r0, #0
 800ed06:	f040 80f9 	bne.w	800eefc <_dtoa_r+0x6bc>
 800ed0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed0e:	4620      	mov	r0, r4
 800ed10:	4629      	mov	r1, r5
 800ed12:	f7f1 ff01 	bl	8000b18 <__aeabi_dcmpeq>
 800ed16:	b118      	cbz	r0, 800ed20 <_dtoa_r+0x4e0>
 800ed18:	f018 0f01 	tst.w	r8, #1
 800ed1c:	f040 80ee 	bne.w	800eefc <_dtoa_r+0x6bc>
 800ed20:	4649      	mov	r1, r9
 800ed22:	4658      	mov	r0, fp
 800ed24:	f000 ffdc 	bl	800fce0 <_Bfree>
 800ed28:	2300      	movs	r3, #0
 800ed2a:	7033      	strb	r3, [r6, #0]
 800ed2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ed2e:	3701      	adds	r7, #1
 800ed30:	601f      	str	r7, [r3, #0]
 800ed32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	f000 831d 	beq.w	800f374 <_dtoa_r+0xb34>
 800ed3a:	601e      	str	r6, [r3, #0]
 800ed3c:	e31a      	b.n	800f374 <_dtoa_r+0xb34>
 800ed3e:	07e2      	lsls	r2, r4, #31
 800ed40:	d505      	bpl.n	800ed4e <_dtoa_r+0x50e>
 800ed42:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ed46:	f7f1 fc7f 	bl	8000648 <__aeabi_dmul>
 800ed4a:	3601      	adds	r6, #1
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	1064      	asrs	r4, r4, #1
 800ed50:	3508      	adds	r5, #8
 800ed52:	e73f      	b.n	800ebd4 <_dtoa_r+0x394>
 800ed54:	2602      	movs	r6, #2
 800ed56:	e742      	b.n	800ebde <_dtoa_r+0x39e>
 800ed58:	9c07      	ldr	r4, [sp, #28]
 800ed5a:	9704      	str	r7, [sp, #16]
 800ed5c:	e761      	b.n	800ec22 <_dtoa_r+0x3e2>
 800ed5e:	4b27      	ldr	r3, [pc, #156]	@ (800edfc <_dtoa_r+0x5bc>)
 800ed60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ed62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ed66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ed6a:	4454      	add	r4, sl
 800ed6c:	2900      	cmp	r1, #0
 800ed6e:	d053      	beq.n	800ee18 <_dtoa_r+0x5d8>
 800ed70:	4928      	ldr	r1, [pc, #160]	@ (800ee14 <_dtoa_r+0x5d4>)
 800ed72:	2000      	movs	r0, #0
 800ed74:	f7f1 fd92 	bl	800089c <__aeabi_ddiv>
 800ed78:	4633      	mov	r3, r6
 800ed7a:	462a      	mov	r2, r5
 800ed7c:	f7f1 faac 	bl	80002d8 <__aeabi_dsub>
 800ed80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ed84:	4656      	mov	r6, sl
 800ed86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed8a:	f7f1 ff0d 	bl	8000ba8 <__aeabi_d2iz>
 800ed8e:	4605      	mov	r5, r0
 800ed90:	f7f1 fbf0 	bl	8000574 <__aeabi_i2d>
 800ed94:	4602      	mov	r2, r0
 800ed96:	460b      	mov	r3, r1
 800ed98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed9c:	f7f1 fa9c 	bl	80002d8 <__aeabi_dsub>
 800eda0:	3530      	adds	r5, #48	@ 0x30
 800eda2:	4602      	mov	r2, r0
 800eda4:	460b      	mov	r3, r1
 800eda6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800edaa:	f806 5b01 	strb.w	r5, [r6], #1
 800edae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800edb2:	f7f1 febb 	bl	8000b2c <__aeabi_dcmplt>
 800edb6:	2800      	cmp	r0, #0
 800edb8:	d171      	bne.n	800ee9e <_dtoa_r+0x65e>
 800edba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800edbe:	4911      	ldr	r1, [pc, #68]	@ (800ee04 <_dtoa_r+0x5c4>)
 800edc0:	2000      	movs	r0, #0
 800edc2:	f7f1 fa89 	bl	80002d8 <__aeabi_dsub>
 800edc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800edca:	f7f1 feaf 	bl	8000b2c <__aeabi_dcmplt>
 800edce:	2800      	cmp	r0, #0
 800edd0:	f040 8095 	bne.w	800eefe <_dtoa_r+0x6be>
 800edd4:	42a6      	cmp	r6, r4
 800edd6:	f43f af50 	beq.w	800ec7a <_dtoa_r+0x43a>
 800edda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800edde:	4b0a      	ldr	r3, [pc, #40]	@ (800ee08 <_dtoa_r+0x5c8>)
 800ede0:	2200      	movs	r2, #0
 800ede2:	f7f1 fc31 	bl	8000648 <__aeabi_dmul>
 800ede6:	4b08      	ldr	r3, [pc, #32]	@ (800ee08 <_dtoa_r+0x5c8>)
 800ede8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800edec:	2200      	movs	r2, #0
 800edee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800edf2:	f7f1 fc29 	bl	8000648 <__aeabi_dmul>
 800edf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800edfa:	e7c4      	b.n	800ed86 <_dtoa_r+0x546>
 800edfc:	08011aa0 	.word	0x08011aa0
 800ee00:	08011a78 	.word	0x08011a78
 800ee04:	3ff00000 	.word	0x3ff00000
 800ee08:	40240000 	.word	0x40240000
 800ee0c:	401c0000 	.word	0x401c0000
 800ee10:	40140000 	.word	0x40140000
 800ee14:	3fe00000 	.word	0x3fe00000
 800ee18:	4631      	mov	r1, r6
 800ee1a:	4628      	mov	r0, r5
 800ee1c:	f7f1 fc14 	bl	8000648 <__aeabi_dmul>
 800ee20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ee24:	9415      	str	r4, [sp, #84]	@ 0x54
 800ee26:	4656      	mov	r6, sl
 800ee28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee2c:	f7f1 febc 	bl	8000ba8 <__aeabi_d2iz>
 800ee30:	4605      	mov	r5, r0
 800ee32:	f7f1 fb9f 	bl	8000574 <__aeabi_i2d>
 800ee36:	4602      	mov	r2, r0
 800ee38:	460b      	mov	r3, r1
 800ee3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee3e:	f7f1 fa4b 	bl	80002d8 <__aeabi_dsub>
 800ee42:	3530      	adds	r5, #48	@ 0x30
 800ee44:	f806 5b01 	strb.w	r5, [r6], #1
 800ee48:	4602      	mov	r2, r0
 800ee4a:	460b      	mov	r3, r1
 800ee4c:	42a6      	cmp	r6, r4
 800ee4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ee52:	f04f 0200 	mov.w	r2, #0
 800ee56:	d124      	bne.n	800eea2 <_dtoa_r+0x662>
 800ee58:	4bac      	ldr	r3, [pc, #688]	@ (800f10c <_dtoa_r+0x8cc>)
 800ee5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ee5e:	f7f1 fa3d 	bl	80002dc <__adddf3>
 800ee62:	4602      	mov	r2, r0
 800ee64:	460b      	mov	r3, r1
 800ee66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee6a:	f7f1 fe7d 	bl	8000b68 <__aeabi_dcmpgt>
 800ee6e:	2800      	cmp	r0, #0
 800ee70:	d145      	bne.n	800eefe <_dtoa_r+0x6be>
 800ee72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ee76:	49a5      	ldr	r1, [pc, #660]	@ (800f10c <_dtoa_r+0x8cc>)
 800ee78:	2000      	movs	r0, #0
 800ee7a:	f7f1 fa2d 	bl	80002d8 <__aeabi_dsub>
 800ee7e:	4602      	mov	r2, r0
 800ee80:	460b      	mov	r3, r1
 800ee82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee86:	f7f1 fe51 	bl	8000b2c <__aeabi_dcmplt>
 800ee8a:	2800      	cmp	r0, #0
 800ee8c:	f43f aef5 	beq.w	800ec7a <_dtoa_r+0x43a>
 800ee90:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ee92:	1e73      	subs	r3, r6, #1
 800ee94:	9315      	str	r3, [sp, #84]	@ 0x54
 800ee96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ee9a:	2b30      	cmp	r3, #48	@ 0x30
 800ee9c:	d0f8      	beq.n	800ee90 <_dtoa_r+0x650>
 800ee9e:	9f04      	ldr	r7, [sp, #16]
 800eea0:	e73e      	b.n	800ed20 <_dtoa_r+0x4e0>
 800eea2:	4b9b      	ldr	r3, [pc, #620]	@ (800f110 <_dtoa_r+0x8d0>)
 800eea4:	f7f1 fbd0 	bl	8000648 <__aeabi_dmul>
 800eea8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eeac:	e7bc      	b.n	800ee28 <_dtoa_r+0x5e8>
 800eeae:	d10c      	bne.n	800eeca <_dtoa_r+0x68a>
 800eeb0:	4b98      	ldr	r3, [pc, #608]	@ (800f114 <_dtoa_r+0x8d4>)
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eeb8:	f7f1 fbc6 	bl	8000648 <__aeabi_dmul>
 800eebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eec0:	f7f1 fe48 	bl	8000b54 <__aeabi_dcmpge>
 800eec4:	2800      	cmp	r0, #0
 800eec6:	f000 8157 	beq.w	800f178 <_dtoa_r+0x938>
 800eeca:	2400      	movs	r4, #0
 800eecc:	4625      	mov	r5, r4
 800eece:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eed0:	43db      	mvns	r3, r3
 800eed2:	9304      	str	r3, [sp, #16]
 800eed4:	4656      	mov	r6, sl
 800eed6:	2700      	movs	r7, #0
 800eed8:	4621      	mov	r1, r4
 800eeda:	4658      	mov	r0, fp
 800eedc:	f000 ff00 	bl	800fce0 <_Bfree>
 800eee0:	2d00      	cmp	r5, #0
 800eee2:	d0dc      	beq.n	800ee9e <_dtoa_r+0x65e>
 800eee4:	b12f      	cbz	r7, 800eef2 <_dtoa_r+0x6b2>
 800eee6:	42af      	cmp	r7, r5
 800eee8:	d003      	beq.n	800eef2 <_dtoa_r+0x6b2>
 800eeea:	4639      	mov	r1, r7
 800eeec:	4658      	mov	r0, fp
 800eeee:	f000 fef7 	bl	800fce0 <_Bfree>
 800eef2:	4629      	mov	r1, r5
 800eef4:	4658      	mov	r0, fp
 800eef6:	f000 fef3 	bl	800fce0 <_Bfree>
 800eefa:	e7d0      	b.n	800ee9e <_dtoa_r+0x65e>
 800eefc:	9704      	str	r7, [sp, #16]
 800eefe:	4633      	mov	r3, r6
 800ef00:	461e      	mov	r6, r3
 800ef02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef06:	2a39      	cmp	r2, #57	@ 0x39
 800ef08:	d107      	bne.n	800ef1a <_dtoa_r+0x6da>
 800ef0a:	459a      	cmp	sl, r3
 800ef0c:	d1f8      	bne.n	800ef00 <_dtoa_r+0x6c0>
 800ef0e:	9a04      	ldr	r2, [sp, #16]
 800ef10:	3201      	adds	r2, #1
 800ef12:	9204      	str	r2, [sp, #16]
 800ef14:	2230      	movs	r2, #48	@ 0x30
 800ef16:	f88a 2000 	strb.w	r2, [sl]
 800ef1a:	781a      	ldrb	r2, [r3, #0]
 800ef1c:	3201      	adds	r2, #1
 800ef1e:	701a      	strb	r2, [r3, #0]
 800ef20:	e7bd      	b.n	800ee9e <_dtoa_r+0x65e>
 800ef22:	4b7b      	ldr	r3, [pc, #492]	@ (800f110 <_dtoa_r+0x8d0>)
 800ef24:	2200      	movs	r2, #0
 800ef26:	f7f1 fb8f 	bl	8000648 <__aeabi_dmul>
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	4604      	mov	r4, r0
 800ef30:	460d      	mov	r5, r1
 800ef32:	f7f1 fdf1 	bl	8000b18 <__aeabi_dcmpeq>
 800ef36:	2800      	cmp	r0, #0
 800ef38:	f43f aebb 	beq.w	800ecb2 <_dtoa_r+0x472>
 800ef3c:	e6f0      	b.n	800ed20 <_dtoa_r+0x4e0>
 800ef3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ef40:	2a00      	cmp	r2, #0
 800ef42:	f000 80db 	beq.w	800f0fc <_dtoa_r+0x8bc>
 800ef46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef48:	2a01      	cmp	r2, #1
 800ef4a:	f300 80bf 	bgt.w	800f0cc <_dtoa_r+0x88c>
 800ef4e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ef50:	2a00      	cmp	r2, #0
 800ef52:	f000 80b7 	beq.w	800f0c4 <_dtoa_r+0x884>
 800ef56:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ef5a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ef5c:	4646      	mov	r6, r8
 800ef5e:	9a08      	ldr	r2, [sp, #32]
 800ef60:	2101      	movs	r1, #1
 800ef62:	441a      	add	r2, r3
 800ef64:	4658      	mov	r0, fp
 800ef66:	4498      	add	r8, r3
 800ef68:	9208      	str	r2, [sp, #32]
 800ef6a:	f000 ffb7 	bl	800fedc <__i2b>
 800ef6e:	4605      	mov	r5, r0
 800ef70:	b15e      	cbz	r6, 800ef8a <_dtoa_r+0x74a>
 800ef72:	9b08      	ldr	r3, [sp, #32]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	dd08      	ble.n	800ef8a <_dtoa_r+0x74a>
 800ef78:	42b3      	cmp	r3, r6
 800ef7a:	9a08      	ldr	r2, [sp, #32]
 800ef7c:	bfa8      	it	ge
 800ef7e:	4633      	movge	r3, r6
 800ef80:	eba8 0803 	sub.w	r8, r8, r3
 800ef84:	1af6      	subs	r6, r6, r3
 800ef86:	1ad3      	subs	r3, r2, r3
 800ef88:	9308      	str	r3, [sp, #32]
 800ef8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef8c:	b1f3      	cbz	r3, 800efcc <_dtoa_r+0x78c>
 800ef8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	f000 80b7 	beq.w	800f104 <_dtoa_r+0x8c4>
 800ef96:	b18c      	cbz	r4, 800efbc <_dtoa_r+0x77c>
 800ef98:	4629      	mov	r1, r5
 800ef9a:	4622      	mov	r2, r4
 800ef9c:	4658      	mov	r0, fp
 800ef9e:	f001 f85d 	bl	801005c <__pow5mult>
 800efa2:	464a      	mov	r2, r9
 800efa4:	4601      	mov	r1, r0
 800efa6:	4605      	mov	r5, r0
 800efa8:	4658      	mov	r0, fp
 800efaa:	f000 ffad 	bl	800ff08 <__multiply>
 800efae:	4649      	mov	r1, r9
 800efb0:	9004      	str	r0, [sp, #16]
 800efb2:	4658      	mov	r0, fp
 800efb4:	f000 fe94 	bl	800fce0 <_Bfree>
 800efb8:	9b04      	ldr	r3, [sp, #16]
 800efba:	4699      	mov	r9, r3
 800efbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800efbe:	1b1a      	subs	r2, r3, r4
 800efc0:	d004      	beq.n	800efcc <_dtoa_r+0x78c>
 800efc2:	4649      	mov	r1, r9
 800efc4:	4658      	mov	r0, fp
 800efc6:	f001 f849 	bl	801005c <__pow5mult>
 800efca:	4681      	mov	r9, r0
 800efcc:	2101      	movs	r1, #1
 800efce:	4658      	mov	r0, fp
 800efd0:	f000 ff84 	bl	800fedc <__i2b>
 800efd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800efd6:	4604      	mov	r4, r0
 800efd8:	2b00      	cmp	r3, #0
 800efda:	f000 81cf 	beq.w	800f37c <_dtoa_r+0xb3c>
 800efde:	461a      	mov	r2, r3
 800efe0:	4601      	mov	r1, r0
 800efe2:	4658      	mov	r0, fp
 800efe4:	f001 f83a 	bl	801005c <__pow5mult>
 800efe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efea:	2b01      	cmp	r3, #1
 800efec:	4604      	mov	r4, r0
 800efee:	f300 8095 	bgt.w	800f11c <_dtoa_r+0x8dc>
 800eff2:	9b02      	ldr	r3, [sp, #8]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	f040 8087 	bne.w	800f108 <_dtoa_r+0x8c8>
 800effa:	9b03      	ldr	r3, [sp, #12]
 800effc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f000:	2b00      	cmp	r3, #0
 800f002:	f040 8089 	bne.w	800f118 <_dtoa_r+0x8d8>
 800f006:	9b03      	ldr	r3, [sp, #12]
 800f008:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f00c:	0d1b      	lsrs	r3, r3, #20
 800f00e:	051b      	lsls	r3, r3, #20
 800f010:	b12b      	cbz	r3, 800f01e <_dtoa_r+0x7de>
 800f012:	9b08      	ldr	r3, [sp, #32]
 800f014:	3301      	adds	r3, #1
 800f016:	9308      	str	r3, [sp, #32]
 800f018:	f108 0801 	add.w	r8, r8, #1
 800f01c:	2301      	movs	r3, #1
 800f01e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f020:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f022:	2b00      	cmp	r3, #0
 800f024:	f000 81b0 	beq.w	800f388 <_dtoa_r+0xb48>
 800f028:	6923      	ldr	r3, [r4, #16]
 800f02a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f02e:	6918      	ldr	r0, [r3, #16]
 800f030:	f000 ff08 	bl	800fe44 <__hi0bits>
 800f034:	f1c0 0020 	rsb	r0, r0, #32
 800f038:	9b08      	ldr	r3, [sp, #32]
 800f03a:	4418      	add	r0, r3
 800f03c:	f010 001f 	ands.w	r0, r0, #31
 800f040:	d077      	beq.n	800f132 <_dtoa_r+0x8f2>
 800f042:	f1c0 0320 	rsb	r3, r0, #32
 800f046:	2b04      	cmp	r3, #4
 800f048:	dd6b      	ble.n	800f122 <_dtoa_r+0x8e2>
 800f04a:	9b08      	ldr	r3, [sp, #32]
 800f04c:	f1c0 001c 	rsb	r0, r0, #28
 800f050:	4403      	add	r3, r0
 800f052:	4480      	add	r8, r0
 800f054:	4406      	add	r6, r0
 800f056:	9308      	str	r3, [sp, #32]
 800f058:	f1b8 0f00 	cmp.w	r8, #0
 800f05c:	dd05      	ble.n	800f06a <_dtoa_r+0x82a>
 800f05e:	4649      	mov	r1, r9
 800f060:	4642      	mov	r2, r8
 800f062:	4658      	mov	r0, fp
 800f064:	f001 f854 	bl	8010110 <__lshift>
 800f068:	4681      	mov	r9, r0
 800f06a:	9b08      	ldr	r3, [sp, #32]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	dd05      	ble.n	800f07c <_dtoa_r+0x83c>
 800f070:	4621      	mov	r1, r4
 800f072:	461a      	mov	r2, r3
 800f074:	4658      	mov	r0, fp
 800f076:	f001 f84b 	bl	8010110 <__lshift>
 800f07a:	4604      	mov	r4, r0
 800f07c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d059      	beq.n	800f136 <_dtoa_r+0x8f6>
 800f082:	4621      	mov	r1, r4
 800f084:	4648      	mov	r0, r9
 800f086:	f001 f8af 	bl	80101e8 <__mcmp>
 800f08a:	2800      	cmp	r0, #0
 800f08c:	da53      	bge.n	800f136 <_dtoa_r+0x8f6>
 800f08e:	1e7b      	subs	r3, r7, #1
 800f090:	9304      	str	r3, [sp, #16]
 800f092:	4649      	mov	r1, r9
 800f094:	2300      	movs	r3, #0
 800f096:	220a      	movs	r2, #10
 800f098:	4658      	mov	r0, fp
 800f09a:	f000 fe43 	bl	800fd24 <__multadd>
 800f09e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f0a0:	4681      	mov	r9, r0
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	f000 8172 	beq.w	800f38c <_dtoa_r+0xb4c>
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	4629      	mov	r1, r5
 800f0ac:	220a      	movs	r2, #10
 800f0ae:	4658      	mov	r0, fp
 800f0b0:	f000 fe38 	bl	800fd24 <__multadd>
 800f0b4:	9b00      	ldr	r3, [sp, #0]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	4605      	mov	r5, r0
 800f0ba:	dc67      	bgt.n	800f18c <_dtoa_r+0x94c>
 800f0bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0be:	2b02      	cmp	r3, #2
 800f0c0:	dc41      	bgt.n	800f146 <_dtoa_r+0x906>
 800f0c2:	e063      	b.n	800f18c <_dtoa_r+0x94c>
 800f0c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f0c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f0ca:	e746      	b.n	800ef5a <_dtoa_r+0x71a>
 800f0cc:	9b07      	ldr	r3, [sp, #28]
 800f0ce:	1e5c      	subs	r4, r3, #1
 800f0d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f0d2:	42a3      	cmp	r3, r4
 800f0d4:	bfbf      	itttt	lt
 800f0d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f0d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f0da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f0dc:	1ae3      	sublt	r3, r4, r3
 800f0de:	bfb4      	ite	lt
 800f0e0:	18d2      	addlt	r2, r2, r3
 800f0e2:	1b1c      	subge	r4, r3, r4
 800f0e4:	9b07      	ldr	r3, [sp, #28]
 800f0e6:	bfbc      	itt	lt
 800f0e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f0ea:	2400      	movlt	r4, #0
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	bfb5      	itete	lt
 800f0f0:	eba8 0603 	sublt.w	r6, r8, r3
 800f0f4:	9b07      	ldrge	r3, [sp, #28]
 800f0f6:	2300      	movlt	r3, #0
 800f0f8:	4646      	movge	r6, r8
 800f0fa:	e730      	b.n	800ef5e <_dtoa_r+0x71e>
 800f0fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f0fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f100:	4646      	mov	r6, r8
 800f102:	e735      	b.n	800ef70 <_dtoa_r+0x730>
 800f104:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f106:	e75c      	b.n	800efc2 <_dtoa_r+0x782>
 800f108:	2300      	movs	r3, #0
 800f10a:	e788      	b.n	800f01e <_dtoa_r+0x7de>
 800f10c:	3fe00000 	.word	0x3fe00000
 800f110:	40240000 	.word	0x40240000
 800f114:	40140000 	.word	0x40140000
 800f118:	9b02      	ldr	r3, [sp, #8]
 800f11a:	e780      	b.n	800f01e <_dtoa_r+0x7de>
 800f11c:	2300      	movs	r3, #0
 800f11e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f120:	e782      	b.n	800f028 <_dtoa_r+0x7e8>
 800f122:	d099      	beq.n	800f058 <_dtoa_r+0x818>
 800f124:	9a08      	ldr	r2, [sp, #32]
 800f126:	331c      	adds	r3, #28
 800f128:	441a      	add	r2, r3
 800f12a:	4498      	add	r8, r3
 800f12c:	441e      	add	r6, r3
 800f12e:	9208      	str	r2, [sp, #32]
 800f130:	e792      	b.n	800f058 <_dtoa_r+0x818>
 800f132:	4603      	mov	r3, r0
 800f134:	e7f6      	b.n	800f124 <_dtoa_r+0x8e4>
 800f136:	9b07      	ldr	r3, [sp, #28]
 800f138:	9704      	str	r7, [sp, #16]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	dc20      	bgt.n	800f180 <_dtoa_r+0x940>
 800f13e:	9300      	str	r3, [sp, #0]
 800f140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f142:	2b02      	cmp	r3, #2
 800f144:	dd1e      	ble.n	800f184 <_dtoa_r+0x944>
 800f146:	9b00      	ldr	r3, [sp, #0]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	f47f aec0 	bne.w	800eece <_dtoa_r+0x68e>
 800f14e:	4621      	mov	r1, r4
 800f150:	2205      	movs	r2, #5
 800f152:	4658      	mov	r0, fp
 800f154:	f000 fde6 	bl	800fd24 <__multadd>
 800f158:	4601      	mov	r1, r0
 800f15a:	4604      	mov	r4, r0
 800f15c:	4648      	mov	r0, r9
 800f15e:	f001 f843 	bl	80101e8 <__mcmp>
 800f162:	2800      	cmp	r0, #0
 800f164:	f77f aeb3 	ble.w	800eece <_dtoa_r+0x68e>
 800f168:	4656      	mov	r6, sl
 800f16a:	2331      	movs	r3, #49	@ 0x31
 800f16c:	f806 3b01 	strb.w	r3, [r6], #1
 800f170:	9b04      	ldr	r3, [sp, #16]
 800f172:	3301      	adds	r3, #1
 800f174:	9304      	str	r3, [sp, #16]
 800f176:	e6ae      	b.n	800eed6 <_dtoa_r+0x696>
 800f178:	9c07      	ldr	r4, [sp, #28]
 800f17a:	9704      	str	r7, [sp, #16]
 800f17c:	4625      	mov	r5, r4
 800f17e:	e7f3      	b.n	800f168 <_dtoa_r+0x928>
 800f180:	9b07      	ldr	r3, [sp, #28]
 800f182:	9300      	str	r3, [sp, #0]
 800f184:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f186:	2b00      	cmp	r3, #0
 800f188:	f000 8104 	beq.w	800f394 <_dtoa_r+0xb54>
 800f18c:	2e00      	cmp	r6, #0
 800f18e:	dd05      	ble.n	800f19c <_dtoa_r+0x95c>
 800f190:	4629      	mov	r1, r5
 800f192:	4632      	mov	r2, r6
 800f194:	4658      	mov	r0, fp
 800f196:	f000 ffbb 	bl	8010110 <__lshift>
 800f19a:	4605      	mov	r5, r0
 800f19c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d05a      	beq.n	800f258 <_dtoa_r+0xa18>
 800f1a2:	6869      	ldr	r1, [r5, #4]
 800f1a4:	4658      	mov	r0, fp
 800f1a6:	f000 fd5b 	bl	800fc60 <_Balloc>
 800f1aa:	4606      	mov	r6, r0
 800f1ac:	b928      	cbnz	r0, 800f1ba <_dtoa_r+0x97a>
 800f1ae:	4b84      	ldr	r3, [pc, #528]	@ (800f3c0 <_dtoa_r+0xb80>)
 800f1b0:	4602      	mov	r2, r0
 800f1b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f1b6:	f7ff bb5a 	b.w	800e86e <_dtoa_r+0x2e>
 800f1ba:	692a      	ldr	r2, [r5, #16]
 800f1bc:	3202      	adds	r2, #2
 800f1be:	0092      	lsls	r2, r2, #2
 800f1c0:	f105 010c 	add.w	r1, r5, #12
 800f1c4:	300c      	adds	r0, #12
 800f1c6:	f7ff fa94 	bl	800e6f2 <memcpy>
 800f1ca:	2201      	movs	r2, #1
 800f1cc:	4631      	mov	r1, r6
 800f1ce:	4658      	mov	r0, fp
 800f1d0:	f000 ff9e 	bl	8010110 <__lshift>
 800f1d4:	f10a 0301 	add.w	r3, sl, #1
 800f1d8:	9307      	str	r3, [sp, #28]
 800f1da:	9b00      	ldr	r3, [sp, #0]
 800f1dc:	4453      	add	r3, sl
 800f1de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f1e0:	9b02      	ldr	r3, [sp, #8]
 800f1e2:	f003 0301 	and.w	r3, r3, #1
 800f1e6:	462f      	mov	r7, r5
 800f1e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800f1ea:	4605      	mov	r5, r0
 800f1ec:	9b07      	ldr	r3, [sp, #28]
 800f1ee:	4621      	mov	r1, r4
 800f1f0:	3b01      	subs	r3, #1
 800f1f2:	4648      	mov	r0, r9
 800f1f4:	9300      	str	r3, [sp, #0]
 800f1f6:	f7ff fa99 	bl	800e72c <quorem>
 800f1fa:	4639      	mov	r1, r7
 800f1fc:	9002      	str	r0, [sp, #8]
 800f1fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f202:	4648      	mov	r0, r9
 800f204:	f000 fff0 	bl	80101e8 <__mcmp>
 800f208:	462a      	mov	r2, r5
 800f20a:	9008      	str	r0, [sp, #32]
 800f20c:	4621      	mov	r1, r4
 800f20e:	4658      	mov	r0, fp
 800f210:	f001 f806 	bl	8010220 <__mdiff>
 800f214:	68c2      	ldr	r2, [r0, #12]
 800f216:	4606      	mov	r6, r0
 800f218:	bb02      	cbnz	r2, 800f25c <_dtoa_r+0xa1c>
 800f21a:	4601      	mov	r1, r0
 800f21c:	4648      	mov	r0, r9
 800f21e:	f000 ffe3 	bl	80101e8 <__mcmp>
 800f222:	4602      	mov	r2, r0
 800f224:	4631      	mov	r1, r6
 800f226:	4658      	mov	r0, fp
 800f228:	920e      	str	r2, [sp, #56]	@ 0x38
 800f22a:	f000 fd59 	bl	800fce0 <_Bfree>
 800f22e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f230:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f232:	9e07      	ldr	r6, [sp, #28]
 800f234:	ea43 0102 	orr.w	r1, r3, r2
 800f238:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f23a:	4319      	orrs	r1, r3
 800f23c:	d110      	bne.n	800f260 <_dtoa_r+0xa20>
 800f23e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f242:	d029      	beq.n	800f298 <_dtoa_r+0xa58>
 800f244:	9b08      	ldr	r3, [sp, #32]
 800f246:	2b00      	cmp	r3, #0
 800f248:	dd02      	ble.n	800f250 <_dtoa_r+0xa10>
 800f24a:	9b02      	ldr	r3, [sp, #8]
 800f24c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f250:	9b00      	ldr	r3, [sp, #0]
 800f252:	f883 8000 	strb.w	r8, [r3]
 800f256:	e63f      	b.n	800eed8 <_dtoa_r+0x698>
 800f258:	4628      	mov	r0, r5
 800f25a:	e7bb      	b.n	800f1d4 <_dtoa_r+0x994>
 800f25c:	2201      	movs	r2, #1
 800f25e:	e7e1      	b.n	800f224 <_dtoa_r+0x9e4>
 800f260:	9b08      	ldr	r3, [sp, #32]
 800f262:	2b00      	cmp	r3, #0
 800f264:	db04      	blt.n	800f270 <_dtoa_r+0xa30>
 800f266:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f268:	430b      	orrs	r3, r1
 800f26a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f26c:	430b      	orrs	r3, r1
 800f26e:	d120      	bne.n	800f2b2 <_dtoa_r+0xa72>
 800f270:	2a00      	cmp	r2, #0
 800f272:	dded      	ble.n	800f250 <_dtoa_r+0xa10>
 800f274:	4649      	mov	r1, r9
 800f276:	2201      	movs	r2, #1
 800f278:	4658      	mov	r0, fp
 800f27a:	f000 ff49 	bl	8010110 <__lshift>
 800f27e:	4621      	mov	r1, r4
 800f280:	4681      	mov	r9, r0
 800f282:	f000 ffb1 	bl	80101e8 <__mcmp>
 800f286:	2800      	cmp	r0, #0
 800f288:	dc03      	bgt.n	800f292 <_dtoa_r+0xa52>
 800f28a:	d1e1      	bne.n	800f250 <_dtoa_r+0xa10>
 800f28c:	f018 0f01 	tst.w	r8, #1
 800f290:	d0de      	beq.n	800f250 <_dtoa_r+0xa10>
 800f292:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f296:	d1d8      	bne.n	800f24a <_dtoa_r+0xa0a>
 800f298:	9a00      	ldr	r2, [sp, #0]
 800f29a:	2339      	movs	r3, #57	@ 0x39
 800f29c:	7013      	strb	r3, [r2, #0]
 800f29e:	4633      	mov	r3, r6
 800f2a0:	461e      	mov	r6, r3
 800f2a2:	3b01      	subs	r3, #1
 800f2a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f2a8:	2a39      	cmp	r2, #57	@ 0x39
 800f2aa:	d052      	beq.n	800f352 <_dtoa_r+0xb12>
 800f2ac:	3201      	adds	r2, #1
 800f2ae:	701a      	strb	r2, [r3, #0]
 800f2b0:	e612      	b.n	800eed8 <_dtoa_r+0x698>
 800f2b2:	2a00      	cmp	r2, #0
 800f2b4:	dd07      	ble.n	800f2c6 <_dtoa_r+0xa86>
 800f2b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f2ba:	d0ed      	beq.n	800f298 <_dtoa_r+0xa58>
 800f2bc:	9a00      	ldr	r2, [sp, #0]
 800f2be:	f108 0301 	add.w	r3, r8, #1
 800f2c2:	7013      	strb	r3, [r2, #0]
 800f2c4:	e608      	b.n	800eed8 <_dtoa_r+0x698>
 800f2c6:	9b07      	ldr	r3, [sp, #28]
 800f2c8:	9a07      	ldr	r2, [sp, #28]
 800f2ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f2ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f2d0:	4293      	cmp	r3, r2
 800f2d2:	d028      	beq.n	800f326 <_dtoa_r+0xae6>
 800f2d4:	4649      	mov	r1, r9
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	220a      	movs	r2, #10
 800f2da:	4658      	mov	r0, fp
 800f2dc:	f000 fd22 	bl	800fd24 <__multadd>
 800f2e0:	42af      	cmp	r7, r5
 800f2e2:	4681      	mov	r9, r0
 800f2e4:	f04f 0300 	mov.w	r3, #0
 800f2e8:	f04f 020a 	mov.w	r2, #10
 800f2ec:	4639      	mov	r1, r7
 800f2ee:	4658      	mov	r0, fp
 800f2f0:	d107      	bne.n	800f302 <_dtoa_r+0xac2>
 800f2f2:	f000 fd17 	bl	800fd24 <__multadd>
 800f2f6:	4607      	mov	r7, r0
 800f2f8:	4605      	mov	r5, r0
 800f2fa:	9b07      	ldr	r3, [sp, #28]
 800f2fc:	3301      	adds	r3, #1
 800f2fe:	9307      	str	r3, [sp, #28]
 800f300:	e774      	b.n	800f1ec <_dtoa_r+0x9ac>
 800f302:	f000 fd0f 	bl	800fd24 <__multadd>
 800f306:	4629      	mov	r1, r5
 800f308:	4607      	mov	r7, r0
 800f30a:	2300      	movs	r3, #0
 800f30c:	220a      	movs	r2, #10
 800f30e:	4658      	mov	r0, fp
 800f310:	f000 fd08 	bl	800fd24 <__multadd>
 800f314:	4605      	mov	r5, r0
 800f316:	e7f0      	b.n	800f2fa <_dtoa_r+0xaba>
 800f318:	9b00      	ldr	r3, [sp, #0]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	bfcc      	ite	gt
 800f31e:	461e      	movgt	r6, r3
 800f320:	2601      	movle	r6, #1
 800f322:	4456      	add	r6, sl
 800f324:	2700      	movs	r7, #0
 800f326:	4649      	mov	r1, r9
 800f328:	2201      	movs	r2, #1
 800f32a:	4658      	mov	r0, fp
 800f32c:	f000 fef0 	bl	8010110 <__lshift>
 800f330:	4621      	mov	r1, r4
 800f332:	4681      	mov	r9, r0
 800f334:	f000 ff58 	bl	80101e8 <__mcmp>
 800f338:	2800      	cmp	r0, #0
 800f33a:	dcb0      	bgt.n	800f29e <_dtoa_r+0xa5e>
 800f33c:	d102      	bne.n	800f344 <_dtoa_r+0xb04>
 800f33e:	f018 0f01 	tst.w	r8, #1
 800f342:	d1ac      	bne.n	800f29e <_dtoa_r+0xa5e>
 800f344:	4633      	mov	r3, r6
 800f346:	461e      	mov	r6, r3
 800f348:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f34c:	2a30      	cmp	r2, #48	@ 0x30
 800f34e:	d0fa      	beq.n	800f346 <_dtoa_r+0xb06>
 800f350:	e5c2      	b.n	800eed8 <_dtoa_r+0x698>
 800f352:	459a      	cmp	sl, r3
 800f354:	d1a4      	bne.n	800f2a0 <_dtoa_r+0xa60>
 800f356:	9b04      	ldr	r3, [sp, #16]
 800f358:	3301      	adds	r3, #1
 800f35a:	9304      	str	r3, [sp, #16]
 800f35c:	2331      	movs	r3, #49	@ 0x31
 800f35e:	f88a 3000 	strb.w	r3, [sl]
 800f362:	e5b9      	b.n	800eed8 <_dtoa_r+0x698>
 800f364:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f366:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f3c4 <_dtoa_r+0xb84>
 800f36a:	b11b      	cbz	r3, 800f374 <_dtoa_r+0xb34>
 800f36c:	f10a 0308 	add.w	r3, sl, #8
 800f370:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f372:	6013      	str	r3, [r2, #0]
 800f374:	4650      	mov	r0, sl
 800f376:	b019      	add	sp, #100	@ 0x64
 800f378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f37c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f37e:	2b01      	cmp	r3, #1
 800f380:	f77f ae37 	ble.w	800eff2 <_dtoa_r+0x7b2>
 800f384:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f386:	930a      	str	r3, [sp, #40]	@ 0x28
 800f388:	2001      	movs	r0, #1
 800f38a:	e655      	b.n	800f038 <_dtoa_r+0x7f8>
 800f38c:	9b00      	ldr	r3, [sp, #0]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	f77f aed6 	ble.w	800f140 <_dtoa_r+0x900>
 800f394:	4656      	mov	r6, sl
 800f396:	4621      	mov	r1, r4
 800f398:	4648      	mov	r0, r9
 800f39a:	f7ff f9c7 	bl	800e72c <quorem>
 800f39e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f3a2:	f806 8b01 	strb.w	r8, [r6], #1
 800f3a6:	9b00      	ldr	r3, [sp, #0]
 800f3a8:	eba6 020a 	sub.w	r2, r6, sl
 800f3ac:	4293      	cmp	r3, r2
 800f3ae:	ddb3      	ble.n	800f318 <_dtoa_r+0xad8>
 800f3b0:	4649      	mov	r1, r9
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	220a      	movs	r2, #10
 800f3b6:	4658      	mov	r0, fp
 800f3b8:	f000 fcb4 	bl	800fd24 <__multadd>
 800f3bc:	4681      	mov	r9, r0
 800f3be:	e7ea      	b.n	800f396 <_dtoa_r+0xb56>
 800f3c0:	0801199d 	.word	0x0801199d
 800f3c4:	08011921 	.word	0x08011921

0800f3c8 <_free_r>:
 800f3c8:	b538      	push	{r3, r4, r5, lr}
 800f3ca:	4605      	mov	r5, r0
 800f3cc:	2900      	cmp	r1, #0
 800f3ce:	d041      	beq.n	800f454 <_free_r+0x8c>
 800f3d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3d4:	1f0c      	subs	r4, r1, #4
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	bfb8      	it	lt
 800f3da:	18e4      	addlt	r4, r4, r3
 800f3dc:	f000 fc34 	bl	800fc48 <__malloc_lock>
 800f3e0:	4a1d      	ldr	r2, [pc, #116]	@ (800f458 <_free_r+0x90>)
 800f3e2:	6813      	ldr	r3, [r2, #0]
 800f3e4:	b933      	cbnz	r3, 800f3f4 <_free_r+0x2c>
 800f3e6:	6063      	str	r3, [r4, #4]
 800f3e8:	6014      	str	r4, [r2, #0]
 800f3ea:	4628      	mov	r0, r5
 800f3ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3f0:	f000 bc30 	b.w	800fc54 <__malloc_unlock>
 800f3f4:	42a3      	cmp	r3, r4
 800f3f6:	d908      	bls.n	800f40a <_free_r+0x42>
 800f3f8:	6820      	ldr	r0, [r4, #0]
 800f3fa:	1821      	adds	r1, r4, r0
 800f3fc:	428b      	cmp	r3, r1
 800f3fe:	bf01      	itttt	eq
 800f400:	6819      	ldreq	r1, [r3, #0]
 800f402:	685b      	ldreq	r3, [r3, #4]
 800f404:	1809      	addeq	r1, r1, r0
 800f406:	6021      	streq	r1, [r4, #0]
 800f408:	e7ed      	b.n	800f3e6 <_free_r+0x1e>
 800f40a:	461a      	mov	r2, r3
 800f40c:	685b      	ldr	r3, [r3, #4]
 800f40e:	b10b      	cbz	r3, 800f414 <_free_r+0x4c>
 800f410:	42a3      	cmp	r3, r4
 800f412:	d9fa      	bls.n	800f40a <_free_r+0x42>
 800f414:	6811      	ldr	r1, [r2, #0]
 800f416:	1850      	adds	r0, r2, r1
 800f418:	42a0      	cmp	r0, r4
 800f41a:	d10b      	bne.n	800f434 <_free_r+0x6c>
 800f41c:	6820      	ldr	r0, [r4, #0]
 800f41e:	4401      	add	r1, r0
 800f420:	1850      	adds	r0, r2, r1
 800f422:	4283      	cmp	r3, r0
 800f424:	6011      	str	r1, [r2, #0]
 800f426:	d1e0      	bne.n	800f3ea <_free_r+0x22>
 800f428:	6818      	ldr	r0, [r3, #0]
 800f42a:	685b      	ldr	r3, [r3, #4]
 800f42c:	6053      	str	r3, [r2, #4]
 800f42e:	4408      	add	r0, r1
 800f430:	6010      	str	r0, [r2, #0]
 800f432:	e7da      	b.n	800f3ea <_free_r+0x22>
 800f434:	d902      	bls.n	800f43c <_free_r+0x74>
 800f436:	230c      	movs	r3, #12
 800f438:	602b      	str	r3, [r5, #0]
 800f43a:	e7d6      	b.n	800f3ea <_free_r+0x22>
 800f43c:	6820      	ldr	r0, [r4, #0]
 800f43e:	1821      	adds	r1, r4, r0
 800f440:	428b      	cmp	r3, r1
 800f442:	bf04      	itt	eq
 800f444:	6819      	ldreq	r1, [r3, #0]
 800f446:	685b      	ldreq	r3, [r3, #4]
 800f448:	6063      	str	r3, [r4, #4]
 800f44a:	bf04      	itt	eq
 800f44c:	1809      	addeq	r1, r1, r0
 800f44e:	6021      	streq	r1, [r4, #0]
 800f450:	6054      	str	r4, [r2, #4]
 800f452:	e7ca      	b.n	800f3ea <_free_r+0x22>
 800f454:	bd38      	pop	{r3, r4, r5, pc}
 800f456:	bf00      	nop
 800f458:	20000a60 	.word	0x20000a60

0800f45c <rshift>:
 800f45c:	6903      	ldr	r3, [r0, #16]
 800f45e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f462:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f466:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f46a:	f100 0414 	add.w	r4, r0, #20
 800f46e:	dd45      	ble.n	800f4fc <rshift+0xa0>
 800f470:	f011 011f 	ands.w	r1, r1, #31
 800f474:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f478:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f47c:	d10c      	bne.n	800f498 <rshift+0x3c>
 800f47e:	f100 0710 	add.w	r7, r0, #16
 800f482:	4629      	mov	r1, r5
 800f484:	42b1      	cmp	r1, r6
 800f486:	d334      	bcc.n	800f4f2 <rshift+0x96>
 800f488:	1a9b      	subs	r3, r3, r2
 800f48a:	009b      	lsls	r3, r3, #2
 800f48c:	1eea      	subs	r2, r5, #3
 800f48e:	4296      	cmp	r6, r2
 800f490:	bf38      	it	cc
 800f492:	2300      	movcc	r3, #0
 800f494:	4423      	add	r3, r4
 800f496:	e015      	b.n	800f4c4 <rshift+0x68>
 800f498:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f49c:	f1c1 0820 	rsb	r8, r1, #32
 800f4a0:	40cf      	lsrs	r7, r1
 800f4a2:	f105 0e04 	add.w	lr, r5, #4
 800f4a6:	46a1      	mov	r9, r4
 800f4a8:	4576      	cmp	r6, lr
 800f4aa:	46f4      	mov	ip, lr
 800f4ac:	d815      	bhi.n	800f4da <rshift+0x7e>
 800f4ae:	1a9a      	subs	r2, r3, r2
 800f4b0:	0092      	lsls	r2, r2, #2
 800f4b2:	3a04      	subs	r2, #4
 800f4b4:	3501      	adds	r5, #1
 800f4b6:	42ae      	cmp	r6, r5
 800f4b8:	bf38      	it	cc
 800f4ba:	2200      	movcc	r2, #0
 800f4bc:	18a3      	adds	r3, r4, r2
 800f4be:	50a7      	str	r7, [r4, r2]
 800f4c0:	b107      	cbz	r7, 800f4c4 <rshift+0x68>
 800f4c2:	3304      	adds	r3, #4
 800f4c4:	1b1a      	subs	r2, r3, r4
 800f4c6:	42a3      	cmp	r3, r4
 800f4c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f4cc:	bf08      	it	eq
 800f4ce:	2300      	moveq	r3, #0
 800f4d0:	6102      	str	r2, [r0, #16]
 800f4d2:	bf08      	it	eq
 800f4d4:	6143      	streq	r3, [r0, #20]
 800f4d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f4da:	f8dc c000 	ldr.w	ip, [ip]
 800f4de:	fa0c fc08 	lsl.w	ip, ip, r8
 800f4e2:	ea4c 0707 	orr.w	r7, ip, r7
 800f4e6:	f849 7b04 	str.w	r7, [r9], #4
 800f4ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f4ee:	40cf      	lsrs	r7, r1
 800f4f0:	e7da      	b.n	800f4a8 <rshift+0x4c>
 800f4f2:	f851 cb04 	ldr.w	ip, [r1], #4
 800f4f6:	f847 cf04 	str.w	ip, [r7, #4]!
 800f4fa:	e7c3      	b.n	800f484 <rshift+0x28>
 800f4fc:	4623      	mov	r3, r4
 800f4fe:	e7e1      	b.n	800f4c4 <rshift+0x68>

0800f500 <__hexdig_fun>:
 800f500:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f504:	2b09      	cmp	r3, #9
 800f506:	d802      	bhi.n	800f50e <__hexdig_fun+0xe>
 800f508:	3820      	subs	r0, #32
 800f50a:	b2c0      	uxtb	r0, r0
 800f50c:	4770      	bx	lr
 800f50e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f512:	2b05      	cmp	r3, #5
 800f514:	d801      	bhi.n	800f51a <__hexdig_fun+0x1a>
 800f516:	3847      	subs	r0, #71	@ 0x47
 800f518:	e7f7      	b.n	800f50a <__hexdig_fun+0xa>
 800f51a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f51e:	2b05      	cmp	r3, #5
 800f520:	d801      	bhi.n	800f526 <__hexdig_fun+0x26>
 800f522:	3827      	subs	r0, #39	@ 0x27
 800f524:	e7f1      	b.n	800f50a <__hexdig_fun+0xa>
 800f526:	2000      	movs	r0, #0
 800f528:	4770      	bx	lr
	...

0800f52c <__gethex>:
 800f52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f530:	b085      	sub	sp, #20
 800f532:	468a      	mov	sl, r1
 800f534:	9302      	str	r3, [sp, #8]
 800f536:	680b      	ldr	r3, [r1, #0]
 800f538:	9001      	str	r0, [sp, #4]
 800f53a:	4690      	mov	r8, r2
 800f53c:	1c9c      	adds	r4, r3, #2
 800f53e:	46a1      	mov	r9, r4
 800f540:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f544:	2830      	cmp	r0, #48	@ 0x30
 800f546:	d0fa      	beq.n	800f53e <__gethex+0x12>
 800f548:	eba9 0303 	sub.w	r3, r9, r3
 800f54c:	f1a3 0b02 	sub.w	fp, r3, #2
 800f550:	f7ff ffd6 	bl	800f500 <__hexdig_fun>
 800f554:	4605      	mov	r5, r0
 800f556:	2800      	cmp	r0, #0
 800f558:	d168      	bne.n	800f62c <__gethex+0x100>
 800f55a:	49a0      	ldr	r1, [pc, #640]	@ (800f7dc <__gethex+0x2b0>)
 800f55c:	2201      	movs	r2, #1
 800f55e:	4648      	mov	r0, r9
 800f560:	f7ff f83e 	bl	800e5e0 <strncmp>
 800f564:	4607      	mov	r7, r0
 800f566:	2800      	cmp	r0, #0
 800f568:	d167      	bne.n	800f63a <__gethex+0x10e>
 800f56a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f56e:	4626      	mov	r6, r4
 800f570:	f7ff ffc6 	bl	800f500 <__hexdig_fun>
 800f574:	2800      	cmp	r0, #0
 800f576:	d062      	beq.n	800f63e <__gethex+0x112>
 800f578:	4623      	mov	r3, r4
 800f57a:	7818      	ldrb	r0, [r3, #0]
 800f57c:	2830      	cmp	r0, #48	@ 0x30
 800f57e:	4699      	mov	r9, r3
 800f580:	f103 0301 	add.w	r3, r3, #1
 800f584:	d0f9      	beq.n	800f57a <__gethex+0x4e>
 800f586:	f7ff ffbb 	bl	800f500 <__hexdig_fun>
 800f58a:	fab0 f580 	clz	r5, r0
 800f58e:	096d      	lsrs	r5, r5, #5
 800f590:	f04f 0b01 	mov.w	fp, #1
 800f594:	464a      	mov	r2, r9
 800f596:	4616      	mov	r6, r2
 800f598:	3201      	adds	r2, #1
 800f59a:	7830      	ldrb	r0, [r6, #0]
 800f59c:	f7ff ffb0 	bl	800f500 <__hexdig_fun>
 800f5a0:	2800      	cmp	r0, #0
 800f5a2:	d1f8      	bne.n	800f596 <__gethex+0x6a>
 800f5a4:	498d      	ldr	r1, [pc, #564]	@ (800f7dc <__gethex+0x2b0>)
 800f5a6:	2201      	movs	r2, #1
 800f5a8:	4630      	mov	r0, r6
 800f5aa:	f7ff f819 	bl	800e5e0 <strncmp>
 800f5ae:	2800      	cmp	r0, #0
 800f5b0:	d13f      	bne.n	800f632 <__gethex+0x106>
 800f5b2:	b944      	cbnz	r4, 800f5c6 <__gethex+0x9a>
 800f5b4:	1c74      	adds	r4, r6, #1
 800f5b6:	4622      	mov	r2, r4
 800f5b8:	4616      	mov	r6, r2
 800f5ba:	3201      	adds	r2, #1
 800f5bc:	7830      	ldrb	r0, [r6, #0]
 800f5be:	f7ff ff9f 	bl	800f500 <__hexdig_fun>
 800f5c2:	2800      	cmp	r0, #0
 800f5c4:	d1f8      	bne.n	800f5b8 <__gethex+0x8c>
 800f5c6:	1ba4      	subs	r4, r4, r6
 800f5c8:	00a7      	lsls	r7, r4, #2
 800f5ca:	7833      	ldrb	r3, [r6, #0]
 800f5cc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f5d0:	2b50      	cmp	r3, #80	@ 0x50
 800f5d2:	d13e      	bne.n	800f652 <__gethex+0x126>
 800f5d4:	7873      	ldrb	r3, [r6, #1]
 800f5d6:	2b2b      	cmp	r3, #43	@ 0x2b
 800f5d8:	d033      	beq.n	800f642 <__gethex+0x116>
 800f5da:	2b2d      	cmp	r3, #45	@ 0x2d
 800f5dc:	d034      	beq.n	800f648 <__gethex+0x11c>
 800f5de:	1c71      	adds	r1, r6, #1
 800f5e0:	2400      	movs	r4, #0
 800f5e2:	7808      	ldrb	r0, [r1, #0]
 800f5e4:	f7ff ff8c 	bl	800f500 <__hexdig_fun>
 800f5e8:	1e43      	subs	r3, r0, #1
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	2b18      	cmp	r3, #24
 800f5ee:	d830      	bhi.n	800f652 <__gethex+0x126>
 800f5f0:	f1a0 0210 	sub.w	r2, r0, #16
 800f5f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f5f8:	f7ff ff82 	bl	800f500 <__hexdig_fun>
 800f5fc:	f100 3cff 	add.w	ip, r0, #4294967295
 800f600:	fa5f fc8c 	uxtb.w	ip, ip
 800f604:	f1bc 0f18 	cmp.w	ip, #24
 800f608:	f04f 030a 	mov.w	r3, #10
 800f60c:	d91e      	bls.n	800f64c <__gethex+0x120>
 800f60e:	b104      	cbz	r4, 800f612 <__gethex+0xe6>
 800f610:	4252      	negs	r2, r2
 800f612:	4417      	add	r7, r2
 800f614:	f8ca 1000 	str.w	r1, [sl]
 800f618:	b1ed      	cbz	r5, 800f656 <__gethex+0x12a>
 800f61a:	f1bb 0f00 	cmp.w	fp, #0
 800f61e:	bf0c      	ite	eq
 800f620:	2506      	moveq	r5, #6
 800f622:	2500      	movne	r5, #0
 800f624:	4628      	mov	r0, r5
 800f626:	b005      	add	sp, #20
 800f628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f62c:	2500      	movs	r5, #0
 800f62e:	462c      	mov	r4, r5
 800f630:	e7b0      	b.n	800f594 <__gethex+0x68>
 800f632:	2c00      	cmp	r4, #0
 800f634:	d1c7      	bne.n	800f5c6 <__gethex+0x9a>
 800f636:	4627      	mov	r7, r4
 800f638:	e7c7      	b.n	800f5ca <__gethex+0x9e>
 800f63a:	464e      	mov	r6, r9
 800f63c:	462f      	mov	r7, r5
 800f63e:	2501      	movs	r5, #1
 800f640:	e7c3      	b.n	800f5ca <__gethex+0x9e>
 800f642:	2400      	movs	r4, #0
 800f644:	1cb1      	adds	r1, r6, #2
 800f646:	e7cc      	b.n	800f5e2 <__gethex+0xb6>
 800f648:	2401      	movs	r4, #1
 800f64a:	e7fb      	b.n	800f644 <__gethex+0x118>
 800f64c:	fb03 0002 	mla	r0, r3, r2, r0
 800f650:	e7ce      	b.n	800f5f0 <__gethex+0xc4>
 800f652:	4631      	mov	r1, r6
 800f654:	e7de      	b.n	800f614 <__gethex+0xe8>
 800f656:	eba6 0309 	sub.w	r3, r6, r9
 800f65a:	3b01      	subs	r3, #1
 800f65c:	4629      	mov	r1, r5
 800f65e:	2b07      	cmp	r3, #7
 800f660:	dc0a      	bgt.n	800f678 <__gethex+0x14c>
 800f662:	9801      	ldr	r0, [sp, #4]
 800f664:	f000 fafc 	bl	800fc60 <_Balloc>
 800f668:	4604      	mov	r4, r0
 800f66a:	b940      	cbnz	r0, 800f67e <__gethex+0x152>
 800f66c:	4b5c      	ldr	r3, [pc, #368]	@ (800f7e0 <__gethex+0x2b4>)
 800f66e:	4602      	mov	r2, r0
 800f670:	21e4      	movs	r1, #228	@ 0xe4
 800f672:	485c      	ldr	r0, [pc, #368]	@ (800f7e4 <__gethex+0x2b8>)
 800f674:	f001 fa5c 	bl	8010b30 <__assert_func>
 800f678:	3101      	adds	r1, #1
 800f67a:	105b      	asrs	r3, r3, #1
 800f67c:	e7ef      	b.n	800f65e <__gethex+0x132>
 800f67e:	f100 0a14 	add.w	sl, r0, #20
 800f682:	2300      	movs	r3, #0
 800f684:	4655      	mov	r5, sl
 800f686:	469b      	mov	fp, r3
 800f688:	45b1      	cmp	r9, r6
 800f68a:	d337      	bcc.n	800f6fc <__gethex+0x1d0>
 800f68c:	f845 bb04 	str.w	fp, [r5], #4
 800f690:	eba5 050a 	sub.w	r5, r5, sl
 800f694:	10ad      	asrs	r5, r5, #2
 800f696:	6125      	str	r5, [r4, #16]
 800f698:	4658      	mov	r0, fp
 800f69a:	f000 fbd3 	bl	800fe44 <__hi0bits>
 800f69e:	016d      	lsls	r5, r5, #5
 800f6a0:	f8d8 6000 	ldr.w	r6, [r8]
 800f6a4:	1a2d      	subs	r5, r5, r0
 800f6a6:	42b5      	cmp	r5, r6
 800f6a8:	dd54      	ble.n	800f754 <__gethex+0x228>
 800f6aa:	1bad      	subs	r5, r5, r6
 800f6ac:	4629      	mov	r1, r5
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	f000 ff67 	bl	8010582 <__any_on>
 800f6b4:	4681      	mov	r9, r0
 800f6b6:	b178      	cbz	r0, 800f6d8 <__gethex+0x1ac>
 800f6b8:	1e6b      	subs	r3, r5, #1
 800f6ba:	1159      	asrs	r1, r3, #5
 800f6bc:	f003 021f 	and.w	r2, r3, #31
 800f6c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f6c4:	f04f 0901 	mov.w	r9, #1
 800f6c8:	fa09 f202 	lsl.w	r2, r9, r2
 800f6cc:	420a      	tst	r2, r1
 800f6ce:	d003      	beq.n	800f6d8 <__gethex+0x1ac>
 800f6d0:	454b      	cmp	r3, r9
 800f6d2:	dc36      	bgt.n	800f742 <__gethex+0x216>
 800f6d4:	f04f 0902 	mov.w	r9, #2
 800f6d8:	4629      	mov	r1, r5
 800f6da:	4620      	mov	r0, r4
 800f6dc:	f7ff febe 	bl	800f45c <rshift>
 800f6e0:	442f      	add	r7, r5
 800f6e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f6e6:	42bb      	cmp	r3, r7
 800f6e8:	da42      	bge.n	800f770 <__gethex+0x244>
 800f6ea:	9801      	ldr	r0, [sp, #4]
 800f6ec:	4621      	mov	r1, r4
 800f6ee:	f000 faf7 	bl	800fce0 <_Bfree>
 800f6f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	6013      	str	r3, [r2, #0]
 800f6f8:	25a3      	movs	r5, #163	@ 0xa3
 800f6fa:	e793      	b.n	800f624 <__gethex+0xf8>
 800f6fc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f700:	2a2e      	cmp	r2, #46	@ 0x2e
 800f702:	d012      	beq.n	800f72a <__gethex+0x1fe>
 800f704:	2b20      	cmp	r3, #32
 800f706:	d104      	bne.n	800f712 <__gethex+0x1e6>
 800f708:	f845 bb04 	str.w	fp, [r5], #4
 800f70c:	f04f 0b00 	mov.w	fp, #0
 800f710:	465b      	mov	r3, fp
 800f712:	7830      	ldrb	r0, [r6, #0]
 800f714:	9303      	str	r3, [sp, #12]
 800f716:	f7ff fef3 	bl	800f500 <__hexdig_fun>
 800f71a:	9b03      	ldr	r3, [sp, #12]
 800f71c:	f000 000f 	and.w	r0, r0, #15
 800f720:	4098      	lsls	r0, r3
 800f722:	ea4b 0b00 	orr.w	fp, fp, r0
 800f726:	3304      	adds	r3, #4
 800f728:	e7ae      	b.n	800f688 <__gethex+0x15c>
 800f72a:	45b1      	cmp	r9, r6
 800f72c:	d8ea      	bhi.n	800f704 <__gethex+0x1d8>
 800f72e:	492b      	ldr	r1, [pc, #172]	@ (800f7dc <__gethex+0x2b0>)
 800f730:	9303      	str	r3, [sp, #12]
 800f732:	2201      	movs	r2, #1
 800f734:	4630      	mov	r0, r6
 800f736:	f7fe ff53 	bl	800e5e0 <strncmp>
 800f73a:	9b03      	ldr	r3, [sp, #12]
 800f73c:	2800      	cmp	r0, #0
 800f73e:	d1e1      	bne.n	800f704 <__gethex+0x1d8>
 800f740:	e7a2      	b.n	800f688 <__gethex+0x15c>
 800f742:	1ea9      	subs	r1, r5, #2
 800f744:	4620      	mov	r0, r4
 800f746:	f000 ff1c 	bl	8010582 <__any_on>
 800f74a:	2800      	cmp	r0, #0
 800f74c:	d0c2      	beq.n	800f6d4 <__gethex+0x1a8>
 800f74e:	f04f 0903 	mov.w	r9, #3
 800f752:	e7c1      	b.n	800f6d8 <__gethex+0x1ac>
 800f754:	da09      	bge.n	800f76a <__gethex+0x23e>
 800f756:	1b75      	subs	r5, r6, r5
 800f758:	4621      	mov	r1, r4
 800f75a:	9801      	ldr	r0, [sp, #4]
 800f75c:	462a      	mov	r2, r5
 800f75e:	f000 fcd7 	bl	8010110 <__lshift>
 800f762:	1b7f      	subs	r7, r7, r5
 800f764:	4604      	mov	r4, r0
 800f766:	f100 0a14 	add.w	sl, r0, #20
 800f76a:	f04f 0900 	mov.w	r9, #0
 800f76e:	e7b8      	b.n	800f6e2 <__gethex+0x1b6>
 800f770:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f774:	42bd      	cmp	r5, r7
 800f776:	dd6f      	ble.n	800f858 <__gethex+0x32c>
 800f778:	1bed      	subs	r5, r5, r7
 800f77a:	42ae      	cmp	r6, r5
 800f77c:	dc34      	bgt.n	800f7e8 <__gethex+0x2bc>
 800f77e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f782:	2b02      	cmp	r3, #2
 800f784:	d022      	beq.n	800f7cc <__gethex+0x2a0>
 800f786:	2b03      	cmp	r3, #3
 800f788:	d024      	beq.n	800f7d4 <__gethex+0x2a8>
 800f78a:	2b01      	cmp	r3, #1
 800f78c:	d115      	bne.n	800f7ba <__gethex+0x28e>
 800f78e:	42ae      	cmp	r6, r5
 800f790:	d113      	bne.n	800f7ba <__gethex+0x28e>
 800f792:	2e01      	cmp	r6, #1
 800f794:	d10b      	bne.n	800f7ae <__gethex+0x282>
 800f796:	9a02      	ldr	r2, [sp, #8]
 800f798:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f79c:	6013      	str	r3, [r2, #0]
 800f79e:	2301      	movs	r3, #1
 800f7a0:	6123      	str	r3, [r4, #16]
 800f7a2:	f8ca 3000 	str.w	r3, [sl]
 800f7a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f7a8:	2562      	movs	r5, #98	@ 0x62
 800f7aa:	601c      	str	r4, [r3, #0]
 800f7ac:	e73a      	b.n	800f624 <__gethex+0xf8>
 800f7ae:	1e71      	subs	r1, r6, #1
 800f7b0:	4620      	mov	r0, r4
 800f7b2:	f000 fee6 	bl	8010582 <__any_on>
 800f7b6:	2800      	cmp	r0, #0
 800f7b8:	d1ed      	bne.n	800f796 <__gethex+0x26a>
 800f7ba:	9801      	ldr	r0, [sp, #4]
 800f7bc:	4621      	mov	r1, r4
 800f7be:	f000 fa8f 	bl	800fce0 <_Bfree>
 800f7c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	6013      	str	r3, [r2, #0]
 800f7c8:	2550      	movs	r5, #80	@ 0x50
 800f7ca:	e72b      	b.n	800f624 <__gethex+0xf8>
 800f7cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d1f3      	bne.n	800f7ba <__gethex+0x28e>
 800f7d2:	e7e0      	b.n	800f796 <__gethex+0x26a>
 800f7d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d1dd      	bne.n	800f796 <__gethex+0x26a>
 800f7da:	e7ee      	b.n	800f7ba <__gethex+0x28e>
 800f7dc:	08011888 	.word	0x08011888
 800f7e0:	0801199d 	.word	0x0801199d
 800f7e4:	080119ae 	.word	0x080119ae
 800f7e8:	1e6f      	subs	r7, r5, #1
 800f7ea:	f1b9 0f00 	cmp.w	r9, #0
 800f7ee:	d130      	bne.n	800f852 <__gethex+0x326>
 800f7f0:	b127      	cbz	r7, 800f7fc <__gethex+0x2d0>
 800f7f2:	4639      	mov	r1, r7
 800f7f4:	4620      	mov	r0, r4
 800f7f6:	f000 fec4 	bl	8010582 <__any_on>
 800f7fa:	4681      	mov	r9, r0
 800f7fc:	117a      	asrs	r2, r7, #5
 800f7fe:	2301      	movs	r3, #1
 800f800:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f804:	f007 071f 	and.w	r7, r7, #31
 800f808:	40bb      	lsls	r3, r7
 800f80a:	4213      	tst	r3, r2
 800f80c:	4629      	mov	r1, r5
 800f80e:	4620      	mov	r0, r4
 800f810:	bf18      	it	ne
 800f812:	f049 0902 	orrne.w	r9, r9, #2
 800f816:	f7ff fe21 	bl	800f45c <rshift>
 800f81a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f81e:	1b76      	subs	r6, r6, r5
 800f820:	2502      	movs	r5, #2
 800f822:	f1b9 0f00 	cmp.w	r9, #0
 800f826:	d047      	beq.n	800f8b8 <__gethex+0x38c>
 800f828:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f82c:	2b02      	cmp	r3, #2
 800f82e:	d015      	beq.n	800f85c <__gethex+0x330>
 800f830:	2b03      	cmp	r3, #3
 800f832:	d017      	beq.n	800f864 <__gethex+0x338>
 800f834:	2b01      	cmp	r3, #1
 800f836:	d109      	bne.n	800f84c <__gethex+0x320>
 800f838:	f019 0f02 	tst.w	r9, #2
 800f83c:	d006      	beq.n	800f84c <__gethex+0x320>
 800f83e:	f8da 3000 	ldr.w	r3, [sl]
 800f842:	ea49 0903 	orr.w	r9, r9, r3
 800f846:	f019 0f01 	tst.w	r9, #1
 800f84a:	d10e      	bne.n	800f86a <__gethex+0x33e>
 800f84c:	f045 0510 	orr.w	r5, r5, #16
 800f850:	e032      	b.n	800f8b8 <__gethex+0x38c>
 800f852:	f04f 0901 	mov.w	r9, #1
 800f856:	e7d1      	b.n	800f7fc <__gethex+0x2d0>
 800f858:	2501      	movs	r5, #1
 800f85a:	e7e2      	b.n	800f822 <__gethex+0x2f6>
 800f85c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f85e:	f1c3 0301 	rsb	r3, r3, #1
 800f862:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f864:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f866:	2b00      	cmp	r3, #0
 800f868:	d0f0      	beq.n	800f84c <__gethex+0x320>
 800f86a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f86e:	f104 0314 	add.w	r3, r4, #20
 800f872:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f876:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f87a:	f04f 0c00 	mov.w	ip, #0
 800f87e:	4618      	mov	r0, r3
 800f880:	f853 2b04 	ldr.w	r2, [r3], #4
 800f884:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f888:	d01b      	beq.n	800f8c2 <__gethex+0x396>
 800f88a:	3201      	adds	r2, #1
 800f88c:	6002      	str	r2, [r0, #0]
 800f88e:	2d02      	cmp	r5, #2
 800f890:	f104 0314 	add.w	r3, r4, #20
 800f894:	d13c      	bne.n	800f910 <__gethex+0x3e4>
 800f896:	f8d8 2000 	ldr.w	r2, [r8]
 800f89a:	3a01      	subs	r2, #1
 800f89c:	42b2      	cmp	r2, r6
 800f89e:	d109      	bne.n	800f8b4 <__gethex+0x388>
 800f8a0:	1171      	asrs	r1, r6, #5
 800f8a2:	2201      	movs	r2, #1
 800f8a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f8a8:	f006 061f 	and.w	r6, r6, #31
 800f8ac:	fa02 f606 	lsl.w	r6, r2, r6
 800f8b0:	421e      	tst	r6, r3
 800f8b2:	d13a      	bne.n	800f92a <__gethex+0x3fe>
 800f8b4:	f045 0520 	orr.w	r5, r5, #32
 800f8b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f8ba:	601c      	str	r4, [r3, #0]
 800f8bc:	9b02      	ldr	r3, [sp, #8]
 800f8be:	601f      	str	r7, [r3, #0]
 800f8c0:	e6b0      	b.n	800f624 <__gethex+0xf8>
 800f8c2:	4299      	cmp	r1, r3
 800f8c4:	f843 cc04 	str.w	ip, [r3, #-4]
 800f8c8:	d8d9      	bhi.n	800f87e <__gethex+0x352>
 800f8ca:	68a3      	ldr	r3, [r4, #8]
 800f8cc:	459b      	cmp	fp, r3
 800f8ce:	db17      	blt.n	800f900 <__gethex+0x3d4>
 800f8d0:	6861      	ldr	r1, [r4, #4]
 800f8d2:	9801      	ldr	r0, [sp, #4]
 800f8d4:	3101      	adds	r1, #1
 800f8d6:	f000 f9c3 	bl	800fc60 <_Balloc>
 800f8da:	4681      	mov	r9, r0
 800f8dc:	b918      	cbnz	r0, 800f8e6 <__gethex+0x3ba>
 800f8de:	4b1a      	ldr	r3, [pc, #104]	@ (800f948 <__gethex+0x41c>)
 800f8e0:	4602      	mov	r2, r0
 800f8e2:	2184      	movs	r1, #132	@ 0x84
 800f8e4:	e6c5      	b.n	800f672 <__gethex+0x146>
 800f8e6:	6922      	ldr	r2, [r4, #16]
 800f8e8:	3202      	adds	r2, #2
 800f8ea:	f104 010c 	add.w	r1, r4, #12
 800f8ee:	0092      	lsls	r2, r2, #2
 800f8f0:	300c      	adds	r0, #12
 800f8f2:	f7fe fefe 	bl	800e6f2 <memcpy>
 800f8f6:	4621      	mov	r1, r4
 800f8f8:	9801      	ldr	r0, [sp, #4]
 800f8fa:	f000 f9f1 	bl	800fce0 <_Bfree>
 800f8fe:	464c      	mov	r4, r9
 800f900:	6923      	ldr	r3, [r4, #16]
 800f902:	1c5a      	adds	r2, r3, #1
 800f904:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f908:	6122      	str	r2, [r4, #16]
 800f90a:	2201      	movs	r2, #1
 800f90c:	615a      	str	r2, [r3, #20]
 800f90e:	e7be      	b.n	800f88e <__gethex+0x362>
 800f910:	6922      	ldr	r2, [r4, #16]
 800f912:	455a      	cmp	r2, fp
 800f914:	dd0b      	ble.n	800f92e <__gethex+0x402>
 800f916:	2101      	movs	r1, #1
 800f918:	4620      	mov	r0, r4
 800f91a:	f7ff fd9f 	bl	800f45c <rshift>
 800f91e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f922:	3701      	adds	r7, #1
 800f924:	42bb      	cmp	r3, r7
 800f926:	f6ff aee0 	blt.w	800f6ea <__gethex+0x1be>
 800f92a:	2501      	movs	r5, #1
 800f92c:	e7c2      	b.n	800f8b4 <__gethex+0x388>
 800f92e:	f016 061f 	ands.w	r6, r6, #31
 800f932:	d0fa      	beq.n	800f92a <__gethex+0x3fe>
 800f934:	4453      	add	r3, sl
 800f936:	f1c6 0620 	rsb	r6, r6, #32
 800f93a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f93e:	f000 fa81 	bl	800fe44 <__hi0bits>
 800f942:	42b0      	cmp	r0, r6
 800f944:	dbe7      	blt.n	800f916 <__gethex+0x3ea>
 800f946:	e7f0      	b.n	800f92a <__gethex+0x3fe>
 800f948:	0801199d 	.word	0x0801199d

0800f94c <L_shift>:
 800f94c:	f1c2 0208 	rsb	r2, r2, #8
 800f950:	0092      	lsls	r2, r2, #2
 800f952:	b570      	push	{r4, r5, r6, lr}
 800f954:	f1c2 0620 	rsb	r6, r2, #32
 800f958:	6843      	ldr	r3, [r0, #4]
 800f95a:	6804      	ldr	r4, [r0, #0]
 800f95c:	fa03 f506 	lsl.w	r5, r3, r6
 800f960:	432c      	orrs	r4, r5
 800f962:	40d3      	lsrs	r3, r2
 800f964:	6004      	str	r4, [r0, #0]
 800f966:	f840 3f04 	str.w	r3, [r0, #4]!
 800f96a:	4288      	cmp	r0, r1
 800f96c:	d3f4      	bcc.n	800f958 <L_shift+0xc>
 800f96e:	bd70      	pop	{r4, r5, r6, pc}

0800f970 <__match>:
 800f970:	b530      	push	{r4, r5, lr}
 800f972:	6803      	ldr	r3, [r0, #0]
 800f974:	3301      	adds	r3, #1
 800f976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f97a:	b914      	cbnz	r4, 800f982 <__match+0x12>
 800f97c:	6003      	str	r3, [r0, #0]
 800f97e:	2001      	movs	r0, #1
 800f980:	bd30      	pop	{r4, r5, pc}
 800f982:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f986:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f98a:	2d19      	cmp	r5, #25
 800f98c:	bf98      	it	ls
 800f98e:	3220      	addls	r2, #32
 800f990:	42a2      	cmp	r2, r4
 800f992:	d0f0      	beq.n	800f976 <__match+0x6>
 800f994:	2000      	movs	r0, #0
 800f996:	e7f3      	b.n	800f980 <__match+0x10>

0800f998 <__hexnan>:
 800f998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f99c:	680b      	ldr	r3, [r1, #0]
 800f99e:	6801      	ldr	r1, [r0, #0]
 800f9a0:	115e      	asrs	r6, r3, #5
 800f9a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f9a6:	f013 031f 	ands.w	r3, r3, #31
 800f9aa:	b087      	sub	sp, #28
 800f9ac:	bf18      	it	ne
 800f9ae:	3604      	addne	r6, #4
 800f9b0:	2500      	movs	r5, #0
 800f9b2:	1f37      	subs	r7, r6, #4
 800f9b4:	4682      	mov	sl, r0
 800f9b6:	4690      	mov	r8, r2
 800f9b8:	9301      	str	r3, [sp, #4]
 800f9ba:	f846 5c04 	str.w	r5, [r6, #-4]
 800f9be:	46b9      	mov	r9, r7
 800f9c0:	463c      	mov	r4, r7
 800f9c2:	9502      	str	r5, [sp, #8]
 800f9c4:	46ab      	mov	fp, r5
 800f9c6:	784a      	ldrb	r2, [r1, #1]
 800f9c8:	1c4b      	adds	r3, r1, #1
 800f9ca:	9303      	str	r3, [sp, #12]
 800f9cc:	b342      	cbz	r2, 800fa20 <__hexnan+0x88>
 800f9ce:	4610      	mov	r0, r2
 800f9d0:	9105      	str	r1, [sp, #20]
 800f9d2:	9204      	str	r2, [sp, #16]
 800f9d4:	f7ff fd94 	bl	800f500 <__hexdig_fun>
 800f9d8:	2800      	cmp	r0, #0
 800f9da:	d151      	bne.n	800fa80 <__hexnan+0xe8>
 800f9dc:	9a04      	ldr	r2, [sp, #16]
 800f9de:	9905      	ldr	r1, [sp, #20]
 800f9e0:	2a20      	cmp	r2, #32
 800f9e2:	d818      	bhi.n	800fa16 <__hexnan+0x7e>
 800f9e4:	9b02      	ldr	r3, [sp, #8]
 800f9e6:	459b      	cmp	fp, r3
 800f9e8:	dd13      	ble.n	800fa12 <__hexnan+0x7a>
 800f9ea:	454c      	cmp	r4, r9
 800f9ec:	d206      	bcs.n	800f9fc <__hexnan+0x64>
 800f9ee:	2d07      	cmp	r5, #7
 800f9f0:	dc04      	bgt.n	800f9fc <__hexnan+0x64>
 800f9f2:	462a      	mov	r2, r5
 800f9f4:	4649      	mov	r1, r9
 800f9f6:	4620      	mov	r0, r4
 800f9f8:	f7ff ffa8 	bl	800f94c <L_shift>
 800f9fc:	4544      	cmp	r4, r8
 800f9fe:	d952      	bls.n	800faa6 <__hexnan+0x10e>
 800fa00:	2300      	movs	r3, #0
 800fa02:	f1a4 0904 	sub.w	r9, r4, #4
 800fa06:	f844 3c04 	str.w	r3, [r4, #-4]
 800fa0a:	f8cd b008 	str.w	fp, [sp, #8]
 800fa0e:	464c      	mov	r4, r9
 800fa10:	461d      	mov	r5, r3
 800fa12:	9903      	ldr	r1, [sp, #12]
 800fa14:	e7d7      	b.n	800f9c6 <__hexnan+0x2e>
 800fa16:	2a29      	cmp	r2, #41	@ 0x29
 800fa18:	d157      	bne.n	800faca <__hexnan+0x132>
 800fa1a:	3102      	adds	r1, #2
 800fa1c:	f8ca 1000 	str.w	r1, [sl]
 800fa20:	f1bb 0f00 	cmp.w	fp, #0
 800fa24:	d051      	beq.n	800faca <__hexnan+0x132>
 800fa26:	454c      	cmp	r4, r9
 800fa28:	d206      	bcs.n	800fa38 <__hexnan+0xa0>
 800fa2a:	2d07      	cmp	r5, #7
 800fa2c:	dc04      	bgt.n	800fa38 <__hexnan+0xa0>
 800fa2e:	462a      	mov	r2, r5
 800fa30:	4649      	mov	r1, r9
 800fa32:	4620      	mov	r0, r4
 800fa34:	f7ff ff8a 	bl	800f94c <L_shift>
 800fa38:	4544      	cmp	r4, r8
 800fa3a:	d936      	bls.n	800faaa <__hexnan+0x112>
 800fa3c:	f1a8 0204 	sub.w	r2, r8, #4
 800fa40:	4623      	mov	r3, r4
 800fa42:	f853 1b04 	ldr.w	r1, [r3], #4
 800fa46:	f842 1f04 	str.w	r1, [r2, #4]!
 800fa4a:	429f      	cmp	r7, r3
 800fa4c:	d2f9      	bcs.n	800fa42 <__hexnan+0xaa>
 800fa4e:	1b3b      	subs	r3, r7, r4
 800fa50:	f023 0303 	bic.w	r3, r3, #3
 800fa54:	3304      	adds	r3, #4
 800fa56:	3401      	adds	r4, #1
 800fa58:	3e03      	subs	r6, #3
 800fa5a:	42b4      	cmp	r4, r6
 800fa5c:	bf88      	it	hi
 800fa5e:	2304      	movhi	r3, #4
 800fa60:	4443      	add	r3, r8
 800fa62:	2200      	movs	r2, #0
 800fa64:	f843 2b04 	str.w	r2, [r3], #4
 800fa68:	429f      	cmp	r7, r3
 800fa6a:	d2fb      	bcs.n	800fa64 <__hexnan+0xcc>
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	b91b      	cbnz	r3, 800fa78 <__hexnan+0xe0>
 800fa70:	4547      	cmp	r7, r8
 800fa72:	d128      	bne.n	800fac6 <__hexnan+0x12e>
 800fa74:	2301      	movs	r3, #1
 800fa76:	603b      	str	r3, [r7, #0]
 800fa78:	2005      	movs	r0, #5
 800fa7a:	b007      	add	sp, #28
 800fa7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa80:	3501      	adds	r5, #1
 800fa82:	2d08      	cmp	r5, #8
 800fa84:	f10b 0b01 	add.w	fp, fp, #1
 800fa88:	dd06      	ble.n	800fa98 <__hexnan+0x100>
 800fa8a:	4544      	cmp	r4, r8
 800fa8c:	d9c1      	bls.n	800fa12 <__hexnan+0x7a>
 800fa8e:	2300      	movs	r3, #0
 800fa90:	f844 3c04 	str.w	r3, [r4, #-4]
 800fa94:	2501      	movs	r5, #1
 800fa96:	3c04      	subs	r4, #4
 800fa98:	6822      	ldr	r2, [r4, #0]
 800fa9a:	f000 000f 	and.w	r0, r0, #15
 800fa9e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800faa2:	6020      	str	r0, [r4, #0]
 800faa4:	e7b5      	b.n	800fa12 <__hexnan+0x7a>
 800faa6:	2508      	movs	r5, #8
 800faa8:	e7b3      	b.n	800fa12 <__hexnan+0x7a>
 800faaa:	9b01      	ldr	r3, [sp, #4]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d0dd      	beq.n	800fa6c <__hexnan+0xd4>
 800fab0:	f1c3 0320 	rsb	r3, r3, #32
 800fab4:	f04f 32ff 	mov.w	r2, #4294967295
 800fab8:	40da      	lsrs	r2, r3
 800faba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800fabe:	4013      	ands	r3, r2
 800fac0:	f846 3c04 	str.w	r3, [r6, #-4]
 800fac4:	e7d2      	b.n	800fa6c <__hexnan+0xd4>
 800fac6:	3f04      	subs	r7, #4
 800fac8:	e7d0      	b.n	800fa6c <__hexnan+0xd4>
 800faca:	2004      	movs	r0, #4
 800facc:	e7d5      	b.n	800fa7a <__hexnan+0xe2>
	...

0800fad0 <malloc>:
 800fad0:	4b02      	ldr	r3, [pc, #8]	@ (800fadc <malloc+0xc>)
 800fad2:	4601      	mov	r1, r0
 800fad4:	6818      	ldr	r0, [r3, #0]
 800fad6:	f000 b825 	b.w	800fb24 <_malloc_r>
 800fada:	bf00      	nop
 800fadc:	20000208 	.word	0x20000208

0800fae0 <sbrk_aligned>:
 800fae0:	b570      	push	{r4, r5, r6, lr}
 800fae2:	4e0f      	ldr	r6, [pc, #60]	@ (800fb20 <sbrk_aligned+0x40>)
 800fae4:	460c      	mov	r4, r1
 800fae6:	6831      	ldr	r1, [r6, #0]
 800fae8:	4605      	mov	r5, r0
 800faea:	b911      	cbnz	r1, 800faf2 <sbrk_aligned+0x12>
 800faec:	f001 f810 	bl	8010b10 <_sbrk_r>
 800faf0:	6030      	str	r0, [r6, #0]
 800faf2:	4621      	mov	r1, r4
 800faf4:	4628      	mov	r0, r5
 800faf6:	f001 f80b 	bl	8010b10 <_sbrk_r>
 800fafa:	1c43      	adds	r3, r0, #1
 800fafc:	d103      	bne.n	800fb06 <sbrk_aligned+0x26>
 800fafe:	f04f 34ff 	mov.w	r4, #4294967295
 800fb02:	4620      	mov	r0, r4
 800fb04:	bd70      	pop	{r4, r5, r6, pc}
 800fb06:	1cc4      	adds	r4, r0, #3
 800fb08:	f024 0403 	bic.w	r4, r4, #3
 800fb0c:	42a0      	cmp	r0, r4
 800fb0e:	d0f8      	beq.n	800fb02 <sbrk_aligned+0x22>
 800fb10:	1a21      	subs	r1, r4, r0
 800fb12:	4628      	mov	r0, r5
 800fb14:	f000 fffc 	bl	8010b10 <_sbrk_r>
 800fb18:	3001      	adds	r0, #1
 800fb1a:	d1f2      	bne.n	800fb02 <sbrk_aligned+0x22>
 800fb1c:	e7ef      	b.n	800fafe <sbrk_aligned+0x1e>
 800fb1e:	bf00      	nop
 800fb20:	20000a5c 	.word	0x20000a5c

0800fb24 <_malloc_r>:
 800fb24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb28:	1ccd      	adds	r5, r1, #3
 800fb2a:	f025 0503 	bic.w	r5, r5, #3
 800fb2e:	3508      	adds	r5, #8
 800fb30:	2d0c      	cmp	r5, #12
 800fb32:	bf38      	it	cc
 800fb34:	250c      	movcc	r5, #12
 800fb36:	2d00      	cmp	r5, #0
 800fb38:	4606      	mov	r6, r0
 800fb3a:	db01      	blt.n	800fb40 <_malloc_r+0x1c>
 800fb3c:	42a9      	cmp	r1, r5
 800fb3e:	d904      	bls.n	800fb4a <_malloc_r+0x26>
 800fb40:	230c      	movs	r3, #12
 800fb42:	6033      	str	r3, [r6, #0]
 800fb44:	2000      	movs	r0, #0
 800fb46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fc20 <_malloc_r+0xfc>
 800fb4e:	f000 f87b 	bl	800fc48 <__malloc_lock>
 800fb52:	f8d8 3000 	ldr.w	r3, [r8]
 800fb56:	461c      	mov	r4, r3
 800fb58:	bb44      	cbnz	r4, 800fbac <_malloc_r+0x88>
 800fb5a:	4629      	mov	r1, r5
 800fb5c:	4630      	mov	r0, r6
 800fb5e:	f7ff ffbf 	bl	800fae0 <sbrk_aligned>
 800fb62:	1c43      	adds	r3, r0, #1
 800fb64:	4604      	mov	r4, r0
 800fb66:	d158      	bne.n	800fc1a <_malloc_r+0xf6>
 800fb68:	f8d8 4000 	ldr.w	r4, [r8]
 800fb6c:	4627      	mov	r7, r4
 800fb6e:	2f00      	cmp	r7, #0
 800fb70:	d143      	bne.n	800fbfa <_malloc_r+0xd6>
 800fb72:	2c00      	cmp	r4, #0
 800fb74:	d04b      	beq.n	800fc0e <_malloc_r+0xea>
 800fb76:	6823      	ldr	r3, [r4, #0]
 800fb78:	4639      	mov	r1, r7
 800fb7a:	4630      	mov	r0, r6
 800fb7c:	eb04 0903 	add.w	r9, r4, r3
 800fb80:	f000 ffc6 	bl	8010b10 <_sbrk_r>
 800fb84:	4581      	cmp	r9, r0
 800fb86:	d142      	bne.n	800fc0e <_malloc_r+0xea>
 800fb88:	6821      	ldr	r1, [r4, #0]
 800fb8a:	1a6d      	subs	r5, r5, r1
 800fb8c:	4629      	mov	r1, r5
 800fb8e:	4630      	mov	r0, r6
 800fb90:	f7ff ffa6 	bl	800fae0 <sbrk_aligned>
 800fb94:	3001      	adds	r0, #1
 800fb96:	d03a      	beq.n	800fc0e <_malloc_r+0xea>
 800fb98:	6823      	ldr	r3, [r4, #0]
 800fb9a:	442b      	add	r3, r5
 800fb9c:	6023      	str	r3, [r4, #0]
 800fb9e:	f8d8 3000 	ldr.w	r3, [r8]
 800fba2:	685a      	ldr	r2, [r3, #4]
 800fba4:	bb62      	cbnz	r2, 800fc00 <_malloc_r+0xdc>
 800fba6:	f8c8 7000 	str.w	r7, [r8]
 800fbaa:	e00f      	b.n	800fbcc <_malloc_r+0xa8>
 800fbac:	6822      	ldr	r2, [r4, #0]
 800fbae:	1b52      	subs	r2, r2, r5
 800fbb0:	d420      	bmi.n	800fbf4 <_malloc_r+0xd0>
 800fbb2:	2a0b      	cmp	r2, #11
 800fbb4:	d917      	bls.n	800fbe6 <_malloc_r+0xc2>
 800fbb6:	1961      	adds	r1, r4, r5
 800fbb8:	42a3      	cmp	r3, r4
 800fbba:	6025      	str	r5, [r4, #0]
 800fbbc:	bf18      	it	ne
 800fbbe:	6059      	strne	r1, [r3, #4]
 800fbc0:	6863      	ldr	r3, [r4, #4]
 800fbc2:	bf08      	it	eq
 800fbc4:	f8c8 1000 	streq.w	r1, [r8]
 800fbc8:	5162      	str	r2, [r4, r5]
 800fbca:	604b      	str	r3, [r1, #4]
 800fbcc:	4630      	mov	r0, r6
 800fbce:	f000 f841 	bl	800fc54 <__malloc_unlock>
 800fbd2:	f104 000b 	add.w	r0, r4, #11
 800fbd6:	1d23      	adds	r3, r4, #4
 800fbd8:	f020 0007 	bic.w	r0, r0, #7
 800fbdc:	1ac2      	subs	r2, r0, r3
 800fbde:	bf1c      	itt	ne
 800fbe0:	1a1b      	subne	r3, r3, r0
 800fbe2:	50a3      	strne	r3, [r4, r2]
 800fbe4:	e7af      	b.n	800fb46 <_malloc_r+0x22>
 800fbe6:	6862      	ldr	r2, [r4, #4]
 800fbe8:	42a3      	cmp	r3, r4
 800fbea:	bf0c      	ite	eq
 800fbec:	f8c8 2000 	streq.w	r2, [r8]
 800fbf0:	605a      	strne	r2, [r3, #4]
 800fbf2:	e7eb      	b.n	800fbcc <_malloc_r+0xa8>
 800fbf4:	4623      	mov	r3, r4
 800fbf6:	6864      	ldr	r4, [r4, #4]
 800fbf8:	e7ae      	b.n	800fb58 <_malloc_r+0x34>
 800fbfa:	463c      	mov	r4, r7
 800fbfc:	687f      	ldr	r7, [r7, #4]
 800fbfe:	e7b6      	b.n	800fb6e <_malloc_r+0x4a>
 800fc00:	461a      	mov	r2, r3
 800fc02:	685b      	ldr	r3, [r3, #4]
 800fc04:	42a3      	cmp	r3, r4
 800fc06:	d1fb      	bne.n	800fc00 <_malloc_r+0xdc>
 800fc08:	2300      	movs	r3, #0
 800fc0a:	6053      	str	r3, [r2, #4]
 800fc0c:	e7de      	b.n	800fbcc <_malloc_r+0xa8>
 800fc0e:	230c      	movs	r3, #12
 800fc10:	6033      	str	r3, [r6, #0]
 800fc12:	4630      	mov	r0, r6
 800fc14:	f000 f81e 	bl	800fc54 <__malloc_unlock>
 800fc18:	e794      	b.n	800fb44 <_malloc_r+0x20>
 800fc1a:	6005      	str	r5, [r0, #0]
 800fc1c:	e7d6      	b.n	800fbcc <_malloc_r+0xa8>
 800fc1e:	bf00      	nop
 800fc20:	20000a60 	.word	0x20000a60

0800fc24 <__ascii_mbtowc>:
 800fc24:	b082      	sub	sp, #8
 800fc26:	b901      	cbnz	r1, 800fc2a <__ascii_mbtowc+0x6>
 800fc28:	a901      	add	r1, sp, #4
 800fc2a:	b142      	cbz	r2, 800fc3e <__ascii_mbtowc+0x1a>
 800fc2c:	b14b      	cbz	r3, 800fc42 <__ascii_mbtowc+0x1e>
 800fc2e:	7813      	ldrb	r3, [r2, #0]
 800fc30:	600b      	str	r3, [r1, #0]
 800fc32:	7812      	ldrb	r2, [r2, #0]
 800fc34:	1e10      	subs	r0, r2, #0
 800fc36:	bf18      	it	ne
 800fc38:	2001      	movne	r0, #1
 800fc3a:	b002      	add	sp, #8
 800fc3c:	4770      	bx	lr
 800fc3e:	4610      	mov	r0, r2
 800fc40:	e7fb      	b.n	800fc3a <__ascii_mbtowc+0x16>
 800fc42:	f06f 0001 	mvn.w	r0, #1
 800fc46:	e7f8      	b.n	800fc3a <__ascii_mbtowc+0x16>

0800fc48 <__malloc_lock>:
 800fc48:	4801      	ldr	r0, [pc, #4]	@ (800fc50 <__malloc_lock+0x8>)
 800fc4a:	f7fe bd50 	b.w	800e6ee <__retarget_lock_acquire_recursive>
 800fc4e:	bf00      	nop
 800fc50:	20000a58 	.word	0x20000a58

0800fc54 <__malloc_unlock>:
 800fc54:	4801      	ldr	r0, [pc, #4]	@ (800fc5c <__malloc_unlock+0x8>)
 800fc56:	f7fe bd4b 	b.w	800e6f0 <__retarget_lock_release_recursive>
 800fc5a:	bf00      	nop
 800fc5c:	20000a58 	.word	0x20000a58

0800fc60 <_Balloc>:
 800fc60:	b570      	push	{r4, r5, r6, lr}
 800fc62:	69c6      	ldr	r6, [r0, #28]
 800fc64:	4604      	mov	r4, r0
 800fc66:	460d      	mov	r5, r1
 800fc68:	b976      	cbnz	r6, 800fc88 <_Balloc+0x28>
 800fc6a:	2010      	movs	r0, #16
 800fc6c:	f7ff ff30 	bl	800fad0 <malloc>
 800fc70:	4602      	mov	r2, r0
 800fc72:	61e0      	str	r0, [r4, #28]
 800fc74:	b920      	cbnz	r0, 800fc80 <_Balloc+0x20>
 800fc76:	4b18      	ldr	r3, [pc, #96]	@ (800fcd8 <_Balloc+0x78>)
 800fc78:	4818      	ldr	r0, [pc, #96]	@ (800fcdc <_Balloc+0x7c>)
 800fc7a:	216b      	movs	r1, #107	@ 0x6b
 800fc7c:	f000 ff58 	bl	8010b30 <__assert_func>
 800fc80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc84:	6006      	str	r6, [r0, #0]
 800fc86:	60c6      	str	r6, [r0, #12]
 800fc88:	69e6      	ldr	r6, [r4, #28]
 800fc8a:	68f3      	ldr	r3, [r6, #12]
 800fc8c:	b183      	cbz	r3, 800fcb0 <_Balloc+0x50>
 800fc8e:	69e3      	ldr	r3, [r4, #28]
 800fc90:	68db      	ldr	r3, [r3, #12]
 800fc92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fc96:	b9b8      	cbnz	r0, 800fcc8 <_Balloc+0x68>
 800fc98:	2101      	movs	r1, #1
 800fc9a:	fa01 f605 	lsl.w	r6, r1, r5
 800fc9e:	1d72      	adds	r2, r6, #5
 800fca0:	0092      	lsls	r2, r2, #2
 800fca2:	4620      	mov	r0, r4
 800fca4:	f000 ff62 	bl	8010b6c <_calloc_r>
 800fca8:	b160      	cbz	r0, 800fcc4 <_Balloc+0x64>
 800fcaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fcae:	e00e      	b.n	800fcce <_Balloc+0x6e>
 800fcb0:	2221      	movs	r2, #33	@ 0x21
 800fcb2:	2104      	movs	r1, #4
 800fcb4:	4620      	mov	r0, r4
 800fcb6:	f000 ff59 	bl	8010b6c <_calloc_r>
 800fcba:	69e3      	ldr	r3, [r4, #28]
 800fcbc:	60f0      	str	r0, [r6, #12]
 800fcbe:	68db      	ldr	r3, [r3, #12]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d1e4      	bne.n	800fc8e <_Balloc+0x2e>
 800fcc4:	2000      	movs	r0, #0
 800fcc6:	bd70      	pop	{r4, r5, r6, pc}
 800fcc8:	6802      	ldr	r2, [r0, #0]
 800fcca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fcce:	2300      	movs	r3, #0
 800fcd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fcd4:	e7f7      	b.n	800fcc6 <_Balloc+0x66>
 800fcd6:	bf00      	nop
 800fcd8:	0801192e 	.word	0x0801192e
 800fcdc:	08011a0e 	.word	0x08011a0e

0800fce0 <_Bfree>:
 800fce0:	b570      	push	{r4, r5, r6, lr}
 800fce2:	69c6      	ldr	r6, [r0, #28]
 800fce4:	4605      	mov	r5, r0
 800fce6:	460c      	mov	r4, r1
 800fce8:	b976      	cbnz	r6, 800fd08 <_Bfree+0x28>
 800fcea:	2010      	movs	r0, #16
 800fcec:	f7ff fef0 	bl	800fad0 <malloc>
 800fcf0:	4602      	mov	r2, r0
 800fcf2:	61e8      	str	r0, [r5, #28]
 800fcf4:	b920      	cbnz	r0, 800fd00 <_Bfree+0x20>
 800fcf6:	4b09      	ldr	r3, [pc, #36]	@ (800fd1c <_Bfree+0x3c>)
 800fcf8:	4809      	ldr	r0, [pc, #36]	@ (800fd20 <_Bfree+0x40>)
 800fcfa:	218f      	movs	r1, #143	@ 0x8f
 800fcfc:	f000 ff18 	bl	8010b30 <__assert_func>
 800fd00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd04:	6006      	str	r6, [r0, #0]
 800fd06:	60c6      	str	r6, [r0, #12]
 800fd08:	b13c      	cbz	r4, 800fd1a <_Bfree+0x3a>
 800fd0a:	69eb      	ldr	r3, [r5, #28]
 800fd0c:	6862      	ldr	r2, [r4, #4]
 800fd0e:	68db      	ldr	r3, [r3, #12]
 800fd10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fd14:	6021      	str	r1, [r4, #0]
 800fd16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fd1a:	bd70      	pop	{r4, r5, r6, pc}
 800fd1c:	0801192e 	.word	0x0801192e
 800fd20:	08011a0e 	.word	0x08011a0e

0800fd24 <__multadd>:
 800fd24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd28:	690d      	ldr	r5, [r1, #16]
 800fd2a:	4607      	mov	r7, r0
 800fd2c:	460c      	mov	r4, r1
 800fd2e:	461e      	mov	r6, r3
 800fd30:	f101 0c14 	add.w	ip, r1, #20
 800fd34:	2000      	movs	r0, #0
 800fd36:	f8dc 3000 	ldr.w	r3, [ip]
 800fd3a:	b299      	uxth	r1, r3
 800fd3c:	fb02 6101 	mla	r1, r2, r1, r6
 800fd40:	0c1e      	lsrs	r6, r3, #16
 800fd42:	0c0b      	lsrs	r3, r1, #16
 800fd44:	fb02 3306 	mla	r3, r2, r6, r3
 800fd48:	b289      	uxth	r1, r1
 800fd4a:	3001      	adds	r0, #1
 800fd4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fd50:	4285      	cmp	r5, r0
 800fd52:	f84c 1b04 	str.w	r1, [ip], #4
 800fd56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fd5a:	dcec      	bgt.n	800fd36 <__multadd+0x12>
 800fd5c:	b30e      	cbz	r6, 800fda2 <__multadd+0x7e>
 800fd5e:	68a3      	ldr	r3, [r4, #8]
 800fd60:	42ab      	cmp	r3, r5
 800fd62:	dc19      	bgt.n	800fd98 <__multadd+0x74>
 800fd64:	6861      	ldr	r1, [r4, #4]
 800fd66:	4638      	mov	r0, r7
 800fd68:	3101      	adds	r1, #1
 800fd6a:	f7ff ff79 	bl	800fc60 <_Balloc>
 800fd6e:	4680      	mov	r8, r0
 800fd70:	b928      	cbnz	r0, 800fd7e <__multadd+0x5a>
 800fd72:	4602      	mov	r2, r0
 800fd74:	4b0c      	ldr	r3, [pc, #48]	@ (800fda8 <__multadd+0x84>)
 800fd76:	480d      	ldr	r0, [pc, #52]	@ (800fdac <__multadd+0x88>)
 800fd78:	21ba      	movs	r1, #186	@ 0xba
 800fd7a:	f000 fed9 	bl	8010b30 <__assert_func>
 800fd7e:	6922      	ldr	r2, [r4, #16]
 800fd80:	3202      	adds	r2, #2
 800fd82:	f104 010c 	add.w	r1, r4, #12
 800fd86:	0092      	lsls	r2, r2, #2
 800fd88:	300c      	adds	r0, #12
 800fd8a:	f7fe fcb2 	bl	800e6f2 <memcpy>
 800fd8e:	4621      	mov	r1, r4
 800fd90:	4638      	mov	r0, r7
 800fd92:	f7ff ffa5 	bl	800fce0 <_Bfree>
 800fd96:	4644      	mov	r4, r8
 800fd98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fd9c:	3501      	adds	r5, #1
 800fd9e:	615e      	str	r6, [r3, #20]
 800fda0:	6125      	str	r5, [r4, #16]
 800fda2:	4620      	mov	r0, r4
 800fda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fda8:	0801199d 	.word	0x0801199d
 800fdac:	08011a0e 	.word	0x08011a0e

0800fdb0 <__s2b>:
 800fdb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdb4:	460c      	mov	r4, r1
 800fdb6:	4615      	mov	r5, r2
 800fdb8:	461f      	mov	r7, r3
 800fdba:	2209      	movs	r2, #9
 800fdbc:	3308      	adds	r3, #8
 800fdbe:	4606      	mov	r6, r0
 800fdc0:	fb93 f3f2 	sdiv	r3, r3, r2
 800fdc4:	2100      	movs	r1, #0
 800fdc6:	2201      	movs	r2, #1
 800fdc8:	429a      	cmp	r2, r3
 800fdca:	db09      	blt.n	800fde0 <__s2b+0x30>
 800fdcc:	4630      	mov	r0, r6
 800fdce:	f7ff ff47 	bl	800fc60 <_Balloc>
 800fdd2:	b940      	cbnz	r0, 800fde6 <__s2b+0x36>
 800fdd4:	4602      	mov	r2, r0
 800fdd6:	4b19      	ldr	r3, [pc, #100]	@ (800fe3c <__s2b+0x8c>)
 800fdd8:	4819      	ldr	r0, [pc, #100]	@ (800fe40 <__s2b+0x90>)
 800fdda:	21d3      	movs	r1, #211	@ 0xd3
 800fddc:	f000 fea8 	bl	8010b30 <__assert_func>
 800fde0:	0052      	lsls	r2, r2, #1
 800fde2:	3101      	adds	r1, #1
 800fde4:	e7f0      	b.n	800fdc8 <__s2b+0x18>
 800fde6:	9b08      	ldr	r3, [sp, #32]
 800fde8:	6143      	str	r3, [r0, #20]
 800fdea:	2d09      	cmp	r5, #9
 800fdec:	f04f 0301 	mov.w	r3, #1
 800fdf0:	6103      	str	r3, [r0, #16]
 800fdf2:	dd16      	ble.n	800fe22 <__s2b+0x72>
 800fdf4:	f104 0909 	add.w	r9, r4, #9
 800fdf8:	46c8      	mov	r8, r9
 800fdfa:	442c      	add	r4, r5
 800fdfc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fe00:	4601      	mov	r1, r0
 800fe02:	3b30      	subs	r3, #48	@ 0x30
 800fe04:	220a      	movs	r2, #10
 800fe06:	4630      	mov	r0, r6
 800fe08:	f7ff ff8c 	bl	800fd24 <__multadd>
 800fe0c:	45a0      	cmp	r8, r4
 800fe0e:	d1f5      	bne.n	800fdfc <__s2b+0x4c>
 800fe10:	f1a5 0408 	sub.w	r4, r5, #8
 800fe14:	444c      	add	r4, r9
 800fe16:	1b2d      	subs	r5, r5, r4
 800fe18:	1963      	adds	r3, r4, r5
 800fe1a:	42bb      	cmp	r3, r7
 800fe1c:	db04      	blt.n	800fe28 <__s2b+0x78>
 800fe1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe22:	340a      	adds	r4, #10
 800fe24:	2509      	movs	r5, #9
 800fe26:	e7f6      	b.n	800fe16 <__s2b+0x66>
 800fe28:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fe2c:	4601      	mov	r1, r0
 800fe2e:	3b30      	subs	r3, #48	@ 0x30
 800fe30:	220a      	movs	r2, #10
 800fe32:	4630      	mov	r0, r6
 800fe34:	f7ff ff76 	bl	800fd24 <__multadd>
 800fe38:	e7ee      	b.n	800fe18 <__s2b+0x68>
 800fe3a:	bf00      	nop
 800fe3c:	0801199d 	.word	0x0801199d
 800fe40:	08011a0e 	.word	0x08011a0e

0800fe44 <__hi0bits>:
 800fe44:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fe48:	4603      	mov	r3, r0
 800fe4a:	bf36      	itet	cc
 800fe4c:	0403      	lslcc	r3, r0, #16
 800fe4e:	2000      	movcs	r0, #0
 800fe50:	2010      	movcc	r0, #16
 800fe52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fe56:	bf3c      	itt	cc
 800fe58:	021b      	lslcc	r3, r3, #8
 800fe5a:	3008      	addcc	r0, #8
 800fe5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fe60:	bf3c      	itt	cc
 800fe62:	011b      	lslcc	r3, r3, #4
 800fe64:	3004      	addcc	r0, #4
 800fe66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fe6a:	bf3c      	itt	cc
 800fe6c:	009b      	lslcc	r3, r3, #2
 800fe6e:	3002      	addcc	r0, #2
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	db05      	blt.n	800fe80 <__hi0bits+0x3c>
 800fe74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fe78:	f100 0001 	add.w	r0, r0, #1
 800fe7c:	bf08      	it	eq
 800fe7e:	2020      	moveq	r0, #32
 800fe80:	4770      	bx	lr

0800fe82 <__lo0bits>:
 800fe82:	6803      	ldr	r3, [r0, #0]
 800fe84:	4602      	mov	r2, r0
 800fe86:	f013 0007 	ands.w	r0, r3, #7
 800fe8a:	d00b      	beq.n	800fea4 <__lo0bits+0x22>
 800fe8c:	07d9      	lsls	r1, r3, #31
 800fe8e:	d421      	bmi.n	800fed4 <__lo0bits+0x52>
 800fe90:	0798      	lsls	r0, r3, #30
 800fe92:	bf49      	itett	mi
 800fe94:	085b      	lsrmi	r3, r3, #1
 800fe96:	089b      	lsrpl	r3, r3, #2
 800fe98:	2001      	movmi	r0, #1
 800fe9a:	6013      	strmi	r3, [r2, #0]
 800fe9c:	bf5c      	itt	pl
 800fe9e:	6013      	strpl	r3, [r2, #0]
 800fea0:	2002      	movpl	r0, #2
 800fea2:	4770      	bx	lr
 800fea4:	b299      	uxth	r1, r3
 800fea6:	b909      	cbnz	r1, 800feac <__lo0bits+0x2a>
 800fea8:	0c1b      	lsrs	r3, r3, #16
 800feaa:	2010      	movs	r0, #16
 800feac:	b2d9      	uxtb	r1, r3
 800feae:	b909      	cbnz	r1, 800feb4 <__lo0bits+0x32>
 800feb0:	3008      	adds	r0, #8
 800feb2:	0a1b      	lsrs	r3, r3, #8
 800feb4:	0719      	lsls	r1, r3, #28
 800feb6:	bf04      	itt	eq
 800feb8:	091b      	lsreq	r3, r3, #4
 800feba:	3004      	addeq	r0, #4
 800febc:	0799      	lsls	r1, r3, #30
 800febe:	bf04      	itt	eq
 800fec0:	089b      	lsreq	r3, r3, #2
 800fec2:	3002      	addeq	r0, #2
 800fec4:	07d9      	lsls	r1, r3, #31
 800fec6:	d403      	bmi.n	800fed0 <__lo0bits+0x4e>
 800fec8:	085b      	lsrs	r3, r3, #1
 800feca:	f100 0001 	add.w	r0, r0, #1
 800fece:	d003      	beq.n	800fed8 <__lo0bits+0x56>
 800fed0:	6013      	str	r3, [r2, #0]
 800fed2:	4770      	bx	lr
 800fed4:	2000      	movs	r0, #0
 800fed6:	4770      	bx	lr
 800fed8:	2020      	movs	r0, #32
 800feda:	4770      	bx	lr

0800fedc <__i2b>:
 800fedc:	b510      	push	{r4, lr}
 800fede:	460c      	mov	r4, r1
 800fee0:	2101      	movs	r1, #1
 800fee2:	f7ff febd 	bl	800fc60 <_Balloc>
 800fee6:	4602      	mov	r2, r0
 800fee8:	b928      	cbnz	r0, 800fef6 <__i2b+0x1a>
 800feea:	4b05      	ldr	r3, [pc, #20]	@ (800ff00 <__i2b+0x24>)
 800feec:	4805      	ldr	r0, [pc, #20]	@ (800ff04 <__i2b+0x28>)
 800feee:	f240 1145 	movw	r1, #325	@ 0x145
 800fef2:	f000 fe1d 	bl	8010b30 <__assert_func>
 800fef6:	2301      	movs	r3, #1
 800fef8:	6144      	str	r4, [r0, #20]
 800fefa:	6103      	str	r3, [r0, #16]
 800fefc:	bd10      	pop	{r4, pc}
 800fefe:	bf00      	nop
 800ff00:	0801199d 	.word	0x0801199d
 800ff04:	08011a0e 	.word	0x08011a0e

0800ff08 <__multiply>:
 800ff08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff0c:	4614      	mov	r4, r2
 800ff0e:	690a      	ldr	r2, [r1, #16]
 800ff10:	6923      	ldr	r3, [r4, #16]
 800ff12:	429a      	cmp	r2, r3
 800ff14:	bfa8      	it	ge
 800ff16:	4623      	movge	r3, r4
 800ff18:	460f      	mov	r7, r1
 800ff1a:	bfa4      	itt	ge
 800ff1c:	460c      	movge	r4, r1
 800ff1e:	461f      	movge	r7, r3
 800ff20:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ff24:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ff28:	68a3      	ldr	r3, [r4, #8]
 800ff2a:	6861      	ldr	r1, [r4, #4]
 800ff2c:	eb0a 0609 	add.w	r6, sl, r9
 800ff30:	42b3      	cmp	r3, r6
 800ff32:	b085      	sub	sp, #20
 800ff34:	bfb8      	it	lt
 800ff36:	3101      	addlt	r1, #1
 800ff38:	f7ff fe92 	bl	800fc60 <_Balloc>
 800ff3c:	b930      	cbnz	r0, 800ff4c <__multiply+0x44>
 800ff3e:	4602      	mov	r2, r0
 800ff40:	4b44      	ldr	r3, [pc, #272]	@ (8010054 <__multiply+0x14c>)
 800ff42:	4845      	ldr	r0, [pc, #276]	@ (8010058 <__multiply+0x150>)
 800ff44:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ff48:	f000 fdf2 	bl	8010b30 <__assert_func>
 800ff4c:	f100 0514 	add.w	r5, r0, #20
 800ff50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ff54:	462b      	mov	r3, r5
 800ff56:	2200      	movs	r2, #0
 800ff58:	4543      	cmp	r3, r8
 800ff5a:	d321      	bcc.n	800ffa0 <__multiply+0x98>
 800ff5c:	f107 0114 	add.w	r1, r7, #20
 800ff60:	f104 0214 	add.w	r2, r4, #20
 800ff64:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ff68:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ff6c:	9302      	str	r3, [sp, #8]
 800ff6e:	1b13      	subs	r3, r2, r4
 800ff70:	3b15      	subs	r3, #21
 800ff72:	f023 0303 	bic.w	r3, r3, #3
 800ff76:	3304      	adds	r3, #4
 800ff78:	f104 0715 	add.w	r7, r4, #21
 800ff7c:	42ba      	cmp	r2, r7
 800ff7e:	bf38      	it	cc
 800ff80:	2304      	movcc	r3, #4
 800ff82:	9301      	str	r3, [sp, #4]
 800ff84:	9b02      	ldr	r3, [sp, #8]
 800ff86:	9103      	str	r1, [sp, #12]
 800ff88:	428b      	cmp	r3, r1
 800ff8a:	d80c      	bhi.n	800ffa6 <__multiply+0x9e>
 800ff8c:	2e00      	cmp	r6, #0
 800ff8e:	dd03      	ble.n	800ff98 <__multiply+0x90>
 800ff90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d05b      	beq.n	8010050 <__multiply+0x148>
 800ff98:	6106      	str	r6, [r0, #16]
 800ff9a:	b005      	add	sp, #20
 800ff9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffa0:	f843 2b04 	str.w	r2, [r3], #4
 800ffa4:	e7d8      	b.n	800ff58 <__multiply+0x50>
 800ffa6:	f8b1 a000 	ldrh.w	sl, [r1]
 800ffaa:	f1ba 0f00 	cmp.w	sl, #0
 800ffae:	d024      	beq.n	800fffa <__multiply+0xf2>
 800ffb0:	f104 0e14 	add.w	lr, r4, #20
 800ffb4:	46a9      	mov	r9, r5
 800ffb6:	f04f 0c00 	mov.w	ip, #0
 800ffba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ffbe:	f8d9 3000 	ldr.w	r3, [r9]
 800ffc2:	fa1f fb87 	uxth.w	fp, r7
 800ffc6:	b29b      	uxth	r3, r3
 800ffc8:	fb0a 330b 	mla	r3, sl, fp, r3
 800ffcc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ffd0:	f8d9 7000 	ldr.w	r7, [r9]
 800ffd4:	4463      	add	r3, ip
 800ffd6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ffda:	fb0a c70b 	mla	r7, sl, fp, ip
 800ffde:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ffe2:	b29b      	uxth	r3, r3
 800ffe4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ffe8:	4572      	cmp	r2, lr
 800ffea:	f849 3b04 	str.w	r3, [r9], #4
 800ffee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fff2:	d8e2      	bhi.n	800ffba <__multiply+0xb2>
 800fff4:	9b01      	ldr	r3, [sp, #4]
 800fff6:	f845 c003 	str.w	ip, [r5, r3]
 800fffa:	9b03      	ldr	r3, [sp, #12]
 800fffc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010000:	3104      	adds	r1, #4
 8010002:	f1b9 0f00 	cmp.w	r9, #0
 8010006:	d021      	beq.n	801004c <__multiply+0x144>
 8010008:	682b      	ldr	r3, [r5, #0]
 801000a:	f104 0c14 	add.w	ip, r4, #20
 801000e:	46ae      	mov	lr, r5
 8010010:	f04f 0a00 	mov.w	sl, #0
 8010014:	f8bc b000 	ldrh.w	fp, [ip]
 8010018:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801001c:	fb09 770b 	mla	r7, r9, fp, r7
 8010020:	4457      	add	r7, sl
 8010022:	b29b      	uxth	r3, r3
 8010024:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010028:	f84e 3b04 	str.w	r3, [lr], #4
 801002c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010030:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010034:	f8be 3000 	ldrh.w	r3, [lr]
 8010038:	fb09 330a 	mla	r3, r9, sl, r3
 801003c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010040:	4562      	cmp	r2, ip
 8010042:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010046:	d8e5      	bhi.n	8010014 <__multiply+0x10c>
 8010048:	9f01      	ldr	r7, [sp, #4]
 801004a:	51eb      	str	r3, [r5, r7]
 801004c:	3504      	adds	r5, #4
 801004e:	e799      	b.n	800ff84 <__multiply+0x7c>
 8010050:	3e01      	subs	r6, #1
 8010052:	e79b      	b.n	800ff8c <__multiply+0x84>
 8010054:	0801199d 	.word	0x0801199d
 8010058:	08011a0e 	.word	0x08011a0e

0801005c <__pow5mult>:
 801005c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010060:	4615      	mov	r5, r2
 8010062:	f012 0203 	ands.w	r2, r2, #3
 8010066:	4607      	mov	r7, r0
 8010068:	460e      	mov	r6, r1
 801006a:	d007      	beq.n	801007c <__pow5mult+0x20>
 801006c:	4c25      	ldr	r4, [pc, #148]	@ (8010104 <__pow5mult+0xa8>)
 801006e:	3a01      	subs	r2, #1
 8010070:	2300      	movs	r3, #0
 8010072:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010076:	f7ff fe55 	bl	800fd24 <__multadd>
 801007a:	4606      	mov	r6, r0
 801007c:	10ad      	asrs	r5, r5, #2
 801007e:	d03d      	beq.n	80100fc <__pow5mult+0xa0>
 8010080:	69fc      	ldr	r4, [r7, #28]
 8010082:	b97c      	cbnz	r4, 80100a4 <__pow5mult+0x48>
 8010084:	2010      	movs	r0, #16
 8010086:	f7ff fd23 	bl	800fad0 <malloc>
 801008a:	4602      	mov	r2, r0
 801008c:	61f8      	str	r0, [r7, #28]
 801008e:	b928      	cbnz	r0, 801009c <__pow5mult+0x40>
 8010090:	4b1d      	ldr	r3, [pc, #116]	@ (8010108 <__pow5mult+0xac>)
 8010092:	481e      	ldr	r0, [pc, #120]	@ (801010c <__pow5mult+0xb0>)
 8010094:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010098:	f000 fd4a 	bl	8010b30 <__assert_func>
 801009c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80100a0:	6004      	str	r4, [r0, #0]
 80100a2:	60c4      	str	r4, [r0, #12]
 80100a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80100a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80100ac:	b94c      	cbnz	r4, 80100c2 <__pow5mult+0x66>
 80100ae:	f240 2171 	movw	r1, #625	@ 0x271
 80100b2:	4638      	mov	r0, r7
 80100b4:	f7ff ff12 	bl	800fedc <__i2b>
 80100b8:	2300      	movs	r3, #0
 80100ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80100be:	4604      	mov	r4, r0
 80100c0:	6003      	str	r3, [r0, #0]
 80100c2:	f04f 0900 	mov.w	r9, #0
 80100c6:	07eb      	lsls	r3, r5, #31
 80100c8:	d50a      	bpl.n	80100e0 <__pow5mult+0x84>
 80100ca:	4631      	mov	r1, r6
 80100cc:	4622      	mov	r2, r4
 80100ce:	4638      	mov	r0, r7
 80100d0:	f7ff ff1a 	bl	800ff08 <__multiply>
 80100d4:	4631      	mov	r1, r6
 80100d6:	4680      	mov	r8, r0
 80100d8:	4638      	mov	r0, r7
 80100da:	f7ff fe01 	bl	800fce0 <_Bfree>
 80100de:	4646      	mov	r6, r8
 80100e0:	106d      	asrs	r5, r5, #1
 80100e2:	d00b      	beq.n	80100fc <__pow5mult+0xa0>
 80100e4:	6820      	ldr	r0, [r4, #0]
 80100e6:	b938      	cbnz	r0, 80100f8 <__pow5mult+0x9c>
 80100e8:	4622      	mov	r2, r4
 80100ea:	4621      	mov	r1, r4
 80100ec:	4638      	mov	r0, r7
 80100ee:	f7ff ff0b 	bl	800ff08 <__multiply>
 80100f2:	6020      	str	r0, [r4, #0]
 80100f4:	f8c0 9000 	str.w	r9, [r0]
 80100f8:	4604      	mov	r4, r0
 80100fa:	e7e4      	b.n	80100c6 <__pow5mult+0x6a>
 80100fc:	4630      	mov	r0, r6
 80100fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010102:	bf00      	nop
 8010104:	08011a68 	.word	0x08011a68
 8010108:	0801192e 	.word	0x0801192e
 801010c:	08011a0e 	.word	0x08011a0e

08010110 <__lshift>:
 8010110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010114:	460c      	mov	r4, r1
 8010116:	6849      	ldr	r1, [r1, #4]
 8010118:	6923      	ldr	r3, [r4, #16]
 801011a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801011e:	68a3      	ldr	r3, [r4, #8]
 8010120:	4607      	mov	r7, r0
 8010122:	4691      	mov	r9, r2
 8010124:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010128:	f108 0601 	add.w	r6, r8, #1
 801012c:	42b3      	cmp	r3, r6
 801012e:	db0b      	blt.n	8010148 <__lshift+0x38>
 8010130:	4638      	mov	r0, r7
 8010132:	f7ff fd95 	bl	800fc60 <_Balloc>
 8010136:	4605      	mov	r5, r0
 8010138:	b948      	cbnz	r0, 801014e <__lshift+0x3e>
 801013a:	4602      	mov	r2, r0
 801013c:	4b28      	ldr	r3, [pc, #160]	@ (80101e0 <__lshift+0xd0>)
 801013e:	4829      	ldr	r0, [pc, #164]	@ (80101e4 <__lshift+0xd4>)
 8010140:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010144:	f000 fcf4 	bl	8010b30 <__assert_func>
 8010148:	3101      	adds	r1, #1
 801014a:	005b      	lsls	r3, r3, #1
 801014c:	e7ee      	b.n	801012c <__lshift+0x1c>
 801014e:	2300      	movs	r3, #0
 8010150:	f100 0114 	add.w	r1, r0, #20
 8010154:	f100 0210 	add.w	r2, r0, #16
 8010158:	4618      	mov	r0, r3
 801015a:	4553      	cmp	r3, sl
 801015c:	db33      	blt.n	80101c6 <__lshift+0xb6>
 801015e:	6920      	ldr	r0, [r4, #16]
 8010160:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010164:	f104 0314 	add.w	r3, r4, #20
 8010168:	f019 091f 	ands.w	r9, r9, #31
 801016c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010170:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010174:	d02b      	beq.n	80101ce <__lshift+0xbe>
 8010176:	f1c9 0e20 	rsb	lr, r9, #32
 801017a:	468a      	mov	sl, r1
 801017c:	2200      	movs	r2, #0
 801017e:	6818      	ldr	r0, [r3, #0]
 8010180:	fa00 f009 	lsl.w	r0, r0, r9
 8010184:	4310      	orrs	r0, r2
 8010186:	f84a 0b04 	str.w	r0, [sl], #4
 801018a:	f853 2b04 	ldr.w	r2, [r3], #4
 801018e:	459c      	cmp	ip, r3
 8010190:	fa22 f20e 	lsr.w	r2, r2, lr
 8010194:	d8f3      	bhi.n	801017e <__lshift+0x6e>
 8010196:	ebac 0304 	sub.w	r3, ip, r4
 801019a:	3b15      	subs	r3, #21
 801019c:	f023 0303 	bic.w	r3, r3, #3
 80101a0:	3304      	adds	r3, #4
 80101a2:	f104 0015 	add.w	r0, r4, #21
 80101a6:	4584      	cmp	ip, r0
 80101a8:	bf38      	it	cc
 80101aa:	2304      	movcc	r3, #4
 80101ac:	50ca      	str	r2, [r1, r3]
 80101ae:	b10a      	cbz	r2, 80101b4 <__lshift+0xa4>
 80101b0:	f108 0602 	add.w	r6, r8, #2
 80101b4:	3e01      	subs	r6, #1
 80101b6:	4638      	mov	r0, r7
 80101b8:	612e      	str	r6, [r5, #16]
 80101ba:	4621      	mov	r1, r4
 80101bc:	f7ff fd90 	bl	800fce0 <_Bfree>
 80101c0:	4628      	mov	r0, r5
 80101c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80101ca:	3301      	adds	r3, #1
 80101cc:	e7c5      	b.n	801015a <__lshift+0x4a>
 80101ce:	3904      	subs	r1, #4
 80101d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80101d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80101d8:	459c      	cmp	ip, r3
 80101da:	d8f9      	bhi.n	80101d0 <__lshift+0xc0>
 80101dc:	e7ea      	b.n	80101b4 <__lshift+0xa4>
 80101de:	bf00      	nop
 80101e0:	0801199d 	.word	0x0801199d
 80101e4:	08011a0e 	.word	0x08011a0e

080101e8 <__mcmp>:
 80101e8:	690a      	ldr	r2, [r1, #16]
 80101ea:	4603      	mov	r3, r0
 80101ec:	6900      	ldr	r0, [r0, #16]
 80101ee:	1a80      	subs	r0, r0, r2
 80101f0:	b530      	push	{r4, r5, lr}
 80101f2:	d10e      	bne.n	8010212 <__mcmp+0x2a>
 80101f4:	3314      	adds	r3, #20
 80101f6:	3114      	adds	r1, #20
 80101f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80101fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010200:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010204:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010208:	4295      	cmp	r5, r2
 801020a:	d003      	beq.n	8010214 <__mcmp+0x2c>
 801020c:	d205      	bcs.n	801021a <__mcmp+0x32>
 801020e:	f04f 30ff 	mov.w	r0, #4294967295
 8010212:	bd30      	pop	{r4, r5, pc}
 8010214:	42a3      	cmp	r3, r4
 8010216:	d3f3      	bcc.n	8010200 <__mcmp+0x18>
 8010218:	e7fb      	b.n	8010212 <__mcmp+0x2a>
 801021a:	2001      	movs	r0, #1
 801021c:	e7f9      	b.n	8010212 <__mcmp+0x2a>
	...

08010220 <__mdiff>:
 8010220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010224:	4689      	mov	r9, r1
 8010226:	4606      	mov	r6, r0
 8010228:	4611      	mov	r1, r2
 801022a:	4648      	mov	r0, r9
 801022c:	4614      	mov	r4, r2
 801022e:	f7ff ffdb 	bl	80101e8 <__mcmp>
 8010232:	1e05      	subs	r5, r0, #0
 8010234:	d112      	bne.n	801025c <__mdiff+0x3c>
 8010236:	4629      	mov	r1, r5
 8010238:	4630      	mov	r0, r6
 801023a:	f7ff fd11 	bl	800fc60 <_Balloc>
 801023e:	4602      	mov	r2, r0
 8010240:	b928      	cbnz	r0, 801024e <__mdiff+0x2e>
 8010242:	4b3f      	ldr	r3, [pc, #252]	@ (8010340 <__mdiff+0x120>)
 8010244:	f240 2137 	movw	r1, #567	@ 0x237
 8010248:	483e      	ldr	r0, [pc, #248]	@ (8010344 <__mdiff+0x124>)
 801024a:	f000 fc71 	bl	8010b30 <__assert_func>
 801024e:	2301      	movs	r3, #1
 8010250:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010254:	4610      	mov	r0, r2
 8010256:	b003      	add	sp, #12
 8010258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801025c:	bfbc      	itt	lt
 801025e:	464b      	movlt	r3, r9
 8010260:	46a1      	movlt	r9, r4
 8010262:	4630      	mov	r0, r6
 8010264:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010268:	bfba      	itte	lt
 801026a:	461c      	movlt	r4, r3
 801026c:	2501      	movlt	r5, #1
 801026e:	2500      	movge	r5, #0
 8010270:	f7ff fcf6 	bl	800fc60 <_Balloc>
 8010274:	4602      	mov	r2, r0
 8010276:	b918      	cbnz	r0, 8010280 <__mdiff+0x60>
 8010278:	4b31      	ldr	r3, [pc, #196]	@ (8010340 <__mdiff+0x120>)
 801027a:	f240 2145 	movw	r1, #581	@ 0x245
 801027e:	e7e3      	b.n	8010248 <__mdiff+0x28>
 8010280:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010284:	6926      	ldr	r6, [r4, #16]
 8010286:	60c5      	str	r5, [r0, #12]
 8010288:	f109 0310 	add.w	r3, r9, #16
 801028c:	f109 0514 	add.w	r5, r9, #20
 8010290:	f104 0e14 	add.w	lr, r4, #20
 8010294:	f100 0b14 	add.w	fp, r0, #20
 8010298:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801029c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80102a0:	9301      	str	r3, [sp, #4]
 80102a2:	46d9      	mov	r9, fp
 80102a4:	f04f 0c00 	mov.w	ip, #0
 80102a8:	9b01      	ldr	r3, [sp, #4]
 80102aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80102ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 80102b2:	9301      	str	r3, [sp, #4]
 80102b4:	fa1f f38a 	uxth.w	r3, sl
 80102b8:	4619      	mov	r1, r3
 80102ba:	b283      	uxth	r3, r0
 80102bc:	1acb      	subs	r3, r1, r3
 80102be:	0c00      	lsrs	r0, r0, #16
 80102c0:	4463      	add	r3, ip
 80102c2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80102c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80102ca:	b29b      	uxth	r3, r3
 80102cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80102d0:	4576      	cmp	r6, lr
 80102d2:	f849 3b04 	str.w	r3, [r9], #4
 80102d6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80102da:	d8e5      	bhi.n	80102a8 <__mdiff+0x88>
 80102dc:	1b33      	subs	r3, r6, r4
 80102de:	3b15      	subs	r3, #21
 80102e0:	f023 0303 	bic.w	r3, r3, #3
 80102e4:	3415      	adds	r4, #21
 80102e6:	3304      	adds	r3, #4
 80102e8:	42a6      	cmp	r6, r4
 80102ea:	bf38      	it	cc
 80102ec:	2304      	movcc	r3, #4
 80102ee:	441d      	add	r5, r3
 80102f0:	445b      	add	r3, fp
 80102f2:	461e      	mov	r6, r3
 80102f4:	462c      	mov	r4, r5
 80102f6:	4544      	cmp	r4, r8
 80102f8:	d30e      	bcc.n	8010318 <__mdiff+0xf8>
 80102fa:	f108 0103 	add.w	r1, r8, #3
 80102fe:	1b49      	subs	r1, r1, r5
 8010300:	f021 0103 	bic.w	r1, r1, #3
 8010304:	3d03      	subs	r5, #3
 8010306:	45a8      	cmp	r8, r5
 8010308:	bf38      	it	cc
 801030a:	2100      	movcc	r1, #0
 801030c:	440b      	add	r3, r1
 801030e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010312:	b191      	cbz	r1, 801033a <__mdiff+0x11a>
 8010314:	6117      	str	r7, [r2, #16]
 8010316:	e79d      	b.n	8010254 <__mdiff+0x34>
 8010318:	f854 1b04 	ldr.w	r1, [r4], #4
 801031c:	46e6      	mov	lr, ip
 801031e:	0c08      	lsrs	r0, r1, #16
 8010320:	fa1c fc81 	uxtah	ip, ip, r1
 8010324:	4471      	add	r1, lr
 8010326:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801032a:	b289      	uxth	r1, r1
 801032c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010330:	f846 1b04 	str.w	r1, [r6], #4
 8010334:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010338:	e7dd      	b.n	80102f6 <__mdiff+0xd6>
 801033a:	3f01      	subs	r7, #1
 801033c:	e7e7      	b.n	801030e <__mdiff+0xee>
 801033e:	bf00      	nop
 8010340:	0801199d 	.word	0x0801199d
 8010344:	08011a0e 	.word	0x08011a0e

08010348 <__ulp>:
 8010348:	b082      	sub	sp, #8
 801034a:	ed8d 0b00 	vstr	d0, [sp]
 801034e:	9a01      	ldr	r2, [sp, #4]
 8010350:	4b0f      	ldr	r3, [pc, #60]	@ (8010390 <__ulp+0x48>)
 8010352:	4013      	ands	r3, r2
 8010354:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010358:	2b00      	cmp	r3, #0
 801035a:	dc08      	bgt.n	801036e <__ulp+0x26>
 801035c:	425b      	negs	r3, r3
 801035e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010362:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010366:	da04      	bge.n	8010372 <__ulp+0x2a>
 8010368:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801036c:	4113      	asrs	r3, r2
 801036e:	2200      	movs	r2, #0
 8010370:	e008      	b.n	8010384 <__ulp+0x3c>
 8010372:	f1a2 0314 	sub.w	r3, r2, #20
 8010376:	2b1e      	cmp	r3, #30
 8010378:	bfda      	itte	le
 801037a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801037e:	40da      	lsrle	r2, r3
 8010380:	2201      	movgt	r2, #1
 8010382:	2300      	movs	r3, #0
 8010384:	4619      	mov	r1, r3
 8010386:	4610      	mov	r0, r2
 8010388:	ec41 0b10 	vmov	d0, r0, r1
 801038c:	b002      	add	sp, #8
 801038e:	4770      	bx	lr
 8010390:	7ff00000 	.word	0x7ff00000

08010394 <__b2d>:
 8010394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010398:	6906      	ldr	r6, [r0, #16]
 801039a:	f100 0814 	add.w	r8, r0, #20
 801039e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80103a2:	1f37      	subs	r7, r6, #4
 80103a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80103a8:	4610      	mov	r0, r2
 80103aa:	f7ff fd4b 	bl	800fe44 <__hi0bits>
 80103ae:	f1c0 0320 	rsb	r3, r0, #32
 80103b2:	280a      	cmp	r0, #10
 80103b4:	600b      	str	r3, [r1, #0]
 80103b6:	491b      	ldr	r1, [pc, #108]	@ (8010424 <__b2d+0x90>)
 80103b8:	dc15      	bgt.n	80103e6 <__b2d+0x52>
 80103ba:	f1c0 0c0b 	rsb	ip, r0, #11
 80103be:	fa22 f30c 	lsr.w	r3, r2, ip
 80103c2:	45b8      	cmp	r8, r7
 80103c4:	ea43 0501 	orr.w	r5, r3, r1
 80103c8:	bf34      	ite	cc
 80103ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80103ce:	2300      	movcs	r3, #0
 80103d0:	3015      	adds	r0, #21
 80103d2:	fa02 f000 	lsl.w	r0, r2, r0
 80103d6:	fa23 f30c 	lsr.w	r3, r3, ip
 80103da:	4303      	orrs	r3, r0
 80103dc:	461c      	mov	r4, r3
 80103de:	ec45 4b10 	vmov	d0, r4, r5
 80103e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103e6:	45b8      	cmp	r8, r7
 80103e8:	bf3a      	itte	cc
 80103ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80103ee:	f1a6 0708 	subcc.w	r7, r6, #8
 80103f2:	2300      	movcs	r3, #0
 80103f4:	380b      	subs	r0, #11
 80103f6:	d012      	beq.n	801041e <__b2d+0x8a>
 80103f8:	f1c0 0120 	rsb	r1, r0, #32
 80103fc:	fa23 f401 	lsr.w	r4, r3, r1
 8010400:	4082      	lsls	r2, r0
 8010402:	4322      	orrs	r2, r4
 8010404:	4547      	cmp	r7, r8
 8010406:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801040a:	bf8c      	ite	hi
 801040c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010410:	2200      	movls	r2, #0
 8010412:	4083      	lsls	r3, r0
 8010414:	40ca      	lsrs	r2, r1
 8010416:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801041a:	4313      	orrs	r3, r2
 801041c:	e7de      	b.n	80103dc <__b2d+0x48>
 801041e:	ea42 0501 	orr.w	r5, r2, r1
 8010422:	e7db      	b.n	80103dc <__b2d+0x48>
 8010424:	3ff00000 	.word	0x3ff00000

08010428 <__d2b>:
 8010428:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801042c:	460f      	mov	r7, r1
 801042e:	2101      	movs	r1, #1
 8010430:	ec59 8b10 	vmov	r8, r9, d0
 8010434:	4616      	mov	r6, r2
 8010436:	f7ff fc13 	bl	800fc60 <_Balloc>
 801043a:	4604      	mov	r4, r0
 801043c:	b930      	cbnz	r0, 801044c <__d2b+0x24>
 801043e:	4602      	mov	r2, r0
 8010440:	4b23      	ldr	r3, [pc, #140]	@ (80104d0 <__d2b+0xa8>)
 8010442:	4824      	ldr	r0, [pc, #144]	@ (80104d4 <__d2b+0xac>)
 8010444:	f240 310f 	movw	r1, #783	@ 0x30f
 8010448:	f000 fb72 	bl	8010b30 <__assert_func>
 801044c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010450:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010454:	b10d      	cbz	r5, 801045a <__d2b+0x32>
 8010456:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801045a:	9301      	str	r3, [sp, #4]
 801045c:	f1b8 0300 	subs.w	r3, r8, #0
 8010460:	d023      	beq.n	80104aa <__d2b+0x82>
 8010462:	4668      	mov	r0, sp
 8010464:	9300      	str	r3, [sp, #0]
 8010466:	f7ff fd0c 	bl	800fe82 <__lo0bits>
 801046a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801046e:	b1d0      	cbz	r0, 80104a6 <__d2b+0x7e>
 8010470:	f1c0 0320 	rsb	r3, r0, #32
 8010474:	fa02 f303 	lsl.w	r3, r2, r3
 8010478:	430b      	orrs	r3, r1
 801047a:	40c2      	lsrs	r2, r0
 801047c:	6163      	str	r3, [r4, #20]
 801047e:	9201      	str	r2, [sp, #4]
 8010480:	9b01      	ldr	r3, [sp, #4]
 8010482:	61a3      	str	r3, [r4, #24]
 8010484:	2b00      	cmp	r3, #0
 8010486:	bf0c      	ite	eq
 8010488:	2201      	moveq	r2, #1
 801048a:	2202      	movne	r2, #2
 801048c:	6122      	str	r2, [r4, #16]
 801048e:	b1a5      	cbz	r5, 80104ba <__d2b+0x92>
 8010490:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010494:	4405      	add	r5, r0
 8010496:	603d      	str	r5, [r7, #0]
 8010498:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801049c:	6030      	str	r0, [r6, #0]
 801049e:	4620      	mov	r0, r4
 80104a0:	b003      	add	sp, #12
 80104a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104a6:	6161      	str	r1, [r4, #20]
 80104a8:	e7ea      	b.n	8010480 <__d2b+0x58>
 80104aa:	a801      	add	r0, sp, #4
 80104ac:	f7ff fce9 	bl	800fe82 <__lo0bits>
 80104b0:	9b01      	ldr	r3, [sp, #4]
 80104b2:	6163      	str	r3, [r4, #20]
 80104b4:	3020      	adds	r0, #32
 80104b6:	2201      	movs	r2, #1
 80104b8:	e7e8      	b.n	801048c <__d2b+0x64>
 80104ba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80104be:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80104c2:	6038      	str	r0, [r7, #0]
 80104c4:	6918      	ldr	r0, [r3, #16]
 80104c6:	f7ff fcbd 	bl	800fe44 <__hi0bits>
 80104ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80104ce:	e7e5      	b.n	801049c <__d2b+0x74>
 80104d0:	0801199d 	.word	0x0801199d
 80104d4:	08011a0e 	.word	0x08011a0e

080104d8 <__ratio>:
 80104d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104dc:	b085      	sub	sp, #20
 80104de:	e9cd 1000 	strd	r1, r0, [sp]
 80104e2:	a902      	add	r1, sp, #8
 80104e4:	f7ff ff56 	bl	8010394 <__b2d>
 80104e8:	9800      	ldr	r0, [sp, #0]
 80104ea:	a903      	add	r1, sp, #12
 80104ec:	ec55 4b10 	vmov	r4, r5, d0
 80104f0:	f7ff ff50 	bl	8010394 <__b2d>
 80104f4:	9b01      	ldr	r3, [sp, #4]
 80104f6:	6919      	ldr	r1, [r3, #16]
 80104f8:	9b00      	ldr	r3, [sp, #0]
 80104fa:	691b      	ldr	r3, [r3, #16]
 80104fc:	1ac9      	subs	r1, r1, r3
 80104fe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010502:	1a9b      	subs	r3, r3, r2
 8010504:	ec5b ab10 	vmov	sl, fp, d0
 8010508:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801050c:	2b00      	cmp	r3, #0
 801050e:	bfce      	itee	gt
 8010510:	462a      	movgt	r2, r5
 8010512:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010516:	465a      	movle	r2, fp
 8010518:	462f      	mov	r7, r5
 801051a:	46d9      	mov	r9, fp
 801051c:	bfcc      	ite	gt
 801051e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010522:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010526:	464b      	mov	r3, r9
 8010528:	4652      	mov	r2, sl
 801052a:	4620      	mov	r0, r4
 801052c:	4639      	mov	r1, r7
 801052e:	f7f0 f9b5 	bl	800089c <__aeabi_ddiv>
 8010532:	ec41 0b10 	vmov	d0, r0, r1
 8010536:	b005      	add	sp, #20
 8010538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801053c <__copybits>:
 801053c:	3901      	subs	r1, #1
 801053e:	b570      	push	{r4, r5, r6, lr}
 8010540:	1149      	asrs	r1, r1, #5
 8010542:	6914      	ldr	r4, [r2, #16]
 8010544:	3101      	adds	r1, #1
 8010546:	f102 0314 	add.w	r3, r2, #20
 801054a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801054e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010552:	1f05      	subs	r5, r0, #4
 8010554:	42a3      	cmp	r3, r4
 8010556:	d30c      	bcc.n	8010572 <__copybits+0x36>
 8010558:	1aa3      	subs	r3, r4, r2
 801055a:	3b11      	subs	r3, #17
 801055c:	f023 0303 	bic.w	r3, r3, #3
 8010560:	3211      	adds	r2, #17
 8010562:	42a2      	cmp	r2, r4
 8010564:	bf88      	it	hi
 8010566:	2300      	movhi	r3, #0
 8010568:	4418      	add	r0, r3
 801056a:	2300      	movs	r3, #0
 801056c:	4288      	cmp	r0, r1
 801056e:	d305      	bcc.n	801057c <__copybits+0x40>
 8010570:	bd70      	pop	{r4, r5, r6, pc}
 8010572:	f853 6b04 	ldr.w	r6, [r3], #4
 8010576:	f845 6f04 	str.w	r6, [r5, #4]!
 801057a:	e7eb      	b.n	8010554 <__copybits+0x18>
 801057c:	f840 3b04 	str.w	r3, [r0], #4
 8010580:	e7f4      	b.n	801056c <__copybits+0x30>

08010582 <__any_on>:
 8010582:	f100 0214 	add.w	r2, r0, #20
 8010586:	6900      	ldr	r0, [r0, #16]
 8010588:	114b      	asrs	r3, r1, #5
 801058a:	4298      	cmp	r0, r3
 801058c:	b510      	push	{r4, lr}
 801058e:	db11      	blt.n	80105b4 <__any_on+0x32>
 8010590:	dd0a      	ble.n	80105a8 <__any_on+0x26>
 8010592:	f011 011f 	ands.w	r1, r1, #31
 8010596:	d007      	beq.n	80105a8 <__any_on+0x26>
 8010598:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801059c:	fa24 f001 	lsr.w	r0, r4, r1
 80105a0:	fa00 f101 	lsl.w	r1, r0, r1
 80105a4:	428c      	cmp	r4, r1
 80105a6:	d10b      	bne.n	80105c0 <__any_on+0x3e>
 80105a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80105ac:	4293      	cmp	r3, r2
 80105ae:	d803      	bhi.n	80105b8 <__any_on+0x36>
 80105b0:	2000      	movs	r0, #0
 80105b2:	bd10      	pop	{r4, pc}
 80105b4:	4603      	mov	r3, r0
 80105b6:	e7f7      	b.n	80105a8 <__any_on+0x26>
 80105b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80105bc:	2900      	cmp	r1, #0
 80105be:	d0f5      	beq.n	80105ac <__any_on+0x2a>
 80105c0:	2001      	movs	r0, #1
 80105c2:	e7f6      	b.n	80105b2 <__any_on+0x30>

080105c4 <_strtol_l.constprop.0>:
 80105c4:	2b24      	cmp	r3, #36	@ 0x24
 80105c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105ca:	4686      	mov	lr, r0
 80105cc:	4690      	mov	r8, r2
 80105ce:	d801      	bhi.n	80105d4 <_strtol_l.constprop.0+0x10>
 80105d0:	2b01      	cmp	r3, #1
 80105d2:	d106      	bne.n	80105e2 <_strtol_l.constprop.0+0x1e>
 80105d4:	f7fe f860 	bl	800e698 <__errno>
 80105d8:	2316      	movs	r3, #22
 80105da:	6003      	str	r3, [r0, #0]
 80105dc:	2000      	movs	r0, #0
 80105de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105e2:	4834      	ldr	r0, [pc, #208]	@ (80106b4 <_strtol_l.constprop.0+0xf0>)
 80105e4:	460d      	mov	r5, r1
 80105e6:	462a      	mov	r2, r5
 80105e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80105ec:	5d06      	ldrb	r6, [r0, r4]
 80105ee:	f016 0608 	ands.w	r6, r6, #8
 80105f2:	d1f8      	bne.n	80105e6 <_strtol_l.constprop.0+0x22>
 80105f4:	2c2d      	cmp	r4, #45	@ 0x2d
 80105f6:	d12d      	bne.n	8010654 <_strtol_l.constprop.0+0x90>
 80105f8:	782c      	ldrb	r4, [r5, #0]
 80105fa:	2601      	movs	r6, #1
 80105fc:	1c95      	adds	r5, r2, #2
 80105fe:	f033 0210 	bics.w	r2, r3, #16
 8010602:	d109      	bne.n	8010618 <_strtol_l.constprop.0+0x54>
 8010604:	2c30      	cmp	r4, #48	@ 0x30
 8010606:	d12a      	bne.n	801065e <_strtol_l.constprop.0+0x9a>
 8010608:	782a      	ldrb	r2, [r5, #0]
 801060a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801060e:	2a58      	cmp	r2, #88	@ 0x58
 8010610:	d125      	bne.n	801065e <_strtol_l.constprop.0+0x9a>
 8010612:	786c      	ldrb	r4, [r5, #1]
 8010614:	2310      	movs	r3, #16
 8010616:	3502      	adds	r5, #2
 8010618:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801061c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010620:	2200      	movs	r2, #0
 8010622:	fbbc f9f3 	udiv	r9, ip, r3
 8010626:	4610      	mov	r0, r2
 8010628:	fb03 ca19 	mls	sl, r3, r9, ip
 801062c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010630:	2f09      	cmp	r7, #9
 8010632:	d81b      	bhi.n	801066c <_strtol_l.constprop.0+0xa8>
 8010634:	463c      	mov	r4, r7
 8010636:	42a3      	cmp	r3, r4
 8010638:	dd27      	ble.n	801068a <_strtol_l.constprop.0+0xc6>
 801063a:	1c57      	adds	r7, r2, #1
 801063c:	d007      	beq.n	801064e <_strtol_l.constprop.0+0x8a>
 801063e:	4581      	cmp	r9, r0
 8010640:	d320      	bcc.n	8010684 <_strtol_l.constprop.0+0xc0>
 8010642:	d101      	bne.n	8010648 <_strtol_l.constprop.0+0x84>
 8010644:	45a2      	cmp	sl, r4
 8010646:	db1d      	blt.n	8010684 <_strtol_l.constprop.0+0xc0>
 8010648:	fb00 4003 	mla	r0, r0, r3, r4
 801064c:	2201      	movs	r2, #1
 801064e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010652:	e7eb      	b.n	801062c <_strtol_l.constprop.0+0x68>
 8010654:	2c2b      	cmp	r4, #43	@ 0x2b
 8010656:	bf04      	itt	eq
 8010658:	782c      	ldrbeq	r4, [r5, #0]
 801065a:	1c95      	addeq	r5, r2, #2
 801065c:	e7cf      	b.n	80105fe <_strtol_l.constprop.0+0x3a>
 801065e:	2b00      	cmp	r3, #0
 8010660:	d1da      	bne.n	8010618 <_strtol_l.constprop.0+0x54>
 8010662:	2c30      	cmp	r4, #48	@ 0x30
 8010664:	bf0c      	ite	eq
 8010666:	2308      	moveq	r3, #8
 8010668:	230a      	movne	r3, #10
 801066a:	e7d5      	b.n	8010618 <_strtol_l.constprop.0+0x54>
 801066c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010670:	2f19      	cmp	r7, #25
 8010672:	d801      	bhi.n	8010678 <_strtol_l.constprop.0+0xb4>
 8010674:	3c37      	subs	r4, #55	@ 0x37
 8010676:	e7de      	b.n	8010636 <_strtol_l.constprop.0+0x72>
 8010678:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801067c:	2f19      	cmp	r7, #25
 801067e:	d804      	bhi.n	801068a <_strtol_l.constprop.0+0xc6>
 8010680:	3c57      	subs	r4, #87	@ 0x57
 8010682:	e7d8      	b.n	8010636 <_strtol_l.constprop.0+0x72>
 8010684:	f04f 32ff 	mov.w	r2, #4294967295
 8010688:	e7e1      	b.n	801064e <_strtol_l.constprop.0+0x8a>
 801068a:	1c53      	adds	r3, r2, #1
 801068c:	d108      	bne.n	80106a0 <_strtol_l.constprop.0+0xdc>
 801068e:	2322      	movs	r3, #34	@ 0x22
 8010690:	f8ce 3000 	str.w	r3, [lr]
 8010694:	4660      	mov	r0, ip
 8010696:	f1b8 0f00 	cmp.w	r8, #0
 801069a:	d0a0      	beq.n	80105de <_strtol_l.constprop.0+0x1a>
 801069c:	1e69      	subs	r1, r5, #1
 801069e:	e006      	b.n	80106ae <_strtol_l.constprop.0+0xea>
 80106a0:	b106      	cbz	r6, 80106a4 <_strtol_l.constprop.0+0xe0>
 80106a2:	4240      	negs	r0, r0
 80106a4:	f1b8 0f00 	cmp.w	r8, #0
 80106a8:	d099      	beq.n	80105de <_strtol_l.constprop.0+0x1a>
 80106aa:	2a00      	cmp	r2, #0
 80106ac:	d1f6      	bne.n	801069c <_strtol_l.constprop.0+0xd8>
 80106ae:	f8c8 1000 	str.w	r1, [r8]
 80106b2:	e794      	b.n	80105de <_strtol_l.constprop.0+0x1a>
 80106b4:	08011b69 	.word	0x08011b69

080106b8 <_strtol_r>:
 80106b8:	f7ff bf84 	b.w	80105c4 <_strtol_l.constprop.0>

080106bc <__ascii_wctomb>:
 80106bc:	4603      	mov	r3, r0
 80106be:	4608      	mov	r0, r1
 80106c0:	b141      	cbz	r1, 80106d4 <__ascii_wctomb+0x18>
 80106c2:	2aff      	cmp	r2, #255	@ 0xff
 80106c4:	d904      	bls.n	80106d0 <__ascii_wctomb+0x14>
 80106c6:	228a      	movs	r2, #138	@ 0x8a
 80106c8:	601a      	str	r2, [r3, #0]
 80106ca:	f04f 30ff 	mov.w	r0, #4294967295
 80106ce:	4770      	bx	lr
 80106d0:	700a      	strb	r2, [r1, #0]
 80106d2:	2001      	movs	r0, #1
 80106d4:	4770      	bx	lr

080106d6 <__ssputs_r>:
 80106d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106da:	688e      	ldr	r6, [r1, #8]
 80106dc:	461f      	mov	r7, r3
 80106de:	42be      	cmp	r6, r7
 80106e0:	680b      	ldr	r3, [r1, #0]
 80106e2:	4682      	mov	sl, r0
 80106e4:	460c      	mov	r4, r1
 80106e6:	4690      	mov	r8, r2
 80106e8:	d82d      	bhi.n	8010746 <__ssputs_r+0x70>
 80106ea:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80106ee:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80106f2:	d026      	beq.n	8010742 <__ssputs_r+0x6c>
 80106f4:	6965      	ldr	r5, [r4, #20]
 80106f6:	6909      	ldr	r1, [r1, #16]
 80106f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80106fc:	eba3 0901 	sub.w	r9, r3, r1
 8010700:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010704:	1c7b      	adds	r3, r7, #1
 8010706:	444b      	add	r3, r9
 8010708:	106d      	asrs	r5, r5, #1
 801070a:	429d      	cmp	r5, r3
 801070c:	bf38      	it	cc
 801070e:	461d      	movcc	r5, r3
 8010710:	0553      	lsls	r3, r2, #21
 8010712:	d527      	bpl.n	8010764 <__ssputs_r+0x8e>
 8010714:	4629      	mov	r1, r5
 8010716:	f7ff fa05 	bl	800fb24 <_malloc_r>
 801071a:	4606      	mov	r6, r0
 801071c:	b360      	cbz	r0, 8010778 <__ssputs_r+0xa2>
 801071e:	6921      	ldr	r1, [r4, #16]
 8010720:	464a      	mov	r2, r9
 8010722:	f7fd ffe6 	bl	800e6f2 <memcpy>
 8010726:	89a3      	ldrh	r3, [r4, #12]
 8010728:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801072c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010730:	81a3      	strh	r3, [r4, #12]
 8010732:	6126      	str	r6, [r4, #16]
 8010734:	6165      	str	r5, [r4, #20]
 8010736:	444e      	add	r6, r9
 8010738:	eba5 0509 	sub.w	r5, r5, r9
 801073c:	6026      	str	r6, [r4, #0]
 801073e:	60a5      	str	r5, [r4, #8]
 8010740:	463e      	mov	r6, r7
 8010742:	42be      	cmp	r6, r7
 8010744:	d900      	bls.n	8010748 <__ssputs_r+0x72>
 8010746:	463e      	mov	r6, r7
 8010748:	6820      	ldr	r0, [r4, #0]
 801074a:	4632      	mov	r2, r6
 801074c:	4641      	mov	r1, r8
 801074e:	f000 f9c5 	bl	8010adc <memmove>
 8010752:	68a3      	ldr	r3, [r4, #8]
 8010754:	1b9b      	subs	r3, r3, r6
 8010756:	60a3      	str	r3, [r4, #8]
 8010758:	6823      	ldr	r3, [r4, #0]
 801075a:	4433      	add	r3, r6
 801075c:	6023      	str	r3, [r4, #0]
 801075e:	2000      	movs	r0, #0
 8010760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010764:	462a      	mov	r2, r5
 8010766:	f000 fa15 	bl	8010b94 <_realloc_r>
 801076a:	4606      	mov	r6, r0
 801076c:	2800      	cmp	r0, #0
 801076e:	d1e0      	bne.n	8010732 <__ssputs_r+0x5c>
 8010770:	6921      	ldr	r1, [r4, #16]
 8010772:	4650      	mov	r0, sl
 8010774:	f7fe fe28 	bl	800f3c8 <_free_r>
 8010778:	230c      	movs	r3, #12
 801077a:	f8ca 3000 	str.w	r3, [sl]
 801077e:	89a3      	ldrh	r3, [r4, #12]
 8010780:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010784:	81a3      	strh	r3, [r4, #12]
 8010786:	f04f 30ff 	mov.w	r0, #4294967295
 801078a:	e7e9      	b.n	8010760 <__ssputs_r+0x8a>

0801078c <_svfiprintf_r>:
 801078c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010790:	4698      	mov	r8, r3
 8010792:	898b      	ldrh	r3, [r1, #12]
 8010794:	061b      	lsls	r3, r3, #24
 8010796:	b09d      	sub	sp, #116	@ 0x74
 8010798:	4607      	mov	r7, r0
 801079a:	460d      	mov	r5, r1
 801079c:	4614      	mov	r4, r2
 801079e:	d510      	bpl.n	80107c2 <_svfiprintf_r+0x36>
 80107a0:	690b      	ldr	r3, [r1, #16]
 80107a2:	b973      	cbnz	r3, 80107c2 <_svfiprintf_r+0x36>
 80107a4:	2140      	movs	r1, #64	@ 0x40
 80107a6:	f7ff f9bd 	bl	800fb24 <_malloc_r>
 80107aa:	6028      	str	r0, [r5, #0]
 80107ac:	6128      	str	r0, [r5, #16]
 80107ae:	b930      	cbnz	r0, 80107be <_svfiprintf_r+0x32>
 80107b0:	230c      	movs	r3, #12
 80107b2:	603b      	str	r3, [r7, #0]
 80107b4:	f04f 30ff 	mov.w	r0, #4294967295
 80107b8:	b01d      	add	sp, #116	@ 0x74
 80107ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107be:	2340      	movs	r3, #64	@ 0x40
 80107c0:	616b      	str	r3, [r5, #20]
 80107c2:	2300      	movs	r3, #0
 80107c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80107c6:	2320      	movs	r3, #32
 80107c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80107cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80107d0:	2330      	movs	r3, #48	@ 0x30
 80107d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010970 <_svfiprintf_r+0x1e4>
 80107d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80107da:	f04f 0901 	mov.w	r9, #1
 80107de:	4623      	mov	r3, r4
 80107e0:	469a      	mov	sl, r3
 80107e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80107e6:	b10a      	cbz	r2, 80107ec <_svfiprintf_r+0x60>
 80107e8:	2a25      	cmp	r2, #37	@ 0x25
 80107ea:	d1f9      	bne.n	80107e0 <_svfiprintf_r+0x54>
 80107ec:	ebba 0b04 	subs.w	fp, sl, r4
 80107f0:	d00b      	beq.n	801080a <_svfiprintf_r+0x7e>
 80107f2:	465b      	mov	r3, fp
 80107f4:	4622      	mov	r2, r4
 80107f6:	4629      	mov	r1, r5
 80107f8:	4638      	mov	r0, r7
 80107fa:	f7ff ff6c 	bl	80106d6 <__ssputs_r>
 80107fe:	3001      	adds	r0, #1
 8010800:	f000 80a7 	beq.w	8010952 <_svfiprintf_r+0x1c6>
 8010804:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010806:	445a      	add	r2, fp
 8010808:	9209      	str	r2, [sp, #36]	@ 0x24
 801080a:	f89a 3000 	ldrb.w	r3, [sl]
 801080e:	2b00      	cmp	r3, #0
 8010810:	f000 809f 	beq.w	8010952 <_svfiprintf_r+0x1c6>
 8010814:	2300      	movs	r3, #0
 8010816:	f04f 32ff 	mov.w	r2, #4294967295
 801081a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801081e:	f10a 0a01 	add.w	sl, sl, #1
 8010822:	9304      	str	r3, [sp, #16]
 8010824:	9307      	str	r3, [sp, #28]
 8010826:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801082a:	931a      	str	r3, [sp, #104]	@ 0x68
 801082c:	4654      	mov	r4, sl
 801082e:	2205      	movs	r2, #5
 8010830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010834:	484e      	ldr	r0, [pc, #312]	@ (8010970 <_svfiprintf_r+0x1e4>)
 8010836:	f7ef fcf3 	bl	8000220 <memchr>
 801083a:	9a04      	ldr	r2, [sp, #16]
 801083c:	b9d8      	cbnz	r0, 8010876 <_svfiprintf_r+0xea>
 801083e:	06d0      	lsls	r0, r2, #27
 8010840:	bf44      	itt	mi
 8010842:	2320      	movmi	r3, #32
 8010844:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010848:	0711      	lsls	r1, r2, #28
 801084a:	bf44      	itt	mi
 801084c:	232b      	movmi	r3, #43	@ 0x2b
 801084e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010852:	f89a 3000 	ldrb.w	r3, [sl]
 8010856:	2b2a      	cmp	r3, #42	@ 0x2a
 8010858:	d015      	beq.n	8010886 <_svfiprintf_r+0xfa>
 801085a:	9a07      	ldr	r2, [sp, #28]
 801085c:	4654      	mov	r4, sl
 801085e:	2000      	movs	r0, #0
 8010860:	f04f 0c0a 	mov.w	ip, #10
 8010864:	4621      	mov	r1, r4
 8010866:	f811 3b01 	ldrb.w	r3, [r1], #1
 801086a:	3b30      	subs	r3, #48	@ 0x30
 801086c:	2b09      	cmp	r3, #9
 801086e:	d94b      	bls.n	8010908 <_svfiprintf_r+0x17c>
 8010870:	b1b0      	cbz	r0, 80108a0 <_svfiprintf_r+0x114>
 8010872:	9207      	str	r2, [sp, #28]
 8010874:	e014      	b.n	80108a0 <_svfiprintf_r+0x114>
 8010876:	eba0 0308 	sub.w	r3, r0, r8
 801087a:	fa09 f303 	lsl.w	r3, r9, r3
 801087e:	4313      	orrs	r3, r2
 8010880:	9304      	str	r3, [sp, #16]
 8010882:	46a2      	mov	sl, r4
 8010884:	e7d2      	b.n	801082c <_svfiprintf_r+0xa0>
 8010886:	9b03      	ldr	r3, [sp, #12]
 8010888:	1d19      	adds	r1, r3, #4
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	9103      	str	r1, [sp, #12]
 801088e:	2b00      	cmp	r3, #0
 8010890:	bfbb      	ittet	lt
 8010892:	425b      	neglt	r3, r3
 8010894:	f042 0202 	orrlt.w	r2, r2, #2
 8010898:	9307      	strge	r3, [sp, #28]
 801089a:	9307      	strlt	r3, [sp, #28]
 801089c:	bfb8      	it	lt
 801089e:	9204      	strlt	r2, [sp, #16]
 80108a0:	7823      	ldrb	r3, [r4, #0]
 80108a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80108a4:	d10a      	bne.n	80108bc <_svfiprintf_r+0x130>
 80108a6:	7863      	ldrb	r3, [r4, #1]
 80108a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80108aa:	d132      	bne.n	8010912 <_svfiprintf_r+0x186>
 80108ac:	9b03      	ldr	r3, [sp, #12]
 80108ae:	1d1a      	adds	r2, r3, #4
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	9203      	str	r2, [sp, #12]
 80108b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80108b8:	3402      	adds	r4, #2
 80108ba:	9305      	str	r3, [sp, #20]
 80108bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010980 <_svfiprintf_r+0x1f4>
 80108c0:	7821      	ldrb	r1, [r4, #0]
 80108c2:	2203      	movs	r2, #3
 80108c4:	4650      	mov	r0, sl
 80108c6:	f7ef fcab 	bl	8000220 <memchr>
 80108ca:	b138      	cbz	r0, 80108dc <_svfiprintf_r+0x150>
 80108cc:	9b04      	ldr	r3, [sp, #16]
 80108ce:	eba0 000a 	sub.w	r0, r0, sl
 80108d2:	2240      	movs	r2, #64	@ 0x40
 80108d4:	4082      	lsls	r2, r0
 80108d6:	4313      	orrs	r3, r2
 80108d8:	3401      	adds	r4, #1
 80108da:	9304      	str	r3, [sp, #16]
 80108dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108e0:	4824      	ldr	r0, [pc, #144]	@ (8010974 <_svfiprintf_r+0x1e8>)
 80108e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80108e6:	2206      	movs	r2, #6
 80108e8:	f7ef fc9a 	bl	8000220 <memchr>
 80108ec:	2800      	cmp	r0, #0
 80108ee:	d036      	beq.n	801095e <_svfiprintf_r+0x1d2>
 80108f0:	4b21      	ldr	r3, [pc, #132]	@ (8010978 <_svfiprintf_r+0x1ec>)
 80108f2:	bb1b      	cbnz	r3, 801093c <_svfiprintf_r+0x1b0>
 80108f4:	9b03      	ldr	r3, [sp, #12]
 80108f6:	3307      	adds	r3, #7
 80108f8:	f023 0307 	bic.w	r3, r3, #7
 80108fc:	3308      	adds	r3, #8
 80108fe:	9303      	str	r3, [sp, #12]
 8010900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010902:	4433      	add	r3, r6
 8010904:	9309      	str	r3, [sp, #36]	@ 0x24
 8010906:	e76a      	b.n	80107de <_svfiprintf_r+0x52>
 8010908:	fb0c 3202 	mla	r2, ip, r2, r3
 801090c:	460c      	mov	r4, r1
 801090e:	2001      	movs	r0, #1
 8010910:	e7a8      	b.n	8010864 <_svfiprintf_r+0xd8>
 8010912:	2300      	movs	r3, #0
 8010914:	3401      	adds	r4, #1
 8010916:	9305      	str	r3, [sp, #20]
 8010918:	4619      	mov	r1, r3
 801091a:	f04f 0c0a 	mov.w	ip, #10
 801091e:	4620      	mov	r0, r4
 8010920:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010924:	3a30      	subs	r2, #48	@ 0x30
 8010926:	2a09      	cmp	r2, #9
 8010928:	d903      	bls.n	8010932 <_svfiprintf_r+0x1a6>
 801092a:	2b00      	cmp	r3, #0
 801092c:	d0c6      	beq.n	80108bc <_svfiprintf_r+0x130>
 801092e:	9105      	str	r1, [sp, #20]
 8010930:	e7c4      	b.n	80108bc <_svfiprintf_r+0x130>
 8010932:	fb0c 2101 	mla	r1, ip, r1, r2
 8010936:	4604      	mov	r4, r0
 8010938:	2301      	movs	r3, #1
 801093a:	e7f0      	b.n	801091e <_svfiprintf_r+0x192>
 801093c:	ab03      	add	r3, sp, #12
 801093e:	9300      	str	r3, [sp, #0]
 8010940:	462a      	mov	r2, r5
 8010942:	4b0e      	ldr	r3, [pc, #56]	@ (801097c <_svfiprintf_r+0x1f0>)
 8010944:	a904      	add	r1, sp, #16
 8010946:	4638      	mov	r0, r7
 8010948:	f7fc ff30 	bl	800d7ac <_printf_float>
 801094c:	1c42      	adds	r2, r0, #1
 801094e:	4606      	mov	r6, r0
 8010950:	d1d6      	bne.n	8010900 <_svfiprintf_r+0x174>
 8010952:	89ab      	ldrh	r3, [r5, #12]
 8010954:	065b      	lsls	r3, r3, #25
 8010956:	f53f af2d 	bmi.w	80107b4 <_svfiprintf_r+0x28>
 801095a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801095c:	e72c      	b.n	80107b8 <_svfiprintf_r+0x2c>
 801095e:	ab03      	add	r3, sp, #12
 8010960:	9300      	str	r3, [sp, #0]
 8010962:	462a      	mov	r2, r5
 8010964:	4b05      	ldr	r3, [pc, #20]	@ (801097c <_svfiprintf_r+0x1f0>)
 8010966:	a904      	add	r1, sp, #16
 8010968:	4638      	mov	r0, r7
 801096a:	f7fd f9b7 	bl	800dcdc <_printf_i>
 801096e:	e7ed      	b.n	801094c <_svfiprintf_r+0x1c0>
 8010970:	08011c69 	.word	0x08011c69
 8010974:	08011c73 	.word	0x08011c73
 8010978:	0800d7ad 	.word	0x0800d7ad
 801097c:	080106d7 	.word	0x080106d7
 8010980:	08011c6f 	.word	0x08011c6f

08010984 <__sflush_r>:
 8010984:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801098c:	0716      	lsls	r6, r2, #28
 801098e:	4605      	mov	r5, r0
 8010990:	460c      	mov	r4, r1
 8010992:	d454      	bmi.n	8010a3e <__sflush_r+0xba>
 8010994:	684b      	ldr	r3, [r1, #4]
 8010996:	2b00      	cmp	r3, #0
 8010998:	dc02      	bgt.n	80109a0 <__sflush_r+0x1c>
 801099a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801099c:	2b00      	cmp	r3, #0
 801099e:	dd48      	ble.n	8010a32 <__sflush_r+0xae>
 80109a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80109a2:	2e00      	cmp	r6, #0
 80109a4:	d045      	beq.n	8010a32 <__sflush_r+0xae>
 80109a6:	2300      	movs	r3, #0
 80109a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80109ac:	682f      	ldr	r7, [r5, #0]
 80109ae:	6a21      	ldr	r1, [r4, #32]
 80109b0:	602b      	str	r3, [r5, #0]
 80109b2:	d030      	beq.n	8010a16 <__sflush_r+0x92>
 80109b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80109b6:	89a3      	ldrh	r3, [r4, #12]
 80109b8:	0759      	lsls	r1, r3, #29
 80109ba:	d505      	bpl.n	80109c8 <__sflush_r+0x44>
 80109bc:	6863      	ldr	r3, [r4, #4]
 80109be:	1ad2      	subs	r2, r2, r3
 80109c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80109c2:	b10b      	cbz	r3, 80109c8 <__sflush_r+0x44>
 80109c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80109c6:	1ad2      	subs	r2, r2, r3
 80109c8:	2300      	movs	r3, #0
 80109ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80109cc:	6a21      	ldr	r1, [r4, #32]
 80109ce:	4628      	mov	r0, r5
 80109d0:	47b0      	blx	r6
 80109d2:	1c43      	adds	r3, r0, #1
 80109d4:	89a3      	ldrh	r3, [r4, #12]
 80109d6:	d106      	bne.n	80109e6 <__sflush_r+0x62>
 80109d8:	6829      	ldr	r1, [r5, #0]
 80109da:	291d      	cmp	r1, #29
 80109dc:	d82b      	bhi.n	8010a36 <__sflush_r+0xb2>
 80109de:	4a2a      	ldr	r2, [pc, #168]	@ (8010a88 <__sflush_r+0x104>)
 80109e0:	410a      	asrs	r2, r1
 80109e2:	07d6      	lsls	r6, r2, #31
 80109e4:	d427      	bmi.n	8010a36 <__sflush_r+0xb2>
 80109e6:	2200      	movs	r2, #0
 80109e8:	6062      	str	r2, [r4, #4]
 80109ea:	04d9      	lsls	r1, r3, #19
 80109ec:	6922      	ldr	r2, [r4, #16]
 80109ee:	6022      	str	r2, [r4, #0]
 80109f0:	d504      	bpl.n	80109fc <__sflush_r+0x78>
 80109f2:	1c42      	adds	r2, r0, #1
 80109f4:	d101      	bne.n	80109fa <__sflush_r+0x76>
 80109f6:	682b      	ldr	r3, [r5, #0]
 80109f8:	b903      	cbnz	r3, 80109fc <__sflush_r+0x78>
 80109fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80109fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80109fe:	602f      	str	r7, [r5, #0]
 8010a00:	b1b9      	cbz	r1, 8010a32 <__sflush_r+0xae>
 8010a02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010a06:	4299      	cmp	r1, r3
 8010a08:	d002      	beq.n	8010a10 <__sflush_r+0x8c>
 8010a0a:	4628      	mov	r0, r5
 8010a0c:	f7fe fcdc 	bl	800f3c8 <_free_r>
 8010a10:	2300      	movs	r3, #0
 8010a12:	6363      	str	r3, [r4, #52]	@ 0x34
 8010a14:	e00d      	b.n	8010a32 <__sflush_r+0xae>
 8010a16:	2301      	movs	r3, #1
 8010a18:	4628      	mov	r0, r5
 8010a1a:	47b0      	blx	r6
 8010a1c:	4602      	mov	r2, r0
 8010a1e:	1c50      	adds	r0, r2, #1
 8010a20:	d1c9      	bne.n	80109b6 <__sflush_r+0x32>
 8010a22:	682b      	ldr	r3, [r5, #0]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d0c6      	beq.n	80109b6 <__sflush_r+0x32>
 8010a28:	2b1d      	cmp	r3, #29
 8010a2a:	d001      	beq.n	8010a30 <__sflush_r+0xac>
 8010a2c:	2b16      	cmp	r3, #22
 8010a2e:	d11e      	bne.n	8010a6e <__sflush_r+0xea>
 8010a30:	602f      	str	r7, [r5, #0]
 8010a32:	2000      	movs	r0, #0
 8010a34:	e022      	b.n	8010a7c <__sflush_r+0xf8>
 8010a36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a3a:	b21b      	sxth	r3, r3
 8010a3c:	e01b      	b.n	8010a76 <__sflush_r+0xf2>
 8010a3e:	690f      	ldr	r7, [r1, #16]
 8010a40:	2f00      	cmp	r7, #0
 8010a42:	d0f6      	beq.n	8010a32 <__sflush_r+0xae>
 8010a44:	0793      	lsls	r3, r2, #30
 8010a46:	680e      	ldr	r6, [r1, #0]
 8010a48:	bf08      	it	eq
 8010a4a:	694b      	ldreq	r3, [r1, #20]
 8010a4c:	600f      	str	r7, [r1, #0]
 8010a4e:	bf18      	it	ne
 8010a50:	2300      	movne	r3, #0
 8010a52:	eba6 0807 	sub.w	r8, r6, r7
 8010a56:	608b      	str	r3, [r1, #8]
 8010a58:	f1b8 0f00 	cmp.w	r8, #0
 8010a5c:	dde9      	ble.n	8010a32 <__sflush_r+0xae>
 8010a5e:	6a21      	ldr	r1, [r4, #32]
 8010a60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010a62:	4643      	mov	r3, r8
 8010a64:	463a      	mov	r2, r7
 8010a66:	4628      	mov	r0, r5
 8010a68:	47b0      	blx	r6
 8010a6a:	2800      	cmp	r0, #0
 8010a6c:	dc08      	bgt.n	8010a80 <__sflush_r+0xfc>
 8010a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a76:	81a3      	strh	r3, [r4, #12]
 8010a78:	f04f 30ff 	mov.w	r0, #4294967295
 8010a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a80:	4407      	add	r7, r0
 8010a82:	eba8 0800 	sub.w	r8, r8, r0
 8010a86:	e7e7      	b.n	8010a58 <__sflush_r+0xd4>
 8010a88:	dfbffffe 	.word	0xdfbffffe

08010a8c <_fflush_r>:
 8010a8c:	b538      	push	{r3, r4, r5, lr}
 8010a8e:	690b      	ldr	r3, [r1, #16]
 8010a90:	4605      	mov	r5, r0
 8010a92:	460c      	mov	r4, r1
 8010a94:	b913      	cbnz	r3, 8010a9c <_fflush_r+0x10>
 8010a96:	2500      	movs	r5, #0
 8010a98:	4628      	mov	r0, r5
 8010a9a:	bd38      	pop	{r3, r4, r5, pc}
 8010a9c:	b118      	cbz	r0, 8010aa6 <_fflush_r+0x1a>
 8010a9e:	6a03      	ldr	r3, [r0, #32]
 8010aa0:	b90b      	cbnz	r3, 8010aa6 <_fflush_r+0x1a>
 8010aa2:	f7fd fcdb 	bl	800e45c <__sinit>
 8010aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d0f3      	beq.n	8010a96 <_fflush_r+0xa>
 8010aae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010ab0:	07d0      	lsls	r0, r2, #31
 8010ab2:	d404      	bmi.n	8010abe <_fflush_r+0x32>
 8010ab4:	0599      	lsls	r1, r3, #22
 8010ab6:	d402      	bmi.n	8010abe <_fflush_r+0x32>
 8010ab8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010aba:	f7fd fe18 	bl	800e6ee <__retarget_lock_acquire_recursive>
 8010abe:	4628      	mov	r0, r5
 8010ac0:	4621      	mov	r1, r4
 8010ac2:	f7ff ff5f 	bl	8010984 <__sflush_r>
 8010ac6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010ac8:	07da      	lsls	r2, r3, #31
 8010aca:	4605      	mov	r5, r0
 8010acc:	d4e4      	bmi.n	8010a98 <_fflush_r+0xc>
 8010ace:	89a3      	ldrh	r3, [r4, #12]
 8010ad0:	059b      	lsls	r3, r3, #22
 8010ad2:	d4e1      	bmi.n	8010a98 <_fflush_r+0xc>
 8010ad4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010ad6:	f7fd fe0b 	bl	800e6f0 <__retarget_lock_release_recursive>
 8010ada:	e7dd      	b.n	8010a98 <_fflush_r+0xc>

08010adc <memmove>:
 8010adc:	4288      	cmp	r0, r1
 8010ade:	b510      	push	{r4, lr}
 8010ae0:	eb01 0402 	add.w	r4, r1, r2
 8010ae4:	d902      	bls.n	8010aec <memmove+0x10>
 8010ae6:	4284      	cmp	r4, r0
 8010ae8:	4623      	mov	r3, r4
 8010aea:	d807      	bhi.n	8010afc <memmove+0x20>
 8010aec:	1e43      	subs	r3, r0, #1
 8010aee:	42a1      	cmp	r1, r4
 8010af0:	d008      	beq.n	8010b04 <memmove+0x28>
 8010af2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010af6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010afa:	e7f8      	b.n	8010aee <memmove+0x12>
 8010afc:	4402      	add	r2, r0
 8010afe:	4601      	mov	r1, r0
 8010b00:	428a      	cmp	r2, r1
 8010b02:	d100      	bne.n	8010b06 <memmove+0x2a>
 8010b04:	bd10      	pop	{r4, pc}
 8010b06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010b0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010b0e:	e7f7      	b.n	8010b00 <memmove+0x24>

08010b10 <_sbrk_r>:
 8010b10:	b538      	push	{r3, r4, r5, lr}
 8010b12:	4d06      	ldr	r5, [pc, #24]	@ (8010b2c <_sbrk_r+0x1c>)
 8010b14:	2300      	movs	r3, #0
 8010b16:	4604      	mov	r4, r0
 8010b18:	4608      	mov	r0, r1
 8010b1a:	602b      	str	r3, [r5, #0]
 8010b1c:	f7f1 f87c 	bl	8001c18 <_sbrk>
 8010b20:	1c43      	adds	r3, r0, #1
 8010b22:	d102      	bne.n	8010b2a <_sbrk_r+0x1a>
 8010b24:	682b      	ldr	r3, [r5, #0]
 8010b26:	b103      	cbz	r3, 8010b2a <_sbrk_r+0x1a>
 8010b28:	6023      	str	r3, [r4, #0]
 8010b2a:	bd38      	pop	{r3, r4, r5, pc}
 8010b2c:	20000a54 	.word	0x20000a54

08010b30 <__assert_func>:
 8010b30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010b32:	4614      	mov	r4, r2
 8010b34:	461a      	mov	r2, r3
 8010b36:	4b09      	ldr	r3, [pc, #36]	@ (8010b5c <__assert_func+0x2c>)
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	4605      	mov	r5, r0
 8010b3c:	68d8      	ldr	r0, [r3, #12]
 8010b3e:	b954      	cbnz	r4, 8010b56 <__assert_func+0x26>
 8010b40:	4b07      	ldr	r3, [pc, #28]	@ (8010b60 <__assert_func+0x30>)
 8010b42:	461c      	mov	r4, r3
 8010b44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010b48:	9100      	str	r1, [sp, #0]
 8010b4a:	462b      	mov	r3, r5
 8010b4c:	4905      	ldr	r1, [pc, #20]	@ (8010b64 <__assert_func+0x34>)
 8010b4e:	f000 f84f 	bl	8010bf0 <fiprintf>
 8010b52:	f000 f85f 	bl	8010c14 <abort>
 8010b56:	4b04      	ldr	r3, [pc, #16]	@ (8010b68 <__assert_func+0x38>)
 8010b58:	e7f4      	b.n	8010b44 <__assert_func+0x14>
 8010b5a:	bf00      	nop
 8010b5c:	20000208 	.word	0x20000208
 8010b60:	08011cb5 	.word	0x08011cb5
 8010b64:	08011c87 	.word	0x08011c87
 8010b68:	08011c7a 	.word	0x08011c7a

08010b6c <_calloc_r>:
 8010b6c:	b570      	push	{r4, r5, r6, lr}
 8010b6e:	fba1 5402 	umull	r5, r4, r1, r2
 8010b72:	b93c      	cbnz	r4, 8010b84 <_calloc_r+0x18>
 8010b74:	4629      	mov	r1, r5
 8010b76:	f7fe ffd5 	bl	800fb24 <_malloc_r>
 8010b7a:	4606      	mov	r6, r0
 8010b7c:	b928      	cbnz	r0, 8010b8a <_calloc_r+0x1e>
 8010b7e:	2600      	movs	r6, #0
 8010b80:	4630      	mov	r0, r6
 8010b82:	bd70      	pop	{r4, r5, r6, pc}
 8010b84:	220c      	movs	r2, #12
 8010b86:	6002      	str	r2, [r0, #0]
 8010b88:	e7f9      	b.n	8010b7e <_calloc_r+0x12>
 8010b8a:	462a      	mov	r2, r5
 8010b8c:	4621      	mov	r1, r4
 8010b8e:	f7fd fd1f 	bl	800e5d0 <memset>
 8010b92:	e7f5      	b.n	8010b80 <_calloc_r+0x14>

08010b94 <_realloc_r>:
 8010b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b98:	4680      	mov	r8, r0
 8010b9a:	4615      	mov	r5, r2
 8010b9c:	460c      	mov	r4, r1
 8010b9e:	b921      	cbnz	r1, 8010baa <_realloc_r+0x16>
 8010ba0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ba4:	4611      	mov	r1, r2
 8010ba6:	f7fe bfbd 	b.w	800fb24 <_malloc_r>
 8010baa:	b92a      	cbnz	r2, 8010bb8 <_realloc_r+0x24>
 8010bac:	f7fe fc0c 	bl	800f3c8 <_free_r>
 8010bb0:	2400      	movs	r4, #0
 8010bb2:	4620      	mov	r0, r4
 8010bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bb8:	f000 f833 	bl	8010c22 <_malloc_usable_size_r>
 8010bbc:	4285      	cmp	r5, r0
 8010bbe:	4606      	mov	r6, r0
 8010bc0:	d802      	bhi.n	8010bc8 <_realloc_r+0x34>
 8010bc2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010bc6:	d8f4      	bhi.n	8010bb2 <_realloc_r+0x1e>
 8010bc8:	4629      	mov	r1, r5
 8010bca:	4640      	mov	r0, r8
 8010bcc:	f7fe ffaa 	bl	800fb24 <_malloc_r>
 8010bd0:	4607      	mov	r7, r0
 8010bd2:	2800      	cmp	r0, #0
 8010bd4:	d0ec      	beq.n	8010bb0 <_realloc_r+0x1c>
 8010bd6:	42b5      	cmp	r5, r6
 8010bd8:	462a      	mov	r2, r5
 8010bda:	4621      	mov	r1, r4
 8010bdc:	bf28      	it	cs
 8010bde:	4632      	movcs	r2, r6
 8010be0:	f7fd fd87 	bl	800e6f2 <memcpy>
 8010be4:	4621      	mov	r1, r4
 8010be6:	4640      	mov	r0, r8
 8010be8:	f7fe fbee 	bl	800f3c8 <_free_r>
 8010bec:	463c      	mov	r4, r7
 8010bee:	e7e0      	b.n	8010bb2 <_realloc_r+0x1e>

08010bf0 <fiprintf>:
 8010bf0:	b40e      	push	{r1, r2, r3}
 8010bf2:	b503      	push	{r0, r1, lr}
 8010bf4:	4601      	mov	r1, r0
 8010bf6:	ab03      	add	r3, sp, #12
 8010bf8:	4805      	ldr	r0, [pc, #20]	@ (8010c10 <fiprintf+0x20>)
 8010bfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bfe:	6800      	ldr	r0, [r0, #0]
 8010c00:	9301      	str	r3, [sp, #4]
 8010c02:	f000 f83f 	bl	8010c84 <_vfiprintf_r>
 8010c06:	b002      	add	sp, #8
 8010c08:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c0c:	b003      	add	sp, #12
 8010c0e:	4770      	bx	lr
 8010c10:	20000208 	.word	0x20000208

08010c14 <abort>:
 8010c14:	b508      	push	{r3, lr}
 8010c16:	2006      	movs	r0, #6
 8010c18:	f000 fa08 	bl	801102c <raise>
 8010c1c:	2001      	movs	r0, #1
 8010c1e:	f7f0 ff83 	bl	8001b28 <_exit>

08010c22 <_malloc_usable_size_r>:
 8010c22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c26:	1f18      	subs	r0, r3, #4
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	bfbc      	itt	lt
 8010c2c:	580b      	ldrlt	r3, [r1, r0]
 8010c2e:	18c0      	addlt	r0, r0, r3
 8010c30:	4770      	bx	lr

08010c32 <__sfputc_r>:
 8010c32:	6893      	ldr	r3, [r2, #8]
 8010c34:	3b01      	subs	r3, #1
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	b410      	push	{r4}
 8010c3a:	6093      	str	r3, [r2, #8]
 8010c3c:	da08      	bge.n	8010c50 <__sfputc_r+0x1e>
 8010c3e:	6994      	ldr	r4, [r2, #24]
 8010c40:	42a3      	cmp	r3, r4
 8010c42:	db01      	blt.n	8010c48 <__sfputc_r+0x16>
 8010c44:	290a      	cmp	r1, #10
 8010c46:	d103      	bne.n	8010c50 <__sfputc_r+0x1e>
 8010c48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c4c:	f000 b932 	b.w	8010eb4 <__swbuf_r>
 8010c50:	6813      	ldr	r3, [r2, #0]
 8010c52:	1c58      	adds	r0, r3, #1
 8010c54:	6010      	str	r0, [r2, #0]
 8010c56:	7019      	strb	r1, [r3, #0]
 8010c58:	4608      	mov	r0, r1
 8010c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c5e:	4770      	bx	lr

08010c60 <__sfputs_r>:
 8010c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c62:	4606      	mov	r6, r0
 8010c64:	460f      	mov	r7, r1
 8010c66:	4614      	mov	r4, r2
 8010c68:	18d5      	adds	r5, r2, r3
 8010c6a:	42ac      	cmp	r4, r5
 8010c6c:	d101      	bne.n	8010c72 <__sfputs_r+0x12>
 8010c6e:	2000      	movs	r0, #0
 8010c70:	e007      	b.n	8010c82 <__sfputs_r+0x22>
 8010c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c76:	463a      	mov	r2, r7
 8010c78:	4630      	mov	r0, r6
 8010c7a:	f7ff ffda 	bl	8010c32 <__sfputc_r>
 8010c7e:	1c43      	adds	r3, r0, #1
 8010c80:	d1f3      	bne.n	8010c6a <__sfputs_r+0xa>
 8010c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010c84 <_vfiprintf_r>:
 8010c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c88:	460d      	mov	r5, r1
 8010c8a:	b09d      	sub	sp, #116	@ 0x74
 8010c8c:	4614      	mov	r4, r2
 8010c8e:	4698      	mov	r8, r3
 8010c90:	4606      	mov	r6, r0
 8010c92:	b118      	cbz	r0, 8010c9c <_vfiprintf_r+0x18>
 8010c94:	6a03      	ldr	r3, [r0, #32]
 8010c96:	b90b      	cbnz	r3, 8010c9c <_vfiprintf_r+0x18>
 8010c98:	f7fd fbe0 	bl	800e45c <__sinit>
 8010c9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010c9e:	07d9      	lsls	r1, r3, #31
 8010ca0:	d405      	bmi.n	8010cae <_vfiprintf_r+0x2a>
 8010ca2:	89ab      	ldrh	r3, [r5, #12]
 8010ca4:	059a      	lsls	r2, r3, #22
 8010ca6:	d402      	bmi.n	8010cae <_vfiprintf_r+0x2a>
 8010ca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010caa:	f7fd fd20 	bl	800e6ee <__retarget_lock_acquire_recursive>
 8010cae:	89ab      	ldrh	r3, [r5, #12]
 8010cb0:	071b      	lsls	r3, r3, #28
 8010cb2:	d501      	bpl.n	8010cb8 <_vfiprintf_r+0x34>
 8010cb4:	692b      	ldr	r3, [r5, #16]
 8010cb6:	b99b      	cbnz	r3, 8010ce0 <_vfiprintf_r+0x5c>
 8010cb8:	4629      	mov	r1, r5
 8010cba:	4630      	mov	r0, r6
 8010cbc:	f000 f938 	bl	8010f30 <__swsetup_r>
 8010cc0:	b170      	cbz	r0, 8010ce0 <_vfiprintf_r+0x5c>
 8010cc2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010cc4:	07dc      	lsls	r4, r3, #31
 8010cc6:	d504      	bpl.n	8010cd2 <_vfiprintf_r+0x4e>
 8010cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8010ccc:	b01d      	add	sp, #116	@ 0x74
 8010cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cd2:	89ab      	ldrh	r3, [r5, #12]
 8010cd4:	0598      	lsls	r0, r3, #22
 8010cd6:	d4f7      	bmi.n	8010cc8 <_vfiprintf_r+0x44>
 8010cd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010cda:	f7fd fd09 	bl	800e6f0 <__retarget_lock_release_recursive>
 8010cde:	e7f3      	b.n	8010cc8 <_vfiprintf_r+0x44>
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ce4:	2320      	movs	r3, #32
 8010ce6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010cea:	f8cd 800c 	str.w	r8, [sp, #12]
 8010cee:	2330      	movs	r3, #48	@ 0x30
 8010cf0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010ea0 <_vfiprintf_r+0x21c>
 8010cf4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010cf8:	f04f 0901 	mov.w	r9, #1
 8010cfc:	4623      	mov	r3, r4
 8010cfe:	469a      	mov	sl, r3
 8010d00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d04:	b10a      	cbz	r2, 8010d0a <_vfiprintf_r+0x86>
 8010d06:	2a25      	cmp	r2, #37	@ 0x25
 8010d08:	d1f9      	bne.n	8010cfe <_vfiprintf_r+0x7a>
 8010d0a:	ebba 0b04 	subs.w	fp, sl, r4
 8010d0e:	d00b      	beq.n	8010d28 <_vfiprintf_r+0xa4>
 8010d10:	465b      	mov	r3, fp
 8010d12:	4622      	mov	r2, r4
 8010d14:	4629      	mov	r1, r5
 8010d16:	4630      	mov	r0, r6
 8010d18:	f7ff ffa2 	bl	8010c60 <__sfputs_r>
 8010d1c:	3001      	adds	r0, #1
 8010d1e:	f000 80a7 	beq.w	8010e70 <_vfiprintf_r+0x1ec>
 8010d22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d24:	445a      	add	r2, fp
 8010d26:	9209      	str	r2, [sp, #36]	@ 0x24
 8010d28:	f89a 3000 	ldrb.w	r3, [sl]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	f000 809f 	beq.w	8010e70 <_vfiprintf_r+0x1ec>
 8010d32:	2300      	movs	r3, #0
 8010d34:	f04f 32ff 	mov.w	r2, #4294967295
 8010d38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d3c:	f10a 0a01 	add.w	sl, sl, #1
 8010d40:	9304      	str	r3, [sp, #16]
 8010d42:	9307      	str	r3, [sp, #28]
 8010d44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010d48:	931a      	str	r3, [sp, #104]	@ 0x68
 8010d4a:	4654      	mov	r4, sl
 8010d4c:	2205      	movs	r2, #5
 8010d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d52:	4853      	ldr	r0, [pc, #332]	@ (8010ea0 <_vfiprintf_r+0x21c>)
 8010d54:	f7ef fa64 	bl	8000220 <memchr>
 8010d58:	9a04      	ldr	r2, [sp, #16]
 8010d5a:	b9d8      	cbnz	r0, 8010d94 <_vfiprintf_r+0x110>
 8010d5c:	06d1      	lsls	r1, r2, #27
 8010d5e:	bf44      	itt	mi
 8010d60:	2320      	movmi	r3, #32
 8010d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d66:	0713      	lsls	r3, r2, #28
 8010d68:	bf44      	itt	mi
 8010d6a:	232b      	movmi	r3, #43	@ 0x2b
 8010d6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d70:	f89a 3000 	ldrb.w	r3, [sl]
 8010d74:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d76:	d015      	beq.n	8010da4 <_vfiprintf_r+0x120>
 8010d78:	9a07      	ldr	r2, [sp, #28]
 8010d7a:	4654      	mov	r4, sl
 8010d7c:	2000      	movs	r0, #0
 8010d7e:	f04f 0c0a 	mov.w	ip, #10
 8010d82:	4621      	mov	r1, r4
 8010d84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d88:	3b30      	subs	r3, #48	@ 0x30
 8010d8a:	2b09      	cmp	r3, #9
 8010d8c:	d94b      	bls.n	8010e26 <_vfiprintf_r+0x1a2>
 8010d8e:	b1b0      	cbz	r0, 8010dbe <_vfiprintf_r+0x13a>
 8010d90:	9207      	str	r2, [sp, #28]
 8010d92:	e014      	b.n	8010dbe <_vfiprintf_r+0x13a>
 8010d94:	eba0 0308 	sub.w	r3, r0, r8
 8010d98:	fa09 f303 	lsl.w	r3, r9, r3
 8010d9c:	4313      	orrs	r3, r2
 8010d9e:	9304      	str	r3, [sp, #16]
 8010da0:	46a2      	mov	sl, r4
 8010da2:	e7d2      	b.n	8010d4a <_vfiprintf_r+0xc6>
 8010da4:	9b03      	ldr	r3, [sp, #12]
 8010da6:	1d19      	adds	r1, r3, #4
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	9103      	str	r1, [sp, #12]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	bfbb      	ittet	lt
 8010db0:	425b      	neglt	r3, r3
 8010db2:	f042 0202 	orrlt.w	r2, r2, #2
 8010db6:	9307      	strge	r3, [sp, #28]
 8010db8:	9307      	strlt	r3, [sp, #28]
 8010dba:	bfb8      	it	lt
 8010dbc:	9204      	strlt	r2, [sp, #16]
 8010dbe:	7823      	ldrb	r3, [r4, #0]
 8010dc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8010dc2:	d10a      	bne.n	8010dda <_vfiprintf_r+0x156>
 8010dc4:	7863      	ldrb	r3, [r4, #1]
 8010dc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8010dc8:	d132      	bne.n	8010e30 <_vfiprintf_r+0x1ac>
 8010dca:	9b03      	ldr	r3, [sp, #12]
 8010dcc:	1d1a      	adds	r2, r3, #4
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	9203      	str	r2, [sp, #12]
 8010dd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010dd6:	3402      	adds	r4, #2
 8010dd8:	9305      	str	r3, [sp, #20]
 8010dda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010eb0 <_vfiprintf_r+0x22c>
 8010dde:	7821      	ldrb	r1, [r4, #0]
 8010de0:	2203      	movs	r2, #3
 8010de2:	4650      	mov	r0, sl
 8010de4:	f7ef fa1c 	bl	8000220 <memchr>
 8010de8:	b138      	cbz	r0, 8010dfa <_vfiprintf_r+0x176>
 8010dea:	9b04      	ldr	r3, [sp, #16]
 8010dec:	eba0 000a 	sub.w	r0, r0, sl
 8010df0:	2240      	movs	r2, #64	@ 0x40
 8010df2:	4082      	lsls	r2, r0
 8010df4:	4313      	orrs	r3, r2
 8010df6:	3401      	adds	r4, #1
 8010df8:	9304      	str	r3, [sp, #16]
 8010dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dfe:	4829      	ldr	r0, [pc, #164]	@ (8010ea4 <_vfiprintf_r+0x220>)
 8010e00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010e04:	2206      	movs	r2, #6
 8010e06:	f7ef fa0b 	bl	8000220 <memchr>
 8010e0a:	2800      	cmp	r0, #0
 8010e0c:	d03f      	beq.n	8010e8e <_vfiprintf_r+0x20a>
 8010e0e:	4b26      	ldr	r3, [pc, #152]	@ (8010ea8 <_vfiprintf_r+0x224>)
 8010e10:	bb1b      	cbnz	r3, 8010e5a <_vfiprintf_r+0x1d6>
 8010e12:	9b03      	ldr	r3, [sp, #12]
 8010e14:	3307      	adds	r3, #7
 8010e16:	f023 0307 	bic.w	r3, r3, #7
 8010e1a:	3308      	adds	r3, #8
 8010e1c:	9303      	str	r3, [sp, #12]
 8010e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e20:	443b      	add	r3, r7
 8010e22:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e24:	e76a      	b.n	8010cfc <_vfiprintf_r+0x78>
 8010e26:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e2a:	460c      	mov	r4, r1
 8010e2c:	2001      	movs	r0, #1
 8010e2e:	e7a8      	b.n	8010d82 <_vfiprintf_r+0xfe>
 8010e30:	2300      	movs	r3, #0
 8010e32:	3401      	adds	r4, #1
 8010e34:	9305      	str	r3, [sp, #20]
 8010e36:	4619      	mov	r1, r3
 8010e38:	f04f 0c0a 	mov.w	ip, #10
 8010e3c:	4620      	mov	r0, r4
 8010e3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e42:	3a30      	subs	r2, #48	@ 0x30
 8010e44:	2a09      	cmp	r2, #9
 8010e46:	d903      	bls.n	8010e50 <_vfiprintf_r+0x1cc>
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d0c6      	beq.n	8010dda <_vfiprintf_r+0x156>
 8010e4c:	9105      	str	r1, [sp, #20]
 8010e4e:	e7c4      	b.n	8010dda <_vfiprintf_r+0x156>
 8010e50:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e54:	4604      	mov	r4, r0
 8010e56:	2301      	movs	r3, #1
 8010e58:	e7f0      	b.n	8010e3c <_vfiprintf_r+0x1b8>
 8010e5a:	ab03      	add	r3, sp, #12
 8010e5c:	9300      	str	r3, [sp, #0]
 8010e5e:	462a      	mov	r2, r5
 8010e60:	4b12      	ldr	r3, [pc, #72]	@ (8010eac <_vfiprintf_r+0x228>)
 8010e62:	a904      	add	r1, sp, #16
 8010e64:	4630      	mov	r0, r6
 8010e66:	f7fc fca1 	bl	800d7ac <_printf_float>
 8010e6a:	4607      	mov	r7, r0
 8010e6c:	1c78      	adds	r0, r7, #1
 8010e6e:	d1d6      	bne.n	8010e1e <_vfiprintf_r+0x19a>
 8010e70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010e72:	07d9      	lsls	r1, r3, #31
 8010e74:	d405      	bmi.n	8010e82 <_vfiprintf_r+0x1fe>
 8010e76:	89ab      	ldrh	r3, [r5, #12]
 8010e78:	059a      	lsls	r2, r3, #22
 8010e7a:	d402      	bmi.n	8010e82 <_vfiprintf_r+0x1fe>
 8010e7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010e7e:	f7fd fc37 	bl	800e6f0 <__retarget_lock_release_recursive>
 8010e82:	89ab      	ldrh	r3, [r5, #12]
 8010e84:	065b      	lsls	r3, r3, #25
 8010e86:	f53f af1f 	bmi.w	8010cc8 <_vfiprintf_r+0x44>
 8010e8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010e8c:	e71e      	b.n	8010ccc <_vfiprintf_r+0x48>
 8010e8e:	ab03      	add	r3, sp, #12
 8010e90:	9300      	str	r3, [sp, #0]
 8010e92:	462a      	mov	r2, r5
 8010e94:	4b05      	ldr	r3, [pc, #20]	@ (8010eac <_vfiprintf_r+0x228>)
 8010e96:	a904      	add	r1, sp, #16
 8010e98:	4630      	mov	r0, r6
 8010e9a:	f7fc ff1f 	bl	800dcdc <_printf_i>
 8010e9e:	e7e4      	b.n	8010e6a <_vfiprintf_r+0x1e6>
 8010ea0:	08011c69 	.word	0x08011c69
 8010ea4:	08011c73 	.word	0x08011c73
 8010ea8:	0800d7ad 	.word	0x0800d7ad
 8010eac:	08010c61 	.word	0x08010c61
 8010eb0:	08011c6f 	.word	0x08011c6f

08010eb4 <__swbuf_r>:
 8010eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eb6:	460e      	mov	r6, r1
 8010eb8:	4614      	mov	r4, r2
 8010eba:	4605      	mov	r5, r0
 8010ebc:	b118      	cbz	r0, 8010ec6 <__swbuf_r+0x12>
 8010ebe:	6a03      	ldr	r3, [r0, #32]
 8010ec0:	b90b      	cbnz	r3, 8010ec6 <__swbuf_r+0x12>
 8010ec2:	f7fd facb 	bl	800e45c <__sinit>
 8010ec6:	69a3      	ldr	r3, [r4, #24]
 8010ec8:	60a3      	str	r3, [r4, #8]
 8010eca:	89a3      	ldrh	r3, [r4, #12]
 8010ecc:	071a      	lsls	r2, r3, #28
 8010ece:	d501      	bpl.n	8010ed4 <__swbuf_r+0x20>
 8010ed0:	6923      	ldr	r3, [r4, #16]
 8010ed2:	b943      	cbnz	r3, 8010ee6 <__swbuf_r+0x32>
 8010ed4:	4621      	mov	r1, r4
 8010ed6:	4628      	mov	r0, r5
 8010ed8:	f000 f82a 	bl	8010f30 <__swsetup_r>
 8010edc:	b118      	cbz	r0, 8010ee6 <__swbuf_r+0x32>
 8010ede:	f04f 37ff 	mov.w	r7, #4294967295
 8010ee2:	4638      	mov	r0, r7
 8010ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ee6:	6823      	ldr	r3, [r4, #0]
 8010ee8:	6922      	ldr	r2, [r4, #16]
 8010eea:	1a98      	subs	r0, r3, r2
 8010eec:	6963      	ldr	r3, [r4, #20]
 8010eee:	b2f6      	uxtb	r6, r6
 8010ef0:	4283      	cmp	r3, r0
 8010ef2:	4637      	mov	r7, r6
 8010ef4:	dc05      	bgt.n	8010f02 <__swbuf_r+0x4e>
 8010ef6:	4621      	mov	r1, r4
 8010ef8:	4628      	mov	r0, r5
 8010efa:	f7ff fdc7 	bl	8010a8c <_fflush_r>
 8010efe:	2800      	cmp	r0, #0
 8010f00:	d1ed      	bne.n	8010ede <__swbuf_r+0x2a>
 8010f02:	68a3      	ldr	r3, [r4, #8]
 8010f04:	3b01      	subs	r3, #1
 8010f06:	60a3      	str	r3, [r4, #8]
 8010f08:	6823      	ldr	r3, [r4, #0]
 8010f0a:	1c5a      	adds	r2, r3, #1
 8010f0c:	6022      	str	r2, [r4, #0]
 8010f0e:	701e      	strb	r6, [r3, #0]
 8010f10:	6962      	ldr	r2, [r4, #20]
 8010f12:	1c43      	adds	r3, r0, #1
 8010f14:	429a      	cmp	r2, r3
 8010f16:	d004      	beq.n	8010f22 <__swbuf_r+0x6e>
 8010f18:	89a3      	ldrh	r3, [r4, #12]
 8010f1a:	07db      	lsls	r3, r3, #31
 8010f1c:	d5e1      	bpl.n	8010ee2 <__swbuf_r+0x2e>
 8010f1e:	2e0a      	cmp	r6, #10
 8010f20:	d1df      	bne.n	8010ee2 <__swbuf_r+0x2e>
 8010f22:	4621      	mov	r1, r4
 8010f24:	4628      	mov	r0, r5
 8010f26:	f7ff fdb1 	bl	8010a8c <_fflush_r>
 8010f2a:	2800      	cmp	r0, #0
 8010f2c:	d0d9      	beq.n	8010ee2 <__swbuf_r+0x2e>
 8010f2e:	e7d6      	b.n	8010ede <__swbuf_r+0x2a>

08010f30 <__swsetup_r>:
 8010f30:	b538      	push	{r3, r4, r5, lr}
 8010f32:	4b29      	ldr	r3, [pc, #164]	@ (8010fd8 <__swsetup_r+0xa8>)
 8010f34:	4605      	mov	r5, r0
 8010f36:	6818      	ldr	r0, [r3, #0]
 8010f38:	460c      	mov	r4, r1
 8010f3a:	b118      	cbz	r0, 8010f44 <__swsetup_r+0x14>
 8010f3c:	6a03      	ldr	r3, [r0, #32]
 8010f3e:	b90b      	cbnz	r3, 8010f44 <__swsetup_r+0x14>
 8010f40:	f7fd fa8c 	bl	800e45c <__sinit>
 8010f44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f48:	0719      	lsls	r1, r3, #28
 8010f4a:	d422      	bmi.n	8010f92 <__swsetup_r+0x62>
 8010f4c:	06da      	lsls	r2, r3, #27
 8010f4e:	d407      	bmi.n	8010f60 <__swsetup_r+0x30>
 8010f50:	2209      	movs	r2, #9
 8010f52:	602a      	str	r2, [r5, #0]
 8010f54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f58:	81a3      	strh	r3, [r4, #12]
 8010f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f5e:	e033      	b.n	8010fc8 <__swsetup_r+0x98>
 8010f60:	0758      	lsls	r0, r3, #29
 8010f62:	d512      	bpl.n	8010f8a <__swsetup_r+0x5a>
 8010f64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010f66:	b141      	cbz	r1, 8010f7a <__swsetup_r+0x4a>
 8010f68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010f6c:	4299      	cmp	r1, r3
 8010f6e:	d002      	beq.n	8010f76 <__swsetup_r+0x46>
 8010f70:	4628      	mov	r0, r5
 8010f72:	f7fe fa29 	bl	800f3c8 <_free_r>
 8010f76:	2300      	movs	r3, #0
 8010f78:	6363      	str	r3, [r4, #52]	@ 0x34
 8010f7a:	89a3      	ldrh	r3, [r4, #12]
 8010f7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010f80:	81a3      	strh	r3, [r4, #12]
 8010f82:	2300      	movs	r3, #0
 8010f84:	6063      	str	r3, [r4, #4]
 8010f86:	6923      	ldr	r3, [r4, #16]
 8010f88:	6023      	str	r3, [r4, #0]
 8010f8a:	89a3      	ldrh	r3, [r4, #12]
 8010f8c:	f043 0308 	orr.w	r3, r3, #8
 8010f90:	81a3      	strh	r3, [r4, #12]
 8010f92:	6923      	ldr	r3, [r4, #16]
 8010f94:	b94b      	cbnz	r3, 8010faa <__swsetup_r+0x7a>
 8010f96:	89a3      	ldrh	r3, [r4, #12]
 8010f98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010f9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010fa0:	d003      	beq.n	8010faa <__swsetup_r+0x7a>
 8010fa2:	4621      	mov	r1, r4
 8010fa4:	4628      	mov	r0, r5
 8010fa6:	f000 f883 	bl	80110b0 <__smakebuf_r>
 8010faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010fae:	f013 0201 	ands.w	r2, r3, #1
 8010fb2:	d00a      	beq.n	8010fca <__swsetup_r+0x9a>
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	60a2      	str	r2, [r4, #8]
 8010fb8:	6962      	ldr	r2, [r4, #20]
 8010fba:	4252      	negs	r2, r2
 8010fbc:	61a2      	str	r2, [r4, #24]
 8010fbe:	6922      	ldr	r2, [r4, #16]
 8010fc0:	b942      	cbnz	r2, 8010fd4 <__swsetup_r+0xa4>
 8010fc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010fc6:	d1c5      	bne.n	8010f54 <__swsetup_r+0x24>
 8010fc8:	bd38      	pop	{r3, r4, r5, pc}
 8010fca:	0799      	lsls	r1, r3, #30
 8010fcc:	bf58      	it	pl
 8010fce:	6962      	ldrpl	r2, [r4, #20]
 8010fd0:	60a2      	str	r2, [r4, #8]
 8010fd2:	e7f4      	b.n	8010fbe <__swsetup_r+0x8e>
 8010fd4:	2000      	movs	r0, #0
 8010fd6:	e7f7      	b.n	8010fc8 <__swsetup_r+0x98>
 8010fd8:	20000208 	.word	0x20000208

08010fdc <_raise_r>:
 8010fdc:	291f      	cmp	r1, #31
 8010fde:	b538      	push	{r3, r4, r5, lr}
 8010fe0:	4605      	mov	r5, r0
 8010fe2:	460c      	mov	r4, r1
 8010fe4:	d904      	bls.n	8010ff0 <_raise_r+0x14>
 8010fe6:	2316      	movs	r3, #22
 8010fe8:	6003      	str	r3, [r0, #0]
 8010fea:	f04f 30ff 	mov.w	r0, #4294967295
 8010fee:	bd38      	pop	{r3, r4, r5, pc}
 8010ff0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010ff2:	b112      	cbz	r2, 8010ffa <_raise_r+0x1e>
 8010ff4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010ff8:	b94b      	cbnz	r3, 801100e <_raise_r+0x32>
 8010ffa:	4628      	mov	r0, r5
 8010ffc:	f000 f830 	bl	8011060 <_getpid_r>
 8011000:	4622      	mov	r2, r4
 8011002:	4601      	mov	r1, r0
 8011004:	4628      	mov	r0, r5
 8011006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801100a:	f000 b817 	b.w	801103c <_kill_r>
 801100e:	2b01      	cmp	r3, #1
 8011010:	d00a      	beq.n	8011028 <_raise_r+0x4c>
 8011012:	1c59      	adds	r1, r3, #1
 8011014:	d103      	bne.n	801101e <_raise_r+0x42>
 8011016:	2316      	movs	r3, #22
 8011018:	6003      	str	r3, [r0, #0]
 801101a:	2001      	movs	r0, #1
 801101c:	e7e7      	b.n	8010fee <_raise_r+0x12>
 801101e:	2100      	movs	r1, #0
 8011020:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011024:	4620      	mov	r0, r4
 8011026:	4798      	blx	r3
 8011028:	2000      	movs	r0, #0
 801102a:	e7e0      	b.n	8010fee <_raise_r+0x12>

0801102c <raise>:
 801102c:	4b02      	ldr	r3, [pc, #8]	@ (8011038 <raise+0xc>)
 801102e:	4601      	mov	r1, r0
 8011030:	6818      	ldr	r0, [r3, #0]
 8011032:	f7ff bfd3 	b.w	8010fdc <_raise_r>
 8011036:	bf00      	nop
 8011038:	20000208 	.word	0x20000208

0801103c <_kill_r>:
 801103c:	b538      	push	{r3, r4, r5, lr}
 801103e:	4d07      	ldr	r5, [pc, #28]	@ (801105c <_kill_r+0x20>)
 8011040:	2300      	movs	r3, #0
 8011042:	4604      	mov	r4, r0
 8011044:	4608      	mov	r0, r1
 8011046:	4611      	mov	r1, r2
 8011048:	602b      	str	r3, [r5, #0]
 801104a:	f7f0 fd5d 	bl	8001b08 <_kill>
 801104e:	1c43      	adds	r3, r0, #1
 8011050:	d102      	bne.n	8011058 <_kill_r+0x1c>
 8011052:	682b      	ldr	r3, [r5, #0]
 8011054:	b103      	cbz	r3, 8011058 <_kill_r+0x1c>
 8011056:	6023      	str	r3, [r4, #0]
 8011058:	bd38      	pop	{r3, r4, r5, pc}
 801105a:	bf00      	nop
 801105c:	20000a54 	.word	0x20000a54

08011060 <_getpid_r>:
 8011060:	f7f0 bd4a 	b.w	8001af8 <_getpid>

08011064 <__swhatbuf_r>:
 8011064:	b570      	push	{r4, r5, r6, lr}
 8011066:	460c      	mov	r4, r1
 8011068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801106c:	2900      	cmp	r1, #0
 801106e:	b096      	sub	sp, #88	@ 0x58
 8011070:	4615      	mov	r5, r2
 8011072:	461e      	mov	r6, r3
 8011074:	da0d      	bge.n	8011092 <__swhatbuf_r+0x2e>
 8011076:	89a3      	ldrh	r3, [r4, #12]
 8011078:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801107c:	f04f 0100 	mov.w	r1, #0
 8011080:	bf14      	ite	ne
 8011082:	2340      	movne	r3, #64	@ 0x40
 8011084:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011088:	2000      	movs	r0, #0
 801108a:	6031      	str	r1, [r6, #0]
 801108c:	602b      	str	r3, [r5, #0]
 801108e:	b016      	add	sp, #88	@ 0x58
 8011090:	bd70      	pop	{r4, r5, r6, pc}
 8011092:	466a      	mov	r2, sp
 8011094:	f000 f848 	bl	8011128 <_fstat_r>
 8011098:	2800      	cmp	r0, #0
 801109a:	dbec      	blt.n	8011076 <__swhatbuf_r+0x12>
 801109c:	9901      	ldr	r1, [sp, #4]
 801109e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80110a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80110a6:	4259      	negs	r1, r3
 80110a8:	4159      	adcs	r1, r3
 80110aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80110ae:	e7eb      	b.n	8011088 <__swhatbuf_r+0x24>

080110b0 <__smakebuf_r>:
 80110b0:	898b      	ldrh	r3, [r1, #12]
 80110b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80110b4:	079d      	lsls	r5, r3, #30
 80110b6:	4606      	mov	r6, r0
 80110b8:	460c      	mov	r4, r1
 80110ba:	d507      	bpl.n	80110cc <__smakebuf_r+0x1c>
 80110bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80110c0:	6023      	str	r3, [r4, #0]
 80110c2:	6123      	str	r3, [r4, #16]
 80110c4:	2301      	movs	r3, #1
 80110c6:	6163      	str	r3, [r4, #20]
 80110c8:	b003      	add	sp, #12
 80110ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110cc:	ab01      	add	r3, sp, #4
 80110ce:	466a      	mov	r2, sp
 80110d0:	f7ff ffc8 	bl	8011064 <__swhatbuf_r>
 80110d4:	9f00      	ldr	r7, [sp, #0]
 80110d6:	4605      	mov	r5, r0
 80110d8:	4639      	mov	r1, r7
 80110da:	4630      	mov	r0, r6
 80110dc:	f7fe fd22 	bl	800fb24 <_malloc_r>
 80110e0:	b948      	cbnz	r0, 80110f6 <__smakebuf_r+0x46>
 80110e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110e6:	059a      	lsls	r2, r3, #22
 80110e8:	d4ee      	bmi.n	80110c8 <__smakebuf_r+0x18>
 80110ea:	f023 0303 	bic.w	r3, r3, #3
 80110ee:	f043 0302 	orr.w	r3, r3, #2
 80110f2:	81a3      	strh	r3, [r4, #12]
 80110f4:	e7e2      	b.n	80110bc <__smakebuf_r+0xc>
 80110f6:	89a3      	ldrh	r3, [r4, #12]
 80110f8:	6020      	str	r0, [r4, #0]
 80110fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80110fe:	81a3      	strh	r3, [r4, #12]
 8011100:	9b01      	ldr	r3, [sp, #4]
 8011102:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011106:	b15b      	cbz	r3, 8011120 <__smakebuf_r+0x70>
 8011108:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801110c:	4630      	mov	r0, r6
 801110e:	f000 f81d 	bl	801114c <_isatty_r>
 8011112:	b128      	cbz	r0, 8011120 <__smakebuf_r+0x70>
 8011114:	89a3      	ldrh	r3, [r4, #12]
 8011116:	f023 0303 	bic.w	r3, r3, #3
 801111a:	f043 0301 	orr.w	r3, r3, #1
 801111e:	81a3      	strh	r3, [r4, #12]
 8011120:	89a3      	ldrh	r3, [r4, #12]
 8011122:	431d      	orrs	r5, r3
 8011124:	81a5      	strh	r5, [r4, #12]
 8011126:	e7cf      	b.n	80110c8 <__smakebuf_r+0x18>

08011128 <_fstat_r>:
 8011128:	b538      	push	{r3, r4, r5, lr}
 801112a:	4d07      	ldr	r5, [pc, #28]	@ (8011148 <_fstat_r+0x20>)
 801112c:	2300      	movs	r3, #0
 801112e:	4604      	mov	r4, r0
 8011130:	4608      	mov	r0, r1
 8011132:	4611      	mov	r1, r2
 8011134:	602b      	str	r3, [r5, #0]
 8011136:	f7f0 fd47 	bl	8001bc8 <_fstat>
 801113a:	1c43      	adds	r3, r0, #1
 801113c:	d102      	bne.n	8011144 <_fstat_r+0x1c>
 801113e:	682b      	ldr	r3, [r5, #0]
 8011140:	b103      	cbz	r3, 8011144 <_fstat_r+0x1c>
 8011142:	6023      	str	r3, [r4, #0]
 8011144:	bd38      	pop	{r3, r4, r5, pc}
 8011146:	bf00      	nop
 8011148:	20000a54 	.word	0x20000a54

0801114c <_isatty_r>:
 801114c:	b538      	push	{r3, r4, r5, lr}
 801114e:	4d06      	ldr	r5, [pc, #24]	@ (8011168 <_isatty_r+0x1c>)
 8011150:	2300      	movs	r3, #0
 8011152:	4604      	mov	r4, r0
 8011154:	4608      	mov	r0, r1
 8011156:	602b      	str	r3, [r5, #0]
 8011158:	f7f0 fd46 	bl	8001be8 <_isatty>
 801115c:	1c43      	adds	r3, r0, #1
 801115e:	d102      	bne.n	8011166 <_isatty_r+0x1a>
 8011160:	682b      	ldr	r3, [r5, #0]
 8011162:	b103      	cbz	r3, 8011166 <_isatty_r+0x1a>
 8011164:	6023      	str	r3, [r4, #0]
 8011166:	bd38      	pop	{r3, r4, r5, pc}
 8011168:	20000a54 	.word	0x20000a54

0801116c <fmod>:
 801116c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801116e:	ed2d 8b02 	vpush	{d8}
 8011172:	ec57 6b10 	vmov	r6, r7, d0
 8011176:	ec55 4b11 	vmov	r4, r5, d1
 801117a:	f000 f827 	bl	80111cc <__ieee754_fmod>
 801117e:	4622      	mov	r2, r4
 8011180:	462b      	mov	r3, r5
 8011182:	4630      	mov	r0, r6
 8011184:	4639      	mov	r1, r7
 8011186:	eeb0 8a40 	vmov.f32	s16, s0
 801118a:	eef0 8a60 	vmov.f32	s17, s1
 801118e:	f7ef fcf5 	bl	8000b7c <__aeabi_dcmpun>
 8011192:	b990      	cbnz	r0, 80111ba <fmod+0x4e>
 8011194:	2200      	movs	r2, #0
 8011196:	2300      	movs	r3, #0
 8011198:	4620      	mov	r0, r4
 801119a:	4629      	mov	r1, r5
 801119c:	f7ef fcbc 	bl	8000b18 <__aeabi_dcmpeq>
 80111a0:	b158      	cbz	r0, 80111ba <fmod+0x4e>
 80111a2:	f7fd fa79 	bl	800e698 <__errno>
 80111a6:	2321      	movs	r3, #33	@ 0x21
 80111a8:	6003      	str	r3, [r0, #0]
 80111aa:	2200      	movs	r2, #0
 80111ac:	2300      	movs	r3, #0
 80111ae:	4610      	mov	r0, r2
 80111b0:	4619      	mov	r1, r3
 80111b2:	f7ef fb73 	bl	800089c <__aeabi_ddiv>
 80111b6:	ec41 0b18 	vmov	d8, r0, r1
 80111ba:	eeb0 0a48 	vmov.f32	s0, s16
 80111be:	eef0 0a68 	vmov.f32	s1, s17
 80111c2:	ecbd 8b02 	vpop	{d8}
 80111c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080111c8 <atan2f>:
 80111c8:	f000 b90a 	b.w	80113e0 <__ieee754_atan2f>

080111cc <__ieee754_fmod>:
 80111cc:	ec53 2b11 	vmov	r2, r3, d1
 80111d0:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 80111d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111d8:	ea52 040c 	orrs.w	r4, r2, ip
 80111dc:	ec51 0b10 	vmov	r0, r1, d0
 80111e0:	461e      	mov	r6, r3
 80111e2:	4617      	mov	r7, r2
 80111e4:	4696      	mov	lr, r2
 80111e6:	d00c      	beq.n	8011202 <__ieee754_fmod+0x36>
 80111e8:	4c77      	ldr	r4, [pc, #476]	@ (80113c8 <__ieee754_fmod+0x1fc>)
 80111ea:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 80111ee:	45a0      	cmp	r8, r4
 80111f0:	4689      	mov	r9, r1
 80111f2:	d806      	bhi.n	8011202 <__ieee754_fmod+0x36>
 80111f4:	4254      	negs	r4, r2
 80111f6:	4d75      	ldr	r5, [pc, #468]	@ (80113cc <__ieee754_fmod+0x200>)
 80111f8:	4314      	orrs	r4, r2
 80111fa:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 80111fe:	42ac      	cmp	r4, r5
 8011200:	d909      	bls.n	8011216 <__ieee754_fmod+0x4a>
 8011202:	f7ef fa21 	bl	8000648 <__aeabi_dmul>
 8011206:	4602      	mov	r2, r0
 8011208:	460b      	mov	r3, r1
 801120a:	f7ef fb47 	bl	800089c <__aeabi_ddiv>
 801120e:	ec41 0b10 	vmov	d0, r0, r1
 8011212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011216:	45e0      	cmp	r8, ip
 8011218:	4682      	mov	sl, r0
 801121a:	4604      	mov	r4, r0
 801121c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8011220:	dc09      	bgt.n	8011236 <__ieee754_fmod+0x6a>
 8011222:	dbf4      	blt.n	801120e <__ieee754_fmod+0x42>
 8011224:	4282      	cmp	r2, r0
 8011226:	d8f2      	bhi.n	801120e <__ieee754_fmod+0x42>
 8011228:	d105      	bne.n	8011236 <__ieee754_fmod+0x6a>
 801122a:	4b69      	ldr	r3, [pc, #420]	@ (80113d0 <__ieee754_fmod+0x204>)
 801122c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8011230:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011234:	e7eb      	b.n	801120e <__ieee754_fmod+0x42>
 8011236:	4a65      	ldr	r2, [pc, #404]	@ (80113cc <__ieee754_fmod+0x200>)
 8011238:	ea19 0f02 	tst.w	r9, r2
 801123c:	d148      	bne.n	80112d0 <__ieee754_fmod+0x104>
 801123e:	f1b8 0f00 	cmp.w	r8, #0
 8011242:	d13d      	bne.n	80112c0 <__ieee754_fmod+0xf4>
 8011244:	4963      	ldr	r1, [pc, #396]	@ (80113d4 <__ieee754_fmod+0x208>)
 8011246:	4653      	mov	r3, sl
 8011248:	2b00      	cmp	r3, #0
 801124a:	dc36      	bgt.n	80112ba <__ieee754_fmod+0xee>
 801124c:	4216      	tst	r6, r2
 801124e:	d14f      	bne.n	80112f0 <__ieee754_fmod+0x124>
 8011250:	f1bc 0f00 	cmp.w	ip, #0
 8011254:	d144      	bne.n	80112e0 <__ieee754_fmod+0x114>
 8011256:	4a5f      	ldr	r2, [pc, #380]	@ (80113d4 <__ieee754_fmod+0x208>)
 8011258:	463b      	mov	r3, r7
 801125a:	2b00      	cmp	r3, #0
 801125c:	dc3d      	bgt.n	80112da <__ieee754_fmod+0x10e>
 801125e:	485e      	ldr	r0, [pc, #376]	@ (80113d8 <__ieee754_fmod+0x20c>)
 8011260:	4281      	cmp	r1, r0
 8011262:	db4a      	blt.n	80112fa <__ieee754_fmod+0x12e>
 8011264:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011268:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801126c:	485a      	ldr	r0, [pc, #360]	@ (80113d8 <__ieee754_fmod+0x20c>)
 801126e:	4282      	cmp	r2, r0
 8011270:	db57      	blt.n	8011322 <__ieee754_fmod+0x156>
 8011272:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8011276:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 801127a:	1a89      	subs	r1, r1, r2
 801127c:	1b98      	subs	r0, r3, r6
 801127e:	eba4 070e 	sub.w	r7, r4, lr
 8011282:	2900      	cmp	r1, #0
 8011284:	d162      	bne.n	801134c <__ieee754_fmod+0x180>
 8011286:	4574      	cmp	r4, lr
 8011288:	bf38      	it	cc
 801128a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801128e:	2800      	cmp	r0, #0
 8011290:	bfa4      	itt	ge
 8011292:	463c      	movge	r4, r7
 8011294:	4603      	movge	r3, r0
 8011296:	ea53 0104 	orrs.w	r1, r3, r4
 801129a:	d0c6      	beq.n	801122a <__ieee754_fmod+0x5e>
 801129c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80112a0:	db69      	blt.n	8011376 <__ieee754_fmod+0x1aa>
 80112a2:	494d      	ldr	r1, [pc, #308]	@ (80113d8 <__ieee754_fmod+0x20c>)
 80112a4:	428a      	cmp	r2, r1
 80112a6:	db6c      	blt.n	8011382 <__ieee754_fmod+0x1b6>
 80112a8:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80112ac:	432b      	orrs	r3, r5
 80112ae:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 80112b2:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80112b6:	4620      	mov	r0, r4
 80112b8:	e7a9      	b.n	801120e <__ieee754_fmod+0x42>
 80112ba:	3901      	subs	r1, #1
 80112bc:	005b      	lsls	r3, r3, #1
 80112be:	e7c3      	b.n	8011248 <__ieee754_fmod+0x7c>
 80112c0:	4945      	ldr	r1, [pc, #276]	@ (80113d8 <__ieee754_fmod+0x20c>)
 80112c2:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	ddc0      	ble.n	801124c <__ieee754_fmod+0x80>
 80112ca:	3901      	subs	r1, #1
 80112cc:	005b      	lsls	r3, r3, #1
 80112ce:	e7fa      	b.n	80112c6 <__ieee754_fmod+0xfa>
 80112d0:	ea4f 5128 	mov.w	r1, r8, asr #20
 80112d4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80112d8:	e7b8      	b.n	801124c <__ieee754_fmod+0x80>
 80112da:	3a01      	subs	r2, #1
 80112dc:	005b      	lsls	r3, r3, #1
 80112de:	e7bc      	b.n	801125a <__ieee754_fmod+0x8e>
 80112e0:	4a3d      	ldr	r2, [pc, #244]	@ (80113d8 <__ieee754_fmod+0x20c>)
 80112e2:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	ddb9      	ble.n	801125e <__ieee754_fmod+0x92>
 80112ea:	3a01      	subs	r2, #1
 80112ec:	005b      	lsls	r3, r3, #1
 80112ee:	e7fa      	b.n	80112e6 <__ieee754_fmod+0x11a>
 80112f0:	ea4f 522c 	mov.w	r2, ip, asr #20
 80112f4:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80112f8:	e7b1      	b.n	801125e <__ieee754_fmod+0x92>
 80112fa:	1a40      	subs	r0, r0, r1
 80112fc:	281f      	cmp	r0, #31
 80112fe:	dc0a      	bgt.n	8011316 <__ieee754_fmod+0x14a>
 8011300:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 8011304:	fa08 f800 	lsl.w	r8, r8, r0
 8011308:	fa2a f303 	lsr.w	r3, sl, r3
 801130c:	ea43 0308 	orr.w	r3, r3, r8
 8011310:	fa0a f400 	lsl.w	r4, sl, r0
 8011314:	e7aa      	b.n	801126c <__ieee754_fmod+0xa0>
 8011316:	4b31      	ldr	r3, [pc, #196]	@ (80113dc <__ieee754_fmod+0x210>)
 8011318:	1a5b      	subs	r3, r3, r1
 801131a:	fa0a f303 	lsl.w	r3, sl, r3
 801131e:	2400      	movs	r4, #0
 8011320:	e7a4      	b.n	801126c <__ieee754_fmod+0xa0>
 8011322:	1a80      	subs	r0, r0, r2
 8011324:	281f      	cmp	r0, #31
 8011326:	dc0a      	bgt.n	801133e <__ieee754_fmod+0x172>
 8011328:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 801132c:	fa0c fc00 	lsl.w	ip, ip, r0
 8011330:	fa27 f606 	lsr.w	r6, r7, r6
 8011334:	ea46 060c 	orr.w	r6, r6, ip
 8011338:	fa07 fe00 	lsl.w	lr, r7, r0
 801133c:	e79d      	b.n	801127a <__ieee754_fmod+0xae>
 801133e:	4e27      	ldr	r6, [pc, #156]	@ (80113dc <__ieee754_fmod+0x210>)
 8011340:	1ab6      	subs	r6, r6, r2
 8011342:	fa07 f606 	lsl.w	r6, r7, r6
 8011346:	f04f 0e00 	mov.w	lr, #0
 801134a:	e796      	b.n	801127a <__ieee754_fmod+0xae>
 801134c:	4574      	cmp	r4, lr
 801134e:	bf38      	it	cc
 8011350:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8011354:	2800      	cmp	r0, #0
 8011356:	da05      	bge.n	8011364 <__ieee754_fmod+0x198>
 8011358:	0fe0      	lsrs	r0, r4, #31
 801135a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801135e:	0064      	lsls	r4, r4, #1
 8011360:	3901      	subs	r1, #1
 8011362:	e78b      	b.n	801127c <__ieee754_fmod+0xb0>
 8011364:	ea50 0307 	orrs.w	r3, r0, r7
 8011368:	f43f af5f 	beq.w	801122a <__ieee754_fmod+0x5e>
 801136c:	0ffb      	lsrs	r3, r7, #31
 801136e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8011372:	007c      	lsls	r4, r7, #1
 8011374:	e7f4      	b.n	8011360 <__ieee754_fmod+0x194>
 8011376:	0fe1      	lsrs	r1, r4, #31
 8011378:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801137c:	0064      	lsls	r4, r4, #1
 801137e:	3a01      	subs	r2, #1
 8011380:	e78c      	b.n	801129c <__ieee754_fmod+0xd0>
 8011382:	1a89      	subs	r1, r1, r2
 8011384:	2914      	cmp	r1, #20
 8011386:	dc0a      	bgt.n	801139e <__ieee754_fmod+0x1d2>
 8011388:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 801138c:	fa03 f202 	lsl.w	r2, r3, r2
 8011390:	40cc      	lsrs	r4, r1
 8011392:	4322      	orrs	r2, r4
 8011394:	410b      	asrs	r3, r1
 8011396:	ea43 0105 	orr.w	r1, r3, r5
 801139a:	4610      	mov	r0, r2
 801139c:	e737      	b.n	801120e <__ieee754_fmod+0x42>
 801139e:	291f      	cmp	r1, #31
 80113a0:	dc07      	bgt.n	80113b2 <__ieee754_fmod+0x1e6>
 80113a2:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 80113a6:	40cc      	lsrs	r4, r1
 80113a8:	fa03 f202 	lsl.w	r2, r3, r2
 80113ac:	4322      	orrs	r2, r4
 80113ae:	462b      	mov	r3, r5
 80113b0:	e7f1      	b.n	8011396 <__ieee754_fmod+0x1ca>
 80113b2:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 80113b6:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 80113ba:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 80113be:	32e2      	adds	r2, #226	@ 0xe2
 80113c0:	fa43 f202 	asr.w	r2, r3, r2
 80113c4:	e7f3      	b.n	80113ae <__ieee754_fmod+0x1e2>
 80113c6:	bf00      	nop
 80113c8:	7fefffff 	.word	0x7fefffff
 80113cc:	7ff00000 	.word	0x7ff00000
 80113d0:	08011cb8 	.word	0x08011cb8
 80113d4:	fffffbed 	.word	0xfffffbed
 80113d8:	fffffc02 	.word	0xfffffc02
 80113dc:	fffffbe2 	.word	0xfffffbe2

080113e0 <__ieee754_atan2f>:
 80113e0:	ee10 2a90 	vmov	r2, s1
 80113e4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80113e8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80113ec:	b510      	push	{r4, lr}
 80113ee:	eef0 7a40 	vmov.f32	s15, s0
 80113f2:	d806      	bhi.n	8011402 <__ieee754_atan2f+0x22>
 80113f4:	ee10 0a10 	vmov	r0, s0
 80113f8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80113fc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011400:	d904      	bls.n	801140c <__ieee754_atan2f+0x2c>
 8011402:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8011406:	eeb0 0a67 	vmov.f32	s0, s15
 801140a:	bd10      	pop	{r4, pc}
 801140c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8011410:	d103      	bne.n	801141a <__ieee754_atan2f+0x3a>
 8011412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011416:	f000 b883 	b.w	8011520 <atanf>
 801141a:	1794      	asrs	r4, r2, #30
 801141c:	f004 0402 	and.w	r4, r4, #2
 8011420:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8011424:	b943      	cbnz	r3, 8011438 <__ieee754_atan2f+0x58>
 8011426:	2c02      	cmp	r4, #2
 8011428:	d05e      	beq.n	80114e8 <__ieee754_atan2f+0x108>
 801142a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80114fc <__ieee754_atan2f+0x11c>
 801142e:	2c03      	cmp	r4, #3
 8011430:	bf08      	it	eq
 8011432:	eef0 7a47 	vmoveq.f32	s15, s14
 8011436:	e7e6      	b.n	8011406 <__ieee754_atan2f+0x26>
 8011438:	b941      	cbnz	r1, 801144c <__ieee754_atan2f+0x6c>
 801143a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8011500 <__ieee754_atan2f+0x120>
 801143e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8011504 <__ieee754_atan2f+0x124>
 8011442:	2800      	cmp	r0, #0
 8011444:	bfb8      	it	lt
 8011446:	eef0 7a47 	vmovlt.f32	s15, s14
 801144a:	e7dc      	b.n	8011406 <__ieee754_atan2f+0x26>
 801144c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011450:	d110      	bne.n	8011474 <__ieee754_atan2f+0x94>
 8011452:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011456:	f104 34ff 	add.w	r4, r4, #4294967295
 801145a:	d107      	bne.n	801146c <__ieee754_atan2f+0x8c>
 801145c:	2c02      	cmp	r4, #2
 801145e:	d846      	bhi.n	80114ee <__ieee754_atan2f+0x10e>
 8011460:	4b29      	ldr	r3, [pc, #164]	@ (8011508 <__ieee754_atan2f+0x128>)
 8011462:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011466:	edd3 7a00 	vldr	s15, [r3]
 801146a:	e7cc      	b.n	8011406 <__ieee754_atan2f+0x26>
 801146c:	2c02      	cmp	r4, #2
 801146e:	d841      	bhi.n	80114f4 <__ieee754_atan2f+0x114>
 8011470:	4b26      	ldr	r3, [pc, #152]	@ (801150c <__ieee754_atan2f+0x12c>)
 8011472:	e7f6      	b.n	8011462 <__ieee754_atan2f+0x82>
 8011474:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011478:	d0df      	beq.n	801143a <__ieee754_atan2f+0x5a>
 801147a:	1a5b      	subs	r3, r3, r1
 801147c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8011480:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8011484:	da1a      	bge.n	80114bc <__ieee754_atan2f+0xdc>
 8011486:	2a00      	cmp	r2, #0
 8011488:	da01      	bge.n	801148e <__ieee754_atan2f+0xae>
 801148a:	313c      	adds	r1, #60	@ 0x3c
 801148c:	db19      	blt.n	80114c2 <__ieee754_atan2f+0xe2>
 801148e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8011492:	f000 f919 	bl	80116c8 <fabsf>
 8011496:	f000 f843 	bl	8011520 <atanf>
 801149a:	eef0 7a40 	vmov.f32	s15, s0
 801149e:	2c01      	cmp	r4, #1
 80114a0:	d012      	beq.n	80114c8 <__ieee754_atan2f+0xe8>
 80114a2:	2c02      	cmp	r4, #2
 80114a4:	d017      	beq.n	80114d6 <__ieee754_atan2f+0xf6>
 80114a6:	2c00      	cmp	r4, #0
 80114a8:	d0ad      	beq.n	8011406 <__ieee754_atan2f+0x26>
 80114aa:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8011510 <__ieee754_atan2f+0x130>
 80114ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80114b2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8011514 <__ieee754_atan2f+0x134>
 80114b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80114ba:	e7a4      	b.n	8011406 <__ieee754_atan2f+0x26>
 80114bc:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8011500 <__ieee754_atan2f+0x120>
 80114c0:	e7ed      	b.n	801149e <__ieee754_atan2f+0xbe>
 80114c2:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8011518 <__ieee754_atan2f+0x138>
 80114c6:	e7ea      	b.n	801149e <__ieee754_atan2f+0xbe>
 80114c8:	ee17 3a90 	vmov	r3, s15
 80114cc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80114d0:	ee07 3a90 	vmov	s15, r3
 80114d4:	e797      	b.n	8011406 <__ieee754_atan2f+0x26>
 80114d6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8011510 <__ieee754_atan2f+0x130>
 80114da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80114de:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8011514 <__ieee754_atan2f+0x134>
 80114e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80114e6:	e78e      	b.n	8011406 <__ieee754_atan2f+0x26>
 80114e8:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8011514 <__ieee754_atan2f+0x134>
 80114ec:	e78b      	b.n	8011406 <__ieee754_atan2f+0x26>
 80114ee:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 801151c <__ieee754_atan2f+0x13c>
 80114f2:	e788      	b.n	8011406 <__ieee754_atan2f+0x26>
 80114f4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8011518 <__ieee754_atan2f+0x138>
 80114f8:	e785      	b.n	8011406 <__ieee754_atan2f+0x26>
 80114fa:	bf00      	nop
 80114fc:	c0490fdb 	.word	0xc0490fdb
 8011500:	3fc90fdb 	.word	0x3fc90fdb
 8011504:	bfc90fdb 	.word	0xbfc90fdb
 8011508:	08011cd4 	.word	0x08011cd4
 801150c:	08011cc8 	.word	0x08011cc8
 8011510:	33bbbd2e 	.word	0x33bbbd2e
 8011514:	40490fdb 	.word	0x40490fdb
 8011518:	00000000 	.word	0x00000000
 801151c:	3f490fdb 	.word	0x3f490fdb

08011520 <atanf>:
 8011520:	b538      	push	{r3, r4, r5, lr}
 8011522:	ee10 5a10 	vmov	r5, s0
 8011526:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801152a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 801152e:	eef0 7a40 	vmov.f32	s15, s0
 8011532:	d310      	bcc.n	8011556 <atanf+0x36>
 8011534:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8011538:	d904      	bls.n	8011544 <atanf+0x24>
 801153a:	ee70 7a00 	vadd.f32	s15, s0, s0
 801153e:	eeb0 0a67 	vmov.f32	s0, s15
 8011542:	bd38      	pop	{r3, r4, r5, pc}
 8011544:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 801167c <atanf+0x15c>
 8011548:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8011680 <atanf+0x160>
 801154c:	2d00      	cmp	r5, #0
 801154e:	bfc8      	it	gt
 8011550:	eef0 7a47 	vmovgt.f32	s15, s14
 8011554:	e7f3      	b.n	801153e <atanf+0x1e>
 8011556:	4b4b      	ldr	r3, [pc, #300]	@ (8011684 <atanf+0x164>)
 8011558:	429c      	cmp	r4, r3
 801155a:	d810      	bhi.n	801157e <atanf+0x5e>
 801155c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8011560:	d20a      	bcs.n	8011578 <atanf+0x58>
 8011562:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8011688 <atanf+0x168>
 8011566:	ee30 7a07 	vadd.f32	s14, s0, s14
 801156a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801156e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8011572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011576:	dce2      	bgt.n	801153e <atanf+0x1e>
 8011578:	f04f 33ff 	mov.w	r3, #4294967295
 801157c:	e013      	b.n	80115a6 <atanf+0x86>
 801157e:	f000 f8a3 	bl	80116c8 <fabsf>
 8011582:	4b42      	ldr	r3, [pc, #264]	@ (801168c <atanf+0x16c>)
 8011584:	429c      	cmp	r4, r3
 8011586:	d84f      	bhi.n	8011628 <atanf+0x108>
 8011588:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 801158c:	429c      	cmp	r4, r3
 801158e:	d841      	bhi.n	8011614 <atanf+0xf4>
 8011590:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8011594:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011598:	eea0 7a27 	vfma.f32	s14, s0, s15
 801159c:	2300      	movs	r3, #0
 801159e:	ee30 0a27 	vadd.f32	s0, s0, s15
 80115a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80115a6:	1c5a      	adds	r2, r3, #1
 80115a8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80115ac:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8011690 <atanf+0x170>
 80115b0:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8011694 <atanf+0x174>
 80115b4:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8011698 <atanf+0x178>
 80115b8:	ee66 6a06 	vmul.f32	s13, s12, s12
 80115bc:	eee6 5a87 	vfma.f32	s11, s13, s14
 80115c0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 801169c <atanf+0x17c>
 80115c4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80115c8:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80116a0 <atanf+0x180>
 80115cc:	eee7 5a26 	vfma.f32	s11, s14, s13
 80115d0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80116a4 <atanf+0x184>
 80115d4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80115d8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80116a8 <atanf+0x188>
 80115dc:	eee7 5a26 	vfma.f32	s11, s14, s13
 80115e0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80116ac <atanf+0x18c>
 80115e4:	eea6 5a87 	vfma.f32	s10, s13, s14
 80115e8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80116b0 <atanf+0x190>
 80115ec:	eea5 7a26 	vfma.f32	s14, s10, s13
 80115f0:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80116b4 <atanf+0x194>
 80115f4:	eea7 5a26 	vfma.f32	s10, s14, s13
 80115f8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80116b8 <atanf+0x198>
 80115fc:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011600:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011604:	eea5 7a86 	vfma.f32	s14, s11, s12
 8011608:	ee27 7a87 	vmul.f32	s14, s15, s14
 801160c:	d121      	bne.n	8011652 <atanf+0x132>
 801160e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011612:	e794      	b.n	801153e <atanf+0x1e>
 8011614:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011618:	ee30 7a67 	vsub.f32	s14, s0, s15
 801161c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011620:	2301      	movs	r3, #1
 8011622:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011626:	e7be      	b.n	80115a6 <atanf+0x86>
 8011628:	4b24      	ldr	r3, [pc, #144]	@ (80116bc <atanf+0x19c>)
 801162a:	429c      	cmp	r4, r3
 801162c:	d80b      	bhi.n	8011646 <atanf+0x126>
 801162e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8011632:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011636:	eea0 7a27 	vfma.f32	s14, s0, s15
 801163a:	2302      	movs	r3, #2
 801163c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011644:	e7af      	b.n	80115a6 <atanf+0x86>
 8011646:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801164a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801164e:	2303      	movs	r3, #3
 8011650:	e7a9      	b.n	80115a6 <atanf+0x86>
 8011652:	4a1b      	ldr	r2, [pc, #108]	@ (80116c0 <atanf+0x1a0>)
 8011654:	491b      	ldr	r1, [pc, #108]	@ (80116c4 <atanf+0x1a4>)
 8011656:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801165a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801165e:	edd3 6a00 	vldr	s13, [r3]
 8011662:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011666:	2d00      	cmp	r5, #0
 8011668:	ee37 7a67 	vsub.f32	s14, s14, s15
 801166c:	edd2 7a00 	vldr	s15, [r2]
 8011670:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011674:	bfb8      	it	lt
 8011676:	eef1 7a67 	vneglt.f32	s15, s15
 801167a:	e760      	b.n	801153e <atanf+0x1e>
 801167c:	bfc90fdb 	.word	0xbfc90fdb
 8011680:	3fc90fdb 	.word	0x3fc90fdb
 8011684:	3edfffff 	.word	0x3edfffff
 8011688:	7149f2ca 	.word	0x7149f2ca
 801168c:	3f97ffff 	.word	0x3f97ffff
 8011690:	3c8569d7 	.word	0x3c8569d7
 8011694:	3d4bda59 	.word	0x3d4bda59
 8011698:	bd6ef16b 	.word	0xbd6ef16b
 801169c:	3d886b35 	.word	0x3d886b35
 80116a0:	3dba2e6e 	.word	0x3dba2e6e
 80116a4:	3e124925 	.word	0x3e124925
 80116a8:	3eaaaaab 	.word	0x3eaaaaab
 80116ac:	bd15a221 	.word	0xbd15a221
 80116b0:	bd9d8795 	.word	0xbd9d8795
 80116b4:	bde38e38 	.word	0xbde38e38
 80116b8:	be4ccccd 	.word	0xbe4ccccd
 80116bc:	401bffff 	.word	0x401bffff
 80116c0:	08011cf0 	.word	0x08011cf0
 80116c4:	08011ce0 	.word	0x08011ce0

080116c8 <fabsf>:
 80116c8:	ee10 3a10 	vmov	r3, s0
 80116cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80116d0:	ee00 3a10 	vmov	s0, r3
 80116d4:	4770      	bx	lr
	...

080116d8 <_init>:
 80116d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116da:	bf00      	nop
 80116dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116de:	bc08      	pop	{r3}
 80116e0:	469e      	mov	lr, r3
 80116e2:	4770      	bx	lr

080116e4 <_fini>:
 80116e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116e6:	bf00      	nop
 80116e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116ea:	bc08      	pop	{r3}
 80116ec:	469e      	mov	lr, r3
 80116ee:	4770      	bx	lr
