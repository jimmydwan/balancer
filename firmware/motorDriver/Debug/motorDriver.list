
motorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010a34  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  08010c18  08010c18  00011c18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080111f0  080111f0  00013258  2**0
                  CONTENTS
  4 .ARM          00000008  080111f0  080111f0  000121f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080111f8  080111f8  00013258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080111f8  080111f8  000121f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080111fc  080111fc  000121fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000258  20000000  08011200  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000075c  20000258  08011458  00013258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009b4  08011458  000139b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013258  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023199  00000000  00000000  00013288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000538c  00000000  00000000  00036421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c20  00000000  00000000  0003b7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001573  00000000  00000000  0003d3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000267a0  00000000  00000000  0003e943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027d0c  00000000  00000000  000650e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3f1b  00000000  00000000  0008cdef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00170d0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088f8  00000000  00000000  00170d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00179648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000258 	.word	0x20000258
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010bfc 	.word	0x08010bfc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000025c 	.word	0x2000025c
 800021c:	08010bfc 	.word	0x08010bfc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09a      	sub	sp, #104	@ 0x68
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800104a:	2220      	movs	r2, #32
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00c fece 	bl	800ddf0 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	223c      	movs	r2, #60	@ 0x3c
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f00c fec8 	bl	800ddf0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001060:	4b4d      	ldr	r3, [pc, #308]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001062:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001068:	4b4b      	ldr	r3, [pc, #300]	@ (8001198 <MX_ADC1_Init+0x164>)
 800106a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800106e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001070:	4b49      	ldr	r3, [pc, #292]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b48      	ldr	r3, [pc, #288]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800107c:	4b46      	ldr	r3, [pc, #280]	@ (8001198 <MX_ADC1_Init+0x164>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001082:	4b45      	ldr	r3, [pc, #276]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001084:	2201      	movs	r2, #1
 8001086:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001088:	4b43      	ldr	r3, [pc, #268]	@ (8001198 <MX_ADC1_Init+0x164>)
 800108a:	2204      	movs	r2, #4
 800108c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800108e:	4b42      	ldr	r3, [pc, #264]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001090:	2200      	movs	r2, #0
 8001092:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001094:	4b40      	ldr	r3, [pc, #256]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001096:	2200      	movs	r2, #0
 8001098:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800109a:	4b3f      	ldr	r3, [pc, #252]	@ (8001198 <MX_ADC1_Init+0x164>)
 800109c:	2201      	movs	r2, #1
 800109e:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b4:	4b38      	ldr	r3, [pc, #224]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010bc:	4b36      	ldr	r3, [pc, #216]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010be:	2200      	movs	r2, #0
 80010c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c2:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ca:	4833      	ldr	r0, [pc, #204]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010cc:	f001 fc20 	bl	8002910 <HAL_ADC_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010d6:	f000 fb5e 	bl	8001796 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010da:	2300      	movs	r3, #0
 80010dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010e2:	4619      	mov	r1, r3
 80010e4:	482c      	ldr	r0, [pc, #176]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010e6:	f003 fd49 	bl	8004b7c <HAL_ADCEx_MultiModeConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80010f0:	f000 fb51 	bl	8001796 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010f4:	4b29      	ldr	r3, [pc, #164]	@ (800119c <MX_ADC1_Init+0x168>)
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f8:	2306      	movs	r3, #6
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010fc:	2300      	movs	r3, #0
 80010fe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001100:	237f      	movs	r3, #127	@ 0x7f
 8001102:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001104:	2304      	movs	r3, #4
 8001106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.Offset = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001110:	4619      	mov	r1, r3
 8001112:	4821      	ldr	r0, [pc, #132]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001114:	f001 ffb8 	bl	8003088 <HAL_ADC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800111e:	f000 fb3a 	bl	8001796 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8001122:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <MX_ADC1_Init+0x16c>)
 8001124:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001126:	2309      	movs	r3, #9
 8001128:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800112a:	2301      	movs	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800112e:	237f      	movs	r3, #127	@ 0x7f
 8001130:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001132:	2304      	movs	r3, #4
 8001134:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800113a:	2302      	movs	r3, #2
 800113c:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T8_CC4;
 8001150:	239c      	movs	r3, #156	@ 0x9c
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001164:	f003 f82a 	bl	80041bc <HAL_ADCEx_InjectedConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 800116e:	f000 fb12 	bl	8001796 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8001172:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <MX_ADC1_Init+0x168>)
 8001174:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001176:	f240 130f 	movw	r3, #271	@ 0x10f
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001182:	f003 f81b 	bl	80041bc <HAL_ADCEx_InjectedConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 800118c:	f000 fb03 	bl	8001796 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3768      	adds	r7, #104	@ 0x68
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000274 	.word	0x20000274
 800119c:	2e300800 	.word	0x2e300800
 80011a0:	14f00020 	.word	0x14f00020

080011a4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b090      	sub	sp, #64	@ 0x40
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	223c      	movs	r2, #60	@ 0x3c
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f00c fe1d 	bl	800ddf0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011b6:	4b38      	ldr	r3, [pc, #224]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011b8:	4a38      	ldr	r2, [pc, #224]	@ (800129c <MX_ADC2_Init+0xf8>)
 80011ba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80011bc:	4b36      	ldr	r3, [pc, #216]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011be:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011c2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011c4:	4b34      	ldr	r3, [pc, #208]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ca:	4b33      	ldr	r3, [pc, #204]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80011d0:	4b31      	ldr	r3, [pc, #196]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011d6:	4b30      	ldr	r3, [pc, #192]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011d8:	2201      	movs	r2, #1
 80011da:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011de:	2204      	movs	r2, #4
 80011e0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80011e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80011ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011f4:	4b28      	ldr	r3, [pc, #160]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011fc:	4b26      	ldr	r3, [pc, #152]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001204:	4b24      	ldr	r3, [pc, #144]	@ (8001298 <MX_ADC2_Init+0xf4>)
 8001206:	2200      	movs	r2, #0
 8001208:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800120a:	4b23      	ldr	r3, [pc, #140]	@ (8001298 <MX_ADC2_Init+0xf4>)
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001212:	4821      	ldr	r0, [pc, #132]	@ (8001298 <MX_ADC2_Init+0xf4>)
 8001214:	f001 fb7c 	bl	8002910 <HAL_ADC_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800121e:	f000 faba 	bl	8001796 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 8001222:	4b1f      	ldr	r3, [pc, #124]	@ (80012a0 <MX_ADC2_Init+0xfc>)
 8001224:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001226:	2309      	movs	r3, #9
 8001228:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800122a:	2301      	movs	r3, #1
 800122c:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800122e:	237f      	movs	r3, #127	@ 0x7f
 8001230:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001232:	2304      	movs	r3, #4
 8001234:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800123a:	2302      	movs	r3, #2
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T8_CC4;
 8001250:	239c      	movs	r3, #156	@ 0x9c
 8001252:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001254:	2380      	movs	r3, #128	@ 0x80
 8001256:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	4619      	mov	r1, r3
 8001262:	480d      	ldr	r0, [pc, #52]	@ (8001298 <MX_ADC2_Init+0xf4>)
 8001264:	f002 ffaa 	bl	80041bc <HAL_ADCEx_InjectedConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 800126e:	f000 fa92 	bl	8001796 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8001272:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <MX_ADC2_Init+0x100>)
 8001274:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001276:	f240 130f 	movw	r3, #271	@ 0x10f
 800127a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	4619      	mov	r1, r3
 8001280:	4805      	ldr	r0, [pc, #20]	@ (8001298 <MX_ADC2_Init+0xf4>)
 8001282:	f002 ff9b 	bl	80041bc <HAL_ADCEx_InjectedConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_ADC2_Init+0xec>
  {
    Error_Handler();
 800128c:	f000 fa83 	bl	8001796 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	3740      	adds	r7, #64	@ 0x40
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200002e0 	.word	0x200002e0
 800129c:	50000100 	.word	0x50000100
 80012a0:	3ef08000 	.word	0x3ef08000
 80012a4:	32601000 	.word	0x32601000

080012a8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b09c      	sub	sp, #112	@ 0x70
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c0:	f107 0318 	add.w	r3, r7, #24
 80012c4:	2244      	movs	r2, #68	@ 0x44
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f00c fd91 	bl	800ddf0 <memset>
  if(adcHandle->Instance==ADC1)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012d6:	d146      	bne.n	8001366 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012de:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80012e2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e4:	f107 0318 	add.w	r3, r7, #24
 80012e8:	4618      	mov	r0, r3
 80012ea:	f005 fa83 	bl	80067f4 <HAL_RCCEx_PeriphCLKConfig>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80012f4:	f000 fa4f 	bl	8001796 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012f8:	4b42      	ldr	r3, [pc, #264]	@ (8001404 <HAL_ADC_MspInit+0x15c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	4a41      	ldr	r2, [pc, #260]	@ (8001404 <HAL_ADC_MspInit+0x15c>)
 8001300:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001302:	4b40      	ldr	r3, [pc, #256]	@ (8001404 <HAL_ADC_MspInit+0x15c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d10b      	bne.n	8001322 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800130a:	4b3f      	ldr	r3, [pc, #252]	@ (8001408 <HAL_ADC_MspInit+0x160>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130e:	4a3e      	ldr	r2, [pc, #248]	@ (8001408 <HAL_ADC_MspInit+0x160>)
 8001310:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001314:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001316:	4b3c      	ldr	r3, [pc, #240]	@ (8001408 <HAL_ADC_MspInit+0x160>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001322:	4b39      	ldr	r3, [pc, #228]	@ (8001408 <HAL_ADC_MspInit+0x160>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001326:	4a38      	ldr	r2, [pc, #224]	@ (8001408 <HAL_ADC_MspInit+0x160>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800132e:	4b36      	ldr	r3, [pc, #216]	@ (8001408 <HAL_ADC_MspInit+0x160>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800133a:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800133e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001340:	2303      	movs	r3, #3
 8001342:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800134c:	4619      	mov	r1, r3
 800134e:	482f      	ldr	r0, [pc, #188]	@ (800140c <HAL_ADC_MspInit+0x164>)
 8001350:	f004 fad4 	bl	80058fc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001354:	2200      	movs	r2, #0
 8001356:	2100      	movs	r1, #0
 8001358:	2012      	movs	r0, #18
 800135a:	f003 fd8e 	bl	8004e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800135e:	2012      	movs	r0, #18
 8001360:	f003 fda5 	bl	8004eae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001364:	e04a      	b.n	80013fc <HAL_ADC_MspInit+0x154>
  else if(adcHandle->Instance==ADC2)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a29      	ldr	r2, [pc, #164]	@ (8001410 <HAL_ADC_MspInit+0x168>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d145      	bne.n	80013fc <HAL_ADC_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001370:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001374:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001376:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800137a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800137c:	f107 0318 	add.w	r3, r7, #24
 8001380:	4618      	mov	r0, r3
 8001382:	f005 fa37 	bl	80067f4 <HAL_RCCEx_PeriphCLKConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <HAL_ADC_MspInit+0xe8>
      Error_Handler();
 800138c:	f000 fa03 	bl	8001796 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001390:	4b1c      	ldr	r3, [pc, #112]	@ (8001404 <HAL_ADC_MspInit+0x15c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	3301      	adds	r3, #1
 8001396:	4a1b      	ldr	r2, [pc, #108]	@ (8001404 <HAL_ADC_MspInit+0x15c>)
 8001398:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800139a:	4b1a      	ldr	r3, [pc, #104]	@ (8001404 <HAL_ADC_MspInit+0x15c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d10b      	bne.n	80013ba <HAL_ADC_MspInit+0x112>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013a2:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <HAL_ADC_MspInit+0x160>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a6:	4a18      	ldr	r2, [pc, #96]	@ (8001408 <HAL_ADC_MspInit+0x160>)
 80013a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ae:	4b16      	ldr	r3, [pc, #88]	@ (8001408 <HAL_ADC_MspInit+0x160>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <HAL_ADC_MspInit+0x160>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013be:	4a12      	ldr	r2, [pc, #72]	@ (8001408 <HAL_ADC_MspInit+0x160>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c6:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <HAL_ADC_MspInit+0x160>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80013d2:	f248 0304 	movw	r3, #32772	@ 0x8004
 80013d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d8:	2303      	movs	r3, #3
 80013da:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80013e4:	4619      	mov	r1, r3
 80013e6:	4809      	ldr	r0, [pc, #36]	@ (800140c <HAL_ADC_MspInit+0x164>)
 80013e8:	f004 fa88 	bl	80058fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2100      	movs	r1, #0
 80013f0:	2012      	movs	r0, #18
 80013f2:	f003 fd42 	bl	8004e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80013f6:	2012      	movs	r0, #18
 80013f8:	f003 fd59 	bl	8004eae <HAL_NVIC_EnableIRQ>
}
 80013fc:	bf00      	nop
 80013fe:	3770      	adds	r7, #112	@ 0x70
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	2000034c 	.word	0x2000034c
 8001408:	40021000 	.word	0x40021000
 800140c:	48000400 	.word	0x48000400
 8001410:	50000100 	.word	0x50000100

08001414 <MX_DAC3_Init>:

DAC_HandleTypeDef hdac3;

/* DAC3 init function */
void MX_DAC3_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08c      	sub	sp, #48	@ 0x30
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800141a:	463b      	mov	r3, r7
 800141c:	2230      	movs	r2, #48	@ 0x30
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f00c fce5 	bl	800ddf0 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8001426:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <MX_DAC3_Init+0x6c>)
 8001428:	4a16      	ldr	r2, [pc, #88]	@ (8001484 <MX_DAC3_Init+0x70>)
 800142a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 800142c:	4814      	ldr	r0, [pc, #80]	@ (8001480 <MX_DAC3_Init+0x6c>)
 800142e:	f003 fd58 	bl	8004ee2 <HAL_DAC_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8001438:	f000 f9ad 	bl	8001796 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800143c:	2302      	movs	r3, #2
 800143e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001454:	2302      	movs	r3, #2
 8001456:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001458:	2302      	movs	r3, #2
 800145a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001460:	463b      	mov	r3, r7
 8001462:	2200      	movs	r2, #0
 8001464:	4619      	mov	r1, r3
 8001466:	4806      	ldr	r0, [pc, #24]	@ (8001480 <MX_DAC3_Init+0x6c>)
 8001468:	f003 fd5e 	bl	8004f28 <HAL_DAC_ConfigChannel>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8001472:	f000 f990 	bl	8001796 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	3730      	adds	r7, #48	@ 0x30
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000350 	.word	0x20000350
 8001484:	50001000 	.word	0x50001000

08001488 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC3)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a0a      	ldr	r2, [pc, #40]	@ (80014c0 <HAL_DAC_MspInit+0x38>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d10b      	bne.n	80014b2 <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* DAC3 clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 800149a:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <HAL_DAC_MspInit+0x3c>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	4a09      	ldr	r2, [pc, #36]	@ (80014c4 <HAL_DAC_MspInit+0x3c>)
 80014a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a6:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <HAL_DAC_MspInit+0x3c>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }
}
 80014b2:	bf00      	nop
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	50001000 	.word	0x50001000
 80014c4:	40021000 	.word	0x40021000

080014c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80014ce:	4b16      	ldr	r3, [pc, #88]	@ (8001528 <MX_DMA_Init+0x60>)
 80014d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014d2:	4a15      	ldr	r2, [pc, #84]	@ (8001528 <MX_DMA_Init+0x60>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80014da:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <MX_DMA_Init+0x60>)
 80014dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014e6:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <MX_DMA_Init+0x60>)
 80014e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001528 <MX_DMA_Init+0x60>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6493      	str	r3, [r2, #72]	@ 0x48
 80014f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <MX_DMA_Init+0x60>)
 80014f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2101      	movs	r1, #1
 8001502:	200b      	movs	r0, #11
 8001504:	f003 fcb9 	bl	8004e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001508:	200b      	movs	r0, #11
 800150a:	f003 fcd0 	bl	8004eae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 1, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2101      	movs	r1, #1
 8001512:	200c      	movs	r0, #12
 8001514:	f003 fcb1 	bl	8004e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001518:	200c      	movs	r0, #12
 800151a:	f003 fcc8 	bl	8004eae <HAL_NVIC_EnableIRQ>

}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000

0800152c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	@ 0x28
 8001530:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001542:	4b3f      	ldr	r3, [pc, #252]	@ (8001640 <MX_GPIO_Init+0x114>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001546:	4a3e      	ldr	r2, [pc, #248]	@ (8001640 <MX_GPIO_Init+0x114>)
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800154e:	4b3c      	ldr	r3, [pc, #240]	@ (8001640 <MX_GPIO_Init+0x114>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800155a:	4b39      	ldr	r3, [pc, #228]	@ (8001640 <MX_GPIO_Init+0x114>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155e:	4a38      	ldr	r2, [pc, #224]	@ (8001640 <MX_GPIO_Init+0x114>)
 8001560:	f043 0320 	orr.w	r3, r3, #32
 8001564:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001566:	4b36      	ldr	r3, [pc, #216]	@ (8001640 <MX_GPIO_Init+0x114>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156a:	f003 0320 	and.w	r3, r3, #32
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	4b33      	ldr	r3, [pc, #204]	@ (8001640 <MX_GPIO_Init+0x114>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001576:	4a32      	ldr	r2, [pc, #200]	@ (8001640 <MX_GPIO_Init+0x114>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157e:	4b30      	ldr	r3, [pc, #192]	@ (8001640 <MX_GPIO_Init+0x114>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158a:	4b2d      	ldr	r3, [pc, #180]	@ (8001640 <MX_GPIO_Init+0x114>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158e:	4a2c      	ldr	r2, [pc, #176]	@ (8001640 <MX_GPIO_Init+0x114>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001596:	4b2a      	ldr	r3, [pc, #168]	@ (8001640 <MX_GPIO_Init+0x114>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|TEST_Pin, GPIO_PIN_SET);
 80015a2:	2201      	movs	r2, #1
 80015a4:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 80015a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ac:	f004 fb28 	bl	8005c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80015b0:	2201      	movs	r2, #1
 80015b2:	2101      	movs	r1, #1
 80015b4:	4823      	ldr	r0, [pc, #140]	@ (8001644 <MX_GPIO_Init+0x118>)
 80015b6:	f004 fb23 	bl	8005c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS1_GPIO_Port, NSS1_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2108      	movs	r1, #8
 80015be:	4821      	ldr	r0, [pc, #132]	@ (8001644 <MX_GPIO_Init+0x118>)
 80015c0:	f004 fb1e 	bl	8005c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	481b      	ldr	r0, [pc, #108]	@ (8001648 <MX_GPIO_Init+0x11c>)
 80015da:	f004 f98f 	bl	80058fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80015de:	2310      	movs	r3, #16
 80015e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e2:	2301      	movs	r3, #1
 80015e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ea:	2303      	movs	r3, #3
 80015ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f8:	f004 f980 	bl	80058fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|NSS1_Pin;
 80015fc:	2309      	movs	r3, #9
 80015fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001600:	2301      	movs	r3, #1
 8001602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	480c      	ldr	r0, [pc, #48]	@ (8001644 <MX_GPIO_Init+0x118>)
 8001614:	f004 f972 	bl	80058fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8001618:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800161c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161e:	2301      	movs	r3, #1
 8001620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001626:	2302      	movs	r3, #2
 8001628:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001634:	f004 f962 	bl	80058fc <HAL_GPIO_Init>

}
 8001638:	bf00      	nop
 800163a:	3728      	adds	r7, #40	@ 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40021000 	.word	0x40021000
 8001644:	48000400 	.word	0x48000400
 8001648:	48000800 	.word	0x48000800

0800164c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001650:	f000 fe9b 	bl	800238a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001654:	f000 f856 	bl	8001704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001658:	f7ff ff68 	bl	800152c <MX_GPIO_Init>
  MX_DMA_Init();
 800165c:	f7ff ff34 	bl	80014c8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001660:	f000 fd60 	bl	8002124 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001664:	f7ff fce6 	bl	8001034 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001668:	f7ff fd9c 	bl	80011a4 <MX_ADC2_Init>
  MX_TIM1_Init();
 800166c:	f000 fb02 	bl	8001c74 <MX_TIM1_Init>
  MX_DAC3_Init();
 8001670:	f7ff fed0 	bl	8001414 <MX_DAC3_Init>
  MX_SPI1_Init();
 8001674:	f000 f896 	bl	80017a4 <MX_SPI1_Init>
  MX_TIM8_Init();
 8001678:	f000 fbd8 	bl	8001e2c <MX_TIM8_Init>
  MX_SPI3_Init();
 800167c:	f000 f8d0 	bl	8001820 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  appInit();
 8001680:	f00a fa3e 	bl	800bb00 <appInit>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 8001684:	2264      	movs	r2, #100	@ 0x64
 8001686:	491a      	ldr	r1, [pc, #104]	@ (80016f0 <main+0xa4>)
 8001688:	481a      	ldr	r0, [pc, #104]	@ (80016f4 <main+0xa8>)
 800168a:	f008 fe06 	bl	800a29a <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800168e:	217f      	movs	r1, #127	@ 0x7f
 8001690:	4819      	ldr	r0, [pc, #100]	@ (80016f8 <main+0xac>)
 8001692:	f002 fb73 	bl	8003d7c <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001696:	217f      	movs	r1, #127	@ 0x7f
 8001698:	4818      	ldr	r0, [pc, #96]	@ (80016fc <main+0xb0>)
 800169a:	f002 fb6f 	bl	8003d7c <HAL_ADCEx_Calibration_Start>
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_JEOC);
 800169e:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <main+0xac>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2220      	movs	r2, #32
 80016a4:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOC);
 80016a6:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <main+0xac>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2204      	movs	r2, #4
 80016ac:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_JEOC);
 80016ae:	4b13      	ldr	r3, [pc, #76]	@ (80016fc <main+0xb0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2220      	movs	r2, #32
 80016b4:	601a      	str	r2, [r3, #0]
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 80016b6:	4810      	ldr	r0, [pc, #64]	@ (80016f8 <main+0xac>)
 80016b8:	f002 fc72 	bl	8003fa0 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart(&hadc2);
 80016bc:	480f      	ldr	r0, [pc, #60]	@ (80016fc <main+0xb0>)
 80016be:	f002 fbbf 	bl	8003e40 <HAL_ADCEx_InjectedStart>
  HAL_TIM_Base_Start(&htim8);
 80016c2:	480f      	ldr	r0, [pc, #60]	@ (8001700 <main+0xb4>)
 80016c4:	f005 ff1e 	bl	8007504 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80016c8:	210c      	movs	r1, #12
 80016ca:	480d      	ldr	r0, [pc, #52]	@ (8001700 <main+0xb4>)
 80016cc:	f005 ffde 	bl	800768c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80016d0:	2100      	movs	r1, #0
 80016d2:	480b      	ldr	r0, [pc, #44]	@ (8001700 <main+0xb4>)
 80016d4:	f005 ffda 	bl	800768c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80016d8:	2104      	movs	r1, #4
 80016da:	4809      	ldr	r0, [pc, #36]	@ (8001700 <main+0xb4>)
 80016dc:	f005 ffd6 	bl	800768c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80016e0:	2108      	movs	r1, #8
 80016e2:	4807      	ldr	r0, [pc, #28]	@ (8001700 <main+0xb4>)
 80016e4:	f005 ffd2 	bl	800768c <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    userMain();
 80016e8:	f00a fcb8 	bl	800c05c <userMain>
 80016ec:	e7fc      	b.n	80016e8 <main+0x9c>
 80016ee:	bf00      	nop
 80016f0:	200007d0 	.word	0x200007d0
 80016f4:	200004c8 	.word	0x200004c8
 80016f8:	20000274 	.word	0x20000274
 80016fc:	200002e0 	.word	0x200002e0
 8001700:	2000047c 	.word	0x2000047c

08001704 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b094      	sub	sp, #80	@ 0x50
 8001708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170a:	f107 0318 	add.w	r3, r7, #24
 800170e:	2238      	movs	r2, #56	@ 0x38
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f00c fb6c 	bl	800ddf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001726:	2000      	movs	r0, #0
 8001728:	f004 fa82 	bl	8005c30 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800172c:	2301      	movs	r3, #1
 800172e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001730:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001734:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001736:	2302      	movs	r3, #2
 8001738:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800173a:	2303      	movs	r3, #3
 800173c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 800173e:	2303      	movs	r3, #3
 8001740:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001742:	2328      	movs	r3, #40	@ 0x28
 8001744:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001746:	2302      	movs	r3, #2
 8001748:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800174a:	2302      	movs	r3, #2
 800174c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800174e:	2302      	movs	r3, #2
 8001750:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001752:	f107 0318 	add.w	r3, r7, #24
 8001756:	4618      	mov	r0, r3
 8001758:	f004 fb1e 	bl	8005d98 <HAL_RCC_OscConfig>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001762:	f000 f818 	bl	8001796 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001766:	230f      	movs	r3, #15
 8001768:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176a:	2303      	movs	r3, #3
 800176c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	2104      	movs	r1, #4
 800177e:	4618      	mov	r0, r3
 8001780:	f004 fe1c 	bl	80063bc <HAL_RCC_ClockConfig>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800178a:	f000 f804 	bl	8001796 <Error_Handler>
  }
}
 800178e:	bf00      	nop
 8001790:	3750      	adds	r7, #80	@ 0x50
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800179a:	b672      	cpsid	i
}
 800179c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800179e:	bf00      	nop
 80017a0:	e7fd      	b.n	800179e <Error_Handler+0x8>
	...

080017a4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80017a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017aa:	4a1c      	ldr	r2, [pc, #112]	@ (800181c <MX_SPI1_Init+0x78>)
 80017ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017b6:	4b18      	ldr	r3, [pc, #96]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80017bc:	4b16      	ldr	r3, [pc, #88]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017be:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80017c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017c4:	4b14      	ldr	r3, [pc, #80]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80017ca:	4b13      	ldr	r3, [pc, #76]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017d0:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017da:	2218      	movs	r2, #24
 80017dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017de:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80017f0:	4b09      	ldr	r3, [pc, #36]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017f2:	2207      	movs	r2, #7
 80017f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017f6:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80017fc:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017fe:	2200      	movs	r2, #0
 8001800:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001802:	4805      	ldr	r0, [pc, #20]	@ (8001818 <MX_SPI1_Init+0x74>)
 8001804:	f005 f9e6 	bl	8006bd4 <HAL_SPI_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800180e:	f7ff ffc2 	bl	8001796 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000364 	.word	0x20000364
 800181c:	40013000 	.word	0x40013000

08001820 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001824:	4b1b      	ldr	r3, [pc, #108]	@ (8001894 <MX_SPI3_Init+0x74>)
 8001826:	4a1c      	ldr	r2, [pc, #112]	@ (8001898 <MX_SPI3_Init+0x78>)
 8001828:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800182a:	4b1a      	ldr	r3, [pc, #104]	@ (8001894 <MX_SPI3_Init+0x74>)
 800182c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001830:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001832:	4b18      	ldr	r3, [pc, #96]	@ (8001894 <MX_SPI3_Init+0x74>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001838:	4b16      	ldr	r3, [pc, #88]	@ (8001894 <MX_SPI3_Init+0x74>)
 800183a:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 800183e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001840:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <MX_SPI3_Init+0x74>)
 8001842:	2200      	movs	r2, #0
 8001844:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001846:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <MX_SPI3_Init+0x74>)
 8001848:	2201      	movs	r2, #1
 800184a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800184c:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <MX_SPI3_Init+0x74>)
 800184e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001852:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001854:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <MX_SPI3_Init+0x74>)
 8001856:	2210      	movs	r2, #16
 8001858:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800185a:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <MX_SPI3_Init+0x74>)
 800185c:	2200      	movs	r2, #0
 800185e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001860:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <MX_SPI3_Init+0x74>)
 8001862:	2200      	movs	r2, #0
 8001864:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001866:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <MX_SPI3_Init+0x74>)
 8001868:	2200      	movs	r2, #0
 800186a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800186c:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <MX_SPI3_Init+0x74>)
 800186e:	2207      	movs	r2, #7
 8001870:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001872:	4b08      	ldr	r3, [pc, #32]	@ (8001894 <MX_SPI3_Init+0x74>)
 8001874:	2200      	movs	r2, #0
 8001876:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001878:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <MX_SPI3_Init+0x74>)
 800187a:	2200      	movs	r2, #0
 800187c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800187e:	4805      	ldr	r0, [pc, #20]	@ (8001894 <MX_SPI3_Init+0x74>)
 8001880:	f005 f9a8 	bl	8006bd4 <HAL_SPI_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800188a:	f7ff ff84 	bl	8001796 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200003c8 	.word	0x200003c8
 8001898:	40003c00 	.word	0x40003c00

0800189c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	@ 0x30
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a3d      	ldr	r2, [pc, #244]	@ (80019b0 <HAL_SPI_MspInit+0x114>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d129      	bne.n	8001912 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018be:	4b3d      	ldr	r3, [pc, #244]	@ (80019b4 <HAL_SPI_MspInit+0x118>)
 80018c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018c2:	4a3c      	ldr	r2, [pc, #240]	@ (80019b4 <HAL_SPI_MspInit+0x118>)
 80018c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80018ca:	4b3a      	ldr	r3, [pc, #232]	@ (80019b4 <HAL_SPI_MspInit+0x118>)
 80018cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018d2:	61bb      	str	r3, [r7, #24]
 80018d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	4b37      	ldr	r3, [pc, #220]	@ (80019b4 <HAL_SPI_MspInit+0x118>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018da:	4a36      	ldr	r2, [pc, #216]	@ (80019b4 <HAL_SPI_MspInit+0x118>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018e2:	4b34      	ldr	r3, [pc, #208]	@ (80019b4 <HAL_SPI_MspInit+0x118>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80018ee:	23e0      	movs	r3, #224	@ 0xe0
 80018f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	2302      	movs	r3, #2
 80018f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018fe:	2305      	movs	r3, #5
 8001900:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001902:	f107 031c 	add.w	r3, r7, #28
 8001906:	4619      	mov	r1, r3
 8001908:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800190c:	f003 fff6 	bl	80058fc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001910:	e049      	b.n	80019a6 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a28      	ldr	r2, [pc, #160]	@ (80019b8 <HAL_SPI_MspInit+0x11c>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d144      	bne.n	80019a6 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800191c:	4b25      	ldr	r3, [pc, #148]	@ (80019b4 <HAL_SPI_MspInit+0x118>)
 800191e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001920:	4a24      	ldr	r2, [pc, #144]	@ (80019b4 <HAL_SPI_MspInit+0x118>)
 8001922:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001926:	6593      	str	r3, [r2, #88]	@ 0x58
 8001928:	4b22      	ldr	r3, [pc, #136]	@ (80019b4 <HAL_SPI_MspInit+0x118>)
 800192a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001934:	4b1f      	ldr	r3, [pc, #124]	@ (80019b4 <HAL_SPI_MspInit+0x118>)
 8001936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001938:	4a1e      	ldr	r2, [pc, #120]	@ (80019b4 <HAL_SPI_MspInit+0x118>)
 800193a:	f043 0304 	orr.w	r3, r3, #4
 800193e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001940:	4b1c      	ldr	r3, [pc, #112]	@ (80019b4 <HAL_SPI_MspInit+0x118>)
 8001942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194c:	4b19      	ldr	r3, [pc, #100]	@ (80019b4 <HAL_SPI_MspInit+0x118>)
 800194e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001950:	4a18      	ldr	r2, [pc, #96]	@ (80019b4 <HAL_SPI_MspInit+0x118>)
 8001952:	f043 0302 	orr.w	r3, r3, #2
 8001956:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001958:	4b16      	ldr	r3, [pc, #88]	@ (80019b4 <HAL_SPI_MspInit+0x118>)
 800195a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001964:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001976:	2306      	movs	r3, #6
 8001978:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197a:	f107 031c 	add.w	r3, r7, #28
 800197e:	4619      	mov	r1, r3
 8001980:	480e      	ldr	r0, [pc, #56]	@ (80019bc <HAL_SPI_MspInit+0x120>)
 8001982:	f003 ffbb 	bl	80058fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001986:	2320      	movs	r3, #32
 8001988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001996:	2306      	movs	r3, #6
 8001998:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199a:	f107 031c 	add.w	r3, r7, #28
 800199e:	4619      	mov	r1, r3
 80019a0:	4807      	ldr	r0, [pc, #28]	@ (80019c0 <HAL_SPI_MspInit+0x124>)
 80019a2:	f003 ffab 	bl	80058fc <HAL_GPIO_Init>
}
 80019a6:	bf00      	nop
 80019a8:	3730      	adds	r7, #48	@ 0x30
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40013000 	.word	0x40013000
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40003c00 	.word	0x40003c00
 80019bc:	48000800 	.word	0x48000800
 80019c0:	48000400 	.word	0x48000400

080019c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001a08 <HAL_MspInit+0x44>)
 80019cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001a08 <HAL_MspInit+0x44>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80019d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <HAL_MspInit+0x44>)
 80019d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e2:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <HAL_MspInit+0x44>)
 80019e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e6:	4a08      	ldr	r2, [pc, #32]	@ (8001a08 <HAL_MspInit+0x44>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80019ee:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <HAL_MspInit+0x44>)
 80019f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80019fa:	f004 f9bd 	bl	8005d78 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40021000 	.word	0x40021000

08001a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <NMI_Handler+0x4>

08001a14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <HardFault_Handler+0x4>

08001a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <MemManage_Handler+0x4>

08001a24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <BusFault_Handler+0x4>

08001a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <UsageFault_Handler+0x4>

08001a34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a62:	f000 fce5 	bl	8002430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001a70:	4802      	ldr	r0, [pc, #8]	@ (8001a7c <DMA1_Channel1_IRQHandler+0x10>)
 8001a72:	f003 fdf4 	bl	800565e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	2000055c 	.word	0x2000055c

08001a80 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001a84:	4802      	ldr	r0, [pc, #8]	@ (8001a90 <DMA1_Channel2_IRQHandler+0x10>)
 8001a86:	f003 fdea 	bl	800565e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200005bc 	.word	0x200005bc

08001a94 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a98:	4803      	ldr	r0, [pc, #12]	@ (8001aa8 <ADC1_2_IRQHandler+0x14>)
 8001a9a:	f001 f8bd 	bl	8002c18 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001a9e:	4803      	ldr	r0, [pc, #12]	@ (8001aac <ADC1_2_IRQHandler+0x18>)
 8001aa0:	f001 f8ba 	bl	8002c18 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000274 	.word	0x20000274
 8001aac:	200002e0 	.word	0x200002e0

08001ab0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ab4:	4802      	ldr	r0, [pc, #8]	@ (8001ac0 <USART3_IRQHandler+0x10>)
 8001ab6:	f007 f84d 	bl	8008b54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	200004c8 	.word	0x200004c8

08001ac4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return 1;
 8001ac8:	2301      	movs	r3, #1
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <_kill>:

int _kill(int pid, int sig)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ade:	f00c f9eb 	bl	800deb8 <__errno>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2216      	movs	r2, #22
 8001ae6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <_exit>:

void _exit (int status)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ffe7 	bl	8001ad4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b06:	bf00      	nop
 8001b08:	e7fd      	b.n	8001b06 <_exit+0x12>

08001b0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b086      	sub	sp, #24
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	60f8      	str	r0, [r7, #12]
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	e00a      	b.n	8001b32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b1c:	f3af 8000 	nop.w
 8001b20:	4601      	mov	r1, r0
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	60ba      	str	r2, [r7, #8]
 8001b28:	b2ca      	uxtb	r2, r1
 8001b2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	dbf0      	blt.n	8001b1c <_read+0x12>
  }

  return len;
 8001b3a:	687b      	ldr	r3, [r7, #4]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	e009      	b.n	8001b6a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	60ba      	str	r2, [r7, #8]
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	3301      	adds	r3, #1
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	dbf1      	blt.n	8001b56 <_write+0x12>
  }
  return len;
 8001b72:	687b      	ldr	r3, [r7, #4]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <_close>:

int _close(int file)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ba4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <_isatty>:

int _isatty(int file)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bbc:	2301      	movs	r3, #1
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b085      	sub	sp, #20
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	60f8      	str	r0, [r7, #12]
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bec:	4a14      	ldr	r2, [pc, #80]	@ (8001c40 <_sbrk+0x5c>)
 8001bee:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <_sbrk+0x60>)
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf8:	4b13      	ldr	r3, [pc, #76]	@ (8001c48 <_sbrk+0x64>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d102      	bne.n	8001c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c00:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <_sbrk+0x64>)
 8001c02:	4a12      	ldr	r2, [pc, #72]	@ (8001c4c <_sbrk+0x68>)
 8001c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c06:	4b10      	ldr	r3, [pc, #64]	@ (8001c48 <_sbrk+0x64>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d207      	bcs.n	8001c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c14:	f00c f950 	bl	800deb8 <__errno>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	220c      	movs	r2, #12
 8001c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c22:	e009      	b.n	8001c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c24:	4b08      	ldr	r3, [pc, #32]	@ (8001c48 <_sbrk+0x64>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c2a:	4b07      	ldr	r3, [pc, #28]	@ (8001c48 <_sbrk+0x64>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	4a05      	ldr	r2, [pc, #20]	@ (8001c48 <_sbrk+0x64>)
 8001c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c36:	68fb      	ldr	r3, [r7, #12]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20008000 	.word	0x20008000
 8001c44:	00000400 	.word	0x00000400
 8001c48:	2000042c 	.word	0x2000042c
 8001c4c:	200009b8 	.word	0x200009b8

08001c50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c54:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <SystemInit+0x20>)
 8001c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c5a:	4a05      	ldr	r2, [pc, #20]	@ (8001c70 <SystemInit+0x20>)
 8001c5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b09c      	sub	sp, #112	@ 0x70
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c88:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c94:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
 8001ca4:	615a      	str	r2, [r3, #20]
 8001ca6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	2234      	movs	r2, #52	@ 0x34
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f00c f89e 	bl	800ddf0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cb4:	4b5b      	ldr	r3, [pc, #364]	@ (8001e24 <MX_TIM1_Init+0x1b0>)
 8001cb6:	4a5c      	ldr	r2, [pc, #368]	@ (8001e28 <MX_TIM1_Init+0x1b4>)
 8001cb8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8001cba:	4b5a      	ldr	r3, [pc, #360]	@ (8001e24 <MX_TIM1_Init+0x1b0>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001cc0:	4b58      	ldr	r3, [pc, #352]	@ (8001e24 <MX_TIM1_Init+0x1b0>)
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 8001cc6:	4b57      	ldr	r3, [pc, #348]	@ (8001e24 <MX_TIM1_Init+0x1b0>)
 8001cc8:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001ccc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001cce:	4b55      	ldr	r3, [pc, #340]	@ (8001e24 <MX_TIM1_Init+0x1b0>)
 8001cd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cd4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001cd6:	4b53      	ldr	r3, [pc, #332]	@ (8001e24 <MX_TIM1_Init+0x1b0>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cdc:	4b51      	ldr	r3, [pc, #324]	@ (8001e24 <MX_TIM1_Init+0x1b0>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ce2:	4850      	ldr	r0, [pc, #320]	@ (8001e24 <MX_TIM1_Init+0x1b0>)
 8001ce4:	f005 fbb6 	bl	8007454 <HAL_TIM_Base_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001cee:	f7ff fd52 	bl	8001796 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cf2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cf6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cf8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4849      	ldr	r0, [pc, #292]	@ (8001e24 <MX_TIM1_Init+0x1b0>)
 8001d00:	f005 ff6e 	bl	8007be0 <HAL_TIM_ConfigClockSource>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001d0a:	f7ff fd44 	bl	8001796 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d0e:	4845      	ldr	r0, [pc, #276]	@ (8001e24 <MX_TIM1_Init+0x1b0>)
 8001d10:	f005 fc5a 	bl	80075c8 <HAL_TIM_PWM_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001d1a:	f7ff fd3c 	bl	8001796 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001d1e:	2370      	movs	r3, #112	@ 0x70
 8001d20:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d22:	2300      	movs	r3, #0
 8001d24:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d2a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d2e:	4619      	mov	r1, r3
 8001d30:	483c      	ldr	r0, [pc, #240]	@ (8001e24 <MX_TIM1_Init+0x1b0>)
 8001d32:	f006 fca3 	bl	800867c <HAL_TIMEx_MasterConfigSynchronization>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001d3c:	f7ff fd2b 	bl	8001796 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d40:	2360      	movs	r3, #96	@ 0x60
 8001d42:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d54:	2300      	movs	r3, #0
 8001d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d5c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d60:	2200      	movs	r2, #0
 8001d62:	4619      	mov	r1, r3
 8001d64:	482f      	ldr	r0, [pc, #188]	@ (8001e24 <MX_TIM1_Init+0x1b0>)
 8001d66:	f005 fe27 	bl	80079b8 <HAL_TIM_PWM_ConfigChannel>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001d70:	f7ff fd11 	bl	8001796 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d74:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d78:	2204      	movs	r2, #4
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4829      	ldr	r0, [pc, #164]	@ (8001e24 <MX_TIM1_Init+0x1b0>)
 8001d7e:	f005 fe1b 	bl	80079b8 <HAL_TIM_PWM_ConfigChannel>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001d88:	f7ff fd05 	bl	8001796 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d8c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d90:	2208      	movs	r2, #8
 8001d92:	4619      	mov	r1, r3
 8001d94:	4823      	ldr	r0, [pc, #140]	@ (8001e24 <MX_TIM1_Init+0x1b0>)
 8001d96:	f005 fe0f 	bl	80079b8 <HAL_TIM_PWM_ConfigChannel>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001da0:	f7ff fcf9 	bl	8001796 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001da4:	2370      	movs	r3, #112	@ 0x70
 8001da6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 7998;
 8001da8:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 8001dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001dae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001db2:	220c      	movs	r2, #12
 8001db4:	4619      	mov	r1, r3
 8001db6:	481b      	ldr	r0, [pc, #108]	@ (8001e24 <MX_TIM1_Init+0x1b0>)
 8001db8:	f005 fdfe 	bl	80079b8 <HAL_TIM_PWM_ConfigChannel>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8001dc2:	f7ff fce8 	bl	8001796 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001dd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dda:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ddc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001de0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 2;
 8001de2:	2302      	movs	r3, #2
 8001de4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001de6:	2300      	movs	r3, #0
 8001de8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001dee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001df2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	4619      	mov	r1, r3
 8001e04:	4807      	ldr	r0, [pc, #28]	@ (8001e24 <MX_TIM1_Init+0x1b0>)
 8001e06:	f006 fcbb 	bl	8008780 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM1_Init+0x1a0>
  {
    Error_Handler();
 8001e10:	f7ff fcc1 	bl	8001796 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e14:	4803      	ldr	r0, [pc, #12]	@ (8001e24 <MX_TIM1_Init+0x1b0>)
 8001e16:	f000 f917 	bl	8002048 <HAL_TIM_MspPostInit>

}
 8001e1a:	bf00      	nop
 8001e1c:	3770      	adds	r7, #112	@ 0x70
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000430 	.word	0x20000430
 8001e28:	40012c00 	.word	0x40012c00

08001e2c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b09c      	sub	sp, #112	@ 0x70
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e32:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e40:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e4c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
 8001e5c:	615a      	str	r2, [r3, #20]
 8001e5e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e60:	1d3b      	adds	r3, r7, #4
 8001e62:	2234      	movs	r2, #52	@ 0x34
 8001e64:	2100      	movs	r1, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f00b ffc2 	bl	800ddf0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e6c:	4b5a      	ldr	r3, [pc, #360]	@ (8001fd8 <MX_TIM8_Init+0x1ac>)
 8001e6e:	4a5b      	ldr	r2, [pc, #364]	@ (8001fdc <MX_TIM8_Init+0x1b0>)
 8001e70:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001e72:	4b59      	ldr	r3, [pc, #356]	@ (8001fd8 <MX_TIM8_Init+0x1ac>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001e78:	4b57      	ldr	r3, [pc, #348]	@ (8001fd8 <MX_TIM8_Init+0x1ac>)
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7999;
 8001e7e:	4b56      	ldr	r3, [pc, #344]	@ (8001fd8 <MX_TIM8_Init+0x1ac>)
 8001e80:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001e84:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001e86:	4b54      	ldr	r3, [pc, #336]	@ (8001fd8 <MX_TIM8_Init+0x1ac>)
 8001e88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e8c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 1;
 8001e8e:	4b52      	ldr	r3, [pc, #328]	@ (8001fd8 <MX_TIM8_Init+0x1ac>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e94:	4b50      	ldr	r3, [pc, #320]	@ (8001fd8 <MX_TIM8_Init+0x1ac>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001e9a:	484f      	ldr	r0, [pc, #316]	@ (8001fd8 <MX_TIM8_Init+0x1ac>)
 8001e9c:	f005 fada 	bl	8007454 <HAL_TIM_Base_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8001ea6:	f7ff fc76 	bl	8001796 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eae:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001eb0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4848      	ldr	r0, [pc, #288]	@ (8001fd8 <MX_TIM8_Init+0x1ac>)
 8001eb8:	f005 fe92 	bl	8007be0 <HAL_TIM_ConfigClockSource>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001ec2:	f7ff fc68 	bl	8001796 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001ec6:	4844      	ldr	r0, [pc, #272]	@ (8001fd8 <MX_TIM8_Init+0x1ac>)
 8001ec8:	f005 fb7e 	bl	80075c8 <HAL_TIM_PWM_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001ed2:	f7ff fc60 	bl	8001796 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001ed6:	2370      	movs	r3, #112	@ 0x70
 8001ed8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001eda:	2300      	movs	r3, #0
 8001edc:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ee2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	483b      	ldr	r0, [pc, #236]	@ (8001fd8 <MX_TIM8_Init+0x1ac>)
 8001eea:	f006 fbc7 	bl	800867c <HAL_TIMEx_MasterConfigSynchronization>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8001ef4:	f7ff fc4f 	bl	8001796 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ef8:	2360      	movs	r3, #96	@ 0x60
 8001efa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f00:	2300      	movs	r3, #0
 8001f02:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f04:	2300      	movs	r3, #0
 8001f06:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f10:	2300      	movs	r3, #0
 8001f12:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f14:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f18:	2200      	movs	r2, #0
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	482e      	ldr	r0, [pc, #184]	@ (8001fd8 <MX_TIM8_Init+0x1ac>)
 8001f1e:	f005 fd4b 	bl	80079b8 <HAL_TIM_PWM_ConfigChannel>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001f28:	f7ff fc35 	bl	8001796 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f2c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f30:	2204      	movs	r2, #4
 8001f32:	4619      	mov	r1, r3
 8001f34:	4828      	ldr	r0, [pc, #160]	@ (8001fd8 <MX_TIM8_Init+0x1ac>)
 8001f36:	f005 fd3f 	bl	80079b8 <HAL_TIM_PWM_ConfigChannel>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8001f40:	f7ff fc29 	bl	8001796 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f44:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f48:	2208      	movs	r2, #8
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4822      	ldr	r0, [pc, #136]	@ (8001fd8 <MX_TIM8_Init+0x1ac>)
 8001f4e:	f005 fd33 	bl	80079b8 <HAL_TIM_PWM_ConfigChannel>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001f58:	f7ff fc1d 	bl	8001796 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001f5c:	2370      	movs	r3, #112	@ 0x70
 8001f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 7998;
 8001f60:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 8001f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f66:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	481a      	ldr	r0, [pc, #104]	@ (8001fd8 <MX_TIM8_Init+0x1ac>)
 8001f70:	f005 fd22 	bl	80079b8 <HAL_TIM_PWM_ConfigChannel>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_TIM8_Init+0x152>
  {
    Error_Handler();
 8001f7a:	f7ff fc0c 	bl	8001796 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f96:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001fa4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4807      	ldr	r0, [pc, #28]	@ (8001fd8 <MX_TIM8_Init+0x1ac>)
 8001fbc:	f006 fbe0 	bl	8008780 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_TIM8_Init+0x19e>
  {
    Error_Handler();
 8001fc6:	f7ff fbe6 	bl	8001796 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001fca:	4803      	ldr	r0, [pc, #12]	@ (8001fd8 <MX_TIM8_Init+0x1ac>)
 8001fcc:	f000 f83c 	bl	8002048 <HAL_TIM_MspPostInit>

}
 8001fd0:	bf00      	nop
 8001fd2:	3770      	adds	r7, #112	@ 0x70
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	2000047c 	.word	0x2000047c
 8001fdc:	40013400 	.word	0x40013400

08001fe0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a13      	ldr	r2, [pc, #76]	@ (800203c <HAL_TIM_Base_MspInit+0x5c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d10c      	bne.n	800200c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ff2:	4b13      	ldr	r3, [pc, #76]	@ (8002040 <HAL_TIM_Base_MspInit+0x60>)
 8001ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff6:	4a12      	ldr	r2, [pc, #72]	@ (8002040 <HAL_TIM_Base_MspInit+0x60>)
 8001ff8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ffc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ffe:	4b10      	ldr	r3, [pc, #64]	@ (8002040 <HAL_TIM_Base_MspInit+0x60>)
 8002000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002002:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800200a:	e010      	b.n	800202e <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM8)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a0c      	ldr	r2, [pc, #48]	@ (8002044 <HAL_TIM_Base_MspInit+0x64>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d10b      	bne.n	800202e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002016:	4b0a      	ldr	r3, [pc, #40]	@ (8002040 <HAL_TIM_Base_MspInit+0x60>)
 8002018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800201a:	4a09      	ldr	r2, [pc, #36]	@ (8002040 <HAL_TIM_Base_MspInit+0x60>)
 800201c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002020:	6613      	str	r3, [r2, #96]	@ 0x60
 8002022:	4b07      	ldr	r3, [pc, #28]	@ (8002040 <HAL_TIM_Base_MspInit+0x60>)
 8002024:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002026:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40012c00 	.word	0x40012c00
 8002040:	40021000 	.word	0x40021000
 8002044:	40013400 	.word	0x40013400

08002048 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	@ 0x28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a2b      	ldr	r2, [pc, #172]	@ (8002114 <HAL_TIM_MspPostInit+0xcc>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d11e      	bne.n	80020a8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206a:	4b2b      	ldr	r3, [pc, #172]	@ (8002118 <HAL_TIM_MspPostInit+0xd0>)
 800206c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206e:	4a2a      	ldr	r2, [pc, #168]	@ (8002118 <HAL_TIM_MspPostInit+0xd0>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002076:	4b28      	ldr	r3, [pc, #160]	@ (8002118 <HAL_TIM_MspPostInit+0xd0>)
 8002078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002082:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002088:	2302      	movs	r3, #2
 800208a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002090:	2300      	movs	r3, #0
 8002092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002094:	2306      	movs	r3, #6
 8002096:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	4619      	mov	r1, r3
 800209e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020a2:	f003 fc2b 	bl	80058fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80020a6:	e031      	b.n	800210c <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM8)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a1b      	ldr	r2, [pc, #108]	@ (800211c <HAL_TIM_MspPostInit+0xd4>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d12c      	bne.n	800210c <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b2:	4b19      	ldr	r3, [pc, #100]	@ (8002118 <HAL_TIM_MspPostInit+0xd0>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b6:	4a18      	ldr	r2, [pc, #96]	@ (8002118 <HAL_TIM_MspPostInit+0xd0>)
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020be:	4b16      	ldr	r3, [pc, #88]	@ (8002118 <HAL_TIM_MspPostInit+0xd0>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020ca:	2340      	movs	r3, #64	@ 0x40
 80020cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d6:	2300      	movs	r3, #0
 80020d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 80020da:	2305      	movs	r3, #5
 80020dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020de:	f107 0314 	add.w	r3, r7, #20
 80020e2:	4619      	mov	r1, r3
 80020e4:	480e      	ldr	r0, [pc, #56]	@ (8002120 <HAL_TIM_MspPostInit+0xd8>)
 80020e6:	f003 fc09 	bl	80058fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80020ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f0:	2302      	movs	r3, #2
 80020f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f8:	2300      	movs	r3, #0
 80020fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80020fc:	230a      	movs	r3, #10
 80020fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	4619      	mov	r1, r3
 8002106:	4806      	ldr	r0, [pc, #24]	@ (8002120 <HAL_TIM_MspPostInit+0xd8>)
 8002108:	f003 fbf8 	bl	80058fc <HAL_GPIO_Init>
}
 800210c:	bf00      	nop
 800210e:	3728      	adds	r7, #40	@ 0x28
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40012c00 	.word	0x40012c00
 8002118:	40021000 	.word	0x40021000
 800211c:	40013400 	.word	0x40013400
 8002120:	48000400 	.word	0x48000400

08002124 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002128:	4b22      	ldr	r3, [pc, #136]	@ (80021b4 <MX_USART3_UART_Init+0x90>)
 800212a:	4a23      	ldr	r2, [pc, #140]	@ (80021b8 <MX_USART3_UART_Init+0x94>)
 800212c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800212e:	4b21      	ldr	r3, [pc, #132]	@ (80021b4 <MX_USART3_UART_Init+0x90>)
 8002130:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002134:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002136:	4b1f      	ldr	r3, [pc, #124]	@ (80021b4 <MX_USART3_UART_Init+0x90>)
 8002138:	2200      	movs	r2, #0
 800213a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800213c:	4b1d      	ldr	r3, [pc, #116]	@ (80021b4 <MX_USART3_UART_Init+0x90>)
 800213e:	2200      	movs	r2, #0
 8002140:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002142:	4b1c      	ldr	r3, [pc, #112]	@ (80021b4 <MX_USART3_UART_Init+0x90>)
 8002144:	2200      	movs	r2, #0
 8002146:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002148:	4b1a      	ldr	r3, [pc, #104]	@ (80021b4 <MX_USART3_UART_Init+0x90>)
 800214a:	220c      	movs	r2, #12
 800214c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800214e:	4b19      	ldr	r3, [pc, #100]	@ (80021b4 <MX_USART3_UART_Init+0x90>)
 8002150:	2200      	movs	r2, #0
 8002152:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002154:	4b17      	ldr	r3, [pc, #92]	@ (80021b4 <MX_USART3_UART_Init+0x90>)
 8002156:	2200      	movs	r2, #0
 8002158:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800215a:	4b16      	ldr	r3, [pc, #88]	@ (80021b4 <MX_USART3_UART_Init+0x90>)
 800215c:	2200      	movs	r2, #0
 800215e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002160:	4b14      	ldr	r3, [pc, #80]	@ (80021b4 <MX_USART3_UART_Init+0x90>)
 8002162:	2200      	movs	r2, #0
 8002164:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002166:	4b13      	ldr	r3, [pc, #76]	@ (80021b4 <MX_USART3_UART_Init+0x90>)
 8002168:	2200      	movs	r2, #0
 800216a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800216c:	4811      	ldr	r0, [pc, #68]	@ (80021b4 <MX_USART3_UART_Init+0x90>)
 800216e:	f006 fb93 	bl	8008898 <HAL_UART_Init>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002178:	f7ff fb0d 	bl	8001796 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800217c:	2100      	movs	r1, #0
 800217e:	480d      	ldr	r0, [pc, #52]	@ (80021b4 <MX_USART3_UART_Init+0x90>)
 8002180:	f008 f80f 	bl	800a1a2 <HAL_UARTEx_SetTxFifoThreshold>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800218a:	f7ff fb04 	bl	8001796 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800218e:	2100      	movs	r1, #0
 8002190:	4808      	ldr	r0, [pc, #32]	@ (80021b4 <MX_USART3_UART_Init+0x90>)
 8002192:	f008 f844 	bl	800a21e <HAL_UARTEx_SetRxFifoThreshold>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800219c:	f7ff fafb 	bl	8001796 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80021a0:	4804      	ldr	r0, [pc, #16]	@ (80021b4 <MX_USART3_UART_Init+0x90>)
 80021a2:	f007 ffc5 	bl	800a130 <HAL_UARTEx_DisableFifoMode>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80021ac:	f7ff faf3 	bl	8001796 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	200004c8 	.word	0x200004c8
 80021b8:	40004800 	.word	0x40004800

080021bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b09a      	sub	sp, #104	@ 0x68
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021d4:	f107 0310 	add.w	r3, r7, #16
 80021d8:	2244      	movs	r2, #68	@ 0x44
 80021da:	2100      	movs	r1, #0
 80021dc:	4618      	mov	r0, r3
 80021de:	f00b fe07 	bl	800ddf0 <memset>
  if(uartHandle->Instance==USART3)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a4d      	ldr	r2, [pc, #308]	@ (800231c <HAL_UART_MspInit+0x160>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	f040 8092 	bne.w	8002312 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80021ee:	2304      	movs	r3, #4
 80021f0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021f6:	f107 0310 	add.w	r3, r7, #16
 80021fa:	4618      	mov	r0, r3
 80021fc:	f004 fafa 	bl	80067f4 <HAL_RCCEx_PeriphCLKConfig>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002206:	f7ff fac6 	bl	8001796 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800220a:	4b45      	ldr	r3, [pc, #276]	@ (8002320 <HAL_UART_MspInit+0x164>)
 800220c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220e:	4a44      	ldr	r2, [pc, #272]	@ (8002320 <HAL_UART_MspInit+0x164>)
 8002210:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002214:	6593      	str	r3, [r2, #88]	@ 0x58
 8002216:	4b42      	ldr	r3, [pc, #264]	@ (8002320 <HAL_UART_MspInit+0x164>)
 8002218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002222:	4b3f      	ldr	r3, [pc, #252]	@ (8002320 <HAL_UART_MspInit+0x164>)
 8002224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002226:	4a3e      	ldr	r2, [pc, #248]	@ (8002320 <HAL_UART_MspInit+0x164>)
 8002228:	f043 0302 	orr.w	r3, r3, #2
 800222c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800222e:	4b3c      	ldr	r3, [pc, #240]	@ (8002320 <HAL_UART_MspInit+0x164>)
 8002230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	60bb      	str	r3, [r7, #8]
 8002238:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800223a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800223e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800224c:	2307      	movs	r3, #7
 800224e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002250:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002254:	4619      	mov	r1, r3
 8002256:	4833      	ldr	r0, [pc, #204]	@ (8002324 <HAL_UART_MspInit+0x168>)
 8002258:	f003 fb50 	bl	80058fc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel1;
 800225c:	4b32      	ldr	r3, [pc, #200]	@ (8002328 <HAL_UART_MspInit+0x16c>)
 800225e:	4a33      	ldr	r2, [pc, #204]	@ (800232c <HAL_UART_MspInit+0x170>)
 8002260:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002262:	4b31      	ldr	r3, [pc, #196]	@ (8002328 <HAL_UART_MspInit+0x16c>)
 8002264:	221d      	movs	r2, #29
 8002266:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002268:	4b2f      	ldr	r3, [pc, #188]	@ (8002328 <HAL_UART_MspInit+0x16c>)
 800226a:	2210      	movs	r2, #16
 800226c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800226e:	4b2e      	ldr	r3, [pc, #184]	@ (8002328 <HAL_UART_MspInit+0x16c>)
 8002270:	2200      	movs	r2, #0
 8002272:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002274:	4b2c      	ldr	r3, [pc, #176]	@ (8002328 <HAL_UART_MspInit+0x16c>)
 8002276:	2280      	movs	r2, #128	@ 0x80
 8002278:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800227a:	4b2b      	ldr	r3, [pc, #172]	@ (8002328 <HAL_UART_MspInit+0x16c>)
 800227c:	2200      	movs	r2, #0
 800227e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002280:	4b29      	ldr	r3, [pc, #164]	@ (8002328 <HAL_UART_MspInit+0x16c>)
 8002282:	2200      	movs	r2, #0
 8002284:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002286:	4b28      	ldr	r3, [pc, #160]	@ (8002328 <HAL_UART_MspInit+0x16c>)
 8002288:	2200      	movs	r2, #0
 800228a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800228c:	4b26      	ldr	r3, [pc, #152]	@ (8002328 <HAL_UART_MspInit+0x16c>)
 800228e:	2200      	movs	r2, #0
 8002290:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002292:	4825      	ldr	r0, [pc, #148]	@ (8002328 <HAL_UART_MspInit+0x16c>)
 8002294:	f003 f800 	bl	8005298 <HAL_DMA_Init>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800229e:	f7ff fa7a 	bl	8001796 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a20      	ldr	r2, [pc, #128]	@ (8002328 <HAL_UART_MspInit+0x16c>)
 80022a6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80022a8:	4a1f      	ldr	r2, [pc, #124]	@ (8002328 <HAL_UART_MspInit+0x16c>)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel2;
 80022ae:	4b20      	ldr	r3, [pc, #128]	@ (8002330 <HAL_UART_MspInit+0x174>)
 80022b0:	4a20      	ldr	r2, [pc, #128]	@ (8002334 <HAL_UART_MspInit+0x178>)
 80022b2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80022b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002330 <HAL_UART_MspInit+0x174>)
 80022b6:	221c      	movs	r2, #28
 80022b8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002330 <HAL_UART_MspInit+0x174>)
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002330 <HAL_UART_MspInit+0x174>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002330 <HAL_UART_MspInit+0x174>)
 80022c8:	2280      	movs	r2, #128	@ 0x80
 80022ca:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022cc:	4b18      	ldr	r3, [pc, #96]	@ (8002330 <HAL_UART_MspInit+0x174>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022d2:	4b17      	ldr	r3, [pc, #92]	@ (8002330 <HAL_UART_MspInit+0x174>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80022d8:	4b15      	ldr	r3, [pc, #84]	@ (8002330 <HAL_UART_MspInit+0x174>)
 80022da:	2200      	movs	r2, #0
 80022dc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022de:	4b14      	ldr	r3, [pc, #80]	@ (8002330 <HAL_UART_MspInit+0x174>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80022e4:	4812      	ldr	r0, [pc, #72]	@ (8002330 <HAL_UART_MspInit+0x174>)
 80022e6:	f002 ffd7 	bl	8005298 <HAL_DMA_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 80022f0:	f7ff fa51 	bl	8001796 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002330 <HAL_UART_MspInit+0x174>)
 80022f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80022fc:	4a0c      	ldr	r2, [pc, #48]	@ (8002330 <HAL_UART_MspInit+0x174>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8002302:	2200      	movs	r2, #0
 8002304:	2101      	movs	r1, #1
 8002306:	2027      	movs	r0, #39	@ 0x27
 8002308:	f002 fdb7 	bl	8004e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800230c:	2027      	movs	r0, #39	@ 0x27
 800230e:	f002 fdce 	bl	8004eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002312:	bf00      	nop
 8002314:	3768      	adds	r7, #104	@ 0x68
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40004800 	.word	0x40004800
 8002320:	40021000 	.word	0x40021000
 8002324:	48000400 	.word	0x48000400
 8002328:	2000055c 	.word	0x2000055c
 800232c:	40020008 	.word	0x40020008
 8002330:	200005bc 	.word	0x200005bc
 8002334:	4002001c 	.word	0x4002001c

08002338 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002338:	480d      	ldr	r0, [pc, #52]	@ (8002370 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800233a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800233c:	f7ff fc88 	bl	8001c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002340:	480c      	ldr	r0, [pc, #48]	@ (8002374 <LoopForever+0x6>)
  ldr r1, =_edata
 8002342:	490d      	ldr	r1, [pc, #52]	@ (8002378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002344:	4a0d      	ldr	r2, [pc, #52]	@ (800237c <LoopForever+0xe>)
  movs r3, #0
 8002346:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002348:	e002      	b.n	8002350 <LoopCopyDataInit>

0800234a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800234a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800234c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800234e:	3304      	adds	r3, #4

08002350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002354:	d3f9      	bcc.n	800234a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002356:	4a0a      	ldr	r2, [pc, #40]	@ (8002380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002358:	4c0a      	ldr	r4, [pc, #40]	@ (8002384 <LoopForever+0x16>)
  movs r3, #0
 800235a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800235c:	e001      	b.n	8002362 <LoopFillZerobss>

0800235e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800235e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002360:	3204      	adds	r2, #4

08002362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002364:	d3fb      	bcc.n	800235e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002366:	f00b fdad 	bl	800dec4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800236a:	f7ff f96f 	bl	800164c <main>

0800236e <LoopForever>:

LoopForever:
    b LoopForever
 800236e:	e7fe      	b.n	800236e <LoopForever>
  ldr   r0, =_estack
 8002370:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002378:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 800237c:	08011200 	.word	0x08011200
  ldr r2, =_sbss
 8002380:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8002384:	200009b4 	.word	0x200009b4

08002388 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002388:	e7fe      	b.n	8002388 <COMP1_2_3_IRQHandler>

0800238a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002394:	2003      	movs	r0, #3
 8002396:	f002 fd65 	bl	8004e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800239a:	200f      	movs	r0, #15
 800239c:	f000 f80e 	bl	80023bc <HAL_InitTick>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d002      	beq.n	80023ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	71fb      	strb	r3, [r7, #7]
 80023aa:	e001      	b.n	80023b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023ac:	f7ff fb0a 	bl	80019c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023b0:	79fb      	ldrb	r3, [r7, #7]

}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80023c8:	4b16      	ldr	r3, [pc, #88]	@ (8002424 <HAL_InitTick+0x68>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d022      	beq.n	8002416 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80023d0:	4b15      	ldr	r3, [pc, #84]	@ (8002428 <HAL_InitTick+0x6c>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	4b13      	ldr	r3, [pc, #76]	@ (8002424 <HAL_InitTick+0x68>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80023dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80023e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e4:	4618      	mov	r0, r3
 80023e6:	f002 fd70 	bl	8004eca <HAL_SYSTICK_Config>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10f      	bne.n	8002410 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b0f      	cmp	r3, #15
 80023f4:	d809      	bhi.n	800240a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f6:	2200      	movs	r2, #0
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	f04f 30ff 	mov.w	r0, #4294967295
 80023fe:	f002 fd3c 	bl	8004e7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002402:	4a0a      	ldr	r2, [pc, #40]	@ (800242c <HAL_InitTick+0x70>)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	e007      	b.n	800241a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	73fb      	strb	r3, [r7, #15]
 800240e:	e004      	b.n	800241a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
 8002414:	e001      	b.n	800241a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800241a:	7bfb      	ldrb	r3, [r7, #15]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20000008 	.word	0x20000008
 8002428:	20000000 	.word	0x20000000
 800242c:	20000004 	.word	0x20000004

08002430 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002434:	4b05      	ldr	r3, [pc, #20]	@ (800244c <HAL_IncTick+0x1c>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	4b05      	ldr	r3, [pc, #20]	@ (8002450 <HAL_IncTick+0x20>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4413      	add	r3, r2
 800243e:	4a03      	ldr	r2, [pc, #12]	@ (800244c <HAL_IncTick+0x1c>)
 8002440:	6013      	str	r3, [r2, #0]
}
 8002442:	bf00      	nop
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	2000061c 	.word	0x2000061c
 8002450:	20000008 	.word	0x20000008

08002454 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return uwTick;
 8002458:	4b03      	ldr	r3, [pc, #12]	@ (8002468 <HAL_GetTick+0x14>)
 800245a:	681b      	ldr	r3, [r3, #0]
}
 800245c:	4618      	mov	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	2000061c 	.word	0x2000061c

0800246c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	609a      	str	r2, [r3, #8]
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	609a      	str	r2, [r3, #8]
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	3360      	adds	r3, #96	@ 0x60
 80024e6:	461a      	mov	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b08      	ldr	r3, [pc, #32]	@ (8002518 <LL_ADC_SetOffset+0x44>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	4313      	orrs	r3, r2
 8002504:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800250c:	bf00      	nop
 800250e:	371c      	adds	r7, #28
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	03fff000 	.word	0x03fff000

0800251c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3360      	adds	r3, #96	@ 0x60
 800252a:	461a      	mov	r2, r3
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800253c:	4618      	mov	r0, r3
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	3360      	adds	r3, #96	@ 0x60
 8002558:	461a      	mov	r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	431a      	orrs	r2, r3
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002572:	bf00      	nop
 8002574:	371c      	adds	r7, #28
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800257e:	b480      	push	{r7}
 8002580:	b087      	sub	sp, #28
 8002582:	af00      	add	r7, sp, #0
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	3360      	adds	r3, #96	@ 0x60
 800258e:	461a      	mov	r2, r3
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80025a8:	bf00      	nop
 80025aa:	371c      	adds	r7, #28
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	3360      	adds	r3, #96	@ 0x60
 80025c4:	461a      	mov	r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	431a      	orrs	r2, r3
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80025de:	bf00      	nop
 80025e0:	371c      	adds	r7, #28
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	615a      	str	r2, [r3, #20]
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002636:	b480      	push	{r7}
 8002638:	b087      	sub	sp, #28
 800263a:	af00      	add	r7, sp, #0
 800263c:	60f8      	str	r0, [r7, #12]
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	3330      	adds	r3, #48	@ 0x30
 8002646:	461a      	mov	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	0a1b      	lsrs	r3, r3, #8
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	4413      	add	r3, r2
 8002654:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	211f      	movs	r1, #31
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	43db      	mvns	r3, r3
 8002668:	401a      	ands	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	0e9b      	lsrs	r3, r3, #26
 800266e:	f003 011f 	and.w	r1, r3, #31
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	f003 031f 	and.w	r3, r3, #31
 8002678:	fa01 f303 	lsl.w	r3, r1, r3
 800267c:	431a      	orrs	r2, r3
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002682:	bf00      	nop
 8002684:	371c      	adds	r7, #28
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3314      	adds	r3, #20
 80026c4:	461a      	mov	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	0e5b      	lsrs	r3, r3, #25
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	4413      	add	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	0d1b      	lsrs	r3, r3, #20
 80026dc:	f003 031f 	and.w	r3, r3, #31
 80026e0:	2107      	movs	r1, #7
 80026e2:	fa01 f303 	lsl.w	r3, r1, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	401a      	ands	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	0d1b      	lsrs	r3, r3, #20
 80026ee:	f003 031f 	and.w	r3, r3, #31
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	fa01 f303 	lsl.w	r3, r1, r3
 80026f8:	431a      	orrs	r2, r3
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026fe:	bf00      	nop
 8002700:	371c      	adds	r7, #28
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
	...

0800270c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002724:	43db      	mvns	r3, r3
 8002726:	401a      	ands	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f003 0318 	and.w	r3, r3, #24
 800272e:	4908      	ldr	r1, [pc, #32]	@ (8002750 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002730:	40d9      	lsrs	r1, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	400b      	ands	r3, r1
 8002736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273a:	431a      	orrs	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002742:	bf00      	nop
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	0007ffff 	.word	0x0007ffff

08002754 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 031f 	and.w	r3, r3, #31
}
 8002764:	4618      	mov	r0, r3
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800279c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6093      	str	r3, [r2, #8]
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027c4:	d101      	bne.n	80027ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80027e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002810:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002814:	d101      	bne.n	800281a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002838:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800283c:	f043 0201 	orr.w	r2, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002860:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002864:	f043 0202 	orr.w	r2, r3, #2
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b01      	cmp	r3, #1
 800288a:	d101      	bne.n	8002890 <LL_ADC_IsEnabled+0x18>
 800288c:	2301      	movs	r3, #1
 800288e:	e000      	b.n	8002892 <LL_ADC_IsEnabled+0x1a>
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d101      	bne.n	80028b6 <LL_ADC_IsDisableOngoing+0x18>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <LL_ADC_IsDisableOngoing+0x1a>
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d101      	bne.n	80028dc <LL_ADC_REG_IsConversionOngoing+0x18>
 80028d8:	2301      	movs	r3, #1
 80028da:	e000      	b.n	80028de <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d101      	bne.n	8002902 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002910:	b590      	push	{r4, r7, lr}
 8002912:	b089      	sub	sp, #36	@ 0x24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e167      	b.n	8002bfa <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002934:	2b00      	cmp	r3, #0
 8002936:	d109      	bne.n	800294c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7fe fcb5 	bl	80012a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff ff2d 	bl	80027b0 <LL_ADC_IsDeepPowerDownEnabled>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d004      	beq.n	8002966 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ff13 	bl	800278c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff ff48 	bl	8002800 <LL_ADC_IsInternalRegulatorEnabled>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d115      	bne.n	80029a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff ff2c 	bl	80027d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002980:	4ba0      	ldr	r3, [pc, #640]	@ (8002c04 <HAL_ADC_Init+0x2f4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	099b      	lsrs	r3, r3, #6
 8002986:	4aa0      	ldr	r2, [pc, #640]	@ (8002c08 <HAL_ADC_Init+0x2f8>)
 8002988:	fba2 2303 	umull	r2, r3, r2, r3
 800298c:	099b      	lsrs	r3, r3, #6
 800298e:	3301      	adds	r3, #1
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002994:	e002      	b.n	800299c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	3b01      	subs	r3, #1
 800299a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f9      	bne.n	8002996 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff ff2a 	bl	8002800 <LL_ADC_IsInternalRegulatorEnabled>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10d      	bne.n	80029ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b6:	f043 0210 	orr.w	r2, r3, #16
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029c2:	f043 0201 	orr.w	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff ff76 	bl	80028c4 <LL_ADC_REG_IsConversionOngoing>
 80029d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f040 8100 	bne.w	8002be8 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f040 80fc 	bne.w	8002be8 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80029f8:	f043 0202 	orr.w	r2, r3, #2
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff37 	bl	8002878 <LL_ADC_IsEnabled>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d111      	bne.n	8002a34 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a10:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002a14:	f7ff ff30 	bl	8002878 <LL_ADC_IsEnabled>
 8002a18:	4604      	mov	r4, r0
 8002a1a:	487c      	ldr	r0, [pc, #496]	@ (8002c0c <HAL_ADC_Init+0x2fc>)
 8002a1c:	f7ff ff2c 	bl	8002878 <LL_ADC_IsEnabled>
 8002a20:	4603      	mov	r3, r0
 8002a22:	4323      	orrs	r3, r4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d105      	bne.n	8002a34 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4878      	ldr	r0, [pc, #480]	@ (8002c10 <HAL_ADC_Init+0x300>)
 8002a30:	f7ff fd1c 	bl	800246c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	7f5b      	ldrb	r3, [r3, #29]
 8002a38:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a3e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002a44:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002a4a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a52:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d106      	bne.n	8002a70 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a66:	3b01      	subs	r3, #1
 8002a68:	045b      	lsls	r3, r3, #17
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d009      	beq.n	8002a8c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a84:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	4b60      	ldr	r3, [pc, #384]	@ (8002c14 <HAL_ADC_Init+0x304>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6812      	ldr	r2, [r2, #0]
 8002a9a:	69b9      	ldr	r1, [r7, #24]
 8002a9c:	430b      	orrs	r3, r1
 8002a9e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff ff15 	bl	80028ea <LL_ADC_INJ_IsConversionOngoing>
 8002ac0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d16d      	bne.n	8002ba4 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d16a      	bne.n	8002ba4 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ad2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ada:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002aea:	f023 0302 	bic.w	r3, r3, #2
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6812      	ldr	r2, [r2, #0]
 8002af2:	69b9      	ldr	r1, [r7, #24]
 8002af4:	430b      	orrs	r3, r1
 8002af6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d017      	beq.n	8002b30 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691a      	ldr	r2, [r3, #16]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002b0e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002b18:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002b1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6911      	ldr	r1, [r2, #16]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002b2e:	e013      	b.n	8002b58 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691a      	ldr	r2, [r3, #16]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002b3e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002b50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b54:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d118      	bne.n	8002b94 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002b6c:	f023 0304 	bic.w	r3, r3, #4
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b78:	4311      	orrs	r1, r2
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002b7e:	4311      	orrs	r1, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b84:	430a      	orrs	r2, r1
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f042 0201 	orr.w	r2, r2, #1
 8002b90:	611a      	str	r2, [r3, #16]
 8002b92:	e007      	b.n	8002ba4 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691a      	ldr	r2, [r3, #16]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0201 	bic.w	r2, r2, #1
 8002ba2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d10c      	bne.n	8002bc6 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb2:	f023 010f 	bic.w	r1, r3, #15
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	1e5a      	subs	r2, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bc4:	e007      	b.n	8002bd6 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 020f 	bic.w	r2, r2, #15
 8002bd4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bda:	f023 0303 	bic.w	r3, r3, #3
 8002bde:	f043 0201 	orr.w	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002be6:	e007      	b.n	8002bf8 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bec:	f043 0210 	orr.w	r2, r3, #16
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bf8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3724      	adds	r7, #36	@ 0x24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd90      	pop	{r4, r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000000 	.word	0x20000000
 8002c08:	053e2d63 	.word	0x053e2d63
 8002c0c:	50000100 	.word	0x50000100
 8002c10:	50000300 	.word	0x50000300
 8002c14:	fff04007 	.word	0xfff04007

08002c18 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	@ 0x28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002c20:	2300      	movs	r3, #0
 8002c22:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c34:	4883      	ldr	r0, [pc, #524]	@ (8002e44 <HAL_ADC_IRQHandler+0x22c>)
 8002c36:	f7ff fd8d 	bl	8002754 <LL_ADC_GetMultimode>
 8002c3a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d017      	beq.n	8002c76 <HAL_ADC_IRQHandler+0x5e>
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d012      	beq.n	8002c76 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d105      	bne.n	8002c68 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c60:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f001 fa9d 	bl	80041a8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2202      	movs	r2, #2
 8002c74:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d004      	beq.n	8002c8a <HAL_ADC_IRQHandler+0x72>
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10a      	bne.n	8002ca0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 8085 	beq.w	8002da0 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d07f      	beq.n	8002da0 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d105      	bne.n	8002cb8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fca7 	bl	8002610 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d064      	beq.n	8002d92 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a5e      	ldr	r2, [pc, #376]	@ (8002e48 <HAL_ADC_IRQHandler+0x230>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d002      	beq.n	8002cd8 <HAL_ADC_IRQHandler+0xc0>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	e001      	b.n	8002cdc <HAL_ADC_IRQHandler+0xc4>
 8002cd8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6812      	ldr	r2, [r2, #0]
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d008      	beq.n	8002cf6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d005      	beq.n	8002cf6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2b05      	cmp	r3, #5
 8002cee:	d002      	beq.n	8002cf6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	2b09      	cmp	r3, #9
 8002cf4:	d104      	bne.n	8002d00 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	623b      	str	r3, [r7, #32]
 8002cfe:	e00d      	b.n	8002d1c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a50      	ldr	r2, [pc, #320]	@ (8002e48 <HAL_ADC_IRQHandler+0x230>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d002      	beq.n	8002d10 <HAL_ADC_IRQHandler+0xf8>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	e001      	b.n	8002d14 <HAL_ADC_IRQHandler+0xfc>
 8002d10:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002d14:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d135      	bne.n	8002d92 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d12e      	bne.n	8002d92 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff fdc3 	bl	80028c4 <LL_ADC_REG_IsConversionOngoing>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d11a      	bne.n	8002d7a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 020c 	bic.w	r2, r2, #12
 8002d52:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d112      	bne.n	8002d92 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d70:	f043 0201 	orr.w	r2, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d78:	e00b      	b.n	8002d92 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7e:	f043 0210 	orr.w	r2, r3, #16
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d8a:	f043 0201 	orr.w	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f95a 	bl	800304c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	220c      	movs	r2, #12
 8002d9e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d004      	beq.n	8002db4 <HAL_ADC_IRQHandler+0x19c>
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	f003 0320 	and.w	r3, r3, #32
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10b      	bne.n	8002dcc <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 809e 	beq.w	8002efc <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 8098 	beq.w	8002efc <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd0:	f003 0310 	and.w	r3, r3, #16
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d105      	bne.n	8002de4 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ddc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff fc50 	bl	800268e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002dee:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff fc0b 	bl	8002610 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002dfa:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a11      	ldr	r2, [pc, #68]	@ (8002e48 <HAL_ADC_IRQHandler+0x230>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d002      	beq.n	8002e0c <HAL_ADC_IRQHandler+0x1f4>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	e001      	b.n	8002e10 <HAL_ADC_IRQHandler+0x1f8>
 8002e0c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d008      	beq.n	8002e2a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d005      	beq.n	8002e2a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2b06      	cmp	r3, #6
 8002e22:	d002      	beq.n	8002e2a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	2b07      	cmp	r3, #7
 8002e28:	d104      	bne.n	8002e34 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	623b      	str	r3, [r7, #32]
 8002e32:	e011      	b.n	8002e58 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a03      	ldr	r2, [pc, #12]	@ (8002e48 <HAL_ADC_IRQHandler+0x230>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d006      	beq.n	8002e4c <HAL_ADC_IRQHandler+0x234>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	e005      	b.n	8002e50 <HAL_ADC_IRQHandler+0x238>
 8002e44:	50000300 	.word	0x50000300
 8002e48:	50000100 	.word	0x50000100
 8002e4c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e50:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d047      	beq.n	8002eee <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d007      	beq.n	8002e78 <HAL_ADC_IRQHandler+0x260>
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d03f      	beq.n	8002eee <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d13a      	bne.n	8002eee <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e82:	2b40      	cmp	r3, #64	@ 0x40
 8002e84:	d133      	bne.n	8002eee <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d12e      	bne.n	8002eee <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff fd28 	bl	80028ea <LL_ADC_INJ_IsConversionOngoing>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d11a      	bne.n	8002ed6 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002eae:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d112      	bne.n	8002eee <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ecc:	f043 0201 	orr.w	r2, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ed4:	e00b      	b.n	8002eee <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eda:	f043 0210 	orr.w	r2, r3, #16
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ee6:	f043 0201 	orr.w	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f008 fee0 	bl	800bcb4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2260      	movs	r2, #96	@ 0x60
 8002efa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d011      	beq.n	8002f2a <HAL_ADC_IRQHandler+0x312>
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00c      	beq.n	8002f2a <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f14:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f89f 	bl	8003060 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2280      	movs	r2, #128	@ 0x80
 8002f28:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d012      	beq.n	8002f5a <HAL_ADC_IRQHandler+0x342>
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00d      	beq.n	8002f5a <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f42:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f001 f918 	bl	8004180 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f58:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d012      	beq.n	8002f8a <HAL_ADC_IRQHandler+0x372>
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00d      	beq.n	8002f8a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f72:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f001 f90a 	bl	8004194 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f88:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d036      	beq.n	8003002 <HAL_ADC_IRQHandler+0x3ea>
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	f003 0310 	and.w	r3, r3, #16
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d031      	beq.n	8003002 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d102      	bne.n	8002fac <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002faa:	e014      	b.n	8002fd6 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d008      	beq.n	8002fc4 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002fb2:	4825      	ldr	r0, [pc, #148]	@ (8003048 <HAL_ADC_IRQHandler+0x430>)
 8002fb4:	f7ff fbdc 	bl	8002770 <LL_ADC_GetMultiDMATransfer>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00b      	beq.n	8002fd6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fc2:	e008      	b.n	8002fd6 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d10e      	bne.n	8002ffa <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fec:	f043 0202 	orr.w	r2, r3, #2
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f83d 	bl	8003074 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2210      	movs	r2, #16
 8003000:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003008:	2b00      	cmp	r3, #0
 800300a:	d018      	beq.n	800303e <HAL_ADC_IRQHandler+0x426>
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003012:	2b00      	cmp	r3, #0
 8003014:	d013      	beq.n	800303e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800301a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003026:	f043 0208 	orr.w	r2, r3, #8
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003036:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f001 f897 	bl	800416c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800303e:	bf00      	nop
 8003040:	3728      	adds	r7, #40	@ 0x28
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	50000300 	.word	0x50000300

0800304c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b0b6      	sub	sp, #216	@ 0xd8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003098:	2300      	movs	r3, #0
 800309a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x22>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e3c8      	b.n	800383c <HAL_ADC_ConfigChannel+0x7b4>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff fc04 	bl	80028c4 <LL_ADC_REG_IsConversionOngoing>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f040 83ad 	bne.w	800381e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6818      	ldr	r0, [r3, #0]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	6859      	ldr	r1, [r3, #4]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	f7ff fab0 	bl	8002636 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fbf2 	bl	80028c4 <LL_ADC_REG_IsConversionOngoing>
 80030e0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fbfe 	bl	80028ea <LL_ADC_INJ_IsConversionOngoing>
 80030ee:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f040 81d9 	bne.w	80034ae <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003100:	2b00      	cmp	r3, #0
 8003102:	f040 81d4 	bne.w	80034ae <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800310e:	d10f      	bne.n	8003130 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2200      	movs	r2, #0
 800311a:	4619      	mov	r1, r3
 800311c:	f7ff faca 	bl	80026b4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff fa5e 	bl	80025ea <LL_ADC_SetSamplingTimeCommonConfig>
 800312e:	e00e      	b.n	800314e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	6819      	ldr	r1, [r3, #0]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	461a      	mov	r2, r3
 800313e:	f7ff fab9 	bl	80026b4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2100      	movs	r1, #0
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff fa4e 	bl	80025ea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	695a      	ldr	r2, [r3, #20]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	08db      	lsrs	r3, r3, #3
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	2b04      	cmp	r3, #4
 800316e:	d022      	beq.n	80031b6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6818      	ldr	r0, [r3, #0]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	6919      	ldr	r1, [r3, #16]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003180:	f7ff f9a8 	bl	80024d4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	6919      	ldr	r1, [r3, #16]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	461a      	mov	r2, r3
 8003192:	f7ff f9f4 	bl	800257e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d102      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x124>
 80031a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031aa:	e000      	b.n	80031ae <HAL_ADC_ConfigChannel+0x126>
 80031ac:	2300      	movs	r3, #0
 80031ae:	461a      	mov	r2, r3
 80031b0:	f7ff fa00 	bl	80025b4 <LL_ADC_SetOffsetSaturation>
 80031b4:	e17b      	b.n	80034ae <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2100      	movs	r1, #0
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff f9ad 	bl	800251c <LL_ADC_GetOffsetChannel>
 80031c2:	4603      	mov	r3, r0
 80031c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10a      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x15a>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2100      	movs	r1, #0
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff f9a2 	bl	800251c <LL_ADC_GetOffsetChannel>
 80031d8:	4603      	mov	r3, r0
 80031da:	0e9b      	lsrs	r3, r3, #26
 80031dc:	f003 021f 	and.w	r2, r3, #31
 80031e0:	e01e      	b.n	8003220 <HAL_ADC_ConfigChannel+0x198>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2100      	movs	r1, #0
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff f997 	bl	800251c <LL_ADC_GetOffsetChannel>
 80031ee:	4603      	mov	r3, r0
 80031f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80031f8:	fa93 f3a3 	rbit	r3, r3
 80031fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003200:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003204:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003208:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003210:	2320      	movs	r3, #32
 8003212:	e004      	b.n	800321e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003214:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003218:	fab3 f383 	clz	r3, r3
 800321c:	b2db      	uxtb	r3, r3
 800321e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003228:	2b00      	cmp	r3, #0
 800322a:	d105      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x1b0>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	0e9b      	lsrs	r3, r3, #26
 8003232:	f003 031f 	and.w	r3, r3, #31
 8003236:	e018      	b.n	800326a <HAL_ADC_ConfigChannel+0x1e2>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003240:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003244:	fa93 f3a3 	rbit	r3, r3
 8003248:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800324c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003250:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003254:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800325c:	2320      	movs	r3, #32
 800325e:	e004      	b.n	800326a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003260:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800326a:	429a      	cmp	r2, r3
 800326c:	d106      	bne.n	800327c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2200      	movs	r2, #0
 8003274:	2100      	movs	r1, #0
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff f966 	bl	8002548 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2101      	movs	r1, #1
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff f94a 	bl	800251c <LL_ADC_GetOffsetChannel>
 8003288:	4603      	mov	r3, r0
 800328a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10a      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x220>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2101      	movs	r1, #1
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff f93f 	bl	800251c <LL_ADC_GetOffsetChannel>
 800329e:	4603      	mov	r3, r0
 80032a0:	0e9b      	lsrs	r3, r3, #26
 80032a2:	f003 021f 	and.w	r2, r3, #31
 80032a6:	e01e      	b.n	80032e6 <HAL_ADC_ConfigChannel+0x25e>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2101      	movs	r1, #1
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff f934 	bl	800251c <LL_ADC_GetOffsetChannel>
 80032b4:	4603      	mov	r3, r0
 80032b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80032be:	fa93 f3a3 	rbit	r3, r3
 80032c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80032c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80032ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80032d6:	2320      	movs	r3, #32
 80032d8:	e004      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80032da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032de:	fab3 f383 	clz	r3, r3
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d105      	bne.n	80032fe <HAL_ADC_ConfigChannel+0x276>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	0e9b      	lsrs	r3, r3, #26
 80032f8:	f003 031f 	and.w	r3, r3, #31
 80032fc:	e018      	b.n	8003330 <HAL_ADC_ConfigChannel+0x2a8>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003306:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800330a:	fa93 f3a3 	rbit	r3, r3
 800330e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003312:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003316:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800331a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003322:	2320      	movs	r3, #32
 8003324:	e004      	b.n	8003330 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003326:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800332a:	fab3 f383 	clz	r3, r3
 800332e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003330:	429a      	cmp	r2, r3
 8003332:	d106      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2200      	movs	r2, #0
 800333a:	2101      	movs	r1, #1
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff f903 	bl	8002548 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2102      	movs	r1, #2
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff f8e7 	bl	800251c <LL_ADC_GetOffsetChannel>
 800334e:	4603      	mov	r3, r0
 8003350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10a      	bne.n	800336e <HAL_ADC_ConfigChannel+0x2e6>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2102      	movs	r1, #2
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff f8dc 	bl	800251c <LL_ADC_GetOffsetChannel>
 8003364:	4603      	mov	r3, r0
 8003366:	0e9b      	lsrs	r3, r3, #26
 8003368:	f003 021f 	and.w	r2, r3, #31
 800336c:	e01e      	b.n	80033ac <HAL_ADC_ConfigChannel+0x324>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2102      	movs	r1, #2
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff f8d1 	bl	800251c <LL_ADC_GetOffsetChannel>
 800337a:	4603      	mov	r3, r0
 800337c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003380:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003384:	fa93 f3a3 	rbit	r3, r3
 8003388:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800338c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003390:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003394:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800339c:	2320      	movs	r3, #32
 800339e:	e004      	b.n	80033aa <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80033a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80033a4:	fab3 f383 	clz	r3, r3
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d105      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x33c>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	0e9b      	lsrs	r3, r3, #26
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	e016      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x36a>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033d0:	fa93 f3a3 	rbit	r3, r3
 80033d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80033d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80033dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80033e4:	2320      	movs	r3, #32
 80033e6:	e004      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80033e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033ec:	fab3 f383 	clz	r3, r3
 80033f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d106      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2200      	movs	r2, #0
 80033fc:	2102      	movs	r1, #2
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff f8a2 	bl	8002548 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2103      	movs	r1, #3
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff f886 	bl	800251c <LL_ADC_GetOffsetChannel>
 8003410:	4603      	mov	r3, r0
 8003412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10a      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x3a8>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2103      	movs	r1, #3
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff f87b 	bl	800251c <LL_ADC_GetOffsetChannel>
 8003426:	4603      	mov	r3, r0
 8003428:	0e9b      	lsrs	r3, r3, #26
 800342a:	f003 021f 	and.w	r2, r3, #31
 800342e:	e017      	b.n	8003460 <HAL_ADC_ConfigChannel+0x3d8>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2103      	movs	r1, #3
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff f870 	bl	800251c <LL_ADC_GetOffsetChannel>
 800343c:	4603      	mov	r3, r0
 800343e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003442:	fa93 f3a3 	rbit	r3, r3
 8003446:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003448:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800344a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800344c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003452:	2320      	movs	r3, #32
 8003454:	e003      	b.n	800345e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003456:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003458:	fab3 f383 	clz	r3, r3
 800345c:	b2db      	uxtb	r3, r3
 800345e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003468:	2b00      	cmp	r3, #0
 800346a:	d105      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x3f0>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	0e9b      	lsrs	r3, r3, #26
 8003472:	f003 031f 	and.w	r3, r3, #31
 8003476:	e011      	b.n	800349c <HAL_ADC_ConfigChannel+0x414>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003480:	fa93 f3a3 	rbit	r3, r3
 8003484:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003486:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003488:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800348a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003490:	2320      	movs	r3, #32
 8003492:	e003      	b.n	800349c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003494:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003496:	fab3 f383 	clz	r3, r3
 800349a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800349c:	429a      	cmp	r2, r3
 800349e:	d106      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2200      	movs	r2, #0
 80034a6:	2103      	movs	r1, #3
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff f84d 	bl	8002548 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff f9e0 	bl	8002878 <LL_ADC_IsEnabled>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f040 8140 	bne.w	8003740 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	6819      	ldr	r1, [r3, #0]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	461a      	mov	r2, r3
 80034ce:	f7ff f91d 	bl	800270c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	4a8f      	ldr	r2, [pc, #572]	@ (8003714 <HAL_ADC_ConfigChannel+0x68c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	f040 8131 	bne.w	8003740 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10b      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x47e>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	0e9b      	lsrs	r3, r3, #26
 80034f4:	3301      	adds	r3, #1
 80034f6:	f003 031f 	and.w	r3, r3, #31
 80034fa:	2b09      	cmp	r3, #9
 80034fc:	bf94      	ite	ls
 80034fe:	2301      	movls	r3, #1
 8003500:	2300      	movhi	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	e019      	b.n	800353a <HAL_ADC_ConfigChannel+0x4b2>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800350e:	fa93 f3a3 	rbit	r3, r3
 8003512:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003514:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003516:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003518:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800351e:	2320      	movs	r3, #32
 8003520:	e003      	b.n	800352a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003522:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003524:	fab3 f383 	clz	r3, r3
 8003528:	b2db      	uxtb	r3, r3
 800352a:	3301      	adds	r3, #1
 800352c:	f003 031f 	and.w	r3, r3, #31
 8003530:	2b09      	cmp	r3, #9
 8003532:	bf94      	ite	ls
 8003534:	2301      	movls	r3, #1
 8003536:	2300      	movhi	r3, #0
 8003538:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800353a:	2b00      	cmp	r3, #0
 800353c:	d079      	beq.n	8003632 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003546:	2b00      	cmp	r3, #0
 8003548:	d107      	bne.n	800355a <HAL_ADC_ConfigChannel+0x4d2>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	0e9b      	lsrs	r3, r3, #26
 8003550:	3301      	adds	r3, #1
 8003552:	069b      	lsls	r3, r3, #26
 8003554:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003558:	e015      	b.n	8003586 <HAL_ADC_ConfigChannel+0x4fe>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003560:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003562:	fa93 f3a3 	rbit	r3, r3
 8003566:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003568:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800356a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800356c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003572:	2320      	movs	r3, #32
 8003574:	e003      	b.n	800357e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003578:	fab3 f383 	clz	r3, r3
 800357c:	b2db      	uxtb	r3, r3
 800357e:	3301      	adds	r3, #1
 8003580:	069b      	lsls	r3, r3, #26
 8003582:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800358e:	2b00      	cmp	r3, #0
 8003590:	d109      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x51e>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	0e9b      	lsrs	r3, r3, #26
 8003598:	3301      	adds	r3, #1
 800359a:	f003 031f 	and.w	r3, r3, #31
 800359e:	2101      	movs	r1, #1
 80035a0:	fa01 f303 	lsl.w	r3, r1, r3
 80035a4:	e017      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x54e>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035ae:	fa93 f3a3 	rbit	r3, r3
 80035b2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80035b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80035b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80035be:	2320      	movs	r3, #32
 80035c0:	e003      	b.n	80035ca <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80035c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035c4:	fab3 f383 	clz	r3, r3
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	3301      	adds	r3, #1
 80035cc:	f003 031f 	and.w	r3, r3, #31
 80035d0:	2101      	movs	r1, #1
 80035d2:	fa01 f303 	lsl.w	r3, r1, r3
 80035d6:	ea42 0103 	orr.w	r1, r2, r3
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10a      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x574>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	0e9b      	lsrs	r3, r3, #26
 80035ec:	3301      	adds	r3, #1
 80035ee:	f003 021f 	and.w	r2, r3, #31
 80035f2:	4613      	mov	r3, r2
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	4413      	add	r3, r2
 80035f8:	051b      	lsls	r3, r3, #20
 80035fa:	e018      	b.n	800362e <HAL_ADC_ConfigChannel+0x5a6>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003604:	fa93 f3a3 	rbit	r3, r3
 8003608:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800360a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800360c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800360e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003614:	2320      	movs	r3, #32
 8003616:	e003      	b.n	8003620 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800361a:	fab3 f383 	clz	r3, r3
 800361e:	b2db      	uxtb	r3, r3
 8003620:	3301      	adds	r3, #1
 8003622:	f003 021f 	and.w	r2, r3, #31
 8003626:	4613      	mov	r3, r2
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	4413      	add	r3, r2
 800362c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800362e:	430b      	orrs	r3, r1
 8003630:	e081      	b.n	8003736 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800363a:	2b00      	cmp	r3, #0
 800363c:	d107      	bne.n	800364e <HAL_ADC_ConfigChannel+0x5c6>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	0e9b      	lsrs	r3, r3, #26
 8003644:	3301      	adds	r3, #1
 8003646:	069b      	lsls	r3, r3, #26
 8003648:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800364c:	e015      	b.n	800367a <HAL_ADC_ConfigChannel+0x5f2>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003656:	fa93 f3a3 	rbit	r3, r3
 800365a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800365c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003666:	2320      	movs	r3, #32
 8003668:	e003      	b.n	8003672 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800366a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366c:	fab3 f383 	clz	r3, r3
 8003670:	b2db      	uxtb	r3, r3
 8003672:	3301      	adds	r3, #1
 8003674:	069b      	lsls	r3, r3, #26
 8003676:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003682:	2b00      	cmp	r3, #0
 8003684:	d109      	bne.n	800369a <HAL_ADC_ConfigChannel+0x612>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	0e9b      	lsrs	r3, r3, #26
 800368c:	3301      	adds	r3, #1
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	2101      	movs	r1, #1
 8003694:	fa01 f303 	lsl.w	r3, r1, r3
 8003698:	e017      	b.n	80036ca <HAL_ADC_ConfigChannel+0x642>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	fa93 f3a3 	rbit	r3, r3
 80036a6:	61fb      	str	r3, [r7, #28]
  return result;
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80036ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80036b2:	2320      	movs	r3, #32
 80036b4:	e003      	b.n	80036be <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80036b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b8:	fab3 f383 	clz	r3, r3
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	3301      	adds	r3, #1
 80036c0:	f003 031f 	and.w	r3, r3, #31
 80036c4:	2101      	movs	r1, #1
 80036c6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ca:	ea42 0103 	orr.w	r1, r2, r3
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10d      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x66e>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	0e9b      	lsrs	r3, r3, #26
 80036e0:	3301      	adds	r3, #1
 80036e2:	f003 021f 	and.w	r2, r3, #31
 80036e6:	4613      	mov	r3, r2
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	4413      	add	r3, r2
 80036ec:	3b1e      	subs	r3, #30
 80036ee:	051b      	lsls	r3, r3, #20
 80036f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036f4:	e01e      	b.n	8003734 <HAL_ADC_ConfigChannel+0x6ac>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	fa93 f3a3 	rbit	r3, r3
 8003702:	613b      	str	r3, [r7, #16]
  return result;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d104      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800370e:	2320      	movs	r3, #32
 8003710:	e006      	b.n	8003720 <HAL_ADC_ConfigChannel+0x698>
 8003712:	bf00      	nop
 8003714:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	fab3 f383 	clz	r3, r3
 800371e:	b2db      	uxtb	r3, r3
 8003720:	3301      	adds	r3, #1
 8003722:	f003 021f 	and.w	r2, r3, #31
 8003726:	4613      	mov	r3, r2
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	4413      	add	r3, r2
 800372c:	3b1e      	subs	r3, #30
 800372e:	051b      	lsls	r3, r3, #20
 8003730:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003734:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800373a:	4619      	mov	r1, r3
 800373c:	f7fe ffba 	bl	80026b4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	4b3f      	ldr	r3, [pc, #252]	@ (8003844 <HAL_ADC_ConfigChannel+0x7bc>)
 8003746:	4013      	ands	r3, r2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d071      	beq.n	8003830 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800374c:	483e      	ldr	r0, [pc, #248]	@ (8003848 <HAL_ADC_ConfigChannel+0x7c0>)
 800374e:	f7fe feb3 	bl	80024b8 <LL_ADC_GetCommonPathInternalCh>
 8003752:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a3c      	ldr	r2, [pc, #240]	@ (800384c <HAL_ADC_ConfigChannel+0x7c4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d004      	beq.n	800376a <HAL_ADC_ConfigChannel+0x6e2>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a3a      	ldr	r2, [pc, #232]	@ (8003850 <HAL_ADC_ConfigChannel+0x7c8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d127      	bne.n	80037ba <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800376a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800376e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d121      	bne.n	80037ba <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800377e:	d157      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003780:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003784:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003788:	4619      	mov	r1, r3
 800378a:	482f      	ldr	r0, [pc, #188]	@ (8003848 <HAL_ADC_ConfigChannel+0x7c0>)
 800378c:	f7fe fe81 	bl	8002492 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003790:	4b30      	ldr	r3, [pc, #192]	@ (8003854 <HAL_ADC_ConfigChannel+0x7cc>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	099b      	lsrs	r3, r3, #6
 8003796:	4a30      	ldr	r2, [pc, #192]	@ (8003858 <HAL_ADC_ConfigChannel+0x7d0>)
 8003798:	fba2 2303 	umull	r2, r3, r2, r3
 800379c:	099b      	lsrs	r3, r3, #6
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	4613      	mov	r3, r2
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037aa:	e002      	b.n	80037b2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1f9      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037b8:	e03a      	b.n	8003830 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a27      	ldr	r2, [pc, #156]	@ (800385c <HAL_ADC_ConfigChannel+0x7d4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d113      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10d      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a22      	ldr	r2, [pc, #136]	@ (8003860 <HAL_ADC_ConfigChannel+0x7d8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d02a      	beq.n	8003830 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037e2:	4619      	mov	r1, r3
 80037e4:	4818      	ldr	r0, [pc, #96]	@ (8003848 <HAL_ADC_ConfigChannel+0x7c0>)
 80037e6:	f7fe fe54 	bl	8002492 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037ea:	e021      	b.n	8003830 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003864 <HAL_ADC_ConfigChannel+0x7dc>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d11c      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d116      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a16      	ldr	r2, [pc, #88]	@ (8003860 <HAL_ADC_ConfigChannel+0x7d8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d011      	beq.n	8003830 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800380c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003810:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003814:	4619      	mov	r1, r3
 8003816:	480c      	ldr	r0, [pc, #48]	@ (8003848 <HAL_ADC_ConfigChannel+0x7c0>)
 8003818:	f7fe fe3b 	bl	8002492 <LL_ADC_SetCommonPathInternalCh>
 800381c:	e008      	b.n	8003830 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003822:	f043 0220 	orr.w	r2, r3, #32
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003838:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800383c:	4618      	mov	r0, r3
 800383e:	37d8      	adds	r7, #216	@ 0xd8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	80080000 	.word	0x80080000
 8003848:	50000300 	.word	0x50000300
 800384c:	c3210000 	.word	0xc3210000
 8003850:	90c00010 	.word	0x90c00010
 8003854:	20000000 	.word	0x20000000
 8003858:	053e2d63 	.word	0x053e2d63
 800385c:	c7520000 	.word	0xc7520000
 8003860:	50000100 	.word	0x50000100
 8003864:	cb840000 	.word	0xcb840000

08003868 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003870:	2300      	movs	r3, #0
 8003872:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f7fe fffd 	bl	8002878 <LL_ADC_IsEnabled>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d169      	bne.n	8003958 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	4b36      	ldr	r3, [pc, #216]	@ (8003964 <ADC_Enable+0xfc>)
 800388c:	4013      	ands	r3, r2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00d      	beq.n	80038ae <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003896:	f043 0210 	orr.w	r2, r3, #16
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a2:	f043 0201 	orr.w	r2, r3, #1
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e055      	b.n	800395a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fe ffb8 	bl	8002828 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80038b8:	482b      	ldr	r0, [pc, #172]	@ (8003968 <ADC_Enable+0x100>)
 80038ba:	f7fe fdfd 	bl	80024b8 <LL_ADC_GetCommonPathInternalCh>
 80038be:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80038c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d013      	beq.n	80038f0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038c8:	4b28      	ldr	r3, [pc, #160]	@ (800396c <ADC_Enable+0x104>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	099b      	lsrs	r3, r3, #6
 80038ce:	4a28      	ldr	r2, [pc, #160]	@ (8003970 <ADC_Enable+0x108>)
 80038d0:	fba2 2303 	umull	r2, r3, r2, r3
 80038d4:	099b      	lsrs	r3, r3, #6
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	4613      	mov	r3, r2
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	4413      	add	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80038e2:	e002      	b.n	80038ea <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1f9      	bne.n	80038e4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80038f0:	f7fe fdb0 	bl	8002454 <HAL_GetTick>
 80038f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038f6:	e028      	b.n	800394a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fe ffbb 	bl	8002878 <LL_ADC_IsEnabled>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d104      	bne.n	8003912 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f7fe ff8b 	bl	8002828 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003912:	f7fe fd9f 	bl	8002454 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d914      	bls.n	800394a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b01      	cmp	r3, #1
 800392c:	d00d      	beq.n	800394a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003932:	f043 0210 	orr.w	r2, r3, #16
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800393e:	f043 0201 	orr.w	r2, r3, #1
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e007      	b.n	800395a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b01      	cmp	r3, #1
 8003956:	d1cf      	bne.n	80038f8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	8000003f 	.word	0x8000003f
 8003968:	50000300 	.word	0x50000300
 800396c:	20000000 	.word	0x20000000
 8003970:	053e2d63 	.word	0x053e2d63

08003974 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f7fe ff8c 	bl	800289e <LL_ADC_IsDisableOngoing>
 8003986:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f7fe ff73 	bl	8002878 <LL_ADC_IsEnabled>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d047      	beq.n	8003a28 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d144      	bne.n	8003a28 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 030d 	and.w	r3, r3, #13
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d10c      	bne.n	80039c6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fe ff4d 	bl	8002850 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2203      	movs	r2, #3
 80039bc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039be:	f7fe fd49 	bl	8002454 <HAL_GetTick>
 80039c2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039c4:	e029      	b.n	8003a1a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ca:	f043 0210 	orr.w	r2, r3, #16
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d6:	f043 0201 	orr.w	r2, r3, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e023      	b.n	8003a2a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039e2:	f7fe fd37 	bl	8002454 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d914      	bls.n	8003a1a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00d      	beq.n	8003a1a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a02:	f043 0210 	orr.w	r2, r3, #16
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a0e:	f043 0201 	orr.w	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e007      	b.n	8003a2a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1dc      	bne.n	80039e2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <LL_ADC_SetCommonPathInternalCh>:
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	609a      	str	r2, [r3, #8]
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <LL_ADC_GetCommonPathInternalCh>:
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <LL_ADC_SetOffset>:
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	3360      	adds	r3, #96	@ 0x60
 8003a86:	461a      	mov	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	4b08      	ldr	r3, [pc, #32]	@ (8003ab8 <LL_ADC_SetOffset+0x44>)
 8003a96:	4013      	ands	r3, r2
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	601a      	str	r2, [r3, #0]
}
 8003aac:	bf00      	nop
 8003aae:	371c      	adds	r7, #28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	03fff000 	.word	0x03fff000

08003abc <LL_ADC_GetOffsetChannel>:
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3360      	adds	r3, #96	@ 0x60
 8003aca:	461a      	mov	r2, r3
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <LL_ADC_SetOffsetState>:
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	3360      	adds	r3, #96	@ 0x60
 8003af8:	461a      	mov	r2, r3
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	601a      	str	r2, [r3, #0]
}
 8003b12:	bf00      	nop
 8003b14:	371c      	adds	r7, #28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <LL_ADC_SetOffsetSign>:
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b087      	sub	sp, #28
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	3360      	adds	r3, #96	@ 0x60
 8003b2e:	461a      	mov	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	601a      	str	r2, [r3, #0]
}
 8003b48:	bf00      	nop
 8003b4a:	371c      	adds	r7, #28
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <LL_ADC_SetOffsetSaturation>:
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	3360      	adds	r3, #96	@ 0x60
 8003b64:	461a      	mov	r2, r3
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	601a      	str	r2, [r3, #0]
}
 8003b7e:	bf00      	nop
 8003b80:	371c      	adds	r7, #28
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
 8003b92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	615a      	str	r2, [r3, #20]
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <LL_ADC_INJ_GetTrigAuto>:
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <LL_ADC_SetChannelSamplingTime>:
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	3314      	adds	r3, #20
 8003bdc:	461a      	mov	r2, r3
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	0e5b      	lsrs	r3, r3, #25
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	4413      	add	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	0d1b      	lsrs	r3, r3, #20
 8003bf4:	f003 031f 	and.w	r3, r3, #31
 8003bf8:	2107      	movs	r1, #7
 8003bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	401a      	ands	r2, r3
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	0d1b      	lsrs	r3, r3, #20
 8003c06:	f003 031f 	and.w	r3, r3, #31
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c10:	431a      	orrs	r2, r3
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	601a      	str	r2, [r3, #0]
}
 8003c16:	bf00      	nop
 8003c18:	371c      	adds	r7, #28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
	...

08003c24 <LL_ADC_SetChannelSingleDiff>:
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	401a      	ands	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f003 0318 	and.w	r3, r3, #24
 8003c46:	4908      	ldr	r1, [pc, #32]	@ (8003c68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003c48:	40d9      	lsrs	r1, r3
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	400b      	ands	r3, r1
 8003c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c52:	431a      	orrs	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8003c5a:	bf00      	nop
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	0007ffff 	.word	0x0007ffff

08003c6c <LL_ADC_GetMultimode>:
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 031f 	and.w	r3, r3, #31
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <LL_ADC_IsEnabled>:
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <LL_ADC_IsEnabled+0x18>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e000      	b.n	8003ca2 <LL_ADC_IsEnabled+0x1a>
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <LL_ADC_StartCalibration>:
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003cc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	609a      	str	r2, [r3, #8]
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <LL_ADC_IsCalibrationOnGoing>:
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003cf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cf4:	d101      	bne.n	8003cfa <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <LL_ADC_REG_IsConversionOngoing>:
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d101      	bne.n	8003d20 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <LL_ADC_INJ_StartConversion>:
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d3e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d42:	f043 0208 	orr.w	r2, r3, #8
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	609a      	str	r2, [r3, #8]
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <LL_ADC_INJ_IsConversionOngoing>:
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d101      	bne.n	8003d6e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d101      	bne.n	8003d98 <HAL_ADCEx_Calibration_Start+0x1c>
 8003d94:	2302      	movs	r3, #2
 8003d96:	e04d      	b.n	8003e34 <HAL_ADCEx_Calibration_Start+0xb8>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff fde7 	bl	8003974 <ADC_Disable>
 8003da6:	4603      	mov	r3, r0
 8003da8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d136      	bne.n	8003e1e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003db8:	f023 0302 	bic.w	r3, r3, #2
 8003dbc:	f043 0202 	orr.w	r2, r3, #2
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6839      	ldr	r1, [r7, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff ff6f 	bl	8003cae <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003dd0:	e014      	b.n	8003dfc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4a18      	ldr	r2, [pc, #96]	@ (8003e3c <HAL_ADCEx_Calibration_Start+0xc0>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d90d      	bls.n	8003dfc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de4:	f023 0312 	bic.w	r3, r3, #18
 8003de8:	f043 0210 	orr.w	r2, r3, #16
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e01b      	b.n	8003e34 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff ff6d 	bl	8003ce0 <LL_ADC_IsCalibrationOnGoing>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e2      	bne.n	8003dd2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e10:	f023 0303 	bic.w	r3, r3, #3
 8003e14:	f043 0201 	orr.w	r2, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e1c:	e005      	b.n	8003e2a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e22:	f043 0210 	orr.w	r2, r3, #16
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	0004de01 	.word	0x0004de01

08003e40 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e48:	4853      	ldr	r0, [pc, #332]	@ (8003f98 <HAL_ADCEx_InjectedStart+0x158>)
 8003e4a:	f7ff ff0f 	bl	8003c6c <LL_ADC_GetMultimode>
 8003e4e:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff ff7e 	bl	8003d56 <LL_ADC_INJ_IsConversionOngoing>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 8003e60:	2302      	movs	r3, #2
 8003e62:	e094      	b.n	8003f8e <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e6e:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e76:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10a      	bne.n	8003e94 <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d107      	bne.n	8003e94 <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e88:	f043 0220 	orr.w	r2, r3, #32
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e07c      	b.n	8003f8e <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <HAL_ADCEx_InjectedStart+0x62>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e075      	b.n	8003f8e <HAL_ADCEx_InjectedStart+0x14e>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7ff fcdc 	bl	8003868 <ADC_Enable>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d164      	bne.n	8003f84 <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d006      	beq.n	8003ed4 <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eca:	f023 0208 	bic.w	r2, r3, #8
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	661a      	str	r2, [r3, #96]	@ 0x60
 8003ed2:	e002      	b.n	8003eda <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ede:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003ee2:	f023 0301 	bic.w	r3, r3, #1
 8003ee6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a2a      	ldr	r2, [pc, #168]	@ (8003f9c <HAL_ADCEx_InjectedStart+0x15c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d002      	beq.n	8003efe <HAL_ADCEx_InjectedStart+0xbe>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	e001      	b.n	8003f02 <HAL_ADCEx_InjectedStart+0xc2>
 8003efe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6812      	ldr	r2, [r2, #0]
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d002      	beq.n	8003f10 <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d105      	bne.n	8003f1c <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f14:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2260      	movs	r2, #96	@ 0x60
 8003f22:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a1a      	ldr	r2, [pc, #104]	@ (8003f9c <HAL_ADCEx_InjectedStart+0x15c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d002      	beq.n	8003f3c <HAL_ADCEx_InjectedStart+0xfc>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	e001      	b.n	8003f40 <HAL_ADCEx_InjectedStart+0x100>
 8003f3c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6812      	ldr	r2, [r2, #0]
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d008      	beq.n	8003f5a <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d005      	beq.n	8003f5a <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2b06      	cmp	r3, #6
 8003f52:	d002      	beq.n	8003f5a <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2b07      	cmp	r3, #7
 8003f58:	d10d      	bne.n	8003f76 <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff fe26 	bl	8003bb0 <LL_ADC_INJ_GetTrigAuto>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d110      	bne.n	8003f8c <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff fedd 	bl	8003d2e <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003f74:	e00a      	b.n	8003f8c <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f7a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f82:	e003      	b.n	8003f8c <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	50000300 	.word	0x50000300
 8003f9c:	50000100 	.word	0x50000100

08003fa0 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fa8:	486e      	ldr	r0, [pc, #440]	@ (8004164 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 8003faa:	f7ff fe5f 	bl	8003c6c <LL_ADC_GetMultimode>
 8003fae:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff fece 	bl	8003d56 <LL_ADC_INJ_IsConversionOngoing>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e0ca      	b.n	800415a <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003fce:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fd6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10a      	bne.n	8003ff4 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d107      	bne.n	8003ff4 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe8:	f043 0220 	orr.w	r2, r3, #32
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0b2      	b.n	800415a <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d101      	bne.n	8004002 <HAL_ADCEx_InjectedStart_IT+0x62>
 8003ffe:	2302      	movs	r3, #2
 8004000:	e0ab      	b.n	800415a <HAL_ADCEx_InjectedStart_IT+0x1ba>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff fc2c 	bl	8003868 <ADC_Enable>
 8004010:	4603      	mov	r3, r0
 8004012:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	2b00      	cmp	r3, #0
 8004018:	f040 809a 	bne.w	8004150 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004024:	2b00      	cmp	r3, #0
 8004026:	d006      	beq.n	8004036 <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800402c:	f023 0208 	bic.w	r2, r3, #8
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	661a      	str	r2, [r3, #96]	@ 0x60
 8004034:	e002      	b.n	800403c <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004040:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004044:	f023 0301 	bic.w	r3, r3, #1
 8004048:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a44      	ldr	r2, [pc, #272]	@ (8004168 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d002      	beq.n	8004060 <HAL_ADCEx_InjectedStart_IT+0xc0>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	e001      	b.n	8004064 <HAL_ADCEx_InjectedStart_IT+0xc4>
 8004060:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6812      	ldr	r2, [r2, #0]
 8004068:	4293      	cmp	r3, r2
 800406a:	d002      	beq.n	8004072 <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d105      	bne.n	800407e <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004076:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2260      	movs	r2, #96	@ 0x60
 8004084:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d007      	beq.n	80040ac <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040aa:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d110      	bne.n	80040d6 <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0220 	bic.w	r2, r2, #32
 80040c2:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040d2:	605a      	str	r2, [r3, #4]
          break;
 80040d4:	e010      	b.n	80040f8 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040e4:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0220 	orr.w	r2, r2, #32
 80040f4:	605a      	str	r2, [r3, #4]
          break;
 80040f6:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a1a      	ldr	r2, [pc, #104]	@ (8004168 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d002      	beq.n	8004108 <HAL_ADCEx_InjectedStart_IT+0x168>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	e001      	b.n	800410c <HAL_ADCEx_InjectedStart_IT+0x16c>
 8004108:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6812      	ldr	r2, [r2, #0]
 8004110:	4293      	cmp	r3, r2
 8004112:	d008      	beq.n	8004126 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d005      	beq.n	8004126 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2b06      	cmp	r3, #6
 800411e:	d002      	beq.n	8004126 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2b07      	cmp	r3, #7
 8004124:	d10d      	bne.n	8004142 <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff fd40 	bl	8003bb0 <LL_ADC_INJ_GetTrigAuto>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d110      	bne.n	8004158 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff fdf7 	bl	8003d2e <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004140:	e00a      	b.n	8004158 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004146:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800414e:	e003      	b.n	8004158 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8004158:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800415a:	4618      	mov	r0, r3
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	50000300 	.word	0x50000300
 8004168:	50000100 	.word	0x50000100

0800416c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b0b6      	sub	sp, #216	@ 0xd8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80041cc:	2300      	movs	r3, #0
 80041ce:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d102      	bne.n	80041e6 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 80041e0:	2302      	movs	r3, #2
 80041e2:	f000 bcb5 	b.w	8004b50 <HAL_ADCEx_InjectedConfigChannel+0x994>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d130      	bne.n	8004260 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b09      	cmp	r3, #9
 8004204:	d179      	bne.n	80042fa <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420a:	2b00      	cmp	r3, #0
 800420c:	d010      	beq.n	8004230 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	0e9b      	lsrs	r3, r3, #26
 8004214:	025b      	lsls	r3, r3, #9
 8004216:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421e:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8004222:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004228:	4313      	orrs	r3, r2
 800422a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800422e:	e007      	b.n	8004240 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	0e9b      	lsrs	r3, r3, #26
 8004236:	025b      	lsls	r3, r3, #9
 8004238:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 800423c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004246:	4b84      	ldr	r3, [pc, #528]	@ (8004458 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004248:	4013      	ands	r3, r2
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6812      	ldr	r2, [r2, #0]
 800424e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004252:	430b      	orrs	r3, r1
 8004254:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800425c:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800425e:	e04c      	b.n	80042fa <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004264:	2b00      	cmp	r3, #0
 8004266:	d11d      	bne.n	80042a4 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	6a1a      	ldr	r2, [r3, #32]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00d      	beq.n	800429a <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004288:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800428c:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004298:	e004      	b.n	80042a4 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	3b01      	subs	r3, #1
 80042a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	0e9b      	lsrs	r3, r3, #26
 80042aa:	f003 021f 	and.w	r2, r3, #31
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042c8:	1e5a      	subs	r2, r3, #1
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80042d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10a      	bne.n	80042fa <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042ea:	4b5b      	ldr	r3, [pc, #364]	@ (8004458 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80042ec:	4013      	ands	r3, r2
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6812      	ldr	r2, [r2, #0]
 80042f6:	430b      	orrs	r3, r1
 80042f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fd29 	bl	8003d56 <LL_ADC_INJ_IsConversionOngoing>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d124      	bne.n	8004354 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004310:	2b00      	cmp	r3, #0
 8004312:	d112      	bne.n	800433a <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8004324:	055a      	lsls	r2, r3, #21
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800432c:	051b      	lsls	r3, r3, #20
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	60da      	str	r2, [r3, #12]
 8004338:	e00c      	b.n	8004354 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800434a:	055a      	lsls	r2, r3, #21
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff fcd5 	bl	8003d08 <LL_ADC_REG_IsConversionOngoing>
 800435e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff fcf5 	bl	8003d56 <LL_ADC_INJ_IsConversionOngoing>
 800436c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004370:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004374:	2b00      	cmp	r3, #0
 8004376:	f040 822e 	bne.w	80047d6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800437a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800437e:	2b00      	cmp	r3, #0
 8004380:	f040 8229 	bne.w	80047d6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004390:	2b00      	cmp	r3, #0
 8004392:	d116      	bne.n	80043c2 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800439a:	2b01      	cmp	r3, #1
 800439c:	d108      	bne.n	80043b0 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80043ac:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80043ae:	e01f      	b.n	80043f0 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80043be:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80043c0:	e016      	b.n	80043f0 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d109      	bne.n	80043e0 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d0:	f043 0220 	orr.w	r2, r3, #32
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80043de:	e007      	b.n	80043f0 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80043ee:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d110      	bne.n	800441c <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800440c:	430b      	orrs	r3, r1
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f042 0202 	orr.w	r2, r2, #2
 8004418:	611a      	str	r2, [r3, #16]
 800441a:	e007      	b.n	800442c <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	691a      	ldr	r2, [r3, #16]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0202 	bic.w	r2, r2, #2
 800442a:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004434:	d112      	bne.n	800445c <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2200      	movs	r2, #0
 8004440:	4619      	mov	r1, r3
 8004442:	f7ff fbc3 	bl	8003bcc <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff fb9b 	bl	8003b8a <LL_ADC_SetSamplingTimeCommonConfig>
 8004454:	e011      	b.n	800447a <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8004456:	bf00      	nop
 8004458:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6818      	ldr	r0, [r3, #0]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8004468:	461a      	mov	r2, r3
 800446a:	f7ff fbaf 	bl	8003bcc <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2100      	movs	r1, #0
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff fb88 	bl	8003b8a <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	695a      	ldr	r2, [r3, #20]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	08db      	lsrs	r3, r3, #3
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	2b04      	cmp	r3, #4
 800449a:	d022      	beq.n	80044e2 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6818      	ldr	r0, [r3, #0]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	6919      	ldr	r1, [r3, #16]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044ac:	f7ff fae2 	bl	8003a74 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	6919      	ldr	r1, [r3, #16]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	461a      	mov	r2, r3
 80044be:	f7ff fb2e 	bl	8003b1e <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6818      	ldr	r0, [r3, #0]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d102      	bne.n	80044d8 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 80044d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044d6:	e000      	b.n	80044da <HAL_ADCEx_InjectedConfigChannel+0x31e>
 80044d8:	2300      	movs	r3, #0
 80044da:	461a      	mov	r2, r3
 80044dc:	f7ff fb3a 	bl	8003b54 <LL_ADC_SetOffsetSaturation>
 80044e0:	e179      	b.n	80047d6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2100      	movs	r1, #0
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff fae7 	bl	8003abc <LL_ADC_GetOffsetChannel>
 80044ee:	4603      	mov	r3, r0
 80044f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10a      	bne.n	800450e <HAL_ADCEx_InjectedConfigChannel+0x352>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2100      	movs	r1, #0
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff fadc 	bl	8003abc <LL_ADC_GetOffsetChannel>
 8004504:	4603      	mov	r3, r0
 8004506:	0e9b      	lsrs	r3, r3, #26
 8004508:	f003 021f 	and.w	r2, r3, #31
 800450c:	e01e      	b.n	800454c <HAL_ADCEx_InjectedConfigChannel+0x390>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2100      	movs	r1, #0
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff fad1 	bl	8003abc <LL_ADC_GetOffsetChannel>
 800451a:	4603      	mov	r3, r0
 800451c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004520:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004524:	fa93 f3a3 	rbit	r3, r3
 8004528:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800452c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004530:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004534:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 800453c:	2320      	movs	r3, #32
 800453e:	e004      	b.n	800454a <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8004540:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004544:	fab3 f383 	clz	r3, r3
 8004548:	b2db      	uxtb	r3, r3
 800454a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004554:	2b00      	cmp	r3, #0
 8004556:	d105      	bne.n	8004564 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	0e9b      	lsrs	r3, r3, #26
 800455e:	f003 031f 	and.w	r3, r3, #31
 8004562:	e018      	b.n	8004596 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004570:	fa93 f3a3 	rbit	r3, r3
 8004574:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004578:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800457c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004580:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8004588:	2320      	movs	r3, #32
 800458a:	e004      	b.n	8004596 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 800458c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004590:	fab3 f383 	clz	r3, r3
 8004594:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004596:	429a      	cmp	r2, r3
 8004598:	d106      	bne.n	80045a8 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2200      	movs	r2, #0
 80045a0:	2100      	movs	r1, #0
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff faa0 	bl	8003ae8 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2101      	movs	r1, #1
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff fa84 	bl	8003abc <LL_ADC_GetOffsetChannel>
 80045b4:	4603      	mov	r3, r0
 80045b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10a      	bne.n	80045d4 <HAL_ADCEx_InjectedConfigChannel+0x418>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2101      	movs	r1, #1
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff fa79 	bl	8003abc <LL_ADC_GetOffsetChannel>
 80045ca:	4603      	mov	r3, r0
 80045cc:	0e9b      	lsrs	r3, r3, #26
 80045ce:	f003 021f 	and.w	r2, r3, #31
 80045d2:	e01e      	b.n	8004612 <HAL_ADCEx_InjectedConfigChannel+0x456>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2101      	movs	r1, #1
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff fa6e 	bl	8003abc <LL_ADC_GetOffsetChannel>
 80045e0:	4603      	mov	r3, r0
 80045e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80045ea:	fa93 f3a3 	rbit	r3, r3
 80045ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80045f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80045f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80045fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8004602:	2320      	movs	r3, #32
 8004604:	e004      	b.n	8004610 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8004606:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800460a:	fab3 f383 	clz	r3, r3
 800460e:	b2db      	uxtb	r3, r3
 8004610:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800461a:	2b00      	cmp	r3, #0
 800461c:	d105      	bne.n	800462a <HAL_ADCEx_InjectedConfigChannel+0x46e>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	0e9b      	lsrs	r3, r3, #26
 8004624:	f003 031f 	and.w	r3, r3, #31
 8004628:	e018      	b.n	800465c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004632:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004636:	fa93 f3a3 	rbit	r3, r3
 800463a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800463e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004642:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004646:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 800464e:	2320      	movs	r3, #32
 8004650:	e004      	b.n	800465c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8004652:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004656:	fab3 f383 	clz	r3, r3
 800465a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800465c:	429a      	cmp	r2, r3
 800465e:	d106      	bne.n	800466e <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2200      	movs	r2, #0
 8004666:	2101      	movs	r1, #1
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff fa3d 	bl	8003ae8 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2102      	movs	r1, #2
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff fa21 	bl	8003abc <LL_ADC_GetOffsetChannel>
 800467a:	4603      	mov	r3, r0
 800467c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10a      	bne.n	800469a <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2102      	movs	r1, #2
 800468a:	4618      	mov	r0, r3
 800468c:	f7ff fa16 	bl	8003abc <LL_ADC_GetOffsetChannel>
 8004690:	4603      	mov	r3, r0
 8004692:	0e9b      	lsrs	r3, r3, #26
 8004694:	f003 021f 	and.w	r2, r3, #31
 8004698:	e01e      	b.n	80046d8 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2102      	movs	r1, #2
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7ff fa0b 	bl	8003abc <LL_ADC_GetOffsetChannel>
 80046a6:	4603      	mov	r3, r0
 80046a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80046b0:	fa93 f3a3 	rbit	r3, r3
 80046b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80046b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80046c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 80046c8:	2320      	movs	r3, #32
 80046ca:	e004      	b.n	80046d6 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 80046cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046d0:	fab3 f383 	clz	r3, r3
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d105      	bne.n	80046f0 <HAL_ADCEx_InjectedConfigChannel+0x534>
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	0e9b      	lsrs	r3, r3, #26
 80046ea:	f003 031f 	and.w	r3, r3, #31
 80046ee:	e014      	b.n	800471a <HAL_ADCEx_InjectedConfigChannel+0x55e>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80046f8:	fa93 f3a3 	rbit	r3, r3
 80046fc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80046fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004700:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004704:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 800470c:	2320      	movs	r3, #32
 800470e:	e004      	b.n	800471a <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004710:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004714:	fab3 f383 	clz	r3, r3
 8004718:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800471a:	429a      	cmp	r2, r3
 800471c:	d106      	bne.n	800472c <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2200      	movs	r2, #0
 8004724:	2102      	movs	r1, #2
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff f9de 	bl	8003ae8 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2103      	movs	r1, #3
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff f9c2 	bl	8003abc <LL_ADC_GetOffsetChannel>
 8004738:	4603      	mov	r3, r0
 800473a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10a      	bne.n	8004758 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2103      	movs	r1, #3
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff f9b7 	bl	8003abc <LL_ADC_GetOffsetChannel>
 800474e:	4603      	mov	r3, r0
 8004750:	0e9b      	lsrs	r3, r3, #26
 8004752:	f003 021f 	and.w	r2, r3, #31
 8004756:	e017      	b.n	8004788 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2103      	movs	r1, #3
 800475e:	4618      	mov	r0, r3
 8004760:	f7ff f9ac 	bl	8003abc <LL_ADC_GetOffsetChannel>
 8004764:	4603      	mov	r3, r0
 8004766:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004768:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800476a:	fa93 f3a3 	rbit	r3, r3
 800476e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004770:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004772:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004774:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 800477a:	2320      	movs	r3, #32
 800477c:	e003      	b.n	8004786 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 800477e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004780:	fab3 f383 	clz	r3, r3
 8004784:	b2db      	uxtb	r3, r3
 8004786:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004790:	2b00      	cmp	r3, #0
 8004792:	d105      	bne.n	80047a0 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	0e9b      	lsrs	r3, r3, #26
 800479a:	f003 031f 	and.w	r3, r3, #31
 800479e:	e011      	b.n	80047c4 <HAL_ADCEx_InjectedConfigChannel+0x608>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047a8:	fa93 f3a3 	rbit	r3, r3
 80047ac:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80047ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047b0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80047b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 80047b8:	2320      	movs	r3, #32
 80047ba:	e003      	b.n	80047c4 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 80047bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047be:	fab3 f383 	clz	r3, r3
 80047c2:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d106      	bne.n	80047d6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2200      	movs	r2, #0
 80047ce:	2103      	movs	r1, #3
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff f989 	bl	8003ae8 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff fa54 	bl	8003c88 <LL_ADC_IsEnabled>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f040 8140 	bne.w	8004a68 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6818      	ldr	r0, [r3, #0]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	6819      	ldr	r1, [r3, #0]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	461a      	mov	r2, r3
 80047f6:	f7ff fa15 	bl	8003c24 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	4a8f      	ldr	r2, [pc, #572]	@ (8004a3c <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8004800:	4293      	cmp	r3, r2
 8004802:	f040 8131 	bne.w	8004a68 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10b      	bne.n	800482e <HAL_ADCEx_InjectedConfigChannel+0x672>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	0e9b      	lsrs	r3, r3, #26
 800481c:	3301      	adds	r3, #1
 800481e:	f003 031f 	and.w	r3, r3, #31
 8004822:	2b09      	cmp	r3, #9
 8004824:	bf94      	ite	ls
 8004826:	2301      	movls	r3, #1
 8004828:	2300      	movhi	r3, #0
 800482a:	b2db      	uxtb	r3, r3
 800482c:	e019      	b.n	8004862 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004834:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004836:	fa93 f3a3 	rbit	r3, r3
 800483a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800483c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800483e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004840:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8004846:	2320      	movs	r3, #32
 8004848:	e003      	b.n	8004852 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 800484a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800484c:	fab3 f383 	clz	r3, r3
 8004850:	b2db      	uxtb	r3, r3
 8004852:	3301      	adds	r3, #1
 8004854:	f003 031f 	and.w	r3, r3, #31
 8004858:	2b09      	cmp	r3, #9
 800485a:	bf94      	ite	ls
 800485c:	2301      	movls	r3, #1
 800485e:	2300      	movhi	r3, #0
 8004860:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004862:	2b00      	cmp	r3, #0
 8004864:	d079      	beq.n	800495a <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800486e:	2b00      	cmp	r3, #0
 8004870:	d107      	bne.n	8004882 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	0e9b      	lsrs	r3, r3, #26
 8004878:	3301      	adds	r3, #1
 800487a:	069b      	lsls	r3, r3, #26
 800487c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004880:	e015      	b.n	80048ae <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004888:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800488a:	fa93 f3a3 	rbit	r3, r3
 800488e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004890:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004892:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004894:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 800489a:	2320      	movs	r3, #32
 800489c:	e003      	b.n	80048a6 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 800489e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048a0:	fab3 f383 	clz	r3, r3
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	3301      	adds	r3, #1
 80048a8:	069b      	lsls	r3, r3, #26
 80048aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d109      	bne.n	80048ce <HAL_ADCEx_InjectedConfigChannel+0x712>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	0e9b      	lsrs	r3, r3, #26
 80048c0:	3301      	adds	r3, #1
 80048c2:	f003 031f 	and.w	r3, r3, #31
 80048c6:	2101      	movs	r1, #1
 80048c8:	fa01 f303 	lsl.w	r3, r1, r3
 80048cc:	e017      	b.n	80048fe <HAL_ADCEx_InjectedConfigChannel+0x742>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048d6:	fa93 f3a3 	rbit	r3, r3
 80048da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80048dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048de:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80048e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 80048e6:	2320      	movs	r3, #32
 80048e8:	e003      	b.n	80048f2 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 80048ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048ec:	fab3 f383 	clz	r3, r3
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	3301      	adds	r3, #1
 80048f4:	f003 031f 	and.w	r3, r3, #31
 80048f8:	2101      	movs	r1, #1
 80048fa:	fa01 f303 	lsl.w	r3, r1, r3
 80048fe:	ea42 0103 	orr.w	r1, r2, r3
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10a      	bne.n	8004924 <HAL_ADCEx_InjectedConfigChannel+0x768>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	0e9b      	lsrs	r3, r3, #26
 8004914:	3301      	adds	r3, #1
 8004916:	f003 021f 	and.w	r2, r3, #31
 800491a:	4613      	mov	r3, r2
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	4413      	add	r3, r2
 8004920:	051b      	lsls	r3, r3, #20
 8004922:	e018      	b.n	8004956 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800492c:	fa93 f3a3 	rbit	r3, r3
 8004930:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004934:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 800493c:	2320      	movs	r3, #32
 800493e:	e003      	b.n	8004948 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8004940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004942:	fab3 f383 	clz	r3, r3
 8004946:	b2db      	uxtb	r3, r3
 8004948:	3301      	adds	r3, #1
 800494a:	f003 021f 	and.w	r2, r3, #31
 800494e:	4613      	mov	r3, r2
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	4413      	add	r3, r2
 8004954:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004956:	430b      	orrs	r3, r1
 8004958:	e081      	b.n	8004a5e <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004962:	2b00      	cmp	r3, #0
 8004964:	d107      	bne.n	8004976 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	0e9b      	lsrs	r3, r3, #26
 800496c:	3301      	adds	r3, #1
 800496e:	069b      	lsls	r3, r3, #26
 8004970:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004974:	e015      	b.n	80049a2 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497e:	fa93 f3a3 	rbit	r3, r3
 8004982:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 800498e:	2320      	movs	r3, #32
 8004990:	e003      	b.n	800499a <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8004992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004994:	fab3 f383 	clz	r3, r3
 8004998:	b2db      	uxtb	r3, r3
 800499a:	3301      	adds	r3, #1
 800499c:	069b      	lsls	r3, r3, #26
 800499e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d109      	bne.n	80049c2 <HAL_ADCEx_InjectedConfigChannel+0x806>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	0e9b      	lsrs	r3, r3, #26
 80049b4:	3301      	adds	r3, #1
 80049b6:	f003 031f 	and.w	r3, r3, #31
 80049ba:	2101      	movs	r1, #1
 80049bc:	fa01 f303 	lsl.w	r3, r1, r3
 80049c0:	e017      	b.n	80049f2 <HAL_ADCEx_InjectedConfigChannel+0x836>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	fa93 f3a3 	rbit	r3, r3
 80049ce:	61bb      	str	r3, [r7, #24]
  return result;
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 80049da:	2320      	movs	r3, #32
 80049dc:	e003      	b.n	80049e6 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	fab3 f383 	clz	r3, r3
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	3301      	adds	r3, #1
 80049e8:	f003 031f 	and.w	r3, r3, #31
 80049ec:	2101      	movs	r1, #1
 80049ee:	fa01 f303 	lsl.w	r3, r1, r3
 80049f2:	ea42 0103 	orr.w	r1, r2, r3
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10d      	bne.n	8004a1e <HAL_ADCEx_InjectedConfigChannel+0x862>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	0e9b      	lsrs	r3, r3, #26
 8004a08:	3301      	adds	r3, #1
 8004a0a:	f003 021f 	and.w	r2, r3, #31
 8004a0e:	4613      	mov	r3, r2
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	4413      	add	r3, r2
 8004a14:	3b1e      	subs	r3, #30
 8004a16:	051b      	lsls	r3, r3, #20
 8004a18:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a1c:	e01e      	b.n	8004a5c <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	fa93 f3a3 	rbit	r3, r3
 8004a2a:	60fb      	str	r3, [r7, #12]
  return result;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d104      	bne.n	8004a40 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 8004a36:	2320      	movs	r3, #32
 8004a38:	e006      	b.n	8004a48 <HAL_ADCEx_InjectedConfigChannel+0x88c>
 8004a3a:	bf00      	nop
 8004a3c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	fab3 f383 	clz	r3, r3
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	3301      	adds	r3, #1
 8004a4a:	f003 021f 	and.w	r2, r3, #31
 8004a4e:	4613      	mov	r3, r2
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	4413      	add	r3, r2
 8004a54:	3b1e      	subs	r3, #30
 8004a56:	051b      	lsls	r3, r3, #20
 8004a58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a5c:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a62:	4619      	mov	r1, r3
 8004a64:	f7ff f8b2 	bl	8003bcc <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	4b3a      	ldr	r3, [pc, #232]	@ (8004b58 <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 8004a6e:	4013      	ands	r3, r2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d067      	beq.n	8004b44 <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a74:	4839      	ldr	r0, [pc, #228]	@ (8004b5c <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004a76:	f7fe ffef 	bl	8003a58 <LL_ADC_GetCommonPathInternalCh>
 8004a7a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a37      	ldr	r2, [pc, #220]	@ (8004b60 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d004      	beq.n	8004a92 <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a35      	ldr	r2, [pc, #212]	@ (8004b64 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d127      	bne.n	8004ae2 <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004a96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d121      	bne.n	8004ae2 <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004aa6:	d14d      	bne.n	8004b44 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004aa8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004aac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	482a      	ldr	r0, [pc, #168]	@ (8004b5c <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004ab4:	f7fe ffbd 	bl	8003a32 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004ab8:	4b2b      	ldr	r3, [pc, #172]	@ (8004b68 <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	099b      	lsrs	r3, r3, #6
 8004abe:	4a2b      	ldr	r2, [pc, #172]	@ (8004b6c <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8004ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac4:	099a      	lsrs	r2, r3, #6
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	4413      	add	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004ad0:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004ad2:	e002      	b.n	8004ada <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1f9      	bne.n	8004ad4 <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ae0:	e030      	b.n	8004b44 <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a22      	ldr	r2, [pc, #136]	@ (8004b70 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d113      	bne.n	8004b14 <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004aec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004af0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10d      	bne.n	8004b14 <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a1d      	ldr	r2, [pc, #116]	@ (8004b74 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d020      	beq.n	8004b44 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4813      	ldr	r0, [pc, #76]	@ (8004b5c <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004b0e:	f7fe ff90 	bl	8003a32 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b12:	e017      	b.n	8004b44 <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a17      	ldr	r2, [pc, #92]	@ (8004b78 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d112      	bne.n	8004b44 <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10c      	bne.n	8004b44 <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a11      	ldr	r2, [pc, #68]	@ (8004b74 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d007      	beq.n	8004b44 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b38:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4807      	ldr	r0, [pc, #28]	@ (8004b5c <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004b40:	f7fe ff77 	bl	8003a32 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b4c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	37d8      	adds	r7, #216	@ 0xd8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	80080000 	.word	0x80080000
 8004b5c:	50000300 	.word	0x50000300
 8004b60:	c3210000 	.word	0xc3210000
 8004b64:	90c00010 	.word	0x90c00010
 8004b68:	20000000 	.word	0x20000000
 8004b6c:	053e2d63 	.word	0x053e2d63
 8004b70:	c7520000 	.word	0xc7520000
 8004b74:	50000100 	.word	0x50000100
 8004b78:	cb840000 	.word	0xcb840000

08004b7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004b7c:	b590      	push	{r4, r7, lr}
 8004b7e:	b0a1      	sub	sp, #132	@ 0x84
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d101      	bne.n	8004b9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004b96:	2302      	movs	r3, #2
 8004b98:	e08b      	b.n	8004cb2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bb2:	d102      	bne.n	8004bba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004bb4:	4b41      	ldr	r3, [pc, #260]	@ (8004cbc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004bb6:	60bb      	str	r3, [r7, #8]
 8004bb8:	e001      	b.n	8004bbe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10b      	bne.n	8004bdc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc8:	f043 0220 	orr.w	r2, r3, #32
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e06a      	b.n	8004cb2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff f892 	bl	8003d08 <LL_ADC_REG_IsConversionOngoing>
 8004be4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff f88c 	bl	8003d08 <LL_ADC_REG_IsConversionOngoing>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d14c      	bne.n	8004c90 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004bf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d149      	bne.n	8004c90 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004bfc:	4b30      	ldr	r3, [pc, #192]	@ (8004cc0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004bfe:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d028      	beq.n	8004c5a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004c08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	6859      	ldr	r1, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004c1a:	035b      	lsls	r3, r3, #13
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c22:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c24:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004c28:	f7ff f82e 	bl	8003c88 <LL_ADC_IsEnabled>
 8004c2c:	4604      	mov	r4, r0
 8004c2e:	4823      	ldr	r0, [pc, #140]	@ (8004cbc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004c30:	f7ff f82a 	bl	8003c88 <LL_ADC_IsEnabled>
 8004c34:	4603      	mov	r3, r0
 8004c36:	4323      	orrs	r3, r4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d133      	bne.n	8004ca4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004c3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004c44:	f023 030f 	bic.w	r3, r3, #15
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	6811      	ldr	r1, [r2, #0]
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	6892      	ldr	r2, [r2, #8]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	431a      	orrs	r2, r3
 8004c54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c56:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c58:	e024      	b.n	8004ca4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004c5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c64:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c66:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004c6a:	f7ff f80d 	bl	8003c88 <LL_ADC_IsEnabled>
 8004c6e:	4604      	mov	r4, r0
 8004c70:	4812      	ldr	r0, [pc, #72]	@ (8004cbc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004c72:	f7ff f809 	bl	8003c88 <LL_ADC_IsEnabled>
 8004c76:	4603      	mov	r3, r0
 8004c78:	4323      	orrs	r3, r4
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d112      	bne.n	8004ca4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004c7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004c86:	f023 030f 	bic.w	r3, r3, #15
 8004c8a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004c8c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c8e:	e009      	b.n	8004ca4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c94:	f043 0220 	orr.w	r2, r3, #32
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004ca2:	e000      	b.n	8004ca6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ca4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004cae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3784      	adds	r7, #132	@ 0x84
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd90      	pop	{r4, r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	50000100 	.word	0x50000100
 8004cc0:	50000300 	.word	0x50000300

08004cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004d08 <__NVIC_SetPriorityGrouping+0x44>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004cf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cf6:	4a04      	ldr	r2, [pc, #16]	@ (8004d08 <__NVIC_SetPriorityGrouping+0x44>)
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	60d3      	str	r3, [r2, #12]
}
 8004cfc:	bf00      	nop
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	e000ed00 	.word	0xe000ed00

08004d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d10:	4b04      	ldr	r3, [pc, #16]	@ (8004d24 <__NVIC_GetPriorityGrouping+0x18>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	0a1b      	lsrs	r3, r3, #8
 8004d16:	f003 0307 	and.w	r3, r3, #7
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	e000ed00 	.word	0xe000ed00

08004d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	4603      	mov	r3, r0
 8004d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	db0b      	blt.n	8004d52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d3a:	79fb      	ldrb	r3, [r7, #7]
 8004d3c:	f003 021f 	and.w	r2, r3, #31
 8004d40:	4907      	ldr	r1, [pc, #28]	@ (8004d60 <__NVIC_EnableIRQ+0x38>)
 8004d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	2001      	movs	r0, #1
 8004d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8004d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d52:	bf00      	nop
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	e000e100 	.word	0xe000e100

08004d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	6039      	str	r1, [r7, #0]
 8004d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	db0a      	blt.n	8004d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	490c      	ldr	r1, [pc, #48]	@ (8004db0 <__NVIC_SetPriority+0x4c>)
 8004d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d82:	0112      	lsls	r2, r2, #4
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	440b      	add	r3, r1
 8004d88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d8c:	e00a      	b.n	8004da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	4908      	ldr	r1, [pc, #32]	@ (8004db4 <__NVIC_SetPriority+0x50>)
 8004d94:	79fb      	ldrb	r3, [r7, #7]
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	3b04      	subs	r3, #4
 8004d9c:	0112      	lsls	r2, r2, #4
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	440b      	add	r3, r1
 8004da2:	761a      	strb	r2, [r3, #24]
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	e000e100 	.word	0xe000e100
 8004db4:	e000ed00 	.word	0xe000ed00

08004db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b089      	sub	sp, #36	@ 0x24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	f1c3 0307 	rsb	r3, r3, #7
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	bf28      	it	cs
 8004dd6:	2304      	movcs	r3, #4
 8004dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	3304      	adds	r3, #4
 8004dde:	2b06      	cmp	r3, #6
 8004de0:	d902      	bls.n	8004de8 <NVIC_EncodePriority+0x30>
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	3b03      	subs	r3, #3
 8004de6:	e000      	b.n	8004dea <NVIC_EncodePriority+0x32>
 8004de8:	2300      	movs	r3, #0
 8004dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dec:	f04f 32ff 	mov.w	r2, #4294967295
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	fa02 f303 	lsl.w	r3, r2, r3
 8004df6:	43da      	mvns	r2, r3
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	401a      	ands	r2, r3
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e00:	f04f 31ff 	mov.w	r1, #4294967295
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0a:	43d9      	mvns	r1, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e10:	4313      	orrs	r3, r2
         );
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3724      	adds	r7, #36	@ 0x24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
	...

08004e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e30:	d301      	bcc.n	8004e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e32:	2301      	movs	r3, #1
 8004e34:	e00f      	b.n	8004e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e36:	4a0a      	ldr	r2, [pc, #40]	@ (8004e60 <SysTick_Config+0x40>)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e3e:	210f      	movs	r1, #15
 8004e40:	f04f 30ff 	mov.w	r0, #4294967295
 8004e44:	f7ff ff8e 	bl	8004d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e48:	4b05      	ldr	r3, [pc, #20]	@ (8004e60 <SysTick_Config+0x40>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e4e:	4b04      	ldr	r3, [pc, #16]	@ (8004e60 <SysTick_Config+0x40>)
 8004e50:	2207      	movs	r2, #7
 8004e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	e000e010 	.word	0xe000e010

08004e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7ff ff29 	bl	8004cc4 <__NVIC_SetPriorityGrouping>
}
 8004e72:	bf00      	nop
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b086      	sub	sp, #24
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	4603      	mov	r3, r0
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	607a      	str	r2, [r7, #4]
 8004e86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e88:	f7ff ff40 	bl	8004d0c <__NVIC_GetPriorityGrouping>
 8004e8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	68b9      	ldr	r1, [r7, #8]
 8004e92:	6978      	ldr	r0, [r7, #20]
 8004e94:	f7ff ff90 	bl	8004db8 <NVIC_EncodePriority>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff ff5f 	bl	8004d64 <__NVIC_SetPriority>
}
 8004ea6:	bf00      	nop
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b082      	sub	sp, #8
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7ff ff33 	bl	8004d28 <__NVIC_EnableIRQ>
}
 8004ec2:	bf00      	nop
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b082      	sub	sp, #8
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7ff ffa4 	bl	8004e20 <SysTick_Config>
 8004ed8:	4603      	mov	r3, r0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b082      	sub	sp, #8
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e014      	b.n	8004f1e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	791b      	ldrb	r3, [r3, #4]
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d105      	bne.n	8004f0a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7fc fabf 	bl	8001488 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08a      	sub	sp, #40	@ 0x28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f34:	2300      	movs	r3, #0
 8004f36:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d002      	beq.n	8004f44 <HAL_DAC_ConfigChannel+0x1c>
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e19e      	b.n	8005286 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	795b      	ldrb	r3, [r3, #5]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d101      	bne.n	8004f54 <HAL_DAC_ConfigChannel+0x2c>
 8004f50:	2302      	movs	r3, #2
 8004f52:	e198      	b.n	8005286 <HAL_DAC_ConfigChannel+0x35e>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2201      	movs	r2, #1
 8004f58:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d17a      	bne.n	800505e <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004f68:	f7fd fa74 	bl	8002454 <HAL_GetTick>
 8004f6c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d13d      	bne.n	8004ff0 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f74:	e018      	b.n	8004fa8 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004f76:	f7fd fa6d 	bl	8002454 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d911      	bls.n	8004fa8 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00a      	beq.n	8004fa8 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f043 0208 	orr.w	r2, r3, #8
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2203      	movs	r2, #3
 8004fa2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e16e      	b.n	8005286 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1df      	bne.n	8004f76 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004fbe:	641a      	str	r2, [r3, #64]	@ 0x40
 8004fc0:	e020      	b.n	8005004 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004fc2:	f7fd fa47 	bl	8002454 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d90f      	bls.n	8004ff0 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	da0a      	bge.n	8004ff0 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f043 0208 	orr.w	r2, r3, #8
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2203      	movs	r2, #3
 8004fea:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e14a      	b.n	8005286 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	dbe3      	blt.n	8004fc2 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005002:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f003 0310 	and.w	r3, r3, #16
 8005010:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005014:	fa01 f303 	lsl.w	r3, r1, r3
 8005018:	43db      	mvns	r3, r3
 800501a:	ea02 0103 	and.w	r1, r2, r3
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f003 0310 	and.w	r3, r3, #16
 8005028:	409a      	lsls	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f003 0310 	and.w	r3, r3, #16
 800503e:	21ff      	movs	r1, #255	@ 0xff
 8005040:	fa01 f303 	lsl.w	r3, r1, r3
 8005044:	43db      	mvns	r3, r3
 8005046:	ea02 0103 	and.w	r1, r2, r3
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f003 0310 	and.w	r3, r3, #16
 8005054:	409a      	lsls	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d11d      	bne.n	80050a2 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800506c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f003 0310 	and.w	r3, r3, #16
 8005074:	221f      	movs	r2, #31
 8005076:	fa02 f303 	lsl.w	r3, r2, r3
 800507a:	43db      	mvns	r3, r3
 800507c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800507e:	4013      	ands	r3, r2
 8005080:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f003 0310 	and.w	r3, r3, #16
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	fa02 f303 	lsl.w	r3, r2, r3
 8005094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005096:	4313      	orrs	r3, r2
 8005098:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050a0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f003 0310 	and.w	r3, r3, #16
 80050b0:	2207      	movs	r2, #7
 80050b2:	fa02 f303 	lsl.w	r3, r2, r3
 80050b6:	43db      	mvns	r3, r3
 80050b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050ba:	4013      	ands	r3, r2
 80050bc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d102      	bne.n	80050cc <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80050c6:	2300      	movs	r3, #0
 80050c8:	623b      	str	r3, [r7, #32]
 80050ca:	e00f      	b.n	80050ec <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d102      	bne.n	80050da <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80050d4:	2301      	movs	r3, #1
 80050d6:	623b      	str	r3, [r7, #32]
 80050d8:	e008      	b.n	80050ec <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d102      	bne.n	80050e8 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80050e2:	2301      	movs	r3, #1
 80050e4:	623b      	str	r3, [r7, #32]
 80050e6:	e001      	b.n	80050ec <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80050e8:	2300      	movs	r3, #0
 80050ea:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	6a3a      	ldr	r2, [r7, #32]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f003 0310 	and.w	r3, r3, #16
 8005102:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005106:	fa02 f303 	lsl.w	r3, r2, r3
 800510a:	43db      	mvns	r3, r3
 800510c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800510e:	4013      	ands	r3, r2
 8005110:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	791b      	ldrb	r3, [r3, #4]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d102      	bne.n	8005120 <HAL_DAC_ConfigChannel+0x1f8>
 800511a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800511e:	e000      	b.n	8005122 <HAL_DAC_ConfigChannel+0x1fa>
 8005120:	2300      	movs	r3, #0
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f003 0310 	and.w	r3, r3, #16
 800512e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005132:	fa02 f303 	lsl.w	r3, r2, r3
 8005136:	43db      	mvns	r3, r3
 8005138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800513a:	4013      	ands	r3, r2
 800513c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	795b      	ldrb	r3, [r3, #5]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d102      	bne.n	800514c <HAL_DAC_ConfigChannel+0x224>
 8005146:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800514a:	e000      	b.n	800514e <HAL_DAC_ConfigChannel+0x226>
 800514c:	2300      	movs	r3, #0
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4313      	orrs	r3, r2
 8005152:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005156:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800515a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b02      	cmp	r3, #2
 8005162:	d114      	bne.n	800518e <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005164:	f001 fac8 	bl	80066f8 <HAL_RCC_GetHCLKFreq>
 8005168:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	4a48      	ldr	r2, [pc, #288]	@ (8005290 <HAL_DAC_ConfigChannel+0x368>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d904      	bls.n	800517c <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005174:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005178:	627b      	str	r3, [r7, #36]	@ 0x24
 800517a:	e00f      	b.n	800519c <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	4a45      	ldr	r2, [pc, #276]	@ (8005294 <HAL_DAC_ConfigChannel+0x36c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d90a      	bls.n	800519a <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005186:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800518a:	627b      	str	r3, [r7, #36]	@ 0x24
 800518c:	e006      	b.n	800519c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005194:	4313      	orrs	r3, r2
 8005196:	627b      	str	r3, [r7, #36]	@ 0x24
 8005198:	e000      	b.n	800519c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800519a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f003 0310 	and.w	r3, r3, #16
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051aa:	4313      	orrs	r3, r2
 80051ac:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6819      	ldr	r1, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f003 0310 	and.w	r3, r3, #16
 80051c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80051c6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ca:	43da      	mvns	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	400a      	ands	r2, r1
 80051d2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f003 0310 	and.w	r3, r3, #16
 80051e2:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80051e6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ea:	43db      	mvns	r3, r3
 80051ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051ee:	4013      	ands	r3, r2
 80051f0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f003 0310 	and.w	r3, r3, #16
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005206:	4313      	orrs	r3, r2
 8005208:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005210:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6819      	ldr	r1, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f003 0310 	and.w	r3, r3, #16
 800521e:	22c0      	movs	r2, #192	@ 0xc0
 8005220:	fa02 f303 	lsl.w	r3, r2, r3
 8005224:	43da      	mvns	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	400a      	ands	r2, r1
 800522c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	089b      	lsrs	r3, r3, #2
 8005234:	f003 030f 	and.w	r3, r3, #15
 8005238:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	089b      	lsrs	r3, r3, #2
 8005240:	021b      	lsls	r3, r3, #8
 8005242:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	4313      	orrs	r3, r2
 800524a:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f003 0310 	and.w	r3, r3, #16
 8005258:	f640 710f 	movw	r1, #3855	@ 0xf0f
 800525c:	fa01 f303 	lsl.w	r3, r1, r3
 8005260:	43db      	mvns	r3, r3
 8005262:	ea02 0103 	and.w	r1, r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f003 0310 	and.w	r3, r3, #16
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	409a      	lsls	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2201      	movs	r2, #1
 800527c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005284:	7ffb      	ldrb	r3, [r7, #31]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3728      	adds	r7, #40	@ 0x28
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	09896800 	.word	0x09896800
 8005294:	04c4b400 	.word	0x04c4b400

08005298 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e08d      	b.n	80053c6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	461a      	mov	r2, r3
 80052b0:	4b47      	ldr	r3, [pc, #284]	@ (80053d0 <HAL_DMA_Init+0x138>)
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d80f      	bhi.n	80052d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	461a      	mov	r2, r3
 80052bc:	4b45      	ldr	r3, [pc, #276]	@ (80053d4 <HAL_DMA_Init+0x13c>)
 80052be:	4413      	add	r3, r2
 80052c0:	4a45      	ldr	r2, [pc, #276]	@ (80053d8 <HAL_DMA_Init+0x140>)
 80052c2:	fba2 2303 	umull	r2, r3, r2, r3
 80052c6:	091b      	lsrs	r3, r3, #4
 80052c8:	009a      	lsls	r2, r3, #2
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a42      	ldr	r2, [pc, #264]	@ (80053dc <HAL_DMA_Init+0x144>)
 80052d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80052d4:	e00e      	b.n	80052f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	461a      	mov	r2, r3
 80052dc:	4b40      	ldr	r3, [pc, #256]	@ (80053e0 <HAL_DMA_Init+0x148>)
 80052de:	4413      	add	r3, r2
 80052e0:	4a3d      	ldr	r2, [pc, #244]	@ (80053d8 <HAL_DMA_Init+0x140>)
 80052e2:	fba2 2303 	umull	r2, r3, r2, r3
 80052e6:	091b      	lsrs	r3, r3, #4
 80052e8:	009a      	lsls	r2, r3, #2
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a3c      	ldr	r2, [pc, #240]	@ (80053e4 <HAL_DMA_Init+0x14c>)
 80052f2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800530a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800530e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005318:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005324:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005330:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fa76 	bl	8005838 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005354:	d102      	bne.n	800535c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005370:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d010      	beq.n	800539c <HAL_DMA_Init+0x104>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	2b04      	cmp	r3, #4
 8005380:	d80c      	bhi.n	800539c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fa96 	bl	80058b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800538c:	2200      	movs	r2, #0
 800538e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005398:	605a      	str	r2, [r3, #4]
 800539a:	e008      	b.n	80053ae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	40020407 	.word	0x40020407
 80053d4:	bffdfff8 	.word	0xbffdfff8
 80053d8:	cccccccd 	.word	0xcccccccd
 80053dc:	40020000 	.word	0x40020000
 80053e0:	bffdfbf8 	.word	0xbffdfbf8
 80053e4:	40020400 	.word	0x40020400

080053e8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_DMA_Start_IT+0x20>
 8005404:	2302      	movs	r3, #2
 8005406:	e066      	b.n	80054d6 <HAL_DMA_Start_IT+0xee>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b01      	cmp	r3, #1
 800541a:	d155      	bne.n	80054c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2202      	movs	r2, #2
 8005420:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 0201 	bic.w	r2, r2, #1
 8005438:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	68b9      	ldr	r1, [r7, #8]
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 f9bb 	bl	80057bc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800544a:	2b00      	cmp	r3, #0
 800544c:	d008      	beq.n	8005460 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f042 020e 	orr.w	r2, r2, #14
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	e00f      	b.n	8005480 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 0204 	bic.w	r2, r2, #4
 800546e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 020a 	orr.w	r2, r2, #10
 800547e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d007      	beq.n	800549e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005498:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800549c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d007      	beq.n	80054b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 0201 	orr.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	e005      	b.n	80054d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80054d0:	2302      	movs	r3, #2
 80054d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80054d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3718      	adds	r7, #24
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054de:	b480      	push	{r7}
 80054e0:	b085      	sub	sp, #20
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d005      	beq.n	8005502 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2204      	movs	r2, #4
 80054fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	73fb      	strb	r3, [r7, #15]
 8005500:	e037      	b.n	8005572 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 020e 	bic.w	r2, r2, #14
 8005510:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800551c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005520:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0201 	bic.w	r2, r2, #1
 8005530:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005536:	f003 021f 	and.w	r2, r3, #31
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553e:	2101      	movs	r1, #1
 8005540:	fa01 f202 	lsl.w	r2, r1, r2
 8005544:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800554e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00c      	beq.n	8005572 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005562:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005566:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005570:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005582:	7bfb      	ldrb	r3, [r7, #15]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005598:	2300      	movs	r3, #0
 800559a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d00d      	beq.n	80055c4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2204      	movs	r2, #4
 80055ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	73fb      	strb	r3, [r7, #15]
 80055c2:	e047      	b.n	8005654 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 020e 	bic.w	r2, r2, #14
 80055d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0201 	bic.w	r2, r2, #1
 80055e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f8:	f003 021f 	and.w	r2, r3, #31
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005600:	2101      	movs	r1, #1
 8005602:	fa01 f202 	lsl.w	r2, r1, r2
 8005606:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005610:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00c      	beq.n	8005634 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005624:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005628:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005632:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	4798      	blx	r3
    }
  }
  return status;
 8005654:	7bfb      	ldrb	r3, [r7, #15]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b084      	sub	sp, #16
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567a:	f003 031f 	and.w	r3, r3, #31
 800567e:	2204      	movs	r2, #4
 8005680:	409a      	lsls	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4013      	ands	r3, r2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d026      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x7a>
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b00      	cmp	r3, #0
 8005692:	d021      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0320 	and.w	r3, r3, #32
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d107      	bne.n	80056b2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 0204 	bic.w	r2, r2, #4
 80056b0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056b6:	f003 021f 	and.w	r2, r3, #31
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056be:	2104      	movs	r1, #4
 80056c0:	fa01 f202 	lsl.w	r2, r1, r2
 80056c4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d071      	beq.n	80057b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80056d6:	e06c      	b.n	80057b2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056dc:	f003 031f 	and.w	r3, r3, #31
 80056e0:	2202      	movs	r2, #2
 80056e2:	409a      	lsls	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4013      	ands	r3, r2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d02e      	beq.n	800574a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d029      	beq.n	800574a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0320 	and.w	r3, r3, #32
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10b      	bne.n	800571c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 020a 	bic.w	r2, r2, #10
 8005712:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005720:	f003 021f 	and.w	r2, r3, #31
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005728:	2102      	movs	r1, #2
 800572a:	fa01 f202 	lsl.w	r2, r1, r2
 800572e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573c:	2b00      	cmp	r3, #0
 800573e:	d038      	beq.n	80057b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005748:	e033      	b.n	80057b2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800574e:	f003 031f 	and.w	r3, r3, #31
 8005752:	2208      	movs	r2, #8
 8005754:	409a      	lsls	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	4013      	ands	r3, r2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d02a      	beq.n	80057b4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f003 0308 	and.w	r3, r3, #8
 8005764:	2b00      	cmp	r3, #0
 8005766:	d025      	beq.n	80057b4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 020e 	bic.w	r2, r2, #14
 8005776:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800577c:	f003 021f 	and.w	r2, r3, #31
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005784:	2101      	movs	r1, #1
 8005786:	fa01 f202 	lsl.w	r2, r1, r2
 800578a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d004      	beq.n	80057b4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80057b2:	bf00      	nop
 80057b4:	bf00      	nop
}
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80057d2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d004      	beq.n	80057e6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80057e4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ea:	f003 021f 	and.w	r2, r3, #31
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f2:	2101      	movs	r1, #1
 80057f4:	fa01 f202 	lsl.w	r2, r1, r2
 80057f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	2b10      	cmp	r3, #16
 8005808:	d108      	bne.n	800581c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800581a:	e007      	b.n	800582c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	60da      	str	r2, [r3, #12]
}
 800582c:	bf00      	nop
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	461a      	mov	r2, r3
 8005846:	4b16      	ldr	r3, [pc, #88]	@ (80058a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005848:	429a      	cmp	r2, r3
 800584a:	d802      	bhi.n	8005852 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800584c:	4b15      	ldr	r3, [pc, #84]	@ (80058a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	e001      	b.n	8005856 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005852:	4b15      	ldr	r3, [pc, #84]	@ (80058a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005854:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	b2db      	uxtb	r3, r3
 8005860:	3b08      	subs	r3, #8
 8005862:	4a12      	ldr	r2, [pc, #72]	@ (80058ac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005864:	fba2 2303 	umull	r2, r3, r2, r3
 8005868:	091b      	lsrs	r3, r3, #4
 800586a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005870:	089b      	lsrs	r3, r3, #2
 8005872:	009a      	lsls	r2, r3, #2
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	4413      	add	r3, r2
 8005878:	461a      	mov	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a0b      	ldr	r2, [pc, #44]	@ (80058b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005882:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f003 031f 	and.w	r3, r3, #31
 800588a:	2201      	movs	r2, #1
 800588c:	409a      	lsls	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005892:	bf00      	nop
 8005894:	371c      	adds	r7, #28
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	40020407 	.word	0x40020407
 80058a4:	40020800 	.word	0x40020800
 80058a8:	40020820 	.word	0x40020820
 80058ac:	cccccccd 	.word	0xcccccccd
 80058b0:	40020880 	.word	0x40020880

080058b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	4b0b      	ldr	r3, [pc, #44]	@ (80058f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80058c8:	4413      	add	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	461a      	mov	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a08      	ldr	r2, [pc, #32]	@ (80058f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80058d6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	3b01      	subs	r3, #1
 80058dc:	f003 031f 	and.w	r3, r3, #31
 80058e0:	2201      	movs	r2, #1
 80058e2:	409a      	lsls	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80058e8:	bf00      	nop
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	1000823f 	.word	0x1000823f
 80058f8:	40020940 	.word	0x40020940

080058fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b087      	sub	sp, #28
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005906:	2300      	movs	r3, #0
 8005908:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800590a:	e15a      	b.n	8005bc2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	2101      	movs	r1, #1
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	fa01 f303 	lsl.w	r3, r1, r3
 8005918:	4013      	ands	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 814c 	beq.w	8005bbc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f003 0303 	and.w	r3, r3, #3
 800592c:	2b01      	cmp	r3, #1
 800592e:	d005      	beq.n	800593c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005938:	2b02      	cmp	r3, #2
 800593a:	d130      	bne.n	800599e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	2203      	movs	r2, #3
 8005948:	fa02 f303 	lsl.w	r3, r2, r3
 800594c:	43db      	mvns	r3, r3
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4013      	ands	r3, r2
 8005952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	68da      	ldr	r2, [r3, #12]
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	fa02 f303 	lsl.w	r3, r2, r3
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	4313      	orrs	r3, r2
 8005964:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005972:	2201      	movs	r2, #1
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	fa02 f303 	lsl.w	r3, r2, r3
 800597a:	43db      	mvns	r3, r3
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	4013      	ands	r3, r2
 8005980:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	091b      	lsrs	r3, r3, #4
 8005988:	f003 0201 	and.w	r2, r3, #1
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	fa02 f303 	lsl.w	r3, r2, r3
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	4313      	orrs	r3, r2
 8005996:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	2b03      	cmp	r3, #3
 80059a8:	d017      	beq.n	80059da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	2203      	movs	r2, #3
 80059b6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ba:	43db      	mvns	r3, r3
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	4013      	ands	r3, r2
 80059c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	fa02 f303 	lsl.w	r3, r2, r3
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f003 0303 	and.w	r3, r3, #3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d123      	bne.n	8005a2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	08da      	lsrs	r2, r3, #3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	3208      	adds	r2, #8
 80059ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f003 0307 	and.w	r3, r3, #7
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	220f      	movs	r2, #15
 80059fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005a02:	43db      	mvns	r3, r3
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	4013      	ands	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	691a      	ldr	r2, [r3, #16]
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f003 0307 	and.w	r3, r3, #7
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	08da      	lsrs	r2, r3, #3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	3208      	adds	r2, #8
 8005a28:	6939      	ldr	r1, [r7, #16]
 8005a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	2203      	movs	r2, #3
 8005a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3e:	43db      	mvns	r3, r3
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	4013      	ands	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f003 0203 	and.w	r2, r3, #3
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	fa02 f303 	lsl.w	r3, r2, r3
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 80a6 	beq.w	8005bbc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a70:	4b5b      	ldr	r3, [pc, #364]	@ (8005be0 <HAL_GPIO_Init+0x2e4>)
 8005a72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a74:	4a5a      	ldr	r2, [pc, #360]	@ (8005be0 <HAL_GPIO_Init+0x2e4>)
 8005a76:	f043 0301 	orr.w	r3, r3, #1
 8005a7a:	6613      	str	r3, [r2, #96]	@ 0x60
 8005a7c:	4b58      	ldr	r3, [pc, #352]	@ (8005be0 <HAL_GPIO_Init+0x2e4>)
 8005a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	60bb      	str	r3, [r7, #8]
 8005a86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a88:	4a56      	ldr	r2, [pc, #344]	@ (8005be4 <HAL_GPIO_Init+0x2e8>)
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	089b      	lsrs	r3, r3, #2
 8005a8e:	3302      	adds	r3, #2
 8005a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f003 0303 	and.w	r3, r3, #3
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	220f      	movs	r2, #15
 8005aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa4:	43db      	mvns	r3, r3
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005ab2:	d01f      	beq.n	8005af4 <HAL_GPIO_Init+0x1f8>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a4c      	ldr	r2, [pc, #304]	@ (8005be8 <HAL_GPIO_Init+0x2ec>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d019      	beq.n	8005af0 <HAL_GPIO_Init+0x1f4>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a4b      	ldr	r2, [pc, #300]	@ (8005bec <HAL_GPIO_Init+0x2f0>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d013      	beq.n	8005aec <HAL_GPIO_Init+0x1f0>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a4a      	ldr	r2, [pc, #296]	@ (8005bf0 <HAL_GPIO_Init+0x2f4>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d00d      	beq.n	8005ae8 <HAL_GPIO_Init+0x1ec>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a49      	ldr	r2, [pc, #292]	@ (8005bf4 <HAL_GPIO_Init+0x2f8>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d007      	beq.n	8005ae4 <HAL_GPIO_Init+0x1e8>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a48      	ldr	r2, [pc, #288]	@ (8005bf8 <HAL_GPIO_Init+0x2fc>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d101      	bne.n	8005ae0 <HAL_GPIO_Init+0x1e4>
 8005adc:	2305      	movs	r3, #5
 8005ade:	e00a      	b.n	8005af6 <HAL_GPIO_Init+0x1fa>
 8005ae0:	2306      	movs	r3, #6
 8005ae2:	e008      	b.n	8005af6 <HAL_GPIO_Init+0x1fa>
 8005ae4:	2304      	movs	r3, #4
 8005ae6:	e006      	b.n	8005af6 <HAL_GPIO_Init+0x1fa>
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e004      	b.n	8005af6 <HAL_GPIO_Init+0x1fa>
 8005aec:	2302      	movs	r3, #2
 8005aee:	e002      	b.n	8005af6 <HAL_GPIO_Init+0x1fa>
 8005af0:	2301      	movs	r3, #1
 8005af2:	e000      	b.n	8005af6 <HAL_GPIO_Init+0x1fa>
 8005af4:	2300      	movs	r3, #0
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	f002 0203 	and.w	r2, r2, #3
 8005afc:	0092      	lsls	r2, r2, #2
 8005afe:	4093      	lsls	r3, r2
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b06:	4937      	ldr	r1, [pc, #220]	@ (8005be4 <HAL_GPIO_Init+0x2e8>)
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	089b      	lsrs	r3, r3, #2
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b14:	4b39      	ldr	r3, [pc, #228]	@ (8005bfc <HAL_GPIO_Init+0x300>)
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	43db      	mvns	r3, r3
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	4013      	ands	r3, r2
 8005b22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005b38:	4a30      	ldr	r2, [pc, #192]	@ (8005bfc <HAL_GPIO_Init+0x300>)
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005b3e:	4b2f      	ldr	r3, [pc, #188]	@ (8005bfc <HAL_GPIO_Init+0x300>)
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	43db      	mvns	r3, r3
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005b62:	4a26      	ldr	r2, [pc, #152]	@ (8005bfc <HAL_GPIO_Init+0x300>)
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005b68:	4b24      	ldr	r3, [pc, #144]	@ (8005bfc <HAL_GPIO_Init+0x300>)
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	43db      	mvns	r3, r3
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4013      	ands	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8005bfc <HAL_GPIO_Init+0x300>)
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005b92:	4b1a      	ldr	r3, [pc, #104]	@ (8005bfc <HAL_GPIO_Init+0x300>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	43db      	mvns	r3, r3
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005bb6:	4a11      	ldr	r2, [pc, #68]	@ (8005bfc <HAL_GPIO_Init+0x300>)
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f47f ae9d 	bne.w	800590c <HAL_GPIO_Init+0x10>
  }
}
 8005bd2:	bf00      	nop
 8005bd4:	bf00      	nop
 8005bd6:	371c      	adds	r7, #28
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	40021000 	.word	0x40021000
 8005be4:	40010000 	.word	0x40010000
 8005be8:	48000400 	.word	0x48000400
 8005bec:	48000800 	.word	0x48000800
 8005bf0:	48000c00 	.word	0x48000c00
 8005bf4:	48001000 	.word	0x48001000
 8005bf8:	48001400 	.word	0x48001400
 8005bfc:	40010400 	.word	0x40010400

08005c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	460b      	mov	r3, r1
 8005c0a:	807b      	strh	r3, [r7, #2]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c10:	787b      	ldrb	r3, [r7, #1]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c16:	887a      	ldrh	r2, [r7, #2]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005c1c:	e002      	b.n	8005c24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005c1e:	887a      	ldrh	r2, [r7, #2]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d141      	bne.n	8005cc2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c3e:	4b4b      	ldr	r3, [pc, #300]	@ (8005d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005c46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c4a:	d131      	bne.n	8005cb0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c4c:	4b47      	ldr	r3, [pc, #284]	@ (8005d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c52:	4a46      	ldr	r2, [pc, #280]	@ (8005d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c5c:	4b43      	ldr	r3, [pc, #268]	@ (8005d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005c64:	4a41      	ldr	r2, [pc, #260]	@ (8005d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c6c:	4b40      	ldr	r3, [pc, #256]	@ (8005d70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2232      	movs	r2, #50	@ 0x32
 8005c72:	fb02 f303 	mul.w	r3, r2, r3
 8005c76:	4a3f      	ldr	r2, [pc, #252]	@ (8005d74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005c78:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7c:	0c9b      	lsrs	r3, r3, #18
 8005c7e:	3301      	adds	r3, #1
 8005c80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c82:	e002      	b.n	8005c8a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3b01      	subs	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c8a:	4b38      	ldr	r3, [pc, #224]	@ (8005d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c96:	d102      	bne.n	8005c9e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1f2      	bne.n	8005c84 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c9e:	4b33      	ldr	r3, [pc, #204]	@ (8005d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005caa:	d158      	bne.n	8005d5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e057      	b.n	8005d60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cb0:	4b2e      	ldr	r3, [pc, #184]	@ (8005d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cb6:	4a2d      	ldr	r2, [pc, #180]	@ (8005d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005cc0:	e04d      	b.n	8005d5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cc8:	d141      	bne.n	8005d4e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005cca:	4b28      	ldr	r3, [pc, #160]	@ (8005d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005cd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cd6:	d131      	bne.n	8005d3c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cd8:	4b24      	ldr	r3, [pc, #144]	@ (8005d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cde:	4a23      	ldr	r2, [pc, #140]	@ (8005d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ce0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ce4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ce8:	4b20      	ldr	r3, [pc, #128]	@ (8005d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005cf0:	4a1e      	ldr	r2, [pc, #120]	@ (8005d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005cf6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8005d70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2232      	movs	r2, #50	@ 0x32
 8005cfe:	fb02 f303 	mul.w	r3, r2, r3
 8005d02:	4a1c      	ldr	r2, [pc, #112]	@ (8005d74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d04:	fba2 2303 	umull	r2, r3, r2, r3
 8005d08:	0c9b      	lsrs	r3, r3, #18
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d0e:	e002      	b.n	8005d16 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	3b01      	subs	r3, #1
 8005d14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d16:	4b15      	ldr	r3, [pc, #84]	@ (8005d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d22:	d102      	bne.n	8005d2a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1f2      	bne.n	8005d10 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d2a:	4b10      	ldr	r3, [pc, #64]	@ (8005d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d36:	d112      	bne.n	8005d5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e011      	b.n	8005d60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d42:	4a0a      	ldr	r2, [pc, #40]	@ (8005d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005d4c:	e007      	b.n	8005d5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005d4e:	4b07      	ldr	r3, [pc, #28]	@ (8005d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d56:	4a05      	ldr	r2, [pc, #20]	@ (8005d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d5c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	40007000 	.word	0x40007000
 8005d70:	20000000 	.word	0x20000000
 8005d74:	431bde83 	.word	0x431bde83

08005d78 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005d7c:	4b05      	ldr	r3, [pc, #20]	@ (8005d94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	4a04      	ldr	r2, [pc, #16]	@ (8005d94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005d82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d86:	6093      	str	r3, [r2, #8]
}
 8005d88:	bf00      	nop
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	40007000 	.word	0x40007000

08005d98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b088      	sub	sp, #32
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e2fe      	b.n	80063a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d075      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005db6:	4b97      	ldr	r3, [pc, #604]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f003 030c 	and.w	r3, r3, #12
 8005dbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dc0:	4b94      	ldr	r3, [pc, #592]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f003 0303 	and.w	r3, r3, #3
 8005dc8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	2b0c      	cmp	r3, #12
 8005dce:	d102      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x3e>
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d002      	beq.n	8005ddc <HAL_RCC_OscConfig+0x44>
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d10b      	bne.n	8005df4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ddc:	4b8d      	ldr	r3, [pc, #564]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d05b      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x108>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d157      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e2d9      	b.n	80063a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dfc:	d106      	bne.n	8005e0c <HAL_RCC_OscConfig+0x74>
 8005dfe:	4b85      	ldr	r3, [pc, #532]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a84      	ldr	r2, [pc, #528]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e08:	6013      	str	r3, [r2, #0]
 8005e0a:	e01d      	b.n	8005e48 <HAL_RCC_OscConfig+0xb0>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e14:	d10c      	bne.n	8005e30 <HAL_RCC_OscConfig+0x98>
 8005e16:	4b7f      	ldr	r3, [pc, #508]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a7e      	ldr	r2, [pc, #504]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005e1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	4b7c      	ldr	r3, [pc, #496]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a7b      	ldr	r2, [pc, #492]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005e28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	e00b      	b.n	8005e48 <HAL_RCC_OscConfig+0xb0>
 8005e30:	4b78      	ldr	r3, [pc, #480]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a77      	ldr	r2, [pc, #476]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005e36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	4b75      	ldr	r3, [pc, #468]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a74      	ldr	r2, [pc, #464]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005e42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d013      	beq.n	8005e78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e50:	f7fc fb00 	bl	8002454 <HAL_GetTick>
 8005e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e56:	e008      	b.n	8005e6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e58:	f7fc fafc 	bl	8002454 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b64      	cmp	r3, #100	@ 0x64
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e29e      	b.n	80063a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e6a:	4b6a      	ldr	r3, [pc, #424]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0f0      	beq.n	8005e58 <HAL_RCC_OscConfig+0xc0>
 8005e76:	e014      	b.n	8005ea2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e78:	f7fc faec 	bl	8002454 <HAL_GetTick>
 8005e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e80:	f7fc fae8 	bl	8002454 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b64      	cmp	r3, #100	@ 0x64
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e28a      	b.n	80063a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e92:	4b60      	ldr	r3, [pc, #384]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1f0      	bne.n	8005e80 <HAL_RCC_OscConfig+0xe8>
 8005e9e:	e000      	b.n	8005ea2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d075      	beq.n	8005f9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eae:	4b59      	ldr	r3, [pc, #356]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f003 030c 	and.w	r3, r3, #12
 8005eb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005eb8:	4b56      	ldr	r3, [pc, #344]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f003 0303 	and.w	r3, r3, #3
 8005ec0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	2b0c      	cmp	r3, #12
 8005ec6:	d102      	bne.n	8005ece <HAL_RCC_OscConfig+0x136>
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d002      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x13c>
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	2b04      	cmp	r3, #4
 8005ed2:	d11f      	bne.n	8005f14 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ed4:	4b4f      	ldr	r3, [pc, #316]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d005      	beq.n	8005eec <HAL_RCC_OscConfig+0x154>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e25d      	b.n	80063a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eec:	4b49      	ldr	r3, [pc, #292]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	061b      	lsls	r3, r3, #24
 8005efa:	4946      	ldr	r1, [pc, #280]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005f00:	4b45      	ldr	r3, [pc, #276]	@ (8006018 <HAL_RCC_OscConfig+0x280>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7fc fa59 	bl	80023bc <HAL_InitTick>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d043      	beq.n	8005f98 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e249      	b.n	80063a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d023      	beq.n	8005f64 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f1c:	4b3d      	ldr	r3, [pc, #244]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a3c      	ldr	r2, [pc, #240]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005f22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f28:	f7fc fa94 	bl	8002454 <HAL_GetTick>
 8005f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f2e:	e008      	b.n	8005f42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f30:	f7fc fa90 	bl	8002454 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e232      	b.n	80063a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f42:	4b34      	ldr	r3, [pc, #208]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d0f0      	beq.n	8005f30 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f4e:	4b31      	ldr	r3, [pc, #196]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	061b      	lsls	r3, r3, #24
 8005f5c:	492d      	ldr	r1, [pc, #180]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	604b      	str	r3, [r1, #4]
 8005f62:	e01a      	b.n	8005f9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f64:	4b2b      	ldr	r3, [pc, #172]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a2a      	ldr	r2, [pc, #168]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005f6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f70:	f7fc fa70 	bl	8002454 <HAL_GetTick>
 8005f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f76:	e008      	b.n	8005f8a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f78:	f7fc fa6c 	bl	8002454 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e20e      	b.n	80063a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f8a:	4b22      	ldr	r3, [pc, #136]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1f0      	bne.n	8005f78 <HAL_RCC_OscConfig+0x1e0>
 8005f96:	e000      	b.n	8005f9a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0308 	and.w	r3, r3, #8
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d041      	beq.n	800602a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d01c      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fae:	4b19      	ldr	r3, [pc, #100]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fb4:	4a17      	ldr	r2, [pc, #92]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005fb6:	f043 0301 	orr.w	r3, r3, #1
 8005fba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fbe:	f7fc fa49 	bl	8002454 <HAL_GetTick>
 8005fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fc4:	e008      	b.n	8005fd8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fc6:	f7fc fa45 	bl	8002454 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d901      	bls.n	8005fd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e1e7      	b.n	80063a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d0ef      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x22e>
 8005fe6:	e020      	b.n	800602a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fee:	4a09      	ldr	r2, [pc, #36]	@ (8006014 <HAL_RCC_OscConfig+0x27c>)
 8005ff0:	f023 0301 	bic.w	r3, r3, #1
 8005ff4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff8:	f7fc fa2c 	bl	8002454 <HAL_GetTick>
 8005ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ffe:	e00d      	b.n	800601c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006000:	f7fc fa28 	bl	8002454 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b02      	cmp	r3, #2
 800600c:	d906      	bls.n	800601c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e1ca      	b.n	80063a8 <HAL_RCC_OscConfig+0x610>
 8006012:	bf00      	nop
 8006014:	40021000 	.word	0x40021000
 8006018:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800601c:	4b8c      	ldr	r3, [pc, #560]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 800601e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1ea      	bne.n	8006000 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0304 	and.w	r3, r3, #4
 8006032:	2b00      	cmp	r3, #0
 8006034:	f000 80a6 	beq.w	8006184 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006038:	2300      	movs	r3, #0
 800603a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800603c:	4b84      	ldr	r3, [pc, #528]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 800603e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006040:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <HAL_RCC_OscConfig+0x2b4>
 8006048:	2301      	movs	r3, #1
 800604a:	e000      	b.n	800604e <HAL_RCC_OscConfig+0x2b6>
 800604c:	2300      	movs	r3, #0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00d      	beq.n	800606e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006052:	4b7f      	ldr	r3, [pc, #508]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 8006054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006056:	4a7e      	ldr	r2, [pc, #504]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 8006058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800605c:	6593      	str	r3, [r2, #88]	@ 0x58
 800605e:	4b7c      	ldr	r3, [pc, #496]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 8006060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800606a:	2301      	movs	r3, #1
 800606c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800606e:	4b79      	ldr	r3, [pc, #484]	@ (8006254 <HAL_RCC_OscConfig+0x4bc>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006076:	2b00      	cmp	r3, #0
 8006078:	d118      	bne.n	80060ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800607a:	4b76      	ldr	r3, [pc, #472]	@ (8006254 <HAL_RCC_OscConfig+0x4bc>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a75      	ldr	r2, [pc, #468]	@ (8006254 <HAL_RCC_OscConfig+0x4bc>)
 8006080:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006086:	f7fc f9e5 	bl	8002454 <HAL_GetTick>
 800608a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800608c:	e008      	b.n	80060a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800608e:	f7fc f9e1 	bl	8002454 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	2b02      	cmp	r3, #2
 800609a:	d901      	bls.n	80060a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e183      	b.n	80063a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060a0:	4b6c      	ldr	r3, [pc, #432]	@ (8006254 <HAL_RCC_OscConfig+0x4bc>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d0f0      	beq.n	800608e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d108      	bne.n	80060c6 <HAL_RCC_OscConfig+0x32e>
 80060b4:	4b66      	ldr	r3, [pc, #408]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 80060b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ba:	4a65      	ldr	r2, [pc, #404]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 80060bc:	f043 0301 	orr.w	r3, r3, #1
 80060c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80060c4:	e024      	b.n	8006110 <HAL_RCC_OscConfig+0x378>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	2b05      	cmp	r3, #5
 80060cc:	d110      	bne.n	80060f0 <HAL_RCC_OscConfig+0x358>
 80060ce:	4b60      	ldr	r3, [pc, #384]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 80060d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060d4:	4a5e      	ldr	r2, [pc, #376]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 80060d6:	f043 0304 	orr.w	r3, r3, #4
 80060da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80060de:	4b5c      	ldr	r3, [pc, #368]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 80060e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060e4:	4a5a      	ldr	r2, [pc, #360]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 80060e6:	f043 0301 	orr.w	r3, r3, #1
 80060ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80060ee:	e00f      	b.n	8006110 <HAL_RCC_OscConfig+0x378>
 80060f0:	4b57      	ldr	r3, [pc, #348]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 80060f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060f6:	4a56      	ldr	r2, [pc, #344]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 80060f8:	f023 0301 	bic.w	r3, r3, #1
 80060fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006100:	4b53      	ldr	r3, [pc, #332]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 8006102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006106:	4a52      	ldr	r2, [pc, #328]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 8006108:	f023 0304 	bic.w	r3, r3, #4
 800610c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d016      	beq.n	8006146 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006118:	f7fc f99c 	bl	8002454 <HAL_GetTick>
 800611c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800611e:	e00a      	b.n	8006136 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006120:	f7fc f998 	bl	8002454 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800612e:	4293      	cmp	r3, r2
 8006130:	d901      	bls.n	8006136 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e138      	b.n	80063a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006136:	4b46      	ldr	r3, [pc, #280]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 8006138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d0ed      	beq.n	8006120 <HAL_RCC_OscConfig+0x388>
 8006144:	e015      	b.n	8006172 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006146:	f7fc f985 	bl	8002454 <HAL_GetTick>
 800614a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800614c:	e00a      	b.n	8006164 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800614e:	f7fc f981 	bl	8002454 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	f241 3288 	movw	r2, #5000	@ 0x1388
 800615c:	4293      	cmp	r3, r2
 800615e:	d901      	bls.n	8006164 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e121      	b.n	80063a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006164:	4b3a      	ldr	r3, [pc, #232]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 8006166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1ed      	bne.n	800614e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006172:	7ffb      	ldrb	r3, [r7, #31]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d105      	bne.n	8006184 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006178:	4b35      	ldr	r3, [pc, #212]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 800617a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800617c:	4a34      	ldr	r2, [pc, #208]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 800617e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006182:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0320 	and.w	r3, r3, #32
 800618c:	2b00      	cmp	r3, #0
 800618e:	d03c      	beq.n	800620a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d01c      	beq.n	80061d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006198:	4b2d      	ldr	r3, [pc, #180]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 800619a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800619e:	4a2c      	ldr	r2, [pc, #176]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 80061a0:	f043 0301 	orr.w	r3, r3, #1
 80061a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a8:	f7fc f954 	bl	8002454 <HAL_GetTick>
 80061ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061ae:	e008      	b.n	80061c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061b0:	f7fc f950 	bl	8002454 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e0f2      	b.n	80063a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061c2:	4b23      	ldr	r3, [pc, #140]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 80061c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d0ef      	beq.n	80061b0 <HAL_RCC_OscConfig+0x418>
 80061d0:	e01b      	b.n	800620a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80061d2:	4b1f      	ldr	r3, [pc, #124]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 80061d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 80061da:	f023 0301 	bic.w	r3, r3, #1
 80061de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061e2:	f7fc f937 	bl	8002454 <HAL_GetTick>
 80061e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80061e8:	e008      	b.n	80061fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061ea:	f7fc f933 	bl	8002454 <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d901      	bls.n	80061fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e0d5      	b.n	80063a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80061fc:	4b14      	ldr	r3, [pc, #80]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 80061fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1ef      	bne.n	80061ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 80c9 	beq.w	80063a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006214:	4b0e      	ldr	r3, [pc, #56]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f003 030c 	and.w	r3, r3, #12
 800621c:	2b0c      	cmp	r3, #12
 800621e:	f000 8083 	beq.w	8006328 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	2b02      	cmp	r3, #2
 8006228:	d15e      	bne.n	80062e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800622a:	4b09      	ldr	r3, [pc, #36]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a08      	ldr	r2, [pc, #32]	@ (8006250 <HAL_RCC_OscConfig+0x4b8>)
 8006230:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006236:	f7fc f90d 	bl	8002454 <HAL_GetTick>
 800623a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800623c:	e00c      	b.n	8006258 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800623e:	f7fc f909 	bl	8002454 <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	2b02      	cmp	r3, #2
 800624a:	d905      	bls.n	8006258 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e0ab      	b.n	80063a8 <HAL_RCC_OscConfig+0x610>
 8006250:	40021000 	.word	0x40021000
 8006254:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006258:	4b55      	ldr	r3, [pc, #340]	@ (80063b0 <HAL_RCC_OscConfig+0x618>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1ec      	bne.n	800623e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006264:	4b52      	ldr	r3, [pc, #328]	@ (80063b0 <HAL_RCC_OscConfig+0x618>)
 8006266:	68da      	ldr	r2, [r3, #12]
 8006268:	4b52      	ldr	r3, [pc, #328]	@ (80063b4 <HAL_RCC_OscConfig+0x61c>)
 800626a:	4013      	ands	r3, r2
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	6a11      	ldr	r1, [r2, #32]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006274:	3a01      	subs	r2, #1
 8006276:	0112      	lsls	r2, r2, #4
 8006278:	4311      	orrs	r1, r2
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800627e:	0212      	lsls	r2, r2, #8
 8006280:	4311      	orrs	r1, r2
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006286:	0852      	lsrs	r2, r2, #1
 8006288:	3a01      	subs	r2, #1
 800628a:	0552      	lsls	r2, r2, #21
 800628c:	4311      	orrs	r1, r2
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006292:	0852      	lsrs	r2, r2, #1
 8006294:	3a01      	subs	r2, #1
 8006296:	0652      	lsls	r2, r2, #25
 8006298:	4311      	orrs	r1, r2
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800629e:	06d2      	lsls	r2, r2, #27
 80062a0:	430a      	orrs	r2, r1
 80062a2:	4943      	ldr	r1, [pc, #268]	@ (80063b0 <HAL_RCC_OscConfig+0x618>)
 80062a4:	4313      	orrs	r3, r2
 80062a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062a8:	4b41      	ldr	r3, [pc, #260]	@ (80063b0 <HAL_RCC_OscConfig+0x618>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a40      	ldr	r2, [pc, #256]	@ (80063b0 <HAL_RCC_OscConfig+0x618>)
 80062ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80062b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062b4:	4b3e      	ldr	r3, [pc, #248]	@ (80063b0 <HAL_RCC_OscConfig+0x618>)
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	4a3d      	ldr	r2, [pc, #244]	@ (80063b0 <HAL_RCC_OscConfig+0x618>)
 80062ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80062be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c0:	f7fc f8c8 	bl	8002454 <HAL_GetTick>
 80062c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062c6:	e008      	b.n	80062da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062c8:	f7fc f8c4 	bl	8002454 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e066      	b.n	80063a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062da:	4b35      	ldr	r3, [pc, #212]	@ (80063b0 <HAL_RCC_OscConfig+0x618>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0f0      	beq.n	80062c8 <HAL_RCC_OscConfig+0x530>
 80062e6:	e05e      	b.n	80063a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062e8:	4b31      	ldr	r3, [pc, #196]	@ (80063b0 <HAL_RCC_OscConfig+0x618>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a30      	ldr	r2, [pc, #192]	@ (80063b0 <HAL_RCC_OscConfig+0x618>)
 80062ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f4:	f7fc f8ae 	bl	8002454 <HAL_GetTick>
 80062f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062fa:	e008      	b.n	800630e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062fc:	f7fc f8aa 	bl	8002454 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b02      	cmp	r3, #2
 8006308:	d901      	bls.n	800630e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e04c      	b.n	80063a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800630e:	4b28      	ldr	r3, [pc, #160]	@ (80063b0 <HAL_RCC_OscConfig+0x618>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1f0      	bne.n	80062fc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800631a:	4b25      	ldr	r3, [pc, #148]	@ (80063b0 <HAL_RCC_OscConfig+0x618>)
 800631c:	68da      	ldr	r2, [r3, #12]
 800631e:	4924      	ldr	r1, [pc, #144]	@ (80063b0 <HAL_RCC_OscConfig+0x618>)
 8006320:	4b25      	ldr	r3, [pc, #148]	@ (80063b8 <HAL_RCC_OscConfig+0x620>)
 8006322:	4013      	ands	r3, r2
 8006324:	60cb      	str	r3, [r1, #12]
 8006326:	e03e      	b.n	80063a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d101      	bne.n	8006334 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e039      	b.n	80063a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006334:	4b1e      	ldr	r3, [pc, #120]	@ (80063b0 <HAL_RCC_OscConfig+0x618>)
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f003 0203 	and.w	r2, r3, #3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	429a      	cmp	r2, r3
 8006346:	d12c      	bne.n	80063a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006352:	3b01      	subs	r3, #1
 8006354:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006356:	429a      	cmp	r2, r3
 8006358:	d123      	bne.n	80063a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006364:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006366:	429a      	cmp	r2, r3
 8006368:	d11b      	bne.n	80063a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006374:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006376:	429a      	cmp	r2, r3
 8006378:	d113      	bne.n	80063a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006384:	085b      	lsrs	r3, r3, #1
 8006386:	3b01      	subs	r3, #1
 8006388:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800638a:	429a      	cmp	r2, r3
 800638c:	d109      	bne.n	80063a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006398:	085b      	lsrs	r3, r3, #1
 800639a:	3b01      	subs	r3, #1
 800639c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800639e:	429a      	cmp	r2, r3
 80063a0:	d001      	beq.n	80063a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e000      	b.n	80063a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3720      	adds	r7, #32
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	40021000 	.word	0x40021000
 80063b4:	019f800c 	.word	0x019f800c
 80063b8:	feeefffc 	.word	0xfeeefffc

080063bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80063c6:	2300      	movs	r3, #0
 80063c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e11e      	b.n	8006612 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063d4:	4b91      	ldr	r3, [pc, #580]	@ (800661c <HAL_RCC_ClockConfig+0x260>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 030f 	and.w	r3, r3, #15
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d910      	bls.n	8006404 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063e2:	4b8e      	ldr	r3, [pc, #568]	@ (800661c <HAL_RCC_ClockConfig+0x260>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f023 020f 	bic.w	r2, r3, #15
 80063ea:	498c      	ldr	r1, [pc, #560]	@ (800661c <HAL_RCC_ClockConfig+0x260>)
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063f2:	4b8a      	ldr	r3, [pc, #552]	@ (800661c <HAL_RCC_ClockConfig+0x260>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 030f 	and.w	r3, r3, #15
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d001      	beq.n	8006404 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e106      	b.n	8006612 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b00      	cmp	r3, #0
 800640e:	d073      	beq.n	80064f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	2b03      	cmp	r3, #3
 8006416:	d129      	bne.n	800646c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006418:	4b81      	ldr	r3, [pc, #516]	@ (8006620 <HAL_RCC_ClockConfig+0x264>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e0f4      	b.n	8006612 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006428:	f000 f99e 	bl	8006768 <RCC_GetSysClockFreqFromPLLSource>
 800642c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	4a7c      	ldr	r2, [pc, #496]	@ (8006624 <HAL_RCC_ClockConfig+0x268>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d93f      	bls.n	80064b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006436:	4b7a      	ldr	r3, [pc, #488]	@ (8006620 <HAL_RCC_ClockConfig+0x264>)
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d009      	beq.n	8006456 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800644a:	2b00      	cmp	r3, #0
 800644c:	d033      	beq.n	80064b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006452:	2b00      	cmp	r3, #0
 8006454:	d12f      	bne.n	80064b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006456:	4b72      	ldr	r3, [pc, #456]	@ (8006620 <HAL_RCC_ClockConfig+0x264>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800645e:	4a70      	ldr	r2, [pc, #448]	@ (8006620 <HAL_RCC_ClockConfig+0x264>)
 8006460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006464:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006466:	2380      	movs	r3, #128	@ 0x80
 8006468:	617b      	str	r3, [r7, #20]
 800646a:	e024      	b.n	80064b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	2b02      	cmp	r3, #2
 8006472:	d107      	bne.n	8006484 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006474:	4b6a      	ldr	r3, [pc, #424]	@ (8006620 <HAL_RCC_ClockConfig+0x264>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d109      	bne.n	8006494 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e0c6      	b.n	8006612 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006484:	4b66      	ldr	r3, [pc, #408]	@ (8006620 <HAL_RCC_ClockConfig+0x264>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e0be      	b.n	8006612 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006494:	f000 f8ce 	bl	8006634 <HAL_RCC_GetSysClockFreq>
 8006498:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	4a61      	ldr	r2, [pc, #388]	@ (8006624 <HAL_RCC_ClockConfig+0x268>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d909      	bls.n	80064b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80064a2:	4b5f      	ldr	r3, [pc, #380]	@ (8006620 <HAL_RCC_ClockConfig+0x264>)
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064aa:	4a5d      	ldr	r2, [pc, #372]	@ (8006620 <HAL_RCC_ClockConfig+0x264>)
 80064ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80064b2:	2380      	movs	r3, #128	@ 0x80
 80064b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80064b6:	4b5a      	ldr	r3, [pc, #360]	@ (8006620 <HAL_RCC_ClockConfig+0x264>)
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f023 0203 	bic.w	r2, r3, #3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	4957      	ldr	r1, [pc, #348]	@ (8006620 <HAL_RCC_ClockConfig+0x264>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064c8:	f7fb ffc4 	bl	8002454 <HAL_GetTick>
 80064cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ce:	e00a      	b.n	80064e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064d0:	f7fb ffc0 	bl	8002454 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064de:	4293      	cmp	r3, r2
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e095      	b.n	8006612 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064e6:	4b4e      	ldr	r3, [pc, #312]	@ (8006620 <HAL_RCC_ClockConfig+0x264>)
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f003 020c 	and.w	r2, r3, #12
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d1eb      	bne.n	80064d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d023      	beq.n	800654c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b00      	cmp	r3, #0
 800650e:	d005      	beq.n	800651c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006510:	4b43      	ldr	r3, [pc, #268]	@ (8006620 <HAL_RCC_ClockConfig+0x264>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	4a42      	ldr	r2, [pc, #264]	@ (8006620 <HAL_RCC_ClockConfig+0x264>)
 8006516:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800651a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0308 	and.w	r3, r3, #8
 8006524:	2b00      	cmp	r3, #0
 8006526:	d007      	beq.n	8006538 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006528:	4b3d      	ldr	r3, [pc, #244]	@ (8006620 <HAL_RCC_ClockConfig+0x264>)
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006530:	4a3b      	ldr	r2, [pc, #236]	@ (8006620 <HAL_RCC_ClockConfig+0x264>)
 8006532:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006536:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006538:	4b39      	ldr	r3, [pc, #228]	@ (8006620 <HAL_RCC_ClockConfig+0x264>)
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	4936      	ldr	r1, [pc, #216]	@ (8006620 <HAL_RCC_ClockConfig+0x264>)
 8006546:	4313      	orrs	r3, r2
 8006548:	608b      	str	r3, [r1, #8]
 800654a:	e008      	b.n	800655e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	2b80      	cmp	r3, #128	@ 0x80
 8006550:	d105      	bne.n	800655e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006552:	4b33      	ldr	r3, [pc, #204]	@ (8006620 <HAL_RCC_ClockConfig+0x264>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	4a32      	ldr	r2, [pc, #200]	@ (8006620 <HAL_RCC_ClockConfig+0x264>)
 8006558:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800655c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800655e:	4b2f      	ldr	r3, [pc, #188]	@ (800661c <HAL_RCC_ClockConfig+0x260>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 030f 	and.w	r3, r3, #15
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	429a      	cmp	r2, r3
 800656a:	d21d      	bcs.n	80065a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800656c:	4b2b      	ldr	r3, [pc, #172]	@ (800661c <HAL_RCC_ClockConfig+0x260>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f023 020f 	bic.w	r2, r3, #15
 8006574:	4929      	ldr	r1, [pc, #164]	@ (800661c <HAL_RCC_ClockConfig+0x260>)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	4313      	orrs	r3, r2
 800657a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800657c:	f7fb ff6a 	bl	8002454 <HAL_GetTick>
 8006580:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006582:	e00a      	b.n	800659a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006584:	f7fb ff66 	bl	8002454 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006592:	4293      	cmp	r3, r2
 8006594:	d901      	bls.n	800659a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e03b      	b.n	8006612 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800659a:	4b20      	ldr	r3, [pc, #128]	@ (800661c <HAL_RCC_ClockConfig+0x260>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 030f 	and.w	r3, r3, #15
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d1ed      	bne.n	8006584 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d008      	beq.n	80065c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065b4:	4b1a      	ldr	r3, [pc, #104]	@ (8006620 <HAL_RCC_ClockConfig+0x264>)
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	4917      	ldr	r1, [pc, #92]	@ (8006620 <HAL_RCC_ClockConfig+0x264>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0308 	and.w	r3, r3, #8
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d009      	beq.n	80065e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065d2:	4b13      	ldr	r3, [pc, #76]	@ (8006620 <HAL_RCC_ClockConfig+0x264>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	490f      	ldr	r1, [pc, #60]	@ (8006620 <HAL_RCC_ClockConfig+0x264>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80065e6:	f000 f825 	bl	8006634 <HAL_RCC_GetSysClockFreq>
 80065ea:	4602      	mov	r2, r0
 80065ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006620 <HAL_RCC_ClockConfig+0x264>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	091b      	lsrs	r3, r3, #4
 80065f2:	f003 030f 	and.w	r3, r3, #15
 80065f6:	490c      	ldr	r1, [pc, #48]	@ (8006628 <HAL_RCC_ClockConfig+0x26c>)
 80065f8:	5ccb      	ldrb	r3, [r1, r3]
 80065fa:	f003 031f 	and.w	r3, r3, #31
 80065fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006602:	4a0a      	ldr	r2, [pc, #40]	@ (800662c <HAL_RCC_ClockConfig+0x270>)
 8006604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006606:	4b0a      	ldr	r3, [pc, #40]	@ (8006630 <HAL_RCC_ClockConfig+0x274>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4618      	mov	r0, r3
 800660c:	f7fb fed6 	bl	80023bc <HAL_InitTick>
 8006610:	4603      	mov	r3, r0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3718      	adds	r7, #24
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	40022000 	.word	0x40022000
 8006620:	40021000 	.word	0x40021000
 8006624:	04c4b400 	.word	0x04c4b400
 8006628:	08010d70 	.word	0x08010d70
 800662c:	20000000 	.word	0x20000000
 8006630:	20000004 	.word	0x20000004

08006634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800663a:	4b2c      	ldr	r3, [pc, #176]	@ (80066ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f003 030c 	and.w	r3, r3, #12
 8006642:	2b04      	cmp	r3, #4
 8006644:	d102      	bne.n	800664c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006646:	4b2a      	ldr	r3, [pc, #168]	@ (80066f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006648:	613b      	str	r3, [r7, #16]
 800664a:	e047      	b.n	80066dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800664c:	4b27      	ldr	r3, [pc, #156]	@ (80066ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f003 030c 	and.w	r3, r3, #12
 8006654:	2b08      	cmp	r3, #8
 8006656:	d102      	bne.n	800665e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006658:	4b26      	ldr	r3, [pc, #152]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800665a:	613b      	str	r3, [r7, #16]
 800665c:	e03e      	b.n	80066dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800665e:	4b23      	ldr	r3, [pc, #140]	@ (80066ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f003 030c 	and.w	r3, r3, #12
 8006666:	2b0c      	cmp	r3, #12
 8006668:	d136      	bne.n	80066d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800666a:	4b20      	ldr	r3, [pc, #128]	@ (80066ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006674:	4b1d      	ldr	r3, [pc, #116]	@ (80066ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	091b      	lsrs	r3, r3, #4
 800667a:	f003 030f 	and.w	r3, r3, #15
 800667e:	3301      	adds	r3, #1
 8006680:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2b03      	cmp	r3, #3
 8006686:	d10c      	bne.n	80066a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006688:	4a1a      	ldr	r2, [pc, #104]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006690:	4a16      	ldr	r2, [pc, #88]	@ (80066ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006692:	68d2      	ldr	r2, [r2, #12]
 8006694:	0a12      	lsrs	r2, r2, #8
 8006696:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800669a:	fb02 f303 	mul.w	r3, r2, r3
 800669e:	617b      	str	r3, [r7, #20]
      break;
 80066a0:	e00c      	b.n	80066bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066a2:	4a13      	ldr	r2, [pc, #76]	@ (80066f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066aa:	4a10      	ldr	r2, [pc, #64]	@ (80066ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80066ac:	68d2      	ldr	r2, [r2, #12]
 80066ae:	0a12      	lsrs	r2, r2, #8
 80066b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80066b4:	fb02 f303 	mul.w	r3, r2, r3
 80066b8:	617b      	str	r3, [r7, #20]
      break;
 80066ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80066bc:	4b0b      	ldr	r3, [pc, #44]	@ (80066ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	0e5b      	lsrs	r3, r3, #25
 80066c2:	f003 0303 	and.w	r3, r3, #3
 80066c6:	3301      	adds	r3, #1
 80066c8:	005b      	lsls	r3, r3, #1
 80066ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d4:	613b      	str	r3, [r7, #16]
 80066d6:	e001      	b.n	80066dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80066dc:	693b      	ldr	r3, [r7, #16]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	371c      	adds	r7, #28
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	40021000 	.word	0x40021000
 80066f0:	00f42400 	.word	0x00f42400
 80066f4:	016e3600 	.word	0x016e3600

080066f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066f8:	b480      	push	{r7}
 80066fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066fc:	4b03      	ldr	r3, [pc, #12]	@ (800670c <HAL_RCC_GetHCLKFreq+0x14>)
 80066fe:	681b      	ldr	r3, [r3, #0]
}
 8006700:	4618      	mov	r0, r3
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	20000000 	.word	0x20000000

08006710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006714:	f7ff fff0 	bl	80066f8 <HAL_RCC_GetHCLKFreq>
 8006718:	4602      	mov	r2, r0
 800671a:	4b06      	ldr	r3, [pc, #24]	@ (8006734 <HAL_RCC_GetPCLK1Freq+0x24>)
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	0a1b      	lsrs	r3, r3, #8
 8006720:	f003 0307 	and.w	r3, r3, #7
 8006724:	4904      	ldr	r1, [pc, #16]	@ (8006738 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006726:	5ccb      	ldrb	r3, [r1, r3]
 8006728:	f003 031f 	and.w	r3, r3, #31
 800672c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006730:	4618      	mov	r0, r3
 8006732:	bd80      	pop	{r7, pc}
 8006734:	40021000 	.word	0x40021000
 8006738:	08010d80 	.word	0x08010d80

0800673c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006740:	f7ff ffda 	bl	80066f8 <HAL_RCC_GetHCLKFreq>
 8006744:	4602      	mov	r2, r0
 8006746:	4b06      	ldr	r3, [pc, #24]	@ (8006760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	0adb      	lsrs	r3, r3, #11
 800674c:	f003 0307 	and.w	r3, r3, #7
 8006750:	4904      	ldr	r1, [pc, #16]	@ (8006764 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006752:	5ccb      	ldrb	r3, [r1, r3]
 8006754:	f003 031f 	and.w	r3, r3, #31
 8006758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800675c:	4618      	mov	r0, r3
 800675e:	bd80      	pop	{r7, pc}
 8006760:	40021000 	.word	0x40021000
 8006764:	08010d80 	.word	0x08010d80

08006768 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800676e:	4b1e      	ldr	r3, [pc, #120]	@ (80067e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f003 0303 	and.w	r3, r3, #3
 8006776:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006778:	4b1b      	ldr	r3, [pc, #108]	@ (80067e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	091b      	lsrs	r3, r3, #4
 800677e:	f003 030f 	and.w	r3, r3, #15
 8006782:	3301      	adds	r3, #1
 8006784:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	2b03      	cmp	r3, #3
 800678a:	d10c      	bne.n	80067a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800678c:	4a17      	ldr	r2, [pc, #92]	@ (80067ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	fbb2 f3f3 	udiv	r3, r2, r3
 8006794:	4a14      	ldr	r2, [pc, #80]	@ (80067e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006796:	68d2      	ldr	r2, [r2, #12]
 8006798:	0a12      	lsrs	r2, r2, #8
 800679a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800679e:	fb02 f303 	mul.w	r3, r2, r3
 80067a2:	617b      	str	r3, [r7, #20]
    break;
 80067a4:	e00c      	b.n	80067c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067a6:	4a12      	ldr	r2, [pc, #72]	@ (80067f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ae:	4a0e      	ldr	r2, [pc, #56]	@ (80067e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067b0:	68d2      	ldr	r2, [r2, #12]
 80067b2:	0a12      	lsrs	r2, r2, #8
 80067b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80067b8:	fb02 f303 	mul.w	r3, r2, r3
 80067bc:	617b      	str	r3, [r7, #20]
    break;
 80067be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80067c0:	4b09      	ldr	r3, [pc, #36]	@ (80067e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	0e5b      	lsrs	r3, r3, #25
 80067c6:	f003 0303 	and.w	r3, r3, #3
 80067ca:	3301      	adds	r3, #1
 80067cc:	005b      	lsls	r3, r3, #1
 80067ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80067d0:	697a      	ldr	r2, [r7, #20]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80067da:	687b      	ldr	r3, [r7, #4]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	371c      	adds	r7, #28
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	40021000 	.word	0x40021000
 80067ec:	016e3600 	.word	0x016e3600
 80067f0:	00f42400 	.word	0x00f42400

080067f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80067fc:	2300      	movs	r3, #0
 80067fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006800:	2300      	movs	r3, #0
 8006802:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 8098 	beq.w	8006942 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006812:	2300      	movs	r3, #0
 8006814:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006816:	4b43      	ldr	r3, [pc, #268]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800681a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10d      	bne.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006822:	4b40      	ldr	r3, [pc, #256]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006826:	4a3f      	ldr	r2, [pc, #252]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006828:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800682c:	6593      	str	r3, [r2, #88]	@ 0x58
 800682e:	4b3d      	ldr	r3, [pc, #244]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006836:	60bb      	str	r3, [r7, #8]
 8006838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800683a:	2301      	movs	r3, #1
 800683c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800683e:	4b3a      	ldr	r3, [pc, #232]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a39      	ldr	r2, [pc, #228]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006848:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800684a:	f7fb fe03 	bl	8002454 <HAL_GetTick>
 800684e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006850:	e009      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006852:	f7fb fdff 	bl	8002454 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	2b02      	cmp	r3, #2
 800685e:	d902      	bls.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	74fb      	strb	r3, [r7, #19]
        break;
 8006864:	e005      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006866:	4b30      	ldr	r3, [pc, #192]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800686e:	2b00      	cmp	r3, #0
 8006870:	d0ef      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006872:	7cfb      	ldrb	r3, [r7, #19]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d159      	bne.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006878:	4b2a      	ldr	r3, [pc, #168]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800687a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800687e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006882:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d01e      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	429a      	cmp	r2, r3
 8006892:	d019      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006894:	4b23      	ldr	r3, [pc, #140]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800689a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800689e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068a0:	4b20      	ldr	r3, [pc, #128]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068a6:	4a1f      	ldr	r2, [pc, #124]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068b0:	4b1c      	ldr	r3, [pc, #112]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068b6:	4a1b      	ldr	r2, [pc, #108]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80068c0:	4a18      	ldr	r2, [pc, #96]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d016      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d2:	f7fb fdbf 	bl	8002454 <HAL_GetTick>
 80068d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068d8:	e00b      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068da:	f7fb fdbb 	bl	8002454 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d902      	bls.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	74fb      	strb	r3, [r7, #19]
            break;
 80068f0:	e006      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068f8:	f003 0302 	and.w	r3, r3, #2
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d0ec      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006900:	7cfb      	ldrb	r3, [r7, #19]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10b      	bne.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006906:	4b07      	ldr	r3, [pc, #28]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800690c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006914:	4903      	ldr	r1, [pc, #12]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006916:	4313      	orrs	r3, r2
 8006918:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800691c:	e008      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800691e:	7cfb      	ldrb	r3, [r7, #19]
 8006920:	74bb      	strb	r3, [r7, #18]
 8006922:	e005      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006924:	40021000 	.word	0x40021000
 8006928:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800692c:	7cfb      	ldrb	r3, [r7, #19]
 800692e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006930:	7c7b      	ldrb	r3, [r7, #17]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d105      	bne.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006936:	4ba6      	ldr	r3, [pc, #664]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800693a:	4aa5      	ldr	r2, [pc, #660]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800693c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006940:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00a      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800694e:	4ba0      	ldr	r3, [pc, #640]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006954:	f023 0203 	bic.w	r2, r3, #3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	499c      	ldr	r1, [pc, #624]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800695e:	4313      	orrs	r3, r2
 8006960:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0302 	and.w	r3, r3, #2
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00a      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006970:	4b97      	ldr	r3, [pc, #604]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006976:	f023 020c 	bic.w	r2, r3, #12
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	4994      	ldr	r1, [pc, #592]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006980:	4313      	orrs	r3, r2
 8006982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0304 	and.w	r3, r3, #4
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00a      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006992:	4b8f      	ldr	r3, [pc, #572]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006998:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	498b      	ldr	r1, [pc, #556]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0308 	and.w	r3, r3, #8
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00a      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80069b4:	4b86      	ldr	r3, [pc, #536]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	4983      	ldr	r1, [pc, #524]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0320 	and.w	r3, r3, #32
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00a      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80069d6:	4b7e      	ldr	r3, [pc, #504]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069dc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	695b      	ldr	r3, [r3, #20]
 80069e4:	497a      	ldr	r1, [pc, #488]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00a      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80069f8:	4b75      	ldr	r3, [pc, #468]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069fe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	4972      	ldr	r1, [pc, #456]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00a      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a1a:	4b6d      	ldr	r3, [pc, #436]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a20:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	4969      	ldr	r1, [pc, #420]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00a      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006a3c:	4b64      	ldr	r3, [pc, #400]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a42:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	4961      	ldr	r1, [pc, #388]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00a      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a5e:	4b5c      	ldr	r3, [pc, #368]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a64:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a6c:	4958      	ldr	r1, [pc, #352]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d015      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a80:	4b53      	ldr	r3, [pc, #332]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a86:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a8e:	4950      	ldr	r1, [pc, #320]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a9e:	d105      	bne.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006aa0:	4b4b      	ldr	r3, [pc, #300]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	4a4a      	ldr	r2, [pc, #296]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006aaa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d015      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006ab8:	4b45      	ldr	r3, [pc, #276]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006abe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac6:	4942      	ldr	r1, [pc, #264]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ad6:	d105      	bne.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ad8:	4b3d      	ldr	r3, [pc, #244]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	4a3c      	ldr	r2, [pc, #240]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ade:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ae2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d015      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006af0:	4b37      	ldr	r3, [pc, #220]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006af6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006afe:	4934      	ldr	r1, [pc, #208]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b00:	4313      	orrs	r3, r2
 8006b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b0e:	d105      	bne.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b10:	4b2f      	ldr	r3, [pc, #188]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	4a2e      	ldr	r2, [pc, #184]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b1a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d015      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b28:	4b29      	ldr	r3, [pc, #164]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b36:	4926      	ldr	r1, [pc, #152]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b46:	d105      	bne.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b48:	4b21      	ldr	r3, [pc, #132]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	4a20      	ldr	r2, [pc, #128]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b52:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d015      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b60:	4b1b      	ldr	r3, [pc, #108]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b66:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b6e:	4918      	ldr	r1, [pc, #96]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b7e:	d105      	bne.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b80:	4b13      	ldr	r3, [pc, #76]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	4a12      	ldr	r2, [pc, #72]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b8a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d015      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006b98:	4b0d      	ldr	r3, [pc, #52]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b9e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ba6:	490a      	ldr	r1, [pc, #40]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bb6:	d105      	bne.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006bb8:	4b05      	ldr	r3, [pc, #20]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	4a04      	ldr	r2, [pc, #16]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bc2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006bc4:	7cbb      	ldrb	r3, [r7, #18]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3718      	adds	r7, #24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	40021000 	.word	0x40021000

08006bd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d101      	bne.n	8006be6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e09d      	b.n	8006d22 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d108      	bne.n	8006c00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006bf6:	d009      	beq.n	8006c0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	61da      	str	r2, [r3, #28]
 8006bfe:	e005      	b.n	8006c0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d106      	bne.n	8006c2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7fa fe38 	bl	800189c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c4c:	d902      	bls.n	8006c54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60fb      	str	r3, [r7, #12]
 8006c52:	e002      	b.n	8006c5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006c58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006c62:	d007      	beq.n	8006c74 <HAL_SPI_Init+0xa0>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c6c:	d002      	beq.n	8006c74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006c84:	431a      	orrs	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	431a      	orrs	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	431a      	orrs	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cac:	431a      	orrs	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cb6:	ea42 0103 	orr.w	r1, r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cbe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	0c1b      	lsrs	r3, r3, #16
 8006cd0:	f003 0204 	and.w	r2, r3, #4
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd8:	f003 0310 	and.w	r3, r3, #16
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ce2:	f003 0308 	and.w	r3, r3, #8
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006cf0:	ea42 0103 	orr.w	r1, r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	69da      	ldr	r2, [r3, #28]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b08a      	sub	sp, #40	@ 0x28
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	60f8      	str	r0, [r7, #12]
 8006d32:	60b9      	str	r1, [r7, #8]
 8006d34:	607a      	str	r2, [r7, #4]
 8006d36:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d101      	bne.n	8006d50 <HAL_SPI_TransmitReceive+0x26>
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	e20a      	b.n	8007166 <HAL_SPI_TransmitReceive+0x43c>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d58:	f7fb fb7c 	bl	8002454 <HAL_GetTick>
 8006d5c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d64:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006d6c:	887b      	ldrh	r3, [r7, #2]
 8006d6e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006d70:	887b      	ldrh	r3, [r7, #2]
 8006d72:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d74:	7efb      	ldrb	r3, [r7, #27]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d00e      	beq.n	8006d98 <HAL_SPI_TransmitReceive+0x6e>
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d80:	d106      	bne.n	8006d90 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d102      	bne.n	8006d90 <HAL_SPI_TransmitReceive+0x66>
 8006d8a:	7efb      	ldrb	r3, [r7, #27]
 8006d8c:	2b04      	cmp	r3, #4
 8006d8e:	d003      	beq.n	8006d98 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006d90:	2302      	movs	r3, #2
 8006d92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006d96:	e1e0      	b.n	800715a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d005      	beq.n	8006daa <HAL_SPI_TransmitReceive+0x80>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <HAL_SPI_TransmitReceive+0x80>
 8006da4:	887b      	ldrh	r3, [r7, #2]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d103      	bne.n	8006db2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006db0:	e1d3      	b.n	800715a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b04      	cmp	r3, #4
 8006dbc:	d003      	beq.n	8006dc6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2205      	movs	r2, #5
 8006dc2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	887a      	ldrh	r2, [r7, #2]
 8006dd6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	887a      	ldrh	r2, [r7, #2]
 8006dde:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	887a      	ldrh	r2, [r7, #2]
 8006dec:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	887a      	ldrh	r2, [r7, #2]
 8006df2:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e08:	d802      	bhi.n	8006e10 <HAL_SPI_TransmitReceive+0xe6>
 8006e0a:	8a3b      	ldrh	r3, [r7, #16]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d908      	bls.n	8006e22 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e1e:	605a      	str	r2, [r3, #4]
 8006e20:	e007      	b.n	8006e32 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e30:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e3c:	2b40      	cmp	r3, #64	@ 0x40
 8006e3e:	d007      	beq.n	8006e50 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e58:	f240 8081 	bls.w	8006f5e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d002      	beq.n	8006e6a <HAL_SPI_TransmitReceive+0x140>
 8006e64:	8a7b      	ldrh	r3, [r7, #18]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d16d      	bne.n	8006f46 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e6e:	881a      	ldrh	r2, [r3, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e7a:	1c9a      	adds	r2, r3, #2
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	3b01      	subs	r3, #1
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e8e:	e05a      	b.n	8006f46 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d11b      	bne.n	8006ed6 <HAL_SPI_TransmitReceive+0x1ac>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d016      	beq.n	8006ed6 <HAL_SPI_TransmitReceive+0x1ac>
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d113      	bne.n	8006ed6 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb2:	881a      	ldrh	r2, [r3, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ebe:	1c9a      	adds	r2, r3, #2
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	f003 0301 	and.w	r3, r3, #1
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d11c      	bne.n	8006f1e <HAL_SPI_TransmitReceive+0x1f4>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d016      	beq.n	8006f1e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68da      	ldr	r2, [r3, #12]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efa:	b292      	uxth	r2, r2
 8006efc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f02:	1c9a      	adds	r2, r3, #2
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	3b01      	subs	r3, #1
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f1e:	f7fb fa99 	bl	8002454 <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d80b      	bhi.n	8006f46 <HAL_SPI_TransmitReceive+0x21c>
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f34:	d007      	beq.n	8006f46 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006f44:	e109      	b.n	800715a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d19f      	bne.n	8006e90 <HAL_SPI_TransmitReceive+0x166>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d199      	bne.n	8006e90 <HAL_SPI_TransmitReceive+0x166>
 8006f5c:	e0e3      	b.n	8007126 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d003      	beq.n	8006f6e <HAL_SPI_TransmitReceive+0x244>
 8006f66:	8a7b      	ldrh	r3, [r7, #18]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	f040 80cf 	bne.w	800710c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d912      	bls.n	8006f9e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f7c:	881a      	ldrh	r2, [r3, #0]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f88:	1c9a      	adds	r2, r3, #2
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	3b02      	subs	r3, #2
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f9c:	e0b6      	b.n	800710c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	330c      	adds	r3, #12
 8006fa8:	7812      	ldrb	r2, [r2, #0]
 8006faa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb0:	1c5a      	adds	r2, r3, #1
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fc4:	e0a2      	b.n	800710c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f003 0302 	and.w	r3, r3, #2
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d134      	bne.n	800703e <HAL_SPI_TransmitReceive+0x314>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d02f      	beq.n	800703e <HAL_SPI_TransmitReceive+0x314>
 8006fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d12c      	bne.n	800703e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d912      	bls.n	8007014 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff2:	881a      	ldrh	r2, [r3, #0]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ffe:	1c9a      	adds	r2, r3, #2
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007008:	b29b      	uxth	r3, r3
 800700a:	3b02      	subs	r3, #2
 800700c:	b29a      	uxth	r2, r3
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007012:	e012      	b.n	800703a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	330c      	adds	r3, #12
 800701e:	7812      	ldrb	r2, [r2, #0]
 8007020:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007026:	1c5a      	adds	r2, r3, #1
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007030:	b29b      	uxth	r3, r3
 8007032:	3b01      	subs	r3, #1
 8007034:	b29a      	uxth	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800703a:	2300      	movs	r3, #0
 800703c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f003 0301 	and.w	r3, r3, #1
 8007048:	2b01      	cmp	r3, #1
 800704a:	d148      	bne.n	80070de <HAL_SPI_TransmitReceive+0x3b4>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007052:	b29b      	uxth	r3, r3
 8007054:	2b00      	cmp	r3, #0
 8007056:	d042      	beq.n	80070de <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800705e:	b29b      	uxth	r3, r3
 8007060:	2b01      	cmp	r3, #1
 8007062:	d923      	bls.n	80070ac <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68da      	ldr	r2, [r3, #12]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800706e:	b292      	uxth	r2, r2
 8007070:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007076:	1c9a      	adds	r2, r3, #2
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007082:	b29b      	uxth	r3, r3
 8007084:	3b02      	subs	r3, #2
 8007086:	b29a      	uxth	r2, r3
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007094:	b29b      	uxth	r3, r3
 8007096:	2b01      	cmp	r3, #1
 8007098:	d81f      	bhi.n	80070da <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80070a8:	605a      	str	r2, [r3, #4]
 80070aa:	e016      	b.n	80070da <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f103 020c 	add.w	r2, r3, #12
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b8:	7812      	ldrb	r2, [r2, #0]
 80070ba:	b2d2      	uxtb	r2, r2
 80070bc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c2:	1c5a      	adds	r2, r3, #1
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	3b01      	subs	r3, #1
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070da:	2301      	movs	r3, #1
 80070dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80070de:	f7fb f9b9 	bl	8002454 <HAL_GetTick>
 80070e2:	4602      	mov	r2, r0
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d803      	bhi.n	80070f6 <HAL_SPI_TransmitReceive+0x3cc>
 80070ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f4:	d102      	bne.n	80070fc <HAL_SPI_TransmitReceive+0x3d2>
 80070f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d107      	bne.n	800710c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800710a:	e026      	b.n	800715a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007110:	b29b      	uxth	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	f47f af57 	bne.w	8006fc6 <HAL_SPI_TransmitReceive+0x29c>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800711e:	b29b      	uxth	r3, r3
 8007120:	2b00      	cmp	r3, #0
 8007122:	f47f af50 	bne.w	8006fc6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007126:	69fa      	ldr	r2, [r7, #28]
 8007128:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f000 f94c 	bl	80073c8 <SPI_EndRxTxTransaction>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d005      	beq.n	8007142 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2220      	movs	r2, #32
 8007140:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007146:	2b00      	cmp	r3, #0
 8007148:	d003      	beq.n	8007152 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007150:	e003      	b.n	800715a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007162:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007166:	4618      	mov	r0, r3
 8007168:	3728      	adds	r7, #40	@ 0x28
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800716e:	b480      	push	{r7}
 8007170:	b083      	sub	sp, #12
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800717c:	b2db      	uxtb	r3, r3
}
 800717e:	4618      	mov	r0, r3
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
	...

0800718c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b088      	sub	sp, #32
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	603b      	str	r3, [r7, #0]
 8007198:	4613      	mov	r3, r2
 800719a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800719c:	f7fb f95a 	bl	8002454 <HAL_GetTick>
 80071a0:	4602      	mov	r2, r0
 80071a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a4:	1a9b      	subs	r3, r3, r2
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	4413      	add	r3, r2
 80071aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071ac:	f7fb f952 	bl	8002454 <HAL_GetTick>
 80071b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071b2:	4b39      	ldr	r3, [pc, #228]	@ (8007298 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	015b      	lsls	r3, r3, #5
 80071b8:	0d1b      	lsrs	r3, r3, #20
 80071ba:	69fa      	ldr	r2, [r7, #28]
 80071bc:	fb02 f303 	mul.w	r3, r2, r3
 80071c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071c2:	e054      	b.n	800726e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ca:	d050      	beq.n	800726e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071cc:	f7fb f942 	bl	8002454 <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	69fa      	ldr	r2, [r7, #28]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d902      	bls.n	80071e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d13d      	bne.n	800725e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	685a      	ldr	r2, [r3, #4]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80071f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071fa:	d111      	bne.n	8007220 <SPI_WaitFlagStateUntilTimeout+0x94>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007204:	d004      	beq.n	8007210 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800720e:	d107      	bne.n	8007220 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800721e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007224:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007228:	d10f      	bne.n	800724a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007248:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e017      	b.n	800728e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d101      	bne.n	8007268 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	3b01      	subs	r3, #1
 800726c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	689a      	ldr	r2, [r3, #8]
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	4013      	ands	r3, r2
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	429a      	cmp	r2, r3
 800727c:	bf0c      	ite	eq
 800727e:	2301      	moveq	r3, #1
 8007280:	2300      	movne	r3, #0
 8007282:	b2db      	uxtb	r3, r3
 8007284:	461a      	mov	r2, r3
 8007286:	79fb      	ldrb	r3, [r7, #7]
 8007288:	429a      	cmp	r2, r3
 800728a:	d19b      	bne.n	80071c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3720      	adds	r7, #32
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	20000000 	.word	0x20000000

0800729c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b08a      	sub	sp, #40	@ 0x28
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
 80072a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80072aa:	2300      	movs	r3, #0
 80072ac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80072ae:	f7fb f8d1 	bl	8002454 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b6:	1a9b      	subs	r3, r3, r2
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	4413      	add	r3, r2
 80072bc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80072be:	f7fb f8c9 	bl	8002454 <HAL_GetTick>
 80072c2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	330c      	adds	r3, #12
 80072ca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80072cc:	4b3d      	ldr	r3, [pc, #244]	@ (80073c4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	4613      	mov	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4413      	add	r3, r2
 80072d6:	00da      	lsls	r2, r3, #3
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	0d1b      	lsrs	r3, r3, #20
 80072dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072de:	fb02 f303 	mul.w	r3, r2, r3
 80072e2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80072e4:	e060      	b.n	80073a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80072ec:	d107      	bne.n	80072fe <SPI_WaitFifoStateUntilTimeout+0x62>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d104      	bne.n	80072fe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80072fc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007304:	d050      	beq.n	80073a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007306:	f7fb f8a5 	bl	8002454 <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	6a3b      	ldr	r3, [r7, #32]
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007312:	429a      	cmp	r2, r3
 8007314:	d902      	bls.n	800731c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007318:	2b00      	cmp	r3, #0
 800731a:	d13d      	bne.n	8007398 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685a      	ldr	r2, [r3, #4]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800732a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007334:	d111      	bne.n	800735a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800733e:	d004      	beq.n	800734a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007348:	d107      	bne.n	800735a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007358:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800735e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007362:	d10f      	bne.n	8007384 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007382:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e010      	b.n	80073ba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800739e:	2300      	movs	r3, #0
 80073a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	3b01      	subs	r3, #1
 80073a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689a      	ldr	r2, [r3, #8]
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	4013      	ands	r3, r2
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d196      	bne.n	80072e6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3728      	adds	r7, #40	@ 0x28
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	20000000 	.word	0x20000000

080073c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b086      	sub	sp, #24
 80073cc:	af02      	add	r7, sp, #8
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	9300      	str	r3, [sp, #0]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	2200      	movs	r2, #0
 80073dc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f7ff ff5b 	bl	800729c <SPI_WaitFifoStateUntilTimeout>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d007      	beq.n	80073fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073f0:	f043 0220 	orr.w	r2, r3, #32
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e027      	b.n	800744c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2200      	movs	r2, #0
 8007404:	2180      	movs	r1, #128	@ 0x80
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f7ff fec0 	bl	800718c <SPI_WaitFlagStateUntilTimeout>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d007      	beq.n	8007422 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007416:	f043 0220 	orr.w	r2, r3, #32
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e014      	b.n	800744c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	2200      	movs	r2, #0
 800742a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f7ff ff34 	bl	800729c <SPI_WaitFifoStateUntilTimeout>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d007      	beq.n	800744a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800743e:	f043 0220 	orr.w	r2, r3, #32
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e000      	b.n	800744c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d101      	bne.n	8007466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e049      	b.n	80074fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800746c:	b2db      	uxtb	r3, r3
 800746e:	2b00      	cmp	r3, #0
 8007470:	d106      	bne.n	8007480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f7fa fdb0 	bl	8001fe0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2202      	movs	r2, #2
 8007484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	3304      	adds	r3, #4
 8007490:	4619      	mov	r1, r3
 8007492:	4610      	mov	r0, r2
 8007494:	f000 fc9e 	bl	8007dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
	...

08007504 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007512:	b2db      	uxtb	r3, r3
 8007514:	2b01      	cmp	r3, #1
 8007516:	d001      	beq.n	800751c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e042      	b.n	80075a2 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2202      	movs	r2, #2
 8007520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a21      	ldr	r2, [pc, #132]	@ (80075b0 <HAL_TIM_Base_Start+0xac>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d018      	beq.n	8007560 <HAL_TIM_Base_Start+0x5c>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007536:	d013      	beq.n	8007560 <HAL_TIM_Base_Start+0x5c>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a1d      	ldr	r2, [pc, #116]	@ (80075b4 <HAL_TIM_Base_Start+0xb0>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d00e      	beq.n	8007560 <HAL_TIM_Base_Start+0x5c>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a1c      	ldr	r2, [pc, #112]	@ (80075b8 <HAL_TIM_Base_Start+0xb4>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d009      	beq.n	8007560 <HAL_TIM_Base_Start+0x5c>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a1a      	ldr	r2, [pc, #104]	@ (80075bc <HAL_TIM_Base_Start+0xb8>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d004      	beq.n	8007560 <HAL_TIM_Base_Start+0x5c>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a19      	ldr	r2, [pc, #100]	@ (80075c0 <HAL_TIM_Base_Start+0xbc>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d115      	bne.n	800758c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689a      	ldr	r2, [r3, #8]
 8007566:	4b17      	ldr	r3, [pc, #92]	@ (80075c4 <HAL_TIM_Base_Start+0xc0>)
 8007568:	4013      	ands	r3, r2
 800756a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2b06      	cmp	r3, #6
 8007570:	d015      	beq.n	800759e <HAL_TIM_Base_Start+0x9a>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007578:	d011      	beq.n	800759e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f042 0201 	orr.w	r2, r2, #1
 8007588:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800758a:	e008      	b.n	800759e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f042 0201 	orr.w	r2, r2, #1
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	e000      	b.n	80075a0 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800759e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	40012c00 	.word	0x40012c00
 80075b4:	40000400 	.word	0x40000400
 80075b8:	40000800 	.word	0x40000800
 80075bc:	40013400 	.word	0x40013400
 80075c0:	40014000 	.word	0x40014000
 80075c4:	00010007 	.word	0x00010007

080075c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d101      	bne.n	80075da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e049      	b.n	800766e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d106      	bne.n	80075f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f841 	bl	8007676 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	3304      	adds	r3, #4
 8007604:	4619      	mov	r1, r3
 8007606:	4610      	mov	r0, r2
 8007608:	f000 fbe4 	bl	8007dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007676:	b480      	push	{r7}
 8007678:	b083      	sub	sp, #12
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800767e:	bf00      	nop
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
	...

0800768c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d109      	bne.n	80076b0 <HAL_TIM_PWM_Start+0x24>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	bf14      	ite	ne
 80076a8:	2301      	movne	r3, #1
 80076aa:	2300      	moveq	r3, #0
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	e03c      	b.n	800772a <HAL_TIM_PWM_Start+0x9e>
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	2b04      	cmp	r3, #4
 80076b4:	d109      	bne.n	80076ca <HAL_TIM_PWM_Start+0x3e>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b01      	cmp	r3, #1
 80076c0:	bf14      	ite	ne
 80076c2:	2301      	movne	r3, #1
 80076c4:	2300      	moveq	r3, #0
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	e02f      	b.n	800772a <HAL_TIM_PWM_Start+0x9e>
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	2b08      	cmp	r3, #8
 80076ce:	d109      	bne.n	80076e4 <HAL_TIM_PWM_Start+0x58>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b01      	cmp	r3, #1
 80076da:	bf14      	ite	ne
 80076dc:	2301      	movne	r3, #1
 80076de:	2300      	moveq	r3, #0
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	e022      	b.n	800772a <HAL_TIM_PWM_Start+0x9e>
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	2b0c      	cmp	r3, #12
 80076e8:	d109      	bne.n	80076fe <HAL_TIM_PWM_Start+0x72>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	bf14      	ite	ne
 80076f6:	2301      	movne	r3, #1
 80076f8:	2300      	moveq	r3, #0
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	e015      	b.n	800772a <HAL_TIM_PWM_Start+0x9e>
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2b10      	cmp	r3, #16
 8007702:	d109      	bne.n	8007718 <HAL_TIM_PWM_Start+0x8c>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b01      	cmp	r3, #1
 800770e:	bf14      	ite	ne
 8007710:	2301      	movne	r3, #1
 8007712:	2300      	moveq	r3, #0
 8007714:	b2db      	uxtb	r3, r3
 8007716:	e008      	b.n	800772a <HAL_TIM_PWM_Start+0x9e>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800771e:	b2db      	uxtb	r3, r3
 8007720:	2b01      	cmp	r3, #1
 8007722:	bf14      	ite	ne
 8007724:	2301      	movne	r3, #1
 8007726:	2300      	moveq	r3, #0
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e097      	b.n	8007862 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d104      	bne.n	8007742 <HAL_TIM_PWM_Start+0xb6>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2202      	movs	r2, #2
 800773c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007740:	e023      	b.n	800778a <HAL_TIM_PWM_Start+0xfe>
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	2b04      	cmp	r3, #4
 8007746:	d104      	bne.n	8007752 <HAL_TIM_PWM_Start+0xc6>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2202      	movs	r2, #2
 800774c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007750:	e01b      	b.n	800778a <HAL_TIM_PWM_Start+0xfe>
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b08      	cmp	r3, #8
 8007756:	d104      	bne.n	8007762 <HAL_TIM_PWM_Start+0xd6>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2202      	movs	r2, #2
 800775c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007760:	e013      	b.n	800778a <HAL_TIM_PWM_Start+0xfe>
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2b0c      	cmp	r3, #12
 8007766:	d104      	bne.n	8007772 <HAL_TIM_PWM_Start+0xe6>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2202      	movs	r2, #2
 800776c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007770:	e00b      	b.n	800778a <HAL_TIM_PWM_Start+0xfe>
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2b10      	cmp	r3, #16
 8007776:	d104      	bne.n	8007782 <HAL_TIM_PWM_Start+0xf6>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2202      	movs	r2, #2
 800777c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007780:	e003      	b.n	800778a <HAL_TIM_PWM_Start+0xfe>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2202      	movs	r2, #2
 8007786:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2201      	movs	r2, #1
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	4618      	mov	r0, r3
 8007794:	f000 ff4c 	bl	8008630 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a33      	ldr	r2, [pc, #204]	@ (800786c <HAL_TIM_PWM_Start+0x1e0>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d013      	beq.n	80077ca <HAL_TIM_PWM_Start+0x13e>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a32      	ldr	r2, [pc, #200]	@ (8007870 <HAL_TIM_PWM_Start+0x1e4>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d00e      	beq.n	80077ca <HAL_TIM_PWM_Start+0x13e>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a30      	ldr	r2, [pc, #192]	@ (8007874 <HAL_TIM_PWM_Start+0x1e8>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d009      	beq.n	80077ca <HAL_TIM_PWM_Start+0x13e>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a2f      	ldr	r2, [pc, #188]	@ (8007878 <HAL_TIM_PWM_Start+0x1ec>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d004      	beq.n	80077ca <HAL_TIM_PWM_Start+0x13e>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a2d      	ldr	r2, [pc, #180]	@ (800787c <HAL_TIM_PWM_Start+0x1f0>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d101      	bne.n	80077ce <HAL_TIM_PWM_Start+0x142>
 80077ca:	2301      	movs	r3, #1
 80077cc:	e000      	b.n	80077d0 <HAL_TIM_PWM_Start+0x144>
 80077ce:	2300      	movs	r3, #0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d007      	beq.n	80077e4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80077e2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a20      	ldr	r2, [pc, #128]	@ (800786c <HAL_TIM_PWM_Start+0x1e0>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d018      	beq.n	8007820 <HAL_TIM_PWM_Start+0x194>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077f6:	d013      	beq.n	8007820 <HAL_TIM_PWM_Start+0x194>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a20      	ldr	r2, [pc, #128]	@ (8007880 <HAL_TIM_PWM_Start+0x1f4>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d00e      	beq.n	8007820 <HAL_TIM_PWM_Start+0x194>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a1f      	ldr	r2, [pc, #124]	@ (8007884 <HAL_TIM_PWM_Start+0x1f8>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d009      	beq.n	8007820 <HAL_TIM_PWM_Start+0x194>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a17      	ldr	r2, [pc, #92]	@ (8007870 <HAL_TIM_PWM_Start+0x1e4>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d004      	beq.n	8007820 <HAL_TIM_PWM_Start+0x194>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a16      	ldr	r2, [pc, #88]	@ (8007874 <HAL_TIM_PWM_Start+0x1e8>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d115      	bne.n	800784c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	689a      	ldr	r2, [r3, #8]
 8007826:	4b18      	ldr	r3, [pc, #96]	@ (8007888 <HAL_TIM_PWM_Start+0x1fc>)
 8007828:	4013      	ands	r3, r2
 800782a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2b06      	cmp	r3, #6
 8007830:	d015      	beq.n	800785e <HAL_TIM_PWM_Start+0x1d2>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007838:	d011      	beq.n	800785e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f042 0201 	orr.w	r2, r2, #1
 8007848:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800784a:	e008      	b.n	800785e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f042 0201 	orr.w	r2, r2, #1
 800785a:	601a      	str	r2, [r3, #0]
 800785c:	e000      	b.n	8007860 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800785e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	40012c00 	.word	0x40012c00
 8007870:	40013400 	.word	0x40013400
 8007874:	40014000 	.word	0x40014000
 8007878:	40014400 	.word	0x40014400
 800787c:	40014800 	.word	0x40014800
 8007880:	40000400 	.word	0x40000400
 8007884:	40000800 	.word	0x40000800
 8007888:	00010007 	.word	0x00010007

0800788c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2200      	movs	r2, #0
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	4618      	mov	r0, r3
 80078a0:	f000 fec6 	bl	8008630 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a3e      	ldr	r2, [pc, #248]	@ (80079a4 <HAL_TIM_PWM_Stop+0x118>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d013      	beq.n	80078d6 <HAL_TIM_PWM_Stop+0x4a>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a3d      	ldr	r2, [pc, #244]	@ (80079a8 <HAL_TIM_PWM_Stop+0x11c>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d00e      	beq.n	80078d6 <HAL_TIM_PWM_Stop+0x4a>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a3b      	ldr	r2, [pc, #236]	@ (80079ac <HAL_TIM_PWM_Stop+0x120>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d009      	beq.n	80078d6 <HAL_TIM_PWM_Stop+0x4a>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a3a      	ldr	r2, [pc, #232]	@ (80079b0 <HAL_TIM_PWM_Stop+0x124>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d004      	beq.n	80078d6 <HAL_TIM_PWM_Stop+0x4a>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a38      	ldr	r2, [pc, #224]	@ (80079b4 <HAL_TIM_PWM_Stop+0x128>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d101      	bne.n	80078da <HAL_TIM_PWM_Stop+0x4e>
 80078d6:	2301      	movs	r3, #1
 80078d8:	e000      	b.n	80078dc <HAL_TIM_PWM_Stop+0x50>
 80078da:	2300      	movs	r3, #0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d017      	beq.n	8007910 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	6a1a      	ldr	r2, [r3, #32]
 80078e6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80078ea:	4013      	ands	r3, r2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10f      	bne.n	8007910 <HAL_TIM_PWM_Stop+0x84>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6a1a      	ldr	r2, [r3, #32]
 80078f6:	f244 4344 	movw	r3, #17476	@ 0x4444
 80078fa:	4013      	ands	r3, r2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d107      	bne.n	8007910 <HAL_TIM_PWM_Stop+0x84>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800790e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	6a1a      	ldr	r2, [r3, #32]
 8007916:	f241 1311 	movw	r3, #4369	@ 0x1111
 800791a:	4013      	ands	r3, r2
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10f      	bne.n	8007940 <HAL_TIM_PWM_Stop+0xb4>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6a1a      	ldr	r2, [r3, #32]
 8007926:	f244 4344 	movw	r3, #17476	@ 0x4444
 800792a:	4013      	ands	r3, r2
 800792c:	2b00      	cmp	r3, #0
 800792e:	d107      	bne.n	8007940 <HAL_TIM_PWM_Stop+0xb4>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f022 0201 	bic.w	r2, r2, #1
 800793e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d104      	bne.n	8007950 <HAL_TIM_PWM_Stop+0xc4>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800794e:	e023      	b.n	8007998 <HAL_TIM_PWM_Stop+0x10c>
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	2b04      	cmp	r3, #4
 8007954:	d104      	bne.n	8007960 <HAL_TIM_PWM_Stop+0xd4>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800795e:	e01b      	b.n	8007998 <HAL_TIM_PWM_Stop+0x10c>
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	2b08      	cmp	r3, #8
 8007964:	d104      	bne.n	8007970 <HAL_TIM_PWM_Stop+0xe4>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800796e:	e013      	b.n	8007998 <HAL_TIM_PWM_Stop+0x10c>
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	2b0c      	cmp	r3, #12
 8007974:	d104      	bne.n	8007980 <HAL_TIM_PWM_Stop+0xf4>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800797e:	e00b      	b.n	8007998 <HAL_TIM_PWM_Stop+0x10c>
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	2b10      	cmp	r3, #16
 8007984:	d104      	bne.n	8007990 <HAL_TIM_PWM_Stop+0x104>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800798e:	e003      	b.n	8007998 <HAL_TIM_PWM_Stop+0x10c>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	40012c00 	.word	0x40012c00
 80079a8:	40013400 	.word	0x40013400
 80079ac:	40014000 	.word	0x40014000
 80079b0:	40014400 	.word	0x40014400
 80079b4:	40014800 	.word	0x40014800

080079b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079c4:	2300      	movs	r3, #0
 80079c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d101      	bne.n	80079d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80079d2:	2302      	movs	r3, #2
 80079d4:	e0ff      	b.n	8007bd6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2201      	movs	r2, #1
 80079da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2b14      	cmp	r3, #20
 80079e2:	f200 80f0 	bhi.w	8007bc6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80079e6:	a201      	add	r2, pc, #4	@ (adr r2, 80079ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80079e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ec:	08007a41 	.word	0x08007a41
 80079f0:	08007bc7 	.word	0x08007bc7
 80079f4:	08007bc7 	.word	0x08007bc7
 80079f8:	08007bc7 	.word	0x08007bc7
 80079fc:	08007a81 	.word	0x08007a81
 8007a00:	08007bc7 	.word	0x08007bc7
 8007a04:	08007bc7 	.word	0x08007bc7
 8007a08:	08007bc7 	.word	0x08007bc7
 8007a0c:	08007ac3 	.word	0x08007ac3
 8007a10:	08007bc7 	.word	0x08007bc7
 8007a14:	08007bc7 	.word	0x08007bc7
 8007a18:	08007bc7 	.word	0x08007bc7
 8007a1c:	08007b03 	.word	0x08007b03
 8007a20:	08007bc7 	.word	0x08007bc7
 8007a24:	08007bc7 	.word	0x08007bc7
 8007a28:	08007bc7 	.word	0x08007bc7
 8007a2c:	08007b45 	.word	0x08007b45
 8007a30:	08007bc7 	.word	0x08007bc7
 8007a34:	08007bc7 	.word	0x08007bc7
 8007a38:	08007bc7 	.word	0x08007bc7
 8007a3c:	08007b85 	.word	0x08007b85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68b9      	ldr	r1, [r7, #8]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 fa60 	bl	8007f0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	699a      	ldr	r2, [r3, #24]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f042 0208 	orr.w	r2, r2, #8
 8007a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	699a      	ldr	r2, [r3, #24]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f022 0204 	bic.w	r2, r2, #4
 8007a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6999      	ldr	r1, [r3, #24]
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	691a      	ldr	r2, [r3, #16]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	430a      	orrs	r2, r1
 8007a7c:	619a      	str	r2, [r3, #24]
      break;
 8007a7e:	e0a5      	b.n	8007bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68b9      	ldr	r1, [r7, #8]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 fad0 	bl	800802c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	699a      	ldr	r2, [r3, #24]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	699a      	ldr	r2, [r3, #24]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6999      	ldr	r1, [r3, #24]
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	021a      	lsls	r2, r3, #8
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	430a      	orrs	r2, r1
 8007abe:	619a      	str	r2, [r3, #24]
      break;
 8007ac0:	e084      	b.n	8007bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68b9      	ldr	r1, [r7, #8]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f000 fb39 	bl	8008140 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	69da      	ldr	r2, [r3, #28]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f042 0208 	orr.w	r2, r2, #8
 8007adc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	69da      	ldr	r2, [r3, #28]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f022 0204 	bic.w	r2, r2, #4
 8007aec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	69d9      	ldr	r1, [r3, #28]
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	691a      	ldr	r2, [r3, #16]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	430a      	orrs	r2, r1
 8007afe:	61da      	str	r2, [r3, #28]
      break;
 8007b00:	e064      	b.n	8007bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68b9      	ldr	r1, [r7, #8]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f000 fba1 	bl	8008250 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	69da      	ldr	r2, [r3, #28]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	69da      	ldr	r2, [r3, #28]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	69d9      	ldr	r1, [r3, #28]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	021a      	lsls	r2, r3, #8
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	61da      	str	r2, [r3, #28]
      break;
 8007b42:	e043      	b.n	8007bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68b9      	ldr	r1, [r7, #8]
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f000 fc0a 	bl	8008364 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f042 0208 	orr.w	r2, r2, #8
 8007b5e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f022 0204 	bic.w	r2, r2, #4
 8007b6e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	691a      	ldr	r2, [r3, #16]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007b82:	e023      	b.n	8007bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68b9      	ldr	r1, [r7, #8]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 fc4e 	bl	800842c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b9e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007bae:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	021a      	lsls	r2, r3, #8
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	430a      	orrs	r2, r1
 8007bc2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007bc4:	e002      	b.n	8007bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	75fb      	strb	r3, [r7, #23]
      break;
 8007bca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3718      	adds	r7, #24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop

08007be0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d101      	bne.n	8007bfc <HAL_TIM_ConfigClockSource+0x1c>
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	e0de      	b.n	8007dba <HAL_TIM_ConfigClockSource+0x1da>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2202      	movs	r2, #2
 8007c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007c1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007c1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a63      	ldr	r2, [pc, #396]	@ (8007dc4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	f000 80a9 	beq.w	8007d8e <HAL_TIM_ConfigClockSource+0x1ae>
 8007c3c:	4a61      	ldr	r2, [pc, #388]	@ (8007dc4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	f200 80ae 	bhi.w	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007c44:	4a60      	ldr	r2, [pc, #384]	@ (8007dc8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	f000 80a1 	beq.w	8007d8e <HAL_TIM_ConfigClockSource+0x1ae>
 8007c4c:	4a5e      	ldr	r2, [pc, #376]	@ (8007dc8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	f200 80a6 	bhi.w	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007c54:	4a5d      	ldr	r2, [pc, #372]	@ (8007dcc <HAL_TIM_ConfigClockSource+0x1ec>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	f000 8099 	beq.w	8007d8e <HAL_TIM_ConfigClockSource+0x1ae>
 8007c5c:	4a5b      	ldr	r2, [pc, #364]	@ (8007dcc <HAL_TIM_ConfigClockSource+0x1ec>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	f200 809e 	bhi.w	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007c64:	4a5a      	ldr	r2, [pc, #360]	@ (8007dd0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	f000 8091 	beq.w	8007d8e <HAL_TIM_ConfigClockSource+0x1ae>
 8007c6c:	4a58      	ldr	r2, [pc, #352]	@ (8007dd0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	f200 8096 	bhi.w	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007c74:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007c78:	f000 8089 	beq.w	8007d8e <HAL_TIM_ConfigClockSource+0x1ae>
 8007c7c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007c80:	f200 808e 	bhi.w	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007c84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c88:	d03e      	beq.n	8007d08 <HAL_TIM_ConfigClockSource+0x128>
 8007c8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c8e:	f200 8087 	bhi.w	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007c92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c96:	f000 8086 	beq.w	8007da6 <HAL_TIM_ConfigClockSource+0x1c6>
 8007c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c9e:	d87f      	bhi.n	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007ca0:	2b70      	cmp	r3, #112	@ 0x70
 8007ca2:	d01a      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0xfa>
 8007ca4:	2b70      	cmp	r3, #112	@ 0x70
 8007ca6:	d87b      	bhi.n	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007ca8:	2b60      	cmp	r3, #96	@ 0x60
 8007caa:	d050      	beq.n	8007d4e <HAL_TIM_ConfigClockSource+0x16e>
 8007cac:	2b60      	cmp	r3, #96	@ 0x60
 8007cae:	d877      	bhi.n	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007cb0:	2b50      	cmp	r3, #80	@ 0x50
 8007cb2:	d03c      	beq.n	8007d2e <HAL_TIM_ConfigClockSource+0x14e>
 8007cb4:	2b50      	cmp	r3, #80	@ 0x50
 8007cb6:	d873      	bhi.n	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007cb8:	2b40      	cmp	r3, #64	@ 0x40
 8007cba:	d058      	beq.n	8007d6e <HAL_TIM_ConfigClockSource+0x18e>
 8007cbc:	2b40      	cmp	r3, #64	@ 0x40
 8007cbe:	d86f      	bhi.n	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007cc0:	2b30      	cmp	r3, #48	@ 0x30
 8007cc2:	d064      	beq.n	8007d8e <HAL_TIM_ConfigClockSource+0x1ae>
 8007cc4:	2b30      	cmp	r3, #48	@ 0x30
 8007cc6:	d86b      	bhi.n	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007cc8:	2b20      	cmp	r3, #32
 8007cca:	d060      	beq.n	8007d8e <HAL_TIM_ConfigClockSource+0x1ae>
 8007ccc:	2b20      	cmp	r3, #32
 8007cce:	d867      	bhi.n	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d05c      	beq.n	8007d8e <HAL_TIM_ConfigClockSource+0x1ae>
 8007cd4:	2b10      	cmp	r3, #16
 8007cd6:	d05a      	beq.n	8007d8e <HAL_TIM_ConfigClockSource+0x1ae>
 8007cd8:	e062      	b.n	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007cea:	f000 fc81 	bl	80085f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007cfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	609a      	str	r2, [r3, #8]
      break;
 8007d06:	e04f      	b.n	8007da8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d18:	f000 fc6a 	bl	80085f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	689a      	ldr	r2, [r3, #8]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d2a:	609a      	str	r2, [r3, #8]
      break;
 8007d2c:	e03c      	b.n	8007da8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	f000 fbdc 	bl	80084f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2150      	movs	r1, #80	@ 0x50
 8007d46:	4618      	mov	r0, r3
 8007d48:	f000 fc35 	bl	80085b6 <TIM_ITRx_SetConfig>
      break;
 8007d4c:	e02c      	b.n	8007da8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	f000 fbfb 	bl	8008556 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2160      	movs	r1, #96	@ 0x60
 8007d66:	4618      	mov	r0, r3
 8007d68:	f000 fc25 	bl	80085b6 <TIM_ITRx_SetConfig>
      break;
 8007d6c:	e01c      	b.n	8007da8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	f000 fbbc 	bl	80084f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2140      	movs	r1, #64	@ 0x40
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 fc15 	bl	80085b6 <TIM_ITRx_SetConfig>
      break;
 8007d8c:	e00c      	b.n	8007da8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4619      	mov	r1, r3
 8007d98:	4610      	mov	r0, r2
 8007d9a:	f000 fc0c 	bl	80085b6 <TIM_ITRx_SetConfig>
      break;
 8007d9e:	e003      	b.n	8007da8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	73fb      	strb	r3, [r7, #15]
      break;
 8007da4:	e000      	b.n	8007da8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8007da6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	00100070 	.word	0x00100070
 8007dc8:	00100040 	.word	0x00100040
 8007dcc:	00100030 	.word	0x00100030
 8007dd0:	00100020 	.word	0x00100020

08007dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a42      	ldr	r2, [pc, #264]	@ (8007ef0 <TIM_Base_SetConfig+0x11c>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d00f      	beq.n	8007e0c <TIM_Base_SetConfig+0x38>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007df2:	d00b      	beq.n	8007e0c <TIM_Base_SetConfig+0x38>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a3f      	ldr	r2, [pc, #252]	@ (8007ef4 <TIM_Base_SetConfig+0x120>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d007      	beq.n	8007e0c <TIM_Base_SetConfig+0x38>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a3e      	ldr	r2, [pc, #248]	@ (8007ef8 <TIM_Base_SetConfig+0x124>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d003      	beq.n	8007e0c <TIM_Base_SetConfig+0x38>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a3d      	ldr	r2, [pc, #244]	@ (8007efc <TIM_Base_SetConfig+0x128>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d108      	bne.n	8007e1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a33      	ldr	r2, [pc, #204]	@ (8007ef0 <TIM_Base_SetConfig+0x11c>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d01b      	beq.n	8007e5e <TIM_Base_SetConfig+0x8a>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e2c:	d017      	beq.n	8007e5e <TIM_Base_SetConfig+0x8a>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a30      	ldr	r2, [pc, #192]	@ (8007ef4 <TIM_Base_SetConfig+0x120>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d013      	beq.n	8007e5e <TIM_Base_SetConfig+0x8a>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a2f      	ldr	r2, [pc, #188]	@ (8007ef8 <TIM_Base_SetConfig+0x124>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d00f      	beq.n	8007e5e <TIM_Base_SetConfig+0x8a>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a2e      	ldr	r2, [pc, #184]	@ (8007efc <TIM_Base_SetConfig+0x128>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d00b      	beq.n	8007e5e <TIM_Base_SetConfig+0x8a>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a2d      	ldr	r2, [pc, #180]	@ (8007f00 <TIM_Base_SetConfig+0x12c>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d007      	beq.n	8007e5e <TIM_Base_SetConfig+0x8a>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a2c      	ldr	r2, [pc, #176]	@ (8007f04 <TIM_Base_SetConfig+0x130>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d003      	beq.n	8007e5e <TIM_Base_SetConfig+0x8a>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a2b      	ldr	r2, [pc, #172]	@ (8007f08 <TIM_Base_SetConfig+0x134>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d108      	bne.n	8007e70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	689a      	ldr	r2, [r3, #8]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a16      	ldr	r2, [pc, #88]	@ (8007ef0 <TIM_Base_SetConfig+0x11c>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d00f      	beq.n	8007ebc <TIM_Base_SetConfig+0xe8>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a17      	ldr	r2, [pc, #92]	@ (8007efc <TIM_Base_SetConfig+0x128>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d00b      	beq.n	8007ebc <TIM_Base_SetConfig+0xe8>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a16      	ldr	r2, [pc, #88]	@ (8007f00 <TIM_Base_SetConfig+0x12c>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d007      	beq.n	8007ebc <TIM_Base_SetConfig+0xe8>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a15      	ldr	r2, [pc, #84]	@ (8007f04 <TIM_Base_SetConfig+0x130>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d003      	beq.n	8007ebc <TIM_Base_SetConfig+0xe8>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a14      	ldr	r2, [pc, #80]	@ (8007f08 <TIM_Base_SetConfig+0x134>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d103      	bne.n	8007ec4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	691a      	ldr	r2, [r3, #16]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d105      	bne.n	8007ee2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	f023 0201 	bic.w	r2, r3, #1
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	611a      	str	r2, [r3, #16]
  }
}
 8007ee2:	bf00      	nop
 8007ee4:	3714      	adds	r7, #20
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	40012c00 	.word	0x40012c00
 8007ef4:	40000400 	.word	0x40000400
 8007ef8:	40000800 	.word	0x40000800
 8007efc:	40013400 	.word	0x40013400
 8007f00:	40014000 	.word	0x40014000
 8007f04:	40014400 	.word	0x40014400
 8007f08:	40014800 	.word	0x40014800

08007f0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b087      	sub	sp, #28
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a1b      	ldr	r3, [r3, #32]
 8007f1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a1b      	ldr	r3, [r3, #32]
 8007f20:	f023 0201 	bic.w	r2, r3, #1
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f023 0303 	bic.w	r3, r3, #3
 8007f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	f023 0302 	bic.w	r3, r3, #2
 8007f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a2c      	ldr	r2, [pc, #176]	@ (8008018 <TIM_OC1_SetConfig+0x10c>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d00f      	beq.n	8007f8c <TIM_OC1_SetConfig+0x80>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a2b      	ldr	r2, [pc, #172]	@ (800801c <TIM_OC1_SetConfig+0x110>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d00b      	beq.n	8007f8c <TIM_OC1_SetConfig+0x80>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a2a      	ldr	r2, [pc, #168]	@ (8008020 <TIM_OC1_SetConfig+0x114>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d007      	beq.n	8007f8c <TIM_OC1_SetConfig+0x80>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a29      	ldr	r2, [pc, #164]	@ (8008024 <TIM_OC1_SetConfig+0x118>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d003      	beq.n	8007f8c <TIM_OC1_SetConfig+0x80>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a28      	ldr	r2, [pc, #160]	@ (8008028 <TIM_OC1_SetConfig+0x11c>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d10c      	bne.n	8007fa6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	f023 0308 	bic.w	r3, r3, #8
 8007f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	f023 0304 	bic.w	r3, r3, #4
 8007fa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8008018 <TIM_OC1_SetConfig+0x10c>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d00f      	beq.n	8007fce <TIM_OC1_SetConfig+0xc2>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a1a      	ldr	r2, [pc, #104]	@ (800801c <TIM_OC1_SetConfig+0x110>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d00b      	beq.n	8007fce <TIM_OC1_SetConfig+0xc2>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a19      	ldr	r2, [pc, #100]	@ (8008020 <TIM_OC1_SetConfig+0x114>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d007      	beq.n	8007fce <TIM_OC1_SetConfig+0xc2>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a18      	ldr	r2, [pc, #96]	@ (8008024 <TIM_OC1_SetConfig+0x118>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d003      	beq.n	8007fce <TIM_OC1_SetConfig+0xc2>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a17      	ldr	r2, [pc, #92]	@ (8008028 <TIM_OC1_SetConfig+0x11c>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d111      	bne.n	8007ff2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	695b      	ldr	r3, [r3, #20]
 8007fe2:	693a      	ldr	r2, [r7, #16]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	685a      	ldr	r2, [r3, #4]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	697a      	ldr	r2, [r7, #20]
 800800a:	621a      	str	r2, [r3, #32]
}
 800800c:	bf00      	nop
 800800e:	371c      	adds	r7, #28
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	40012c00 	.word	0x40012c00
 800801c:	40013400 	.word	0x40013400
 8008020:	40014000 	.word	0x40014000
 8008024:	40014400 	.word	0x40014400
 8008028:	40014800 	.word	0x40014800

0800802c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800802c:	b480      	push	{r7}
 800802e:	b087      	sub	sp, #28
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a1b      	ldr	r3, [r3, #32]
 8008040:	f023 0210 	bic.w	r2, r3, #16
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800805a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800805e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008066:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	021b      	lsls	r3, r3, #8
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	4313      	orrs	r3, r2
 8008072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	f023 0320 	bic.w	r3, r3, #32
 800807a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	011b      	lsls	r3, r3, #4
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	4313      	orrs	r3, r2
 8008086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a28      	ldr	r2, [pc, #160]	@ (800812c <TIM_OC2_SetConfig+0x100>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d003      	beq.n	8008098 <TIM_OC2_SetConfig+0x6c>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a27      	ldr	r2, [pc, #156]	@ (8008130 <TIM_OC2_SetConfig+0x104>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d10d      	bne.n	80080b4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800809e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	011b      	lsls	r3, r3, #4
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a1d      	ldr	r2, [pc, #116]	@ (800812c <TIM_OC2_SetConfig+0x100>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d00f      	beq.n	80080dc <TIM_OC2_SetConfig+0xb0>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a1c      	ldr	r2, [pc, #112]	@ (8008130 <TIM_OC2_SetConfig+0x104>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d00b      	beq.n	80080dc <TIM_OC2_SetConfig+0xb0>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a1b      	ldr	r2, [pc, #108]	@ (8008134 <TIM_OC2_SetConfig+0x108>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d007      	beq.n	80080dc <TIM_OC2_SetConfig+0xb0>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4a1a      	ldr	r2, [pc, #104]	@ (8008138 <TIM_OC2_SetConfig+0x10c>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d003      	beq.n	80080dc <TIM_OC2_SetConfig+0xb0>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a19      	ldr	r2, [pc, #100]	@ (800813c <TIM_OC2_SetConfig+0x110>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d113      	bne.n	8008104 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80080e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80080ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	695b      	ldr	r3, [r3, #20]
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	693a      	ldr	r2, [r7, #16]
 8008100:	4313      	orrs	r3, r2
 8008102:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	685a      	ldr	r2, [r3, #4]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	621a      	str	r2, [r3, #32]
}
 800811e:	bf00      	nop
 8008120:	371c      	adds	r7, #28
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	40012c00 	.word	0x40012c00
 8008130:	40013400 	.word	0x40013400
 8008134:	40014000 	.word	0x40014000
 8008138:	40014400 	.word	0x40014400
 800813c:	40014800 	.word	0x40014800

08008140 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008140:	b480      	push	{r7}
 8008142:	b087      	sub	sp, #28
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a1b      	ldr	r3, [r3, #32]
 800814e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a1b      	ldr	r3, [r3, #32]
 8008154:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800816e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f023 0303 	bic.w	r3, r3, #3
 800817a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	4313      	orrs	r3, r2
 8008184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800818c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	021b      	lsls	r3, r3, #8
 8008194:	697a      	ldr	r2, [r7, #20]
 8008196:	4313      	orrs	r3, r2
 8008198:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a27      	ldr	r2, [pc, #156]	@ (800823c <TIM_OC3_SetConfig+0xfc>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d003      	beq.n	80081aa <TIM_OC3_SetConfig+0x6a>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a26      	ldr	r2, [pc, #152]	@ (8008240 <TIM_OC3_SetConfig+0x100>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d10d      	bne.n	80081c6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80081b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	021b      	lsls	r3, r3, #8
 80081b8:	697a      	ldr	r2, [r7, #20]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80081c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a1c      	ldr	r2, [pc, #112]	@ (800823c <TIM_OC3_SetConfig+0xfc>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d00f      	beq.n	80081ee <TIM_OC3_SetConfig+0xae>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a1b      	ldr	r2, [pc, #108]	@ (8008240 <TIM_OC3_SetConfig+0x100>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d00b      	beq.n	80081ee <TIM_OC3_SetConfig+0xae>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a1a      	ldr	r2, [pc, #104]	@ (8008244 <TIM_OC3_SetConfig+0x104>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d007      	beq.n	80081ee <TIM_OC3_SetConfig+0xae>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a19      	ldr	r2, [pc, #100]	@ (8008248 <TIM_OC3_SetConfig+0x108>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d003      	beq.n	80081ee <TIM_OC3_SetConfig+0xae>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a18      	ldr	r2, [pc, #96]	@ (800824c <TIM_OC3_SetConfig+0x10c>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d113      	bne.n	8008216 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80081fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	695b      	ldr	r3, [r3, #20]
 8008202:	011b      	lsls	r3, r3, #4
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	4313      	orrs	r3, r2
 8008208:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	011b      	lsls	r3, r3, #4
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	4313      	orrs	r3, r2
 8008214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	693a      	ldr	r2, [r7, #16]
 800821a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	697a      	ldr	r2, [r7, #20]
 800822e:	621a      	str	r2, [r3, #32]
}
 8008230:	bf00      	nop
 8008232:	371c      	adds	r7, #28
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	40012c00 	.word	0x40012c00
 8008240:	40013400 	.word	0x40013400
 8008244:	40014000 	.word	0x40014000
 8008248:	40014400 	.word	0x40014400
 800824c:	40014800 	.word	0x40014800

08008250 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008250:	b480      	push	{r7}
 8008252:	b087      	sub	sp, #28
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a1b      	ldr	r3, [r3, #32]
 8008264:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	69db      	ldr	r3, [r3, #28]
 8008276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800827e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800828a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	021b      	lsls	r3, r3, #8
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	4313      	orrs	r3, r2
 8008296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800829e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	031b      	lsls	r3, r3, #12
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a28      	ldr	r2, [pc, #160]	@ (8008350 <TIM_OC4_SetConfig+0x100>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d003      	beq.n	80082bc <TIM_OC4_SetConfig+0x6c>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4a27      	ldr	r2, [pc, #156]	@ (8008354 <TIM_OC4_SetConfig+0x104>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d10d      	bne.n	80082d8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80082c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	031b      	lsls	r3, r3, #12
 80082ca:	697a      	ldr	r2, [r7, #20]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a1d      	ldr	r2, [pc, #116]	@ (8008350 <TIM_OC4_SetConfig+0x100>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d00f      	beq.n	8008300 <TIM_OC4_SetConfig+0xb0>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a1c      	ldr	r2, [pc, #112]	@ (8008354 <TIM_OC4_SetConfig+0x104>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d00b      	beq.n	8008300 <TIM_OC4_SetConfig+0xb0>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a1b      	ldr	r2, [pc, #108]	@ (8008358 <TIM_OC4_SetConfig+0x108>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d007      	beq.n	8008300 <TIM_OC4_SetConfig+0xb0>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a1a      	ldr	r2, [pc, #104]	@ (800835c <TIM_OC4_SetConfig+0x10c>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d003      	beq.n	8008300 <TIM_OC4_SetConfig+0xb0>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a19      	ldr	r2, [pc, #100]	@ (8008360 <TIM_OC4_SetConfig+0x110>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d113      	bne.n	8008328 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008306:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800830e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	019b      	lsls	r3, r3, #6
 8008316:	693a      	ldr	r2, [r7, #16]
 8008318:	4313      	orrs	r3, r2
 800831a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	019b      	lsls	r3, r3, #6
 8008322:	693a      	ldr	r2, [r7, #16]
 8008324:	4313      	orrs	r3, r2
 8008326:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	685a      	ldr	r2, [r3, #4]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	621a      	str	r2, [r3, #32]
}
 8008342:	bf00      	nop
 8008344:	371c      	adds	r7, #28
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	40012c00 	.word	0x40012c00
 8008354:	40013400 	.word	0x40013400
 8008358:	40014000 	.word	0x40014000
 800835c:	40014400 	.word	0x40014400
 8008360:	40014800 	.word	0x40014800

08008364 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008364:	b480      	push	{r7}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a1b      	ldr	r3, [r3, #32]
 8008378:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800838a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	4313      	orrs	r3, r2
 80083a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80083a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	041b      	lsls	r3, r3, #16
 80083b0:	693a      	ldr	r2, [r7, #16]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a17      	ldr	r2, [pc, #92]	@ (8008418 <TIM_OC5_SetConfig+0xb4>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d00f      	beq.n	80083de <TIM_OC5_SetConfig+0x7a>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a16      	ldr	r2, [pc, #88]	@ (800841c <TIM_OC5_SetConfig+0xb8>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d00b      	beq.n	80083de <TIM_OC5_SetConfig+0x7a>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a15      	ldr	r2, [pc, #84]	@ (8008420 <TIM_OC5_SetConfig+0xbc>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d007      	beq.n	80083de <TIM_OC5_SetConfig+0x7a>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a14      	ldr	r2, [pc, #80]	@ (8008424 <TIM_OC5_SetConfig+0xc0>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d003      	beq.n	80083de <TIM_OC5_SetConfig+0x7a>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a13      	ldr	r2, [pc, #76]	@ (8008428 <TIM_OC5_SetConfig+0xc4>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d109      	bne.n	80083f2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	021b      	lsls	r3, r3, #8
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	697a      	ldr	r2, [r7, #20]
 80083f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	693a      	ldr	r2, [r7, #16]
 800840a:	621a      	str	r2, [r3, #32]
}
 800840c:	bf00      	nop
 800840e:	371c      	adds	r7, #28
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr
 8008418:	40012c00 	.word	0x40012c00
 800841c:	40013400 	.word	0x40013400
 8008420:	40014000 	.word	0x40014000
 8008424:	40014400 	.word	0x40014400
 8008428:	40014800 	.word	0x40014800

0800842c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800842c:	b480      	push	{r7}
 800842e:	b087      	sub	sp, #28
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a1b      	ldr	r3, [r3, #32]
 8008440:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800845a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800845e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	021b      	lsls	r3, r3, #8
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	4313      	orrs	r3, r2
 800846a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008472:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	051b      	lsls	r3, r3, #20
 800847a:	693a      	ldr	r2, [r7, #16]
 800847c:	4313      	orrs	r3, r2
 800847e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a18      	ldr	r2, [pc, #96]	@ (80084e4 <TIM_OC6_SetConfig+0xb8>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d00f      	beq.n	80084a8 <TIM_OC6_SetConfig+0x7c>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a17      	ldr	r2, [pc, #92]	@ (80084e8 <TIM_OC6_SetConfig+0xbc>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d00b      	beq.n	80084a8 <TIM_OC6_SetConfig+0x7c>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a16      	ldr	r2, [pc, #88]	@ (80084ec <TIM_OC6_SetConfig+0xc0>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d007      	beq.n	80084a8 <TIM_OC6_SetConfig+0x7c>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a15      	ldr	r2, [pc, #84]	@ (80084f0 <TIM_OC6_SetConfig+0xc4>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d003      	beq.n	80084a8 <TIM_OC6_SetConfig+0x7c>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a14      	ldr	r2, [pc, #80]	@ (80084f4 <TIM_OC6_SetConfig+0xc8>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d109      	bne.n	80084bc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80084ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	029b      	lsls	r3, r3, #10
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	697a      	ldr	r2, [r7, #20]
 80084c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	685a      	ldr	r2, [r3, #4]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	693a      	ldr	r2, [r7, #16]
 80084d4:	621a      	str	r2, [r3, #32]
}
 80084d6:	bf00      	nop
 80084d8:	371c      	adds	r7, #28
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	40012c00 	.word	0x40012c00
 80084e8:	40013400 	.word	0x40013400
 80084ec:	40014000 	.word	0x40014000
 80084f0:	40014400 	.word	0x40014400
 80084f4:	40014800 	.word	0x40014800

080084f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b087      	sub	sp, #28
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6a1b      	ldr	r3, [r3, #32]
 8008508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6a1b      	ldr	r3, [r3, #32]
 800850e:	f023 0201 	bic.w	r2, r3, #1
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	011b      	lsls	r3, r3, #4
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	4313      	orrs	r3, r2
 800852c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	f023 030a 	bic.w	r3, r3, #10
 8008534:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008536:	697a      	ldr	r2, [r7, #20]
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	4313      	orrs	r3, r2
 800853c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	693a      	ldr	r2, [r7, #16]
 8008542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	621a      	str	r2, [r3, #32]
}
 800854a:	bf00      	nop
 800854c:	371c      	adds	r7, #28
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008556:	b480      	push	{r7}
 8008558:	b087      	sub	sp, #28
 800855a:	af00      	add	r7, sp, #0
 800855c:	60f8      	str	r0, [r7, #12]
 800855e:	60b9      	str	r1, [r7, #8]
 8008560:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6a1b      	ldr	r3, [r3, #32]
 8008566:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6a1b      	ldr	r3, [r3, #32]
 800856c:	f023 0210 	bic.w	r2, r3, #16
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008580:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	031b      	lsls	r3, r3, #12
 8008586:	693a      	ldr	r2, [r7, #16]
 8008588:	4313      	orrs	r3, r2
 800858a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008592:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	011b      	lsls	r3, r3, #4
 8008598:	697a      	ldr	r2, [r7, #20]
 800859a:	4313      	orrs	r3, r2
 800859c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	693a      	ldr	r2, [r7, #16]
 80085a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	697a      	ldr	r2, [r7, #20]
 80085a8:	621a      	str	r2, [r3, #32]
}
 80085aa:	bf00      	nop
 80085ac:	371c      	adds	r7, #28
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b085      	sub	sp, #20
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80085cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	f043 0307 	orr.w	r3, r3, #7
 80085dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	68fa      	ldr	r2, [r7, #12]
 80085e2:	609a      	str	r2, [r3, #8]
}
 80085e4:	bf00      	nop
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b087      	sub	sp, #28
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
 80085fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800860a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	021a      	lsls	r2, r3, #8
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	431a      	orrs	r2, r3
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	4313      	orrs	r3, r2
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	4313      	orrs	r3, r2
 800861c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	697a      	ldr	r2, [r7, #20]
 8008622:	609a      	str	r2, [r3, #8]
}
 8008624:	bf00      	nop
 8008626:	371c      	adds	r7, #28
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008630:	b480      	push	{r7}
 8008632:	b087      	sub	sp, #28
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	f003 031f 	and.w	r3, r3, #31
 8008642:	2201      	movs	r2, #1
 8008644:	fa02 f303 	lsl.w	r3, r2, r3
 8008648:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6a1a      	ldr	r2, [r3, #32]
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	43db      	mvns	r3, r3
 8008652:	401a      	ands	r2, r3
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6a1a      	ldr	r2, [r3, #32]
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f003 031f 	and.w	r3, r3, #31
 8008662:	6879      	ldr	r1, [r7, #4]
 8008664:	fa01 f303 	lsl.w	r3, r1, r3
 8008668:	431a      	orrs	r2, r3
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	621a      	str	r2, [r3, #32]
}
 800866e:	bf00      	nop
 8008670:	371c      	adds	r7, #28
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
	...

0800867c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800868c:	2b01      	cmp	r3, #1
 800868e:	d101      	bne.n	8008694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008690:	2302      	movs	r3, #2
 8008692:	e065      	b.n	8008760 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2202      	movs	r2, #2
 80086a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a2c      	ldr	r2, [pc, #176]	@ (800876c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d004      	beq.n	80086c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a2b      	ldr	r2, [pc, #172]	@ (8008770 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d108      	bne.n	80086da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80086ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	68fa      	ldr	r2, [r7, #12]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80086e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a1b      	ldr	r2, [pc, #108]	@ (800876c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d018      	beq.n	8008734 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800870a:	d013      	beq.n	8008734 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a18      	ldr	r2, [pc, #96]	@ (8008774 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d00e      	beq.n	8008734 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a17      	ldr	r2, [pc, #92]	@ (8008778 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d009      	beq.n	8008734 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a12      	ldr	r2, [pc, #72]	@ (8008770 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d004      	beq.n	8008734 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a13      	ldr	r2, [pc, #76]	@ (800877c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d10c      	bne.n	800874e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800873a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	4313      	orrs	r3, r2
 8008744:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3714      	adds	r7, #20
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	40012c00 	.word	0x40012c00
 8008770:	40013400 	.word	0x40013400
 8008774:	40000400 	.word	0x40000400
 8008778:	40000800 	.word	0x40000800
 800877c:	40014000 	.word	0x40014000

08008780 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800878a:	2300      	movs	r3, #0
 800878c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008794:	2b01      	cmp	r3, #1
 8008796:	d101      	bne.n	800879c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008798:	2302      	movs	r3, #2
 800879a:	e073      	b.n	8008884 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	4313      	orrs	r3, r2
 80087be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4313      	orrs	r3, r2
 80087da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	695b      	ldr	r3, [r3, #20]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008802:	4313      	orrs	r3, r2
 8008804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	699b      	ldr	r3, [r3, #24]
 8008810:	041b      	lsls	r3, r3, #16
 8008812:	4313      	orrs	r3, r2
 8008814:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	69db      	ldr	r3, [r3, #28]
 8008820:	4313      	orrs	r3, r2
 8008822:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a19      	ldr	r2, [pc, #100]	@ (8008890 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d004      	beq.n	8008838 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a18      	ldr	r2, [pc, #96]	@ (8008894 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d11c      	bne.n	8008872 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008842:	051b      	lsls	r3, r3, #20
 8008844:	4313      	orrs	r3, r2
 8008846:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	6a1b      	ldr	r3, [r3, #32]
 8008852:	4313      	orrs	r3, r2
 8008854:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008860:	4313      	orrs	r3, r2
 8008862:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800886e:	4313      	orrs	r3, r2
 8008870:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	40012c00 	.word	0x40012c00
 8008894:	40013400 	.word	0x40013400

08008898 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d101      	bne.n	80088aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e042      	b.n	8008930 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d106      	bne.n	80088c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7f9 fc7d 	bl	80021bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2224      	movs	r2, #36	@ 0x24
 80088c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f022 0201 	bic.w	r2, r2, #1
 80088d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d002      	beq.n	80088e8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 ff6e 	bl	80097c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 fc9f 	bl	800922c <UART_SetConfig>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d101      	bne.n	80088f8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	e01b      	b.n	8008930 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	685a      	ldr	r2, [r3, #4]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008906:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	689a      	ldr	r2, [r3, #8]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008916:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f042 0201 	orr.w	r2, r2, #1
 8008926:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 ffed 	bl	8009908 <UART_CheckIdleState>
 800892e:	4603      	mov	r3, r0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b08a      	sub	sp, #40	@ 0x28
 800893c:	af02      	add	r7, sp, #8
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	603b      	str	r3, [r7, #0]
 8008944:	4613      	mov	r3, r2
 8008946:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800894e:	2b20      	cmp	r3, #32
 8008950:	d17b      	bne.n	8008a4a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d002      	beq.n	800895e <HAL_UART_Transmit+0x26>
 8008958:	88fb      	ldrh	r3, [r7, #6]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d101      	bne.n	8008962 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	e074      	b.n	8008a4c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2221      	movs	r2, #33	@ 0x21
 800896e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008972:	f7f9 fd6f 	bl	8002454 <HAL_GetTick>
 8008976:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	88fa      	ldrh	r2, [r7, #6]
 800897c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	88fa      	ldrh	r2, [r7, #6]
 8008984:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008990:	d108      	bne.n	80089a4 <HAL_UART_Transmit+0x6c>
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d104      	bne.n	80089a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800899a:	2300      	movs	r3, #0
 800899c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	61bb      	str	r3, [r7, #24]
 80089a2:	e003      	b.n	80089ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089a8:	2300      	movs	r3, #0
 80089aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80089ac:	e030      	b.n	8008a10 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	2200      	movs	r2, #0
 80089b6:	2180      	movs	r1, #128	@ 0x80
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f001 f84f 	bl	8009a5c <UART_WaitOnFlagUntilTimeout>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d005      	beq.n	80089d0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2220      	movs	r2, #32
 80089c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80089cc:	2303      	movs	r3, #3
 80089ce:	e03d      	b.n	8008a4c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d10b      	bne.n	80089ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	881b      	ldrh	r3, [r3, #0]
 80089da:	461a      	mov	r2, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089e4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	3302      	adds	r3, #2
 80089ea:	61bb      	str	r3, [r7, #24]
 80089ec:	e007      	b.n	80089fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	781a      	ldrb	r2, [r3, #0]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	3301      	adds	r3, #1
 80089fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	3b01      	subs	r3, #1
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1c8      	bne.n	80089ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	2200      	movs	r2, #0
 8008a24:	2140      	movs	r1, #64	@ 0x40
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f001 f818 	bl	8009a5c <UART_WaitOnFlagUntilTimeout>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d005      	beq.n	8008a3e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2220      	movs	r2, #32
 8008a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	e006      	b.n	8008a4c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2220      	movs	r2, #32
 8008a42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008a46:	2300      	movs	r3, #0
 8008a48:	e000      	b.n	8008a4c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008a4a:	2302      	movs	r3, #2
  }
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3720      	adds	r7, #32
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b08a      	sub	sp, #40	@ 0x28
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a68:	2b20      	cmp	r3, #32
 8008a6a:	d167      	bne.n	8008b3c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d002      	beq.n	8008a78 <HAL_UART_Transmit_DMA+0x24>
 8008a72:	88fb      	ldrh	r3, [r7, #6]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d101      	bne.n	8008a7c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e060      	b.n	8008b3e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	68ba      	ldr	r2, [r7, #8]
 8008a80:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	88fa      	ldrh	r2, [r7, #6]
 8008a86:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	88fa      	ldrh	r2, [r7, #6]
 8008a8e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2221      	movs	r2, #33	@ 0x21
 8008a9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d028      	beq.n	8008afc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008aae:	4a26      	ldr	r2, [pc, #152]	@ (8008b48 <HAL_UART_Transmit_DMA+0xf4>)
 8008ab0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ab6:	4a25      	ldr	r2, [pc, #148]	@ (8008b4c <HAL_UART_Transmit_DMA+0xf8>)
 8008ab8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008abe:	4a24      	ldr	r2, [pc, #144]	@ (8008b50 <HAL_UART_Transmit_DMA+0xfc>)
 8008ac0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	3328      	adds	r3, #40	@ 0x28
 8008ada:	461a      	mov	r2, r3
 8008adc:	88fb      	ldrh	r3, [r7, #6]
 8008ade:	f7fc fc83 	bl	80053e8 <HAL_DMA_Start_IT>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d009      	beq.n	8008afc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2210      	movs	r2, #16
 8008aec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2220      	movs	r2, #32
 8008af4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e020      	b.n	8008b3e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2240      	movs	r2, #64	@ 0x40
 8008b02:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	3308      	adds	r3, #8
 8008b0a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	e853 3f00 	ldrex	r3, [r3]
 8008b12:	613b      	str	r3, [r7, #16]
   return(result);
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3308      	adds	r3, #8
 8008b22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b24:	623a      	str	r2, [r7, #32]
 8008b26:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b28:	69f9      	ldr	r1, [r7, #28]
 8008b2a:	6a3a      	ldr	r2, [r7, #32]
 8008b2c:	e841 2300 	strex	r3, r2, [r1]
 8008b30:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d1e5      	bne.n	8008b04 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	e000      	b.n	8008b3e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008b3c:	2302      	movs	r3, #2
  }
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3728      	adds	r7, #40	@ 0x28
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	08009dd3 	.word	0x08009dd3
 8008b4c:	08009e6d 	.word	0x08009e6d
 8008b50:	08009ff3 	.word	0x08009ff3

08008b54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b0ba      	sub	sp, #232	@ 0xe8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	69db      	ldr	r3, [r3, #28]
 8008b62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008b7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008b7e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008b82:	4013      	ands	r3, r2
 8008b84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008b88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d11b      	bne.n	8008bc8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b94:	f003 0320 	and.w	r3, r3, #32
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d015      	beq.n	8008bc8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ba0:	f003 0320 	and.w	r3, r3, #32
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d105      	bne.n	8008bb4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008ba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d009      	beq.n	8008bc8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f000 82e3 	beq.w	8009184 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	4798      	blx	r3
      }
      return;
 8008bc6:	e2dd      	b.n	8009184 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008bc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f000 8123 	beq.w	8008e18 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008bd2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008bd6:	4b8d      	ldr	r3, [pc, #564]	@ (8008e0c <HAL_UART_IRQHandler+0x2b8>)
 8008bd8:	4013      	ands	r3, r2
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d106      	bne.n	8008bec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008bde:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008be2:	4b8b      	ldr	r3, [pc, #556]	@ (8008e10 <HAL_UART_IRQHandler+0x2bc>)
 8008be4:	4013      	ands	r3, r2
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	f000 8116 	beq.w	8008e18 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bf0:	f003 0301 	and.w	r3, r3, #1
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d011      	beq.n	8008c1c <HAL_UART_IRQHandler+0xc8>
 8008bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00b      	beq.n	8008c1c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c12:	f043 0201 	orr.w	r2, r3, #1
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c20:	f003 0302 	and.w	r3, r3, #2
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d011      	beq.n	8008c4c <HAL_UART_IRQHandler+0xf8>
 8008c28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c2c:	f003 0301 	and.w	r3, r3, #1
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00b      	beq.n	8008c4c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2202      	movs	r2, #2
 8008c3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c42:	f043 0204 	orr.w	r2, r3, #4
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c50:	f003 0304 	and.w	r3, r3, #4
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d011      	beq.n	8008c7c <HAL_UART_IRQHandler+0x128>
 8008c58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c5c:	f003 0301 	and.w	r3, r3, #1
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00b      	beq.n	8008c7c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2204      	movs	r2, #4
 8008c6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c72:	f043 0202 	orr.w	r2, r3, #2
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c80:	f003 0308 	and.w	r3, r3, #8
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d017      	beq.n	8008cb8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c8c:	f003 0320 	and.w	r3, r3, #32
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d105      	bne.n	8008ca0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008c94:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008c98:	4b5c      	ldr	r3, [pc, #368]	@ (8008e0c <HAL_UART_IRQHandler+0x2b8>)
 8008c9a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00b      	beq.n	8008cb8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2208      	movs	r2, #8
 8008ca6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cae:	f043 0208 	orr.w	r2, r3, #8
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d012      	beq.n	8008cea <HAL_UART_IRQHandler+0x196>
 8008cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cc8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d00c      	beq.n	8008cea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008cd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ce0:	f043 0220 	orr.w	r2, r3, #32
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f000 8249 	beq.w	8009188 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cfa:	f003 0320 	and.w	r3, r3, #32
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d013      	beq.n	8008d2a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d06:	f003 0320 	and.w	r3, r3, #32
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d105      	bne.n	8008d1a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d007      	beq.n	8008d2a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d003      	beq.n	8008d2a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d30:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d3e:	2b40      	cmp	r3, #64	@ 0x40
 8008d40:	d005      	beq.n	8008d4e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008d42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008d46:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d054      	beq.n	8008df8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 ffd9 	bl	8009d06 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d5e:	2b40      	cmp	r3, #64	@ 0x40
 8008d60:	d146      	bne.n	8008df0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	3308      	adds	r3, #8
 8008d68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008d70:	e853 3f00 	ldrex	r3, [r3]
 8008d74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008d78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008d7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	3308      	adds	r3, #8
 8008d8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008d8e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008d92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008d9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008d9e:	e841 2300 	strex	r3, r2, [r1]
 8008da2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008da6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d1d9      	bne.n	8008d62 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d017      	beq.n	8008de8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dbe:	4a15      	ldr	r2, [pc, #84]	@ (8008e14 <HAL_UART_IRQHandler+0x2c0>)
 8008dc0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7fc fbe1 	bl	8005590 <HAL_DMA_Abort_IT>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d019      	beq.n	8008e08 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008de2:	4610      	mov	r0, r2
 8008de4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008de6:	e00f      	b.n	8008e08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 f9ff 	bl	80091ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dee:	e00b      	b.n	8008e08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 f9fb 	bl	80091ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008df6:	e007      	b.n	8008e08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 f9f7 	bl	80091ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008e06:	e1bf      	b.n	8009188 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e08:	bf00      	nop
    return;
 8008e0a:	e1bd      	b.n	8009188 <HAL_UART_IRQHandler+0x634>
 8008e0c:	10000001 	.word	0x10000001
 8008e10:	04000120 	.word	0x04000120
 8008e14:	0800a073 	.word	0x0800a073

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	f040 8153 	bne.w	80090c8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e26:	f003 0310 	and.w	r3, r3, #16
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	f000 814c 	beq.w	80090c8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e34:	f003 0310 	and.w	r3, r3, #16
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f000 8145 	beq.w	80090c8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2210      	movs	r2, #16
 8008e44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e50:	2b40      	cmp	r3, #64	@ 0x40
 8008e52:	f040 80bb 	bne.w	8008fcc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f000 818f 	beq.w	800918c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	f080 8187 	bcs.w	800918c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e84:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f003 0320 	and.w	r3, r3, #32
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f040 8087 	bne.w	8008faa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ea8:	e853 3f00 	ldrex	r3, [r3]
 8008eac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008eb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008eb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008eb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ec6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008eca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ece:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008ed2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008ed6:	e841 2300 	strex	r3, r2, [r1]
 8008eda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008ede:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1da      	bne.n	8008e9c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	3308      	adds	r3, #8
 8008eec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ef0:	e853 3f00 	ldrex	r3, [r3]
 8008ef4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008ef6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ef8:	f023 0301 	bic.w	r3, r3, #1
 8008efc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	3308      	adds	r3, #8
 8008f06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008f0a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008f0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008f12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008f16:	e841 2300 	strex	r3, r2, [r1]
 8008f1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008f1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1e1      	bne.n	8008ee6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	3308      	adds	r3, #8
 8008f28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f2c:	e853 3f00 	ldrex	r3, [r3]
 8008f30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008f32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	3308      	adds	r3, #8
 8008f42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008f46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008f48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008f4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008f4e:	e841 2300 	strex	r3, r2, [r1]
 8008f52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008f54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1e3      	bne.n	8008f22 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2220      	movs	r2, #32
 8008f5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f70:	e853 3f00 	ldrex	r3, [r3]
 8008f74:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f78:	f023 0310 	bic.w	r3, r3, #16
 8008f7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	461a      	mov	r2, r3
 8008f86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f8c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f92:	e841 2300 	strex	r3, r2, [r1]
 8008f96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1e4      	bne.n	8008f68 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7fc fa9a 	bl	80054de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2202      	movs	r2, #2
 8008fae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	1ad3      	subs	r3, r2, r3
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f002 fea3 	bl	800bd10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008fca:	e0df      	b.n	800918c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f000 80d1 	beq.w	8009190 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8008fee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f000 80cc 	beq.w	8009190 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009000:	e853 3f00 	ldrex	r3, [r3]
 8009004:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009008:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800900c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	461a      	mov	r2, r3
 8009016:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800901a:	647b      	str	r3, [r7, #68]	@ 0x44
 800901c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009020:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009022:	e841 2300 	strex	r3, r2, [r1]
 8009026:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1e4      	bne.n	8008ff8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	3308      	adds	r3, #8
 8009034:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009038:	e853 3f00 	ldrex	r3, [r3]
 800903c:	623b      	str	r3, [r7, #32]
   return(result);
 800903e:	6a3b      	ldr	r3, [r7, #32]
 8009040:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009044:	f023 0301 	bic.w	r3, r3, #1
 8009048:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	3308      	adds	r3, #8
 8009052:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009056:	633a      	str	r2, [r7, #48]	@ 0x30
 8009058:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800905c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800905e:	e841 2300 	strex	r3, r2, [r1]
 8009062:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1e1      	bne.n	800902e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2220      	movs	r2, #32
 800906e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	e853 3f00 	ldrex	r3, [r3]
 800908a:	60fb      	str	r3, [r7, #12]
   return(result);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f023 0310 	bic.w	r3, r3, #16
 8009092:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	461a      	mov	r2, r3
 800909c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80090a0:	61fb      	str	r3, [r7, #28]
 80090a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a4:	69b9      	ldr	r1, [r7, #24]
 80090a6:	69fa      	ldr	r2, [r7, #28]
 80090a8:	e841 2300 	strex	r3, r2, [r1]
 80090ac:	617b      	str	r3, [r7, #20]
   return(result);
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1e4      	bne.n	800907e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2202      	movs	r2, #2
 80090b8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80090ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80090be:	4619      	mov	r1, r3
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f002 fe25 	bl	800bd10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090c6:	e063      	b.n	8009190 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80090c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00e      	beq.n	80090f2 <HAL_UART_IRQHandler+0x59e>
 80090d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d008      	beq.n	80090f2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80090e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f001 f802 	bl	800a0f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090f0:	e051      	b.n	8009196 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80090f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d014      	beq.n	8009128 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80090fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009106:	2b00      	cmp	r3, #0
 8009108:	d105      	bne.n	8009116 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800910a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800910e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009112:	2b00      	cmp	r3, #0
 8009114:	d008      	beq.n	8009128 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800911a:	2b00      	cmp	r3, #0
 800911c:	d03a      	beq.n	8009194 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	4798      	blx	r3
    }
    return;
 8009126:	e035      	b.n	8009194 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800912c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009130:	2b00      	cmp	r3, #0
 8009132:	d009      	beq.n	8009148 <HAL_UART_IRQHandler+0x5f4>
 8009134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800913c:	2b00      	cmp	r3, #0
 800913e:	d003      	beq.n	8009148 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 ffac 	bl	800a09e <UART_EndTransmit_IT>
    return;
 8009146:	e026      	b.n	8009196 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800914c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009150:	2b00      	cmp	r3, #0
 8009152:	d009      	beq.n	8009168 <HAL_UART_IRQHandler+0x614>
 8009154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009158:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800915c:	2b00      	cmp	r3, #0
 800915e:	d003      	beq.n	8009168 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 ffdb 	bl	800a11c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009166:	e016      	b.n	8009196 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800916c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009170:	2b00      	cmp	r3, #0
 8009172:	d010      	beq.n	8009196 <HAL_UART_IRQHandler+0x642>
 8009174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009178:	2b00      	cmp	r3, #0
 800917a:	da0c      	bge.n	8009196 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 ffc3 	bl	800a108 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009182:	e008      	b.n	8009196 <HAL_UART_IRQHandler+0x642>
      return;
 8009184:	bf00      	nop
 8009186:	e006      	b.n	8009196 <HAL_UART_IRQHandler+0x642>
    return;
 8009188:	bf00      	nop
 800918a:	e004      	b.n	8009196 <HAL_UART_IRQHandler+0x642>
      return;
 800918c:	bf00      	nop
 800918e:	e002      	b.n	8009196 <HAL_UART_IRQHandler+0x642>
      return;
 8009190:	bf00      	nop
 8009192:	e000      	b.n	8009196 <HAL_UART_IRQHandler+0x642>
    return;
 8009194:	bf00      	nop
  }
}
 8009196:	37e8      	adds	r7, #232	@ 0xe8
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80091a4:	bf00      	nop
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80091b8:	bf00      	nop
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80091f4:	bf00      	nop
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800920e:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009216:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	4313      	orrs	r3, r2
}
 800921e:	4618      	mov	r0, r3
 8009220:	3714      	adds	r7, #20
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
	...

0800922c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800922c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009230:	b08c      	sub	sp, #48	@ 0x30
 8009232:	af00      	add	r7, sp, #0
 8009234:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009236:	2300      	movs	r3, #0
 8009238:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	689a      	ldr	r2, [r3, #8]
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	431a      	orrs	r2, r3
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	695b      	ldr	r3, [r3, #20]
 800924a:	431a      	orrs	r2, r3
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	69db      	ldr	r3, [r3, #28]
 8009250:	4313      	orrs	r3, r2
 8009252:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	4bab      	ldr	r3, [pc, #684]	@ (8009508 <UART_SetConfig+0x2dc>)
 800925c:	4013      	ands	r3, r2
 800925e:	697a      	ldr	r2, [r7, #20]
 8009260:	6812      	ldr	r2, [r2, #0]
 8009262:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009264:	430b      	orrs	r3, r1
 8009266:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	68da      	ldr	r2, [r3, #12]
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	430a      	orrs	r2, r1
 800927c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	699b      	ldr	r3, [r3, #24]
 8009282:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4aa0      	ldr	r2, [pc, #640]	@ (800950c <UART_SetConfig+0x2e0>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d004      	beq.n	8009298 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	6a1b      	ldr	r3, [r3, #32]
 8009292:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009294:	4313      	orrs	r3, r2
 8009296:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80092a2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80092a6:	697a      	ldr	r2, [r7, #20]
 80092a8:	6812      	ldr	r2, [r2, #0]
 80092aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092ac:	430b      	orrs	r3, r1
 80092ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092b6:	f023 010f 	bic.w	r1, r3, #15
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	430a      	orrs	r2, r1
 80092c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a91      	ldr	r2, [pc, #580]	@ (8009510 <UART_SetConfig+0x2e4>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d125      	bne.n	800931c <UART_SetConfig+0xf0>
 80092d0:	4b90      	ldr	r3, [pc, #576]	@ (8009514 <UART_SetConfig+0x2e8>)
 80092d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092d6:	f003 0303 	and.w	r3, r3, #3
 80092da:	2b03      	cmp	r3, #3
 80092dc:	d81a      	bhi.n	8009314 <UART_SetConfig+0xe8>
 80092de:	a201      	add	r2, pc, #4	@ (adr r2, 80092e4 <UART_SetConfig+0xb8>)
 80092e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e4:	080092f5 	.word	0x080092f5
 80092e8:	08009305 	.word	0x08009305
 80092ec:	080092fd 	.word	0x080092fd
 80092f0:	0800930d 	.word	0x0800930d
 80092f4:	2301      	movs	r3, #1
 80092f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092fa:	e0d6      	b.n	80094aa <UART_SetConfig+0x27e>
 80092fc:	2302      	movs	r3, #2
 80092fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009302:	e0d2      	b.n	80094aa <UART_SetConfig+0x27e>
 8009304:	2304      	movs	r3, #4
 8009306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800930a:	e0ce      	b.n	80094aa <UART_SetConfig+0x27e>
 800930c:	2308      	movs	r3, #8
 800930e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009312:	e0ca      	b.n	80094aa <UART_SetConfig+0x27e>
 8009314:	2310      	movs	r3, #16
 8009316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800931a:	e0c6      	b.n	80094aa <UART_SetConfig+0x27e>
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a7d      	ldr	r2, [pc, #500]	@ (8009518 <UART_SetConfig+0x2ec>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d138      	bne.n	8009398 <UART_SetConfig+0x16c>
 8009326:	4b7b      	ldr	r3, [pc, #492]	@ (8009514 <UART_SetConfig+0x2e8>)
 8009328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800932c:	f003 030c 	and.w	r3, r3, #12
 8009330:	2b0c      	cmp	r3, #12
 8009332:	d82d      	bhi.n	8009390 <UART_SetConfig+0x164>
 8009334:	a201      	add	r2, pc, #4	@ (adr r2, 800933c <UART_SetConfig+0x110>)
 8009336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800933a:	bf00      	nop
 800933c:	08009371 	.word	0x08009371
 8009340:	08009391 	.word	0x08009391
 8009344:	08009391 	.word	0x08009391
 8009348:	08009391 	.word	0x08009391
 800934c:	08009381 	.word	0x08009381
 8009350:	08009391 	.word	0x08009391
 8009354:	08009391 	.word	0x08009391
 8009358:	08009391 	.word	0x08009391
 800935c:	08009379 	.word	0x08009379
 8009360:	08009391 	.word	0x08009391
 8009364:	08009391 	.word	0x08009391
 8009368:	08009391 	.word	0x08009391
 800936c:	08009389 	.word	0x08009389
 8009370:	2300      	movs	r3, #0
 8009372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009376:	e098      	b.n	80094aa <UART_SetConfig+0x27e>
 8009378:	2302      	movs	r3, #2
 800937a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800937e:	e094      	b.n	80094aa <UART_SetConfig+0x27e>
 8009380:	2304      	movs	r3, #4
 8009382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009386:	e090      	b.n	80094aa <UART_SetConfig+0x27e>
 8009388:	2308      	movs	r3, #8
 800938a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800938e:	e08c      	b.n	80094aa <UART_SetConfig+0x27e>
 8009390:	2310      	movs	r3, #16
 8009392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009396:	e088      	b.n	80094aa <UART_SetConfig+0x27e>
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a5f      	ldr	r2, [pc, #380]	@ (800951c <UART_SetConfig+0x2f0>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d125      	bne.n	80093ee <UART_SetConfig+0x1c2>
 80093a2:	4b5c      	ldr	r3, [pc, #368]	@ (8009514 <UART_SetConfig+0x2e8>)
 80093a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80093ac:	2b30      	cmp	r3, #48	@ 0x30
 80093ae:	d016      	beq.n	80093de <UART_SetConfig+0x1b2>
 80093b0:	2b30      	cmp	r3, #48	@ 0x30
 80093b2:	d818      	bhi.n	80093e6 <UART_SetConfig+0x1ba>
 80093b4:	2b20      	cmp	r3, #32
 80093b6:	d00a      	beq.n	80093ce <UART_SetConfig+0x1a2>
 80093b8:	2b20      	cmp	r3, #32
 80093ba:	d814      	bhi.n	80093e6 <UART_SetConfig+0x1ba>
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d002      	beq.n	80093c6 <UART_SetConfig+0x19a>
 80093c0:	2b10      	cmp	r3, #16
 80093c2:	d008      	beq.n	80093d6 <UART_SetConfig+0x1aa>
 80093c4:	e00f      	b.n	80093e6 <UART_SetConfig+0x1ba>
 80093c6:	2300      	movs	r3, #0
 80093c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093cc:	e06d      	b.n	80094aa <UART_SetConfig+0x27e>
 80093ce:	2302      	movs	r3, #2
 80093d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093d4:	e069      	b.n	80094aa <UART_SetConfig+0x27e>
 80093d6:	2304      	movs	r3, #4
 80093d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093dc:	e065      	b.n	80094aa <UART_SetConfig+0x27e>
 80093de:	2308      	movs	r3, #8
 80093e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093e4:	e061      	b.n	80094aa <UART_SetConfig+0x27e>
 80093e6:	2310      	movs	r3, #16
 80093e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093ec:	e05d      	b.n	80094aa <UART_SetConfig+0x27e>
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a4b      	ldr	r2, [pc, #300]	@ (8009520 <UART_SetConfig+0x2f4>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d125      	bne.n	8009444 <UART_SetConfig+0x218>
 80093f8:	4b46      	ldr	r3, [pc, #280]	@ (8009514 <UART_SetConfig+0x2e8>)
 80093fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009402:	2bc0      	cmp	r3, #192	@ 0xc0
 8009404:	d016      	beq.n	8009434 <UART_SetConfig+0x208>
 8009406:	2bc0      	cmp	r3, #192	@ 0xc0
 8009408:	d818      	bhi.n	800943c <UART_SetConfig+0x210>
 800940a:	2b80      	cmp	r3, #128	@ 0x80
 800940c:	d00a      	beq.n	8009424 <UART_SetConfig+0x1f8>
 800940e:	2b80      	cmp	r3, #128	@ 0x80
 8009410:	d814      	bhi.n	800943c <UART_SetConfig+0x210>
 8009412:	2b00      	cmp	r3, #0
 8009414:	d002      	beq.n	800941c <UART_SetConfig+0x1f0>
 8009416:	2b40      	cmp	r3, #64	@ 0x40
 8009418:	d008      	beq.n	800942c <UART_SetConfig+0x200>
 800941a:	e00f      	b.n	800943c <UART_SetConfig+0x210>
 800941c:	2300      	movs	r3, #0
 800941e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009422:	e042      	b.n	80094aa <UART_SetConfig+0x27e>
 8009424:	2302      	movs	r3, #2
 8009426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800942a:	e03e      	b.n	80094aa <UART_SetConfig+0x27e>
 800942c:	2304      	movs	r3, #4
 800942e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009432:	e03a      	b.n	80094aa <UART_SetConfig+0x27e>
 8009434:	2308      	movs	r3, #8
 8009436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800943a:	e036      	b.n	80094aa <UART_SetConfig+0x27e>
 800943c:	2310      	movs	r3, #16
 800943e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009442:	e032      	b.n	80094aa <UART_SetConfig+0x27e>
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a30      	ldr	r2, [pc, #192]	@ (800950c <UART_SetConfig+0x2e0>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d12a      	bne.n	80094a4 <UART_SetConfig+0x278>
 800944e:	4b31      	ldr	r3, [pc, #196]	@ (8009514 <UART_SetConfig+0x2e8>)
 8009450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009454:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009458:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800945c:	d01a      	beq.n	8009494 <UART_SetConfig+0x268>
 800945e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009462:	d81b      	bhi.n	800949c <UART_SetConfig+0x270>
 8009464:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009468:	d00c      	beq.n	8009484 <UART_SetConfig+0x258>
 800946a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800946e:	d815      	bhi.n	800949c <UART_SetConfig+0x270>
 8009470:	2b00      	cmp	r3, #0
 8009472:	d003      	beq.n	800947c <UART_SetConfig+0x250>
 8009474:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009478:	d008      	beq.n	800948c <UART_SetConfig+0x260>
 800947a:	e00f      	b.n	800949c <UART_SetConfig+0x270>
 800947c:	2300      	movs	r3, #0
 800947e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009482:	e012      	b.n	80094aa <UART_SetConfig+0x27e>
 8009484:	2302      	movs	r3, #2
 8009486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800948a:	e00e      	b.n	80094aa <UART_SetConfig+0x27e>
 800948c:	2304      	movs	r3, #4
 800948e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009492:	e00a      	b.n	80094aa <UART_SetConfig+0x27e>
 8009494:	2308      	movs	r3, #8
 8009496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800949a:	e006      	b.n	80094aa <UART_SetConfig+0x27e>
 800949c:	2310      	movs	r3, #16
 800949e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094a2:	e002      	b.n	80094aa <UART_SetConfig+0x27e>
 80094a4:	2310      	movs	r3, #16
 80094a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a17      	ldr	r2, [pc, #92]	@ (800950c <UART_SetConfig+0x2e0>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	f040 80a8 	bne.w	8009606 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80094b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80094ba:	2b08      	cmp	r3, #8
 80094bc:	d834      	bhi.n	8009528 <UART_SetConfig+0x2fc>
 80094be:	a201      	add	r2, pc, #4	@ (adr r2, 80094c4 <UART_SetConfig+0x298>)
 80094c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c4:	080094e9 	.word	0x080094e9
 80094c8:	08009529 	.word	0x08009529
 80094cc:	080094f1 	.word	0x080094f1
 80094d0:	08009529 	.word	0x08009529
 80094d4:	080094f7 	.word	0x080094f7
 80094d8:	08009529 	.word	0x08009529
 80094dc:	08009529 	.word	0x08009529
 80094e0:	08009529 	.word	0x08009529
 80094e4:	080094ff 	.word	0x080094ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094e8:	f7fd f912 	bl	8006710 <HAL_RCC_GetPCLK1Freq>
 80094ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80094ee:	e021      	b.n	8009534 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80094f0:	4b0c      	ldr	r3, [pc, #48]	@ (8009524 <UART_SetConfig+0x2f8>)
 80094f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80094f4:	e01e      	b.n	8009534 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094f6:	f7fd f89d 	bl	8006634 <HAL_RCC_GetSysClockFreq>
 80094fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80094fc:	e01a      	b.n	8009534 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009502:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009504:	e016      	b.n	8009534 <UART_SetConfig+0x308>
 8009506:	bf00      	nop
 8009508:	cfff69f3 	.word	0xcfff69f3
 800950c:	40008000 	.word	0x40008000
 8009510:	40013800 	.word	0x40013800
 8009514:	40021000 	.word	0x40021000
 8009518:	40004400 	.word	0x40004400
 800951c:	40004800 	.word	0x40004800
 8009520:	40004c00 	.word	0x40004c00
 8009524:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009528:	2300      	movs	r3, #0
 800952a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009532:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009536:	2b00      	cmp	r3, #0
 8009538:	f000 812a 	beq.w	8009790 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009540:	4a9e      	ldr	r2, [pc, #632]	@ (80097bc <UART_SetConfig+0x590>)
 8009542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009546:	461a      	mov	r2, r3
 8009548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800954a:	fbb3 f3f2 	udiv	r3, r3, r2
 800954e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	685a      	ldr	r2, [r3, #4]
 8009554:	4613      	mov	r3, r2
 8009556:	005b      	lsls	r3, r3, #1
 8009558:	4413      	add	r3, r2
 800955a:	69ba      	ldr	r2, [r7, #24]
 800955c:	429a      	cmp	r2, r3
 800955e:	d305      	bcc.n	800956c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009566:	69ba      	ldr	r2, [r7, #24]
 8009568:	429a      	cmp	r2, r3
 800956a:	d903      	bls.n	8009574 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009572:	e10d      	b.n	8009790 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009576:	2200      	movs	r2, #0
 8009578:	60bb      	str	r3, [r7, #8]
 800957a:	60fa      	str	r2, [r7, #12]
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009580:	4a8e      	ldr	r2, [pc, #568]	@ (80097bc <UART_SetConfig+0x590>)
 8009582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009586:	b29b      	uxth	r3, r3
 8009588:	2200      	movs	r2, #0
 800958a:	603b      	str	r3, [r7, #0]
 800958c:	607a      	str	r2, [r7, #4]
 800958e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009592:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009596:	f7f7 fb9f 	bl	8000cd8 <__aeabi_uldivmod>
 800959a:	4602      	mov	r2, r0
 800959c:	460b      	mov	r3, r1
 800959e:	4610      	mov	r0, r2
 80095a0:	4619      	mov	r1, r3
 80095a2:	f04f 0200 	mov.w	r2, #0
 80095a6:	f04f 0300 	mov.w	r3, #0
 80095aa:	020b      	lsls	r3, r1, #8
 80095ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80095b0:	0202      	lsls	r2, r0, #8
 80095b2:	6979      	ldr	r1, [r7, #20]
 80095b4:	6849      	ldr	r1, [r1, #4]
 80095b6:	0849      	lsrs	r1, r1, #1
 80095b8:	2000      	movs	r0, #0
 80095ba:	460c      	mov	r4, r1
 80095bc:	4605      	mov	r5, r0
 80095be:	eb12 0804 	adds.w	r8, r2, r4
 80095c2:	eb43 0905 	adc.w	r9, r3, r5
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	469a      	mov	sl, r3
 80095ce:	4693      	mov	fp, r2
 80095d0:	4652      	mov	r2, sl
 80095d2:	465b      	mov	r3, fp
 80095d4:	4640      	mov	r0, r8
 80095d6:	4649      	mov	r1, r9
 80095d8:	f7f7 fb7e 	bl	8000cd8 <__aeabi_uldivmod>
 80095dc:	4602      	mov	r2, r0
 80095de:	460b      	mov	r3, r1
 80095e0:	4613      	mov	r3, r2
 80095e2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80095e4:	6a3b      	ldr	r3, [r7, #32]
 80095e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80095ea:	d308      	bcc.n	80095fe <UART_SetConfig+0x3d2>
 80095ec:	6a3b      	ldr	r3, [r7, #32]
 80095ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095f2:	d204      	bcs.n	80095fe <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	6a3a      	ldr	r2, [r7, #32]
 80095fa:	60da      	str	r2, [r3, #12]
 80095fc:	e0c8      	b.n	8009790 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009604:	e0c4      	b.n	8009790 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	69db      	ldr	r3, [r3, #28]
 800960a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800960e:	d167      	bne.n	80096e0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009610:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009614:	2b08      	cmp	r3, #8
 8009616:	d828      	bhi.n	800966a <UART_SetConfig+0x43e>
 8009618:	a201      	add	r2, pc, #4	@ (adr r2, 8009620 <UART_SetConfig+0x3f4>)
 800961a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961e:	bf00      	nop
 8009620:	08009645 	.word	0x08009645
 8009624:	0800964d 	.word	0x0800964d
 8009628:	08009655 	.word	0x08009655
 800962c:	0800966b 	.word	0x0800966b
 8009630:	0800965b 	.word	0x0800965b
 8009634:	0800966b 	.word	0x0800966b
 8009638:	0800966b 	.word	0x0800966b
 800963c:	0800966b 	.word	0x0800966b
 8009640:	08009663 	.word	0x08009663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009644:	f7fd f864 	bl	8006710 <HAL_RCC_GetPCLK1Freq>
 8009648:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800964a:	e014      	b.n	8009676 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800964c:	f7fd f876 	bl	800673c <HAL_RCC_GetPCLK2Freq>
 8009650:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009652:	e010      	b.n	8009676 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009654:	4b5a      	ldr	r3, [pc, #360]	@ (80097c0 <UART_SetConfig+0x594>)
 8009656:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009658:	e00d      	b.n	8009676 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800965a:	f7fc ffeb 	bl	8006634 <HAL_RCC_GetSysClockFreq>
 800965e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009660:	e009      	b.n	8009676 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009662:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009666:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009668:	e005      	b.n	8009676 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800966a:	2300      	movs	r3, #0
 800966c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009674:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009678:	2b00      	cmp	r3, #0
 800967a:	f000 8089 	beq.w	8009790 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009682:	4a4e      	ldr	r2, [pc, #312]	@ (80097bc <UART_SetConfig+0x590>)
 8009684:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009688:	461a      	mov	r2, r3
 800968a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800968c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009690:	005a      	lsls	r2, r3, #1
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	085b      	lsrs	r3, r3, #1
 8009698:	441a      	add	r2, r3
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	fbb2 f3f3 	udiv	r3, r2, r3
 80096a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096a4:	6a3b      	ldr	r3, [r7, #32]
 80096a6:	2b0f      	cmp	r3, #15
 80096a8:	d916      	bls.n	80096d8 <UART_SetConfig+0x4ac>
 80096aa:	6a3b      	ldr	r3, [r7, #32]
 80096ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096b0:	d212      	bcs.n	80096d8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80096b2:	6a3b      	ldr	r3, [r7, #32]
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	f023 030f 	bic.w	r3, r3, #15
 80096ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80096bc:	6a3b      	ldr	r3, [r7, #32]
 80096be:	085b      	lsrs	r3, r3, #1
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	f003 0307 	and.w	r3, r3, #7
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	8bfb      	ldrh	r3, [r7, #30]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	8bfa      	ldrh	r2, [r7, #30]
 80096d4:	60da      	str	r2, [r3, #12]
 80096d6:	e05b      	b.n	8009790 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80096de:	e057      	b.n	8009790 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80096e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80096e4:	2b08      	cmp	r3, #8
 80096e6:	d828      	bhi.n	800973a <UART_SetConfig+0x50e>
 80096e8:	a201      	add	r2, pc, #4	@ (adr r2, 80096f0 <UART_SetConfig+0x4c4>)
 80096ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ee:	bf00      	nop
 80096f0:	08009715 	.word	0x08009715
 80096f4:	0800971d 	.word	0x0800971d
 80096f8:	08009725 	.word	0x08009725
 80096fc:	0800973b 	.word	0x0800973b
 8009700:	0800972b 	.word	0x0800972b
 8009704:	0800973b 	.word	0x0800973b
 8009708:	0800973b 	.word	0x0800973b
 800970c:	0800973b 	.word	0x0800973b
 8009710:	08009733 	.word	0x08009733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009714:	f7fc fffc 	bl	8006710 <HAL_RCC_GetPCLK1Freq>
 8009718:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800971a:	e014      	b.n	8009746 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800971c:	f7fd f80e 	bl	800673c <HAL_RCC_GetPCLK2Freq>
 8009720:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009722:	e010      	b.n	8009746 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009724:	4b26      	ldr	r3, [pc, #152]	@ (80097c0 <UART_SetConfig+0x594>)
 8009726:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009728:	e00d      	b.n	8009746 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800972a:	f7fc ff83 	bl	8006634 <HAL_RCC_GetSysClockFreq>
 800972e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009730:	e009      	b.n	8009746 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009732:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009736:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009738:	e005      	b.n	8009746 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800973a:	2300      	movs	r3, #0
 800973c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009744:	bf00      	nop
    }

    if (pclk != 0U)
 8009746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009748:	2b00      	cmp	r3, #0
 800974a:	d021      	beq.n	8009790 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009750:	4a1a      	ldr	r2, [pc, #104]	@ (80097bc <UART_SetConfig+0x590>)
 8009752:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009756:	461a      	mov	r2, r3
 8009758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975a:	fbb3 f2f2 	udiv	r2, r3, r2
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	085b      	lsrs	r3, r3, #1
 8009764:	441a      	add	r2, r3
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	fbb2 f3f3 	udiv	r3, r2, r3
 800976e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009770:	6a3b      	ldr	r3, [r7, #32]
 8009772:	2b0f      	cmp	r3, #15
 8009774:	d909      	bls.n	800978a <UART_SetConfig+0x55e>
 8009776:	6a3b      	ldr	r3, [r7, #32]
 8009778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800977c:	d205      	bcs.n	800978a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800977e:	6a3b      	ldr	r3, [r7, #32]
 8009780:	b29a      	uxth	r2, r3
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	60da      	str	r2, [r3, #12]
 8009788:	e002      	b.n	8009790 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	2201      	movs	r2, #1
 8009794:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	2201      	movs	r2, #1
 800979c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	2200      	movs	r2, #0
 80097a4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	2200      	movs	r2, #0
 80097aa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80097ac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3730      	adds	r7, #48	@ 0x30
 80097b4:	46bd      	mov	sp, r7
 80097b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097ba:	bf00      	nop
 80097bc:	08010d88 	.word	0x08010d88
 80097c0:	00f42400 	.word	0x00f42400

080097c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097d0:	f003 0308 	and.w	r3, r3, #8
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d00a      	beq.n	80097ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	430a      	orrs	r2, r1
 80097ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097f2:	f003 0301 	and.w	r3, r3, #1
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00a      	beq.n	8009810 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	430a      	orrs	r2, r1
 800980e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009814:	f003 0302 	and.w	r3, r3, #2
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00a      	beq.n	8009832 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	430a      	orrs	r2, r1
 8009830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009836:	f003 0304 	and.w	r3, r3, #4
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00a      	beq.n	8009854 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	430a      	orrs	r2, r1
 8009852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009858:	f003 0310 	and.w	r3, r3, #16
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00a      	beq.n	8009876 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	430a      	orrs	r2, r1
 8009874:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800987a:	f003 0320 	and.w	r3, r3, #32
 800987e:	2b00      	cmp	r3, #0
 8009880:	d00a      	beq.n	8009898 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	430a      	orrs	r2, r1
 8009896:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800989c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d01a      	beq.n	80098da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	430a      	orrs	r2, r1
 80098b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098c2:	d10a      	bne.n	80098da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	430a      	orrs	r2, r1
 80098d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00a      	beq.n	80098fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	430a      	orrs	r2, r1
 80098fa:	605a      	str	r2, [r3, #4]
  }
}
 80098fc:	bf00      	nop
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b098      	sub	sp, #96	@ 0x60
 800990c:	af02      	add	r7, sp, #8
 800990e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009918:	f7f8 fd9c 	bl	8002454 <HAL_GetTick>
 800991c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f003 0308 	and.w	r3, r3, #8
 8009928:	2b08      	cmp	r3, #8
 800992a:	d12f      	bne.n	800998c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800992c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009930:	9300      	str	r3, [sp, #0]
 8009932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009934:	2200      	movs	r2, #0
 8009936:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 f88e 	bl	8009a5c <UART_WaitOnFlagUntilTimeout>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d022      	beq.n	800998c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800994e:	e853 3f00 	ldrex	r3, [r3]
 8009952:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009956:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800995a:	653b      	str	r3, [r7, #80]	@ 0x50
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	461a      	mov	r2, r3
 8009962:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009964:	647b      	str	r3, [r7, #68]	@ 0x44
 8009966:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009968:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800996a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800996c:	e841 2300 	strex	r3, r2, [r1]
 8009970:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1e6      	bne.n	8009946 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2220      	movs	r2, #32
 800997c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009988:	2303      	movs	r3, #3
 800998a:	e063      	b.n	8009a54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f003 0304 	and.w	r3, r3, #4
 8009996:	2b04      	cmp	r3, #4
 8009998:	d149      	bne.n	8009a2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800999a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800999e:	9300      	str	r3, [sp, #0]
 80099a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099a2:	2200      	movs	r2, #0
 80099a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 f857 	bl	8009a5c <UART_WaitOnFlagUntilTimeout>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d03c      	beq.n	8009a2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099bc:	e853 3f00 	ldrex	r3, [r3]
 80099c0:	623b      	str	r3, [r7, #32]
   return(result);
 80099c2:	6a3b      	ldr	r3, [r7, #32]
 80099c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	461a      	mov	r2, r3
 80099d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80099d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099da:	e841 2300 	strex	r3, r2, [r1]
 80099de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80099e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1e6      	bne.n	80099b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3308      	adds	r3, #8
 80099ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	e853 3f00 	ldrex	r3, [r3]
 80099f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f023 0301 	bic.w	r3, r3, #1
 80099fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	3308      	adds	r3, #8
 8009a04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a06:	61fa      	str	r2, [r7, #28]
 8009a08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0a:	69b9      	ldr	r1, [r7, #24]
 8009a0c:	69fa      	ldr	r2, [r7, #28]
 8009a0e:	e841 2300 	strex	r3, r2, [r1]
 8009a12:	617b      	str	r3, [r7, #20]
   return(result);
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1e5      	bne.n	80099e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2220      	movs	r2, #32
 8009a1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	e012      	b.n	8009a54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2220      	movs	r2, #32
 8009a32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2220      	movs	r2, #32
 8009a3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3758      	adds	r7, #88	@ 0x58
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	603b      	str	r3, [r7, #0]
 8009a68:	4613      	mov	r3, r2
 8009a6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a6c:	e04f      	b.n	8009b0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a74:	d04b      	beq.n	8009b0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a76:	f7f8 fced 	bl	8002454 <HAL_GetTick>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	1ad3      	subs	r3, r2, r3
 8009a80:	69ba      	ldr	r2, [r7, #24]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d302      	bcc.n	8009a8c <UART_WaitOnFlagUntilTimeout+0x30>
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d101      	bne.n	8009a90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	e04e      	b.n	8009b2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f003 0304 	and.w	r3, r3, #4
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d037      	beq.n	8009b0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	2b80      	cmp	r3, #128	@ 0x80
 8009aa2:	d034      	beq.n	8009b0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	2b40      	cmp	r3, #64	@ 0x40
 8009aa8:	d031      	beq.n	8009b0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	69db      	ldr	r3, [r3, #28]
 8009ab0:	f003 0308 	and.w	r3, r3, #8
 8009ab4:	2b08      	cmp	r3, #8
 8009ab6:	d110      	bne.n	8009ada <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2208      	movs	r2, #8
 8009abe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f000 f920 	bl	8009d06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2208      	movs	r2, #8
 8009aca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e029      	b.n	8009b2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	69db      	ldr	r3, [r3, #28]
 8009ae0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ae4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ae8:	d111      	bne.n	8009b0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009af2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	f000 f906 	bl	8009d06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2220      	movs	r2, #32
 8009afe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	e00f      	b.n	8009b2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	69da      	ldr	r2, [r3, #28]
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	4013      	ands	r3, r2
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	bf0c      	ite	eq
 8009b1e:	2301      	moveq	r3, #1
 8009b20:	2300      	movne	r3, #0
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	461a      	mov	r2, r3
 8009b26:	79fb      	ldrb	r3, [r7, #7]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d0a0      	beq.n	8009a6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b2c:	2300      	movs	r3, #0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3710      	adds	r7, #16
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
	...

08009b38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b096      	sub	sp, #88	@ 0x58
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	4613      	mov	r3, r2
 8009b44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	68ba      	ldr	r2, [r7, #8]
 8009b4a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	88fa      	ldrh	r2, [r7, #6]
 8009b50:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2222      	movs	r2, #34	@ 0x22
 8009b60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d02d      	beq.n	8009bca <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b74:	4a40      	ldr	r2, [pc, #256]	@ (8009c78 <UART_Start_Receive_DMA+0x140>)
 8009b76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b7e:	4a3f      	ldr	r2, [pc, #252]	@ (8009c7c <UART_Start_Receive_DMA+0x144>)
 8009b80:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b88:	4a3d      	ldr	r2, [pc, #244]	@ (8009c80 <UART_Start_Receive_DMA+0x148>)
 8009b8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b92:	2200      	movs	r2, #0
 8009b94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	3324      	adds	r3, #36	@ 0x24
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ba8:	461a      	mov	r2, r3
 8009baa:	88fb      	ldrh	r3, [r7, #6]
 8009bac:	f7fb fc1c 	bl	80053e8 <HAL_DMA_Start_IT>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d009      	beq.n	8009bca <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2210      	movs	r2, #16
 8009bba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2220      	movs	r2, #32
 8009bc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e051      	b.n	8009c6e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d018      	beq.n	8009c04 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bda:	e853 3f00 	ldrex	r3, [r3]
 8009bde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009be2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009be6:	657b      	str	r3, [r7, #84]	@ 0x54
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	461a      	mov	r2, r3
 8009bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bf2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009bf6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009bf8:	e841 2300 	strex	r3, r2, [r1]
 8009bfc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009bfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d1e6      	bne.n	8009bd2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	3308      	adds	r3, #8
 8009c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c0e:	e853 3f00 	ldrex	r3, [r3]
 8009c12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c16:	f043 0301 	orr.w	r3, r3, #1
 8009c1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	3308      	adds	r3, #8
 8009c22:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009c24:	637a      	str	r2, [r7, #52]	@ 0x34
 8009c26:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c28:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009c2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c2c:	e841 2300 	strex	r3, r2, [r1]
 8009c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d1e5      	bne.n	8009c04 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	3308      	adds	r3, #8
 8009c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	e853 3f00 	ldrex	r3, [r3]
 8009c46:	613b      	str	r3, [r7, #16]
   return(result);
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	3308      	adds	r3, #8
 8009c56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009c58:	623a      	str	r2, [r7, #32]
 8009c5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5c:	69f9      	ldr	r1, [r7, #28]
 8009c5e:	6a3a      	ldr	r2, [r7, #32]
 8009c60:	e841 2300 	strex	r3, r2, [r1]
 8009c64:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d1e5      	bne.n	8009c38 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3758      	adds	r7, #88	@ 0x58
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	08009e89 	.word	0x08009e89
 8009c7c:	08009fb5 	.word	0x08009fb5
 8009c80:	08009ff3 	.word	0x08009ff3

08009c84 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b08f      	sub	sp, #60	@ 0x3c
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c92:	6a3b      	ldr	r3, [r7, #32]
 8009c94:	e853 3f00 	ldrex	r3, [r3]
 8009c98:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009cac:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009cb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cb2:	e841 2300 	strex	r3, r2, [r1]
 8009cb6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1e6      	bne.n	8009c8c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	3308      	adds	r3, #8
 8009cc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	e853 3f00 	ldrex	r3, [r3]
 8009ccc:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009cd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	3308      	adds	r3, #8
 8009cdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cde:	61ba      	str	r2, [r7, #24]
 8009ce0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce2:	6979      	ldr	r1, [r7, #20]
 8009ce4:	69ba      	ldr	r2, [r7, #24]
 8009ce6:	e841 2300 	strex	r3, r2, [r1]
 8009cea:	613b      	str	r3, [r7, #16]
   return(result);
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d1e5      	bne.n	8009cbe <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2220      	movs	r2, #32
 8009cf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009cfa:	bf00      	nop
 8009cfc:	373c      	adds	r7, #60	@ 0x3c
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr

08009d06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d06:	b480      	push	{r7}
 8009d08:	b095      	sub	sp, #84	@ 0x54
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d16:	e853 3f00 	ldrex	r3, [r3]
 8009d1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	461a      	mov	r2, r3
 8009d2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d2e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009d32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d34:	e841 2300 	strex	r3, r2, [r1]
 8009d38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d1e6      	bne.n	8009d0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	3308      	adds	r3, #8
 8009d46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d48:	6a3b      	ldr	r3, [r7, #32]
 8009d4a:	e853 3f00 	ldrex	r3, [r3]
 8009d4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d56:	f023 0301 	bic.w	r3, r3, #1
 8009d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	3308      	adds	r3, #8
 8009d62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009d66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d6c:	e841 2300 	strex	r3, r2, [r1]
 8009d70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1e3      	bne.n	8009d40 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d118      	bne.n	8009db2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	e853 3f00 	ldrex	r3, [r3]
 8009d8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	f023 0310 	bic.w	r3, r3, #16
 8009d94:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d9e:	61bb      	str	r3, [r7, #24]
 8009da0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da2:	6979      	ldr	r1, [r7, #20]
 8009da4:	69ba      	ldr	r2, [r7, #24]
 8009da6:	e841 2300 	strex	r3, r2, [r1]
 8009daa:	613b      	str	r3, [r7, #16]
   return(result);
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d1e6      	bne.n	8009d80 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2220      	movs	r2, #32
 8009db6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009dc6:	bf00      	nop
 8009dc8:	3754      	adds	r7, #84	@ 0x54
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr

08009dd2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b090      	sub	sp, #64	@ 0x40
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dde:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f003 0320 	and.w	r3, r3, #32
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d137      	bne.n	8009e5e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009df0:	2200      	movs	r2, #0
 8009df2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	3308      	adds	r3, #8
 8009dfc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e00:	e853 3f00 	ldrex	r3, [r3]
 8009e04:	623b      	str	r3, [r7, #32]
   return(result);
 8009e06:	6a3b      	ldr	r3, [r7, #32]
 8009e08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	3308      	adds	r3, #8
 8009e14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e16:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e1e:	e841 2300 	strex	r3, r2, [r1]
 8009e22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1e5      	bne.n	8009df6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	e853 3f00 	ldrex	r3, [r3]
 8009e36:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	461a      	mov	r2, r3
 8009e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e48:	61fb      	str	r3, [r7, #28]
 8009e4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4c:	69b9      	ldr	r1, [r7, #24]
 8009e4e:	69fa      	ldr	r2, [r7, #28]
 8009e50:	e841 2300 	strex	r3, r2, [r1]
 8009e54:	617b      	str	r3, [r7, #20]
   return(result);
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d1e6      	bne.n	8009e2a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e5c:	e002      	b.n	8009e64 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009e5e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009e60:	f7ff f99c 	bl	800919c <HAL_UART_TxCpltCallback>
}
 8009e64:	bf00      	nop
 8009e66:	3740      	adds	r7, #64	@ 0x40
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e78:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f7ff f998 	bl	80091b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e80:	bf00      	nop
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b09c      	sub	sp, #112	@ 0x70
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e94:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f003 0320 	and.w	r3, r3, #32
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d171      	bne.n	8009f88 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009ea4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009eac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009eb4:	e853 3f00 	ldrex	r3, [r3]
 8009eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009eba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ebc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ec0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ec2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009eca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ecc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ece:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ed0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ed2:	e841 2300 	strex	r3, r2, [r1]
 8009ed6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ed8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1e6      	bne.n	8009eac <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ede:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	3308      	adds	r3, #8
 8009ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee8:	e853 3f00 	ldrex	r3, [r3]
 8009eec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ef0:	f023 0301 	bic.w	r3, r3, #1
 8009ef4:	667b      	str	r3, [r7, #100]	@ 0x64
 8009ef6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	3308      	adds	r3, #8
 8009efc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009efe:	647a      	str	r2, [r7, #68]	@ 0x44
 8009f00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f06:	e841 2300 	strex	r3, r2, [r1]
 8009f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d1e5      	bne.n	8009ede <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	3308      	adds	r3, #8
 8009f18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f1c:	e853 3f00 	ldrex	r3, [r3]
 8009f20:	623b      	str	r3, [r7, #32]
   return(result);
 8009f22:	6a3b      	ldr	r3, [r7, #32]
 8009f24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f28:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	3308      	adds	r3, #8
 8009f30:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009f32:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f3a:	e841 2300 	strex	r3, r2, [r1]
 8009f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d1e5      	bne.n	8009f12 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009f46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f48:	2220      	movs	r2, #32
 8009f4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d118      	bne.n	8009f88 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	e853 3f00 	ldrex	r3, [r3]
 8009f62:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f023 0310 	bic.w	r3, r3, #16
 8009f6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	461a      	mov	r2, r3
 8009f72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f74:	61fb      	str	r3, [r7, #28]
 8009f76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f78:	69b9      	ldr	r1, [r7, #24]
 8009f7a:	69fa      	ldr	r2, [r7, #28]
 8009f7c:	e841 2300 	strex	r3, r2, [r1]
 8009f80:	617b      	str	r3, [r7, #20]
   return(result);
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d1e6      	bne.n	8009f56 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d107      	bne.n	8009fa6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009fa0:	f001 feb6 	bl	800bd10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009fa4:	e002      	b.n	8009fac <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009fa6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009fa8:	f7ff f90c 	bl	80091c4 <HAL_UART_RxCpltCallback>
}
 8009fac:	bf00      	nop
 8009fae:	3770      	adds	r7, #112	@ 0x70
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d109      	bne.n	8009fe4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009fd6:	085b      	lsrs	r3, r3, #1
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	4619      	mov	r1, r3
 8009fdc:	68f8      	ldr	r0, [r7, #12]
 8009fde:	f001 fe97 	bl	800bd10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009fe2:	e002      	b.n	8009fea <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009fe4:	68f8      	ldr	r0, [r7, #12]
 8009fe6:	f7ff f8f7 	bl	80091d8 <HAL_UART_RxHalfCpltCallback>
}
 8009fea:	bf00      	nop
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b086      	sub	sp, #24
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ffe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a006:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a00e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a01a:	2b80      	cmp	r3, #128	@ 0x80
 800a01c:	d109      	bne.n	800a032 <UART_DMAError+0x40>
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	2b21      	cmp	r3, #33	@ 0x21
 800a022:	d106      	bne.n	800a032 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	2200      	movs	r2, #0
 800a028:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a02c:	6978      	ldr	r0, [r7, #20]
 800a02e:	f7ff fe29 	bl	8009c84 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a03c:	2b40      	cmp	r3, #64	@ 0x40
 800a03e:	d109      	bne.n	800a054 <UART_DMAError+0x62>
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2b22      	cmp	r3, #34	@ 0x22
 800a044:	d106      	bne.n	800a054 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	2200      	movs	r2, #0
 800a04a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a04e:	6978      	ldr	r0, [r7, #20]
 800a050:	f7ff fe59 	bl	8009d06 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a05a:	f043 0210 	orr.w	r2, r3, #16
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a064:	6978      	ldr	r0, [r7, #20]
 800a066:	f7ff f8c1 	bl	80091ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a06a:	bf00      	nop
 800a06c:	3718      	adds	r7, #24
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b084      	sub	sp, #16
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a07e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2200      	movs	r2, #0
 800a084:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f7ff f8ab 	bl	80091ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a096:	bf00      	nop
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b088      	sub	sp, #32
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	e853 3f00 	ldrex	r3, [r3]
 800a0b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0ba:	61fb      	str	r3, [r7, #28]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	69fb      	ldr	r3, [r7, #28]
 800a0c4:	61bb      	str	r3, [r7, #24]
 800a0c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c8:	6979      	ldr	r1, [r7, #20]
 800a0ca:	69ba      	ldr	r2, [r7, #24]
 800a0cc:	e841 2300 	strex	r3, r2, [r1]
 800a0d0:	613b      	str	r3, [r7, #16]
   return(result);
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d1e6      	bne.n	800a0a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2220      	movs	r2, #32
 800a0dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f7ff f858 	bl	800919c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0ec:	bf00      	nop
 800a0ee:	3720      	adds	r7, #32
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a0fc:	bf00      	nop
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a110:	bf00      	nop
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a124:	bf00      	nop
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a130:	b480      	push	{r7}
 800a132:	b085      	sub	sp, #20
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d101      	bne.n	800a146 <HAL_UARTEx_DisableFifoMode+0x16>
 800a142:	2302      	movs	r3, #2
 800a144:	e027      	b.n	800a196 <HAL_UARTEx_DisableFifoMode+0x66>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2201      	movs	r2, #1
 800a14a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2224      	movs	r2, #36	@ 0x24
 800a152:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f022 0201 	bic.w	r2, r2, #1
 800a16c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a174:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2200      	movs	r2, #0
 800a17a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2220      	movs	r2, #32
 800a188:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	3714      	adds	r7, #20
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr

0800a1a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b084      	sub	sp, #16
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
 800a1aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d101      	bne.n	800a1ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a1b6:	2302      	movs	r3, #2
 800a1b8:	e02d      	b.n	800a216 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2224      	movs	r2, #36	@ 0x24
 800a1c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f022 0201 	bic.w	r2, r2, #1
 800a1e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	683a      	ldr	r2, [r7, #0]
 800a1f2:	430a      	orrs	r2, r1
 800a1f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 f8a4 	bl	800a344 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2220      	movs	r2, #32
 800a208:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3710      	adds	r7, #16
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}

0800a21e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b084      	sub	sp, #16
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
 800a226:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d101      	bne.n	800a236 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a232:	2302      	movs	r3, #2
 800a234:	e02d      	b.n	800a292 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2201      	movs	r2, #1
 800a23a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2224      	movs	r2, #36	@ 0x24
 800a242:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f022 0201 	bic.w	r2, r2, #1
 800a25c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	683a      	ldr	r2, [r7, #0]
 800a26e:	430a      	orrs	r2, r1
 800a270:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 f866 	bl	800a344 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2220      	movs	r2, #32
 800a284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3710      	adds	r7, #16
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b08c      	sub	sp, #48	@ 0x30
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	60f8      	str	r0, [r7, #12]
 800a2a2:	60b9      	str	r1, [r7, #8]
 800a2a4:	4613      	mov	r3, r2
 800a2a6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a2ae:	2b20      	cmp	r3, #32
 800a2b0:	d142      	bne.n	800a338 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d002      	beq.n	800a2be <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800a2b8:	88fb      	ldrh	r3, [r7, #6]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d101      	bne.n	800a2c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e03b      	b.n	800a33a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a2ce:	88fb      	ldrh	r3, [r7, #6]
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	68b9      	ldr	r1, [r7, #8]
 800a2d4:	68f8      	ldr	r0, [r7, #12]
 800a2d6:	f7ff fc2f 	bl	8009b38 <UART_Start_Receive_DMA>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a2e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d124      	bne.n	800a332 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d11d      	bne.n	800a32c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2210      	movs	r2, #16
 800a2f6:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2fe:	69bb      	ldr	r3, [r7, #24]
 800a300:	e853 3f00 	ldrex	r3, [r3]
 800a304:	617b      	str	r3, [r7, #20]
   return(result);
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	f043 0310 	orr.w	r3, r3, #16
 800a30c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	461a      	mov	r2, r3
 800a314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a316:	627b      	str	r3, [r7, #36]	@ 0x24
 800a318:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a31a:	6a39      	ldr	r1, [r7, #32]
 800a31c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a31e:	e841 2300 	strex	r3, r2, [r1]
 800a322:	61fb      	str	r3, [r7, #28]
   return(result);
 800a324:	69fb      	ldr	r3, [r7, #28]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d1e6      	bne.n	800a2f8 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800a32a:	e002      	b.n	800a332 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a32c:	2301      	movs	r3, #1
 800a32e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800a332:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a336:	e000      	b.n	800a33a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a338:	2302      	movs	r3, #2
  }
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3730      	adds	r7, #48	@ 0x30
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
	...

0800a344 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a350:	2b00      	cmp	r3, #0
 800a352:	d108      	bne.n	800a366 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2201      	movs	r2, #1
 800a358:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2201      	movs	r2, #1
 800a360:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a364:	e031      	b.n	800a3ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a366:	2308      	movs	r3, #8
 800a368:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a36a:	2308      	movs	r3, #8
 800a36c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	0e5b      	lsrs	r3, r3, #25
 800a376:	b2db      	uxtb	r3, r3
 800a378:	f003 0307 	and.w	r3, r3, #7
 800a37c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	0f5b      	lsrs	r3, r3, #29
 800a386:	b2db      	uxtb	r3, r3
 800a388:	f003 0307 	and.w	r3, r3, #7
 800a38c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a38e:	7bbb      	ldrb	r3, [r7, #14]
 800a390:	7b3a      	ldrb	r2, [r7, #12]
 800a392:	4911      	ldr	r1, [pc, #68]	@ (800a3d8 <UARTEx_SetNbDataToProcess+0x94>)
 800a394:	5c8a      	ldrb	r2, [r1, r2]
 800a396:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a39a:	7b3a      	ldrb	r2, [r7, #12]
 800a39c:	490f      	ldr	r1, [pc, #60]	@ (800a3dc <UARTEx_SetNbDataToProcess+0x98>)
 800a39e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a3a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3a4:	b29a      	uxth	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3ac:	7bfb      	ldrb	r3, [r7, #15]
 800a3ae:	7b7a      	ldrb	r2, [r7, #13]
 800a3b0:	4909      	ldr	r1, [pc, #36]	@ (800a3d8 <UARTEx_SetNbDataToProcess+0x94>)
 800a3b2:	5c8a      	ldrb	r2, [r1, r2]
 800a3b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a3b8:	7b7a      	ldrb	r2, [r7, #13]
 800a3ba:	4908      	ldr	r1, [pc, #32]	@ (800a3dc <UARTEx_SetNbDataToProcess+0x98>)
 800a3bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3be:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3c2:	b29a      	uxth	r2, r3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a3ca:	bf00      	nop
 800a3cc:	3714      	adds	r7, #20
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	08010da0 	.word	0x08010da0
 800a3dc:	08010da8 	.word	0x08010da8

0800a3e0 <goToZeroElecAngle>:
#include "pid.h"
#include "lowpass_filter.h"
#include "focLib.h"

void goToZeroElecAngle(BldcMotor *motor)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
    setTorque(motor, 0, OPEN_LOOP_TORQUE, 0);
 800a3e8:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 800a40c <goToZeroElecAngle+0x2c>
 800a3ec:	eddf 0a08 	vldr	s1, [pc, #32]	@ 800a410 <goToZeroElecAngle+0x30>
 800a3f0:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 800a40c <goToZeroElecAngle+0x2c>
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f001 f853 	bl	800b4a0 <setTorque>
    delay(700);
 800a3fa:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800a3fe:	f001 fda3 	bl	800bf48 <delay>
}
 800a402:	bf00      	nop
 800a404:	3708      	adds	r7, #8
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	00000000 	.word	0x00000000
 800a410:	4013cd3a 	.word	0x4013cd3a

0800a414 <alignSensor>:
int alignSensor(BldcMotor *motor)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b08a      	sub	sp, #40	@ 0x28
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
    // setTorque(motor, OPEN_LOOP_TORQUE, 0, _3PI_2);
    // delay(200);
    // encoderUpdate(&motor->magEncoder);
    // float start_angle = motor->magEncoder.fullAngle;
    // FOC_log("start_angle:%f\n", start_angle);
    for (int i = 0; i <= 500; i++)
 800a41c:	2300      	movs	r3, #0
 800a41e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a420:	e025      	b.n	800a46e <alignSensor+0x5a>
    {
        float angle = _3PI_2 + _2PI * i / 500.0f;
 800a422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a424:	ee07 3a90 	vmov	s15, r3
 800a428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a42c:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 800a634 <alignSensor+0x220>
 800a430:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a434:	eddf 6a80 	vldr	s13, [pc, #512]	@ 800a638 <alignSensor+0x224>
 800a438:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a43c:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 800a63c <alignSensor+0x228>
 800a440:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a444:	edc7 7a02 	vstr	s15, [r7, #8]
        setTorque(motor, OPEN_LOOP_TORQUE, 0, angle);
 800a448:	ed97 1a02 	vldr	s2, [r7, #8]
 800a44c:	eddf 0a7c 	vldr	s1, [pc, #496]	@ 800a640 <alignSensor+0x22c>
 800a450:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 800a644 <alignSensor+0x230>
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f001 f823 	bl	800b4a0 <setTorque>
        encoderUpdate(&motor->magEncoder);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4618      	mov	r0, r3
 800a45e:	f000 fcf5 	bl	800ae4c <encoderUpdate>
        delay(2);
 800a462:	2002      	movs	r0, #2
 800a464:	f001 fd70 	bl	800bf48 <delay>
    for (int i = 0; i <= 500; i++)
 800a468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a46a:	3301      	adds	r3, #1
 800a46c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a46e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a470:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800a474:	ddd5      	ble.n	800a422 <alignSensor+0xe>
    }
    // encoderUpdate(&motor->magEncoder);

    float mid_angle = motor->magEncoder.fullAngle;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	695b      	ldr	r3, [r3, #20]
 800a47a:	61fb      	str	r3, [r7, #28]
    FOC_log("mid_angle:%f\n", mid_angle);
 800a47c:	69f8      	ldr	r0, [r7, #28]
 800a47e:	f7f6 f88b 	bl	8000598 <__aeabi_f2d>
 800a482:	4602      	mov	r2, r0
 800a484:	460b      	mov	r3, r1
 800a486:	4870      	ldr	r0, [pc, #448]	@ (800a648 <alignSensor+0x234>)
 800a488:	f001 fc5e 	bl	800bd48 <FOC_log>
    // move one electrical revolution backwards
    for (int i = 500; i >= 0; i--)
 800a48c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800a490:	623b      	str	r3, [r7, #32]
 800a492:	e025      	b.n	800a4e0 <alignSensor+0xcc>
    {
        float angle = _3PI_2 + _2PI * i / 500.0f;
 800a494:	6a3b      	ldr	r3, [r7, #32]
 800a496:	ee07 3a90 	vmov	s15, r3
 800a49a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a49e:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 800a634 <alignSensor+0x220>
 800a4a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a4a6:	eddf 6a64 	vldr	s13, [pc, #400]	@ 800a638 <alignSensor+0x224>
 800a4aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a4ae:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 800a63c <alignSensor+0x228>
 800a4b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a4b6:	edc7 7a03 	vstr	s15, [r7, #12]
        setTorque(motor, OPEN_LOOP_TORQUE, 0, angle);
 800a4ba:	ed97 1a03 	vldr	s2, [r7, #12]
 800a4be:	eddf 0a60 	vldr	s1, [pc, #384]	@ 800a640 <alignSensor+0x22c>
 800a4c2:	ed9f 0a60 	vldr	s0, [pc, #384]	@ 800a644 <alignSensor+0x230>
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 ffea 	bl	800b4a0 <setTorque>
        encoderUpdate(&motor->magEncoder);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f000 fcbc 	bl	800ae4c <encoderUpdate>
        delay(2);
 800a4d4:	2002      	movs	r0, #2
 800a4d6:	f001 fd37 	bl	800bf48 <delay>
    for (int i = 500; i >= 0; i--)
 800a4da:	6a3b      	ldr	r3, [r7, #32]
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	623b      	str	r3, [r7, #32]
 800a4e0:	6a3b      	ldr	r3, [r7, #32]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	dad6      	bge.n	800a494 <alignSensor+0x80>
    }
    // encoderUpdate(&motor->magEncoder);

    float end_angle = motor->magEncoder.fullAngle;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	695b      	ldr	r3, [r3, #20]
 800a4ea:	61bb      	str	r3, [r7, #24]
    FOC_log("end_angle:%f\n", end_angle);
 800a4ec:	69b8      	ldr	r0, [r7, #24]
 800a4ee:	f7f6 f853 	bl	8000598 <__aeabi_f2d>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	4855      	ldr	r0, [pc, #340]	@ (800a64c <alignSensor+0x238>)
 800a4f8:	f001 fc26 	bl	800bd48 <FOC_log>
    // setPhaseVoltage(0, 0, 0);
    delay(200);
 800a4fc:	20c8      	movs	r0, #200	@ 0xc8
 800a4fe:	f001 fd23 	bl	800bf48 <delay>

    // determine the direction the sensor moved
    float moved = fabsf(mid_angle - end_angle);
 800a502:	ed97 7a07 	vldr	s14, [r7, #28]
 800a506:	edd7 7a06 	vldr	s15, [r7, #24]
 800a50a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a50e:	eef0 7ae7 	vabs.f32	s15, s15
 800a512:	edc7 7a05 	vstr	s15, [r7, #20]
    FOC_log("moved:%f\n", moved);
 800a516:	6978      	ldr	r0, [r7, #20]
 800a518:	f7f6 f83e 	bl	8000598 <__aeabi_f2d>
 800a51c:	4602      	mov	r2, r0
 800a51e:	460b      	mov	r3, r1
 800a520:	484b      	ldr	r0, [pc, #300]	@ (800a650 <alignSensor+0x23c>)
 800a522:	f001 fc11 	bl	800bd48 <FOC_log>
    if (moved < MIN_ANGLE_DETECT_MOVEMENT)
 800a526:	edd7 7a05 	vldr	s15, [r7, #20]
 800a52a:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800a654 <alignSensor+0x240>
 800a52e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a536:	d504      	bpl.n	800a542 <alignSensor+0x12e>
    { // minimum angle to detect movement
        FOC_log("Failed to notice movement\n");
 800a538:	4847      	ldr	r0, [pc, #284]	@ (800a658 <alignSensor+0x244>)
 800a53a:	f001 fc05 	bl	800bd48 <FOC_log>
        return 0; // failed calibration
 800a53e:	2300      	movs	r3, #0
 800a540:	e073      	b.n	800a62a <alignSensor+0x216>
    }
    else if (mid_angle < end_angle)
 800a542:	ed97 7a07 	vldr	s14, [r7, #28]
 800a546:	edd7 7a06 	vldr	s15, [r7, #24]
 800a54a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a552:	d507      	bpl.n	800a564 <alignSensor+0x150>
    {
        FOC_log("sensor_direction==CCW\n");
 800a554:	4841      	ldr	r0, [pc, #260]	@ (800a65c <alignSensor+0x248>)
 800a556:	f001 fbf7 	bl	800bd48 <FOC_log>
        motor->magEncoder.direction = CCW;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	22ff      	movs	r2, #255	@ 0xff
 800a55e:	f883 2020 	strb.w	r2, [r3, #32]
 800a562:	e006      	b.n	800a572 <alignSensor+0x15e>
    }
    else
    {
        FOC_log("sensor_direction==CW\n");
 800a564:	483e      	ldr	r0, [pc, #248]	@ (800a660 <alignSensor+0x24c>)
 800a566:	f001 fbef 	bl	800bd48 <FOC_log>
        motor->magEncoder.direction = CW;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2201      	movs	r2, #1
 800a56e:	f883 2020 	strb.w	r2, [r3, #32]
    }
    // check pole pair number
    bool pp_check_result = !(fabsf(moved * motor->pole_pairs - _2PI) > 0.5f); // 0.5f is arbitrary number it can be lower or higher!
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a578:	ee07 3a90 	vmov	s15, r3
 800a57c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a580:	edd7 7a05 	vldr	s15, [r7, #20]
 800a584:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a588:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800a634 <alignSensor+0x220>
 800a58c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a590:	eef0 7ae7 	vabs.f32	s15, s15
 800a594:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a598:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a59c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5a0:	bfcc      	ite	gt
 800a5a2:	2301      	movgt	r3, #1
 800a5a4:	2300      	movle	r3, #0
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	f083 0301 	eor.w	r3, r3, #1
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	74fb      	strb	r3, [r7, #19]
    if (pp_check_result == false)
 800a5b0:	7cfb      	ldrb	r3, [r7, #19]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d10d      	bne.n	800a5d2 <alignSensor+0x1be>
    {
        FOC_log("PP check: fail - estimated pp: %d\n", (int)(_2PI / moved));
 800a5b6:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800a634 <alignSensor+0x220>
 800a5ba:	ed97 7a05 	vldr	s14, [r7, #20]
 800a5be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a5c6:	ee17 1a90 	vmov	r1, s15
 800a5ca:	4826      	ldr	r0, [pc, #152]	@ (800a664 <alignSensor+0x250>)
 800a5cc:	f001 fbbc 	bl	800bd48 <FOC_log>
 800a5d0:	e002      	b.n	800a5d8 <alignSensor+0x1c4>
    }
    else
    {
        FOC_log("PP check: OK!\n");
 800a5d2:	4825      	ldr	r0, [pc, #148]	@ (800a668 <alignSensor+0x254>)
 800a5d4:	f001 fbb8 	bl	800bd48 <FOC_log>
    }

    // align the electrical phases of the motor and sensor
    // set angle -90(270 = 3PI/2) degrees
    goToZeroElecAngle(motor);
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f7ff ff01 	bl	800a3e0 <goToZeroElecAngle>
    // read the sensor
    encoderUpdate(&motor->magEncoder);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f000 fc33 	bl	800ae4c <encoderUpdate>
    // get the current zero electric angle
    motor->zeroElectricAngleOffSet = 0;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f04f 0200 	mov.w	r2, #0
 800a5ec:	635a      	str	r2, [r3, #52]	@ 0x34
    getElecAngle(motor);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 f840 	bl	800a674 <getElecAngle>
    motor->zeroElectricAngleOffSet = motor->angle_el;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	635a      	str	r2, [r3, #52]	@ 0x34
    // zero_electric_angle =  _normalizeAngle(_electricalAngle(sensor_direction*sensor->getAngle(), pole_pairs));

    // encoderUpdate(&motor->magEncoder);
    getElecAngle(motor);
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 f839 	bl	800a674 <getElecAngle>
    // motor->zeroElectricAngleOffSet = 0;
    // FOC_log("[zeroAngleOffset]:%f  [zeroAngle]:%f\r\n", motor->zeroElectricAngleOffSet, motor->angle_el);
    FOC_log("[zeroAngleOffset]:%f\n", motor->zeroElectricAngleOffSet);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a606:	4618      	mov	r0, r3
 800a608:	f7f5 ffc6 	bl	8000598 <__aeabi_f2d>
 800a60c:	4602      	mov	r2, r0
 800a60e:	460b      	mov	r3, r1
 800a610:	4816      	ldr	r0, [pc, #88]	@ (800a66c <alignSensor+0x258>)
 800a612:	f001 fb99 	bl	800bd48 <FOC_log>
    FOC_log("[zeroAngle]:%f\n", motor->angle_el);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7f5 ffbc 	bl	8000598 <__aeabi_f2d>
 800a620:	4602      	mov	r2, r0
 800a622:	460b      	mov	r3, r1
 800a624:	4812      	ldr	r0, [pc, #72]	@ (800a670 <alignSensor+0x25c>)
 800a626:	f001 fb8f 	bl	800bd48 <FOC_log>
    // // make sure the angle_el is about zero

    // delay(200);
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3728      	adds	r7, #40	@ 0x28
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	40c90fdb 	.word	0x40c90fdb
 800a638:	43fa0000 	.word	0x43fa0000
 800a63c:	4096cbe4 	.word	0x4096cbe4
 800a640:	00000000 	.word	0x00000000
 800a644:	4013cd3a 	.word	0x4013cd3a
 800a648:	08010c18 	.word	0x08010c18
 800a64c:	08010c28 	.word	0x08010c28
 800a650:	08010c38 	.word	0x08010c38
 800a654:	3d7ecfa9 	.word	0x3d7ecfa9
 800a658:	08010c44 	.word	0x08010c44
 800a65c:	08010c60 	.word	0x08010c60
 800a660:	08010c78 	.word	0x08010c78
 800a664:	08010c90 	.word	0x08010c90
 800a668:	08010cb4 	.word	0x08010cb4
 800a66c:	08010cc4 	.word	0x08010cc4
 800a670:	08010cdc 	.word	0x08010cdc

0800a674 <getElecAngle>:

void getElecAngle(BldcMotor *motor)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
    motor->angle_el = _normalizeAngle(motor->pole_pairs * motor->magEncoder.shaftAngle - motor->zeroElectricAngleOffSet);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a682:	ee07 3a90 	vmov	s15, r3
 800a686:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	edd3 7a04 	vldr	s15, [r3, #16]
 800a690:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800a69a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a69e:	eeb0 0a67 	vmov.f32	s0, s15
 800a6a2:	f000 fd75 	bl	800b190 <_normalizeAngle>
 800a6a6:	eef0 7a40 	vmov.f32	s15, s0
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
}
 800a6b0:	bf00      	nop
 800a6b2:	3708      	adds	r7, #8
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <foc>:

void foc(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b088      	sub	sp, #32
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]

    if (motor->state == MOTOR_CALIBRATE)
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10d      	bne.n	800a6ea <foc+0x32>
    {
        getCurrentOffsets(motor, adc_a, adc_b, 100);
 800a6ce:	2364      	movs	r3, #100	@ 0x64
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	68b9      	ldr	r1, [r7, #8]
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f000 f9b3 	bl	800aa40 <getCurrentOffsets>
        alignSensor(motor);
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f7ff fe9a 	bl	800a414 <alignSensor>
        motor->state = MOTOR_START;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2202      	movs	r2, #2
 800a6e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                break;
            }
            setTorque(motor, motor->Uq, motor->Ud, motor->angle_el);
        }
    }
}
 800a6e8:	e19a      	b.n	800aa20 <foc+0x368>
        getPhaseCurrents(motor, adc_a, adc_b);
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	68b9      	ldr	r1, [r7, #8]
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	f000 fa76 	bl	800abe0 <getPhaseCurrents>
        getABCurrents(motor);
 800a6f4:	68f8      	ldr	r0, [r7, #12]
 800a6f6:	f000 fb15 	bl	800ad24 <getABCurrents>
        getDQCurrents(motor);
 800a6fa:	68f8      	ldr	r0, [r7, #12]
 800a6fc:	f000 fb38 	bl	800ad70 <getDQCurrents>
        motor->Iq = lpfOperator(&motor->IqFilter, motor->Iq);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f103 02f4 	add.w	r2, r3, #244	@ 0xf4
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800a70c:	eeb0 0a67 	vmov.f32	s0, s15
 800a710:	4610      	mov	r0, r2
 800a712:	f000 fc35 	bl	800af80 <lpfOperator>
 800a716:	eef0 7a40 	vmov.f32	s15, s0
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
        motor->Id = lpfOperator(&motor->IdFilter, motor->Id);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f503 7280 	add.w	r2, r3, #256	@ 0x100
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800a72c:	eeb0 0a67 	vmov.f32	s0, s15
 800a730:	4610      	mov	r0, r2
 800a732:	f000 fc25 	bl	800af80 <lpfOperator>
 800a736:	eef0 7a40 	vmov.f32	s15, s0
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
        encoderUpdate(&motor->magEncoder);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	4618      	mov	r0, r3
 800a744:	f000 fb82 	bl	800ae4c <encoderUpdate>
        motor->magEncoder.velocity = lpfOperator(&motor->velocityFilter, motor->magEncoder.velocity);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f503 7286 	add.w	r2, r3, #268	@ 0x10c
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	edd3 7a06 	vldr	s15, [r3, #24]
 800a754:	eeb0 0a67 	vmov.f32	s0, s15
 800a758:	4610      	mov	r0, r2
 800a75a:	f000 fc11 	bl	800af80 <lpfOperator>
 800a75e:	eef0 7a40 	vmov.f32	s15, s0
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	edc3 7a06 	vstr	s15, [r3, #24]
        getElecAngle(motor);
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f7ff ff83 	bl	800a674 <getElecAngle>
        if (motor->state == MOTOR_READY)
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a774:	2b01      	cmp	r3, #1
 800a776:	f000 8153 	beq.w	800aa20 <foc+0x368>
        else if (motor->state == MOTOR_START)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a780:	2b02      	cmp	r3, #2
 800a782:	f040 814d 	bne.w	800aa20 <foc+0x368>
            switch (motor->controlType)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800a78c:	2b03      	cmp	r3, #3
 800a78e:	f200 8135 	bhi.w	800a9fc <foc+0x344>
 800a792:	a201      	add	r2, pc, #4	@ (adr r2, 800a798 <foc+0xe0>)
 800a794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a798:	0800a805 	.word	0x0800a805
 800a79c:	0800a7a9 	.word	0x0800a7a9
 800a7a0:	0800a875 	.word	0x0800a875
 800a7a4:	0800a92b 	.word	0x0800a92b
                motor->target = 50;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	4a9f      	ldr	r2, [pc, #636]	@ (800aa28 <foc+0x370>)
 800a7ac:	631a      	str	r2, [r3, #48]	@ 0x30
                shaftAngle = _normalizeAngle(shaftAngle + motor->target * motor->Ts);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800a7ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7be:	4b9b      	ldr	r3, [pc, #620]	@ (800aa2c <foc+0x374>)
 800a7c0:	edd3 7a00 	vldr	s15, [r3]
 800a7c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7c8:	eeb0 0a67 	vmov.f32	s0, s15
 800a7cc:	f000 fce0 	bl	800b190 <_normalizeAngle>
 800a7d0:	eef0 7a40 	vmov.f32	s15, s0
 800a7d4:	4b95      	ldr	r3, [pc, #596]	@ (800aa2c <foc+0x374>)
 800a7d6:	edc3 7a00 	vstr	s15, [r3]
                motor->angle_el = _electricalAngle(shaftAngle, motor->pole_pairs);
 800a7da:	4b94      	ldr	r3, [pc, #592]	@ (800aa2c <foc+0x374>)
 800a7dc:	edd3 7a00 	vldr	s15, [r3]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	eeb0 0a67 	vmov.f32	s0, s15
 800a7ec:	f000 fd06 	bl	800b1fc <_electricalAngle>
 800a7f0:	eef0 7a40 	vmov.f32	s15, s0
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                motor->Uq = OPEN_LOOP_TORQUE;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	4a8c      	ldr	r2, [pc, #560]	@ (800aa30 <foc+0x378>)
 800a7fe:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
                break;
 800a802:	e0fb      	b.n	800a9fc <foc+0x344>
                if (motor->torqueType == VOLTAGE)
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d108      	bne.n	800a820 <foc+0x168>
                    motor->target = UqMAX;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	4a88      	ldr	r2, [pc, #544]	@ (800aa34 <foc+0x37c>)
 800a812:	631a      	str	r2, [r3, #48]	@ 0x30
                    motor->Uq = motor->target;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
                break;
 800a81e:	e0ed      	b.n	800a9fc <foc+0x344>
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800a82c:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 800aa38 <foc+0x380>
 800a830:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a834:	eeb0 0a67 	vmov.f32	s0, s15
 800a838:	4610      	mov	r0, r2
 800a83a:	f000 fd29 	bl	800b290 <pidOperator>
 800a83e:	eef0 7a40 	vmov.f32	s15, s0
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                    motor->Uq = pidOperator(&motor->pidIq, motor->target - motor->Iq);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800a85a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a85e:	eeb0 0a67 	vmov.f32	s0, s15
 800a862:	4610      	mov	r0, r2
 800a864:	f000 fd14 	bl	800b290 <pidOperator>
 800a868:	eef0 7a40 	vmov.f32	s15, s0
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800a872:	e0c3      	b.n	800a9fc <foc+0x344>
                if (motor->torqueType == VOLTAGE)
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d119      	bne.n	800a8b2 <foc+0x1fa>
                    motor->target = 190;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	4a6e      	ldr	r2, [pc, #440]	@ (800aa3c <foc+0x384>)
 800a882:	631a      	str	r2, [r3, #48]	@ 0x30
                    velocityErr = motor->target - motor->magEncoder.velocity;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	edd3 7a06 	vldr	s15, [r3, #24]
 800a890:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a894:	edc7 7a04 	vstr	s15, [r7, #16]
                    motor->Uq = pidOperator(&motor->velocityPID, velocityErr);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	33ac      	adds	r3, #172	@ 0xac
 800a89c:	ed97 0a04 	vldr	s0, [r7, #16]
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f000 fcf5 	bl	800b290 <pidOperator>
 800a8a6:	eef0 7a40 	vmov.f32	s15, s0
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800a8b0:	e0a4      	b.n	800a9fc <foc+0x344>
                    velocityErr = motor->target - motor->magEncoder.velocity;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	edd3 7a06 	vldr	s15, [r3, #24]
 800a8be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8c2:	edc7 7a04 	vstr	s15, [r7, #16]
                    IqRef = pidOperator(&motor->velocityPID, velocityErr);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	33ac      	adds	r3, #172	@ 0xac
 800a8ca:	ed97 0a04 	vldr	s0, [r7, #16]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f000 fcde 	bl	800b290 <pidOperator>
 800a8d4:	ed87 0a05 	vstr	s0, [r7, #20]
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800a8e4:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 800aa38 <foc+0x380>
 800a8e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8ec:	eeb0 0a67 	vmov.f32	s0, s15
 800a8f0:	4610      	mov	r0, r2
 800a8f2:	f000 fccd 	bl	800b290 <pidOperator>
 800a8f6:	eef0 7a40 	vmov.f32	s15, s0
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                    motor->Uq = pidOperator(&motor->pidIq, IqRef - motor->Iq);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800a90c:	ed97 7a05 	vldr	s14, [r7, #20]
 800a910:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a914:	eeb0 0a67 	vmov.f32	s0, s15
 800a918:	4610      	mov	r0, r2
 800a91a:	f000 fcb9 	bl	800b290 <pidOperator>
 800a91e:	eef0 7a40 	vmov.f32	s15, s0
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800a928:	e068      	b.n	800a9fc <foc+0x344>
                if (motor->torqueType == VOLTAGE)
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800a930:	2b00      	cmp	r3, #0
 800a932:	d116      	bne.n	800a962 <foc+0x2aa>
                    angleErr = motor->target - motor->magEncoder.fullAngle;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	edd3 7a05 	vldr	s15, [r3, #20]
 800a940:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a944:	edc7 7a07 	vstr	s15, [r7, #28]
                    motor->Uq = pidOperator(&motor->anglePID, angleErr);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	33d0      	adds	r3, #208	@ 0xd0
 800a94c:	ed97 0a07 	vldr	s0, [r7, #28]
 800a950:	4618      	mov	r0, r3
 800a952:	f000 fc9d 	bl	800b290 <pidOperator>
 800a956:	eef0 7a40 	vmov.f32	s15, s0
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800a960:	e04b      	b.n	800a9fa <foc+0x342>
                    angleErr = motor->target - motor->magEncoder.fullAngle;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	edd3 7a05 	vldr	s15, [r3, #20]
 800a96e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a972:	edc7 7a07 	vstr	s15, [r7, #28]
                    velocityRef = pidOperator(&motor->anglePID, angleErr);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	33d0      	adds	r3, #208	@ 0xd0
 800a97a:	ed97 0a07 	vldr	s0, [r7, #28]
 800a97e:	4618      	mov	r0, r3
 800a980:	f000 fc86 	bl	800b290 <pidOperator>
 800a984:	ed87 0a06 	vstr	s0, [r7, #24]
                    IqRef = pidOperator(&motor->velocityPID, velocityRef - motor->magEncoder.velocity);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f103 02ac 	add.w	r2, r3, #172	@ 0xac
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	edd3 7a06 	vldr	s15, [r3, #24]
 800a994:	ed97 7a06 	vldr	s14, [r7, #24]
 800a998:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a99c:	eeb0 0a67 	vmov.f32	s0, s15
 800a9a0:	4610      	mov	r0, r2
 800a9a2:	f000 fc75 	bl	800b290 <pidOperator>
 800a9a6:	ed87 0a05 	vstr	s0, [r7, #20]
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800a9b6:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800aa38 <foc+0x380>
 800a9ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9be:	eeb0 0a67 	vmov.f32	s0, s15
 800a9c2:	4610      	mov	r0, r2
 800a9c4:	f000 fc64 	bl	800b290 <pidOperator>
 800a9c8:	eef0 7a40 	vmov.f32	s15, s0
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                    motor->Uq = pidOperator(&motor->pidIq, IqRef - motor->Iq);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800a9de:	ed97 7a05 	vldr	s14, [r7, #20]
 800a9e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9e6:	eeb0 0a67 	vmov.f32	s0, s15
 800a9ea:	4610      	mov	r0, r2
 800a9ec:	f000 fc50 	bl	800b290 <pidOperator>
 800a9f0:	eef0 7a40 	vmov.f32	s15, s0
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800a9fa:	bf00      	nop
            setTorque(motor, motor->Uq, motor->Ud, motor->angle_el);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	edd3 7a47 	vldr	s15, [r3, #284]	@ 0x11c
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	ed93 7a46 	vldr	s14, [r3, #280]	@ 0x118
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800aa0e:	eeb0 1a66 	vmov.f32	s2, s13
 800aa12:	eef0 0a47 	vmov.f32	s1, s14
 800aa16:	eeb0 0a67 	vmov.f32	s0, s15
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f000 fd40 	bl	800b4a0 <setTorque>
}
 800aa20:	bf00      	nop
 800aa22:	3720      	adds	r7, #32
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	42480000 	.word	0x42480000
 800aa2c:	20000620 	.word	0x20000620
 800aa30:	4013cd3a 	.word	0x4013cd3a
 800aa34:	4093cd3a 	.word	0x4093cd3a
 800aa38:	00000000 	.word	0x00000000
 800aa3c:	433e0000 	.word	0x433e0000

0800aa40 <getCurrentOffsets>:
#include "math_utils.h"
#include "focLib.h"

// Function finding zero offsets of the ADC
void getCurrentOffsets(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b, uint32_t rounds)
{
 800aa40:	b5b0      	push	{r4, r5, r7, lr}
 800aa42:	b086      	sub	sp, #24
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	607a      	str	r2, [r7, #4]
 800aa4c:	603b      	str	r3, [r7, #0]
    // find adc offset = zero current voltage
    motor->offset_ia = 0;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f04f 0200 	mov.w	r2, #0
 800aa54:	641a      	str	r2, [r3, #64]	@ 0x40
    motor->offset_ib = 0;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f04f 0200 	mov.w	r2, #0
 800aa5c:	645a      	str	r2, [r3, #68]	@ 0x44
    // read the adc voltage  times ( arbitrary number )
    for (int i = 0; i < rounds; i++)
 800aa5e:	2300      	movs	r3, #0
 800aa60:	617b      	str	r3, [r7, #20]
 800aa62:	e076      	b.n	800ab52 <getCurrentOffsets+0x112>
    {
        motor->offset_ia += ADC_2_CURRENT(adc_a);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f7f5 fd95 	bl	8000598 <__aeabi_f2d>
 800aa6e:	4604      	mov	r4, r0
 800aa70:	460d      	mov	r5, r1
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	ee07 3a90 	vmov	s15, r3
 800aa78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa7c:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 800abd0 <getCurrentOffsets+0x190>
 800aa80:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa84:	ee17 0a90 	vmov	r0, s15
 800aa88:	f7f5 fd86 	bl	8000598 <__aeabi_f2d>
 800aa8c:	a34c      	add	r3, pc, #304	@ (adr r3, 800abc0 <getCurrentOffsets+0x180>)
 800aa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa92:	f7f5 ff03 	bl	800089c <__aeabi_ddiv>
 800aa96:	4602      	mov	r2, r0
 800aa98:	460b      	mov	r3, r1
 800aa9a:	4610      	mov	r0, r2
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	a34a      	add	r3, pc, #296	@ (adr r3, 800abc8 <getCurrentOffsets+0x188>)
 800aaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa4:	f7f5 fefa 	bl	800089c <__aeabi_ddiv>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	460b      	mov	r3, r1
 800aaac:	4610      	mov	r0, r2
 800aaae:	4619      	mov	r1, r3
 800aab0:	f04f 0200 	mov.w	r2, #0
 800aab4:	4b47      	ldr	r3, [pc, #284]	@ (800abd4 <getCurrentOffsets+0x194>)
 800aab6:	f7f5 fef1 	bl	800089c <__aeabi_ddiv>
 800aaba:	4602      	mov	r2, r0
 800aabc:	460b      	mov	r3, r1
 800aabe:	4620      	mov	r0, r4
 800aac0:	4629      	mov	r1, r5
 800aac2:	f7f5 fc0b 	bl	80002dc <__adddf3>
 800aac6:	4602      	mov	r2, r0
 800aac8:	460b      	mov	r3, r1
 800aaca:	4610      	mov	r0, r2
 800aacc:	4619      	mov	r1, r3
 800aace:	f7f6 f8b3 	bl	8000c38 <__aeabi_d2f>
 800aad2:	4602      	mov	r2, r0
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	641a      	str	r2, [r3, #64]	@ 0x40
        motor->offset_ib += ADC_2_CURRENT(adc_b);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aadc:	4618      	mov	r0, r3
 800aade:	f7f5 fd5b 	bl	8000598 <__aeabi_f2d>
 800aae2:	4604      	mov	r4, r0
 800aae4:	460d      	mov	r5, r1
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	ee07 3a90 	vmov	s15, r3
 800aaec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaf0:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800abd0 <getCurrentOffsets+0x190>
 800aaf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aaf8:	ee17 0a90 	vmov	r0, s15
 800aafc:	f7f5 fd4c 	bl	8000598 <__aeabi_f2d>
 800ab00:	a32f      	add	r3, pc, #188	@ (adr r3, 800abc0 <getCurrentOffsets+0x180>)
 800ab02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab06:	f7f5 fec9 	bl	800089c <__aeabi_ddiv>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	4610      	mov	r0, r2
 800ab10:	4619      	mov	r1, r3
 800ab12:	a32d      	add	r3, pc, #180	@ (adr r3, 800abc8 <getCurrentOffsets+0x188>)
 800ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab18:	f7f5 fec0 	bl	800089c <__aeabi_ddiv>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	460b      	mov	r3, r1
 800ab20:	4610      	mov	r0, r2
 800ab22:	4619      	mov	r1, r3
 800ab24:	f04f 0200 	mov.w	r2, #0
 800ab28:	4b2a      	ldr	r3, [pc, #168]	@ (800abd4 <getCurrentOffsets+0x194>)
 800ab2a:	f7f5 feb7 	bl	800089c <__aeabi_ddiv>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	460b      	mov	r3, r1
 800ab32:	4620      	mov	r0, r4
 800ab34:	4629      	mov	r1, r5
 800ab36:	f7f5 fbd1 	bl	80002dc <__adddf3>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	4610      	mov	r0, r2
 800ab40:	4619      	mov	r1, r3
 800ab42:	f7f6 f879 	bl	8000c38 <__aeabi_d2f>
 800ab46:	4602      	mov	r2, r0
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	645a      	str	r2, [r3, #68]	@ 0x44
    for (int i = 0; i < rounds; i++)
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	617b      	str	r3, [r7, #20]
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	683a      	ldr	r2, [r7, #0]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d884      	bhi.n	800aa64 <getCurrentOffsets+0x24>
    }
    // calculate the mean offsets
    motor->offset_ia = motor->offset_ia / rounds;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	ee07 3a90 	vmov	s15, r3
 800ab66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ab6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    motor->offset_ib = motor->offset_ib / rounds;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	ee07 3a90 	vmov	s15, r3
 800ab80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ab84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    // FOC_log("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
    // printf("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
    FOC_log("[offset_ia]:%f\r\n", motor->offset_ia);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7f5 fd00 	bl	8000598 <__aeabi_f2d>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	460b      	mov	r3, r1
 800ab9c:	480e      	ldr	r0, [pc, #56]	@ (800abd8 <getCurrentOffsets+0x198>)
 800ab9e:	f001 f8d3 	bl	800bd48 <FOC_log>
    FOC_log("[offset_ib]:%f\r\n", motor->offset_ib);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7f5 fcf6 	bl	8000598 <__aeabi_f2d>
 800abac:	4602      	mov	r2, r0
 800abae:	460b      	mov	r3, r1
 800abb0:	480a      	ldr	r0, [pc, #40]	@ (800abdc <getCurrentOffsets+0x19c>)
 800abb2:	f001 f8c9 	bl	800bd48 <FOC_log>
    // _dbg_printf("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
}
 800abb6:	bf00      	nop
 800abb8:	3718      	adds	r7, #24
 800abba:	46bd      	mov	sp, r7
 800abbc:	bdb0      	pop	{r4, r5, r7, pc}
 800abbe:	bf00      	nop
 800abc0:	00000000 	.word	0x00000000
 800abc4:	40affe00 	.word	0x40affe00
 800abc8:	40000000 	.word	0x40000000
 800abcc:	3f847ae1 	.word	0x3f847ae1
 800abd0:	40533333 	.word	0x40533333
 800abd4:	40240000 	.word	0x40240000
 800abd8:	08010cec 	.word	0x08010cec
 800abdc:	08010d00 	.word	0x08010d00

0800abe0 <getPhaseCurrents>:

// read all three phase currents (if possible 2 or 3)
void getPhaseCurrents(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800abe0:	b5b0      	push	{r4, r5, r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	60f8      	str	r0, [r7, #12]
 800abe8:	60b9      	str	r1, [r7, #8]
 800abea:	607a      	str	r2, [r7, #4]
    motor->Ia = ADC_2_CURRENT(adc_a) - motor->offset_ia; // amps
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	ee07 3a90 	vmov	s15, r3
 800abf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abf6:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800ad18 <getPhaseCurrents+0x138>
 800abfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800abfe:	ee17 0a90 	vmov	r0, s15
 800ac02:	f7f5 fcc9 	bl	8000598 <__aeabi_f2d>
 800ac06:	a340      	add	r3, pc, #256	@ (adr r3, 800ad08 <getPhaseCurrents+0x128>)
 800ac08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0c:	f7f5 fe46 	bl	800089c <__aeabi_ddiv>
 800ac10:	4602      	mov	r2, r0
 800ac12:	460b      	mov	r3, r1
 800ac14:	4610      	mov	r0, r2
 800ac16:	4619      	mov	r1, r3
 800ac18:	a33d      	add	r3, pc, #244	@ (adr r3, 800ad10 <getPhaseCurrents+0x130>)
 800ac1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1e:	f7f5 fe3d 	bl	800089c <__aeabi_ddiv>
 800ac22:	4602      	mov	r2, r0
 800ac24:	460b      	mov	r3, r1
 800ac26:	4610      	mov	r0, r2
 800ac28:	4619      	mov	r1, r3
 800ac2a:	f04f 0200 	mov.w	r2, #0
 800ac2e:	4b3b      	ldr	r3, [pc, #236]	@ (800ad1c <getPhaseCurrents+0x13c>)
 800ac30:	f7f5 fe34 	bl	800089c <__aeabi_ddiv>
 800ac34:	4602      	mov	r2, r0
 800ac36:	460b      	mov	r3, r1
 800ac38:	4614      	mov	r4, r2
 800ac3a:	461d      	mov	r5, r3
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7f5 fca9 	bl	8000598 <__aeabi_f2d>
 800ac46:	4602      	mov	r2, r0
 800ac48:	460b      	mov	r3, r1
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	4629      	mov	r1, r5
 800ac4e:	f7f5 fb43 	bl	80002d8 <__aeabi_dsub>
 800ac52:	4602      	mov	r2, r0
 800ac54:	460b      	mov	r3, r1
 800ac56:	4610      	mov	r0, r2
 800ac58:	4619      	mov	r1, r3
 800ac5a:	f7f5 ffed 	bl	8000c38 <__aeabi_d2f>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	649a      	str	r2, [r3, #72]	@ 0x48
    motor->Ic = ADC_2_CURRENT(adc_b) - motor->offset_ib;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	ee07 3a90 	vmov	s15, r3
 800ac6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac6e:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800ad18 <getPhaseCurrents+0x138>
 800ac72:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac76:	ee17 0a90 	vmov	r0, s15
 800ac7a:	f7f5 fc8d 	bl	8000598 <__aeabi_f2d>
 800ac7e:	a322      	add	r3, pc, #136	@ (adr r3, 800ad08 <getPhaseCurrents+0x128>)
 800ac80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac84:	f7f5 fe0a 	bl	800089c <__aeabi_ddiv>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	460b      	mov	r3, r1
 800ac8c:	4610      	mov	r0, r2
 800ac8e:	4619      	mov	r1, r3
 800ac90:	a31f      	add	r3, pc, #124	@ (adr r3, 800ad10 <getPhaseCurrents+0x130>)
 800ac92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac96:	f7f5 fe01 	bl	800089c <__aeabi_ddiv>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	4610      	mov	r0, r2
 800aca0:	4619      	mov	r1, r3
 800aca2:	f04f 0200 	mov.w	r2, #0
 800aca6:	4b1d      	ldr	r3, [pc, #116]	@ (800ad1c <getPhaseCurrents+0x13c>)
 800aca8:	f7f5 fdf8 	bl	800089c <__aeabi_ddiv>
 800acac:	4602      	mov	r2, r0
 800acae:	460b      	mov	r3, r1
 800acb0:	4614      	mov	r4, r2
 800acb2:	461d      	mov	r5, r3
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acb8:	4618      	mov	r0, r3
 800acba:	f7f5 fc6d 	bl	8000598 <__aeabi_f2d>
 800acbe:	4602      	mov	r2, r0
 800acc0:	460b      	mov	r3, r1
 800acc2:	4620      	mov	r0, r4
 800acc4:	4629      	mov	r1, r5
 800acc6:	f7f5 fb07 	bl	80002d8 <__aeabi_dsub>
 800acca:	4602      	mov	r2, r0
 800accc:	460b      	mov	r3, r1
 800acce:	4610      	mov	r0, r2
 800acd0:	4619      	mov	r1, r3
 800acd2:	f7f5 ffb1 	bl	8000c38 <__aeabi_d2f>
 800acd6:	4602      	mov	r2, r0
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	651a      	str	r2, [r3, #80]	@ 0x50
    motor->Ib = 0 - motor->Ia - motor->Ic;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800ace2:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800ad20 <getPhaseCurrents+0x140>
 800ace6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800acf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
}
 800acfa:	bf00      	nop
 800acfc:	3710      	adds	r7, #16
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bdb0      	pop	{r4, r5, r7, pc}
 800ad02:	bf00      	nop
 800ad04:	f3af 8000 	nop.w
 800ad08:	00000000 	.word	0x00000000
 800ad0c:	40affe00 	.word	0x40affe00
 800ad10:	40000000 	.word	0x40000000
 800ad14:	3f847ae1 	.word	0x3f847ae1
 800ad18:	40533333 	.word	0x40533333
 800ad1c:	40240000 	.word	0x40240000
 800ad20:	00000000 	.word	0x00000000

0800ad24 <getABCurrents>:
// Ibeta = 1/sqrt(3) * Ia + 1/sqrt(3) * 2Ib
/*============================================================================*/
//   calculating Alpha Beta currents from phase currents
//   - function calculating Clarke transform of the phase currents
void getABCurrents(BldcMotor *motor)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
    motor->Ialpha = motor->Ia;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	655a      	str	r2, [r3, #84]	@ 0x54
    motor->Ibeta = _1_SQRT3 * motor->Ia + _2_SQRT3 * motor->Ib;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800ad3a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800ad68 <getABCurrents+0x44>
 800ad3e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800ad48:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800ad6c <getABCurrents+0x48>
 800ad4c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ad50:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
}
 800ad5a:	bf00      	nop
 800ad5c:	370c      	adds	r7, #12
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr
 800ad66:	bf00      	nop
 800ad68:	3f13cd3a 	.word	0x3f13cd3a
 800ad6c:	3f93cd3a 	.word	0x3f93cd3a

0800ad70 <getDQCurrents>:
/*============================================================================*/
// function used with the foc algorihtm
//   calculating D and Q currents from Alpha Beta currents and electrical angle
//   - function calculating Clarke transform of the phase currents
void getDQCurrents(BldcMotor *motor)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
    float ct;
    float st;
    _sincos(motor->angle_el, &st, &ct);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800ad7e:	f107 020c 	add.w	r2, r7, #12
 800ad82:	f107 0308 	add.w	r3, r7, #8
 800ad86:	4611      	mov	r1, r2
 800ad88:	4618      	mov	r0, r3
 800ad8a:	eeb0 0a67 	vmov.f32	s0, s15
 800ad8e:	f000 f9df 	bl	800b150 <_sincos>
    motor->Id = motor->Ialpha * ct + motor->Ibeta * st;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 800ad98:	edd7 7a03 	vldr	s15, [r7, #12]
 800ad9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 800ada6:	edd7 7a02 	vldr	s15, [r7, #8]
 800adaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800adae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
    motor->Iq = motor->Ibeta * ct - motor->Ialpha * st;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 800adbe:	edd7 7a03 	vldr	s15, [r7, #12]
 800adc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 800adcc:	edd7 7a02 	vldr	s15, [r7, #8]
 800add0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800add4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
 800adde:	bf00      	nop
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <encoderInit>:

#include "encoder.h"
#include "math_utils.h"
#include "focLib.h"
void encoderInit(MagEncoder *encoder, float _Ts, float (*_getRawAngle)(void), Direction _direction)
{
 800ade6:	b480      	push	{r7}
 800ade8:	b085      	sub	sp, #20
 800adea:	af00      	add	r7, sp, #0
 800adec:	60f8      	str	r0, [r7, #12]
 800adee:	ed87 0a02 	vstr	s0, [r7, #8]
 800adf2:	6079      	str	r1, [r7, #4]
 800adf4:	4613      	mov	r3, r2
 800adf6:	70fb      	strb	r3, [r7, #3]
    encoder->angle_prev = 0;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f04f 0200 	mov.w	r2, #0
 800adfe:	601a      	str	r2, [r3, #0]
    encoder->vel_angle_prev = 0;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f04f 0200 	mov.w	r2, #0
 800ae06:	605a      	str	r2, [r3, #4]
    encoder->full_rotations = 0;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	609a      	str	r2, [r3, #8]
    encoder->vel_full_rotations = 0;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2200      	movs	r2, #0
 800ae12:	60da      	str	r2, [r3, #12]
    encoder->shaftAngle = 0;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f04f 0200 	mov.w	r2, #0
 800ae1a:	611a      	str	r2, [r3, #16]
    encoder->fullAngle = 0;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f04f 0200 	mov.w	r2, #0
 800ae22:	615a      	str	r2, [r3, #20]
    encoder->velocity = 0;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f04f 0200 	mov.w	r2, #0
 800ae2a:	619a      	str	r2, [r3, #24]
    encoder->Ts = _Ts;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	68ba      	ldr	r2, [r7, #8]
 800ae30:	61da      	str	r2, [r3, #28]
    encoder->getRawAngle = _getRawAngle;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	625a      	str	r2, [r3, #36]	@ 0x24
    encoder->direction = _direction;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	78fa      	ldrb	r2, [r7, #3]
 800ae3c:	f883 2020 	strb.w	r2, [r3, #32]
}
 800ae40:	bf00      	nop
 800ae42:	3714      	adds	r7, #20
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr

0800ae4c <encoderUpdate>:

void encoderUpdate(MagEncoder *encoder)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
    float val = encoder->getRawAngle() * encoder->direction;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae58:	4798      	blx	r3
 800ae5a:	eeb0 7a40 	vmov.f32	s14, s0
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800ae64:	ee07 3a90 	vmov	s15, r3
 800ae68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae70:	edc7 7a03 	vstr	s15, [r7, #12]

    float d_angle = val - encoder->angle_prev;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	edd3 7a00 	vldr	s15, [r3]
 800ae7a:	ed97 7a03 	vldr	s14, [r7, #12]
 800ae7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae82:	edc7 7a02 	vstr	s15, [r7, #8]
    // 圈数检测
    if (fabsf(d_angle) > (0.8f * _2PI))
 800ae86:	edd7 7a02 	vldr	s15, [r7, #8]
 800ae8a:	eef0 7ae7 	vabs.f32	s15, s15
 800ae8e:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800af48 <encoderUpdate+0xfc>
 800ae92:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae9a:	dd0f      	ble.n	800aebc <encoderUpdate+0x70>
        encoder->full_rotations += (d_angle > 0) ? -1 : 1;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	edd7 7a02 	vldr	s15, [r7, #8]
 800aea4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeac:	dd02      	ble.n	800aeb4 <encoderUpdate+0x68>
 800aeae:	f04f 32ff 	mov.w	r2, #4294967295
 800aeb2:	e000      	b.n	800aeb6 <encoderUpdate+0x6a>
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	441a      	add	r2, r3
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	609a      	str	r2, [r3, #8]

    // angle
    encoder->angle_prev = val;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	68fa      	ldr	r2, [r7, #12]
 800aec0:	601a      	str	r2, [r3, #0]
    encoder->shaftAngle = val;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	68fa      	ldr	r2, [r7, #12]
 800aec6:	611a      	str	r2, [r3, #16]
    encoder->fullAngle = (float)encoder->full_rotations * _2PI + encoder->angle_prev;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	ee07 3a90 	vmov	s15, r3
 800aed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aed4:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800af4c <encoderUpdate+0x100>
 800aed8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	edd3 7a00 	vldr	s15, [r3]
 800aee2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	edc3 7a05 	vstr	s15, [r3, #20]

    // 速度计算
    val = ((float)(encoder->full_rotations - encoder->vel_full_rotations) * _2PI + (encoder->angle_prev - encoder->vel_angle_prev)) / encoder->Ts;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	689a      	ldr	r2, [r3, #8]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	1ad3      	subs	r3, r2, r3
 800aef6:	ee07 3a90 	vmov	s15, r3
 800aefa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aefe:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800af4c <encoderUpdate+0x100>
 800af02:	ee27 7a87 	vmul.f32	s14, s15, s14
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	edd3 6a00 	vldr	s13, [r3]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	edd3 7a01 	vldr	s15, [r3, #4]
 800af12:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800af16:	ee77 6a27 	vadd.f32	s13, s14, s15
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	ed93 7a07 	vldr	s14, [r3, #28]
 800af20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af24:	edc7 7a03 	vstr	s15, [r7, #12]
    // 保存变量以待将来使用
    encoder->vel_angle_prev = encoder->angle_prev;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	605a      	str	r2, [r3, #4]
    encoder->vel_full_rotations = encoder->full_rotations;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	689a      	ldr	r2, [r3, #8]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	60da      	str	r2, [r3, #12]
    encoder->velocity = val;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	619a      	str	r2, [r3, #24]
}
 800af3e:	bf00      	nop
 800af40:	3710      	adds	r7, #16
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	40a0d97c 	.word	0x40a0d97c
 800af4c:	40c90fdb 	.word	0x40c90fdb

0800af50 <lpfInit>:
#include "lowpass_filter.h"

void lpfInit(LowPassFilter *filter, const float _Tf, const float _dt)
{
 800af50:	b480      	push	{r7}
 800af52:	b085      	sub	sp, #20
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	ed87 0a02 	vstr	s0, [r7, #8]
 800af5c:	edc7 0a01 	vstr	s1, [r7, #4]
    filter->Tf = _Tf;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	68ba      	ldr	r2, [r7, #8]
 800af64:	601a      	str	r2, [r3, #0]
    filter->dt = _dt;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	605a      	str	r2, [r3, #4]
    filter->y_prev = 0;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f04f 0200 	mov.w	r2, #0
 800af72:	609a      	str	r2, [r3, #8]
}
 800af74:	bf00      	nop
 800af76:	3714      	adds	r7, #20
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <lpfOperator>:

float lpfOperator(LowPassFilter *filter, float x)
{
 800af80:	b480      	push	{r7}
 800af82:	b085      	sub	sp, #20
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	ed87 0a00 	vstr	s0, [r7]

    float alpha = filter->Tf / (filter->Tf + filter->dt);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	edd3 6a00 	vldr	s13, [r3]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	ed93 7a00 	vldr	s14, [r3]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	edd3 7a01 	vldr	s15, [r3, #4]
 800af9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800afa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afa6:	edc7 7a03 	vstr	s15, [r7, #12]
    float y = alpha * filter->y_prev + (1.0f - alpha) * x;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	ed93 7a02 	vldr	s14, [r3, #8]
 800afb0:	edd7 7a03 	vldr	s15, [r7, #12]
 800afb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800afb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afbc:	edd7 7a03 	vldr	s15, [r7, #12]
 800afc0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800afc4:	edd7 7a00 	vldr	s15, [r7]
 800afc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800afcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afd0:	edc7 7a02 	vstr	s15, [r7, #8]
    filter->y_prev = y;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	68ba      	ldr	r2, [r7, #8]
 800afd8:	609a      	str	r2, [r3, #8]

    return y;
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	ee07 3a90 	vmov	s15, r3
}
 800afe0:	eeb0 0a67 	vmov.f32	s0, s15
 800afe4:	3714      	adds	r7, #20
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr
	...

0800aff0 <_sin>:
#include "focLib.h"
// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b086      	sub	sp, #24
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0, 804, 1608, 2411, 3212, 4011, 4808, 5602, 6393, 7180, 7962, 8740, 9512, 10279, 11039, 11793, 12540, 13279, 14010, 14733, 15447, 16151, 16846, 17531, 18205, 18868, 19520, 20160, 20788, 21403, 22006, 22595, 23170, 23732, 24279, 24812, 25330, 25833, 26320, 26791, 27246, 27684, 28106, 28511, 28899, 29269, 29622, 29957, 30274, 30572, 30853, 31114, 31357, 31581, 31786, 31972, 32138, 32286, 32413, 32522, 32610, 32679, 32729, 32758, 32768};
  unsigned int i = (unsigned int)(a * (64 * 4 * 256.0 / _2PI));
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f7f5 facc 	bl	8000598 <__aeabi_f2d>
 800b000:	a339      	add	r3, pc, #228	@ (adr r3, 800b0e8 <_sin+0xf8>)
 800b002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b006:	f7f5 fb1f 	bl	8000648 <__aeabi_dmul>
 800b00a:	4602      	mov	r2, r0
 800b00c:	460b      	mov	r3, r1
 800b00e:	4610      	mov	r0, r2
 800b010:	4619      	mov	r1, r3
 800b012:	f7f5 fdf1 	bl	8000bf8 <__aeabi_d2uiz>
 800b016:	4603      	mov	r3, r0
 800b018:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	0a1b      	lsrs	r3, r3, #8
 800b024:	b2db      	uxtb	r3, r3
 800b026:	60fb      	str	r3, [r7, #12]
  if (i < 64)
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2b3f      	cmp	r3, #63	@ 0x3f
 800b02c:	d80b      	bhi.n	800b046 <_sin+0x56>
  {
    t1 = sine_array[i];
 800b02e:	4a2c      	ldr	r2, [pc, #176]	@ (800b0e0 <_sin+0xf0>)
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b036:	617b      	str	r3, [r7, #20]
    t2 = sine_array[i + 1];
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	3301      	adds	r3, #1
 800b03c:	4a28      	ldr	r2, [pc, #160]	@ (800b0e0 <_sin+0xf0>)
 800b03e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b042:	613b      	str	r3, [r7, #16]
 800b044:	e033      	b.n	800b0ae <_sin+0xbe>
  }
  else if (i < 128)
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2b7f      	cmp	r3, #127	@ 0x7f
 800b04a:	d80e      	bhi.n	800b06a <_sin+0x7a>
  {
    t1 = sine_array[128 - i];
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800b052:	4a23      	ldr	r2, [pc, #140]	@ (800b0e0 <_sin+0xf0>)
 800b054:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b058:	617b      	str	r3, [r7, #20]
    t2 = sine_array[127 - i];
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800b060:	4a1f      	ldr	r2, [pc, #124]	@ (800b0e0 <_sin+0xf0>)
 800b062:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b066:	613b      	str	r3, [r7, #16]
 800b068:	e021      	b.n	800b0ae <_sin+0xbe>
  }
  else if (i < 192)
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2bbf      	cmp	r3, #191	@ 0xbf
 800b06e:	d80e      	bhi.n	800b08e <_sin+0x9e>
  {
    t1 = -sine_array[-128 + i];
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	3b80      	subs	r3, #128	@ 0x80
 800b074:	4a1a      	ldr	r2, [pc, #104]	@ (800b0e0 <_sin+0xf0>)
 800b076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b07a:	425b      	negs	r3, r3
 800b07c:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[-127 + i];
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	3b7f      	subs	r3, #127	@ 0x7f
 800b082:	4a17      	ldr	r2, [pc, #92]	@ (800b0e0 <_sin+0xf0>)
 800b084:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b088:	425b      	negs	r3, r3
 800b08a:	613b      	str	r3, [r7, #16]
 800b08c:	e00f      	b.n	800b0ae <_sin+0xbe>
  }
  else
  {
    t1 = -sine_array[256 - i];
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800b094:	4a12      	ldr	r2, [pc, #72]	@ (800b0e0 <_sin+0xf0>)
 800b096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b09a:	425b      	negs	r3, r3
 800b09c:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[255 - i];
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800b0a4:	4a0e      	ldr	r2, [pc, #56]	@ (800b0e0 <_sin+0xf0>)
 800b0a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0aa:	425b      	negs	r3, r3
 800b0ac:	613b      	str	r3, [r7, #16]
  }
  return (1.0f / 32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 800b0ae:	693a      	ldr	r2, [r7, #16]
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	1ad3      	subs	r3, r2, r3
 800b0b4:	68ba      	ldr	r2, [r7, #8]
 800b0b6:	fb02 f303 	mul.w	r3, r2, r3
 800b0ba:	121a      	asrs	r2, r3, #8
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	4413      	add	r3, r2
 800b0c0:	ee07 3a90 	vmov	s15, r3
 800b0c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b0c8:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800b0e4 <_sin+0xf4>
 800b0cc:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b0d0:	eeb0 0a67 	vmov.f32	s0, s15
 800b0d4:	3718      	adds	r7, #24
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	f3af 8000 	nop.w
 800b0e0:	2000000c 	.word	0x2000000c
 800b0e4:	38000000 	.word	0x38000000
 800b0e8:	6446f9b4 	.word	0x6446f9b4
 800b0ec:	40c45f30 	.word	0x40c45f30

0800b0f0 <_cos>:
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b084      	sub	sp, #16
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 800b0fa:	edd7 7a01 	vldr	s15, [r7, #4]
 800b0fe:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800b148 <_cos+0x58>
 800b102:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b106:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 800b10a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b10e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800b14c <_cos+0x5c>
 800b112:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b11a:	dd06      	ble.n	800b12a <_cos+0x3a>
 800b11c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b120:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800b14c <_cos+0x5c>
 800b124:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b128:	e001      	b.n	800b12e <_cos+0x3e>
 800b12a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b12e:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 800b132:	ed97 0a03 	vldr	s0, [r7, #12]
 800b136:	f7ff ff5b 	bl	800aff0 <_sin>
 800b13a:	eef0 7a40 	vmov.f32	s15, s0
}
 800b13e:	eeb0 0a67 	vmov.f32	s0, s15
 800b142:	3710      	adds	r7, #16
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}
 800b148:	3fc90fdb 	.word	0x3fc90fdb
 800b14c:	40c90fdb 	.word	0x40c90fdb

0800b150 <_sincos>:

__attribute__((weak)) void _sincos(float a, float *s, float *c)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	ed87 0a03 	vstr	s0, [r7, #12]
 800b15a:	60b8      	str	r0, [r7, #8]
 800b15c:	6079      	str	r1, [r7, #4]
  *s = _sin(a);
 800b15e:	ed97 0a03 	vldr	s0, [r7, #12]
 800b162:	f7ff ff45 	bl	800aff0 <_sin>
 800b166:	eef0 7a40 	vmov.f32	s15, s0
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	edc3 7a00 	vstr	s15, [r3]
  *c = _cos(a);
 800b170:	ed97 0a03 	vldr	s0, [r7, #12]
 800b174:	f7ff ffbc 	bl	800b0f0 <_cos>
 800b178:	eef0 7a40 	vmov.f32	s15, s0
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	edc3 7a00 	vstr	s15, [r3]
}
 800b182:	bf00      	nop
 800b184:	3710      	adds	r7, #16
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	0000      	movs	r0, r0
 800b18c:	0000      	movs	r0, r0
	...

0800b190 <_normalizeAngle>:
  return r;
}

// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f7f5 f9fc 	bl	8000598 <__aeabi_f2d>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 800b1f0 <_normalizeAngle+0x60>
 800b1a8:	ec43 2b10 	vmov	d0, r2, r3
 800b1ac:	f005 fbee 	bl	801098c <fmod>
 800b1b0:	ec53 2b10 	vmov	r2, r3, d0
 800b1b4:	4610      	mov	r0, r2
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	f7f5 fd3e 	bl	8000c38 <__aeabi_d2f>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 800b1c0:	edd7 7a03 	vldr	s15, [r7, #12]
 800b1c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b1c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1cc:	db02      	blt.n	800b1d4 <_normalizeAngle+0x44>
 800b1ce:	edd7 7a03 	vldr	s15, [r7, #12]
 800b1d2:	e005      	b.n	800b1e0 <_normalizeAngle+0x50>
 800b1d4:	edd7 7a03 	vldr	s15, [r7, #12]
 800b1d8:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800b1f8 <_normalizeAngle+0x68>
 800b1dc:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800b1e0:	eeb0 0a67 	vmov.f32	s0, s15
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	f3af 8000 	nop.w
 800b1f0:	60000000 	.word	0x60000000
 800b1f4:	401921fb 	.word	0x401921fb
 800b1f8:	40c90fdb 	.word	0x40c90fdb

0800b1fc <_electricalAngle>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	ed87 0a01 	vstr	s0, [r7, #4]
 800b206:	6038      	str	r0, [r7, #0]
  return (shaft_angle * pole_pairs);
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	ee07 3a90 	vmov	s15, r3
 800b20e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b212:	edd7 7a01 	vldr	s15, [r7, #4]
 800b216:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800b21a:	eeb0 0a67 	vmov.f32	s0, s15
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <pidInit>:
#include "pid.h"
#include "math_utils.h"

void pidInit(PidController *pidController, float _P, float _I, float _D, float _ramp, float _limit, float _Ts)
{
 800b228:	b480      	push	{r7}
 800b22a:	b089      	sub	sp, #36	@ 0x24
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	61f8      	str	r0, [r7, #28]
 800b230:	ed87 0a06 	vstr	s0, [r7, #24]
 800b234:	edc7 0a05 	vstr	s1, [r7, #20]
 800b238:	ed87 1a04 	vstr	s2, [r7, #16]
 800b23c:	edc7 1a03 	vstr	s3, [r7, #12]
 800b240:	ed87 2a02 	vstr	s4, [r7, #8]
 800b244:	edc7 2a01 	vstr	s5, [r7, #4]
    pidController->P = _P;
 800b248:	69fb      	ldr	r3, [r7, #28]
 800b24a:	69ba      	ldr	r2, [r7, #24]
 800b24c:	601a      	str	r2, [r3, #0]
    pidController->I = _I;
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	697a      	ldr	r2, [r7, #20]
 800b252:	605a      	str	r2, [r3, #4]
    pidController->D = _D;
 800b254:	69fb      	ldr	r3, [r7, #28]
 800b256:	693a      	ldr	r2, [r7, #16]
 800b258:	609a      	str	r2, [r3, #8]
    pidController->output_ramp = _ramp;
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	60da      	str	r2, [r3, #12]
    pidController->limit = _limit;
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	68ba      	ldr	r2, [r7, #8]
 800b264:	611a      	str	r2, [r3, #16]
    pidController->Ts = _Ts;
 800b266:	69fb      	ldr	r3, [r7, #28]
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	621a      	str	r2, [r3, #32]
    pidController->error_prev = 0;
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	f04f 0200 	mov.w	r2, #0
 800b272:	615a      	str	r2, [r3, #20]
    pidController->output_prev = 0;
 800b274:	69fb      	ldr	r3, [r7, #28]
 800b276:	f04f 0200 	mov.w	r2, #0
 800b27a:	619a      	str	r2, [r3, #24]
    pidController->integral_prev = 0;
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	f04f 0200 	mov.w	r2, #0
 800b282:	61da      	str	r2, [r3, #28]
}
 800b284:	bf00      	nop
 800b286:	3724      	adds	r7, #36	@ 0x24
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <pidOperator>:

// PID controller function
float pidOperator(PidController *pidController, float error)
{
 800b290:	b480      	push	{r7}
 800b292:	b08b      	sub	sp, #44	@ 0x2c
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	ed87 0a00 	vstr	s0, [r7]
    // u(s) = (P + I/s + Ds)e(s)
    // Discrete implementations
    // proportional part
    // u_p  = P *e(k)
    float proportional = pidController->P * error;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	edd3 7a00 	vldr	s15, [r3]
 800b2a2:	ed97 7a00 	vldr	s14, [r7]
 800b2a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2aa:	edc7 7a08 	vstr	s15, [r7, #32]
    // Tustin transform of the integral part
    // u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
    float a = 0.5f * (error + pidController->error_prev);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	ed93 7a05 	vldr	s14, [r3, #20]
 800b2b4:	edd7 7a00 	vldr	s15, [r7]
 800b2b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2bc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b2c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b2c4:	edc7 7a07 	vstr	s15, [r7, #28]
    float b = pidController->I * pidController->Ts;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	ed93 7a01 	vldr	s14, [r3, #4]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	edd3 7a08 	vldr	s15, [r3, #32]
 800b2d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2d8:	edc7 7a06 	vstr	s15, [r7, #24]
    float integral = pidController->integral_prev + pidController->I * pidController->Ts * 0.5f * (error + pidController->error_prev);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	ed93 7a07 	vldr	s14, [r3, #28]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	edd3 6a01 	vldr	s13, [r3, #4]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	edd3 7a08 	vldr	s15, [r3, #32]
 800b2ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b2f2:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800b2f6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	ed93 6a05 	vldr	s12, [r3, #20]
 800b300:	edd7 7a00 	vldr	s15, [r7]
 800b304:	ee76 7a27 	vadd.f32	s15, s12, s15
 800b308:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b30c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b310:	edc7 7a05 	vstr	s15, [r7, #20]
    // antiwindup - limit the output
    integral = _constrain(integral, -pidController->limit, pidController->limit);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	edd3 7a04 	vldr	s15, [r3, #16]
 800b31a:	eef1 7a67 	vneg.f32	s15, s15
 800b31e:	ed97 7a05 	vldr	s14, [r7, #20]
 800b322:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b32a:	d505      	bpl.n	800b338 <pidOperator+0xa8>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	edd3 7a04 	vldr	s15, [r3, #16]
 800b332:	eef1 7a67 	vneg.f32	s15, s15
 800b336:	e00f      	b.n	800b358 <pidOperator+0xc8>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	edd3 7a04 	vldr	s15, [r3, #16]
 800b33e:	ed97 7a05 	vldr	s14, [r7, #20]
 800b342:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b34a:	dd03      	ble.n	800b354 <pidOperator+0xc4>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	edd3 7a04 	vldr	s15, [r3, #16]
 800b352:	e001      	b.n	800b358 <pidOperator+0xc8>
 800b354:	edd7 7a05 	vldr	s15, [r7, #20]
 800b358:	edc7 7a05 	vstr	s15, [r7, #20]
    // Discrete derivation
    // u_dk = D(ek - ek_1)/Ts
    float derivative = pidController->D * (error - pidController->error_prev) / pidController->Ts;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	ed93 7a02 	vldr	s14, [r3, #8]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	edd3 7a05 	vldr	s15, [r3, #20]
 800b368:	edd7 6a00 	vldr	s13, [r7]
 800b36c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b370:	ee67 6a27 	vmul.f32	s13, s14, s15
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	ed93 7a08 	vldr	s14, [r3, #32]
 800b37a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b37e:	edc7 7a04 	vstr	s15, [r7, #16]

    // sum all the components
    float output = proportional + integral + derivative;
 800b382:	ed97 7a08 	vldr	s14, [r7, #32]
 800b386:	edd7 7a05 	vldr	s15, [r7, #20]
 800b38a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b38e:	ed97 7a04 	vldr	s14, [r7, #16]
 800b392:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b396:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    // antiwindup - limit the output variable
    output = _constrain(output, -pidController->limit, pidController->limit);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	edd3 7a04 	vldr	s15, [r3, #16]
 800b3a0:	eef1 7a67 	vneg.f32	s15, s15
 800b3a4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b3a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3b0:	d505      	bpl.n	800b3be <pidOperator+0x12e>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	edd3 7a04 	vldr	s15, [r3, #16]
 800b3b8:	eef1 7a67 	vneg.f32	s15, s15
 800b3bc:	e00f      	b.n	800b3de <pidOperator+0x14e>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	edd3 7a04 	vldr	s15, [r3, #16]
 800b3c4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b3c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b3cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3d0:	dd03      	ble.n	800b3da <pidOperator+0x14a>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	edd3 7a04 	vldr	s15, [r3, #16]
 800b3d8:	e001      	b.n	800b3de <pidOperator+0x14e>
 800b3da:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b3de:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // if output ramp defined
    if (pidController->output_ramp > 0)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	edd3 7a03 	vldr	s15, [r3, #12]
 800b3e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b3ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3f0:	dd42      	ble.n	800b478 <pidOperator+0x1e8>
    {
        // limit the acceleration by ramping the output
        float output_rate = (output - pidController->output_prev) / pidController->Ts;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	edd3 7a06 	vldr	s15, [r3, #24]
 800b3f8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b3fc:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	ed93 7a08 	vldr	s14, [r3, #32]
 800b406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b40a:	edc7 7a03 	vstr	s15, [r7, #12]
        if (output_rate > pidController->output_ramp)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	edd3 7a03 	vldr	s15, [r3, #12]
 800b414:	ed97 7a03 	vldr	s14, [r7, #12]
 800b418:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b420:	dd0f      	ble.n	800b442 <pidOperator+0x1b2>
            output = pidController->output_prev + pidController->output_ramp * pidController->Ts;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	ed93 7a06 	vldr	s14, [r3, #24]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	edd3 6a03 	vldr	s13, [r3, #12]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	edd3 7a08 	vldr	s15, [r3, #32]
 800b434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b43c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 800b440:	e01a      	b.n	800b478 <pidOperator+0x1e8>
        else if (output_rate < -pidController->output_ramp)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	edd3 7a03 	vldr	s15, [r3, #12]
 800b448:	eef1 7a67 	vneg.f32	s15, s15
 800b44c:	ed97 7a03 	vldr	s14, [r7, #12]
 800b450:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b458:	d50e      	bpl.n	800b478 <pidOperator+0x1e8>
            output = pidController->output_prev - pidController->output_ramp * pidController->Ts;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	ed93 7a06 	vldr	s14, [r3, #24]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	edd3 6a03 	vldr	s13, [r3, #12]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	edd3 7a08 	vldr	s15, [r3, #32]
 800b46c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b470:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b474:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }
    // saving for the next pass
    pidController->integral_prev = integral;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	697a      	ldr	r2, [r7, #20]
 800b47c:	61da      	str	r2, [r3, #28]
    pidController->output_prev = output;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b482:	619a      	str	r2, [r3, #24]
    pidController->error_prev = error;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	683a      	ldr	r2, [r7, #0]
 800b488:	615a      	str	r2, [r3, #20]
    return output;
 800b48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b48c:	ee07 3a90 	vmov	s15, r3
}
 800b490:	eeb0 0a67 	vmov.f32	s0, s15
 800b494:	372c      	adds	r7, #44	@ 0x2c
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr
	...

0800b4a0 <setTorque>:
    motor->updatePwm(HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Tc);
}
#elif 1

void setTorque(BldcMotor *motor, float Uq, float Ud, float angle_el)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b08e      	sub	sp, #56	@ 0x38
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	60f8      	str	r0, [r7, #12]
 800b4a8:	ed87 0a02 	vstr	s0, [r7, #8]
 800b4ac:	edc7 0a01 	vstr	s1, [r7, #4]
 800b4b0:	ed87 1a00 	vstr	s2, [r7]
    float Ualpha, Ubeta;
    float Ua, Ub, Uc;

    // Sinusoidal PWM modulation
    // Inverse Park + Clarke transformation
    _sincos(angle_el, &_sa, &_ca);
 800b4b4:	f107 0214 	add.w	r2, r7, #20
 800b4b8:	f107 0310 	add.w	r3, r7, #16
 800b4bc:	4611      	mov	r1, r2
 800b4be:	4618      	mov	r0, r3
 800b4c0:	ed97 0a00 	vldr	s0, [r7]
 800b4c4:	f7ff fe44 	bl	800b150 <_sincos>

    // Inverse park transform
    Ualpha = _ca * Ud - _sa * Uq; // -sin(angle) * Uq;
 800b4c8:	ed97 7a05 	vldr	s14, [r7, #20]
 800b4cc:	edd7 7a01 	vldr	s15, [r7, #4]
 800b4d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b4d4:	edd7 6a04 	vldr	s13, [r7, #16]
 800b4d8:	edd7 7a02 	vldr	s15, [r7, #8]
 800b4dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b4e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4e4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    Ubeta = _sa * Ud + _ca * Uq;  //  cos(angle) * Uq;
 800b4e8:	ed97 7a04 	vldr	s14, [r7, #16]
 800b4ec:	edd7 7a01 	vldr	s15, [r7, #4]
 800b4f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b4f4:	edd7 6a05 	vldr	s13, [r7, #20]
 800b4f8:	edd7 7a02 	vldr	s15, [r7, #8]
 800b4fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b500:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b504:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Clarke transform
    Ua = Ualpha;
 800b508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b50a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Ub = -0.5f * Ualpha + _SQRT3_2 * Ubeta;
 800b50c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800b510:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800b514:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b518:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800b51c:	eddf 6a95 	vldr	s13, [pc, #596]	@ 800b774 <setTorque+0x2d4>
 800b520:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b524:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b528:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc = -0.5f * Ualpha - _SQRT3_2 * Ubeta;
 800b52c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800b530:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800b534:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b538:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800b53c:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 800b774 <setTorque+0x2d4>
 800b540:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b544:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b548:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    center = UqMAX / 2;
 800b54c:	4b8a      	ldr	r3, [pc, #552]	@ (800b778 <setTorque+0x2d8>)
 800b54e:	623b      	str	r3, [r7, #32]

    // discussed here: https://community.simplefoc.com/t/embedded-world-2023-stm32-cordic-co-processor/3107/165?u=candas1
    // a bit more info here: https://microchipdeveloper.com/mct5001:which-zsm-is-best
    // Midpoint Clamp
    float Umin = min(Ua, min(Ub, Uc));
 800b550:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b554:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b558:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b560:	d502      	bpl.n	800b568 <setTorque+0xc8>
 800b562:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800b566:	e001      	b.n	800b56c <setTorque+0xcc>
 800b568:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b56c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b570:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b578:	dd01      	ble.n	800b57e <setTorque+0xde>
 800b57a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b57c:	e00b      	b.n	800b596 <setTorque+0xf6>
 800b57e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b582:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b586:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b58a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b58e:	d501      	bpl.n	800b594 <setTorque+0xf4>
 800b590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b592:	e000      	b.n	800b596 <setTorque+0xf6>
 800b594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b596:	61fb      	str	r3, [r7, #28]
    float Umax = max(Ua, max(Ub, Uc));
 800b598:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b59c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b5a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5a8:	dd02      	ble.n	800b5b0 <setTorque+0x110>
 800b5aa:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800b5ae:	e001      	b.n	800b5b4 <setTorque+0x114>
 800b5b0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b5b4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b5b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b5bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5c0:	d501      	bpl.n	800b5c6 <setTorque+0x126>
 800b5c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5c4:	e00b      	b.n	800b5de <setTorque+0x13e>
 800b5c6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b5ca:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b5ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b5d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5d6:	dd01      	ble.n	800b5dc <setTorque+0x13c>
 800b5d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5da:	e000      	b.n	800b5de <setTorque+0x13e>
 800b5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5de:	61bb      	str	r3, [r7, #24]
    center -= (Umax + Umin) / 2;
 800b5e0:	ed97 7a06 	vldr	s14, [r7, #24]
 800b5e4:	edd7 7a07 	vldr	s15, [r7, #28]
 800b5e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b5ec:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800b5f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b5f4:	ed97 7a08 	vldr	s14, [r7, #32]
 800b5f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5fc:	edc7 7a08 	vstr	s15, [r7, #32]

    Ua += center;
 800b600:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b604:	edd7 7a08 	vldr	s15, [r7, #32]
 800b608:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b60c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    Ub += center;
 800b610:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b614:	edd7 7a08 	vldr	s15, [r7, #32]
 800b618:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b61c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc += center;
 800b620:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b624:	edd7 7a08 	vldr	s15, [r7, #32]
 800b628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b62c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    motor->Ta = _constrain(Ua / U_DC, 0.0f, 1.0f);
 800b630:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b634:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b638:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b63c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b644:	d502      	bpl.n	800b64c <setTorque+0x1ac>
 800b646:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800b77c <setTorque+0x2dc>
 800b64a:	e015      	b.n	800b678 <setTorque+0x1d8>
 800b64c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b650:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b654:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b658:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b65c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b664:	dd02      	ble.n	800b66c <setTorque+0x1cc>
 800b666:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b66a:	e005      	b.n	800b678 <setTorque+0x1d8>
 800b66c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b670:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b674:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128
    motor->Tb = _constrain(Ub / U_DC, 0.0f, 1.0f);
 800b67e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b682:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b686:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b68a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b692:	d502      	bpl.n	800b69a <setTorque+0x1fa>
 800b694:	eddf 7a39 	vldr	s15, [pc, #228]	@ 800b77c <setTorque+0x2dc>
 800b698:	e015      	b.n	800b6c6 <setTorque+0x226>
 800b69a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b69e:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b6a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b6a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b6ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6b2:	dd02      	ble.n	800b6ba <setTorque+0x21a>
 800b6b4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b6b8:	e005      	b.n	800b6c6 <setTorque+0x226>
 800b6ba:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b6be:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b6c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	edc3 7a4b 	vstr	s15, [r3, #300]	@ 0x12c
    motor->Tc = _constrain(Uc / U_DC, 0.0f, 1.0f);
 800b6cc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b6d0:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b6d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b6d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b6dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6e0:	d502      	bpl.n	800b6e8 <setTorque+0x248>
 800b6e2:	eddf 7a26 	vldr	s15, [pc, #152]	@ 800b77c <setTorque+0x2dc>
 800b6e6:	e015      	b.n	800b714 <setTorque+0x274>
 800b6e8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b6ec:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b6f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b6f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b6fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b700:	dd02      	ble.n	800b708 <setTorque+0x268>
 800b702:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b706:	e005      	b.n	800b714 <setTorque+0x274>
 800b708:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b70c:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b710:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	edc3 7a4c 	vstr	s15, [r3, #304]	@ 0x130

    motor->updatePwm(HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Tc);
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800b720:	68fa      	ldr	r2, [r7, #12]
 800b722:	edd2 7a4a 	vldr	s15, [r2, #296]	@ 0x128
 800b726:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800b780 <setTorque+0x2e0>
 800b72a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b72e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b732:	ee17 2a90 	vmov	r2, s15
 800b736:	b290      	uxth	r0, r2
 800b738:	68fa      	ldr	r2, [r7, #12]
 800b73a:	edd2 7a4b 	vldr	s15, [r2, #300]	@ 0x12c
 800b73e:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800b780 <setTorque+0x2e0>
 800b742:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b74a:	ee17 2a90 	vmov	r2, s15
 800b74e:	b291      	uxth	r1, r2
 800b750:	68fa      	ldr	r2, [r7, #12]
 800b752:	edd2 7a4c 	vldr	s15, [r2, #304]	@ 0x130
 800b756:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800b780 <setTorque+0x2e0>
 800b75a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b75e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b762:	ee17 2a90 	vmov	r2, s15
 800b766:	b292      	uxth	r2, r2
 800b768:	4798      	blx	r3
    // set the voltages in driver
    // driver->setPwm(Ua, Ub, Uc);
}
 800b76a:	bf00      	nop
 800b76c:	3738      	adds	r7, #56	@ 0x38
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	3f5db3d7 	.word	0x3f5db3d7
 800b778:	4013cd3a 	.word	0x4013cd3a
 800b77c:	00000000 	.word	0x00000000
 800b780:	45fa0000 	.word	0x45fa0000

0800b784 <startPwm1>:

static void standingBy();
static void working(void);
static void updatePwm1(unsigned short int a, unsigned short int b, unsigned short int c);
static void startPwm1()
{
 800b784:	b580      	push	{r7, lr}
 800b786:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800b788:	2100      	movs	r1, #0
 800b78a:	4806      	ldr	r0, [pc, #24]	@ (800b7a4 <startPwm1+0x20>)
 800b78c:	f7fb ff7e 	bl	800768c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800b790:	2104      	movs	r1, #4
 800b792:	4804      	ldr	r0, [pc, #16]	@ (800b7a4 <startPwm1+0x20>)
 800b794:	f7fb ff7a 	bl	800768c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800b798:	2108      	movs	r1, #8
 800b79a:	4802      	ldr	r0, [pc, #8]	@ (800b7a4 <startPwm1+0x20>)
 800b79c:	f7fb ff76 	bl	800768c <HAL_TIM_PWM_Start>
    // HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
    // HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
    // HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
}
 800b7a0:	bf00      	nop
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	2000047c 	.word	0x2000047c

0800b7a8 <stopPwm1>:
static void stopPwm1()
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 800b7ac:	2100      	movs	r1, #0
 800b7ae:	4806      	ldr	r0, [pc, #24]	@ (800b7c8 <stopPwm1+0x20>)
 800b7b0:	f7fc f86c 	bl	800788c <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 800b7b4:	2104      	movs	r1, #4
 800b7b6:	4804      	ldr	r0, [pc, #16]	@ (800b7c8 <stopPwm1+0x20>)
 800b7b8:	f7fc f868 	bl	800788c <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 800b7bc:	2108      	movs	r1, #8
 800b7be:	4802      	ldr	r0, [pc, #8]	@ (800b7c8 <stopPwm1+0x20>)
 800b7c0:	f7fc f864 	bl	800788c <HAL_TIM_PWM_Stop>
    // HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
    // HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
    // HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
}
 800b7c4:	bf00      	nop
 800b7c6:	bd80      	pop	{r7, pc}
 800b7c8:	2000047c 	.word	0x2000047c

0800b7cc <updatePwm1>:
static void updatePwm1(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	80fb      	strh	r3, [r7, #6]
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	80bb      	strh	r3, [r7, #4]
 800b7da:	4613      	mov	r3, r2
 800b7dc:	807b      	strh	r3, [r7, #2]
    TIM8->CCR1 = a;
 800b7de:	4a07      	ldr	r2, [pc, #28]	@ (800b7fc <updatePwm1+0x30>)
 800b7e0:	88fb      	ldrh	r3, [r7, #6]
 800b7e2:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM8->CCR2 = b;
 800b7e4:	4a05      	ldr	r2, [pc, #20]	@ (800b7fc <updatePwm1+0x30>)
 800b7e6:	88bb      	ldrh	r3, [r7, #4]
 800b7e8:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM8->CCR3 = c;
 800b7ea:	4a04      	ldr	r2, [pc, #16]	@ (800b7fc <updatePwm1+0x30>)
 800b7ec:	887b      	ldrh	r3, [r7, #2]
 800b7ee:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800b7f0:	bf00      	nop
 800b7f2:	370c      	adds	r7, #12
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr
 800b7fc:	40013400 	.word	0x40013400

0800b800 <motorInit>:
// should be called before interruption enabled

static void motorInit()
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b086      	sub	sp, #24
 800b804:	af00      	add	r7, sp, #0
    motor1.pole_pairs = 7;
 800b806:	4ba1      	ldr	r3, [pc, #644]	@ (800ba8c <motorInit+0x28c>)
 800b808:	2207      	movs	r2, #7
 800b80a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    motor1.updatePwm = updatePwm1;
 800b80e:	4b9f      	ldr	r3, [pc, #636]	@ (800ba8c <motorInit+0x28c>)
 800b810:	4a9f      	ldr	r2, [pc, #636]	@ (800ba90 <motorInit+0x290>)
 800b812:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    motor1.startPwm = startPwm1;
 800b816:	4b9d      	ldr	r3, [pc, #628]	@ (800ba8c <motorInit+0x28c>)
 800b818:	4a9e      	ldr	r2, [pc, #632]	@ (800ba94 <motorInit+0x294>)
 800b81a:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor1.stopPwm = stopPwm1;
 800b81e:	4b9b      	ldr	r3, [pc, #620]	@ (800ba8c <motorInit+0x28c>)
 800b820:	4a9d      	ldr	r2, [pc, #628]	@ (800ba98 <motorInit+0x298>)
 800b822:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    motor1.zeroElectricAngleOffSet = 0;
 800b826:	4b99      	ldr	r3, [pc, #612]	@ (800ba8c <motorInit+0x28c>)
 800b828:	f04f 0200 	mov.w	r2, #0
 800b82c:	635a      	str	r2, [r3, #52]	@ 0x34
    motor1.Ts = 100 * 1e-6f;
 800b82e:	4b97      	ldr	r3, [pc, #604]	@ (800ba8c <motorInit+0x28c>)
 800b830:	4a9a      	ldr	r2, [pc, #616]	@ (800ba9c <motorInit+0x29c>)
 800b832:	62da      	str	r2, [r3, #44]	@ 0x2c
    motor1.torqueType = CURRENT;
 800b834:	4b95      	ldr	r3, [pc, #596]	@ (800ba8c <motorInit+0x28c>)
 800b836:	2201      	movs	r2, #1
 800b838:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

    motor1.controlType = VELOCITY;
 800b83c:	4b93      	ldr	r3, [pc, #588]	@ (800ba8c <motorInit+0x28c>)
 800b83e:	2202      	movs	r2, #2
 800b840:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

    motor1.state = MOTOR_CALIBRATE;
 800b844:	4b91      	ldr	r3, [pc, #580]	@ (800ba8c <motorInit+0x28c>)
 800b846:	2200      	movs	r2, #0
 800b848:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    encoderInit(&motor1.magEncoder, motor1.Ts, MT6701_GetRawAngle, UNKNOWN);
 800b84c:	4b8f      	ldr	r3, [pc, #572]	@ (800ba8c <motorInit+0x28c>)
 800b84e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b852:	2201      	movs	r2, #1
 800b854:	4992      	ldr	r1, [pc, #584]	@ (800baa0 <motorInit+0x2a0>)
 800b856:	eeb0 0a67 	vmov.f32	s0, s15
 800b85a:	488c      	ldr	r0, [pc, #560]	@ (800ba8c <motorInit+0x28c>)
 800b85c:	f7ff fac3 	bl	800ade6 <encoderInit>

    if (motor1.controlType == TORQUE && motor1.torqueType == CURRENT)
 800b860:	4b8a      	ldr	r3, [pc, #552]	@ (800ba8c <motorInit+0x28c>)
 800b862:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800b866:	2b00      	cmp	r3, #0
 800b868:	d12d      	bne.n	800b8c6 <motorInit+0xc6>
 800b86a:	4b88      	ldr	r3, [pc, #544]	@ (800ba8c <motorInit+0x28c>)
 800b86c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800b870:	2b01      	cmp	r3, #1
 800b872:	d128      	bne.n	800b8c6 <motorInit+0xc6>
    {
        float kp, ki;
        kp = 500.0f;
 800b874:	4b8b      	ldr	r3, [pc, #556]	@ (800baa4 <motorInit+0x2a4>)
 800b876:	617b      	str	r3, [r7, #20]
        ki = 50.0f;
 800b878:	4b8b      	ldr	r3, [pc, #556]	@ (800baa8 <motorInit+0x2a8>)
 800b87a:	613b      	str	r3, [r7, #16]
        pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800b87c:	4b83      	ldr	r3, [pc, #524]	@ (800ba8c <motorInit+0x28c>)
 800b87e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b882:	eef0 2a67 	vmov.f32	s5, s15
 800b886:	ed9f 2a89 	vldr	s4, [pc, #548]	@ 800baac <motorInit+0x2ac>
 800b88a:	eddf 1a89 	vldr	s3, [pc, #548]	@ 800bab0 <motorInit+0x2b0>
 800b88e:	ed9f 1a88 	vldr	s2, [pc, #544]	@ 800bab0 <motorInit+0x2b0>
 800b892:	edd7 0a04 	vldr	s1, [r7, #16]
 800b896:	ed97 0a05 	vldr	s0, [r7, #20]
 800b89a:	4886      	ldr	r0, [pc, #536]	@ (800bab4 <motorInit+0x2b4>)
 800b89c:	f7ff fcc4 	bl	800b228 <pidInit>
        pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800b8a0:	4b7a      	ldr	r3, [pc, #488]	@ (800ba8c <motorInit+0x28c>)
 800b8a2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b8a6:	eef0 2a67 	vmov.f32	s5, s15
 800b8aa:	ed9f 2a80 	vldr	s4, [pc, #512]	@ 800baac <motorInit+0x2ac>
 800b8ae:	eddf 1a80 	vldr	s3, [pc, #512]	@ 800bab0 <motorInit+0x2b0>
 800b8b2:	ed9f 1a7f 	vldr	s2, [pc, #508]	@ 800bab0 <motorInit+0x2b0>
 800b8b6:	edd7 0a04 	vldr	s1, [r7, #16]
 800b8ba:	ed97 0a05 	vldr	s0, [r7, #20]
 800b8be:	487e      	ldr	r0, [pc, #504]	@ (800bab8 <motorInit+0x2b8>)
 800b8c0:	f7ff fcb2 	bl	800b228 <pidInit>
    {
 800b8c4:	e0c0      	b.n	800ba48 <motorInit+0x248>
    }
    else if (motor1.controlType == VELOCITY)
 800b8c6:	4b71      	ldr	r3, [pc, #452]	@ (800ba8c <motorInit+0x28c>)
 800b8c8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800b8cc:	2b02      	cmp	r3, #2
 800b8ce:	d152      	bne.n	800b976 <motorInit+0x176>
    {
        if (motor1.torqueType == CURRENT)
 800b8d0:	4b6e      	ldr	r3, [pc, #440]	@ (800ba8c <motorInit+0x28c>)
 800b8d2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d13a      	bne.n	800b950 <motorInit+0x150>
        {
            pidInit(&motor1.velocityPID, 0.02, 0.01, 0, 0, CURRENT_MAX, motor1.Ts);
 800b8da:	4b6c      	ldr	r3, [pc, #432]	@ (800ba8c <motorInit+0x28c>)
 800b8dc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b8e0:	eef0 2a67 	vmov.f32	s5, s15
 800b8e4:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800b8e8:	eddf 1a71 	vldr	s3, [pc, #452]	@ 800bab0 <motorInit+0x2b0>
 800b8ec:	ed9f 1a70 	vldr	s2, [pc, #448]	@ 800bab0 <motorInit+0x2b0>
 800b8f0:	eddf 0a72 	vldr	s1, [pc, #456]	@ 800babc <motorInit+0x2bc>
 800b8f4:	ed9f 0a72 	vldr	s0, [pc, #456]	@ 800bac0 <motorInit+0x2c0>
 800b8f8:	4872      	ldr	r0, [pc, #456]	@ (800bac4 <motorInit+0x2c4>)
 800b8fa:	f7ff fc95 	bl	800b228 <pidInit>

            float kp, ki;
            kp = 500.0f;
 800b8fe:	4b69      	ldr	r3, [pc, #420]	@ (800baa4 <motorInit+0x2a4>)
 800b900:	607b      	str	r3, [r7, #4]
            ki = 50.0f;
 800b902:	4b69      	ldr	r3, [pc, #420]	@ (800baa8 <motorInit+0x2a8>)
 800b904:	603b      	str	r3, [r7, #0]
            pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800b906:	4b61      	ldr	r3, [pc, #388]	@ (800ba8c <motorInit+0x28c>)
 800b908:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b90c:	eef0 2a67 	vmov.f32	s5, s15
 800b910:	ed9f 2a66 	vldr	s4, [pc, #408]	@ 800baac <motorInit+0x2ac>
 800b914:	eddf 1a66 	vldr	s3, [pc, #408]	@ 800bab0 <motorInit+0x2b0>
 800b918:	ed9f 1a65 	vldr	s2, [pc, #404]	@ 800bab0 <motorInit+0x2b0>
 800b91c:	edd7 0a00 	vldr	s1, [r7]
 800b920:	ed97 0a01 	vldr	s0, [r7, #4]
 800b924:	4863      	ldr	r0, [pc, #396]	@ (800bab4 <motorInit+0x2b4>)
 800b926:	f7ff fc7f 	bl	800b228 <pidInit>
            pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800b92a:	4b58      	ldr	r3, [pc, #352]	@ (800ba8c <motorInit+0x28c>)
 800b92c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b930:	eef0 2a67 	vmov.f32	s5, s15
 800b934:	ed9f 2a5d 	vldr	s4, [pc, #372]	@ 800baac <motorInit+0x2ac>
 800b938:	eddf 1a5d 	vldr	s3, [pc, #372]	@ 800bab0 <motorInit+0x2b0>
 800b93c:	ed9f 1a5c 	vldr	s2, [pc, #368]	@ 800bab0 <motorInit+0x2b0>
 800b940:	edd7 0a00 	vldr	s1, [r7]
 800b944:	ed97 0a01 	vldr	s0, [r7, #4]
 800b948:	485b      	ldr	r0, [pc, #364]	@ (800bab8 <motorInit+0x2b8>)
 800b94a:	f7ff fc6d 	bl	800b228 <pidInit>
 800b94e:	e07b      	b.n	800ba48 <motorInit+0x248>
        }
        else
        {
            pidInit(&motor1.velocityPID, 0.15, 0.05, 0, 0, UqMAX, motor1.Ts);
 800b950:	4b4e      	ldr	r3, [pc, #312]	@ (800ba8c <motorInit+0x28c>)
 800b952:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b956:	eef0 2a67 	vmov.f32	s5, s15
 800b95a:	ed9f 2a54 	vldr	s4, [pc, #336]	@ 800baac <motorInit+0x2ac>
 800b95e:	eddf 1a54 	vldr	s3, [pc, #336]	@ 800bab0 <motorInit+0x2b0>
 800b962:	ed9f 1a53 	vldr	s2, [pc, #332]	@ 800bab0 <motorInit+0x2b0>
 800b966:	eddf 0a58 	vldr	s1, [pc, #352]	@ 800bac8 <motorInit+0x2c8>
 800b96a:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 800bacc <motorInit+0x2cc>
 800b96e:	4855      	ldr	r0, [pc, #340]	@ (800bac4 <motorInit+0x2c4>)
 800b970:	f7ff fc5a 	bl	800b228 <pidInit>
 800b974:	e068      	b.n	800ba48 <motorInit+0x248>
        }
    }
    else if (motor1.controlType == ANGLE)
 800b976:	4b45      	ldr	r3, [pc, #276]	@ (800ba8c <motorInit+0x28c>)
 800b978:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800b97c:	2b03      	cmp	r3, #3
 800b97e:	d163      	bne.n	800ba48 <motorInit+0x248>
    {
        if (motor1.torqueType == CURRENT)
 800b980:	4b42      	ldr	r3, [pc, #264]	@ (800ba8c <motorInit+0x28c>)
 800b982:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800b986:	2b01      	cmp	r3, #1
 800b988:	d14c      	bne.n	800ba24 <motorInit+0x224>
        {
            pidInit(&motor1.anglePID, 2, 0, 0, 0, MAX_VELOCITY, motor1.Ts);
 800b98a:	4b40      	ldr	r3, [pc, #256]	@ (800ba8c <motorInit+0x28c>)
 800b98c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b990:	eef0 2a67 	vmov.f32	s5, s15
 800b994:	ed9f 2a4e 	vldr	s4, [pc, #312]	@ 800bad0 <motorInit+0x2d0>
 800b998:	eddf 1a45 	vldr	s3, [pc, #276]	@ 800bab0 <motorInit+0x2b0>
 800b99c:	ed9f 1a44 	vldr	s2, [pc, #272]	@ 800bab0 <motorInit+0x2b0>
 800b9a0:	eddf 0a43 	vldr	s1, [pc, #268]	@ 800bab0 <motorInit+0x2b0>
 800b9a4:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800b9a8:	484a      	ldr	r0, [pc, #296]	@ (800bad4 <motorInit+0x2d4>)
 800b9aa:	f7ff fc3d 	bl	800b228 <pidInit>

            pidInit(&motor1.velocityPID, -0.02, -0.01, 0, 0, CURRENT_MAX, motor1.Ts);
 800b9ae:	4b37      	ldr	r3, [pc, #220]	@ (800ba8c <motorInit+0x28c>)
 800b9b0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b9b4:	eef0 2a67 	vmov.f32	s5, s15
 800b9b8:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800b9bc:	eddf 1a3c 	vldr	s3, [pc, #240]	@ 800bab0 <motorInit+0x2b0>
 800b9c0:	ed9f 1a3b 	vldr	s2, [pc, #236]	@ 800bab0 <motorInit+0x2b0>
 800b9c4:	eddf 0a44 	vldr	s1, [pc, #272]	@ 800bad8 <motorInit+0x2d8>
 800b9c8:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 800badc <motorInit+0x2dc>
 800b9cc:	483d      	ldr	r0, [pc, #244]	@ (800bac4 <motorInit+0x2c4>)
 800b9ce:	f7ff fc2b 	bl	800b228 <pidInit>

            // pidInit(&motor1.anglePID, -0.001, -0.0001, 0, 0, CURRENT_MAX / 2, motor1.Ts);

            float kp, ki;
            kp = -200;
 800b9d2:	4b43      	ldr	r3, [pc, #268]	@ (800bae0 <motorInit+0x2e0>)
 800b9d4:	60fb      	str	r3, [r7, #12]
            ki = -20;
 800b9d6:	4b43      	ldr	r3, [pc, #268]	@ (800bae4 <motorInit+0x2e4>)
 800b9d8:	60bb      	str	r3, [r7, #8]
            pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800b9da:	4b2c      	ldr	r3, [pc, #176]	@ (800ba8c <motorInit+0x28c>)
 800b9dc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b9e0:	eef0 2a67 	vmov.f32	s5, s15
 800b9e4:	ed9f 2a31 	vldr	s4, [pc, #196]	@ 800baac <motorInit+0x2ac>
 800b9e8:	eddf 1a31 	vldr	s3, [pc, #196]	@ 800bab0 <motorInit+0x2b0>
 800b9ec:	ed9f 1a30 	vldr	s2, [pc, #192]	@ 800bab0 <motorInit+0x2b0>
 800b9f0:	edd7 0a02 	vldr	s1, [r7, #8]
 800b9f4:	ed97 0a03 	vldr	s0, [r7, #12]
 800b9f8:	482e      	ldr	r0, [pc, #184]	@ (800bab4 <motorInit+0x2b4>)
 800b9fa:	f7ff fc15 	bl	800b228 <pidInit>
            pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800b9fe:	4b23      	ldr	r3, [pc, #140]	@ (800ba8c <motorInit+0x28c>)
 800ba00:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ba04:	eef0 2a67 	vmov.f32	s5, s15
 800ba08:	ed9f 2a28 	vldr	s4, [pc, #160]	@ 800baac <motorInit+0x2ac>
 800ba0c:	eddf 1a28 	vldr	s3, [pc, #160]	@ 800bab0 <motorInit+0x2b0>
 800ba10:	ed9f 1a27 	vldr	s2, [pc, #156]	@ 800bab0 <motorInit+0x2b0>
 800ba14:	edd7 0a02 	vldr	s1, [r7, #8]
 800ba18:	ed97 0a03 	vldr	s0, [r7, #12]
 800ba1c:	4826      	ldr	r0, [pc, #152]	@ (800bab8 <motorInit+0x2b8>)
 800ba1e:	f7ff fc03 	bl	800b228 <pidInit>
 800ba22:	e011      	b.n	800ba48 <motorInit+0x248>
        }
        else
        {
            pidInit(&motor1.anglePID, 0.3, 0.001, 0, 0, UqMAX / 2, motor1.Ts);
 800ba24:	4b19      	ldr	r3, [pc, #100]	@ (800ba8c <motorInit+0x28c>)
 800ba26:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ba2a:	eef0 2a67 	vmov.f32	s5, s15
 800ba2e:	ed9f 2a2e 	vldr	s4, [pc, #184]	@ 800bae8 <motorInit+0x2e8>
 800ba32:	eddf 1a1f 	vldr	s3, [pc, #124]	@ 800bab0 <motorInit+0x2b0>
 800ba36:	ed9f 1a1e 	vldr	s2, [pc, #120]	@ 800bab0 <motorInit+0x2b0>
 800ba3a:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 800baec <motorInit+0x2ec>
 800ba3e:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800baf0 <motorInit+0x2f0>
 800ba42:	4824      	ldr	r0, [pc, #144]	@ (800bad4 <motorInit+0x2d4>)
 800ba44:	f7ff fbf0 	bl	800b228 <pidInit>
        }
    }

    lpfInit(&motor1.IqFilter, 0.05, motor1.Ts);
 800ba48:	4b10      	ldr	r3, [pc, #64]	@ (800ba8c <motorInit+0x28c>)
 800ba4a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ba4e:	eef0 0a67 	vmov.f32	s1, s15
 800ba52:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 800bac8 <motorInit+0x2c8>
 800ba56:	4827      	ldr	r0, [pc, #156]	@ (800baf4 <motorInit+0x2f4>)
 800ba58:	f7ff fa7a 	bl	800af50 <lpfInit>
    lpfInit(&motor1.IdFilter, 0.05, motor1.Ts);
 800ba5c:	4b0b      	ldr	r3, [pc, #44]	@ (800ba8c <motorInit+0x28c>)
 800ba5e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ba62:	eef0 0a67 	vmov.f32	s1, s15
 800ba66:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 800bac8 <motorInit+0x2c8>
 800ba6a:	4823      	ldr	r0, [pc, #140]	@ (800baf8 <motorInit+0x2f8>)
 800ba6c:	f7ff fa70 	bl	800af50 <lpfInit>
    lpfInit(&motor1.velocityFilter, 0.01, motor1.Ts);
 800ba70:	4b06      	ldr	r3, [pc, #24]	@ (800ba8c <motorInit+0x28c>)
 800ba72:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ba76:	eef0 0a67 	vmov.f32	s1, s15
 800ba7a:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 800babc <motorInit+0x2bc>
 800ba7e:	481f      	ldr	r0, [pc, #124]	@ (800bafc <motorInit+0x2fc>)
 800ba80:	f7ff fa66 	bl	800af50 <lpfInit>
}
 800ba84:	bf00      	nop
 800ba86:	3718      	adds	r7, #24
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	20000628 	.word	0x20000628
 800ba90:	0800b7cd 	.word	0x0800b7cd
 800ba94:	0800b785 	.word	0x0800b785
 800ba98:	0800b7a9 	.word	0x0800b7a9
 800ba9c:	38d1b717 	.word	0x38d1b717
 800baa0:	0800bf0d 	.word	0x0800bf0d
 800baa4:	43fa0000 	.word	0x43fa0000
 800baa8:	42480000 	.word	0x42480000
 800baac:	4093cd3a 	.word	0x4093cd3a
 800bab0:	00000000 	.word	0x00000000
 800bab4:	2000068c 	.word	0x2000068c
 800bab8:	200006b0 	.word	0x200006b0
 800babc:	3c23d70a 	.word	0x3c23d70a
 800bac0:	3ca3d70a 	.word	0x3ca3d70a
 800bac4:	200006d4 	.word	0x200006d4
 800bac8:	3d4ccccd 	.word	0x3d4ccccd
 800bacc:	3e19999a 	.word	0x3e19999a
 800bad0:	43960000 	.word	0x43960000
 800bad4:	200006f8 	.word	0x200006f8
 800bad8:	bc23d70a 	.word	0xbc23d70a
 800badc:	bca3d70a 	.word	0xbca3d70a
 800bae0:	c3480000 	.word	0xc3480000
 800bae4:	c1a00000 	.word	0xc1a00000
 800bae8:	4013cd3a 	.word	0x4013cd3a
 800baec:	3a83126f 	.word	0x3a83126f
 800baf0:	3e99999a 	.word	0x3e99999a
 800baf4:	2000071c 	.word	0x2000071c
 800baf8:	20000728 	.word	0x20000728
 800bafc:	20000734 	.word	0x20000734

0800bb00 <appInit>:
void appInit()
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	af00      	add	r7, sp, #0
    motorInit();
 800bb04:	f7ff fe7c 	bl	800b800 <motorInit>
    devState = WORK;
 800bb08:	4b02      	ldr	r3, [pc, #8]	@ (800bb14 <appInit+0x14>)
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	701a      	strb	r2, [r3, #0]
    //    MPU6050_Init(); // MPU6050初始化
}
 800bb0e:	bf00      	nop
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop
 800bb14:	2000008e 	.word	0x2000008e

0800bb18 <appRunning>:
static bool zeroReset;
void appRunning()
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	af00      	add	r7, sp, #0

    //  getKeyState(&keyState);
    commander_run(&motor1);
 800bb1c:	4811      	ldr	r0, [pc, #68]	@ (800bb64 <appRunning+0x4c>)
 800bb1e:	f000 f951 	bl	800bdc4 <commander_run>
    if (++flashCnt >= 10)
 800bb22:	4b11      	ldr	r3, [pc, #68]	@ (800bb68 <appRunning+0x50>)
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	3301      	adds	r3, #1
 800bb28:	b2da      	uxtb	r2, r3
 800bb2a:	4b0f      	ldr	r3, [pc, #60]	@ (800bb68 <appRunning+0x50>)
 800bb2c:	701a      	strb	r2, [r3, #0]
 800bb2e:	4b0e      	ldr	r3, [pc, #56]	@ (800bb68 <appRunning+0x50>)
 800bb30:	781b      	ldrb	r3, [r3, #0]
 800bb32:	2b09      	cmp	r3, #9
 800bb34:	d902      	bls.n	800bb3c <appRunning+0x24>
        flashCnt = 0;
 800bb36:	4b0c      	ldr	r3, [pc, #48]	@ (800bb68 <appRunning+0x50>)
 800bb38:	2200      	movs	r2, #0
 800bb3a:	701a      	strb	r2, [r3, #0]

    ledOn = 0;
 800bb3c:	4b0b      	ldr	r3, [pc, #44]	@ (800bb6c <appRunning+0x54>)
 800bb3e:	2200      	movs	r2, #0
 800bb40:	701a      	strb	r2, [r3, #0]
    //         motor1.target = goalTorqueV;
    //     else
    //         motor1.target = goalTorqueC;
    // }

    switch (devState)
 800bb42:	4b0b      	ldr	r3, [pc, #44]	@ (800bb70 <appRunning+0x58>)
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d002      	beq.n	800bb50 <appRunning+0x38>
 800bb4a:	2b01      	cmp	r3, #1
 800bb4c:	d003      	beq.n	800bb56 <appRunning+0x3e>
 800bb4e:	e005      	b.n	800bb5c <appRunning+0x44>
    {
    case STANDBY:
        standingBy();
 800bb50:	f000 f810 	bl	800bb74 <standingBy>
        break;
 800bb54:	e002      	b.n	800bb5c <appRunning+0x44>

    case WORK:
        working();
 800bb56:	f000 f847 	bl	800bbe8 <working>
        break;
 800bb5a:	bf00      	nop
    }

    LED_drive();
 800bb5c:	f000 f97e 	bl	800be5c <LED_drive>
}
 800bb60:	bf00      	nop
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	20000628 	.word	0x20000628
 800bb68:	20000624 	.word	0x20000624
 800bb6c:	20000835 	.word	0x20000835
 800bb70:	2000008e 	.word	0x2000008e

0800bb74 <standingBy>:
static void standingBy()
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	af00      	add	r7, sp, #0
    static uchar cnt;

    ledOn = 1;
 800bb78:	4b15      	ldr	r3, [pc, #84]	@ (800bbd0 <standingBy+0x5c>)
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	701a      	strb	r2, [r3, #0]
    // setTorque(&motor1, 0, OPEN_LOOP_TORQUE, 0);
    if (zeroReset == 0)
 800bb7e:	4b15      	ldr	r3, [pc, #84]	@ (800bbd4 <standingBy+0x60>)
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d106      	bne.n	800bb94 <standingBy+0x20>
    {
        goToZeroElecAngle(&motor1);
 800bb86:	4814      	ldr	r0, [pc, #80]	@ (800bbd8 <standingBy+0x64>)
 800bb88:	f7fe fc2a 	bl	800a3e0 <goToZeroElecAngle>
        zeroReset = 1;
 800bb8c:	4b11      	ldr	r3, [pc, #68]	@ (800bbd4 <standingBy+0x60>)
 800bb8e:	2201      	movs	r2, #1
 800bb90:	701a      	strb	r2, [r3, #0]
 800bb92:	e003      	b.n	800bb9c <standingBy+0x28>
    }
    else
        motor1.stopPwm();
 800bb94:	4b10      	ldr	r3, [pc, #64]	@ (800bbd8 <standingBy+0x64>)
 800bb96:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800bb9a:	4798      	blx	r3

    if (++cnt >= 10)
 800bb9c:	4b0f      	ldr	r3, [pc, #60]	@ (800bbdc <standingBy+0x68>)
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	3301      	adds	r3, #1
 800bba2:	b2da      	uxtb	r2, r3
 800bba4:	4b0d      	ldr	r3, [pc, #52]	@ (800bbdc <standingBy+0x68>)
 800bba6:	701a      	strb	r2, [r3, #0]
 800bba8:	4b0c      	ldr	r3, [pc, #48]	@ (800bbdc <standingBy+0x68>)
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	2b09      	cmp	r3, #9
 800bbae:	d90d      	bls.n	800bbcc <standingBy+0x58>
    {
        WORK_INIT;
 800bbb0:	4b0b      	ldr	r3, [pc, #44]	@ (800bbe0 <standingBy+0x6c>)
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	701a      	strb	r2, [r3, #0]
 800bbb6:	4b0b      	ldr	r3, [pc, #44]	@ (800bbe4 <standingBy+0x70>)
 800bbb8:	2200      	movs	r2, #0
 800bbba:	701a      	strb	r2, [r3, #0]
 800bbbc:	4b06      	ldr	r3, [pc, #24]	@ (800bbd8 <standingBy+0x64>)
 800bbbe:	2202      	movs	r2, #2
 800bbc0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800bbc4:	4b04      	ldr	r3, [pc, #16]	@ (800bbd8 <standingBy+0x64>)
 800bbc6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800bbca:	4798      	blx	r3
    }
}
 800bbcc:	bf00      	nop
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	20000835 	.word	0x20000835
 800bbd4:	20000768 	.word	0x20000768
 800bbd8:	20000628 	.word	0x20000628
 800bbdc:	20000769 	.word	0x20000769
 800bbe0:	2000008e 	.word	0x2000008e
 800bbe4:	20000624 	.word	0x20000624

0800bbe8 <working>:

static void working(void)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	af00      	add	r7, sp, #0
    zeroReset = 0;
 800bbec:	4b07      	ldr	r3, [pc, #28]	@ (800bc0c <working+0x24>)
 800bbee:	2200      	movs	r2, #0
 800bbf0:	701a      	strb	r2, [r3, #0]
    if (flashCnt < 5)
 800bbf2:	4b07      	ldr	r3, [pc, #28]	@ (800bc10 <working+0x28>)
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	2b04      	cmp	r3, #4
 800bbf8:	d802      	bhi.n	800bc00 <working+0x18>
        ledOn = 1;
 800bbfa:	4b06      	ldr	r3, [pc, #24]	@ (800bc14 <working+0x2c>)
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	701a      	strb	r2, [r3, #0]
    //        //     {
    //        //         bldcMotor.focTarget = 23;
    //        //     }
    //        // }
    //    }
}
 800bc00:	bf00      	nop
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr
 800bc0a:	bf00      	nop
 800bc0c:	20000768 	.word	0x20000768
 800bc10:	20000624 	.word	0x20000624
 800bc14:	20000835 	.word	0x20000835

0800bc18 <txDataProcess>:

void txDataProcess()
{
 800bc18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc1c:	b08e      	sub	sp, #56	@ 0x38
 800bc1e:	af0a      	add	r7, sp, #40	@ 0x28

    // sprintf(txBuffer, "target:%.2f fullAngle:%.2f velocity:%.2f Uq:%.2f Ud:%.2f Iq:%.2f Id:%.2f elec_angle:%.2f\n", motor1.target, motor1.magEncoder.fullAngle, motor1.magEncoder.velocity, motor1.Uq, motor1.Ud, motor1.Iq, motor1.Id, motor1.angle_el);

    // sprintf(txBuffer, "target:%.2f  velocity:%.2f  Uq:%.2f\n", motor1.target, motor1.magEncoder.velocity, motor1.Uq);
    sprintf(txBuffer, "target:%.2f,velocity:%.2f,Uq%.2f,Ud%.2f,Iq:%.2f,Id:%.2f\n", motor1.target, motor1.magEncoder.velocity, motor1.Uq, motor1.Ud, motor1.Iq, motor1.Id);
 800bc20:	4b21      	ldr	r3, [pc, #132]	@ (800bca8 <txDataProcess+0x90>)
 800bc22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc24:	4618      	mov	r0, r3
 800bc26:	f7f4 fcb7 	bl	8000598 <__aeabi_f2d>
 800bc2a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800bc2e:	4b1e      	ldr	r3, [pc, #120]	@ (800bca8 <txDataProcess+0x90>)
 800bc30:	699b      	ldr	r3, [r3, #24]
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7f4 fcb0 	bl	8000598 <__aeabi_f2d>
 800bc38:	4604      	mov	r4, r0
 800bc3a:	460d      	mov	r5, r1
 800bc3c:	4b1a      	ldr	r3, [pc, #104]	@ (800bca8 <txDataProcess+0x90>)
 800bc3e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7f4 fca8 	bl	8000598 <__aeabi_f2d>
 800bc48:	4680      	mov	r8, r0
 800bc4a:	4689      	mov	r9, r1
 800bc4c:	4b16      	ldr	r3, [pc, #88]	@ (800bca8 <txDataProcess+0x90>)
 800bc4e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7f4 fca0 	bl	8000598 <__aeabi_f2d>
 800bc58:	4682      	mov	sl, r0
 800bc5a:	468b      	mov	fp, r1
 800bc5c:	4b12      	ldr	r3, [pc, #72]	@ (800bca8 <txDataProcess+0x90>)
 800bc5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc60:	4618      	mov	r0, r3
 800bc62:	f7f4 fc99 	bl	8000598 <__aeabi_f2d>
 800bc66:	e9c7 0100 	strd	r0, r1, [r7]
 800bc6a:	4b0f      	ldr	r3, [pc, #60]	@ (800bca8 <txDataProcess+0x90>)
 800bc6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7f4 fc92 	bl	8000598 <__aeabi_f2d>
 800bc74:	4602      	mov	r2, r0
 800bc76:	460b      	mov	r3, r1
 800bc78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bc7c:	ed97 7b00 	vldr	d7, [r7]
 800bc80:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bc84:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800bc88:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800bc8c:	e9cd 4500 	strd	r4, r5, [sp]
 800bc90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bc94:	4905      	ldr	r1, [pc, #20]	@ (800bcac <txDataProcess+0x94>)
 800bc96:	4806      	ldr	r0, [pc, #24]	@ (800bcb0 <txDataProcess+0x98>)
 800bc98:	f002 f826 	bl	800dce8 <siprintf>
    // sprintf(txBuffer, "offset_ia:%f offset_ib:%f, Ia:%f, Ib:%f\n", motor1.offset_ia, motor1.offset_ib, motor1.Ia, motor1.Ib);
}
 800bc9c:	bf00      	nop
 800bc9e:	3710      	adds	r7, #16
 800bca0:	46bd      	mov	sp, r7
 800bca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bca6:	bf00      	nop
 800bca8:	20000628 	.word	0x20000628
 800bcac:	08010d14 	.word	0x08010d14
 800bcb0:	2000076c 	.word	0x2000076c

0800bcb4 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_SET);
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800bcc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bcc6:	f7f9 ff9b 	bl	8005c00 <HAL_GPIO_WritePin>
    if (hadc == &hadc1)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	4a0d      	ldr	r2, [pc, #52]	@ (800bd04 <HAL_ADCEx_InjectedConvCpltCallback+0x50>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d10d      	bne.n	800bcee <HAL_ADCEx_InjectedConvCpltCallback+0x3a>
    {

        foc(&motor1, hadc1.Instance->JDR1, hadc2.Instance->JDR1);
 800bcd2:	4b0c      	ldr	r3, [pc, #48]	@ (800bd04 <HAL_ADCEx_InjectedConvCpltCallback+0x50>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 800bcda:	4b0b      	ldr	r3, [pc, #44]	@ (800bd08 <HAL_ADCEx_InjectedConvCpltCallback+0x54>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bce2:	461a      	mov	r2, r3
 800bce4:	4809      	ldr	r0, [pc, #36]	@ (800bd0c <HAL_ADCEx_InjectedConvCpltCallback+0x58>)
 800bce6:	f7fe fce7 	bl	800a6b8 <foc>

        dealPer100us();
 800bcea:	f000 f9c9 	bl	800c080 <dealPer100us>

        memcpy(tempData, (uint8_t *)&load_data, sizeof(load_data));
        HAL_UART_Transmit_DMA(&huart3, (uint8_t *)tempData, sizeof(tempData));
#endif
    }
    HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 800bcee:	2200      	movs	r2, #0
 800bcf0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800bcf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bcf8:	f7f9 ff82 	bl	8005c00 <HAL_GPIO_WritePin>
}
 800bcfc:	bf00      	nop
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	20000274 	.word	0x20000274
 800bd08:	200002e0 	.word	0x200002e0
 800bd0c:	20000628 	.word	0x20000628

0800bd10 <HAL_UARTEx_RxEventCallback>:
bool toProcessData;
uint8_t aRxBuffer;
float comm1, comm2, comm3, comm4, comm5, comm6, comm7, comm8, comm9, comm10, comm11;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	460b      	mov	r3, r1
 800bd1a:	807b      	strh	r3, [r7, #2]
  if (huart == &huart3)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	4a07      	ldr	r2, [pc, #28]	@ (800bd3c <HAL_UARTEx_RxEventCallback+0x2c>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d107      	bne.n	800bd34 <HAL_UARTEx_RxEventCallback+0x24>
  {
    // HAL_UART_Transmit_DMA(&huart3, rxBuffer, Size);
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 800bd24:	2264      	movs	r2, #100	@ 0x64
 800bd26:	4906      	ldr	r1, [pc, #24]	@ (800bd40 <HAL_UARTEx_RxEventCallback+0x30>)
 800bd28:	4804      	ldr	r0, [pc, #16]	@ (800bd3c <HAL_UARTEx_RxEventCallback+0x2c>)
 800bd2a:	f7fe fab6 	bl	800a29a <HAL_UARTEx_ReceiveToIdle_DMA>
    toProcessData = 1;
 800bd2e:	4b05      	ldr	r3, [pc, #20]	@ (800bd44 <HAL_UARTEx_RxEventCallback+0x34>)
 800bd30:	2201      	movs	r2, #1
 800bd32:	701a      	strb	r2, [r3, #0]
  }
}
 800bd34:	bf00      	nop
 800bd36:	3708      	adds	r7, #8
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	200004c8 	.word	0x200004c8
 800bd40:	200007d0 	.word	0x200007d0
 800bd44:	20000834 	.word	0x20000834

0800bd48 <FOC_log>:

// DMA模式
void FOC_log(const char *format, ...)
{
 800bd48:	b40f      	push	{r0, r1, r2, r3}
 800bd4a:	b580      	push	{r7, lr}
 800bd4c:	b0c2      	sub	sp, #264	@ 0x108
 800bd4e:	af00      	add	r7, sp, #0
  // length = vsnprintf((char *)txBuffer, sizeof(txBuffer), (char *)format, args);
  // va_end(args);
  // HAL_UART_Transmit_DMA(&huart3, (const char *)txBuffer, length);

  va_list args;           // 定义参数列表变量
  va_start(args, format); // 从format位置开始接收参数表，放在arg里面
 800bd50:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800bd54:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

  char strBuf[256];               // 定义输出的字符串
  vsprintf(strBuf, format, args); // 使用vsprintf将格式化的数据写入缓冲区
 800bd58:	1d3b      	adds	r3, r7, #4
 800bd5a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800bd5e:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 800bd62:	4618      	mov	r0, r3
 800bd64:	f002 f83a 	bl	800dddc <vsiprintf>
  va_end(args);                   // 结束可变参数的使用

  // 等待上次的数据发送完成，避免新的数据覆盖正在传输的数据，导致混乱
  while (HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX)
 800bd68:	bf00      	nop
 800bd6a:	480d      	ldr	r0, [pc, #52]	@ (800bda0 <FOC_log+0x58>)
 800bd6c:	f7fd fa48 	bl	8009200 <HAL_UART_GetState>
 800bd70:	4603      	mov	r3, r0
 800bd72:	2b21      	cmp	r3, #33	@ 0x21
 800bd74:	d0f9      	beq.n	800bd6a <FOC_log+0x22>
  {
    // Wait for DMA transfer to complete
  }
  HAL_UART_Transmit(&huart3, (uint8_t *)strBuf, strlen(strBuf), 1000);
 800bd76:	1d3b      	adds	r3, r7, #4
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f7f4 faa1 	bl	80002c0 <strlen>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	b29a      	uxth	r2, r3
 800bd82:	1d39      	adds	r1, r7, #4
 800bd84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bd88:	4805      	ldr	r0, [pc, #20]	@ (800bda0 <FOC_log+0x58>)
 800bd8a:	f7fc fdd5 	bl	8008938 <HAL_UART_Transmit>
}
 800bd8e:	bf00      	nop
 800bd90:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800bd94:	46bd      	mov	sp, r7
 800bd96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd9a:	b004      	add	sp, #16
 800bd9c:	4770      	bx	lr
 800bd9e:	bf00      	nop
 800bda0:	200004c8 	.word	0x200004c8

0800bda4 <printLog>:
//   va_end(args);
//   HAL_UART_Transmit_DMA(&huart3, (const char *)txBuffer, length);
// }

void printLog()
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	af00      	add	r7, sp, #0

#if SHOW_WAVE == 0
  txDataProcess();
 800bda8:	f7ff ff36 	bl	800bc18 <txDataProcess>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800bdac:	2264      	movs	r2, #100	@ 0x64
 800bdae:	4903      	ldr	r1, [pc, #12]	@ (800bdbc <printLog+0x18>)
 800bdb0:	4803      	ldr	r0, [pc, #12]	@ (800bdc0 <printLog+0x1c>)
 800bdb2:	f7fc fe4f 	bl	8008a54 <HAL_UART_Transmit_DMA>
#endif
}
 800bdb6:	bf00      	nop
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	2000076c 	.word	0x2000076c
 800bdc0:	200004c8 	.word	0x200004c8

0800bdc4 <commander_run>:

void commander_run(BldcMotor *motor)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  if (toProcessData == 1)
 800bdcc:	4b1c      	ldr	r3, [pc, #112]	@ (800be40 <commander_run+0x7c>)
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d131      	bne.n	800be38 <commander_run+0x74>
  {
    // memset(txBuffer, '\0', sizeof(txBuffer));

    switch (rxBuffer[0])
 800bdd4:	4b1b      	ldr	r3, [pc, #108]	@ (800be44 <commander_run+0x80>)
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	2b48      	cmp	r3, #72	@ 0x48
 800bdda:	d002      	beq.n	800bde2 <commander_run+0x1e>
 800bddc:	2b54      	cmp	r3, #84	@ 0x54
 800bdde:	d00a      	beq.n	800bdf6 <commander_run+0x32>
 800bde0:	e027      	b.n	800be32 <commander_run+0x6e>
    {
    case 'H':
      // sprintf(sndBuff, "Hello World!\r\n");
      // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)sndBuff, sizeof(sndBuff));
      sprintf(txBuffer, "Hello World!\r\n");
 800bde2:	4919      	ldr	r1, [pc, #100]	@ (800be48 <commander_run+0x84>)
 800bde4:	4819      	ldr	r0, [pc, #100]	@ (800be4c <commander_run+0x88>)
 800bde6:	f001 ff7f 	bl	800dce8 <siprintf>
      HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800bdea:	2264      	movs	r2, #100	@ 0x64
 800bdec:	4917      	ldr	r1, [pc, #92]	@ (800be4c <commander_run+0x88>)
 800bdee:	4818      	ldr	r0, [pc, #96]	@ (800be50 <commander_run+0x8c>)
 800bdf0:	f7fc fe30 	bl	8008a54 <HAL_UART_Transmit_DMA>
      break;
 800bdf4:	e01d      	b.n	800be32 <commander_run+0x6e>
    case 'T': // T6.28

      motor->target = atof((const char *)(rxBuffer + 1));
 800bdf6:	4b17      	ldr	r3, [pc, #92]	@ (800be54 <commander_run+0x90>)
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f000 fa2f 	bl	800c25c <atof>
 800bdfe:	ec53 2b10 	vmov	r2, r3, d0
 800be02:	4610      	mov	r0, r2
 800be04:	4619      	mov	r1, r3
 800be06:	f7f4 ff17 	bl	8000c38 <__aeabi_d2f>
 800be0a:	4602      	mov	r2, r0
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	631a      	str	r2, [r3, #48]	@ 0x30
      sprintf(txBuffer, "Target=%.2f\r\n", motor->target);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be14:	4618      	mov	r0, r3
 800be16:	f7f4 fbbf 	bl	8000598 <__aeabi_f2d>
 800be1a:	4602      	mov	r2, r0
 800be1c:	460b      	mov	r3, r1
 800be1e:	490e      	ldr	r1, [pc, #56]	@ (800be58 <commander_run+0x94>)
 800be20:	480a      	ldr	r0, [pc, #40]	@ (800be4c <commander_run+0x88>)
 800be22:	f001 ff61 	bl	800dce8 <siprintf>
      HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800be26:	2264      	movs	r2, #100	@ 0x64
 800be28:	4908      	ldr	r1, [pc, #32]	@ (800be4c <commander_run+0x88>)
 800be2a:	4809      	ldr	r0, [pc, #36]	@ (800be50 <commander_run+0x8c>)
 800be2c:	f7fc fe12 	bl	8008a54 <HAL_UART_Transmit_DMA>
      // printf("%s", sndBuff);
      // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)sndBuff, sizeof(sndBuff));
      break;
 800be30:	bf00      	nop
      // case 'A': // A
      //   sprintf(sndBuff, "Ang=%.2f\r\n", shaftAngle);
      //   printf("%s", sndBuff);
      //   break;
    }
    toProcessData = 0;
 800be32:	4b03      	ldr	r3, [pc, #12]	@ (800be40 <commander_run+0x7c>)
 800be34:	2200      	movs	r2, #0
 800be36:	701a      	strb	r2, [r3, #0]
  }
}
 800be38:	bf00      	nop
 800be3a:	3708      	adds	r7, #8
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	20000834 	.word	0x20000834
 800be44:	200007d0 	.word	0x200007d0
 800be48:	08010d50 	.word	0x08010d50
 800be4c:	2000076c 	.word	0x2000076c
 800be50:	200004c8 	.word	0x200004c8
 800be54:	200007d1 	.word	0x200007d1
 800be58:	08010d60 	.word	0x08010d60

0800be5c <LED_drive>:
#include "led.h"

bool ledOn;

void LED_drive()
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	af00      	add	r7, sp, #0
    if (ledOn)
 800be60:	4b08      	ldr	r3, [pc, #32]	@ (800be84 <LED_drive+0x28>)
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d005      	beq.n	800be74 <LED_drive+0x18>
        LED_ON;
 800be68:	2200      	movs	r2, #0
 800be6a:	2101      	movs	r1, #1
 800be6c:	4806      	ldr	r0, [pc, #24]	@ (800be88 <LED_drive+0x2c>)
 800be6e:	f7f9 fec7 	bl	8005c00 <HAL_GPIO_WritePin>
    else
        LED_OFF;
}
 800be72:	e004      	b.n	800be7e <LED_drive+0x22>
        LED_OFF;
 800be74:	2201      	movs	r2, #1
 800be76:	2101      	movs	r1, #1
 800be78:	4803      	ldr	r0, [pc, #12]	@ (800be88 <LED_drive+0x2c>)
 800be7a:	f7f9 fec1 	bl	8005c00 <HAL_GPIO_WritePin>
}
 800be7e:	bf00      	nop
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	20000835 	.word	0x20000835
 800be88:	48000400 	.word	0x48000400

0800be8c <MT6701_GetRawData>:
#include "focLib.h"
#include "time_utils.h"
// static unsigned int rotationCount, rotationCount_Last;

uint16_t MT6701_GetRawData(void)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af02      	add	r7, sp, #8
    uint16_t rawData;
    uint16_t txData = 0xFFFF;
 800be92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800be96:	803b      	strh	r3, [r7, #0]
    uint16_t timeOut = 200;
 800be98:	23c8      	movs	r3, #200	@ 0xc8
 800be9a:	80fb      	strh	r3, [r7, #6]

    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800be9c:	e006      	b.n	800beac <MT6701_GetRawData+0x20>
    {
        if (timeOut-- == 0)
 800be9e:	88fb      	ldrh	r3, [r7, #6]
 800bea0:	1e5a      	subs	r2, r3, #1
 800bea2:	80fa      	strh	r2, [r7, #6]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d101      	bne.n	800beac <MT6701_GetRawData+0x20>
        {
            //   FOC_log("SPI state error!\r\n");
            return 0; // 在超时时直接返回，避免继续执行后续代码
 800bea8:	2300      	movs	r3, #0
 800beaa:	e027      	b.n	800befc <MT6701_GetRawData+0x70>
    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800beac:	4815      	ldr	r0, [pc, #84]	@ (800bf04 <MT6701_GetRawData+0x78>)
 800beae:	f7fb f95e 	bl	800716e <HAL_SPI_GetState>
 800beb2:	4603      	mov	r3, r0
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d1f2      	bne.n	800be9e <MT6701_GetRawData+0x12>
        }
    }

    MT6701_CS_Enable;
 800beb8:	2200      	movs	r2, #0
 800beba:	2108      	movs	r1, #8
 800bebc:	4812      	ldr	r0, [pc, #72]	@ (800bf08 <MT6701_GetRawData+0x7c>)
 800bebe:	f7f9 fe9f 	bl	8005c00 <HAL_GPIO_WritePin>

    HAL_StatusTypeDef spiStatus = HAL_SPI_TransmitReceive(&hspi3, (uint8_t *)&txData, (uint8_t *)&rawData, 1, HAL_MAX_DELAY);
 800bec2:	1cba      	adds	r2, r7, #2
 800bec4:	4639      	mov	r1, r7
 800bec6:	f04f 33ff 	mov.w	r3, #4294967295
 800beca:	9300      	str	r3, [sp, #0]
 800becc:	2301      	movs	r3, #1
 800bece:	480d      	ldr	r0, [pc, #52]	@ (800bf04 <MT6701_GetRawData+0x78>)
 800bed0:	f7fa ff2b 	bl	8006d2a <HAL_SPI_TransmitReceive>
 800bed4:	4603      	mov	r3, r0
 800bed6:	717b      	strb	r3, [r7, #5]
    if (spiStatus != HAL_OK)
 800bed8:	797b      	ldrb	r3, [r7, #5]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d006      	beq.n	800beec <MT6701_GetRawData+0x60>
    {
        MT6701_CS_Disable;
 800bede:	2201      	movs	r2, #1
 800bee0:	2108      	movs	r1, #8
 800bee2:	4809      	ldr	r0, [pc, #36]	@ (800bf08 <MT6701_GetRawData+0x7c>)
 800bee4:	f7f9 fe8c 	bl	8005c00 <HAL_GPIO_WritePin>
        //  FOC_log("MT6701 read data error!\r\n");
        return 0; // 在SPI传输错误时直接返回，避免继续执行后续代码
 800bee8:	2300      	movs	r3, #0
 800beea:	e007      	b.n	800befc <MT6701_GetRawData+0x70>
    }

    MT6701_CS_Disable;
 800beec:	2201      	movs	r2, #1
 800beee:	2108      	movs	r1, #8
 800bef0:	4805      	ldr	r0, [pc, #20]	@ (800bf08 <MT6701_GetRawData+0x7c>)
 800bef2:	f7f9 fe85 	bl	8005c00 <HAL_GPIO_WritePin>

    return rawData >> 2; // 取高14位的角度数据
 800bef6:	887b      	ldrh	r3, [r7, #2]
 800bef8:	089b      	lsrs	r3, r3, #2
 800befa:	b29b      	uxth	r3, r3
}
 800befc:	4618      	mov	r0, r3
 800befe:	3708      	adds	r7, #8
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	200003c8 	.word	0x200003c8
 800bf08:	48000400 	.word	0x48000400

0800bf0c <MT6701_GetRawAngle>:

// 将传感器原始数据转化为弧度
float MT6701_GetRawAngle(void)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
    uint16_t rawData = MT6701_GetRawData();
 800bf12:	f7ff ffbb 	bl	800be8c <MT6701_GetRawData>
 800bf16:	4603      	mov	r3, r0
 800bf18:	80fb      	strh	r3, [r7, #6]
    return (float)rawData / 16384.0f * _2PI;
 800bf1a:	88fb      	ldrh	r3, [r7, #6]
 800bf1c:	ee07 3a90 	vmov	s15, r3
 800bf20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bf24:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800bf40 <MT6701_GetRawAngle+0x34>
 800bf28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bf2c:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800bf44 <MT6701_GetRawAngle+0x38>
 800bf30:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800bf34:	eeb0 0a67 	vmov.f32	s0, s15
 800bf38:	3708      	adds	r7, #8
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	46800000 	.word	0x46800000
 800bf44:	40c90fdb 	.word	0x40c90fdb

0800bf48 <delay>:
#include "time_utils.h"

__IO uint32_t m, tms, u, t0;

void delay(uint32_t _ms)
{
 800bf48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf4c:	b082      	sub	sp, #8
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
    t0 = micros();
 800bf52:	f000 f83b 	bl	800bfcc <micros>
 800bf56:	4602      	mov	r2, r0
 800bf58:	460b      	mov	r3, r1
 800bf5a:	4b11      	ldr	r3, [pc, #68]	@ (800bfa0 <delay+0x58>)
 800bf5c:	601a      	str	r2, [r3, #0]
    while (micros() - t0 < _ms * 1000)
 800bf5e:	e000      	b.n	800bf62 <delay+0x1a>
        __NOP();
 800bf60:	bf00      	nop
    while (micros() - t0 < _ms * 1000)
 800bf62:	f000 f833 	bl	800bfcc <micros>
 800bf66:	4602      	mov	r2, r0
 800bf68:	460b      	mov	r3, r1
 800bf6a:	490d      	ldr	r1, [pc, #52]	@ (800bfa0 <delay+0x58>)
 800bf6c:	6809      	ldr	r1, [r1, #0]
 800bf6e:	2000      	movs	r0, #0
 800bf70:	468a      	mov	sl, r1
 800bf72:	4683      	mov	fp, r0
 800bf74:	ebb2 040a 	subs.w	r4, r2, sl
 800bf78:	eb63 050b 	sbc.w	r5, r3, fp
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800bf82:	fb02 f303 	mul.w	r3, r2, r3
 800bf86:	2200      	movs	r2, #0
 800bf88:	4698      	mov	r8, r3
 800bf8a:	4691      	mov	r9, r2
 800bf8c:	4544      	cmp	r4, r8
 800bf8e:	eb75 0309 	sbcs.w	r3, r5, r9
 800bf92:	d3e5      	bcc.n	800bf60 <delay+0x18>
}
 800bf94:	bf00      	nop
 800bf96:	bf00      	nop
 800bf98:	3708      	adds	r7, #8
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bfa0:	20000844 	.word	0x20000844

0800bfa4 <LL_SYSTICK_IsActiveCounterFlag>:
    while (_us--)
        __NOP();
}

__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag()
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	af00      	add	r7, sp, #0
    return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 800bfa8:	4b07      	ldr	r3, [pc, #28]	@ (800bfc8 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bfb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bfb4:	bf0c      	ite	eq
 800bfb6:	2301      	moveq	r3, #1
 800bfb8:	2300      	movne	r3, #0
 800bfba:	b2db      	uxtb	r3, r3
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc4:	4770      	bx	lr
 800bfc6:	bf00      	nop
 800bfc8:	e000e010 	.word	0xe000e010

0800bfcc <micros>:

uint64_t micros()
{
 800bfcc:	b5b0      	push	{r4, r5, r7, lr}
 800bfce:	af00      	add	r7, sp, #0
    /* Ensure COUNTFLAG is reset by reading SysTick control and status register */
    LL_SYSTICK_IsActiveCounterFlag();
 800bfd0:	f7ff ffe8 	bl	800bfa4 <LL_SYSTICK_IsActiveCounterFlag>
    m = HAL_GetTick();
 800bfd4:	f7f6 fa3e 	bl	8002454 <HAL_GetTick>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	4a1c      	ldr	r2, [pc, #112]	@ (800c04c <micros+0x80>)
 800bfdc:	6013      	str	r3, [r2, #0]
    tms = SysTick->LOAD + 1;
 800bfde:	4b1c      	ldr	r3, [pc, #112]	@ (800c050 <micros+0x84>)
 800bfe0:	685b      	ldr	r3, [r3, #4]
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	4a1b      	ldr	r2, [pc, #108]	@ (800c054 <micros+0x88>)
 800bfe6:	6013      	str	r3, [r2, #0]
    u = tms - SysTick->VAL;
 800bfe8:	4b1a      	ldr	r3, [pc, #104]	@ (800c054 <micros+0x88>)
 800bfea:	681a      	ldr	r2, [r3, #0]
 800bfec:	4b18      	ldr	r3, [pc, #96]	@ (800c050 <micros+0x84>)
 800bfee:	689b      	ldr	r3, [r3, #8]
 800bff0:	1ad3      	subs	r3, r2, r3
 800bff2:	4a19      	ldr	r2, [pc, #100]	@ (800c058 <micros+0x8c>)
 800bff4:	6013      	str	r3, [r2, #0]
    if (LL_SYSTICK_IsActiveCounterFlag())
 800bff6:	f7ff ffd5 	bl	800bfa4 <LL_SYSTICK_IsActiveCounterFlag>
 800bffa:	4603      	mov	r3, r0
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d00b      	beq.n	800c018 <micros+0x4c>
    {
        m = HAL_GetTick();
 800c000:	f7f6 fa28 	bl	8002454 <HAL_GetTick>
 800c004:	4603      	mov	r3, r0
 800c006:	4a11      	ldr	r2, [pc, #68]	@ (800c04c <micros+0x80>)
 800c008:	6013      	str	r3, [r2, #0]
        u = tms - SysTick->VAL;
 800c00a:	4b12      	ldr	r3, [pc, #72]	@ (800c054 <micros+0x88>)
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	4b10      	ldr	r3, [pc, #64]	@ (800c050 <micros+0x84>)
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	1ad3      	subs	r3, r2, r3
 800c014:	4a10      	ldr	r2, [pc, #64]	@ (800c058 <micros+0x8c>)
 800c016:	6013      	str	r3, [r2, #0]
    }
    return (m * 1000 + (u * 1000) / tms);
 800c018:	4b0c      	ldr	r3, [pc, #48]	@ (800c04c <micros+0x80>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c020:	fb03 f202 	mul.w	r2, r3, r2
 800c024:	4b0c      	ldr	r3, [pc, #48]	@ (800c058 <micros+0x8c>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800c02c:	fb03 f101 	mul.w	r1, r3, r1
 800c030:	4b08      	ldr	r3, [pc, #32]	@ (800c054 <micros+0x88>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	fbb1 f3f3 	udiv	r3, r1, r3
 800c038:	4413      	add	r3, r2
 800c03a:	2200      	movs	r2, #0
 800c03c:	461c      	mov	r4, r3
 800c03e:	4615      	mov	r5, r2
 800c040:	4622      	mov	r2, r4
 800c042:	462b      	mov	r3, r5
}
 800c044:	4610      	mov	r0, r2
 800c046:	4619      	mov	r1, r3
 800c048:	bdb0      	pop	{r4, r5, r7, pc}
 800c04a:	bf00      	nop
 800c04c:	20000838 	.word	0x20000838
 800c050:	e000e010 	.word	0xe000e010
 800c054:	2000083c 	.word	0x2000083c
 800c058:	20000840 	.word	0x20000840

0800c05c <userMain>:
float HallTheta = 0;
float HallSpeed = 0;
uint8_t HallReadTemp = 0;
//static bool powerLost;
void userMain(void)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	af00      	add	r7, sp, #0
//	if (get5MsFlag())
//	{
//		keyScan();
//	}

	if (get100MsFlag())
 800c060:	f000 f8e8 	bl	800c234 <get100MsFlag>
 800c064:	4603      	mov	r3, r0
 800c066:	2b00      	cmp	r3, #0
 800c068:	d001      	beq.n	800c06e <userMain+0x12>
	{
		appRunning();
 800c06a:	f7ff fd55 	bl	800bb18 <appRunning>
	}
#if SHOW_WAVE == 0 //&& COMMAMNDER == 0
	// if (get500MsFlag())
	if (getOneSecFlag())
 800c06e:	f000 f8cd 	bl	800c20c <getOneSecFlag>
 800c072:	4603      	mov	r3, r0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d001      	beq.n	800c07c <userMain+0x20>
	{
		printLog();
 800c078:	f7ff fe94 	bl	800bda4 <printLog>
	}
#endif
}
 800c07c:	bf00      	nop
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <dealPer100us>:


static bool _5msFlag, _10msFlag, _20msFlag, _30msFlag, _100msFlag, _500msFlag, _1s;
static void dealPerMs();
void dealPer100us()
{
 800c080:	b580      	push	{r7, lr}
 800c082:	af00      	add	r7, sp, #0
    static unsigned char cnt;
    if (++cnt >= 10)
 800c084:	4b08      	ldr	r3, [pc, #32]	@ (800c0a8 <dealPer100us+0x28>)
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	3301      	adds	r3, #1
 800c08a:	b2da      	uxtb	r2, r3
 800c08c:	4b06      	ldr	r3, [pc, #24]	@ (800c0a8 <dealPer100us+0x28>)
 800c08e:	701a      	strb	r2, [r3, #0]
 800c090:	4b05      	ldr	r3, [pc, #20]	@ (800c0a8 <dealPer100us+0x28>)
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	2b09      	cmp	r3, #9
 800c096:	d904      	bls.n	800c0a2 <dealPer100us+0x22>
    {
        cnt = 0;
 800c098:	4b03      	ldr	r3, [pc, #12]	@ (800c0a8 <dealPer100us+0x28>)
 800c09a:	2200      	movs	r2, #0
 800c09c:	701a      	strb	r2, [r3, #0]
        dealPerMs();
 800c09e:	f000 f805 	bl	800c0ac <dealPerMs>
    }

}
 800c0a2:	bf00      	nop
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop
 800c0a8:	20000857 	.word	0x20000857

0800c0ac <dealPerMs>:

static void dealPerMs()
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	af00      	add	r7, sp, #0
    static unsigned char _5msCnt, _30msCnt, _20msCnt, _100msCnt, _10msCnt;
    static uint _500msCnt, _1000msCnt;
    if (++_5msCnt >= 5)
 800c0b0:	4b45      	ldr	r3, [pc, #276]	@ (800c1c8 <dealPerMs+0x11c>)
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	b2da      	uxtb	r2, r3
 800c0b8:	4b43      	ldr	r3, [pc, #268]	@ (800c1c8 <dealPerMs+0x11c>)
 800c0ba:	701a      	strb	r2, [r3, #0]
 800c0bc:	4b42      	ldr	r3, [pc, #264]	@ (800c1c8 <dealPerMs+0x11c>)
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	2b04      	cmp	r3, #4
 800c0c2:	d905      	bls.n	800c0d0 <dealPerMs+0x24>
    {
        _5msCnt = 0;
 800c0c4:	4b40      	ldr	r3, [pc, #256]	@ (800c1c8 <dealPerMs+0x11c>)
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	701a      	strb	r2, [r3, #0]
        _5msFlag = 1;
 800c0ca:	4b40      	ldr	r3, [pc, #256]	@ (800c1cc <dealPerMs+0x120>)
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	701a      	strb	r2, [r3, #0]
    }

    if (++_10msCnt >= 10)
 800c0d0:	4b3f      	ldr	r3, [pc, #252]	@ (800c1d0 <dealPerMs+0x124>)
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	b2da      	uxtb	r2, r3
 800c0d8:	4b3d      	ldr	r3, [pc, #244]	@ (800c1d0 <dealPerMs+0x124>)
 800c0da:	701a      	strb	r2, [r3, #0]
 800c0dc:	4b3c      	ldr	r3, [pc, #240]	@ (800c1d0 <dealPerMs+0x124>)
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	2b09      	cmp	r3, #9
 800c0e2:	d905      	bls.n	800c0f0 <dealPerMs+0x44>
    {
        _10msCnt = 0;
 800c0e4:	4b3a      	ldr	r3, [pc, #232]	@ (800c1d0 <dealPerMs+0x124>)
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	701a      	strb	r2, [r3, #0]
        _10msFlag = 1;
 800c0ea:	4b3a      	ldr	r3, [pc, #232]	@ (800c1d4 <dealPerMs+0x128>)
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	701a      	strb	r2, [r3, #0]
    }

    if (++_20msCnt >= 20)
 800c0f0:	4b39      	ldr	r3, [pc, #228]	@ (800c1d8 <dealPerMs+0x12c>)
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	b2da      	uxtb	r2, r3
 800c0f8:	4b37      	ldr	r3, [pc, #220]	@ (800c1d8 <dealPerMs+0x12c>)
 800c0fa:	701a      	strb	r2, [r3, #0]
 800c0fc:	4b36      	ldr	r3, [pc, #216]	@ (800c1d8 <dealPerMs+0x12c>)
 800c0fe:	781b      	ldrb	r3, [r3, #0]
 800c100:	2b13      	cmp	r3, #19
 800c102:	d905      	bls.n	800c110 <dealPerMs+0x64>
    {
        _20msCnt = 0;
 800c104:	4b34      	ldr	r3, [pc, #208]	@ (800c1d8 <dealPerMs+0x12c>)
 800c106:	2200      	movs	r2, #0
 800c108:	701a      	strb	r2, [r3, #0]
        _20msFlag = 1;
 800c10a:	4b34      	ldr	r3, [pc, #208]	@ (800c1dc <dealPerMs+0x130>)
 800c10c:	2201      	movs	r2, #1
 800c10e:	701a      	strb	r2, [r3, #0]
    }

    if (++_30msCnt >= 30)
 800c110:	4b33      	ldr	r3, [pc, #204]	@ (800c1e0 <dealPerMs+0x134>)
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	3301      	adds	r3, #1
 800c116:	b2da      	uxtb	r2, r3
 800c118:	4b31      	ldr	r3, [pc, #196]	@ (800c1e0 <dealPerMs+0x134>)
 800c11a:	701a      	strb	r2, [r3, #0]
 800c11c:	4b30      	ldr	r3, [pc, #192]	@ (800c1e0 <dealPerMs+0x134>)
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	2b1d      	cmp	r3, #29
 800c122:	d905      	bls.n	800c130 <dealPerMs+0x84>
    {
        _30msCnt = 0;
 800c124:	4b2e      	ldr	r3, [pc, #184]	@ (800c1e0 <dealPerMs+0x134>)
 800c126:	2200      	movs	r2, #0
 800c128:	701a      	strb	r2, [r3, #0]
        _30msFlag = 1;
 800c12a:	4b2e      	ldr	r3, [pc, #184]	@ (800c1e4 <dealPerMs+0x138>)
 800c12c:	2201      	movs	r2, #1
 800c12e:	701a      	strb	r2, [r3, #0]
    }

    if (++_100msCnt >= 100)
 800c130:	4b2d      	ldr	r3, [pc, #180]	@ (800c1e8 <dealPerMs+0x13c>)
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	3301      	adds	r3, #1
 800c136:	b2da      	uxtb	r2, r3
 800c138:	4b2b      	ldr	r3, [pc, #172]	@ (800c1e8 <dealPerMs+0x13c>)
 800c13a:	701a      	strb	r2, [r3, #0]
 800c13c:	4b2a      	ldr	r3, [pc, #168]	@ (800c1e8 <dealPerMs+0x13c>)
 800c13e:	781b      	ldrb	r3, [r3, #0]
 800c140:	2b63      	cmp	r3, #99	@ 0x63
 800c142:	d905      	bls.n	800c150 <dealPerMs+0xa4>
    {
        _100msCnt = 0;
 800c144:	4b28      	ldr	r3, [pc, #160]	@ (800c1e8 <dealPerMs+0x13c>)
 800c146:	2200      	movs	r2, #0
 800c148:	701a      	strb	r2, [r3, #0]
        _100msFlag = 1;
 800c14a:	4b28      	ldr	r3, [pc, #160]	@ (800c1ec <dealPerMs+0x140>)
 800c14c:	2201      	movs	r2, #1
 800c14e:	701a      	strb	r2, [r3, #0]
    }

    if (++_500msCnt >= 500)
 800c150:	4b27      	ldr	r3, [pc, #156]	@ (800c1f0 <dealPerMs+0x144>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	3301      	adds	r3, #1
 800c156:	4a26      	ldr	r2, [pc, #152]	@ (800c1f0 <dealPerMs+0x144>)
 800c158:	6013      	str	r3, [r2, #0]
 800c15a:	4b25      	ldr	r3, [pc, #148]	@ (800c1f0 <dealPerMs+0x144>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800c162:	d305      	bcc.n	800c170 <dealPerMs+0xc4>
    {
        _500msCnt = 0;
 800c164:	4b22      	ldr	r3, [pc, #136]	@ (800c1f0 <dealPerMs+0x144>)
 800c166:	2200      	movs	r2, #0
 800c168:	601a      	str	r2, [r3, #0]
        _500msFlag = 1;
 800c16a:	4b22      	ldr	r3, [pc, #136]	@ (800c1f4 <dealPerMs+0x148>)
 800c16c:	2201      	movs	r2, #1
 800c16e:	701a      	strb	r2, [r3, #0]
    }
    if (++_1000msCnt >= 1000)
 800c170:	4b21      	ldr	r3, [pc, #132]	@ (800c1f8 <dealPerMs+0x14c>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	3301      	adds	r3, #1
 800c176:	4a20      	ldr	r2, [pc, #128]	@ (800c1f8 <dealPerMs+0x14c>)
 800c178:	6013      	str	r3, [r2, #0]
 800c17a:	4b1f      	ldr	r3, [pc, #124]	@ (800c1f8 <dealPerMs+0x14c>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c182:	d305      	bcc.n	800c190 <dealPerMs+0xe4>
    {
        _1000msCnt = 0;
 800c184:	4b1c      	ldr	r3, [pc, #112]	@ (800c1f8 <dealPerMs+0x14c>)
 800c186:	2200      	movs	r2, #0
 800c188:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800c18a:	4b1c      	ldr	r3, [pc, #112]	@ (800c1fc <dealPerMs+0x150>)
 800c18c:	2201      	movs	r2, #1
 800c18e:	701a      	strb	r2, [r3, #0]

        cnt = 0;
    }

#else
    frequence = 50;
 800c190:	4b1b      	ldr	r3, [pc, #108]	@ (800c200 <dealPerMs+0x154>)
 800c192:	2232      	movs	r2, #50	@ 0x32
 800c194:	701a      	strb	r2, [r3, #0]
            _1s = 1;
        }
    }
#else

    if (++_1msCnt >= 1000)
 800c196:	4b1b      	ldr	r3, [pc, #108]	@ (800c204 <dealPerMs+0x158>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	3301      	adds	r3, #1
 800c19c:	4a19      	ldr	r2, [pc, #100]	@ (800c204 <dealPerMs+0x158>)
 800c19e:	6013      	str	r3, [r2, #0]
 800c1a0:	4b18      	ldr	r3, [pc, #96]	@ (800c204 <dealPerMs+0x158>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c1a8:	d305      	bcc.n	800c1b6 <dealPerMs+0x10a>
    {
        _1msCnt = 0;
 800c1aa:	4b16      	ldr	r3, [pc, #88]	@ (800c204 <dealPerMs+0x158>)
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800c1b0:	4b12      	ldr	r3, [pc, #72]	@ (800c1fc <dealPerMs+0x150>)
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	701a      	strb	r2, [r3, #0]
    }
#endif
#if SPEED_UP
    _1s = 1;
#endif
    _1ms = 1;
 800c1b6:	4b14      	ldr	r3, [pc, #80]	@ (800c208 <dealPerMs+0x15c>)
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	701a      	strb	r2, [r3, #0]




}
 800c1bc:	bf00      	nop
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr
 800c1c6:	bf00      	nop
 800c1c8:	20000858 	.word	0x20000858
 800c1cc:	20000851 	.word	0x20000851
 800c1d0:	20000859 	.word	0x20000859
 800c1d4:	20000852 	.word	0x20000852
 800c1d8:	2000085a 	.word	0x2000085a
 800c1dc:	20000853 	.word	0x20000853
 800c1e0:	2000085b 	.word	0x2000085b
 800c1e4:	20000854 	.word	0x20000854
 800c1e8:	2000085c 	.word	0x2000085c
 800c1ec:	20000855 	.word	0x20000855
 800c1f0:	20000860 	.word	0x20000860
 800c1f4:	20000856 	.word	0x20000856
 800c1f8:	20000864 	.word	0x20000864
 800c1fc:	20000848 	.word	0x20000848
 800c200:	20000850 	.word	0x20000850
 800c204:	2000084c 	.word	0x2000084c
 800c208:	20000849 	.word	0x20000849

0800c20c <getOneSecFlag>:
}



bool getOneSecFlag()
{
 800c20c:	b480      	push	{r7}
 800c20e:	af00      	add	r7, sp, #0
    if (_1s)
 800c210:	4b07      	ldr	r3, [pc, #28]	@ (800c230 <getOneSecFlag+0x24>)
 800c212:	781b      	ldrb	r3, [r3, #0]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d004      	beq.n	800c222 <getOneSecFlag+0x16>
    {
        _1s = 0;
 800c218:	4b05      	ldr	r3, [pc, #20]	@ (800c230 <getOneSecFlag+0x24>)
 800c21a:	2200      	movs	r2, #0
 800c21c:	701a      	strb	r2, [r3, #0]
        return 1;
 800c21e:	2301      	movs	r3, #1
 800c220:	e000      	b.n	800c224 <getOneSecFlag+0x18>
    }
    else
        return 0;
 800c222:	2300      	movs	r3, #0
}
 800c224:	4618      	mov	r0, r3
 800c226:	46bd      	mov	sp, r7
 800c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22c:	4770      	bx	lr
 800c22e:	bf00      	nop
 800c230:	20000848 	.word	0x20000848

0800c234 <get100MsFlag>:
        return 0;
    }
}

bool get100MsFlag()
{
 800c234:	b480      	push	{r7}
 800c236:	af00      	add	r7, sp, #0
    if (_100msFlag)
 800c238:	4b07      	ldr	r3, [pc, #28]	@ (800c258 <get100MsFlag+0x24>)
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d004      	beq.n	800c24a <get100MsFlag+0x16>
    {
        _100msFlag = 0;
 800c240:	4b05      	ldr	r3, [pc, #20]	@ (800c258 <get100MsFlag+0x24>)
 800c242:	2200      	movs	r2, #0
 800c244:	701a      	strb	r2, [r3, #0]
        return 1;
 800c246:	2301      	movs	r3, #1
 800c248:	e000      	b.n	800c24c <get100MsFlag+0x18>
    }
    else
    {
        return 0;
 800c24a:	2300      	movs	r3, #0
    }
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr
 800c256:	bf00      	nop
 800c258:	20000855 	.word	0x20000855

0800c25c <atof>:
 800c25c:	2100      	movs	r1, #0
 800c25e:	f000 be09 	b.w	800ce74 <strtod>

0800c262 <sulp>:
 800c262:	b570      	push	{r4, r5, r6, lr}
 800c264:	4604      	mov	r4, r0
 800c266:	460d      	mov	r5, r1
 800c268:	ec45 4b10 	vmov	d0, r4, r5
 800c26c:	4616      	mov	r6, r2
 800c26e:	f003 fc7b 	bl	800fb68 <__ulp>
 800c272:	ec51 0b10 	vmov	r0, r1, d0
 800c276:	b17e      	cbz	r6, 800c298 <sulp+0x36>
 800c278:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c27c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c280:	2b00      	cmp	r3, #0
 800c282:	dd09      	ble.n	800c298 <sulp+0x36>
 800c284:	051b      	lsls	r3, r3, #20
 800c286:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c28a:	2400      	movs	r4, #0
 800c28c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c290:	4622      	mov	r2, r4
 800c292:	462b      	mov	r3, r5
 800c294:	f7f4 f9d8 	bl	8000648 <__aeabi_dmul>
 800c298:	ec41 0b10 	vmov	d0, r0, r1
 800c29c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c2a0 <_strtod_l>:
 800c2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a4:	b09f      	sub	sp, #124	@ 0x7c
 800c2a6:	460c      	mov	r4, r1
 800c2a8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	921a      	str	r2, [sp, #104]	@ 0x68
 800c2ae:	9005      	str	r0, [sp, #20]
 800c2b0:	f04f 0a00 	mov.w	sl, #0
 800c2b4:	f04f 0b00 	mov.w	fp, #0
 800c2b8:	460a      	mov	r2, r1
 800c2ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800c2bc:	7811      	ldrb	r1, [r2, #0]
 800c2be:	292b      	cmp	r1, #43	@ 0x2b
 800c2c0:	d04a      	beq.n	800c358 <_strtod_l+0xb8>
 800c2c2:	d838      	bhi.n	800c336 <_strtod_l+0x96>
 800c2c4:	290d      	cmp	r1, #13
 800c2c6:	d832      	bhi.n	800c32e <_strtod_l+0x8e>
 800c2c8:	2908      	cmp	r1, #8
 800c2ca:	d832      	bhi.n	800c332 <_strtod_l+0x92>
 800c2cc:	2900      	cmp	r1, #0
 800c2ce:	d03b      	beq.n	800c348 <_strtod_l+0xa8>
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c2d4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c2d6:	782a      	ldrb	r2, [r5, #0]
 800c2d8:	2a30      	cmp	r2, #48	@ 0x30
 800c2da:	f040 80b3 	bne.w	800c444 <_strtod_l+0x1a4>
 800c2de:	786a      	ldrb	r2, [r5, #1]
 800c2e0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c2e4:	2a58      	cmp	r2, #88	@ 0x58
 800c2e6:	d16e      	bne.n	800c3c6 <_strtod_l+0x126>
 800c2e8:	9302      	str	r3, [sp, #8]
 800c2ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2ec:	9301      	str	r3, [sp, #4]
 800c2ee:	ab1a      	add	r3, sp, #104	@ 0x68
 800c2f0:	9300      	str	r3, [sp, #0]
 800c2f2:	4a8e      	ldr	r2, [pc, #568]	@ (800c52c <_strtod_l+0x28c>)
 800c2f4:	9805      	ldr	r0, [sp, #20]
 800c2f6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c2f8:	a919      	add	r1, sp, #100	@ 0x64
 800c2fa:	f002 fd27 	bl	800ed4c <__gethex>
 800c2fe:	f010 060f 	ands.w	r6, r0, #15
 800c302:	4604      	mov	r4, r0
 800c304:	d005      	beq.n	800c312 <_strtod_l+0x72>
 800c306:	2e06      	cmp	r6, #6
 800c308:	d128      	bne.n	800c35c <_strtod_l+0xbc>
 800c30a:	3501      	adds	r5, #1
 800c30c:	2300      	movs	r3, #0
 800c30e:	9519      	str	r5, [sp, #100]	@ 0x64
 800c310:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c312:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c314:	2b00      	cmp	r3, #0
 800c316:	f040 858e 	bne.w	800ce36 <_strtod_l+0xb96>
 800c31a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c31c:	b1cb      	cbz	r3, 800c352 <_strtod_l+0xb2>
 800c31e:	4652      	mov	r2, sl
 800c320:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c324:	ec43 2b10 	vmov	d0, r2, r3
 800c328:	b01f      	add	sp, #124	@ 0x7c
 800c32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c32e:	2920      	cmp	r1, #32
 800c330:	d1ce      	bne.n	800c2d0 <_strtod_l+0x30>
 800c332:	3201      	adds	r2, #1
 800c334:	e7c1      	b.n	800c2ba <_strtod_l+0x1a>
 800c336:	292d      	cmp	r1, #45	@ 0x2d
 800c338:	d1ca      	bne.n	800c2d0 <_strtod_l+0x30>
 800c33a:	2101      	movs	r1, #1
 800c33c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c33e:	1c51      	adds	r1, r2, #1
 800c340:	9119      	str	r1, [sp, #100]	@ 0x64
 800c342:	7852      	ldrb	r2, [r2, #1]
 800c344:	2a00      	cmp	r2, #0
 800c346:	d1c5      	bne.n	800c2d4 <_strtod_l+0x34>
 800c348:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c34a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	f040 8570 	bne.w	800ce32 <_strtod_l+0xb92>
 800c352:	4652      	mov	r2, sl
 800c354:	465b      	mov	r3, fp
 800c356:	e7e5      	b.n	800c324 <_strtod_l+0x84>
 800c358:	2100      	movs	r1, #0
 800c35a:	e7ef      	b.n	800c33c <_strtod_l+0x9c>
 800c35c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c35e:	b13a      	cbz	r2, 800c370 <_strtod_l+0xd0>
 800c360:	2135      	movs	r1, #53	@ 0x35
 800c362:	a81c      	add	r0, sp, #112	@ 0x70
 800c364:	f003 fcfa 	bl	800fd5c <__copybits>
 800c368:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c36a:	9805      	ldr	r0, [sp, #20]
 800c36c:	f003 f8c8 	bl	800f500 <_Bfree>
 800c370:	3e01      	subs	r6, #1
 800c372:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c374:	2e04      	cmp	r6, #4
 800c376:	d806      	bhi.n	800c386 <_strtod_l+0xe6>
 800c378:	e8df f006 	tbb	[pc, r6]
 800c37c:	201d0314 	.word	0x201d0314
 800c380:	14          	.byte	0x14
 800c381:	00          	.byte	0x00
 800c382:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c386:	05e1      	lsls	r1, r4, #23
 800c388:	bf48      	it	mi
 800c38a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c38e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c392:	0d1b      	lsrs	r3, r3, #20
 800c394:	051b      	lsls	r3, r3, #20
 800c396:	2b00      	cmp	r3, #0
 800c398:	d1bb      	bne.n	800c312 <_strtod_l+0x72>
 800c39a:	f001 fd8d 	bl	800deb8 <__errno>
 800c39e:	2322      	movs	r3, #34	@ 0x22
 800c3a0:	6003      	str	r3, [r0, #0]
 800c3a2:	e7b6      	b.n	800c312 <_strtod_l+0x72>
 800c3a4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c3a8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c3ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c3b0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c3b4:	e7e7      	b.n	800c386 <_strtod_l+0xe6>
 800c3b6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c534 <_strtod_l+0x294>
 800c3ba:	e7e4      	b.n	800c386 <_strtod_l+0xe6>
 800c3bc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c3c0:	f04f 3aff 	mov.w	sl, #4294967295
 800c3c4:	e7df      	b.n	800c386 <_strtod_l+0xe6>
 800c3c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3c8:	1c5a      	adds	r2, r3, #1
 800c3ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800c3cc:	785b      	ldrb	r3, [r3, #1]
 800c3ce:	2b30      	cmp	r3, #48	@ 0x30
 800c3d0:	d0f9      	beq.n	800c3c6 <_strtod_l+0x126>
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d09d      	beq.n	800c312 <_strtod_l+0x72>
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3dc:	930c      	str	r3, [sp, #48]	@ 0x30
 800c3de:	2300      	movs	r3, #0
 800c3e0:	9308      	str	r3, [sp, #32]
 800c3e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3e4:	461f      	mov	r7, r3
 800c3e6:	220a      	movs	r2, #10
 800c3e8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c3ea:	7805      	ldrb	r5, [r0, #0]
 800c3ec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c3f0:	b2d9      	uxtb	r1, r3
 800c3f2:	2909      	cmp	r1, #9
 800c3f4:	d928      	bls.n	800c448 <_strtod_l+0x1a8>
 800c3f6:	494e      	ldr	r1, [pc, #312]	@ (800c530 <_strtod_l+0x290>)
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	f001 fd01 	bl	800de00 <strncmp>
 800c3fe:	2800      	cmp	r0, #0
 800c400:	d032      	beq.n	800c468 <_strtod_l+0x1c8>
 800c402:	2000      	movs	r0, #0
 800c404:	462a      	mov	r2, r5
 800c406:	4681      	mov	r9, r0
 800c408:	463d      	mov	r5, r7
 800c40a:	4603      	mov	r3, r0
 800c40c:	2a65      	cmp	r2, #101	@ 0x65
 800c40e:	d001      	beq.n	800c414 <_strtod_l+0x174>
 800c410:	2a45      	cmp	r2, #69	@ 0x45
 800c412:	d114      	bne.n	800c43e <_strtod_l+0x19e>
 800c414:	b91d      	cbnz	r5, 800c41e <_strtod_l+0x17e>
 800c416:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c418:	4302      	orrs	r2, r0
 800c41a:	d095      	beq.n	800c348 <_strtod_l+0xa8>
 800c41c:	2500      	movs	r5, #0
 800c41e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c420:	1c62      	adds	r2, r4, #1
 800c422:	9219      	str	r2, [sp, #100]	@ 0x64
 800c424:	7862      	ldrb	r2, [r4, #1]
 800c426:	2a2b      	cmp	r2, #43	@ 0x2b
 800c428:	d077      	beq.n	800c51a <_strtod_l+0x27a>
 800c42a:	2a2d      	cmp	r2, #45	@ 0x2d
 800c42c:	d07b      	beq.n	800c526 <_strtod_l+0x286>
 800c42e:	f04f 0c00 	mov.w	ip, #0
 800c432:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c436:	2909      	cmp	r1, #9
 800c438:	f240 8082 	bls.w	800c540 <_strtod_l+0x2a0>
 800c43c:	9419      	str	r4, [sp, #100]	@ 0x64
 800c43e:	f04f 0800 	mov.w	r8, #0
 800c442:	e0a2      	b.n	800c58a <_strtod_l+0x2ea>
 800c444:	2300      	movs	r3, #0
 800c446:	e7c7      	b.n	800c3d8 <_strtod_l+0x138>
 800c448:	2f08      	cmp	r7, #8
 800c44a:	bfd5      	itete	le
 800c44c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c44e:	9908      	ldrgt	r1, [sp, #32]
 800c450:	fb02 3301 	mlale	r3, r2, r1, r3
 800c454:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c458:	f100 0001 	add.w	r0, r0, #1
 800c45c:	bfd4      	ite	le
 800c45e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c460:	9308      	strgt	r3, [sp, #32]
 800c462:	3701      	adds	r7, #1
 800c464:	9019      	str	r0, [sp, #100]	@ 0x64
 800c466:	e7bf      	b.n	800c3e8 <_strtod_l+0x148>
 800c468:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c46a:	1c5a      	adds	r2, r3, #1
 800c46c:	9219      	str	r2, [sp, #100]	@ 0x64
 800c46e:	785a      	ldrb	r2, [r3, #1]
 800c470:	b37f      	cbz	r7, 800c4d2 <_strtod_l+0x232>
 800c472:	4681      	mov	r9, r0
 800c474:	463d      	mov	r5, r7
 800c476:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c47a:	2b09      	cmp	r3, #9
 800c47c:	d912      	bls.n	800c4a4 <_strtod_l+0x204>
 800c47e:	2301      	movs	r3, #1
 800c480:	e7c4      	b.n	800c40c <_strtod_l+0x16c>
 800c482:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c484:	1c5a      	adds	r2, r3, #1
 800c486:	9219      	str	r2, [sp, #100]	@ 0x64
 800c488:	785a      	ldrb	r2, [r3, #1]
 800c48a:	3001      	adds	r0, #1
 800c48c:	2a30      	cmp	r2, #48	@ 0x30
 800c48e:	d0f8      	beq.n	800c482 <_strtod_l+0x1e2>
 800c490:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c494:	2b08      	cmp	r3, #8
 800c496:	f200 84d3 	bhi.w	800ce40 <_strtod_l+0xba0>
 800c49a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c49c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c49e:	4681      	mov	r9, r0
 800c4a0:	2000      	movs	r0, #0
 800c4a2:	4605      	mov	r5, r0
 800c4a4:	3a30      	subs	r2, #48	@ 0x30
 800c4a6:	f100 0301 	add.w	r3, r0, #1
 800c4aa:	d02a      	beq.n	800c502 <_strtod_l+0x262>
 800c4ac:	4499      	add	r9, r3
 800c4ae:	eb00 0c05 	add.w	ip, r0, r5
 800c4b2:	462b      	mov	r3, r5
 800c4b4:	210a      	movs	r1, #10
 800c4b6:	4563      	cmp	r3, ip
 800c4b8:	d10d      	bne.n	800c4d6 <_strtod_l+0x236>
 800c4ba:	1c69      	adds	r1, r5, #1
 800c4bc:	4401      	add	r1, r0
 800c4be:	4428      	add	r0, r5
 800c4c0:	2808      	cmp	r0, #8
 800c4c2:	dc16      	bgt.n	800c4f2 <_strtod_l+0x252>
 800c4c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c4c6:	230a      	movs	r3, #10
 800c4c8:	fb03 2300 	mla	r3, r3, r0, r2
 800c4cc:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	e018      	b.n	800c504 <_strtod_l+0x264>
 800c4d2:	4638      	mov	r0, r7
 800c4d4:	e7da      	b.n	800c48c <_strtod_l+0x1ec>
 800c4d6:	2b08      	cmp	r3, #8
 800c4d8:	f103 0301 	add.w	r3, r3, #1
 800c4dc:	dc03      	bgt.n	800c4e6 <_strtod_l+0x246>
 800c4de:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c4e0:	434e      	muls	r6, r1
 800c4e2:	960a      	str	r6, [sp, #40]	@ 0x28
 800c4e4:	e7e7      	b.n	800c4b6 <_strtod_l+0x216>
 800c4e6:	2b10      	cmp	r3, #16
 800c4e8:	bfde      	ittt	le
 800c4ea:	9e08      	ldrle	r6, [sp, #32]
 800c4ec:	434e      	mulle	r6, r1
 800c4ee:	9608      	strle	r6, [sp, #32]
 800c4f0:	e7e1      	b.n	800c4b6 <_strtod_l+0x216>
 800c4f2:	280f      	cmp	r0, #15
 800c4f4:	dceb      	bgt.n	800c4ce <_strtod_l+0x22e>
 800c4f6:	9808      	ldr	r0, [sp, #32]
 800c4f8:	230a      	movs	r3, #10
 800c4fa:	fb03 2300 	mla	r3, r3, r0, r2
 800c4fe:	9308      	str	r3, [sp, #32]
 800c500:	e7e5      	b.n	800c4ce <_strtod_l+0x22e>
 800c502:	4629      	mov	r1, r5
 800c504:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c506:	1c50      	adds	r0, r2, #1
 800c508:	9019      	str	r0, [sp, #100]	@ 0x64
 800c50a:	7852      	ldrb	r2, [r2, #1]
 800c50c:	4618      	mov	r0, r3
 800c50e:	460d      	mov	r5, r1
 800c510:	e7b1      	b.n	800c476 <_strtod_l+0x1d6>
 800c512:	f04f 0900 	mov.w	r9, #0
 800c516:	2301      	movs	r3, #1
 800c518:	e77d      	b.n	800c416 <_strtod_l+0x176>
 800c51a:	f04f 0c00 	mov.w	ip, #0
 800c51e:	1ca2      	adds	r2, r4, #2
 800c520:	9219      	str	r2, [sp, #100]	@ 0x64
 800c522:	78a2      	ldrb	r2, [r4, #2]
 800c524:	e785      	b.n	800c432 <_strtod_l+0x192>
 800c526:	f04f 0c01 	mov.w	ip, #1
 800c52a:	e7f8      	b.n	800c51e <_strtod_l+0x27e>
 800c52c:	08010dc8 	.word	0x08010dc8
 800c530:	08010db0 	.word	0x08010db0
 800c534:	7ff00000 	.word	0x7ff00000
 800c538:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c53a:	1c51      	adds	r1, r2, #1
 800c53c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c53e:	7852      	ldrb	r2, [r2, #1]
 800c540:	2a30      	cmp	r2, #48	@ 0x30
 800c542:	d0f9      	beq.n	800c538 <_strtod_l+0x298>
 800c544:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c548:	2908      	cmp	r1, #8
 800c54a:	f63f af78 	bhi.w	800c43e <_strtod_l+0x19e>
 800c54e:	3a30      	subs	r2, #48	@ 0x30
 800c550:	920e      	str	r2, [sp, #56]	@ 0x38
 800c552:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c554:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c556:	f04f 080a 	mov.w	r8, #10
 800c55a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c55c:	1c56      	adds	r6, r2, #1
 800c55e:	9619      	str	r6, [sp, #100]	@ 0x64
 800c560:	7852      	ldrb	r2, [r2, #1]
 800c562:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c566:	f1be 0f09 	cmp.w	lr, #9
 800c56a:	d939      	bls.n	800c5e0 <_strtod_l+0x340>
 800c56c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c56e:	1a76      	subs	r6, r6, r1
 800c570:	2e08      	cmp	r6, #8
 800c572:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c576:	dc03      	bgt.n	800c580 <_strtod_l+0x2e0>
 800c578:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c57a:	4588      	cmp	r8, r1
 800c57c:	bfa8      	it	ge
 800c57e:	4688      	movge	r8, r1
 800c580:	f1bc 0f00 	cmp.w	ip, #0
 800c584:	d001      	beq.n	800c58a <_strtod_l+0x2ea>
 800c586:	f1c8 0800 	rsb	r8, r8, #0
 800c58a:	2d00      	cmp	r5, #0
 800c58c:	d14e      	bne.n	800c62c <_strtod_l+0x38c>
 800c58e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c590:	4308      	orrs	r0, r1
 800c592:	f47f aebe 	bne.w	800c312 <_strtod_l+0x72>
 800c596:	2b00      	cmp	r3, #0
 800c598:	f47f aed6 	bne.w	800c348 <_strtod_l+0xa8>
 800c59c:	2a69      	cmp	r2, #105	@ 0x69
 800c59e:	d028      	beq.n	800c5f2 <_strtod_l+0x352>
 800c5a0:	dc25      	bgt.n	800c5ee <_strtod_l+0x34e>
 800c5a2:	2a49      	cmp	r2, #73	@ 0x49
 800c5a4:	d025      	beq.n	800c5f2 <_strtod_l+0x352>
 800c5a6:	2a4e      	cmp	r2, #78	@ 0x4e
 800c5a8:	f47f aece 	bne.w	800c348 <_strtod_l+0xa8>
 800c5ac:	499b      	ldr	r1, [pc, #620]	@ (800c81c <_strtod_l+0x57c>)
 800c5ae:	a819      	add	r0, sp, #100	@ 0x64
 800c5b0:	f002 fdee 	bl	800f190 <__match>
 800c5b4:	2800      	cmp	r0, #0
 800c5b6:	f43f aec7 	beq.w	800c348 <_strtod_l+0xa8>
 800c5ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	2b28      	cmp	r3, #40	@ 0x28
 800c5c0:	d12e      	bne.n	800c620 <_strtod_l+0x380>
 800c5c2:	4997      	ldr	r1, [pc, #604]	@ (800c820 <_strtod_l+0x580>)
 800c5c4:	aa1c      	add	r2, sp, #112	@ 0x70
 800c5c6:	a819      	add	r0, sp, #100	@ 0x64
 800c5c8:	f002 fdf6 	bl	800f1b8 <__hexnan>
 800c5cc:	2805      	cmp	r0, #5
 800c5ce:	d127      	bne.n	800c620 <_strtod_l+0x380>
 800c5d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c5d2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c5d6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c5da:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c5de:	e698      	b.n	800c312 <_strtod_l+0x72>
 800c5e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c5e2:	fb08 2101 	mla	r1, r8, r1, r2
 800c5e6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c5ea:	920e      	str	r2, [sp, #56]	@ 0x38
 800c5ec:	e7b5      	b.n	800c55a <_strtod_l+0x2ba>
 800c5ee:	2a6e      	cmp	r2, #110	@ 0x6e
 800c5f0:	e7da      	b.n	800c5a8 <_strtod_l+0x308>
 800c5f2:	498c      	ldr	r1, [pc, #560]	@ (800c824 <_strtod_l+0x584>)
 800c5f4:	a819      	add	r0, sp, #100	@ 0x64
 800c5f6:	f002 fdcb 	bl	800f190 <__match>
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	f43f aea4 	beq.w	800c348 <_strtod_l+0xa8>
 800c600:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c602:	4989      	ldr	r1, [pc, #548]	@ (800c828 <_strtod_l+0x588>)
 800c604:	3b01      	subs	r3, #1
 800c606:	a819      	add	r0, sp, #100	@ 0x64
 800c608:	9319      	str	r3, [sp, #100]	@ 0x64
 800c60a:	f002 fdc1 	bl	800f190 <__match>
 800c60e:	b910      	cbnz	r0, 800c616 <_strtod_l+0x376>
 800c610:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c612:	3301      	adds	r3, #1
 800c614:	9319      	str	r3, [sp, #100]	@ 0x64
 800c616:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c838 <_strtod_l+0x598>
 800c61a:	f04f 0a00 	mov.w	sl, #0
 800c61e:	e678      	b.n	800c312 <_strtod_l+0x72>
 800c620:	4882      	ldr	r0, [pc, #520]	@ (800c82c <_strtod_l+0x58c>)
 800c622:	f001 fc85 	bl	800df30 <nan>
 800c626:	ec5b ab10 	vmov	sl, fp, d0
 800c62a:	e672      	b.n	800c312 <_strtod_l+0x72>
 800c62c:	eba8 0309 	sub.w	r3, r8, r9
 800c630:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c632:	9309      	str	r3, [sp, #36]	@ 0x24
 800c634:	2f00      	cmp	r7, #0
 800c636:	bf08      	it	eq
 800c638:	462f      	moveq	r7, r5
 800c63a:	2d10      	cmp	r5, #16
 800c63c:	462c      	mov	r4, r5
 800c63e:	bfa8      	it	ge
 800c640:	2410      	movge	r4, #16
 800c642:	f7f3 ff87 	bl	8000554 <__aeabi_ui2d>
 800c646:	2d09      	cmp	r5, #9
 800c648:	4682      	mov	sl, r0
 800c64a:	468b      	mov	fp, r1
 800c64c:	dc13      	bgt.n	800c676 <_strtod_l+0x3d6>
 800c64e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c650:	2b00      	cmp	r3, #0
 800c652:	f43f ae5e 	beq.w	800c312 <_strtod_l+0x72>
 800c656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c658:	dd78      	ble.n	800c74c <_strtod_l+0x4ac>
 800c65a:	2b16      	cmp	r3, #22
 800c65c:	dc5f      	bgt.n	800c71e <_strtod_l+0x47e>
 800c65e:	4974      	ldr	r1, [pc, #464]	@ (800c830 <_strtod_l+0x590>)
 800c660:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c664:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c668:	4652      	mov	r2, sl
 800c66a:	465b      	mov	r3, fp
 800c66c:	f7f3 ffec 	bl	8000648 <__aeabi_dmul>
 800c670:	4682      	mov	sl, r0
 800c672:	468b      	mov	fp, r1
 800c674:	e64d      	b.n	800c312 <_strtod_l+0x72>
 800c676:	4b6e      	ldr	r3, [pc, #440]	@ (800c830 <_strtod_l+0x590>)
 800c678:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c67c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c680:	f7f3 ffe2 	bl	8000648 <__aeabi_dmul>
 800c684:	4682      	mov	sl, r0
 800c686:	9808      	ldr	r0, [sp, #32]
 800c688:	468b      	mov	fp, r1
 800c68a:	f7f3 ff63 	bl	8000554 <__aeabi_ui2d>
 800c68e:	4602      	mov	r2, r0
 800c690:	460b      	mov	r3, r1
 800c692:	4650      	mov	r0, sl
 800c694:	4659      	mov	r1, fp
 800c696:	f7f3 fe21 	bl	80002dc <__adddf3>
 800c69a:	2d0f      	cmp	r5, #15
 800c69c:	4682      	mov	sl, r0
 800c69e:	468b      	mov	fp, r1
 800c6a0:	ddd5      	ble.n	800c64e <_strtod_l+0x3ae>
 800c6a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6a4:	1b2c      	subs	r4, r5, r4
 800c6a6:	441c      	add	r4, r3
 800c6a8:	2c00      	cmp	r4, #0
 800c6aa:	f340 8096 	ble.w	800c7da <_strtod_l+0x53a>
 800c6ae:	f014 030f 	ands.w	r3, r4, #15
 800c6b2:	d00a      	beq.n	800c6ca <_strtod_l+0x42a>
 800c6b4:	495e      	ldr	r1, [pc, #376]	@ (800c830 <_strtod_l+0x590>)
 800c6b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c6ba:	4652      	mov	r2, sl
 800c6bc:	465b      	mov	r3, fp
 800c6be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6c2:	f7f3 ffc1 	bl	8000648 <__aeabi_dmul>
 800c6c6:	4682      	mov	sl, r0
 800c6c8:	468b      	mov	fp, r1
 800c6ca:	f034 040f 	bics.w	r4, r4, #15
 800c6ce:	d073      	beq.n	800c7b8 <_strtod_l+0x518>
 800c6d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c6d4:	dd48      	ble.n	800c768 <_strtod_l+0x4c8>
 800c6d6:	2400      	movs	r4, #0
 800c6d8:	46a0      	mov	r8, r4
 800c6da:	940a      	str	r4, [sp, #40]	@ 0x28
 800c6dc:	46a1      	mov	r9, r4
 800c6de:	9a05      	ldr	r2, [sp, #20]
 800c6e0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c838 <_strtod_l+0x598>
 800c6e4:	2322      	movs	r3, #34	@ 0x22
 800c6e6:	6013      	str	r3, [r2, #0]
 800c6e8:	f04f 0a00 	mov.w	sl, #0
 800c6ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	f43f ae0f 	beq.w	800c312 <_strtod_l+0x72>
 800c6f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c6f6:	9805      	ldr	r0, [sp, #20]
 800c6f8:	f002 ff02 	bl	800f500 <_Bfree>
 800c6fc:	9805      	ldr	r0, [sp, #20]
 800c6fe:	4649      	mov	r1, r9
 800c700:	f002 fefe 	bl	800f500 <_Bfree>
 800c704:	9805      	ldr	r0, [sp, #20]
 800c706:	4641      	mov	r1, r8
 800c708:	f002 fefa 	bl	800f500 <_Bfree>
 800c70c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c70e:	9805      	ldr	r0, [sp, #20]
 800c710:	f002 fef6 	bl	800f500 <_Bfree>
 800c714:	9805      	ldr	r0, [sp, #20]
 800c716:	4621      	mov	r1, r4
 800c718:	f002 fef2 	bl	800f500 <_Bfree>
 800c71c:	e5f9      	b.n	800c312 <_strtod_l+0x72>
 800c71e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c720:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c724:	4293      	cmp	r3, r2
 800c726:	dbbc      	blt.n	800c6a2 <_strtod_l+0x402>
 800c728:	4c41      	ldr	r4, [pc, #260]	@ (800c830 <_strtod_l+0x590>)
 800c72a:	f1c5 050f 	rsb	r5, r5, #15
 800c72e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c732:	4652      	mov	r2, sl
 800c734:	465b      	mov	r3, fp
 800c736:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c73a:	f7f3 ff85 	bl	8000648 <__aeabi_dmul>
 800c73e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c740:	1b5d      	subs	r5, r3, r5
 800c742:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c746:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c74a:	e78f      	b.n	800c66c <_strtod_l+0x3cc>
 800c74c:	3316      	adds	r3, #22
 800c74e:	dba8      	blt.n	800c6a2 <_strtod_l+0x402>
 800c750:	4b37      	ldr	r3, [pc, #220]	@ (800c830 <_strtod_l+0x590>)
 800c752:	eba9 0808 	sub.w	r8, r9, r8
 800c756:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c75a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c75e:	4650      	mov	r0, sl
 800c760:	4659      	mov	r1, fp
 800c762:	f7f4 f89b 	bl	800089c <__aeabi_ddiv>
 800c766:	e783      	b.n	800c670 <_strtod_l+0x3d0>
 800c768:	4b32      	ldr	r3, [pc, #200]	@ (800c834 <_strtod_l+0x594>)
 800c76a:	9308      	str	r3, [sp, #32]
 800c76c:	2300      	movs	r3, #0
 800c76e:	1124      	asrs	r4, r4, #4
 800c770:	4650      	mov	r0, sl
 800c772:	4659      	mov	r1, fp
 800c774:	461e      	mov	r6, r3
 800c776:	2c01      	cmp	r4, #1
 800c778:	dc21      	bgt.n	800c7be <_strtod_l+0x51e>
 800c77a:	b10b      	cbz	r3, 800c780 <_strtod_l+0x4e0>
 800c77c:	4682      	mov	sl, r0
 800c77e:	468b      	mov	fp, r1
 800c780:	492c      	ldr	r1, [pc, #176]	@ (800c834 <_strtod_l+0x594>)
 800c782:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c786:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c78a:	4652      	mov	r2, sl
 800c78c:	465b      	mov	r3, fp
 800c78e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c792:	f7f3 ff59 	bl	8000648 <__aeabi_dmul>
 800c796:	4b28      	ldr	r3, [pc, #160]	@ (800c838 <_strtod_l+0x598>)
 800c798:	460a      	mov	r2, r1
 800c79a:	400b      	ands	r3, r1
 800c79c:	4927      	ldr	r1, [pc, #156]	@ (800c83c <_strtod_l+0x59c>)
 800c79e:	428b      	cmp	r3, r1
 800c7a0:	4682      	mov	sl, r0
 800c7a2:	d898      	bhi.n	800c6d6 <_strtod_l+0x436>
 800c7a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c7a8:	428b      	cmp	r3, r1
 800c7aa:	bf86      	itte	hi
 800c7ac:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c840 <_strtod_l+0x5a0>
 800c7b0:	f04f 3aff 	movhi.w	sl, #4294967295
 800c7b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	9308      	str	r3, [sp, #32]
 800c7bc:	e07a      	b.n	800c8b4 <_strtod_l+0x614>
 800c7be:	07e2      	lsls	r2, r4, #31
 800c7c0:	d505      	bpl.n	800c7ce <_strtod_l+0x52e>
 800c7c2:	9b08      	ldr	r3, [sp, #32]
 800c7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c8:	f7f3 ff3e 	bl	8000648 <__aeabi_dmul>
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	9a08      	ldr	r2, [sp, #32]
 800c7d0:	3208      	adds	r2, #8
 800c7d2:	3601      	adds	r6, #1
 800c7d4:	1064      	asrs	r4, r4, #1
 800c7d6:	9208      	str	r2, [sp, #32]
 800c7d8:	e7cd      	b.n	800c776 <_strtod_l+0x4d6>
 800c7da:	d0ed      	beq.n	800c7b8 <_strtod_l+0x518>
 800c7dc:	4264      	negs	r4, r4
 800c7de:	f014 020f 	ands.w	r2, r4, #15
 800c7e2:	d00a      	beq.n	800c7fa <_strtod_l+0x55a>
 800c7e4:	4b12      	ldr	r3, [pc, #72]	@ (800c830 <_strtod_l+0x590>)
 800c7e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7ea:	4650      	mov	r0, sl
 800c7ec:	4659      	mov	r1, fp
 800c7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f2:	f7f4 f853 	bl	800089c <__aeabi_ddiv>
 800c7f6:	4682      	mov	sl, r0
 800c7f8:	468b      	mov	fp, r1
 800c7fa:	1124      	asrs	r4, r4, #4
 800c7fc:	d0dc      	beq.n	800c7b8 <_strtod_l+0x518>
 800c7fe:	2c1f      	cmp	r4, #31
 800c800:	dd20      	ble.n	800c844 <_strtod_l+0x5a4>
 800c802:	2400      	movs	r4, #0
 800c804:	46a0      	mov	r8, r4
 800c806:	940a      	str	r4, [sp, #40]	@ 0x28
 800c808:	46a1      	mov	r9, r4
 800c80a:	9a05      	ldr	r2, [sp, #20]
 800c80c:	2322      	movs	r3, #34	@ 0x22
 800c80e:	f04f 0a00 	mov.w	sl, #0
 800c812:	f04f 0b00 	mov.w	fp, #0
 800c816:	6013      	str	r3, [r2, #0]
 800c818:	e768      	b.n	800c6ec <_strtod_l+0x44c>
 800c81a:	bf00      	nop
 800c81c:	08010e15 	.word	0x08010e15
 800c820:	08010db4 	.word	0x08010db4
 800c824:	08010e0d 	.word	0x08010e0d
 800c828:	08010e4c 	.word	0x08010e4c
 800c82c:	080111dd 	.word	0x080111dd
 800c830:	08010fc8 	.word	0x08010fc8
 800c834:	08010fa0 	.word	0x08010fa0
 800c838:	7ff00000 	.word	0x7ff00000
 800c83c:	7ca00000 	.word	0x7ca00000
 800c840:	7fefffff 	.word	0x7fefffff
 800c844:	f014 0310 	ands.w	r3, r4, #16
 800c848:	bf18      	it	ne
 800c84a:	236a      	movne	r3, #106	@ 0x6a
 800c84c:	4ea9      	ldr	r6, [pc, #676]	@ (800caf4 <_strtod_l+0x854>)
 800c84e:	9308      	str	r3, [sp, #32]
 800c850:	4650      	mov	r0, sl
 800c852:	4659      	mov	r1, fp
 800c854:	2300      	movs	r3, #0
 800c856:	07e2      	lsls	r2, r4, #31
 800c858:	d504      	bpl.n	800c864 <_strtod_l+0x5c4>
 800c85a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c85e:	f7f3 fef3 	bl	8000648 <__aeabi_dmul>
 800c862:	2301      	movs	r3, #1
 800c864:	1064      	asrs	r4, r4, #1
 800c866:	f106 0608 	add.w	r6, r6, #8
 800c86a:	d1f4      	bne.n	800c856 <_strtod_l+0x5b6>
 800c86c:	b10b      	cbz	r3, 800c872 <_strtod_l+0x5d2>
 800c86e:	4682      	mov	sl, r0
 800c870:	468b      	mov	fp, r1
 800c872:	9b08      	ldr	r3, [sp, #32]
 800c874:	b1b3      	cbz	r3, 800c8a4 <_strtod_l+0x604>
 800c876:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c87a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c87e:	2b00      	cmp	r3, #0
 800c880:	4659      	mov	r1, fp
 800c882:	dd0f      	ble.n	800c8a4 <_strtod_l+0x604>
 800c884:	2b1f      	cmp	r3, #31
 800c886:	dd55      	ble.n	800c934 <_strtod_l+0x694>
 800c888:	2b34      	cmp	r3, #52	@ 0x34
 800c88a:	bfde      	ittt	le
 800c88c:	f04f 33ff 	movle.w	r3, #4294967295
 800c890:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c894:	4093      	lslle	r3, r2
 800c896:	f04f 0a00 	mov.w	sl, #0
 800c89a:	bfcc      	ite	gt
 800c89c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c8a0:	ea03 0b01 	andle.w	fp, r3, r1
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	4650      	mov	r0, sl
 800c8aa:	4659      	mov	r1, fp
 800c8ac:	f7f4 f934 	bl	8000b18 <__aeabi_dcmpeq>
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	d1a6      	bne.n	800c802 <_strtod_l+0x562>
 800c8b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8b6:	9300      	str	r3, [sp, #0]
 800c8b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c8ba:	9805      	ldr	r0, [sp, #20]
 800c8bc:	462b      	mov	r3, r5
 800c8be:	463a      	mov	r2, r7
 800c8c0:	f002 fe86 	bl	800f5d0 <__s2b>
 800c8c4:	900a      	str	r0, [sp, #40]	@ 0x28
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	f43f af05 	beq.w	800c6d6 <_strtod_l+0x436>
 800c8cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8ce:	2a00      	cmp	r2, #0
 800c8d0:	eba9 0308 	sub.w	r3, r9, r8
 800c8d4:	bfa8      	it	ge
 800c8d6:	2300      	movge	r3, #0
 800c8d8:	9312      	str	r3, [sp, #72]	@ 0x48
 800c8da:	2400      	movs	r4, #0
 800c8dc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c8e0:	9316      	str	r3, [sp, #88]	@ 0x58
 800c8e2:	46a0      	mov	r8, r4
 800c8e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8e6:	9805      	ldr	r0, [sp, #20]
 800c8e8:	6859      	ldr	r1, [r3, #4]
 800c8ea:	f002 fdc9 	bl	800f480 <_Balloc>
 800c8ee:	4681      	mov	r9, r0
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	f43f aef4 	beq.w	800c6de <_strtod_l+0x43e>
 800c8f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8f8:	691a      	ldr	r2, [r3, #16]
 800c8fa:	3202      	adds	r2, #2
 800c8fc:	f103 010c 	add.w	r1, r3, #12
 800c900:	0092      	lsls	r2, r2, #2
 800c902:	300c      	adds	r0, #12
 800c904:	f001 fb05 	bl	800df12 <memcpy>
 800c908:	ec4b ab10 	vmov	d0, sl, fp
 800c90c:	9805      	ldr	r0, [sp, #20]
 800c90e:	aa1c      	add	r2, sp, #112	@ 0x70
 800c910:	a91b      	add	r1, sp, #108	@ 0x6c
 800c912:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c916:	f003 f997 	bl	800fc48 <__d2b>
 800c91a:	901a      	str	r0, [sp, #104]	@ 0x68
 800c91c:	2800      	cmp	r0, #0
 800c91e:	f43f aede 	beq.w	800c6de <_strtod_l+0x43e>
 800c922:	9805      	ldr	r0, [sp, #20]
 800c924:	2101      	movs	r1, #1
 800c926:	f002 fee9 	bl	800f6fc <__i2b>
 800c92a:	4680      	mov	r8, r0
 800c92c:	b948      	cbnz	r0, 800c942 <_strtod_l+0x6a2>
 800c92e:	f04f 0800 	mov.w	r8, #0
 800c932:	e6d4      	b.n	800c6de <_strtod_l+0x43e>
 800c934:	f04f 32ff 	mov.w	r2, #4294967295
 800c938:	fa02 f303 	lsl.w	r3, r2, r3
 800c93c:	ea03 0a0a 	and.w	sl, r3, sl
 800c940:	e7b0      	b.n	800c8a4 <_strtod_l+0x604>
 800c942:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c944:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c946:	2d00      	cmp	r5, #0
 800c948:	bfab      	itete	ge
 800c94a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c94c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c94e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c950:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c952:	bfac      	ite	ge
 800c954:	18ef      	addge	r7, r5, r3
 800c956:	1b5e      	sublt	r6, r3, r5
 800c958:	9b08      	ldr	r3, [sp, #32]
 800c95a:	1aed      	subs	r5, r5, r3
 800c95c:	4415      	add	r5, r2
 800c95e:	4b66      	ldr	r3, [pc, #408]	@ (800caf8 <_strtod_l+0x858>)
 800c960:	3d01      	subs	r5, #1
 800c962:	429d      	cmp	r5, r3
 800c964:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c968:	da50      	bge.n	800ca0c <_strtod_l+0x76c>
 800c96a:	1b5b      	subs	r3, r3, r5
 800c96c:	2b1f      	cmp	r3, #31
 800c96e:	eba2 0203 	sub.w	r2, r2, r3
 800c972:	f04f 0101 	mov.w	r1, #1
 800c976:	dc3d      	bgt.n	800c9f4 <_strtod_l+0x754>
 800c978:	fa01 f303 	lsl.w	r3, r1, r3
 800c97c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c97e:	2300      	movs	r3, #0
 800c980:	9310      	str	r3, [sp, #64]	@ 0x40
 800c982:	18bd      	adds	r5, r7, r2
 800c984:	9b08      	ldr	r3, [sp, #32]
 800c986:	42af      	cmp	r7, r5
 800c988:	4416      	add	r6, r2
 800c98a:	441e      	add	r6, r3
 800c98c:	463b      	mov	r3, r7
 800c98e:	bfa8      	it	ge
 800c990:	462b      	movge	r3, r5
 800c992:	42b3      	cmp	r3, r6
 800c994:	bfa8      	it	ge
 800c996:	4633      	movge	r3, r6
 800c998:	2b00      	cmp	r3, #0
 800c99a:	bfc2      	ittt	gt
 800c99c:	1aed      	subgt	r5, r5, r3
 800c99e:	1af6      	subgt	r6, r6, r3
 800c9a0:	1aff      	subgt	r7, r7, r3
 800c9a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	dd16      	ble.n	800c9d6 <_strtod_l+0x736>
 800c9a8:	4641      	mov	r1, r8
 800c9aa:	9805      	ldr	r0, [sp, #20]
 800c9ac:	461a      	mov	r2, r3
 800c9ae:	f002 ff65 	bl	800f87c <__pow5mult>
 800c9b2:	4680      	mov	r8, r0
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	d0ba      	beq.n	800c92e <_strtod_l+0x68e>
 800c9b8:	4601      	mov	r1, r0
 800c9ba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c9bc:	9805      	ldr	r0, [sp, #20]
 800c9be:	f002 feb3 	bl	800f728 <__multiply>
 800c9c2:	900e      	str	r0, [sp, #56]	@ 0x38
 800c9c4:	2800      	cmp	r0, #0
 800c9c6:	f43f ae8a 	beq.w	800c6de <_strtod_l+0x43e>
 800c9ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c9cc:	9805      	ldr	r0, [sp, #20]
 800c9ce:	f002 fd97 	bl	800f500 <_Bfree>
 800c9d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c9d4:	931a      	str	r3, [sp, #104]	@ 0x68
 800c9d6:	2d00      	cmp	r5, #0
 800c9d8:	dc1d      	bgt.n	800ca16 <_strtod_l+0x776>
 800c9da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	dd23      	ble.n	800ca28 <_strtod_l+0x788>
 800c9e0:	4649      	mov	r1, r9
 800c9e2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c9e4:	9805      	ldr	r0, [sp, #20]
 800c9e6:	f002 ff49 	bl	800f87c <__pow5mult>
 800c9ea:	4681      	mov	r9, r0
 800c9ec:	b9e0      	cbnz	r0, 800ca28 <_strtod_l+0x788>
 800c9ee:	f04f 0900 	mov.w	r9, #0
 800c9f2:	e674      	b.n	800c6de <_strtod_l+0x43e>
 800c9f4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c9f8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c9fc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ca00:	35e2      	adds	r5, #226	@ 0xe2
 800ca02:	fa01 f305 	lsl.w	r3, r1, r5
 800ca06:	9310      	str	r3, [sp, #64]	@ 0x40
 800ca08:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ca0a:	e7ba      	b.n	800c982 <_strtod_l+0x6e2>
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ca10:	2301      	movs	r3, #1
 800ca12:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ca14:	e7b5      	b.n	800c982 <_strtod_l+0x6e2>
 800ca16:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ca18:	9805      	ldr	r0, [sp, #20]
 800ca1a:	462a      	mov	r2, r5
 800ca1c:	f002 ff88 	bl	800f930 <__lshift>
 800ca20:	901a      	str	r0, [sp, #104]	@ 0x68
 800ca22:	2800      	cmp	r0, #0
 800ca24:	d1d9      	bne.n	800c9da <_strtod_l+0x73a>
 800ca26:	e65a      	b.n	800c6de <_strtod_l+0x43e>
 800ca28:	2e00      	cmp	r6, #0
 800ca2a:	dd07      	ble.n	800ca3c <_strtod_l+0x79c>
 800ca2c:	4649      	mov	r1, r9
 800ca2e:	9805      	ldr	r0, [sp, #20]
 800ca30:	4632      	mov	r2, r6
 800ca32:	f002 ff7d 	bl	800f930 <__lshift>
 800ca36:	4681      	mov	r9, r0
 800ca38:	2800      	cmp	r0, #0
 800ca3a:	d0d8      	beq.n	800c9ee <_strtod_l+0x74e>
 800ca3c:	2f00      	cmp	r7, #0
 800ca3e:	dd08      	ble.n	800ca52 <_strtod_l+0x7b2>
 800ca40:	4641      	mov	r1, r8
 800ca42:	9805      	ldr	r0, [sp, #20]
 800ca44:	463a      	mov	r2, r7
 800ca46:	f002 ff73 	bl	800f930 <__lshift>
 800ca4a:	4680      	mov	r8, r0
 800ca4c:	2800      	cmp	r0, #0
 800ca4e:	f43f ae46 	beq.w	800c6de <_strtod_l+0x43e>
 800ca52:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ca54:	9805      	ldr	r0, [sp, #20]
 800ca56:	464a      	mov	r2, r9
 800ca58:	f002 fff2 	bl	800fa40 <__mdiff>
 800ca5c:	4604      	mov	r4, r0
 800ca5e:	2800      	cmp	r0, #0
 800ca60:	f43f ae3d 	beq.w	800c6de <_strtod_l+0x43e>
 800ca64:	68c3      	ldr	r3, [r0, #12]
 800ca66:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ca68:	2300      	movs	r3, #0
 800ca6a:	60c3      	str	r3, [r0, #12]
 800ca6c:	4641      	mov	r1, r8
 800ca6e:	f002 ffcb 	bl	800fa08 <__mcmp>
 800ca72:	2800      	cmp	r0, #0
 800ca74:	da46      	bge.n	800cb04 <_strtod_l+0x864>
 800ca76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca78:	ea53 030a 	orrs.w	r3, r3, sl
 800ca7c:	d16c      	bne.n	800cb58 <_strtod_l+0x8b8>
 800ca7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d168      	bne.n	800cb58 <_strtod_l+0x8b8>
 800ca86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ca8a:	0d1b      	lsrs	r3, r3, #20
 800ca8c:	051b      	lsls	r3, r3, #20
 800ca8e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ca92:	d961      	bls.n	800cb58 <_strtod_l+0x8b8>
 800ca94:	6963      	ldr	r3, [r4, #20]
 800ca96:	b913      	cbnz	r3, 800ca9e <_strtod_l+0x7fe>
 800ca98:	6923      	ldr	r3, [r4, #16]
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	dd5c      	ble.n	800cb58 <_strtod_l+0x8b8>
 800ca9e:	4621      	mov	r1, r4
 800caa0:	2201      	movs	r2, #1
 800caa2:	9805      	ldr	r0, [sp, #20]
 800caa4:	f002 ff44 	bl	800f930 <__lshift>
 800caa8:	4641      	mov	r1, r8
 800caaa:	4604      	mov	r4, r0
 800caac:	f002 ffac 	bl	800fa08 <__mcmp>
 800cab0:	2800      	cmp	r0, #0
 800cab2:	dd51      	ble.n	800cb58 <_strtod_l+0x8b8>
 800cab4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cab8:	9a08      	ldr	r2, [sp, #32]
 800caba:	0d1b      	lsrs	r3, r3, #20
 800cabc:	051b      	lsls	r3, r3, #20
 800cabe:	2a00      	cmp	r2, #0
 800cac0:	d06b      	beq.n	800cb9a <_strtod_l+0x8fa>
 800cac2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cac6:	d868      	bhi.n	800cb9a <_strtod_l+0x8fa>
 800cac8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cacc:	f67f ae9d 	bls.w	800c80a <_strtod_l+0x56a>
 800cad0:	4b0a      	ldr	r3, [pc, #40]	@ (800cafc <_strtod_l+0x85c>)
 800cad2:	4650      	mov	r0, sl
 800cad4:	4659      	mov	r1, fp
 800cad6:	2200      	movs	r2, #0
 800cad8:	f7f3 fdb6 	bl	8000648 <__aeabi_dmul>
 800cadc:	4b08      	ldr	r3, [pc, #32]	@ (800cb00 <_strtod_l+0x860>)
 800cade:	400b      	ands	r3, r1
 800cae0:	4682      	mov	sl, r0
 800cae2:	468b      	mov	fp, r1
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	f47f ae05 	bne.w	800c6f4 <_strtod_l+0x454>
 800caea:	9a05      	ldr	r2, [sp, #20]
 800caec:	2322      	movs	r3, #34	@ 0x22
 800caee:	6013      	str	r3, [r2, #0]
 800caf0:	e600      	b.n	800c6f4 <_strtod_l+0x454>
 800caf2:	bf00      	nop
 800caf4:	08010de0 	.word	0x08010de0
 800caf8:	fffffc02 	.word	0xfffffc02
 800cafc:	39500000 	.word	0x39500000
 800cb00:	7ff00000 	.word	0x7ff00000
 800cb04:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cb08:	d165      	bne.n	800cbd6 <_strtod_l+0x936>
 800cb0a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cb0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cb10:	b35a      	cbz	r2, 800cb6a <_strtod_l+0x8ca>
 800cb12:	4a9f      	ldr	r2, [pc, #636]	@ (800cd90 <_strtod_l+0xaf0>)
 800cb14:	4293      	cmp	r3, r2
 800cb16:	d12b      	bne.n	800cb70 <_strtod_l+0x8d0>
 800cb18:	9b08      	ldr	r3, [sp, #32]
 800cb1a:	4651      	mov	r1, sl
 800cb1c:	b303      	cbz	r3, 800cb60 <_strtod_l+0x8c0>
 800cb1e:	4b9d      	ldr	r3, [pc, #628]	@ (800cd94 <_strtod_l+0xaf4>)
 800cb20:	465a      	mov	r2, fp
 800cb22:	4013      	ands	r3, r2
 800cb24:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cb28:	f04f 32ff 	mov.w	r2, #4294967295
 800cb2c:	d81b      	bhi.n	800cb66 <_strtod_l+0x8c6>
 800cb2e:	0d1b      	lsrs	r3, r3, #20
 800cb30:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cb34:	fa02 f303 	lsl.w	r3, r2, r3
 800cb38:	4299      	cmp	r1, r3
 800cb3a:	d119      	bne.n	800cb70 <_strtod_l+0x8d0>
 800cb3c:	4b96      	ldr	r3, [pc, #600]	@ (800cd98 <_strtod_l+0xaf8>)
 800cb3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d102      	bne.n	800cb4a <_strtod_l+0x8aa>
 800cb44:	3101      	adds	r1, #1
 800cb46:	f43f adca 	beq.w	800c6de <_strtod_l+0x43e>
 800cb4a:	4b92      	ldr	r3, [pc, #584]	@ (800cd94 <_strtod_l+0xaf4>)
 800cb4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb4e:	401a      	ands	r2, r3
 800cb50:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cb54:	f04f 0a00 	mov.w	sl, #0
 800cb58:	9b08      	ldr	r3, [sp, #32]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d1b8      	bne.n	800cad0 <_strtod_l+0x830>
 800cb5e:	e5c9      	b.n	800c6f4 <_strtod_l+0x454>
 800cb60:	f04f 33ff 	mov.w	r3, #4294967295
 800cb64:	e7e8      	b.n	800cb38 <_strtod_l+0x898>
 800cb66:	4613      	mov	r3, r2
 800cb68:	e7e6      	b.n	800cb38 <_strtod_l+0x898>
 800cb6a:	ea53 030a 	orrs.w	r3, r3, sl
 800cb6e:	d0a1      	beq.n	800cab4 <_strtod_l+0x814>
 800cb70:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cb72:	b1db      	cbz	r3, 800cbac <_strtod_l+0x90c>
 800cb74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb76:	4213      	tst	r3, r2
 800cb78:	d0ee      	beq.n	800cb58 <_strtod_l+0x8b8>
 800cb7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb7c:	9a08      	ldr	r2, [sp, #32]
 800cb7e:	4650      	mov	r0, sl
 800cb80:	4659      	mov	r1, fp
 800cb82:	b1bb      	cbz	r3, 800cbb4 <_strtod_l+0x914>
 800cb84:	f7ff fb6d 	bl	800c262 <sulp>
 800cb88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb8c:	ec53 2b10 	vmov	r2, r3, d0
 800cb90:	f7f3 fba4 	bl	80002dc <__adddf3>
 800cb94:	4682      	mov	sl, r0
 800cb96:	468b      	mov	fp, r1
 800cb98:	e7de      	b.n	800cb58 <_strtod_l+0x8b8>
 800cb9a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cb9e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cba2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cba6:	f04f 3aff 	mov.w	sl, #4294967295
 800cbaa:	e7d5      	b.n	800cb58 <_strtod_l+0x8b8>
 800cbac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cbae:	ea13 0f0a 	tst.w	r3, sl
 800cbb2:	e7e1      	b.n	800cb78 <_strtod_l+0x8d8>
 800cbb4:	f7ff fb55 	bl	800c262 <sulp>
 800cbb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cbbc:	ec53 2b10 	vmov	r2, r3, d0
 800cbc0:	f7f3 fb8a 	bl	80002d8 <__aeabi_dsub>
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	4682      	mov	sl, r0
 800cbca:	468b      	mov	fp, r1
 800cbcc:	f7f3 ffa4 	bl	8000b18 <__aeabi_dcmpeq>
 800cbd0:	2800      	cmp	r0, #0
 800cbd2:	d0c1      	beq.n	800cb58 <_strtod_l+0x8b8>
 800cbd4:	e619      	b.n	800c80a <_strtod_l+0x56a>
 800cbd6:	4641      	mov	r1, r8
 800cbd8:	4620      	mov	r0, r4
 800cbda:	f003 f88d 	bl	800fcf8 <__ratio>
 800cbde:	ec57 6b10 	vmov	r6, r7, d0
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cbe8:	4630      	mov	r0, r6
 800cbea:	4639      	mov	r1, r7
 800cbec:	f7f3 ffa8 	bl	8000b40 <__aeabi_dcmple>
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	d06f      	beq.n	800ccd4 <_strtod_l+0xa34>
 800cbf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d17a      	bne.n	800ccf0 <_strtod_l+0xa50>
 800cbfa:	f1ba 0f00 	cmp.w	sl, #0
 800cbfe:	d158      	bne.n	800ccb2 <_strtod_l+0xa12>
 800cc00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d15a      	bne.n	800ccc0 <_strtod_l+0xa20>
 800cc0a:	4b64      	ldr	r3, [pc, #400]	@ (800cd9c <_strtod_l+0xafc>)
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	4630      	mov	r0, r6
 800cc10:	4639      	mov	r1, r7
 800cc12:	f7f3 ff8b 	bl	8000b2c <__aeabi_dcmplt>
 800cc16:	2800      	cmp	r0, #0
 800cc18:	d159      	bne.n	800ccce <_strtod_l+0xa2e>
 800cc1a:	4630      	mov	r0, r6
 800cc1c:	4639      	mov	r1, r7
 800cc1e:	4b60      	ldr	r3, [pc, #384]	@ (800cda0 <_strtod_l+0xb00>)
 800cc20:	2200      	movs	r2, #0
 800cc22:	f7f3 fd11 	bl	8000648 <__aeabi_dmul>
 800cc26:	4606      	mov	r6, r0
 800cc28:	460f      	mov	r7, r1
 800cc2a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800cc2e:	9606      	str	r6, [sp, #24]
 800cc30:	9307      	str	r3, [sp, #28]
 800cc32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cc36:	4d57      	ldr	r5, [pc, #348]	@ (800cd94 <_strtod_l+0xaf4>)
 800cc38:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cc3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc3e:	401d      	ands	r5, r3
 800cc40:	4b58      	ldr	r3, [pc, #352]	@ (800cda4 <_strtod_l+0xb04>)
 800cc42:	429d      	cmp	r5, r3
 800cc44:	f040 80b2 	bne.w	800cdac <_strtod_l+0xb0c>
 800cc48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc4a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cc4e:	ec4b ab10 	vmov	d0, sl, fp
 800cc52:	f002 ff89 	bl	800fb68 <__ulp>
 800cc56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cc5a:	ec51 0b10 	vmov	r0, r1, d0
 800cc5e:	f7f3 fcf3 	bl	8000648 <__aeabi_dmul>
 800cc62:	4652      	mov	r2, sl
 800cc64:	465b      	mov	r3, fp
 800cc66:	f7f3 fb39 	bl	80002dc <__adddf3>
 800cc6a:	460b      	mov	r3, r1
 800cc6c:	4949      	ldr	r1, [pc, #292]	@ (800cd94 <_strtod_l+0xaf4>)
 800cc6e:	4a4e      	ldr	r2, [pc, #312]	@ (800cda8 <_strtod_l+0xb08>)
 800cc70:	4019      	ands	r1, r3
 800cc72:	4291      	cmp	r1, r2
 800cc74:	4682      	mov	sl, r0
 800cc76:	d942      	bls.n	800ccfe <_strtod_l+0xa5e>
 800cc78:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cc7a:	4b47      	ldr	r3, [pc, #284]	@ (800cd98 <_strtod_l+0xaf8>)
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d103      	bne.n	800cc88 <_strtod_l+0x9e8>
 800cc80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cc82:	3301      	adds	r3, #1
 800cc84:	f43f ad2b 	beq.w	800c6de <_strtod_l+0x43e>
 800cc88:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cd98 <_strtod_l+0xaf8>
 800cc8c:	f04f 3aff 	mov.w	sl, #4294967295
 800cc90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc92:	9805      	ldr	r0, [sp, #20]
 800cc94:	f002 fc34 	bl	800f500 <_Bfree>
 800cc98:	9805      	ldr	r0, [sp, #20]
 800cc9a:	4649      	mov	r1, r9
 800cc9c:	f002 fc30 	bl	800f500 <_Bfree>
 800cca0:	9805      	ldr	r0, [sp, #20]
 800cca2:	4641      	mov	r1, r8
 800cca4:	f002 fc2c 	bl	800f500 <_Bfree>
 800cca8:	9805      	ldr	r0, [sp, #20]
 800ccaa:	4621      	mov	r1, r4
 800ccac:	f002 fc28 	bl	800f500 <_Bfree>
 800ccb0:	e618      	b.n	800c8e4 <_strtod_l+0x644>
 800ccb2:	f1ba 0f01 	cmp.w	sl, #1
 800ccb6:	d103      	bne.n	800ccc0 <_strtod_l+0xa20>
 800ccb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	f43f ada5 	beq.w	800c80a <_strtod_l+0x56a>
 800ccc0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800cd70 <_strtod_l+0xad0>
 800ccc4:	4f35      	ldr	r7, [pc, #212]	@ (800cd9c <_strtod_l+0xafc>)
 800ccc6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ccca:	2600      	movs	r6, #0
 800cccc:	e7b1      	b.n	800cc32 <_strtod_l+0x992>
 800ccce:	4f34      	ldr	r7, [pc, #208]	@ (800cda0 <_strtod_l+0xb00>)
 800ccd0:	2600      	movs	r6, #0
 800ccd2:	e7aa      	b.n	800cc2a <_strtod_l+0x98a>
 800ccd4:	4b32      	ldr	r3, [pc, #200]	@ (800cda0 <_strtod_l+0xb00>)
 800ccd6:	4630      	mov	r0, r6
 800ccd8:	4639      	mov	r1, r7
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f7f3 fcb4 	bl	8000648 <__aeabi_dmul>
 800cce0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cce2:	4606      	mov	r6, r0
 800cce4:	460f      	mov	r7, r1
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d09f      	beq.n	800cc2a <_strtod_l+0x98a>
 800ccea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ccee:	e7a0      	b.n	800cc32 <_strtod_l+0x992>
 800ccf0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800cd78 <_strtod_l+0xad8>
 800ccf4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ccf8:	ec57 6b17 	vmov	r6, r7, d7
 800ccfc:	e799      	b.n	800cc32 <_strtod_l+0x992>
 800ccfe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cd02:	9b08      	ldr	r3, [sp, #32]
 800cd04:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d1c1      	bne.n	800cc90 <_strtod_l+0x9f0>
 800cd0c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cd10:	0d1b      	lsrs	r3, r3, #20
 800cd12:	051b      	lsls	r3, r3, #20
 800cd14:	429d      	cmp	r5, r3
 800cd16:	d1bb      	bne.n	800cc90 <_strtod_l+0x9f0>
 800cd18:	4630      	mov	r0, r6
 800cd1a:	4639      	mov	r1, r7
 800cd1c:	f7f3 fff4 	bl	8000d08 <__aeabi_d2lz>
 800cd20:	f7f3 fc64 	bl	80005ec <__aeabi_l2d>
 800cd24:	4602      	mov	r2, r0
 800cd26:	460b      	mov	r3, r1
 800cd28:	4630      	mov	r0, r6
 800cd2a:	4639      	mov	r1, r7
 800cd2c:	f7f3 fad4 	bl	80002d8 <__aeabi_dsub>
 800cd30:	460b      	mov	r3, r1
 800cd32:	4602      	mov	r2, r0
 800cd34:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cd38:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cd3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd3e:	ea46 060a 	orr.w	r6, r6, sl
 800cd42:	431e      	orrs	r6, r3
 800cd44:	d06f      	beq.n	800ce26 <_strtod_l+0xb86>
 800cd46:	a30e      	add	r3, pc, #56	@ (adr r3, 800cd80 <_strtod_l+0xae0>)
 800cd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4c:	f7f3 feee 	bl	8000b2c <__aeabi_dcmplt>
 800cd50:	2800      	cmp	r0, #0
 800cd52:	f47f accf 	bne.w	800c6f4 <_strtod_l+0x454>
 800cd56:	a30c      	add	r3, pc, #48	@ (adr r3, 800cd88 <_strtod_l+0xae8>)
 800cd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd60:	f7f3 ff02 	bl	8000b68 <__aeabi_dcmpgt>
 800cd64:	2800      	cmp	r0, #0
 800cd66:	d093      	beq.n	800cc90 <_strtod_l+0x9f0>
 800cd68:	e4c4      	b.n	800c6f4 <_strtod_l+0x454>
 800cd6a:	bf00      	nop
 800cd6c:	f3af 8000 	nop.w
 800cd70:	00000000 	.word	0x00000000
 800cd74:	bff00000 	.word	0xbff00000
 800cd78:	00000000 	.word	0x00000000
 800cd7c:	3ff00000 	.word	0x3ff00000
 800cd80:	94a03595 	.word	0x94a03595
 800cd84:	3fdfffff 	.word	0x3fdfffff
 800cd88:	35afe535 	.word	0x35afe535
 800cd8c:	3fe00000 	.word	0x3fe00000
 800cd90:	000fffff 	.word	0x000fffff
 800cd94:	7ff00000 	.word	0x7ff00000
 800cd98:	7fefffff 	.word	0x7fefffff
 800cd9c:	3ff00000 	.word	0x3ff00000
 800cda0:	3fe00000 	.word	0x3fe00000
 800cda4:	7fe00000 	.word	0x7fe00000
 800cda8:	7c9fffff 	.word	0x7c9fffff
 800cdac:	9b08      	ldr	r3, [sp, #32]
 800cdae:	b323      	cbz	r3, 800cdfa <_strtod_l+0xb5a>
 800cdb0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cdb4:	d821      	bhi.n	800cdfa <_strtod_l+0xb5a>
 800cdb6:	a328      	add	r3, pc, #160	@ (adr r3, 800ce58 <_strtod_l+0xbb8>)
 800cdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdbc:	4630      	mov	r0, r6
 800cdbe:	4639      	mov	r1, r7
 800cdc0:	f7f3 febe 	bl	8000b40 <__aeabi_dcmple>
 800cdc4:	b1a0      	cbz	r0, 800cdf0 <_strtod_l+0xb50>
 800cdc6:	4639      	mov	r1, r7
 800cdc8:	4630      	mov	r0, r6
 800cdca:	f7f3 ff15 	bl	8000bf8 <__aeabi_d2uiz>
 800cdce:	2801      	cmp	r0, #1
 800cdd0:	bf38      	it	cc
 800cdd2:	2001      	movcc	r0, #1
 800cdd4:	f7f3 fbbe 	bl	8000554 <__aeabi_ui2d>
 800cdd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdda:	4606      	mov	r6, r0
 800cddc:	460f      	mov	r7, r1
 800cdde:	b9fb      	cbnz	r3, 800ce20 <_strtod_l+0xb80>
 800cde0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cde4:	9014      	str	r0, [sp, #80]	@ 0x50
 800cde6:	9315      	str	r3, [sp, #84]	@ 0x54
 800cde8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cdec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cdf0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cdf2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cdf6:	1b5b      	subs	r3, r3, r5
 800cdf8:	9311      	str	r3, [sp, #68]	@ 0x44
 800cdfa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cdfe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ce02:	f002 feb1 	bl	800fb68 <__ulp>
 800ce06:	4650      	mov	r0, sl
 800ce08:	ec53 2b10 	vmov	r2, r3, d0
 800ce0c:	4659      	mov	r1, fp
 800ce0e:	f7f3 fc1b 	bl	8000648 <__aeabi_dmul>
 800ce12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ce16:	f7f3 fa61 	bl	80002dc <__adddf3>
 800ce1a:	4682      	mov	sl, r0
 800ce1c:	468b      	mov	fp, r1
 800ce1e:	e770      	b.n	800cd02 <_strtod_l+0xa62>
 800ce20:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ce24:	e7e0      	b.n	800cde8 <_strtod_l+0xb48>
 800ce26:	a30e      	add	r3, pc, #56	@ (adr r3, 800ce60 <_strtod_l+0xbc0>)
 800ce28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce2c:	f7f3 fe7e 	bl	8000b2c <__aeabi_dcmplt>
 800ce30:	e798      	b.n	800cd64 <_strtod_l+0xac4>
 800ce32:	2300      	movs	r3, #0
 800ce34:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce36:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ce38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce3a:	6013      	str	r3, [r2, #0]
 800ce3c:	f7ff ba6d 	b.w	800c31a <_strtod_l+0x7a>
 800ce40:	2a65      	cmp	r2, #101	@ 0x65
 800ce42:	f43f ab66 	beq.w	800c512 <_strtod_l+0x272>
 800ce46:	2a45      	cmp	r2, #69	@ 0x45
 800ce48:	f43f ab63 	beq.w	800c512 <_strtod_l+0x272>
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	f7ff bb9e 	b.w	800c58e <_strtod_l+0x2ee>
 800ce52:	bf00      	nop
 800ce54:	f3af 8000 	nop.w
 800ce58:	ffc00000 	.word	0xffc00000
 800ce5c:	41dfffff 	.word	0x41dfffff
 800ce60:	94a03595 	.word	0x94a03595
 800ce64:	3fcfffff 	.word	0x3fcfffff

0800ce68 <_strtod_r>:
 800ce68:	4b01      	ldr	r3, [pc, #4]	@ (800ce70 <_strtod_r+0x8>)
 800ce6a:	f7ff ba19 	b.w	800c2a0 <_strtod_l>
 800ce6e:	bf00      	nop
 800ce70:	2000009c 	.word	0x2000009c

0800ce74 <strtod>:
 800ce74:	460a      	mov	r2, r1
 800ce76:	4601      	mov	r1, r0
 800ce78:	4802      	ldr	r0, [pc, #8]	@ (800ce84 <strtod+0x10>)
 800ce7a:	4b03      	ldr	r3, [pc, #12]	@ (800ce88 <strtod+0x14>)
 800ce7c:	6800      	ldr	r0, [r0, #0]
 800ce7e:	f7ff ba0f 	b.w	800c2a0 <_strtod_l>
 800ce82:	bf00      	nop
 800ce84:	20000208 	.word	0x20000208
 800ce88:	2000009c 	.word	0x2000009c

0800ce8c <__cvt>:
 800ce8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce90:	ec57 6b10 	vmov	r6, r7, d0
 800ce94:	2f00      	cmp	r7, #0
 800ce96:	460c      	mov	r4, r1
 800ce98:	4619      	mov	r1, r3
 800ce9a:	463b      	mov	r3, r7
 800ce9c:	bfbb      	ittet	lt
 800ce9e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cea2:	461f      	movlt	r7, r3
 800cea4:	2300      	movge	r3, #0
 800cea6:	232d      	movlt	r3, #45	@ 0x2d
 800cea8:	700b      	strb	r3, [r1, #0]
 800ceaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ceac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ceb0:	4691      	mov	r9, r2
 800ceb2:	f023 0820 	bic.w	r8, r3, #32
 800ceb6:	bfbc      	itt	lt
 800ceb8:	4632      	movlt	r2, r6
 800ceba:	4616      	movlt	r6, r2
 800cebc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cec0:	d005      	beq.n	800cece <__cvt+0x42>
 800cec2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cec6:	d100      	bne.n	800ceca <__cvt+0x3e>
 800cec8:	3401      	adds	r4, #1
 800ceca:	2102      	movs	r1, #2
 800cecc:	e000      	b.n	800ced0 <__cvt+0x44>
 800cece:	2103      	movs	r1, #3
 800ced0:	ab03      	add	r3, sp, #12
 800ced2:	9301      	str	r3, [sp, #4]
 800ced4:	ab02      	add	r3, sp, #8
 800ced6:	9300      	str	r3, [sp, #0]
 800ced8:	ec47 6b10 	vmov	d0, r6, r7
 800cedc:	4653      	mov	r3, sl
 800cede:	4622      	mov	r2, r4
 800cee0:	f001 f8be 	bl	800e060 <_dtoa_r>
 800cee4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cee8:	4605      	mov	r5, r0
 800ceea:	d119      	bne.n	800cf20 <__cvt+0x94>
 800ceec:	f019 0f01 	tst.w	r9, #1
 800cef0:	d00e      	beq.n	800cf10 <__cvt+0x84>
 800cef2:	eb00 0904 	add.w	r9, r0, r4
 800cef6:	2200      	movs	r2, #0
 800cef8:	2300      	movs	r3, #0
 800cefa:	4630      	mov	r0, r6
 800cefc:	4639      	mov	r1, r7
 800cefe:	f7f3 fe0b 	bl	8000b18 <__aeabi_dcmpeq>
 800cf02:	b108      	cbz	r0, 800cf08 <__cvt+0x7c>
 800cf04:	f8cd 900c 	str.w	r9, [sp, #12]
 800cf08:	2230      	movs	r2, #48	@ 0x30
 800cf0a:	9b03      	ldr	r3, [sp, #12]
 800cf0c:	454b      	cmp	r3, r9
 800cf0e:	d31e      	bcc.n	800cf4e <__cvt+0xc2>
 800cf10:	9b03      	ldr	r3, [sp, #12]
 800cf12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf14:	1b5b      	subs	r3, r3, r5
 800cf16:	4628      	mov	r0, r5
 800cf18:	6013      	str	r3, [r2, #0]
 800cf1a:	b004      	add	sp, #16
 800cf1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cf24:	eb00 0904 	add.w	r9, r0, r4
 800cf28:	d1e5      	bne.n	800cef6 <__cvt+0x6a>
 800cf2a:	7803      	ldrb	r3, [r0, #0]
 800cf2c:	2b30      	cmp	r3, #48	@ 0x30
 800cf2e:	d10a      	bne.n	800cf46 <__cvt+0xba>
 800cf30:	2200      	movs	r2, #0
 800cf32:	2300      	movs	r3, #0
 800cf34:	4630      	mov	r0, r6
 800cf36:	4639      	mov	r1, r7
 800cf38:	f7f3 fdee 	bl	8000b18 <__aeabi_dcmpeq>
 800cf3c:	b918      	cbnz	r0, 800cf46 <__cvt+0xba>
 800cf3e:	f1c4 0401 	rsb	r4, r4, #1
 800cf42:	f8ca 4000 	str.w	r4, [sl]
 800cf46:	f8da 3000 	ldr.w	r3, [sl]
 800cf4a:	4499      	add	r9, r3
 800cf4c:	e7d3      	b.n	800cef6 <__cvt+0x6a>
 800cf4e:	1c59      	adds	r1, r3, #1
 800cf50:	9103      	str	r1, [sp, #12]
 800cf52:	701a      	strb	r2, [r3, #0]
 800cf54:	e7d9      	b.n	800cf0a <__cvt+0x7e>

0800cf56 <__exponent>:
 800cf56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf58:	2900      	cmp	r1, #0
 800cf5a:	bfba      	itte	lt
 800cf5c:	4249      	neglt	r1, r1
 800cf5e:	232d      	movlt	r3, #45	@ 0x2d
 800cf60:	232b      	movge	r3, #43	@ 0x2b
 800cf62:	2909      	cmp	r1, #9
 800cf64:	7002      	strb	r2, [r0, #0]
 800cf66:	7043      	strb	r3, [r0, #1]
 800cf68:	dd29      	ble.n	800cfbe <__exponent+0x68>
 800cf6a:	f10d 0307 	add.w	r3, sp, #7
 800cf6e:	461d      	mov	r5, r3
 800cf70:	270a      	movs	r7, #10
 800cf72:	461a      	mov	r2, r3
 800cf74:	fbb1 f6f7 	udiv	r6, r1, r7
 800cf78:	fb07 1416 	mls	r4, r7, r6, r1
 800cf7c:	3430      	adds	r4, #48	@ 0x30
 800cf7e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cf82:	460c      	mov	r4, r1
 800cf84:	2c63      	cmp	r4, #99	@ 0x63
 800cf86:	f103 33ff 	add.w	r3, r3, #4294967295
 800cf8a:	4631      	mov	r1, r6
 800cf8c:	dcf1      	bgt.n	800cf72 <__exponent+0x1c>
 800cf8e:	3130      	adds	r1, #48	@ 0x30
 800cf90:	1e94      	subs	r4, r2, #2
 800cf92:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cf96:	1c41      	adds	r1, r0, #1
 800cf98:	4623      	mov	r3, r4
 800cf9a:	42ab      	cmp	r3, r5
 800cf9c:	d30a      	bcc.n	800cfb4 <__exponent+0x5e>
 800cf9e:	f10d 0309 	add.w	r3, sp, #9
 800cfa2:	1a9b      	subs	r3, r3, r2
 800cfa4:	42ac      	cmp	r4, r5
 800cfa6:	bf88      	it	hi
 800cfa8:	2300      	movhi	r3, #0
 800cfaa:	3302      	adds	r3, #2
 800cfac:	4403      	add	r3, r0
 800cfae:	1a18      	subs	r0, r3, r0
 800cfb0:	b003      	add	sp, #12
 800cfb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfb4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cfb8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cfbc:	e7ed      	b.n	800cf9a <__exponent+0x44>
 800cfbe:	2330      	movs	r3, #48	@ 0x30
 800cfc0:	3130      	adds	r1, #48	@ 0x30
 800cfc2:	7083      	strb	r3, [r0, #2]
 800cfc4:	70c1      	strb	r1, [r0, #3]
 800cfc6:	1d03      	adds	r3, r0, #4
 800cfc8:	e7f1      	b.n	800cfae <__exponent+0x58>
	...

0800cfcc <_printf_float>:
 800cfcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd0:	b08d      	sub	sp, #52	@ 0x34
 800cfd2:	460c      	mov	r4, r1
 800cfd4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cfd8:	4616      	mov	r6, r2
 800cfda:	461f      	mov	r7, r3
 800cfdc:	4605      	mov	r5, r0
 800cfde:	f000 ff21 	bl	800de24 <_localeconv_r>
 800cfe2:	6803      	ldr	r3, [r0, #0]
 800cfe4:	9304      	str	r3, [sp, #16]
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7f3 f96a 	bl	80002c0 <strlen>
 800cfec:	2300      	movs	r3, #0
 800cfee:	930a      	str	r3, [sp, #40]	@ 0x28
 800cff0:	f8d8 3000 	ldr.w	r3, [r8]
 800cff4:	9005      	str	r0, [sp, #20]
 800cff6:	3307      	adds	r3, #7
 800cff8:	f023 0307 	bic.w	r3, r3, #7
 800cffc:	f103 0208 	add.w	r2, r3, #8
 800d000:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d004:	f8d4 b000 	ldr.w	fp, [r4]
 800d008:	f8c8 2000 	str.w	r2, [r8]
 800d00c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d010:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d014:	9307      	str	r3, [sp, #28]
 800d016:	f8cd 8018 	str.w	r8, [sp, #24]
 800d01a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d01e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d022:	4b9c      	ldr	r3, [pc, #624]	@ (800d294 <_printf_float+0x2c8>)
 800d024:	f04f 32ff 	mov.w	r2, #4294967295
 800d028:	f7f3 fda8 	bl	8000b7c <__aeabi_dcmpun>
 800d02c:	bb70      	cbnz	r0, 800d08c <_printf_float+0xc0>
 800d02e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d032:	4b98      	ldr	r3, [pc, #608]	@ (800d294 <_printf_float+0x2c8>)
 800d034:	f04f 32ff 	mov.w	r2, #4294967295
 800d038:	f7f3 fd82 	bl	8000b40 <__aeabi_dcmple>
 800d03c:	bb30      	cbnz	r0, 800d08c <_printf_float+0xc0>
 800d03e:	2200      	movs	r2, #0
 800d040:	2300      	movs	r3, #0
 800d042:	4640      	mov	r0, r8
 800d044:	4649      	mov	r1, r9
 800d046:	f7f3 fd71 	bl	8000b2c <__aeabi_dcmplt>
 800d04a:	b110      	cbz	r0, 800d052 <_printf_float+0x86>
 800d04c:	232d      	movs	r3, #45	@ 0x2d
 800d04e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d052:	4a91      	ldr	r2, [pc, #580]	@ (800d298 <_printf_float+0x2cc>)
 800d054:	4b91      	ldr	r3, [pc, #580]	@ (800d29c <_printf_float+0x2d0>)
 800d056:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d05a:	bf94      	ite	ls
 800d05c:	4690      	movls	r8, r2
 800d05e:	4698      	movhi	r8, r3
 800d060:	2303      	movs	r3, #3
 800d062:	6123      	str	r3, [r4, #16]
 800d064:	f02b 0304 	bic.w	r3, fp, #4
 800d068:	6023      	str	r3, [r4, #0]
 800d06a:	f04f 0900 	mov.w	r9, #0
 800d06e:	9700      	str	r7, [sp, #0]
 800d070:	4633      	mov	r3, r6
 800d072:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d074:	4621      	mov	r1, r4
 800d076:	4628      	mov	r0, r5
 800d078:	f000 f9d2 	bl	800d420 <_printf_common>
 800d07c:	3001      	adds	r0, #1
 800d07e:	f040 808d 	bne.w	800d19c <_printf_float+0x1d0>
 800d082:	f04f 30ff 	mov.w	r0, #4294967295
 800d086:	b00d      	add	sp, #52	@ 0x34
 800d088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d08c:	4642      	mov	r2, r8
 800d08e:	464b      	mov	r3, r9
 800d090:	4640      	mov	r0, r8
 800d092:	4649      	mov	r1, r9
 800d094:	f7f3 fd72 	bl	8000b7c <__aeabi_dcmpun>
 800d098:	b140      	cbz	r0, 800d0ac <_printf_float+0xe0>
 800d09a:	464b      	mov	r3, r9
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	bfbc      	itt	lt
 800d0a0:	232d      	movlt	r3, #45	@ 0x2d
 800d0a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d0a6:	4a7e      	ldr	r2, [pc, #504]	@ (800d2a0 <_printf_float+0x2d4>)
 800d0a8:	4b7e      	ldr	r3, [pc, #504]	@ (800d2a4 <_printf_float+0x2d8>)
 800d0aa:	e7d4      	b.n	800d056 <_printf_float+0x8a>
 800d0ac:	6863      	ldr	r3, [r4, #4]
 800d0ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d0b2:	9206      	str	r2, [sp, #24]
 800d0b4:	1c5a      	adds	r2, r3, #1
 800d0b6:	d13b      	bne.n	800d130 <_printf_float+0x164>
 800d0b8:	2306      	movs	r3, #6
 800d0ba:	6063      	str	r3, [r4, #4]
 800d0bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	6022      	str	r2, [r4, #0]
 800d0c4:	9303      	str	r3, [sp, #12]
 800d0c6:	ab0a      	add	r3, sp, #40	@ 0x28
 800d0c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d0cc:	ab09      	add	r3, sp, #36	@ 0x24
 800d0ce:	9300      	str	r3, [sp, #0]
 800d0d0:	6861      	ldr	r1, [r4, #4]
 800d0d2:	ec49 8b10 	vmov	d0, r8, r9
 800d0d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d0da:	4628      	mov	r0, r5
 800d0dc:	f7ff fed6 	bl	800ce8c <__cvt>
 800d0e0:	9b06      	ldr	r3, [sp, #24]
 800d0e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d0e4:	2b47      	cmp	r3, #71	@ 0x47
 800d0e6:	4680      	mov	r8, r0
 800d0e8:	d129      	bne.n	800d13e <_printf_float+0x172>
 800d0ea:	1cc8      	adds	r0, r1, #3
 800d0ec:	db02      	blt.n	800d0f4 <_printf_float+0x128>
 800d0ee:	6863      	ldr	r3, [r4, #4]
 800d0f0:	4299      	cmp	r1, r3
 800d0f2:	dd41      	ble.n	800d178 <_printf_float+0x1ac>
 800d0f4:	f1aa 0a02 	sub.w	sl, sl, #2
 800d0f8:	fa5f fa8a 	uxtb.w	sl, sl
 800d0fc:	3901      	subs	r1, #1
 800d0fe:	4652      	mov	r2, sl
 800d100:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d104:	9109      	str	r1, [sp, #36]	@ 0x24
 800d106:	f7ff ff26 	bl	800cf56 <__exponent>
 800d10a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d10c:	1813      	adds	r3, r2, r0
 800d10e:	2a01      	cmp	r2, #1
 800d110:	4681      	mov	r9, r0
 800d112:	6123      	str	r3, [r4, #16]
 800d114:	dc02      	bgt.n	800d11c <_printf_float+0x150>
 800d116:	6822      	ldr	r2, [r4, #0]
 800d118:	07d2      	lsls	r2, r2, #31
 800d11a:	d501      	bpl.n	800d120 <_printf_float+0x154>
 800d11c:	3301      	adds	r3, #1
 800d11e:	6123      	str	r3, [r4, #16]
 800d120:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d124:	2b00      	cmp	r3, #0
 800d126:	d0a2      	beq.n	800d06e <_printf_float+0xa2>
 800d128:	232d      	movs	r3, #45	@ 0x2d
 800d12a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d12e:	e79e      	b.n	800d06e <_printf_float+0xa2>
 800d130:	9a06      	ldr	r2, [sp, #24]
 800d132:	2a47      	cmp	r2, #71	@ 0x47
 800d134:	d1c2      	bne.n	800d0bc <_printf_float+0xf0>
 800d136:	2b00      	cmp	r3, #0
 800d138:	d1c0      	bne.n	800d0bc <_printf_float+0xf0>
 800d13a:	2301      	movs	r3, #1
 800d13c:	e7bd      	b.n	800d0ba <_printf_float+0xee>
 800d13e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d142:	d9db      	bls.n	800d0fc <_printf_float+0x130>
 800d144:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d148:	d118      	bne.n	800d17c <_printf_float+0x1b0>
 800d14a:	2900      	cmp	r1, #0
 800d14c:	6863      	ldr	r3, [r4, #4]
 800d14e:	dd0b      	ble.n	800d168 <_printf_float+0x19c>
 800d150:	6121      	str	r1, [r4, #16]
 800d152:	b913      	cbnz	r3, 800d15a <_printf_float+0x18e>
 800d154:	6822      	ldr	r2, [r4, #0]
 800d156:	07d0      	lsls	r0, r2, #31
 800d158:	d502      	bpl.n	800d160 <_printf_float+0x194>
 800d15a:	3301      	adds	r3, #1
 800d15c:	440b      	add	r3, r1
 800d15e:	6123      	str	r3, [r4, #16]
 800d160:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d162:	f04f 0900 	mov.w	r9, #0
 800d166:	e7db      	b.n	800d120 <_printf_float+0x154>
 800d168:	b913      	cbnz	r3, 800d170 <_printf_float+0x1a4>
 800d16a:	6822      	ldr	r2, [r4, #0]
 800d16c:	07d2      	lsls	r2, r2, #31
 800d16e:	d501      	bpl.n	800d174 <_printf_float+0x1a8>
 800d170:	3302      	adds	r3, #2
 800d172:	e7f4      	b.n	800d15e <_printf_float+0x192>
 800d174:	2301      	movs	r3, #1
 800d176:	e7f2      	b.n	800d15e <_printf_float+0x192>
 800d178:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d17c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d17e:	4299      	cmp	r1, r3
 800d180:	db05      	blt.n	800d18e <_printf_float+0x1c2>
 800d182:	6823      	ldr	r3, [r4, #0]
 800d184:	6121      	str	r1, [r4, #16]
 800d186:	07d8      	lsls	r0, r3, #31
 800d188:	d5ea      	bpl.n	800d160 <_printf_float+0x194>
 800d18a:	1c4b      	adds	r3, r1, #1
 800d18c:	e7e7      	b.n	800d15e <_printf_float+0x192>
 800d18e:	2900      	cmp	r1, #0
 800d190:	bfd4      	ite	le
 800d192:	f1c1 0202 	rsble	r2, r1, #2
 800d196:	2201      	movgt	r2, #1
 800d198:	4413      	add	r3, r2
 800d19a:	e7e0      	b.n	800d15e <_printf_float+0x192>
 800d19c:	6823      	ldr	r3, [r4, #0]
 800d19e:	055a      	lsls	r2, r3, #21
 800d1a0:	d407      	bmi.n	800d1b2 <_printf_float+0x1e6>
 800d1a2:	6923      	ldr	r3, [r4, #16]
 800d1a4:	4642      	mov	r2, r8
 800d1a6:	4631      	mov	r1, r6
 800d1a8:	4628      	mov	r0, r5
 800d1aa:	47b8      	blx	r7
 800d1ac:	3001      	adds	r0, #1
 800d1ae:	d12b      	bne.n	800d208 <_printf_float+0x23c>
 800d1b0:	e767      	b.n	800d082 <_printf_float+0xb6>
 800d1b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d1b6:	f240 80dd 	bls.w	800d374 <_printf_float+0x3a8>
 800d1ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d1be:	2200      	movs	r2, #0
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	f7f3 fca9 	bl	8000b18 <__aeabi_dcmpeq>
 800d1c6:	2800      	cmp	r0, #0
 800d1c8:	d033      	beq.n	800d232 <_printf_float+0x266>
 800d1ca:	4a37      	ldr	r2, [pc, #220]	@ (800d2a8 <_printf_float+0x2dc>)
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	4631      	mov	r1, r6
 800d1d0:	4628      	mov	r0, r5
 800d1d2:	47b8      	blx	r7
 800d1d4:	3001      	adds	r0, #1
 800d1d6:	f43f af54 	beq.w	800d082 <_printf_float+0xb6>
 800d1da:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d1de:	4543      	cmp	r3, r8
 800d1e0:	db02      	blt.n	800d1e8 <_printf_float+0x21c>
 800d1e2:	6823      	ldr	r3, [r4, #0]
 800d1e4:	07d8      	lsls	r0, r3, #31
 800d1e6:	d50f      	bpl.n	800d208 <_printf_float+0x23c>
 800d1e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1ec:	4631      	mov	r1, r6
 800d1ee:	4628      	mov	r0, r5
 800d1f0:	47b8      	blx	r7
 800d1f2:	3001      	adds	r0, #1
 800d1f4:	f43f af45 	beq.w	800d082 <_printf_float+0xb6>
 800d1f8:	f04f 0900 	mov.w	r9, #0
 800d1fc:	f108 38ff 	add.w	r8, r8, #4294967295
 800d200:	f104 0a1a 	add.w	sl, r4, #26
 800d204:	45c8      	cmp	r8, r9
 800d206:	dc09      	bgt.n	800d21c <_printf_float+0x250>
 800d208:	6823      	ldr	r3, [r4, #0]
 800d20a:	079b      	lsls	r3, r3, #30
 800d20c:	f100 8103 	bmi.w	800d416 <_printf_float+0x44a>
 800d210:	68e0      	ldr	r0, [r4, #12]
 800d212:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d214:	4298      	cmp	r0, r3
 800d216:	bfb8      	it	lt
 800d218:	4618      	movlt	r0, r3
 800d21a:	e734      	b.n	800d086 <_printf_float+0xba>
 800d21c:	2301      	movs	r3, #1
 800d21e:	4652      	mov	r2, sl
 800d220:	4631      	mov	r1, r6
 800d222:	4628      	mov	r0, r5
 800d224:	47b8      	blx	r7
 800d226:	3001      	adds	r0, #1
 800d228:	f43f af2b 	beq.w	800d082 <_printf_float+0xb6>
 800d22c:	f109 0901 	add.w	r9, r9, #1
 800d230:	e7e8      	b.n	800d204 <_printf_float+0x238>
 800d232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d234:	2b00      	cmp	r3, #0
 800d236:	dc39      	bgt.n	800d2ac <_printf_float+0x2e0>
 800d238:	4a1b      	ldr	r2, [pc, #108]	@ (800d2a8 <_printf_float+0x2dc>)
 800d23a:	2301      	movs	r3, #1
 800d23c:	4631      	mov	r1, r6
 800d23e:	4628      	mov	r0, r5
 800d240:	47b8      	blx	r7
 800d242:	3001      	adds	r0, #1
 800d244:	f43f af1d 	beq.w	800d082 <_printf_float+0xb6>
 800d248:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d24c:	ea59 0303 	orrs.w	r3, r9, r3
 800d250:	d102      	bne.n	800d258 <_printf_float+0x28c>
 800d252:	6823      	ldr	r3, [r4, #0]
 800d254:	07d9      	lsls	r1, r3, #31
 800d256:	d5d7      	bpl.n	800d208 <_printf_float+0x23c>
 800d258:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d25c:	4631      	mov	r1, r6
 800d25e:	4628      	mov	r0, r5
 800d260:	47b8      	blx	r7
 800d262:	3001      	adds	r0, #1
 800d264:	f43f af0d 	beq.w	800d082 <_printf_float+0xb6>
 800d268:	f04f 0a00 	mov.w	sl, #0
 800d26c:	f104 0b1a 	add.w	fp, r4, #26
 800d270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d272:	425b      	negs	r3, r3
 800d274:	4553      	cmp	r3, sl
 800d276:	dc01      	bgt.n	800d27c <_printf_float+0x2b0>
 800d278:	464b      	mov	r3, r9
 800d27a:	e793      	b.n	800d1a4 <_printf_float+0x1d8>
 800d27c:	2301      	movs	r3, #1
 800d27e:	465a      	mov	r2, fp
 800d280:	4631      	mov	r1, r6
 800d282:	4628      	mov	r0, r5
 800d284:	47b8      	blx	r7
 800d286:	3001      	adds	r0, #1
 800d288:	f43f aefb 	beq.w	800d082 <_printf_float+0xb6>
 800d28c:	f10a 0a01 	add.w	sl, sl, #1
 800d290:	e7ee      	b.n	800d270 <_printf_float+0x2a4>
 800d292:	bf00      	nop
 800d294:	7fefffff 	.word	0x7fefffff
 800d298:	08010e08 	.word	0x08010e08
 800d29c:	08010e0c 	.word	0x08010e0c
 800d2a0:	08010e10 	.word	0x08010e10
 800d2a4:	08010e14 	.word	0x08010e14
 800d2a8:	08010e18 	.word	0x08010e18
 800d2ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d2ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d2b2:	4553      	cmp	r3, sl
 800d2b4:	bfa8      	it	ge
 800d2b6:	4653      	movge	r3, sl
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	4699      	mov	r9, r3
 800d2bc:	dc36      	bgt.n	800d32c <_printf_float+0x360>
 800d2be:	f04f 0b00 	mov.w	fp, #0
 800d2c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d2c6:	f104 021a 	add.w	r2, r4, #26
 800d2ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d2cc:	9306      	str	r3, [sp, #24]
 800d2ce:	eba3 0309 	sub.w	r3, r3, r9
 800d2d2:	455b      	cmp	r3, fp
 800d2d4:	dc31      	bgt.n	800d33a <_printf_float+0x36e>
 800d2d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2d8:	459a      	cmp	sl, r3
 800d2da:	dc3a      	bgt.n	800d352 <_printf_float+0x386>
 800d2dc:	6823      	ldr	r3, [r4, #0]
 800d2de:	07da      	lsls	r2, r3, #31
 800d2e0:	d437      	bmi.n	800d352 <_printf_float+0x386>
 800d2e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2e4:	ebaa 0903 	sub.w	r9, sl, r3
 800d2e8:	9b06      	ldr	r3, [sp, #24]
 800d2ea:	ebaa 0303 	sub.w	r3, sl, r3
 800d2ee:	4599      	cmp	r9, r3
 800d2f0:	bfa8      	it	ge
 800d2f2:	4699      	movge	r9, r3
 800d2f4:	f1b9 0f00 	cmp.w	r9, #0
 800d2f8:	dc33      	bgt.n	800d362 <_printf_float+0x396>
 800d2fa:	f04f 0800 	mov.w	r8, #0
 800d2fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d302:	f104 0b1a 	add.w	fp, r4, #26
 800d306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d308:	ebaa 0303 	sub.w	r3, sl, r3
 800d30c:	eba3 0309 	sub.w	r3, r3, r9
 800d310:	4543      	cmp	r3, r8
 800d312:	f77f af79 	ble.w	800d208 <_printf_float+0x23c>
 800d316:	2301      	movs	r3, #1
 800d318:	465a      	mov	r2, fp
 800d31a:	4631      	mov	r1, r6
 800d31c:	4628      	mov	r0, r5
 800d31e:	47b8      	blx	r7
 800d320:	3001      	adds	r0, #1
 800d322:	f43f aeae 	beq.w	800d082 <_printf_float+0xb6>
 800d326:	f108 0801 	add.w	r8, r8, #1
 800d32a:	e7ec      	b.n	800d306 <_printf_float+0x33a>
 800d32c:	4642      	mov	r2, r8
 800d32e:	4631      	mov	r1, r6
 800d330:	4628      	mov	r0, r5
 800d332:	47b8      	blx	r7
 800d334:	3001      	adds	r0, #1
 800d336:	d1c2      	bne.n	800d2be <_printf_float+0x2f2>
 800d338:	e6a3      	b.n	800d082 <_printf_float+0xb6>
 800d33a:	2301      	movs	r3, #1
 800d33c:	4631      	mov	r1, r6
 800d33e:	4628      	mov	r0, r5
 800d340:	9206      	str	r2, [sp, #24]
 800d342:	47b8      	blx	r7
 800d344:	3001      	adds	r0, #1
 800d346:	f43f ae9c 	beq.w	800d082 <_printf_float+0xb6>
 800d34a:	9a06      	ldr	r2, [sp, #24]
 800d34c:	f10b 0b01 	add.w	fp, fp, #1
 800d350:	e7bb      	b.n	800d2ca <_printf_float+0x2fe>
 800d352:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d356:	4631      	mov	r1, r6
 800d358:	4628      	mov	r0, r5
 800d35a:	47b8      	blx	r7
 800d35c:	3001      	adds	r0, #1
 800d35e:	d1c0      	bne.n	800d2e2 <_printf_float+0x316>
 800d360:	e68f      	b.n	800d082 <_printf_float+0xb6>
 800d362:	9a06      	ldr	r2, [sp, #24]
 800d364:	464b      	mov	r3, r9
 800d366:	4442      	add	r2, r8
 800d368:	4631      	mov	r1, r6
 800d36a:	4628      	mov	r0, r5
 800d36c:	47b8      	blx	r7
 800d36e:	3001      	adds	r0, #1
 800d370:	d1c3      	bne.n	800d2fa <_printf_float+0x32e>
 800d372:	e686      	b.n	800d082 <_printf_float+0xb6>
 800d374:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d378:	f1ba 0f01 	cmp.w	sl, #1
 800d37c:	dc01      	bgt.n	800d382 <_printf_float+0x3b6>
 800d37e:	07db      	lsls	r3, r3, #31
 800d380:	d536      	bpl.n	800d3f0 <_printf_float+0x424>
 800d382:	2301      	movs	r3, #1
 800d384:	4642      	mov	r2, r8
 800d386:	4631      	mov	r1, r6
 800d388:	4628      	mov	r0, r5
 800d38a:	47b8      	blx	r7
 800d38c:	3001      	adds	r0, #1
 800d38e:	f43f ae78 	beq.w	800d082 <_printf_float+0xb6>
 800d392:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d396:	4631      	mov	r1, r6
 800d398:	4628      	mov	r0, r5
 800d39a:	47b8      	blx	r7
 800d39c:	3001      	adds	r0, #1
 800d39e:	f43f ae70 	beq.w	800d082 <_printf_float+0xb6>
 800d3a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d3ae:	f7f3 fbb3 	bl	8000b18 <__aeabi_dcmpeq>
 800d3b2:	b9c0      	cbnz	r0, 800d3e6 <_printf_float+0x41a>
 800d3b4:	4653      	mov	r3, sl
 800d3b6:	f108 0201 	add.w	r2, r8, #1
 800d3ba:	4631      	mov	r1, r6
 800d3bc:	4628      	mov	r0, r5
 800d3be:	47b8      	blx	r7
 800d3c0:	3001      	adds	r0, #1
 800d3c2:	d10c      	bne.n	800d3de <_printf_float+0x412>
 800d3c4:	e65d      	b.n	800d082 <_printf_float+0xb6>
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	465a      	mov	r2, fp
 800d3ca:	4631      	mov	r1, r6
 800d3cc:	4628      	mov	r0, r5
 800d3ce:	47b8      	blx	r7
 800d3d0:	3001      	adds	r0, #1
 800d3d2:	f43f ae56 	beq.w	800d082 <_printf_float+0xb6>
 800d3d6:	f108 0801 	add.w	r8, r8, #1
 800d3da:	45d0      	cmp	r8, sl
 800d3dc:	dbf3      	blt.n	800d3c6 <_printf_float+0x3fa>
 800d3de:	464b      	mov	r3, r9
 800d3e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d3e4:	e6df      	b.n	800d1a6 <_printf_float+0x1da>
 800d3e6:	f04f 0800 	mov.w	r8, #0
 800d3ea:	f104 0b1a 	add.w	fp, r4, #26
 800d3ee:	e7f4      	b.n	800d3da <_printf_float+0x40e>
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	4642      	mov	r2, r8
 800d3f4:	e7e1      	b.n	800d3ba <_printf_float+0x3ee>
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	464a      	mov	r2, r9
 800d3fa:	4631      	mov	r1, r6
 800d3fc:	4628      	mov	r0, r5
 800d3fe:	47b8      	blx	r7
 800d400:	3001      	adds	r0, #1
 800d402:	f43f ae3e 	beq.w	800d082 <_printf_float+0xb6>
 800d406:	f108 0801 	add.w	r8, r8, #1
 800d40a:	68e3      	ldr	r3, [r4, #12]
 800d40c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d40e:	1a5b      	subs	r3, r3, r1
 800d410:	4543      	cmp	r3, r8
 800d412:	dcf0      	bgt.n	800d3f6 <_printf_float+0x42a>
 800d414:	e6fc      	b.n	800d210 <_printf_float+0x244>
 800d416:	f04f 0800 	mov.w	r8, #0
 800d41a:	f104 0919 	add.w	r9, r4, #25
 800d41e:	e7f4      	b.n	800d40a <_printf_float+0x43e>

0800d420 <_printf_common>:
 800d420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d424:	4616      	mov	r6, r2
 800d426:	4698      	mov	r8, r3
 800d428:	688a      	ldr	r2, [r1, #8]
 800d42a:	690b      	ldr	r3, [r1, #16]
 800d42c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d430:	4293      	cmp	r3, r2
 800d432:	bfb8      	it	lt
 800d434:	4613      	movlt	r3, r2
 800d436:	6033      	str	r3, [r6, #0]
 800d438:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d43c:	4607      	mov	r7, r0
 800d43e:	460c      	mov	r4, r1
 800d440:	b10a      	cbz	r2, 800d446 <_printf_common+0x26>
 800d442:	3301      	adds	r3, #1
 800d444:	6033      	str	r3, [r6, #0]
 800d446:	6823      	ldr	r3, [r4, #0]
 800d448:	0699      	lsls	r1, r3, #26
 800d44a:	bf42      	ittt	mi
 800d44c:	6833      	ldrmi	r3, [r6, #0]
 800d44e:	3302      	addmi	r3, #2
 800d450:	6033      	strmi	r3, [r6, #0]
 800d452:	6825      	ldr	r5, [r4, #0]
 800d454:	f015 0506 	ands.w	r5, r5, #6
 800d458:	d106      	bne.n	800d468 <_printf_common+0x48>
 800d45a:	f104 0a19 	add.w	sl, r4, #25
 800d45e:	68e3      	ldr	r3, [r4, #12]
 800d460:	6832      	ldr	r2, [r6, #0]
 800d462:	1a9b      	subs	r3, r3, r2
 800d464:	42ab      	cmp	r3, r5
 800d466:	dc26      	bgt.n	800d4b6 <_printf_common+0x96>
 800d468:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d46c:	6822      	ldr	r2, [r4, #0]
 800d46e:	3b00      	subs	r3, #0
 800d470:	bf18      	it	ne
 800d472:	2301      	movne	r3, #1
 800d474:	0692      	lsls	r2, r2, #26
 800d476:	d42b      	bmi.n	800d4d0 <_printf_common+0xb0>
 800d478:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d47c:	4641      	mov	r1, r8
 800d47e:	4638      	mov	r0, r7
 800d480:	47c8      	blx	r9
 800d482:	3001      	adds	r0, #1
 800d484:	d01e      	beq.n	800d4c4 <_printf_common+0xa4>
 800d486:	6823      	ldr	r3, [r4, #0]
 800d488:	6922      	ldr	r2, [r4, #16]
 800d48a:	f003 0306 	and.w	r3, r3, #6
 800d48e:	2b04      	cmp	r3, #4
 800d490:	bf02      	ittt	eq
 800d492:	68e5      	ldreq	r5, [r4, #12]
 800d494:	6833      	ldreq	r3, [r6, #0]
 800d496:	1aed      	subeq	r5, r5, r3
 800d498:	68a3      	ldr	r3, [r4, #8]
 800d49a:	bf0c      	ite	eq
 800d49c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4a0:	2500      	movne	r5, #0
 800d4a2:	4293      	cmp	r3, r2
 800d4a4:	bfc4      	itt	gt
 800d4a6:	1a9b      	subgt	r3, r3, r2
 800d4a8:	18ed      	addgt	r5, r5, r3
 800d4aa:	2600      	movs	r6, #0
 800d4ac:	341a      	adds	r4, #26
 800d4ae:	42b5      	cmp	r5, r6
 800d4b0:	d11a      	bne.n	800d4e8 <_printf_common+0xc8>
 800d4b2:	2000      	movs	r0, #0
 800d4b4:	e008      	b.n	800d4c8 <_printf_common+0xa8>
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	4652      	mov	r2, sl
 800d4ba:	4641      	mov	r1, r8
 800d4bc:	4638      	mov	r0, r7
 800d4be:	47c8      	blx	r9
 800d4c0:	3001      	adds	r0, #1
 800d4c2:	d103      	bne.n	800d4cc <_printf_common+0xac>
 800d4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4cc:	3501      	adds	r5, #1
 800d4ce:	e7c6      	b.n	800d45e <_printf_common+0x3e>
 800d4d0:	18e1      	adds	r1, r4, r3
 800d4d2:	1c5a      	adds	r2, r3, #1
 800d4d4:	2030      	movs	r0, #48	@ 0x30
 800d4d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d4da:	4422      	add	r2, r4
 800d4dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d4e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d4e4:	3302      	adds	r3, #2
 800d4e6:	e7c7      	b.n	800d478 <_printf_common+0x58>
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	4622      	mov	r2, r4
 800d4ec:	4641      	mov	r1, r8
 800d4ee:	4638      	mov	r0, r7
 800d4f0:	47c8      	blx	r9
 800d4f2:	3001      	adds	r0, #1
 800d4f4:	d0e6      	beq.n	800d4c4 <_printf_common+0xa4>
 800d4f6:	3601      	adds	r6, #1
 800d4f8:	e7d9      	b.n	800d4ae <_printf_common+0x8e>
	...

0800d4fc <_printf_i>:
 800d4fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d500:	7e0f      	ldrb	r7, [r1, #24]
 800d502:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d504:	2f78      	cmp	r7, #120	@ 0x78
 800d506:	4691      	mov	r9, r2
 800d508:	4680      	mov	r8, r0
 800d50a:	460c      	mov	r4, r1
 800d50c:	469a      	mov	sl, r3
 800d50e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d512:	d807      	bhi.n	800d524 <_printf_i+0x28>
 800d514:	2f62      	cmp	r7, #98	@ 0x62
 800d516:	d80a      	bhi.n	800d52e <_printf_i+0x32>
 800d518:	2f00      	cmp	r7, #0
 800d51a:	f000 80d2 	beq.w	800d6c2 <_printf_i+0x1c6>
 800d51e:	2f58      	cmp	r7, #88	@ 0x58
 800d520:	f000 80b9 	beq.w	800d696 <_printf_i+0x19a>
 800d524:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d528:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d52c:	e03a      	b.n	800d5a4 <_printf_i+0xa8>
 800d52e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d532:	2b15      	cmp	r3, #21
 800d534:	d8f6      	bhi.n	800d524 <_printf_i+0x28>
 800d536:	a101      	add	r1, pc, #4	@ (adr r1, 800d53c <_printf_i+0x40>)
 800d538:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d53c:	0800d595 	.word	0x0800d595
 800d540:	0800d5a9 	.word	0x0800d5a9
 800d544:	0800d525 	.word	0x0800d525
 800d548:	0800d525 	.word	0x0800d525
 800d54c:	0800d525 	.word	0x0800d525
 800d550:	0800d525 	.word	0x0800d525
 800d554:	0800d5a9 	.word	0x0800d5a9
 800d558:	0800d525 	.word	0x0800d525
 800d55c:	0800d525 	.word	0x0800d525
 800d560:	0800d525 	.word	0x0800d525
 800d564:	0800d525 	.word	0x0800d525
 800d568:	0800d6a9 	.word	0x0800d6a9
 800d56c:	0800d5d3 	.word	0x0800d5d3
 800d570:	0800d663 	.word	0x0800d663
 800d574:	0800d525 	.word	0x0800d525
 800d578:	0800d525 	.word	0x0800d525
 800d57c:	0800d6cb 	.word	0x0800d6cb
 800d580:	0800d525 	.word	0x0800d525
 800d584:	0800d5d3 	.word	0x0800d5d3
 800d588:	0800d525 	.word	0x0800d525
 800d58c:	0800d525 	.word	0x0800d525
 800d590:	0800d66b 	.word	0x0800d66b
 800d594:	6833      	ldr	r3, [r6, #0]
 800d596:	1d1a      	adds	r2, r3, #4
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	6032      	str	r2, [r6, #0]
 800d59c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d5a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	e09d      	b.n	800d6e4 <_printf_i+0x1e8>
 800d5a8:	6833      	ldr	r3, [r6, #0]
 800d5aa:	6820      	ldr	r0, [r4, #0]
 800d5ac:	1d19      	adds	r1, r3, #4
 800d5ae:	6031      	str	r1, [r6, #0]
 800d5b0:	0606      	lsls	r6, r0, #24
 800d5b2:	d501      	bpl.n	800d5b8 <_printf_i+0xbc>
 800d5b4:	681d      	ldr	r5, [r3, #0]
 800d5b6:	e003      	b.n	800d5c0 <_printf_i+0xc4>
 800d5b8:	0645      	lsls	r5, r0, #25
 800d5ba:	d5fb      	bpl.n	800d5b4 <_printf_i+0xb8>
 800d5bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d5c0:	2d00      	cmp	r5, #0
 800d5c2:	da03      	bge.n	800d5cc <_printf_i+0xd0>
 800d5c4:	232d      	movs	r3, #45	@ 0x2d
 800d5c6:	426d      	negs	r5, r5
 800d5c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d5cc:	4859      	ldr	r0, [pc, #356]	@ (800d734 <_printf_i+0x238>)
 800d5ce:	230a      	movs	r3, #10
 800d5d0:	e011      	b.n	800d5f6 <_printf_i+0xfa>
 800d5d2:	6821      	ldr	r1, [r4, #0]
 800d5d4:	6833      	ldr	r3, [r6, #0]
 800d5d6:	0608      	lsls	r0, r1, #24
 800d5d8:	f853 5b04 	ldr.w	r5, [r3], #4
 800d5dc:	d402      	bmi.n	800d5e4 <_printf_i+0xe8>
 800d5de:	0649      	lsls	r1, r1, #25
 800d5e0:	bf48      	it	mi
 800d5e2:	b2ad      	uxthmi	r5, r5
 800d5e4:	2f6f      	cmp	r7, #111	@ 0x6f
 800d5e6:	4853      	ldr	r0, [pc, #332]	@ (800d734 <_printf_i+0x238>)
 800d5e8:	6033      	str	r3, [r6, #0]
 800d5ea:	bf14      	ite	ne
 800d5ec:	230a      	movne	r3, #10
 800d5ee:	2308      	moveq	r3, #8
 800d5f0:	2100      	movs	r1, #0
 800d5f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d5f6:	6866      	ldr	r6, [r4, #4]
 800d5f8:	60a6      	str	r6, [r4, #8]
 800d5fa:	2e00      	cmp	r6, #0
 800d5fc:	bfa2      	ittt	ge
 800d5fe:	6821      	ldrge	r1, [r4, #0]
 800d600:	f021 0104 	bicge.w	r1, r1, #4
 800d604:	6021      	strge	r1, [r4, #0]
 800d606:	b90d      	cbnz	r5, 800d60c <_printf_i+0x110>
 800d608:	2e00      	cmp	r6, #0
 800d60a:	d04b      	beq.n	800d6a4 <_printf_i+0x1a8>
 800d60c:	4616      	mov	r6, r2
 800d60e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d612:	fb03 5711 	mls	r7, r3, r1, r5
 800d616:	5dc7      	ldrb	r7, [r0, r7]
 800d618:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d61c:	462f      	mov	r7, r5
 800d61e:	42bb      	cmp	r3, r7
 800d620:	460d      	mov	r5, r1
 800d622:	d9f4      	bls.n	800d60e <_printf_i+0x112>
 800d624:	2b08      	cmp	r3, #8
 800d626:	d10b      	bne.n	800d640 <_printf_i+0x144>
 800d628:	6823      	ldr	r3, [r4, #0]
 800d62a:	07df      	lsls	r7, r3, #31
 800d62c:	d508      	bpl.n	800d640 <_printf_i+0x144>
 800d62e:	6923      	ldr	r3, [r4, #16]
 800d630:	6861      	ldr	r1, [r4, #4]
 800d632:	4299      	cmp	r1, r3
 800d634:	bfde      	ittt	le
 800d636:	2330      	movle	r3, #48	@ 0x30
 800d638:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d63c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d640:	1b92      	subs	r2, r2, r6
 800d642:	6122      	str	r2, [r4, #16]
 800d644:	f8cd a000 	str.w	sl, [sp]
 800d648:	464b      	mov	r3, r9
 800d64a:	aa03      	add	r2, sp, #12
 800d64c:	4621      	mov	r1, r4
 800d64e:	4640      	mov	r0, r8
 800d650:	f7ff fee6 	bl	800d420 <_printf_common>
 800d654:	3001      	adds	r0, #1
 800d656:	d14a      	bne.n	800d6ee <_printf_i+0x1f2>
 800d658:	f04f 30ff 	mov.w	r0, #4294967295
 800d65c:	b004      	add	sp, #16
 800d65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d662:	6823      	ldr	r3, [r4, #0]
 800d664:	f043 0320 	orr.w	r3, r3, #32
 800d668:	6023      	str	r3, [r4, #0]
 800d66a:	4833      	ldr	r0, [pc, #204]	@ (800d738 <_printf_i+0x23c>)
 800d66c:	2778      	movs	r7, #120	@ 0x78
 800d66e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d672:	6823      	ldr	r3, [r4, #0]
 800d674:	6831      	ldr	r1, [r6, #0]
 800d676:	061f      	lsls	r7, r3, #24
 800d678:	f851 5b04 	ldr.w	r5, [r1], #4
 800d67c:	d402      	bmi.n	800d684 <_printf_i+0x188>
 800d67e:	065f      	lsls	r7, r3, #25
 800d680:	bf48      	it	mi
 800d682:	b2ad      	uxthmi	r5, r5
 800d684:	6031      	str	r1, [r6, #0]
 800d686:	07d9      	lsls	r1, r3, #31
 800d688:	bf44      	itt	mi
 800d68a:	f043 0320 	orrmi.w	r3, r3, #32
 800d68e:	6023      	strmi	r3, [r4, #0]
 800d690:	b11d      	cbz	r5, 800d69a <_printf_i+0x19e>
 800d692:	2310      	movs	r3, #16
 800d694:	e7ac      	b.n	800d5f0 <_printf_i+0xf4>
 800d696:	4827      	ldr	r0, [pc, #156]	@ (800d734 <_printf_i+0x238>)
 800d698:	e7e9      	b.n	800d66e <_printf_i+0x172>
 800d69a:	6823      	ldr	r3, [r4, #0]
 800d69c:	f023 0320 	bic.w	r3, r3, #32
 800d6a0:	6023      	str	r3, [r4, #0]
 800d6a2:	e7f6      	b.n	800d692 <_printf_i+0x196>
 800d6a4:	4616      	mov	r6, r2
 800d6a6:	e7bd      	b.n	800d624 <_printf_i+0x128>
 800d6a8:	6833      	ldr	r3, [r6, #0]
 800d6aa:	6825      	ldr	r5, [r4, #0]
 800d6ac:	6961      	ldr	r1, [r4, #20]
 800d6ae:	1d18      	adds	r0, r3, #4
 800d6b0:	6030      	str	r0, [r6, #0]
 800d6b2:	062e      	lsls	r6, r5, #24
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	d501      	bpl.n	800d6bc <_printf_i+0x1c0>
 800d6b8:	6019      	str	r1, [r3, #0]
 800d6ba:	e002      	b.n	800d6c2 <_printf_i+0x1c6>
 800d6bc:	0668      	lsls	r0, r5, #25
 800d6be:	d5fb      	bpl.n	800d6b8 <_printf_i+0x1bc>
 800d6c0:	8019      	strh	r1, [r3, #0]
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	6123      	str	r3, [r4, #16]
 800d6c6:	4616      	mov	r6, r2
 800d6c8:	e7bc      	b.n	800d644 <_printf_i+0x148>
 800d6ca:	6833      	ldr	r3, [r6, #0]
 800d6cc:	1d1a      	adds	r2, r3, #4
 800d6ce:	6032      	str	r2, [r6, #0]
 800d6d0:	681e      	ldr	r6, [r3, #0]
 800d6d2:	6862      	ldr	r2, [r4, #4]
 800d6d4:	2100      	movs	r1, #0
 800d6d6:	4630      	mov	r0, r6
 800d6d8:	f7f2 fda2 	bl	8000220 <memchr>
 800d6dc:	b108      	cbz	r0, 800d6e2 <_printf_i+0x1e6>
 800d6de:	1b80      	subs	r0, r0, r6
 800d6e0:	6060      	str	r0, [r4, #4]
 800d6e2:	6863      	ldr	r3, [r4, #4]
 800d6e4:	6123      	str	r3, [r4, #16]
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6ec:	e7aa      	b.n	800d644 <_printf_i+0x148>
 800d6ee:	6923      	ldr	r3, [r4, #16]
 800d6f0:	4632      	mov	r2, r6
 800d6f2:	4649      	mov	r1, r9
 800d6f4:	4640      	mov	r0, r8
 800d6f6:	47d0      	blx	sl
 800d6f8:	3001      	adds	r0, #1
 800d6fa:	d0ad      	beq.n	800d658 <_printf_i+0x15c>
 800d6fc:	6823      	ldr	r3, [r4, #0]
 800d6fe:	079b      	lsls	r3, r3, #30
 800d700:	d413      	bmi.n	800d72a <_printf_i+0x22e>
 800d702:	68e0      	ldr	r0, [r4, #12]
 800d704:	9b03      	ldr	r3, [sp, #12]
 800d706:	4298      	cmp	r0, r3
 800d708:	bfb8      	it	lt
 800d70a:	4618      	movlt	r0, r3
 800d70c:	e7a6      	b.n	800d65c <_printf_i+0x160>
 800d70e:	2301      	movs	r3, #1
 800d710:	4632      	mov	r2, r6
 800d712:	4649      	mov	r1, r9
 800d714:	4640      	mov	r0, r8
 800d716:	47d0      	blx	sl
 800d718:	3001      	adds	r0, #1
 800d71a:	d09d      	beq.n	800d658 <_printf_i+0x15c>
 800d71c:	3501      	adds	r5, #1
 800d71e:	68e3      	ldr	r3, [r4, #12]
 800d720:	9903      	ldr	r1, [sp, #12]
 800d722:	1a5b      	subs	r3, r3, r1
 800d724:	42ab      	cmp	r3, r5
 800d726:	dcf2      	bgt.n	800d70e <_printf_i+0x212>
 800d728:	e7eb      	b.n	800d702 <_printf_i+0x206>
 800d72a:	2500      	movs	r5, #0
 800d72c:	f104 0619 	add.w	r6, r4, #25
 800d730:	e7f5      	b.n	800d71e <_printf_i+0x222>
 800d732:	bf00      	nop
 800d734:	08010e1a 	.word	0x08010e1a
 800d738:	08010e2b 	.word	0x08010e2b

0800d73c <_scanf_float>:
 800d73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d740:	b087      	sub	sp, #28
 800d742:	4617      	mov	r7, r2
 800d744:	9303      	str	r3, [sp, #12]
 800d746:	688b      	ldr	r3, [r1, #8]
 800d748:	1e5a      	subs	r2, r3, #1
 800d74a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d74e:	bf81      	itttt	hi
 800d750:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d754:	eb03 0b05 	addhi.w	fp, r3, r5
 800d758:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d75c:	608b      	strhi	r3, [r1, #8]
 800d75e:	680b      	ldr	r3, [r1, #0]
 800d760:	460a      	mov	r2, r1
 800d762:	f04f 0500 	mov.w	r5, #0
 800d766:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d76a:	f842 3b1c 	str.w	r3, [r2], #28
 800d76e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d772:	4680      	mov	r8, r0
 800d774:	460c      	mov	r4, r1
 800d776:	bf98      	it	ls
 800d778:	f04f 0b00 	movls.w	fp, #0
 800d77c:	9201      	str	r2, [sp, #4]
 800d77e:	4616      	mov	r6, r2
 800d780:	46aa      	mov	sl, r5
 800d782:	46a9      	mov	r9, r5
 800d784:	9502      	str	r5, [sp, #8]
 800d786:	68a2      	ldr	r2, [r4, #8]
 800d788:	b152      	cbz	r2, 800d7a0 <_scanf_float+0x64>
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	2b4e      	cmp	r3, #78	@ 0x4e
 800d790:	d864      	bhi.n	800d85c <_scanf_float+0x120>
 800d792:	2b40      	cmp	r3, #64	@ 0x40
 800d794:	d83c      	bhi.n	800d810 <_scanf_float+0xd4>
 800d796:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d79a:	b2c8      	uxtb	r0, r1
 800d79c:	280e      	cmp	r0, #14
 800d79e:	d93a      	bls.n	800d816 <_scanf_float+0xda>
 800d7a0:	f1b9 0f00 	cmp.w	r9, #0
 800d7a4:	d003      	beq.n	800d7ae <_scanf_float+0x72>
 800d7a6:	6823      	ldr	r3, [r4, #0]
 800d7a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d7ac:	6023      	str	r3, [r4, #0]
 800d7ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d7b2:	f1ba 0f01 	cmp.w	sl, #1
 800d7b6:	f200 8117 	bhi.w	800d9e8 <_scanf_float+0x2ac>
 800d7ba:	9b01      	ldr	r3, [sp, #4]
 800d7bc:	429e      	cmp	r6, r3
 800d7be:	f200 8108 	bhi.w	800d9d2 <_scanf_float+0x296>
 800d7c2:	2001      	movs	r0, #1
 800d7c4:	b007      	add	sp, #28
 800d7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ca:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d7ce:	2a0d      	cmp	r2, #13
 800d7d0:	d8e6      	bhi.n	800d7a0 <_scanf_float+0x64>
 800d7d2:	a101      	add	r1, pc, #4	@ (adr r1, 800d7d8 <_scanf_float+0x9c>)
 800d7d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d7d8:	0800d91f 	.word	0x0800d91f
 800d7dc:	0800d7a1 	.word	0x0800d7a1
 800d7e0:	0800d7a1 	.word	0x0800d7a1
 800d7e4:	0800d7a1 	.word	0x0800d7a1
 800d7e8:	0800d97f 	.word	0x0800d97f
 800d7ec:	0800d957 	.word	0x0800d957
 800d7f0:	0800d7a1 	.word	0x0800d7a1
 800d7f4:	0800d7a1 	.word	0x0800d7a1
 800d7f8:	0800d92d 	.word	0x0800d92d
 800d7fc:	0800d7a1 	.word	0x0800d7a1
 800d800:	0800d7a1 	.word	0x0800d7a1
 800d804:	0800d7a1 	.word	0x0800d7a1
 800d808:	0800d7a1 	.word	0x0800d7a1
 800d80c:	0800d8e5 	.word	0x0800d8e5
 800d810:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d814:	e7db      	b.n	800d7ce <_scanf_float+0x92>
 800d816:	290e      	cmp	r1, #14
 800d818:	d8c2      	bhi.n	800d7a0 <_scanf_float+0x64>
 800d81a:	a001      	add	r0, pc, #4	@ (adr r0, 800d820 <_scanf_float+0xe4>)
 800d81c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d820:	0800d8d5 	.word	0x0800d8d5
 800d824:	0800d7a1 	.word	0x0800d7a1
 800d828:	0800d8d5 	.word	0x0800d8d5
 800d82c:	0800d96b 	.word	0x0800d96b
 800d830:	0800d7a1 	.word	0x0800d7a1
 800d834:	0800d87d 	.word	0x0800d87d
 800d838:	0800d8bb 	.word	0x0800d8bb
 800d83c:	0800d8bb 	.word	0x0800d8bb
 800d840:	0800d8bb 	.word	0x0800d8bb
 800d844:	0800d8bb 	.word	0x0800d8bb
 800d848:	0800d8bb 	.word	0x0800d8bb
 800d84c:	0800d8bb 	.word	0x0800d8bb
 800d850:	0800d8bb 	.word	0x0800d8bb
 800d854:	0800d8bb 	.word	0x0800d8bb
 800d858:	0800d8bb 	.word	0x0800d8bb
 800d85c:	2b6e      	cmp	r3, #110	@ 0x6e
 800d85e:	d809      	bhi.n	800d874 <_scanf_float+0x138>
 800d860:	2b60      	cmp	r3, #96	@ 0x60
 800d862:	d8b2      	bhi.n	800d7ca <_scanf_float+0x8e>
 800d864:	2b54      	cmp	r3, #84	@ 0x54
 800d866:	d07b      	beq.n	800d960 <_scanf_float+0x224>
 800d868:	2b59      	cmp	r3, #89	@ 0x59
 800d86a:	d199      	bne.n	800d7a0 <_scanf_float+0x64>
 800d86c:	2d07      	cmp	r5, #7
 800d86e:	d197      	bne.n	800d7a0 <_scanf_float+0x64>
 800d870:	2508      	movs	r5, #8
 800d872:	e02c      	b.n	800d8ce <_scanf_float+0x192>
 800d874:	2b74      	cmp	r3, #116	@ 0x74
 800d876:	d073      	beq.n	800d960 <_scanf_float+0x224>
 800d878:	2b79      	cmp	r3, #121	@ 0x79
 800d87a:	e7f6      	b.n	800d86a <_scanf_float+0x12e>
 800d87c:	6821      	ldr	r1, [r4, #0]
 800d87e:	05c8      	lsls	r0, r1, #23
 800d880:	d51b      	bpl.n	800d8ba <_scanf_float+0x17e>
 800d882:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d886:	6021      	str	r1, [r4, #0]
 800d888:	f109 0901 	add.w	r9, r9, #1
 800d88c:	f1bb 0f00 	cmp.w	fp, #0
 800d890:	d003      	beq.n	800d89a <_scanf_float+0x15e>
 800d892:	3201      	adds	r2, #1
 800d894:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d898:	60a2      	str	r2, [r4, #8]
 800d89a:	68a3      	ldr	r3, [r4, #8]
 800d89c:	3b01      	subs	r3, #1
 800d89e:	60a3      	str	r3, [r4, #8]
 800d8a0:	6923      	ldr	r3, [r4, #16]
 800d8a2:	3301      	adds	r3, #1
 800d8a4:	6123      	str	r3, [r4, #16]
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	3b01      	subs	r3, #1
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	607b      	str	r3, [r7, #4]
 800d8ae:	f340 8087 	ble.w	800d9c0 <_scanf_float+0x284>
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	3301      	adds	r3, #1
 800d8b6:	603b      	str	r3, [r7, #0]
 800d8b8:	e765      	b.n	800d786 <_scanf_float+0x4a>
 800d8ba:	eb1a 0105 	adds.w	r1, sl, r5
 800d8be:	f47f af6f 	bne.w	800d7a0 <_scanf_float+0x64>
 800d8c2:	6822      	ldr	r2, [r4, #0]
 800d8c4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d8c8:	6022      	str	r2, [r4, #0]
 800d8ca:	460d      	mov	r5, r1
 800d8cc:	468a      	mov	sl, r1
 800d8ce:	f806 3b01 	strb.w	r3, [r6], #1
 800d8d2:	e7e2      	b.n	800d89a <_scanf_float+0x15e>
 800d8d4:	6822      	ldr	r2, [r4, #0]
 800d8d6:	0610      	lsls	r0, r2, #24
 800d8d8:	f57f af62 	bpl.w	800d7a0 <_scanf_float+0x64>
 800d8dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d8e0:	6022      	str	r2, [r4, #0]
 800d8e2:	e7f4      	b.n	800d8ce <_scanf_float+0x192>
 800d8e4:	f1ba 0f00 	cmp.w	sl, #0
 800d8e8:	d10e      	bne.n	800d908 <_scanf_float+0x1cc>
 800d8ea:	f1b9 0f00 	cmp.w	r9, #0
 800d8ee:	d10e      	bne.n	800d90e <_scanf_float+0x1d2>
 800d8f0:	6822      	ldr	r2, [r4, #0]
 800d8f2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d8f6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d8fa:	d108      	bne.n	800d90e <_scanf_float+0x1d2>
 800d8fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d900:	6022      	str	r2, [r4, #0]
 800d902:	f04f 0a01 	mov.w	sl, #1
 800d906:	e7e2      	b.n	800d8ce <_scanf_float+0x192>
 800d908:	f1ba 0f02 	cmp.w	sl, #2
 800d90c:	d055      	beq.n	800d9ba <_scanf_float+0x27e>
 800d90e:	2d01      	cmp	r5, #1
 800d910:	d002      	beq.n	800d918 <_scanf_float+0x1dc>
 800d912:	2d04      	cmp	r5, #4
 800d914:	f47f af44 	bne.w	800d7a0 <_scanf_float+0x64>
 800d918:	3501      	adds	r5, #1
 800d91a:	b2ed      	uxtb	r5, r5
 800d91c:	e7d7      	b.n	800d8ce <_scanf_float+0x192>
 800d91e:	f1ba 0f01 	cmp.w	sl, #1
 800d922:	f47f af3d 	bne.w	800d7a0 <_scanf_float+0x64>
 800d926:	f04f 0a02 	mov.w	sl, #2
 800d92a:	e7d0      	b.n	800d8ce <_scanf_float+0x192>
 800d92c:	b97d      	cbnz	r5, 800d94e <_scanf_float+0x212>
 800d92e:	f1b9 0f00 	cmp.w	r9, #0
 800d932:	f47f af38 	bne.w	800d7a6 <_scanf_float+0x6a>
 800d936:	6822      	ldr	r2, [r4, #0]
 800d938:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d93c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d940:	f040 8108 	bne.w	800db54 <_scanf_float+0x418>
 800d944:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d948:	6022      	str	r2, [r4, #0]
 800d94a:	2501      	movs	r5, #1
 800d94c:	e7bf      	b.n	800d8ce <_scanf_float+0x192>
 800d94e:	2d03      	cmp	r5, #3
 800d950:	d0e2      	beq.n	800d918 <_scanf_float+0x1dc>
 800d952:	2d05      	cmp	r5, #5
 800d954:	e7de      	b.n	800d914 <_scanf_float+0x1d8>
 800d956:	2d02      	cmp	r5, #2
 800d958:	f47f af22 	bne.w	800d7a0 <_scanf_float+0x64>
 800d95c:	2503      	movs	r5, #3
 800d95e:	e7b6      	b.n	800d8ce <_scanf_float+0x192>
 800d960:	2d06      	cmp	r5, #6
 800d962:	f47f af1d 	bne.w	800d7a0 <_scanf_float+0x64>
 800d966:	2507      	movs	r5, #7
 800d968:	e7b1      	b.n	800d8ce <_scanf_float+0x192>
 800d96a:	6822      	ldr	r2, [r4, #0]
 800d96c:	0591      	lsls	r1, r2, #22
 800d96e:	f57f af17 	bpl.w	800d7a0 <_scanf_float+0x64>
 800d972:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d976:	6022      	str	r2, [r4, #0]
 800d978:	f8cd 9008 	str.w	r9, [sp, #8]
 800d97c:	e7a7      	b.n	800d8ce <_scanf_float+0x192>
 800d97e:	6822      	ldr	r2, [r4, #0]
 800d980:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d984:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d988:	d006      	beq.n	800d998 <_scanf_float+0x25c>
 800d98a:	0550      	lsls	r0, r2, #21
 800d98c:	f57f af08 	bpl.w	800d7a0 <_scanf_float+0x64>
 800d990:	f1b9 0f00 	cmp.w	r9, #0
 800d994:	f000 80de 	beq.w	800db54 <_scanf_float+0x418>
 800d998:	0591      	lsls	r1, r2, #22
 800d99a:	bf58      	it	pl
 800d99c:	9902      	ldrpl	r1, [sp, #8]
 800d99e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d9a2:	bf58      	it	pl
 800d9a4:	eba9 0101 	subpl.w	r1, r9, r1
 800d9a8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d9ac:	bf58      	it	pl
 800d9ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d9b2:	6022      	str	r2, [r4, #0]
 800d9b4:	f04f 0900 	mov.w	r9, #0
 800d9b8:	e789      	b.n	800d8ce <_scanf_float+0x192>
 800d9ba:	f04f 0a03 	mov.w	sl, #3
 800d9be:	e786      	b.n	800d8ce <_scanf_float+0x192>
 800d9c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d9c4:	4639      	mov	r1, r7
 800d9c6:	4640      	mov	r0, r8
 800d9c8:	4798      	blx	r3
 800d9ca:	2800      	cmp	r0, #0
 800d9cc:	f43f aedb 	beq.w	800d786 <_scanf_float+0x4a>
 800d9d0:	e6e6      	b.n	800d7a0 <_scanf_float+0x64>
 800d9d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d9d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d9da:	463a      	mov	r2, r7
 800d9dc:	4640      	mov	r0, r8
 800d9de:	4798      	blx	r3
 800d9e0:	6923      	ldr	r3, [r4, #16]
 800d9e2:	3b01      	subs	r3, #1
 800d9e4:	6123      	str	r3, [r4, #16]
 800d9e6:	e6e8      	b.n	800d7ba <_scanf_float+0x7e>
 800d9e8:	1e6b      	subs	r3, r5, #1
 800d9ea:	2b06      	cmp	r3, #6
 800d9ec:	d824      	bhi.n	800da38 <_scanf_float+0x2fc>
 800d9ee:	2d02      	cmp	r5, #2
 800d9f0:	d836      	bhi.n	800da60 <_scanf_float+0x324>
 800d9f2:	9b01      	ldr	r3, [sp, #4]
 800d9f4:	429e      	cmp	r6, r3
 800d9f6:	f67f aee4 	bls.w	800d7c2 <_scanf_float+0x86>
 800d9fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d9fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800da02:	463a      	mov	r2, r7
 800da04:	4640      	mov	r0, r8
 800da06:	4798      	blx	r3
 800da08:	6923      	ldr	r3, [r4, #16]
 800da0a:	3b01      	subs	r3, #1
 800da0c:	6123      	str	r3, [r4, #16]
 800da0e:	e7f0      	b.n	800d9f2 <_scanf_float+0x2b6>
 800da10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800da14:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800da18:	463a      	mov	r2, r7
 800da1a:	4640      	mov	r0, r8
 800da1c:	4798      	blx	r3
 800da1e:	6923      	ldr	r3, [r4, #16]
 800da20:	3b01      	subs	r3, #1
 800da22:	6123      	str	r3, [r4, #16]
 800da24:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da28:	fa5f fa8a 	uxtb.w	sl, sl
 800da2c:	f1ba 0f02 	cmp.w	sl, #2
 800da30:	d1ee      	bne.n	800da10 <_scanf_float+0x2d4>
 800da32:	3d03      	subs	r5, #3
 800da34:	b2ed      	uxtb	r5, r5
 800da36:	1b76      	subs	r6, r6, r5
 800da38:	6823      	ldr	r3, [r4, #0]
 800da3a:	05da      	lsls	r2, r3, #23
 800da3c:	d530      	bpl.n	800daa0 <_scanf_float+0x364>
 800da3e:	055b      	lsls	r3, r3, #21
 800da40:	d511      	bpl.n	800da66 <_scanf_float+0x32a>
 800da42:	9b01      	ldr	r3, [sp, #4]
 800da44:	429e      	cmp	r6, r3
 800da46:	f67f aebc 	bls.w	800d7c2 <_scanf_float+0x86>
 800da4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800da4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800da52:	463a      	mov	r2, r7
 800da54:	4640      	mov	r0, r8
 800da56:	4798      	blx	r3
 800da58:	6923      	ldr	r3, [r4, #16]
 800da5a:	3b01      	subs	r3, #1
 800da5c:	6123      	str	r3, [r4, #16]
 800da5e:	e7f0      	b.n	800da42 <_scanf_float+0x306>
 800da60:	46aa      	mov	sl, r5
 800da62:	46b3      	mov	fp, r6
 800da64:	e7de      	b.n	800da24 <_scanf_float+0x2e8>
 800da66:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800da6a:	6923      	ldr	r3, [r4, #16]
 800da6c:	2965      	cmp	r1, #101	@ 0x65
 800da6e:	f103 33ff 	add.w	r3, r3, #4294967295
 800da72:	f106 35ff 	add.w	r5, r6, #4294967295
 800da76:	6123      	str	r3, [r4, #16]
 800da78:	d00c      	beq.n	800da94 <_scanf_float+0x358>
 800da7a:	2945      	cmp	r1, #69	@ 0x45
 800da7c:	d00a      	beq.n	800da94 <_scanf_float+0x358>
 800da7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800da82:	463a      	mov	r2, r7
 800da84:	4640      	mov	r0, r8
 800da86:	4798      	blx	r3
 800da88:	6923      	ldr	r3, [r4, #16]
 800da8a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800da8e:	3b01      	subs	r3, #1
 800da90:	1eb5      	subs	r5, r6, #2
 800da92:	6123      	str	r3, [r4, #16]
 800da94:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800da98:	463a      	mov	r2, r7
 800da9a:	4640      	mov	r0, r8
 800da9c:	4798      	blx	r3
 800da9e:	462e      	mov	r6, r5
 800daa0:	6822      	ldr	r2, [r4, #0]
 800daa2:	f012 0210 	ands.w	r2, r2, #16
 800daa6:	d001      	beq.n	800daac <_scanf_float+0x370>
 800daa8:	2000      	movs	r0, #0
 800daaa:	e68b      	b.n	800d7c4 <_scanf_float+0x88>
 800daac:	7032      	strb	r2, [r6, #0]
 800daae:	6823      	ldr	r3, [r4, #0]
 800dab0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800dab4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dab8:	d11c      	bne.n	800daf4 <_scanf_float+0x3b8>
 800daba:	9b02      	ldr	r3, [sp, #8]
 800dabc:	454b      	cmp	r3, r9
 800dabe:	eba3 0209 	sub.w	r2, r3, r9
 800dac2:	d123      	bne.n	800db0c <_scanf_float+0x3d0>
 800dac4:	9901      	ldr	r1, [sp, #4]
 800dac6:	2200      	movs	r2, #0
 800dac8:	4640      	mov	r0, r8
 800daca:	f7ff f9cd 	bl	800ce68 <_strtod_r>
 800dace:	9b03      	ldr	r3, [sp, #12]
 800dad0:	6821      	ldr	r1, [r4, #0]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	f011 0f02 	tst.w	r1, #2
 800dad8:	ec57 6b10 	vmov	r6, r7, d0
 800dadc:	f103 0204 	add.w	r2, r3, #4
 800dae0:	d01f      	beq.n	800db22 <_scanf_float+0x3e6>
 800dae2:	9903      	ldr	r1, [sp, #12]
 800dae4:	600a      	str	r2, [r1, #0]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	e9c3 6700 	strd	r6, r7, [r3]
 800daec:	68e3      	ldr	r3, [r4, #12]
 800daee:	3301      	adds	r3, #1
 800daf0:	60e3      	str	r3, [r4, #12]
 800daf2:	e7d9      	b.n	800daa8 <_scanf_float+0x36c>
 800daf4:	9b04      	ldr	r3, [sp, #16]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d0e4      	beq.n	800dac4 <_scanf_float+0x388>
 800dafa:	9905      	ldr	r1, [sp, #20]
 800dafc:	230a      	movs	r3, #10
 800dafe:	3101      	adds	r1, #1
 800db00:	4640      	mov	r0, r8
 800db02:	f002 f9e9 	bl	800fed8 <_strtol_r>
 800db06:	9b04      	ldr	r3, [sp, #16]
 800db08:	9e05      	ldr	r6, [sp, #20]
 800db0a:	1ac2      	subs	r2, r0, r3
 800db0c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800db10:	429e      	cmp	r6, r3
 800db12:	bf28      	it	cs
 800db14:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800db18:	4910      	ldr	r1, [pc, #64]	@ (800db5c <_scanf_float+0x420>)
 800db1a:	4630      	mov	r0, r6
 800db1c:	f000 f8e4 	bl	800dce8 <siprintf>
 800db20:	e7d0      	b.n	800dac4 <_scanf_float+0x388>
 800db22:	f011 0f04 	tst.w	r1, #4
 800db26:	9903      	ldr	r1, [sp, #12]
 800db28:	600a      	str	r2, [r1, #0]
 800db2a:	d1dc      	bne.n	800dae6 <_scanf_float+0x3aa>
 800db2c:	681d      	ldr	r5, [r3, #0]
 800db2e:	4632      	mov	r2, r6
 800db30:	463b      	mov	r3, r7
 800db32:	4630      	mov	r0, r6
 800db34:	4639      	mov	r1, r7
 800db36:	f7f3 f821 	bl	8000b7c <__aeabi_dcmpun>
 800db3a:	b128      	cbz	r0, 800db48 <_scanf_float+0x40c>
 800db3c:	4808      	ldr	r0, [pc, #32]	@ (800db60 <_scanf_float+0x424>)
 800db3e:	f000 f9ff 	bl	800df40 <nanf>
 800db42:	ed85 0a00 	vstr	s0, [r5]
 800db46:	e7d1      	b.n	800daec <_scanf_float+0x3b0>
 800db48:	4630      	mov	r0, r6
 800db4a:	4639      	mov	r1, r7
 800db4c:	f7f3 f874 	bl	8000c38 <__aeabi_d2f>
 800db50:	6028      	str	r0, [r5, #0]
 800db52:	e7cb      	b.n	800daec <_scanf_float+0x3b0>
 800db54:	f04f 0900 	mov.w	r9, #0
 800db58:	e629      	b.n	800d7ae <_scanf_float+0x72>
 800db5a:	bf00      	nop
 800db5c:	08010e3c 	.word	0x08010e3c
 800db60:	080111dd 	.word	0x080111dd

0800db64 <std>:
 800db64:	2300      	movs	r3, #0
 800db66:	b510      	push	{r4, lr}
 800db68:	4604      	mov	r4, r0
 800db6a:	e9c0 3300 	strd	r3, r3, [r0]
 800db6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800db72:	6083      	str	r3, [r0, #8]
 800db74:	8181      	strh	r1, [r0, #12]
 800db76:	6643      	str	r3, [r0, #100]	@ 0x64
 800db78:	81c2      	strh	r2, [r0, #14]
 800db7a:	6183      	str	r3, [r0, #24]
 800db7c:	4619      	mov	r1, r3
 800db7e:	2208      	movs	r2, #8
 800db80:	305c      	adds	r0, #92	@ 0x5c
 800db82:	f000 f935 	bl	800ddf0 <memset>
 800db86:	4b0d      	ldr	r3, [pc, #52]	@ (800dbbc <std+0x58>)
 800db88:	6263      	str	r3, [r4, #36]	@ 0x24
 800db8a:	4b0d      	ldr	r3, [pc, #52]	@ (800dbc0 <std+0x5c>)
 800db8c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800db8e:	4b0d      	ldr	r3, [pc, #52]	@ (800dbc4 <std+0x60>)
 800db90:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800db92:	4b0d      	ldr	r3, [pc, #52]	@ (800dbc8 <std+0x64>)
 800db94:	6323      	str	r3, [r4, #48]	@ 0x30
 800db96:	4b0d      	ldr	r3, [pc, #52]	@ (800dbcc <std+0x68>)
 800db98:	6224      	str	r4, [r4, #32]
 800db9a:	429c      	cmp	r4, r3
 800db9c:	d006      	beq.n	800dbac <std+0x48>
 800db9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dba2:	4294      	cmp	r4, r2
 800dba4:	d002      	beq.n	800dbac <std+0x48>
 800dba6:	33d0      	adds	r3, #208	@ 0xd0
 800dba8:	429c      	cmp	r4, r3
 800dbaa:	d105      	bne.n	800dbb8 <std+0x54>
 800dbac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dbb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbb4:	f000 b9aa 	b.w	800df0c <__retarget_lock_init_recursive>
 800dbb8:	bd10      	pop	{r4, pc}
 800dbba:	bf00      	nop
 800dbbc:	0800dd29 	.word	0x0800dd29
 800dbc0:	0800dd4b 	.word	0x0800dd4b
 800dbc4:	0800dd83 	.word	0x0800dd83
 800dbc8:	0800dda7 	.word	0x0800dda7
 800dbcc:	20000868 	.word	0x20000868

0800dbd0 <stdio_exit_handler>:
 800dbd0:	4a02      	ldr	r2, [pc, #8]	@ (800dbdc <stdio_exit_handler+0xc>)
 800dbd2:	4903      	ldr	r1, [pc, #12]	@ (800dbe0 <stdio_exit_handler+0x10>)
 800dbd4:	4803      	ldr	r0, [pc, #12]	@ (800dbe4 <stdio_exit_handler+0x14>)
 800dbd6:	f000 b869 	b.w	800dcac <_fwalk_sglue>
 800dbda:	bf00      	nop
 800dbdc:	20000090 	.word	0x20000090
 800dbe0:	080102ad 	.word	0x080102ad
 800dbe4:	2000020c 	.word	0x2000020c

0800dbe8 <cleanup_stdio>:
 800dbe8:	6841      	ldr	r1, [r0, #4]
 800dbea:	4b0c      	ldr	r3, [pc, #48]	@ (800dc1c <cleanup_stdio+0x34>)
 800dbec:	4299      	cmp	r1, r3
 800dbee:	b510      	push	{r4, lr}
 800dbf0:	4604      	mov	r4, r0
 800dbf2:	d001      	beq.n	800dbf8 <cleanup_stdio+0x10>
 800dbf4:	f002 fb5a 	bl	80102ac <_fflush_r>
 800dbf8:	68a1      	ldr	r1, [r4, #8]
 800dbfa:	4b09      	ldr	r3, [pc, #36]	@ (800dc20 <cleanup_stdio+0x38>)
 800dbfc:	4299      	cmp	r1, r3
 800dbfe:	d002      	beq.n	800dc06 <cleanup_stdio+0x1e>
 800dc00:	4620      	mov	r0, r4
 800dc02:	f002 fb53 	bl	80102ac <_fflush_r>
 800dc06:	68e1      	ldr	r1, [r4, #12]
 800dc08:	4b06      	ldr	r3, [pc, #24]	@ (800dc24 <cleanup_stdio+0x3c>)
 800dc0a:	4299      	cmp	r1, r3
 800dc0c:	d004      	beq.n	800dc18 <cleanup_stdio+0x30>
 800dc0e:	4620      	mov	r0, r4
 800dc10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc14:	f002 bb4a 	b.w	80102ac <_fflush_r>
 800dc18:	bd10      	pop	{r4, pc}
 800dc1a:	bf00      	nop
 800dc1c:	20000868 	.word	0x20000868
 800dc20:	200008d0 	.word	0x200008d0
 800dc24:	20000938 	.word	0x20000938

0800dc28 <global_stdio_init.part.0>:
 800dc28:	b510      	push	{r4, lr}
 800dc2a:	4b0b      	ldr	r3, [pc, #44]	@ (800dc58 <global_stdio_init.part.0+0x30>)
 800dc2c:	4c0b      	ldr	r4, [pc, #44]	@ (800dc5c <global_stdio_init.part.0+0x34>)
 800dc2e:	4a0c      	ldr	r2, [pc, #48]	@ (800dc60 <global_stdio_init.part.0+0x38>)
 800dc30:	601a      	str	r2, [r3, #0]
 800dc32:	4620      	mov	r0, r4
 800dc34:	2200      	movs	r2, #0
 800dc36:	2104      	movs	r1, #4
 800dc38:	f7ff ff94 	bl	800db64 <std>
 800dc3c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dc40:	2201      	movs	r2, #1
 800dc42:	2109      	movs	r1, #9
 800dc44:	f7ff ff8e 	bl	800db64 <std>
 800dc48:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dc4c:	2202      	movs	r2, #2
 800dc4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc52:	2112      	movs	r1, #18
 800dc54:	f7ff bf86 	b.w	800db64 <std>
 800dc58:	200009a0 	.word	0x200009a0
 800dc5c:	20000868 	.word	0x20000868
 800dc60:	0800dbd1 	.word	0x0800dbd1

0800dc64 <__sfp_lock_acquire>:
 800dc64:	4801      	ldr	r0, [pc, #4]	@ (800dc6c <__sfp_lock_acquire+0x8>)
 800dc66:	f000 b952 	b.w	800df0e <__retarget_lock_acquire_recursive>
 800dc6a:	bf00      	nop
 800dc6c:	200009a9 	.word	0x200009a9

0800dc70 <__sfp_lock_release>:
 800dc70:	4801      	ldr	r0, [pc, #4]	@ (800dc78 <__sfp_lock_release+0x8>)
 800dc72:	f000 b94d 	b.w	800df10 <__retarget_lock_release_recursive>
 800dc76:	bf00      	nop
 800dc78:	200009a9 	.word	0x200009a9

0800dc7c <__sinit>:
 800dc7c:	b510      	push	{r4, lr}
 800dc7e:	4604      	mov	r4, r0
 800dc80:	f7ff fff0 	bl	800dc64 <__sfp_lock_acquire>
 800dc84:	6a23      	ldr	r3, [r4, #32]
 800dc86:	b11b      	cbz	r3, 800dc90 <__sinit+0x14>
 800dc88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc8c:	f7ff bff0 	b.w	800dc70 <__sfp_lock_release>
 800dc90:	4b04      	ldr	r3, [pc, #16]	@ (800dca4 <__sinit+0x28>)
 800dc92:	6223      	str	r3, [r4, #32]
 800dc94:	4b04      	ldr	r3, [pc, #16]	@ (800dca8 <__sinit+0x2c>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d1f5      	bne.n	800dc88 <__sinit+0xc>
 800dc9c:	f7ff ffc4 	bl	800dc28 <global_stdio_init.part.0>
 800dca0:	e7f2      	b.n	800dc88 <__sinit+0xc>
 800dca2:	bf00      	nop
 800dca4:	0800dbe9 	.word	0x0800dbe9
 800dca8:	200009a0 	.word	0x200009a0

0800dcac <_fwalk_sglue>:
 800dcac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcb0:	4607      	mov	r7, r0
 800dcb2:	4688      	mov	r8, r1
 800dcb4:	4614      	mov	r4, r2
 800dcb6:	2600      	movs	r6, #0
 800dcb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dcbc:	f1b9 0901 	subs.w	r9, r9, #1
 800dcc0:	d505      	bpl.n	800dcce <_fwalk_sglue+0x22>
 800dcc2:	6824      	ldr	r4, [r4, #0]
 800dcc4:	2c00      	cmp	r4, #0
 800dcc6:	d1f7      	bne.n	800dcb8 <_fwalk_sglue+0xc>
 800dcc8:	4630      	mov	r0, r6
 800dcca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcce:	89ab      	ldrh	r3, [r5, #12]
 800dcd0:	2b01      	cmp	r3, #1
 800dcd2:	d907      	bls.n	800dce4 <_fwalk_sglue+0x38>
 800dcd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dcd8:	3301      	adds	r3, #1
 800dcda:	d003      	beq.n	800dce4 <_fwalk_sglue+0x38>
 800dcdc:	4629      	mov	r1, r5
 800dcde:	4638      	mov	r0, r7
 800dce0:	47c0      	blx	r8
 800dce2:	4306      	orrs	r6, r0
 800dce4:	3568      	adds	r5, #104	@ 0x68
 800dce6:	e7e9      	b.n	800dcbc <_fwalk_sglue+0x10>

0800dce8 <siprintf>:
 800dce8:	b40e      	push	{r1, r2, r3}
 800dcea:	b500      	push	{lr}
 800dcec:	b09c      	sub	sp, #112	@ 0x70
 800dcee:	ab1d      	add	r3, sp, #116	@ 0x74
 800dcf0:	9002      	str	r0, [sp, #8]
 800dcf2:	9006      	str	r0, [sp, #24]
 800dcf4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800dcf8:	4809      	ldr	r0, [pc, #36]	@ (800dd20 <siprintf+0x38>)
 800dcfa:	9107      	str	r1, [sp, #28]
 800dcfc:	9104      	str	r1, [sp, #16]
 800dcfe:	4909      	ldr	r1, [pc, #36]	@ (800dd24 <siprintf+0x3c>)
 800dd00:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd04:	9105      	str	r1, [sp, #20]
 800dd06:	6800      	ldr	r0, [r0, #0]
 800dd08:	9301      	str	r3, [sp, #4]
 800dd0a:	a902      	add	r1, sp, #8
 800dd0c:	f002 f94e 	bl	800ffac <_svfiprintf_r>
 800dd10:	9b02      	ldr	r3, [sp, #8]
 800dd12:	2200      	movs	r2, #0
 800dd14:	701a      	strb	r2, [r3, #0]
 800dd16:	b01c      	add	sp, #112	@ 0x70
 800dd18:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd1c:	b003      	add	sp, #12
 800dd1e:	4770      	bx	lr
 800dd20:	20000208 	.word	0x20000208
 800dd24:	ffff0208 	.word	0xffff0208

0800dd28 <__sread>:
 800dd28:	b510      	push	{r4, lr}
 800dd2a:	460c      	mov	r4, r1
 800dd2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd30:	f000 f89e 	bl	800de70 <_read_r>
 800dd34:	2800      	cmp	r0, #0
 800dd36:	bfab      	itete	ge
 800dd38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dd3a:	89a3      	ldrhlt	r3, [r4, #12]
 800dd3c:	181b      	addge	r3, r3, r0
 800dd3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dd42:	bfac      	ite	ge
 800dd44:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dd46:	81a3      	strhlt	r3, [r4, #12]
 800dd48:	bd10      	pop	{r4, pc}

0800dd4a <__swrite>:
 800dd4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd4e:	461f      	mov	r7, r3
 800dd50:	898b      	ldrh	r3, [r1, #12]
 800dd52:	05db      	lsls	r3, r3, #23
 800dd54:	4605      	mov	r5, r0
 800dd56:	460c      	mov	r4, r1
 800dd58:	4616      	mov	r6, r2
 800dd5a:	d505      	bpl.n	800dd68 <__swrite+0x1e>
 800dd5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd60:	2302      	movs	r3, #2
 800dd62:	2200      	movs	r2, #0
 800dd64:	f000 f872 	bl	800de4c <_lseek_r>
 800dd68:	89a3      	ldrh	r3, [r4, #12]
 800dd6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dd72:	81a3      	strh	r3, [r4, #12]
 800dd74:	4632      	mov	r2, r6
 800dd76:	463b      	mov	r3, r7
 800dd78:	4628      	mov	r0, r5
 800dd7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd7e:	f000 b889 	b.w	800de94 <_write_r>

0800dd82 <__sseek>:
 800dd82:	b510      	push	{r4, lr}
 800dd84:	460c      	mov	r4, r1
 800dd86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd8a:	f000 f85f 	bl	800de4c <_lseek_r>
 800dd8e:	1c43      	adds	r3, r0, #1
 800dd90:	89a3      	ldrh	r3, [r4, #12]
 800dd92:	bf15      	itete	ne
 800dd94:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dd96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dd9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dd9e:	81a3      	strheq	r3, [r4, #12]
 800dda0:	bf18      	it	ne
 800dda2:	81a3      	strhne	r3, [r4, #12]
 800dda4:	bd10      	pop	{r4, pc}

0800dda6 <__sclose>:
 800dda6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddaa:	f000 b83f 	b.w	800de2c <_close_r>
	...

0800ddb0 <_vsiprintf_r>:
 800ddb0:	b500      	push	{lr}
 800ddb2:	b09b      	sub	sp, #108	@ 0x6c
 800ddb4:	9100      	str	r1, [sp, #0]
 800ddb6:	9104      	str	r1, [sp, #16]
 800ddb8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ddbc:	9105      	str	r1, [sp, #20]
 800ddbe:	9102      	str	r1, [sp, #8]
 800ddc0:	4905      	ldr	r1, [pc, #20]	@ (800ddd8 <_vsiprintf_r+0x28>)
 800ddc2:	9103      	str	r1, [sp, #12]
 800ddc4:	4669      	mov	r1, sp
 800ddc6:	f002 f8f1 	bl	800ffac <_svfiprintf_r>
 800ddca:	9b00      	ldr	r3, [sp, #0]
 800ddcc:	2200      	movs	r2, #0
 800ddce:	701a      	strb	r2, [r3, #0]
 800ddd0:	b01b      	add	sp, #108	@ 0x6c
 800ddd2:	f85d fb04 	ldr.w	pc, [sp], #4
 800ddd6:	bf00      	nop
 800ddd8:	ffff0208 	.word	0xffff0208

0800dddc <vsiprintf>:
 800dddc:	4613      	mov	r3, r2
 800ddde:	460a      	mov	r2, r1
 800dde0:	4601      	mov	r1, r0
 800dde2:	4802      	ldr	r0, [pc, #8]	@ (800ddec <vsiprintf+0x10>)
 800dde4:	6800      	ldr	r0, [r0, #0]
 800dde6:	f7ff bfe3 	b.w	800ddb0 <_vsiprintf_r>
 800ddea:	bf00      	nop
 800ddec:	20000208 	.word	0x20000208

0800ddf0 <memset>:
 800ddf0:	4402      	add	r2, r0
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d100      	bne.n	800ddfa <memset+0xa>
 800ddf8:	4770      	bx	lr
 800ddfa:	f803 1b01 	strb.w	r1, [r3], #1
 800ddfe:	e7f9      	b.n	800ddf4 <memset+0x4>

0800de00 <strncmp>:
 800de00:	b510      	push	{r4, lr}
 800de02:	b16a      	cbz	r2, 800de20 <strncmp+0x20>
 800de04:	3901      	subs	r1, #1
 800de06:	1884      	adds	r4, r0, r2
 800de08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de0c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800de10:	429a      	cmp	r2, r3
 800de12:	d103      	bne.n	800de1c <strncmp+0x1c>
 800de14:	42a0      	cmp	r0, r4
 800de16:	d001      	beq.n	800de1c <strncmp+0x1c>
 800de18:	2a00      	cmp	r2, #0
 800de1a:	d1f5      	bne.n	800de08 <strncmp+0x8>
 800de1c:	1ad0      	subs	r0, r2, r3
 800de1e:	bd10      	pop	{r4, pc}
 800de20:	4610      	mov	r0, r2
 800de22:	e7fc      	b.n	800de1e <strncmp+0x1e>

0800de24 <_localeconv_r>:
 800de24:	4800      	ldr	r0, [pc, #0]	@ (800de28 <_localeconv_r+0x4>)
 800de26:	4770      	bx	lr
 800de28:	2000018c 	.word	0x2000018c

0800de2c <_close_r>:
 800de2c:	b538      	push	{r3, r4, r5, lr}
 800de2e:	4d06      	ldr	r5, [pc, #24]	@ (800de48 <_close_r+0x1c>)
 800de30:	2300      	movs	r3, #0
 800de32:	4604      	mov	r4, r0
 800de34:	4608      	mov	r0, r1
 800de36:	602b      	str	r3, [r5, #0]
 800de38:	f7f3 fea0 	bl	8001b7c <_close>
 800de3c:	1c43      	adds	r3, r0, #1
 800de3e:	d102      	bne.n	800de46 <_close_r+0x1a>
 800de40:	682b      	ldr	r3, [r5, #0]
 800de42:	b103      	cbz	r3, 800de46 <_close_r+0x1a>
 800de44:	6023      	str	r3, [r4, #0]
 800de46:	bd38      	pop	{r3, r4, r5, pc}
 800de48:	200009a4 	.word	0x200009a4

0800de4c <_lseek_r>:
 800de4c:	b538      	push	{r3, r4, r5, lr}
 800de4e:	4d07      	ldr	r5, [pc, #28]	@ (800de6c <_lseek_r+0x20>)
 800de50:	4604      	mov	r4, r0
 800de52:	4608      	mov	r0, r1
 800de54:	4611      	mov	r1, r2
 800de56:	2200      	movs	r2, #0
 800de58:	602a      	str	r2, [r5, #0]
 800de5a:	461a      	mov	r2, r3
 800de5c:	f7f3 feb5 	bl	8001bca <_lseek>
 800de60:	1c43      	adds	r3, r0, #1
 800de62:	d102      	bne.n	800de6a <_lseek_r+0x1e>
 800de64:	682b      	ldr	r3, [r5, #0]
 800de66:	b103      	cbz	r3, 800de6a <_lseek_r+0x1e>
 800de68:	6023      	str	r3, [r4, #0]
 800de6a:	bd38      	pop	{r3, r4, r5, pc}
 800de6c:	200009a4 	.word	0x200009a4

0800de70 <_read_r>:
 800de70:	b538      	push	{r3, r4, r5, lr}
 800de72:	4d07      	ldr	r5, [pc, #28]	@ (800de90 <_read_r+0x20>)
 800de74:	4604      	mov	r4, r0
 800de76:	4608      	mov	r0, r1
 800de78:	4611      	mov	r1, r2
 800de7a:	2200      	movs	r2, #0
 800de7c:	602a      	str	r2, [r5, #0]
 800de7e:	461a      	mov	r2, r3
 800de80:	f7f3 fe43 	bl	8001b0a <_read>
 800de84:	1c43      	adds	r3, r0, #1
 800de86:	d102      	bne.n	800de8e <_read_r+0x1e>
 800de88:	682b      	ldr	r3, [r5, #0]
 800de8a:	b103      	cbz	r3, 800de8e <_read_r+0x1e>
 800de8c:	6023      	str	r3, [r4, #0]
 800de8e:	bd38      	pop	{r3, r4, r5, pc}
 800de90:	200009a4 	.word	0x200009a4

0800de94 <_write_r>:
 800de94:	b538      	push	{r3, r4, r5, lr}
 800de96:	4d07      	ldr	r5, [pc, #28]	@ (800deb4 <_write_r+0x20>)
 800de98:	4604      	mov	r4, r0
 800de9a:	4608      	mov	r0, r1
 800de9c:	4611      	mov	r1, r2
 800de9e:	2200      	movs	r2, #0
 800dea0:	602a      	str	r2, [r5, #0]
 800dea2:	461a      	mov	r2, r3
 800dea4:	f7f3 fe4e 	bl	8001b44 <_write>
 800dea8:	1c43      	adds	r3, r0, #1
 800deaa:	d102      	bne.n	800deb2 <_write_r+0x1e>
 800deac:	682b      	ldr	r3, [r5, #0]
 800deae:	b103      	cbz	r3, 800deb2 <_write_r+0x1e>
 800deb0:	6023      	str	r3, [r4, #0]
 800deb2:	bd38      	pop	{r3, r4, r5, pc}
 800deb4:	200009a4 	.word	0x200009a4

0800deb8 <__errno>:
 800deb8:	4b01      	ldr	r3, [pc, #4]	@ (800dec0 <__errno+0x8>)
 800deba:	6818      	ldr	r0, [r3, #0]
 800debc:	4770      	bx	lr
 800debe:	bf00      	nop
 800dec0:	20000208 	.word	0x20000208

0800dec4 <__libc_init_array>:
 800dec4:	b570      	push	{r4, r5, r6, lr}
 800dec6:	4d0d      	ldr	r5, [pc, #52]	@ (800defc <__libc_init_array+0x38>)
 800dec8:	4c0d      	ldr	r4, [pc, #52]	@ (800df00 <__libc_init_array+0x3c>)
 800deca:	1b64      	subs	r4, r4, r5
 800decc:	10a4      	asrs	r4, r4, #2
 800dece:	2600      	movs	r6, #0
 800ded0:	42a6      	cmp	r6, r4
 800ded2:	d109      	bne.n	800dee8 <__libc_init_array+0x24>
 800ded4:	4d0b      	ldr	r5, [pc, #44]	@ (800df04 <__libc_init_array+0x40>)
 800ded6:	4c0c      	ldr	r4, [pc, #48]	@ (800df08 <__libc_init_array+0x44>)
 800ded8:	f002 fe90 	bl	8010bfc <_init>
 800dedc:	1b64      	subs	r4, r4, r5
 800dede:	10a4      	asrs	r4, r4, #2
 800dee0:	2600      	movs	r6, #0
 800dee2:	42a6      	cmp	r6, r4
 800dee4:	d105      	bne.n	800def2 <__libc_init_array+0x2e>
 800dee6:	bd70      	pop	{r4, r5, r6, pc}
 800dee8:	f855 3b04 	ldr.w	r3, [r5], #4
 800deec:	4798      	blx	r3
 800deee:	3601      	adds	r6, #1
 800def0:	e7ee      	b.n	800ded0 <__libc_init_array+0xc>
 800def2:	f855 3b04 	ldr.w	r3, [r5], #4
 800def6:	4798      	blx	r3
 800def8:	3601      	adds	r6, #1
 800defa:	e7f2      	b.n	800dee2 <__libc_init_array+0x1e>
 800defc:	080111f8 	.word	0x080111f8
 800df00:	080111f8 	.word	0x080111f8
 800df04:	080111f8 	.word	0x080111f8
 800df08:	080111fc 	.word	0x080111fc

0800df0c <__retarget_lock_init_recursive>:
 800df0c:	4770      	bx	lr

0800df0e <__retarget_lock_acquire_recursive>:
 800df0e:	4770      	bx	lr

0800df10 <__retarget_lock_release_recursive>:
 800df10:	4770      	bx	lr

0800df12 <memcpy>:
 800df12:	440a      	add	r2, r1
 800df14:	4291      	cmp	r1, r2
 800df16:	f100 33ff 	add.w	r3, r0, #4294967295
 800df1a:	d100      	bne.n	800df1e <memcpy+0xc>
 800df1c:	4770      	bx	lr
 800df1e:	b510      	push	{r4, lr}
 800df20:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df24:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df28:	4291      	cmp	r1, r2
 800df2a:	d1f9      	bne.n	800df20 <memcpy+0xe>
 800df2c:	bd10      	pop	{r4, pc}
	...

0800df30 <nan>:
 800df30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800df38 <nan+0x8>
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop
 800df38:	00000000 	.word	0x00000000
 800df3c:	7ff80000 	.word	0x7ff80000

0800df40 <nanf>:
 800df40:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800df48 <nanf+0x8>
 800df44:	4770      	bx	lr
 800df46:	bf00      	nop
 800df48:	7fc00000 	.word	0x7fc00000

0800df4c <quorem>:
 800df4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df50:	6903      	ldr	r3, [r0, #16]
 800df52:	690c      	ldr	r4, [r1, #16]
 800df54:	42a3      	cmp	r3, r4
 800df56:	4607      	mov	r7, r0
 800df58:	db7e      	blt.n	800e058 <quorem+0x10c>
 800df5a:	3c01      	subs	r4, #1
 800df5c:	f101 0814 	add.w	r8, r1, #20
 800df60:	00a3      	lsls	r3, r4, #2
 800df62:	f100 0514 	add.w	r5, r0, #20
 800df66:	9300      	str	r3, [sp, #0]
 800df68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800df6c:	9301      	str	r3, [sp, #4]
 800df6e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800df72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800df76:	3301      	adds	r3, #1
 800df78:	429a      	cmp	r2, r3
 800df7a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800df7e:	fbb2 f6f3 	udiv	r6, r2, r3
 800df82:	d32e      	bcc.n	800dfe2 <quorem+0x96>
 800df84:	f04f 0a00 	mov.w	sl, #0
 800df88:	46c4      	mov	ip, r8
 800df8a:	46ae      	mov	lr, r5
 800df8c:	46d3      	mov	fp, sl
 800df8e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800df92:	b298      	uxth	r0, r3
 800df94:	fb06 a000 	mla	r0, r6, r0, sl
 800df98:	0c02      	lsrs	r2, r0, #16
 800df9a:	0c1b      	lsrs	r3, r3, #16
 800df9c:	fb06 2303 	mla	r3, r6, r3, r2
 800dfa0:	f8de 2000 	ldr.w	r2, [lr]
 800dfa4:	b280      	uxth	r0, r0
 800dfa6:	b292      	uxth	r2, r2
 800dfa8:	1a12      	subs	r2, r2, r0
 800dfaa:	445a      	add	r2, fp
 800dfac:	f8de 0000 	ldr.w	r0, [lr]
 800dfb0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dfba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dfbe:	b292      	uxth	r2, r2
 800dfc0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dfc4:	45e1      	cmp	r9, ip
 800dfc6:	f84e 2b04 	str.w	r2, [lr], #4
 800dfca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dfce:	d2de      	bcs.n	800df8e <quorem+0x42>
 800dfd0:	9b00      	ldr	r3, [sp, #0]
 800dfd2:	58eb      	ldr	r3, [r5, r3]
 800dfd4:	b92b      	cbnz	r3, 800dfe2 <quorem+0x96>
 800dfd6:	9b01      	ldr	r3, [sp, #4]
 800dfd8:	3b04      	subs	r3, #4
 800dfda:	429d      	cmp	r5, r3
 800dfdc:	461a      	mov	r2, r3
 800dfde:	d32f      	bcc.n	800e040 <quorem+0xf4>
 800dfe0:	613c      	str	r4, [r7, #16]
 800dfe2:	4638      	mov	r0, r7
 800dfe4:	f001 fd10 	bl	800fa08 <__mcmp>
 800dfe8:	2800      	cmp	r0, #0
 800dfea:	db25      	blt.n	800e038 <quorem+0xec>
 800dfec:	4629      	mov	r1, r5
 800dfee:	2000      	movs	r0, #0
 800dff0:	f858 2b04 	ldr.w	r2, [r8], #4
 800dff4:	f8d1 c000 	ldr.w	ip, [r1]
 800dff8:	fa1f fe82 	uxth.w	lr, r2
 800dffc:	fa1f f38c 	uxth.w	r3, ip
 800e000:	eba3 030e 	sub.w	r3, r3, lr
 800e004:	4403      	add	r3, r0
 800e006:	0c12      	lsrs	r2, r2, #16
 800e008:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e00c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e010:	b29b      	uxth	r3, r3
 800e012:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e016:	45c1      	cmp	r9, r8
 800e018:	f841 3b04 	str.w	r3, [r1], #4
 800e01c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e020:	d2e6      	bcs.n	800dff0 <quorem+0xa4>
 800e022:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e026:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e02a:	b922      	cbnz	r2, 800e036 <quorem+0xea>
 800e02c:	3b04      	subs	r3, #4
 800e02e:	429d      	cmp	r5, r3
 800e030:	461a      	mov	r2, r3
 800e032:	d30b      	bcc.n	800e04c <quorem+0x100>
 800e034:	613c      	str	r4, [r7, #16]
 800e036:	3601      	adds	r6, #1
 800e038:	4630      	mov	r0, r6
 800e03a:	b003      	add	sp, #12
 800e03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e040:	6812      	ldr	r2, [r2, #0]
 800e042:	3b04      	subs	r3, #4
 800e044:	2a00      	cmp	r2, #0
 800e046:	d1cb      	bne.n	800dfe0 <quorem+0x94>
 800e048:	3c01      	subs	r4, #1
 800e04a:	e7c6      	b.n	800dfda <quorem+0x8e>
 800e04c:	6812      	ldr	r2, [r2, #0]
 800e04e:	3b04      	subs	r3, #4
 800e050:	2a00      	cmp	r2, #0
 800e052:	d1ef      	bne.n	800e034 <quorem+0xe8>
 800e054:	3c01      	subs	r4, #1
 800e056:	e7ea      	b.n	800e02e <quorem+0xe2>
 800e058:	2000      	movs	r0, #0
 800e05a:	e7ee      	b.n	800e03a <quorem+0xee>
 800e05c:	0000      	movs	r0, r0
	...

0800e060 <_dtoa_r>:
 800e060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e064:	69c7      	ldr	r7, [r0, #28]
 800e066:	b099      	sub	sp, #100	@ 0x64
 800e068:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e06c:	ec55 4b10 	vmov	r4, r5, d0
 800e070:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e072:	9109      	str	r1, [sp, #36]	@ 0x24
 800e074:	4683      	mov	fp, r0
 800e076:	920e      	str	r2, [sp, #56]	@ 0x38
 800e078:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e07a:	b97f      	cbnz	r7, 800e09c <_dtoa_r+0x3c>
 800e07c:	2010      	movs	r0, #16
 800e07e:	f001 f937 	bl	800f2f0 <malloc>
 800e082:	4602      	mov	r2, r0
 800e084:	f8cb 001c 	str.w	r0, [fp, #28]
 800e088:	b920      	cbnz	r0, 800e094 <_dtoa_r+0x34>
 800e08a:	4ba7      	ldr	r3, [pc, #668]	@ (800e328 <_dtoa_r+0x2c8>)
 800e08c:	21ef      	movs	r1, #239	@ 0xef
 800e08e:	48a7      	ldr	r0, [pc, #668]	@ (800e32c <_dtoa_r+0x2cc>)
 800e090:	f002 f95e 	bl	8010350 <__assert_func>
 800e094:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e098:	6007      	str	r7, [r0, #0]
 800e09a:	60c7      	str	r7, [r0, #12]
 800e09c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e0a0:	6819      	ldr	r1, [r3, #0]
 800e0a2:	b159      	cbz	r1, 800e0bc <_dtoa_r+0x5c>
 800e0a4:	685a      	ldr	r2, [r3, #4]
 800e0a6:	604a      	str	r2, [r1, #4]
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	4093      	lsls	r3, r2
 800e0ac:	608b      	str	r3, [r1, #8]
 800e0ae:	4658      	mov	r0, fp
 800e0b0:	f001 fa26 	bl	800f500 <_Bfree>
 800e0b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	601a      	str	r2, [r3, #0]
 800e0bc:	1e2b      	subs	r3, r5, #0
 800e0be:	bfb9      	ittee	lt
 800e0c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e0c4:	9303      	strlt	r3, [sp, #12]
 800e0c6:	2300      	movge	r3, #0
 800e0c8:	6033      	strge	r3, [r6, #0]
 800e0ca:	9f03      	ldr	r7, [sp, #12]
 800e0cc:	4b98      	ldr	r3, [pc, #608]	@ (800e330 <_dtoa_r+0x2d0>)
 800e0ce:	bfbc      	itt	lt
 800e0d0:	2201      	movlt	r2, #1
 800e0d2:	6032      	strlt	r2, [r6, #0]
 800e0d4:	43bb      	bics	r3, r7
 800e0d6:	d112      	bne.n	800e0fe <_dtoa_r+0x9e>
 800e0d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e0da:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e0de:	6013      	str	r3, [r2, #0]
 800e0e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e0e4:	4323      	orrs	r3, r4
 800e0e6:	f000 854d 	beq.w	800eb84 <_dtoa_r+0xb24>
 800e0ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e0ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e344 <_dtoa_r+0x2e4>
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	f000 854f 	beq.w	800eb94 <_dtoa_r+0xb34>
 800e0f6:	f10a 0303 	add.w	r3, sl, #3
 800e0fa:	f000 bd49 	b.w	800eb90 <_dtoa_r+0xb30>
 800e0fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e102:	2200      	movs	r2, #0
 800e104:	ec51 0b17 	vmov	r0, r1, d7
 800e108:	2300      	movs	r3, #0
 800e10a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e10e:	f7f2 fd03 	bl	8000b18 <__aeabi_dcmpeq>
 800e112:	4680      	mov	r8, r0
 800e114:	b158      	cbz	r0, 800e12e <_dtoa_r+0xce>
 800e116:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e118:	2301      	movs	r3, #1
 800e11a:	6013      	str	r3, [r2, #0]
 800e11c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e11e:	b113      	cbz	r3, 800e126 <_dtoa_r+0xc6>
 800e120:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e122:	4b84      	ldr	r3, [pc, #528]	@ (800e334 <_dtoa_r+0x2d4>)
 800e124:	6013      	str	r3, [r2, #0]
 800e126:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e348 <_dtoa_r+0x2e8>
 800e12a:	f000 bd33 	b.w	800eb94 <_dtoa_r+0xb34>
 800e12e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e132:	aa16      	add	r2, sp, #88	@ 0x58
 800e134:	a917      	add	r1, sp, #92	@ 0x5c
 800e136:	4658      	mov	r0, fp
 800e138:	f001 fd86 	bl	800fc48 <__d2b>
 800e13c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e140:	4681      	mov	r9, r0
 800e142:	2e00      	cmp	r6, #0
 800e144:	d077      	beq.n	800e236 <_dtoa_r+0x1d6>
 800e146:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e148:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e14c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e150:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e154:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e158:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e15c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e160:	4619      	mov	r1, r3
 800e162:	2200      	movs	r2, #0
 800e164:	4b74      	ldr	r3, [pc, #464]	@ (800e338 <_dtoa_r+0x2d8>)
 800e166:	f7f2 f8b7 	bl	80002d8 <__aeabi_dsub>
 800e16a:	a369      	add	r3, pc, #420	@ (adr r3, 800e310 <_dtoa_r+0x2b0>)
 800e16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e170:	f7f2 fa6a 	bl	8000648 <__aeabi_dmul>
 800e174:	a368      	add	r3, pc, #416	@ (adr r3, 800e318 <_dtoa_r+0x2b8>)
 800e176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e17a:	f7f2 f8af 	bl	80002dc <__adddf3>
 800e17e:	4604      	mov	r4, r0
 800e180:	4630      	mov	r0, r6
 800e182:	460d      	mov	r5, r1
 800e184:	f7f2 f9f6 	bl	8000574 <__aeabi_i2d>
 800e188:	a365      	add	r3, pc, #404	@ (adr r3, 800e320 <_dtoa_r+0x2c0>)
 800e18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e18e:	f7f2 fa5b 	bl	8000648 <__aeabi_dmul>
 800e192:	4602      	mov	r2, r0
 800e194:	460b      	mov	r3, r1
 800e196:	4620      	mov	r0, r4
 800e198:	4629      	mov	r1, r5
 800e19a:	f7f2 f89f 	bl	80002dc <__adddf3>
 800e19e:	4604      	mov	r4, r0
 800e1a0:	460d      	mov	r5, r1
 800e1a2:	f7f2 fd01 	bl	8000ba8 <__aeabi_d2iz>
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	4607      	mov	r7, r0
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	4620      	mov	r0, r4
 800e1ae:	4629      	mov	r1, r5
 800e1b0:	f7f2 fcbc 	bl	8000b2c <__aeabi_dcmplt>
 800e1b4:	b140      	cbz	r0, 800e1c8 <_dtoa_r+0x168>
 800e1b6:	4638      	mov	r0, r7
 800e1b8:	f7f2 f9dc 	bl	8000574 <__aeabi_i2d>
 800e1bc:	4622      	mov	r2, r4
 800e1be:	462b      	mov	r3, r5
 800e1c0:	f7f2 fcaa 	bl	8000b18 <__aeabi_dcmpeq>
 800e1c4:	b900      	cbnz	r0, 800e1c8 <_dtoa_r+0x168>
 800e1c6:	3f01      	subs	r7, #1
 800e1c8:	2f16      	cmp	r7, #22
 800e1ca:	d851      	bhi.n	800e270 <_dtoa_r+0x210>
 800e1cc:	4b5b      	ldr	r3, [pc, #364]	@ (800e33c <_dtoa_r+0x2dc>)
 800e1ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e1da:	f7f2 fca7 	bl	8000b2c <__aeabi_dcmplt>
 800e1de:	2800      	cmp	r0, #0
 800e1e0:	d048      	beq.n	800e274 <_dtoa_r+0x214>
 800e1e2:	3f01      	subs	r7, #1
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	9312      	str	r3, [sp, #72]	@ 0x48
 800e1e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e1ea:	1b9b      	subs	r3, r3, r6
 800e1ec:	1e5a      	subs	r2, r3, #1
 800e1ee:	bf44      	itt	mi
 800e1f0:	f1c3 0801 	rsbmi	r8, r3, #1
 800e1f4:	2300      	movmi	r3, #0
 800e1f6:	9208      	str	r2, [sp, #32]
 800e1f8:	bf54      	ite	pl
 800e1fa:	f04f 0800 	movpl.w	r8, #0
 800e1fe:	9308      	strmi	r3, [sp, #32]
 800e200:	2f00      	cmp	r7, #0
 800e202:	db39      	blt.n	800e278 <_dtoa_r+0x218>
 800e204:	9b08      	ldr	r3, [sp, #32]
 800e206:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e208:	443b      	add	r3, r7
 800e20a:	9308      	str	r3, [sp, #32]
 800e20c:	2300      	movs	r3, #0
 800e20e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e212:	2b09      	cmp	r3, #9
 800e214:	d864      	bhi.n	800e2e0 <_dtoa_r+0x280>
 800e216:	2b05      	cmp	r3, #5
 800e218:	bfc4      	itt	gt
 800e21a:	3b04      	subgt	r3, #4
 800e21c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e21e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e220:	f1a3 0302 	sub.w	r3, r3, #2
 800e224:	bfcc      	ite	gt
 800e226:	2400      	movgt	r4, #0
 800e228:	2401      	movle	r4, #1
 800e22a:	2b03      	cmp	r3, #3
 800e22c:	d863      	bhi.n	800e2f6 <_dtoa_r+0x296>
 800e22e:	e8df f003 	tbb	[pc, r3]
 800e232:	372a      	.short	0x372a
 800e234:	5535      	.short	0x5535
 800e236:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e23a:	441e      	add	r6, r3
 800e23c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e240:	2b20      	cmp	r3, #32
 800e242:	bfc1      	itttt	gt
 800e244:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e248:	409f      	lslgt	r7, r3
 800e24a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e24e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e252:	bfd6      	itet	le
 800e254:	f1c3 0320 	rsble	r3, r3, #32
 800e258:	ea47 0003 	orrgt.w	r0, r7, r3
 800e25c:	fa04 f003 	lslle.w	r0, r4, r3
 800e260:	f7f2 f978 	bl	8000554 <__aeabi_ui2d>
 800e264:	2201      	movs	r2, #1
 800e266:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e26a:	3e01      	subs	r6, #1
 800e26c:	9214      	str	r2, [sp, #80]	@ 0x50
 800e26e:	e777      	b.n	800e160 <_dtoa_r+0x100>
 800e270:	2301      	movs	r3, #1
 800e272:	e7b8      	b.n	800e1e6 <_dtoa_r+0x186>
 800e274:	9012      	str	r0, [sp, #72]	@ 0x48
 800e276:	e7b7      	b.n	800e1e8 <_dtoa_r+0x188>
 800e278:	427b      	negs	r3, r7
 800e27a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e27c:	2300      	movs	r3, #0
 800e27e:	eba8 0807 	sub.w	r8, r8, r7
 800e282:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e284:	e7c4      	b.n	800e210 <_dtoa_r+0x1b0>
 800e286:	2300      	movs	r3, #0
 800e288:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e28a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	dc35      	bgt.n	800e2fc <_dtoa_r+0x29c>
 800e290:	2301      	movs	r3, #1
 800e292:	9300      	str	r3, [sp, #0]
 800e294:	9307      	str	r3, [sp, #28]
 800e296:	461a      	mov	r2, r3
 800e298:	920e      	str	r2, [sp, #56]	@ 0x38
 800e29a:	e00b      	b.n	800e2b4 <_dtoa_r+0x254>
 800e29c:	2301      	movs	r3, #1
 800e29e:	e7f3      	b.n	800e288 <_dtoa_r+0x228>
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e2a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2a6:	18fb      	adds	r3, r7, r3
 800e2a8:	9300      	str	r3, [sp, #0]
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	2b01      	cmp	r3, #1
 800e2ae:	9307      	str	r3, [sp, #28]
 800e2b0:	bfb8      	it	lt
 800e2b2:	2301      	movlt	r3, #1
 800e2b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e2b8:	2100      	movs	r1, #0
 800e2ba:	2204      	movs	r2, #4
 800e2bc:	f102 0514 	add.w	r5, r2, #20
 800e2c0:	429d      	cmp	r5, r3
 800e2c2:	d91f      	bls.n	800e304 <_dtoa_r+0x2a4>
 800e2c4:	6041      	str	r1, [r0, #4]
 800e2c6:	4658      	mov	r0, fp
 800e2c8:	f001 f8da 	bl	800f480 <_Balloc>
 800e2cc:	4682      	mov	sl, r0
 800e2ce:	2800      	cmp	r0, #0
 800e2d0:	d13c      	bne.n	800e34c <_dtoa_r+0x2ec>
 800e2d2:	4b1b      	ldr	r3, [pc, #108]	@ (800e340 <_dtoa_r+0x2e0>)
 800e2d4:	4602      	mov	r2, r0
 800e2d6:	f240 11af 	movw	r1, #431	@ 0x1af
 800e2da:	e6d8      	b.n	800e08e <_dtoa_r+0x2e>
 800e2dc:	2301      	movs	r3, #1
 800e2de:	e7e0      	b.n	800e2a2 <_dtoa_r+0x242>
 800e2e0:	2401      	movs	r4, #1
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e2e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e2ec:	9300      	str	r3, [sp, #0]
 800e2ee:	9307      	str	r3, [sp, #28]
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	2312      	movs	r3, #18
 800e2f4:	e7d0      	b.n	800e298 <_dtoa_r+0x238>
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e2fa:	e7f5      	b.n	800e2e8 <_dtoa_r+0x288>
 800e2fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2fe:	9300      	str	r3, [sp, #0]
 800e300:	9307      	str	r3, [sp, #28]
 800e302:	e7d7      	b.n	800e2b4 <_dtoa_r+0x254>
 800e304:	3101      	adds	r1, #1
 800e306:	0052      	lsls	r2, r2, #1
 800e308:	e7d8      	b.n	800e2bc <_dtoa_r+0x25c>
 800e30a:	bf00      	nop
 800e30c:	f3af 8000 	nop.w
 800e310:	636f4361 	.word	0x636f4361
 800e314:	3fd287a7 	.word	0x3fd287a7
 800e318:	8b60c8b3 	.word	0x8b60c8b3
 800e31c:	3fc68a28 	.word	0x3fc68a28
 800e320:	509f79fb 	.word	0x509f79fb
 800e324:	3fd34413 	.word	0x3fd34413
 800e328:	08010e56 	.word	0x08010e56
 800e32c:	08010e6d 	.word	0x08010e6d
 800e330:	7ff00000 	.word	0x7ff00000
 800e334:	08010e19 	.word	0x08010e19
 800e338:	3ff80000 	.word	0x3ff80000
 800e33c:	08010fc8 	.word	0x08010fc8
 800e340:	08010ec5 	.word	0x08010ec5
 800e344:	08010e52 	.word	0x08010e52
 800e348:	08010e18 	.word	0x08010e18
 800e34c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e350:	6018      	str	r0, [r3, #0]
 800e352:	9b07      	ldr	r3, [sp, #28]
 800e354:	2b0e      	cmp	r3, #14
 800e356:	f200 80a4 	bhi.w	800e4a2 <_dtoa_r+0x442>
 800e35a:	2c00      	cmp	r4, #0
 800e35c:	f000 80a1 	beq.w	800e4a2 <_dtoa_r+0x442>
 800e360:	2f00      	cmp	r7, #0
 800e362:	dd33      	ble.n	800e3cc <_dtoa_r+0x36c>
 800e364:	4bad      	ldr	r3, [pc, #692]	@ (800e61c <_dtoa_r+0x5bc>)
 800e366:	f007 020f 	and.w	r2, r7, #15
 800e36a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e36e:	ed93 7b00 	vldr	d7, [r3]
 800e372:	05f8      	lsls	r0, r7, #23
 800e374:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e378:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e37c:	d516      	bpl.n	800e3ac <_dtoa_r+0x34c>
 800e37e:	4ba8      	ldr	r3, [pc, #672]	@ (800e620 <_dtoa_r+0x5c0>)
 800e380:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e384:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e388:	f7f2 fa88 	bl	800089c <__aeabi_ddiv>
 800e38c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e390:	f004 040f 	and.w	r4, r4, #15
 800e394:	2603      	movs	r6, #3
 800e396:	4da2      	ldr	r5, [pc, #648]	@ (800e620 <_dtoa_r+0x5c0>)
 800e398:	b954      	cbnz	r4, 800e3b0 <_dtoa_r+0x350>
 800e39a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e39e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3a2:	f7f2 fa7b 	bl	800089c <__aeabi_ddiv>
 800e3a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3aa:	e028      	b.n	800e3fe <_dtoa_r+0x39e>
 800e3ac:	2602      	movs	r6, #2
 800e3ae:	e7f2      	b.n	800e396 <_dtoa_r+0x336>
 800e3b0:	07e1      	lsls	r1, r4, #31
 800e3b2:	d508      	bpl.n	800e3c6 <_dtoa_r+0x366>
 800e3b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e3b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e3bc:	f7f2 f944 	bl	8000648 <__aeabi_dmul>
 800e3c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e3c4:	3601      	adds	r6, #1
 800e3c6:	1064      	asrs	r4, r4, #1
 800e3c8:	3508      	adds	r5, #8
 800e3ca:	e7e5      	b.n	800e398 <_dtoa_r+0x338>
 800e3cc:	f000 80d2 	beq.w	800e574 <_dtoa_r+0x514>
 800e3d0:	427c      	negs	r4, r7
 800e3d2:	4b92      	ldr	r3, [pc, #584]	@ (800e61c <_dtoa_r+0x5bc>)
 800e3d4:	4d92      	ldr	r5, [pc, #584]	@ (800e620 <_dtoa_r+0x5c0>)
 800e3d6:	f004 020f 	and.w	r2, r4, #15
 800e3da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e3e6:	f7f2 f92f 	bl	8000648 <__aeabi_dmul>
 800e3ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3ee:	1124      	asrs	r4, r4, #4
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	2602      	movs	r6, #2
 800e3f4:	2c00      	cmp	r4, #0
 800e3f6:	f040 80b2 	bne.w	800e55e <_dtoa_r+0x4fe>
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d1d3      	bne.n	800e3a6 <_dtoa_r+0x346>
 800e3fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e400:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e404:	2b00      	cmp	r3, #0
 800e406:	f000 80b7 	beq.w	800e578 <_dtoa_r+0x518>
 800e40a:	4b86      	ldr	r3, [pc, #536]	@ (800e624 <_dtoa_r+0x5c4>)
 800e40c:	2200      	movs	r2, #0
 800e40e:	4620      	mov	r0, r4
 800e410:	4629      	mov	r1, r5
 800e412:	f7f2 fb8b 	bl	8000b2c <__aeabi_dcmplt>
 800e416:	2800      	cmp	r0, #0
 800e418:	f000 80ae 	beq.w	800e578 <_dtoa_r+0x518>
 800e41c:	9b07      	ldr	r3, [sp, #28]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	f000 80aa 	beq.w	800e578 <_dtoa_r+0x518>
 800e424:	9b00      	ldr	r3, [sp, #0]
 800e426:	2b00      	cmp	r3, #0
 800e428:	dd37      	ble.n	800e49a <_dtoa_r+0x43a>
 800e42a:	1e7b      	subs	r3, r7, #1
 800e42c:	9304      	str	r3, [sp, #16]
 800e42e:	4620      	mov	r0, r4
 800e430:	4b7d      	ldr	r3, [pc, #500]	@ (800e628 <_dtoa_r+0x5c8>)
 800e432:	2200      	movs	r2, #0
 800e434:	4629      	mov	r1, r5
 800e436:	f7f2 f907 	bl	8000648 <__aeabi_dmul>
 800e43a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e43e:	9c00      	ldr	r4, [sp, #0]
 800e440:	3601      	adds	r6, #1
 800e442:	4630      	mov	r0, r6
 800e444:	f7f2 f896 	bl	8000574 <__aeabi_i2d>
 800e448:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e44c:	f7f2 f8fc 	bl	8000648 <__aeabi_dmul>
 800e450:	4b76      	ldr	r3, [pc, #472]	@ (800e62c <_dtoa_r+0x5cc>)
 800e452:	2200      	movs	r2, #0
 800e454:	f7f1 ff42 	bl	80002dc <__adddf3>
 800e458:	4605      	mov	r5, r0
 800e45a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e45e:	2c00      	cmp	r4, #0
 800e460:	f040 808d 	bne.w	800e57e <_dtoa_r+0x51e>
 800e464:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e468:	4b71      	ldr	r3, [pc, #452]	@ (800e630 <_dtoa_r+0x5d0>)
 800e46a:	2200      	movs	r2, #0
 800e46c:	f7f1 ff34 	bl	80002d8 <__aeabi_dsub>
 800e470:	4602      	mov	r2, r0
 800e472:	460b      	mov	r3, r1
 800e474:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e478:	462a      	mov	r2, r5
 800e47a:	4633      	mov	r3, r6
 800e47c:	f7f2 fb74 	bl	8000b68 <__aeabi_dcmpgt>
 800e480:	2800      	cmp	r0, #0
 800e482:	f040 828b 	bne.w	800e99c <_dtoa_r+0x93c>
 800e486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e48a:	462a      	mov	r2, r5
 800e48c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e490:	f7f2 fb4c 	bl	8000b2c <__aeabi_dcmplt>
 800e494:	2800      	cmp	r0, #0
 800e496:	f040 8128 	bne.w	800e6ea <_dtoa_r+0x68a>
 800e49a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e49e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e4a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	f2c0 815a 	blt.w	800e75e <_dtoa_r+0x6fe>
 800e4aa:	2f0e      	cmp	r7, #14
 800e4ac:	f300 8157 	bgt.w	800e75e <_dtoa_r+0x6fe>
 800e4b0:	4b5a      	ldr	r3, [pc, #360]	@ (800e61c <_dtoa_r+0x5bc>)
 800e4b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e4b6:	ed93 7b00 	vldr	d7, [r3]
 800e4ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	ed8d 7b00 	vstr	d7, [sp]
 800e4c2:	da03      	bge.n	800e4cc <_dtoa_r+0x46c>
 800e4c4:	9b07      	ldr	r3, [sp, #28]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	f340 8101 	ble.w	800e6ce <_dtoa_r+0x66e>
 800e4cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e4d0:	4656      	mov	r6, sl
 800e4d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4d6:	4620      	mov	r0, r4
 800e4d8:	4629      	mov	r1, r5
 800e4da:	f7f2 f9df 	bl	800089c <__aeabi_ddiv>
 800e4de:	f7f2 fb63 	bl	8000ba8 <__aeabi_d2iz>
 800e4e2:	4680      	mov	r8, r0
 800e4e4:	f7f2 f846 	bl	8000574 <__aeabi_i2d>
 800e4e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4ec:	f7f2 f8ac 	bl	8000648 <__aeabi_dmul>
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	460b      	mov	r3, r1
 800e4f4:	4620      	mov	r0, r4
 800e4f6:	4629      	mov	r1, r5
 800e4f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e4fc:	f7f1 feec 	bl	80002d8 <__aeabi_dsub>
 800e500:	f806 4b01 	strb.w	r4, [r6], #1
 800e504:	9d07      	ldr	r5, [sp, #28]
 800e506:	eba6 040a 	sub.w	r4, r6, sl
 800e50a:	42a5      	cmp	r5, r4
 800e50c:	4602      	mov	r2, r0
 800e50e:	460b      	mov	r3, r1
 800e510:	f040 8117 	bne.w	800e742 <_dtoa_r+0x6e2>
 800e514:	f7f1 fee2 	bl	80002dc <__adddf3>
 800e518:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e51c:	4604      	mov	r4, r0
 800e51e:	460d      	mov	r5, r1
 800e520:	f7f2 fb22 	bl	8000b68 <__aeabi_dcmpgt>
 800e524:	2800      	cmp	r0, #0
 800e526:	f040 80f9 	bne.w	800e71c <_dtoa_r+0x6bc>
 800e52a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e52e:	4620      	mov	r0, r4
 800e530:	4629      	mov	r1, r5
 800e532:	f7f2 faf1 	bl	8000b18 <__aeabi_dcmpeq>
 800e536:	b118      	cbz	r0, 800e540 <_dtoa_r+0x4e0>
 800e538:	f018 0f01 	tst.w	r8, #1
 800e53c:	f040 80ee 	bne.w	800e71c <_dtoa_r+0x6bc>
 800e540:	4649      	mov	r1, r9
 800e542:	4658      	mov	r0, fp
 800e544:	f000 ffdc 	bl	800f500 <_Bfree>
 800e548:	2300      	movs	r3, #0
 800e54a:	7033      	strb	r3, [r6, #0]
 800e54c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e54e:	3701      	adds	r7, #1
 800e550:	601f      	str	r7, [r3, #0]
 800e552:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e554:	2b00      	cmp	r3, #0
 800e556:	f000 831d 	beq.w	800eb94 <_dtoa_r+0xb34>
 800e55a:	601e      	str	r6, [r3, #0]
 800e55c:	e31a      	b.n	800eb94 <_dtoa_r+0xb34>
 800e55e:	07e2      	lsls	r2, r4, #31
 800e560:	d505      	bpl.n	800e56e <_dtoa_r+0x50e>
 800e562:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e566:	f7f2 f86f 	bl	8000648 <__aeabi_dmul>
 800e56a:	3601      	adds	r6, #1
 800e56c:	2301      	movs	r3, #1
 800e56e:	1064      	asrs	r4, r4, #1
 800e570:	3508      	adds	r5, #8
 800e572:	e73f      	b.n	800e3f4 <_dtoa_r+0x394>
 800e574:	2602      	movs	r6, #2
 800e576:	e742      	b.n	800e3fe <_dtoa_r+0x39e>
 800e578:	9c07      	ldr	r4, [sp, #28]
 800e57a:	9704      	str	r7, [sp, #16]
 800e57c:	e761      	b.n	800e442 <_dtoa_r+0x3e2>
 800e57e:	4b27      	ldr	r3, [pc, #156]	@ (800e61c <_dtoa_r+0x5bc>)
 800e580:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e582:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e586:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e58a:	4454      	add	r4, sl
 800e58c:	2900      	cmp	r1, #0
 800e58e:	d053      	beq.n	800e638 <_dtoa_r+0x5d8>
 800e590:	4928      	ldr	r1, [pc, #160]	@ (800e634 <_dtoa_r+0x5d4>)
 800e592:	2000      	movs	r0, #0
 800e594:	f7f2 f982 	bl	800089c <__aeabi_ddiv>
 800e598:	4633      	mov	r3, r6
 800e59a:	462a      	mov	r2, r5
 800e59c:	f7f1 fe9c 	bl	80002d8 <__aeabi_dsub>
 800e5a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e5a4:	4656      	mov	r6, sl
 800e5a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5aa:	f7f2 fafd 	bl	8000ba8 <__aeabi_d2iz>
 800e5ae:	4605      	mov	r5, r0
 800e5b0:	f7f1 ffe0 	bl	8000574 <__aeabi_i2d>
 800e5b4:	4602      	mov	r2, r0
 800e5b6:	460b      	mov	r3, r1
 800e5b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5bc:	f7f1 fe8c 	bl	80002d8 <__aeabi_dsub>
 800e5c0:	3530      	adds	r5, #48	@ 0x30
 800e5c2:	4602      	mov	r2, r0
 800e5c4:	460b      	mov	r3, r1
 800e5c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e5ca:	f806 5b01 	strb.w	r5, [r6], #1
 800e5ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e5d2:	f7f2 faab 	bl	8000b2c <__aeabi_dcmplt>
 800e5d6:	2800      	cmp	r0, #0
 800e5d8:	d171      	bne.n	800e6be <_dtoa_r+0x65e>
 800e5da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e5de:	4911      	ldr	r1, [pc, #68]	@ (800e624 <_dtoa_r+0x5c4>)
 800e5e0:	2000      	movs	r0, #0
 800e5e2:	f7f1 fe79 	bl	80002d8 <__aeabi_dsub>
 800e5e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e5ea:	f7f2 fa9f 	bl	8000b2c <__aeabi_dcmplt>
 800e5ee:	2800      	cmp	r0, #0
 800e5f0:	f040 8095 	bne.w	800e71e <_dtoa_r+0x6be>
 800e5f4:	42a6      	cmp	r6, r4
 800e5f6:	f43f af50 	beq.w	800e49a <_dtoa_r+0x43a>
 800e5fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e5fe:	4b0a      	ldr	r3, [pc, #40]	@ (800e628 <_dtoa_r+0x5c8>)
 800e600:	2200      	movs	r2, #0
 800e602:	f7f2 f821 	bl	8000648 <__aeabi_dmul>
 800e606:	4b08      	ldr	r3, [pc, #32]	@ (800e628 <_dtoa_r+0x5c8>)
 800e608:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e60c:	2200      	movs	r2, #0
 800e60e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e612:	f7f2 f819 	bl	8000648 <__aeabi_dmul>
 800e616:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e61a:	e7c4      	b.n	800e5a6 <_dtoa_r+0x546>
 800e61c:	08010fc8 	.word	0x08010fc8
 800e620:	08010fa0 	.word	0x08010fa0
 800e624:	3ff00000 	.word	0x3ff00000
 800e628:	40240000 	.word	0x40240000
 800e62c:	401c0000 	.word	0x401c0000
 800e630:	40140000 	.word	0x40140000
 800e634:	3fe00000 	.word	0x3fe00000
 800e638:	4631      	mov	r1, r6
 800e63a:	4628      	mov	r0, r5
 800e63c:	f7f2 f804 	bl	8000648 <__aeabi_dmul>
 800e640:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e644:	9415      	str	r4, [sp, #84]	@ 0x54
 800e646:	4656      	mov	r6, sl
 800e648:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e64c:	f7f2 faac 	bl	8000ba8 <__aeabi_d2iz>
 800e650:	4605      	mov	r5, r0
 800e652:	f7f1 ff8f 	bl	8000574 <__aeabi_i2d>
 800e656:	4602      	mov	r2, r0
 800e658:	460b      	mov	r3, r1
 800e65a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e65e:	f7f1 fe3b 	bl	80002d8 <__aeabi_dsub>
 800e662:	3530      	adds	r5, #48	@ 0x30
 800e664:	f806 5b01 	strb.w	r5, [r6], #1
 800e668:	4602      	mov	r2, r0
 800e66a:	460b      	mov	r3, r1
 800e66c:	42a6      	cmp	r6, r4
 800e66e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e672:	f04f 0200 	mov.w	r2, #0
 800e676:	d124      	bne.n	800e6c2 <_dtoa_r+0x662>
 800e678:	4bac      	ldr	r3, [pc, #688]	@ (800e92c <_dtoa_r+0x8cc>)
 800e67a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e67e:	f7f1 fe2d 	bl	80002dc <__adddf3>
 800e682:	4602      	mov	r2, r0
 800e684:	460b      	mov	r3, r1
 800e686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e68a:	f7f2 fa6d 	bl	8000b68 <__aeabi_dcmpgt>
 800e68e:	2800      	cmp	r0, #0
 800e690:	d145      	bne.n	800e71e <_dtoa_r+0x6be>
 800e692:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e696:	49a5      	ldr	r1, [pc, #660]	@ (800e92c <_dtoa_r+0x8cc>)
 800e698:	2000      	movs	r0, #0
 800e69a:	f7f1 fe1d 	bl	80002d8 <__aeabi_dsub>
 800e69e:	4602      	mov	r2, r0
 800e6a0:	460b      	mov	r3, r1
 800e6a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6a6:	f7f2 fa41 	bl	8000b2c <__aeabi_dcmplt>
 800e6aa:	2800      	cmp	r0, #0
 800e6ac:	f43f aef5 	beq.w	800e49a <_dtoa_r+0x43a>
 800e6b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e6b2:	1e73      	subs	r3, r6, #1
 800e6b4:	9315      	str	r3, [sp, #84]	@ 0x54
 800e6b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e6ba:	2b30      	cmp	r3, #48	@ 0x30
 800e6bc:	d0f8      	beq.n	800e6b0 <_dtoa_r+0x650>
 800e6be:	9f04      	ldr	r7, [sp, #16]
 800e6c0:	e73e      	b.n	800e540 <_dtoa_r+0x4e0>
 800e6c2:	4b9b      	ldr	r3, [pc, #620]	@ (800e930 <_dtoa_r+0x8d0>)
 800e6c4:	f7f1 ffc0 	bl	8000648 <__aeabi_dmul>
 800e6c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6cc:	e7bc      	b.n	800e648 <_dtoa_r+0x5e8>
 800e6ce:	d10c      	bne.n	800e6ea <_dtoa_r+0x68a>
 800e6d0:	4b98      	ldr	r3, [pc, #608]	@ (800e934 <_dtoa_r+0x8d4>)
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e6d8:	f7f1 ffb6 	bl	8000648 <__aeabi_dmul>
 800e6dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e6e0:	f7f2 fa38 	bl	8000b54 <__aeabi_dcmpge>
 800e6e4:	2800      	cmp	r0, #0
 800e6e6:	f000 8157 	beq.w	800e998 <_dtoa_r+0x938>
 800e6ea:	2400      	movs	r4, #0
 800e6ec:	4625      	mov	r5, r4
 800e6ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6f0:	43db      	mvns	r3, r3
 800e6f2:	9304      	str	r3, [sp, #16]
 800e6f4:	4656      	mov	r6, sl
 800e6f6:	2700      	movs	r7, #0
 800e6f8:	4621      	mov	r1, r4
 800e6fa:	4658      	mov	r0, fp
 800e6fc:	f000 ff00 	bl	800f500 <_Bfree>
 800e700:	2d00      	cmp	r5, #0
 800e702:	d0dc      	beq.n	800e6be <_dtoa_r+0x65e>
 800e704:	b12f      	cbz	r7, 800e712 <_dtoa_r+0x6b2>
 800e706:	42af      	cmp	r7, r5
 800e708:	d003      	beq.n	800e712 <_dtoa_r+0x6b2>
 800e70a:	4639      	mov	r1, r7
 800e70c:	4658      	mov	r0, fp
 800e70e:	f000 fef7 	bl	800f500 <_Bfree>
 800e712:	4629      	mov	r1, r5
 800e714:	4658      	mov	r0, fp
 800e716:	f000 fef3 	bl	800f500 <_Bfree>
 800e71a:	e7d0      	b.n	800e6be <_dtoa_r+0x65e>
 800e71c:	9704      	str	r7, [sp, #16]
 800e71e:	4633      	mov	r3, r6
 800e720:	461e      	mov	r6, r3
 800e722:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e726:	2a39      	cmp	r2, #57	@ 0x39
 800e728:	d107      	bne.n	800e73a <_dtoa_r+0x6da>
 800e72a:	459a      	cmp	sl, r3
 800e72c:	d1f8      	bne.n	800e720 <_dtoa_r+0x6c0>
 800e72e:	9a04      	ldr	r2, [sp, #16]
 800e730:	3201      	adds	r2, #1
 800e732:	9204      	str	r2, [sp, #16]
 800e734:	2230      	movs	r2, #48	@ 0x30
 800e736:	f88a 2000 	strb.w	r2, [sl]
 800e73a:	781a      	ldrb	r2, [r3, #0]
 800e73c:	3201      	adds	r2, #1
 800e73e:	701a      	strb	r2, [r3, #0]
 800e740:	e7bd      	b.n	800e6be <_dtoa_r+0x65e>
 800e742:	4b7b      	ldr	r3, [pc, #492]	@ (800e930 <_dtoa_r+0x8d0>)
 800e744:	2200      	movs	r2, #0
 800e746:	f7f1 ff7f 	bl	8000648 <__aeabi_dmul>
 800e74a:	2200      	movs	r2, #0
 800e74c:	2300      	movs	r3, #0
 800e74e:	4604      	mov	r4, r0
 800e750:	460d      	mov	r5, r1
 800e752:	f7f2 f9e1 	bl	8000b18 <__aeabi_dcmpeq>
 800e756:	2800      	cmp	r0, #0
 800e758:	f43f aebb 	beq.w	800e4d2 <_dtoa_r+0x472>
 800e75c:	e6f0      	b.n	800e540 <_dtoa_r+0x4e0>
 800e75e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e760:	2a00      	cmp	r2, #0
 800e762:	f000 80db 	beq.w	800e91c <_dtoa_r+0x8bc>
 800e766:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e768:	2a01      	cmp	r2, #1
 800e76a:	f300 80bf 	bgt.w	800e8ec <_dtoa_r+0x88c>
 800e76e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e770:	2a00      	cmp	r2, #0
 800e772:	f000 80b7 	beq.w	800e8e4 <_dtoa_r+0x884>
 800e776:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e77a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e77c:	4646      	mov	r6, r8
 800e77e:	9a08      	ldr	r2, [sp, #32]
 800e780:	2101      	movs	r1, #1
 800e782:	441a      	add	r2, r3
 800e784:	4658      	mov	r0, fp
 800e786:	4498      	add	r8, r3
 800e788:	9208      	str	r2, [sp, #32]
 800e78a:	f000 ffb7 	bl	800f6fc <__i2b>
 800e78e:	4605      	mov	r5, r0
 800e790:	b15e      	cbz	r6, 800e7aa <_dtoa_r+0x74a>
 800e792:	9b08      	ldr	r3, [sp, #32]
 800e794:	2b00      	cmp	r3, #0
 800e796:	dd08      	ble.n	800e7aa <_dtoa_r+0x74a>
 800e798:	42b3      	cmp	r3, r6
 800e79a:	9a08      	ldr	r2, [sp, #32]
 800e79c:	bfa8      	it	ge
 800e79e:	4633      	movge	r3, r6
 800e7a0:	eba8 0803 	sub.w	r8, r8, r3
 800e7a4:	1af6      	subs	r6, r6, r3
 800e7a6:	1ad3      	subs	r3, r2, r3
 800e7a8:	9308      	str	r3, [sp, #32]
 800e7aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7ac:	b1f3      	cbz	r3, 800e7ec <_dtoa_r+0x78c>
 800e7ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	f000 80b7 	beq.w	800e924 <_dtoa_r+0x8c4>
 800e7b6:	b18c      	cbz	r4, 800e7dc <_dtoa_r+0x77c>
 800e7b8:	4629      	mov	r1, r5
 800e7ba:	4622      	mov	r2, r4
 800e7bc:	4658      	mov	r0, fp
 800e7be:	f001 f85d 	bl	800f87c <__pow5mult>
 800e7c2:	464a      	mov	r2, r9
 800e7c4:	4601      	mov	r1, r0
 800e7c6:	4605      	mov	r5, r0
 800e7c8:	4658      	mov	r0, fp
 800e7ca:	f000 ffad 	bl	800f728 <__multiply>
 800e7ce:	4649      	mov	r1, r9
 800e7d0:	9004      	str	r0, [sp, #16]
 800e7d2:	4658      	mov	r0, fp
 800e7d4:	f000 fe94 	bl	800f500 <_Bfree>
 800e7d8:	9b04      	ldr	r3, [sp, #16]
 800e7da:	4699      	mov	r9, r3
 800e7dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7de:	1b1a      	subs	r2, r3, r4
 800e7e0:	d004      	beq.n	800e7ec <_dtoa_r+0x78c>
 800e7e2:	4649      	mov	r1, r9
 800e7e4:	4658      	mov	r0, fp
 800e7e6:	f001 f849 	bl	800f87c <__pow5mult>
 800e7ea:	4681      	mov	r9, r0
 800e7ec:	2101      	movs	r1, #1
 800e7ee:	4658      	mov	r0, fp
 800e7f0:	f000 ff84 	bl	800f6fc <__i2b>
 800e7f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e7f6:	4604      	mov	r4, r0
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	f000 81cf 	beq.w	800eb9c <_dtoa_r+0xb3c>
 800e7fe:	461a      	mov	r2, r3
 800e800:	4601      	mov	r1, r0
 800e802:	4658      	mov	r0, fp
 800e804:	f001 f83a 	bl	800f87c <__pow5mult>
 800e808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e80a:	2b01      	cmp	r3, #1
 800e80c:	4604      	mov	r4, r0
 800e80e:	f300 8095 	bgt.w	800e93c <_dtoa_r+0x8dc>
 800e812:	9b02      	ldr	r3, [sp, #8]
 800e814:	2b00      	cmp	r3, #0
 800e816:	f040 8087 	bne.w	800e928 <_dtoa_r+0x8c8>
 800e81a:	9b03      	ldr	r3, [sp, #12]
 800e81c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e820:	2b00      	cmp	r3, #0
 800e822:	f040 8089 	bne.w	800e938 <_dtoa_r+0x8d8>
 800e826:	9b03      	ldr	r3, [sp, #12]
 800e828:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e82c:	0d1b      	lsrs	r3, r3, #20
 800e82e:	051b      	lsls	r3, r3, #20
 800e830:	b12b      	cbz	r3, 800e83e <_dtoa_r+0x7de>
 800e832:	9b08      	ldr	r3, [sp, #32]
 800e834:	3301      	adds	r3, #1
 800e836:	9308      	str	r3, [sp, #32]
 800e838:	f108 0801 	add.w	r8, r8, #1
 800e83c:	2301      	movs	r3, #1
 800e83e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e840:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e842:	2b00      	cmp	r3, #0
 800e844:	f000 81b0 	beq.w	800eba8 <_dtoa_r+0xb48>
 800e848:	6923      	ldr	r3, [r4, #16]
 800e84a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e84e:	6918      	ldr	r0, [r3, #16]
 800e850:	f000 ff08 	bl	800f664 <__hi0bits>
 800e854:	f1c0 0020 	rsb	r0, r0, #32
 800e858:	9b08      	ldr	r3, [sp, #32]
 800e85a:	4418      	add	r0, r3
 800e85c:	f010 001f 	ands.w	r0, r0, #31
 800e860:	d077      	beq.n	800e952 <_dtoa_r+0x8f2>
 800e862:	f1c0 0320 	rsb	r3, r0, #32
 800e866:	2b04      	cmp	r3, #4
 800e868:	dd6b      	ble.n	800e942 <_dtoa_r+0x8e2>
 800e86a:	9b08      	ldr	r3, [sp, #32]
 800e86c:	f1c0 001c 	rsb	r0, r0, #28
 800e870:	4403      	add	r3, r0
 800e872:	4480      	add	r8, r0
 800e874:	4406      	add	r6, r0
 800e876:	9308      	str	r3, [sp, #32]
 800e878:	f1b8 0f00 	cmp.w	r8, #0
 800e87c:	dd05      	ble.n	800e88a <_dtoa_r+0x82a>
 800e87e:	4649      	mov	r1, r9
 800e880:	4642      	mov	r2, r8
 800e882:	4658      	mov	r0, fp
 800e884:	f001 f854 	bl	800f930 <__lshift>
 800e888:	4681      	mov	r9, r0
 800e88a:	9b08      	ldr	r3, [sp, #32]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	dd05      	ble.n	800e89c <_dtoa_r+0x83c>
 800e890:	4621      	mov	r1, r4
 800e892:	461a      	mov	r2, r3
 800e894:	4658      	mov	r0, fp
 800e896:	f001 f84b 	bl	800f930 <__lshift>
 800e89a:	4604      	mov	r4, r0
 800e89c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d059      	beq.n	800e956 <_dtoa_r+0x8f6>
 800e8a2:	4621      	mov	r1, r4
 800e8a4:	4648      	mov	r0, r9
 800e8a6:	f001 f8af 	bl	800fa08 <__mcmp>
 800e8aa:	2800      	cmp	r0, #0
 800e8ac:	da53      	bge.n	800e956 <_dtoa_r+0x8f6>
 800e8ae:	1e7b      	subs	r3, r7, #1
 800e8b0:	9304      	str	r3, [sp, #16]
 800e8b2:	4649      	mov	r1, r9
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	220a      	movs	r2, #10
 800e8b8:	4658      	mov	r0, fp
 800e8ba:	f000 fe43 	bl	800f544 <__multadd>
 800e8be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e8c0:	4681      	mov	r9, r0
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	f000 8172 	beq.w	800ebac <_dtoa_r+0xb4c>
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	4629      	mov	r1, r5
 800e8cc:	220a      	movs	r2, #10
 800e8ce:	4658      	mov	r0, fp
 800e8d0:	f000 fe38 	bl	800f544 <__multadd>
 800e8d4:	9b00      	ldr	r3, [sp, #0]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	4605      	mov	r5, r0
 800e8da:	dc67      	bgt.n	800e9ac <_dtoa_r+0x94c>
 800e8dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8de:	2b02      	cmp	r3, #2
 800e8e0:	dc41      	bgt.n	800e966 <_dtoa_r+0x906>
 800e8e2:	e063      	b.n	800e9ac <_dtoa_r+0x94c>
 800e8e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e8e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e8ea:	e746      	b.n	800e77a <_dtoa_r+0x71a>
 800e8ec:	9b07      	ldr	r3, [sp, #28]
 800e8ee:	1e5c      	subs	r4, r3, #1
 800e8f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e8f2:	42a3      	cmp	r3, r4
 800e8f4:	bfbf      	itttt	lt
 800e8f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e8f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e8fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e8fc:	1ae3      	sublt	r3, r4, r3
 800e8fe:	bfb4      	ite	lt
 800e900:	18d2      	addlt	r2, r2, r3
 800e902:	1b1c      	subge	r4, r3, r4
 800e904:	9b07      	ldr	r3, [sp, #28]
 800e906:	bfbc      	itt	lt
 800e908:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e90a:	2400      	movlt	r4, #0
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	bfb5      	itete	lt
 800e910:	eba8 0603 	sublt.w	r6, r8, r3
 800e914:	9b07      	ldrge	r3, [sp, #28]
 800e916:	2300      	movlt	r3, #0
 800e918:	4646      	movge	r6, r8
 800e91a:	e730      	b.n	800e77e <_dtoa_r+0x71e>
 800e91c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e91e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e920:	4646      	mov	r6, r8
 800e922:	e735      	b.n	800e790 <_dtoa_r+0x730>
 800e924:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e926:	e75c      	b.n	800e7e2 <_dtoa_r+0x782>
 800e928:	2300      	movs	r3, #0
 800e92a:	e788      	b.n	800e83e <_dtoa_r+0x7de>
 800e92c:	3fe00000 	.word	0x3fe00000
 800e930:	40240000 	.word	0x40240000
 800e934:	40140000 	.word	0x40140000
 800e938:	9b02      	ldr	r3, [sp, #8]
 800e93a:	e780      	b.n	800e83e <_dtoa_r+0x7de>
 800e93c:	2300      	movs	r3, #0
 800e93e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e940:	e782      	b.n	800e848 <_dtoa_r+0x7e8>
 800e942:	d099      	beq.n	800e878 <_dtoa_r+0x818>
 800e944:	9a08      	ldr	r2, [sp, #32]
 800e946:	331c      	adds	r3, #28
 800e948:	441a      	add	r2, r3
 800e94a:	4498      	add	r8, r3
 800e94c:	441e      	add	r6, r3
 800e94e:	9208      	str	r2, [sp, #32]
 800e950:	e792      	b.n	800e878 <_dtoa_r+0x818>
 800e952:	4603      	mov	r3, r0
 800e954:	e7f6      	b.n	800e944 <_dtoa_r+0x8e4>
 800e956:	9b07      	ldr	r3, [sp, #28]
 800e958:	9704      	str	r7, [sp, #16]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	dc20      	bgt.n	800e9a0 <_dtoa_r+0x940>
 800e95e:	9300      	str	r3, [sp, #0]
 800e960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e962:	2b02      	cmp	r3, #2
 800e964:	dd1e      	ble.n	800e9a4 <_dtoa_r+0x944>
 800e966:	9b00      	ldr	r3, [sp, #0]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	f47f aec0 	bne.w	800e6ee <_dtoa_r+0x68e>
 800e96e:	4621      	mov	r1, r4
 800e970:	2205      	movs	r2, #5
 800e972:	4658      	mov	r0, fp
 800e974:	f000 fde6 	bl	800f544 <__multadd>
 800e978:	4601      	mov	r1, r0
 800e97a:	4604      	mov	r4, r0
 800e97c:	4648      	mov	r0, r9
 800e97e:	f001 f843 	bl	800fa08 <__mcmp>
 800e982:	2800      	cmp	r0, #0
 800e984:	f77f aeb3 	ble.w	800e6ee <_dtoa_r+0x68e>
 800e988:	4656      	mov	r6, sl
 800e98a:	2331      	movs	r3, #49	@ 0x31
 800e98c:	f806 3b01 	strb.w	r3, [r6], #1
 800e990:	9b04      	ldr	r3, [sp, #16]
 800e992:	3301      	adds	r3, #1
 800e994:	9304      	str	r3, [sp, #16]
 800e996:	e6ae      	b.n	800e6f6 <_dtoa_r+0x696>
 800e998:	9c07      	ldr	r4, [sp, #28]
 800e99a:	9704      	str	r7, [sp, #16]
 800e99c:	4625      	mov	r5, r4
 800e99e:	e7f3      	b.n	800e988 <_dtoa_r+0x928>
 800e9a0:	9b07      	ldr	r3, [sp, #28]
 800e9a2:	9300      	str	r3, [sp, #0]
 800e9a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	f000 8104 	beq.w	800ebb4 <_dtoa_r+0xb54>
 800e9ac:	2e00      	cmp	r6, #0
 800e9ae:	dd05      	ble.n	800e9bc <_dtoa_r+0x95c>
 800e9b0:	4629      	mov	r1, r5
 800e9b2:	4632      	mov	r2, r6
 800e9b4:	4658      	mov	r0, fp
 800e9b6:	f000 ffbb 	bl	800f930 <__lshift>
 800e9ba:	4605      	mov	r5, r0
 800e9bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d05a      	beq.n	800ea78 <_dtoa_r+0xa18>
 800e9c2:	6869      	ldr	r1, [r5, #4]
 800e9c4:	4658      	mov	r0, fp
 800e9c6:	f000 fd5b 	bl	800f480 <_Balloc>
 800e9ca:	4606      	mov	r6, r0
 800e9cc:	b928      	cbnz	r0, 800e9da <_dtoa_r+0x97a>
 800e9ce:	4b84      	ldr	r3, [pc, #528]	@ (800ebe0 <_dtoa_r+0xb80>)
 800e9d0:	4602      	mov	r2, r0
 800e9d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e9d6:	f7ff bb5a 	b.w	800e08e <_dtoa_r+0x2e>
 800e9da:	692a      	ldr	r2, [r5, #16]
 800e9dc:	3202      	adds	r2, #2
 800e9de:	0092      	lsls	r2, r2, #2
 800e9e0:	f105 010c 	add.w	r1, r5, #12
 800e9e4:	300c      	adds	r0, #12
 800e9e6:	f7ff fa94 	bl	800df12 <memcpy>
 800e9ea:	2201      	movs	r2, #1
 800e9ec:	4631      	mov	r1, r6
 800e9ee:	4658      	mov	r0, fp
 800e9f0:	f000 ff9e 	bl	800f930 <__lshift>
 800e9f4:	f10a 0301 	add.w	r3, sl, #1
 800e9f8:	9307      	str	r3, [sp, #28]
 800e9fa:	9b00      	ldr	r3, [sp, #0]
 800e9fc:	4453      	add	r3, sl
 800e9fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ea00:	9b02      	ldr	r3, [sp, #8]
 800ea02:	f003 0301 	and.w	r3, r3, #1
 800ea06:	462f      	mov	r7, r5
 800ea08:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea0a:	4605      	mov	r5, r0
 800ea0c:	9b07      	ldr	r3, [sp, #28]
 800ea0e:	4621      	mov	r1, r4
 800ea10:	3b01      	subs	r3, #1
 800ea12:	4648      	mov	r0, r9
 800ea14:	9300      	str	r3, [sp, #0]
 800ea16:	f7ff fa99 	bl	800df4c <quorem>
 800ea1a:	4639      	mov	r1, r7
 800ea1c:	9002      	str	r0, [sp, #8]
 800ea1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ea22:	4648      	mov	r0, r9
 800ea24:	f000 fff0 	bl	800fa08 <__mcmp>
 800ea28:	462a      	mov	r2, r5
 800ea2a:	9008      	str	r0, [sp, #32]
 800ea2c:	4621      	mov	r1, r4
 800ea2e:	4658      	mov	r0, fp
 800ea30:	f001 f806 	bl	800fa40 <__mdiff>
 800ea34:	68c2      	ldr	r2, [r0, #12]
 800ea36:	4606      	mov	r6, r0
 800ea38:	bb02      	cbnz	r2, 800ea7c <_dtoa_r+0xa1c>
 800ea3a:	4601      	mov	r1, r0
 800ea3c:	4648      	mov	r0, r9
 800ea3e:	f000 ffe3 	bl	800fa08 <__mcmp>
 800ea42:	4602      	mov	r2, r0
 800ea44:	4631      	mov	r1, r6
 800ea46:	4658      	mov	r0, fp
 800ea48:	920e      	str	r2, [sp, #56]	@ 0x38
 800ea4a:	f000 fd59 	bl	800f500 <_Bfree>
 800ea4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea52:	9e07      	ldr	r6, [sp, #28]
 800ea54:	ea43 0102 	orr.w	r1, r3, r2
 800ea58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea5a:	4319      	orrs	r1, r3
 800ea5c:	d110      	bne.n	800ea80 <_dtoa_r+0xa20>
 800ea5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ea62:	d029      	beq.n	800eab8 <_dtoa_r+0xa58>
 800ea64:	9b08      	ldr	r3, [sp, #32]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	dd02      	ble.n	800ea70 <_dtoa_r+0xa10>
 800ea6a:	9b02      	ldr	r3, [sp, #8]
 800ea6c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ea70:	9b00      	ldr	r3, [sp, #0]
 800ea72:	f883 8000 	strb.w	r8, [r3]
 800ea76:	e63f      	b.n	800e6f8 <_dtoa_r+0x698>
 800ea78:	4628      	mov	r0, r5
 800ea7a:	e7bb      	b.n	800e9f4 <_dtoa_r+0x994>
 800ea7c:	2201      	movs	r2, #1
 800ea7e:	e7e1      	b.n	800ea44 <_dtoa_r+0x9e4>
 800ea80:	9b08      	ldr	r3, [sp, #32]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	db04      	blt.n	800ea90 <_dtoa_r+0xa30>
 800ea86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ea88:	430b      	orrs	r3, r1
 800ea8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ea8c:	430b      	orrs	r3, r1
 800ea8e:	d120      	bne.n	800ead2 <_dtoa_r+0xa72>
 800ea90:	2a00      	cmp	r2, #0
 800ea92:	dded      	ble.n	800ea70 <_dtoa_r+0xa10>
 800ea94:	4649      	mov	r1, r9
 800ea96:	2201      	movs	r2, #1
 800ea98:	4658      	mov	r0, fp
 800ea9a:	f000 ff49 	bl	800f930 <__lshift>
 800ea9e:	4621      	mov	r1, r4
 800eaa0:	4681      	mov	r9, r0
 800eaa2:	f000 ffb1 	bl	800fa08 <__mcmp>
 800eaa6:	2800      	cmp	r0, #0
 800eaa8:	dc03      	bgt.n	800eab2 <_dtoa_r+0xa52>
 800eaaa:	d1e1      	bne.n	800ea70 <_dtoa_r+0xa10>
 800eaac:	f018 0f01 	tst.w	r8, #1
 800eab0:	d0de      	beq.n	800ea70 <_dtoa_r+0xa10>
 800eab2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800eab6:	d1d8      	bne.n	800ea6a <_dtoa_r+0xa0a>
 800eab8:	9a00      	ldr	r2, [sp, #0]
 800eaba:	2339      	movs	r3, #57	@ 0x39
 800eabc:	7013      	strb	r3, [r2, #0]
 800eabe:	4633      	mov	r3, r6
 800eac0:	461e      	mov	r6, r3
 800eac2:	3b01      	subs	r3, #1
 800eac4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800eac8:	2a39      	cmp	r2, #57	@ 0x39
 800eaca:	d052      	beq.n	800eb72 <_dtoa_r+0xb12>
 800eacc:	3201      	adds	r2, #1
 800eace:	701a      	strb	r2, [r3, #0]
 800ead0:	e612      	b.n	800e6f8 <_dtoa_r+0x698>
 800ead2:	2a00      	cmp	r2, #0
 800ead4:	dd07      	ble.n	800eae6 <_dtoa_r+0xa86>
 800ead6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800eada:	d0ed      	beq.n	800eab8 <_dtoa_r+0xa58>
 800eadc:	9a00      	ldr	r2, [sp, #0]
 800eade:	f108 0301 	add.w	r3, r8, #1
 800eae2:	7013      	strb	r3, [r2, #0]
 800eae4:	e608      	b.n	800e6f8 <_dtoa_r+0x698>
 800eae6:	9b07      	ldr	r3, [sp, #28]
 800eae8:	9a07      	ldr	r2, [sp, #28]
 800eaea:	f803 8c01 	strb.w	r8, [r3, #-1]
 800eaee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eaf0:	4293      	cmp	r3, r2
 800eaf2:	d028      	beq.n	800eb46 <_dtoa_r+0xae6>
 800eaf4:	4649      	mov	r1, r9
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	220a      	movs	r2, #10
 800eafa:	4658      	mov	r0, fp
 800eafc:	f000 fd22 	bl	800f544 <__multadd>
 800eb00:	42af      	cmp	r7, r5
 800eb02:	4681      	mov	r9, r0
 800eb04:	f04f 0300 	mov.w	r3, #0
 800eb08:	f04f 020a 	mov.w	r2, #10
 800eb0c:	4639      	mov	r1, r7
 800eb0e:	4658      	mov	r0, fp
 800eb10:	d107      	bne.n	800eb22 <_dtoa_r+0xac2>
 800eb12:	f000 fd17 	bl	800f544 <__multadd>
 800eb16:	4607      	mov	r7, r0
 800eb18:	4605      	mov	r5, r0
 800eb1a:	9b07      	ldr	r3, [sp, #28]
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	9307      	str	r3, [sp, #28]
 800eb20:	e774      	b.n	800ea0c <_dtoa_r+0x9ac>
 800eb22:	f000 fd0f 	bl	800f544 <__multadd>
 800eb26:	4629      	mov	r1, r5
 800eb28:	4607      	mov	r7, r0
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	220a      	movs	r2, #10
 800eb2e:	4658      	mov	r0, fp
 800eb30:	f000 fd08 	bl	800f544 <__multadd>
 800eb34:	4605      	mov	r5, r0
 800eb36:	e7f0      	b.n	800eb1a <_dtoa_r+0xaba>
 800eb38:	9b00      	ldr	r3, [sp, #0]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	bfcc      	ite	gt
 800eb3e:	461e      	movgt	r6, r3
 800eb40:	2601      	movle	r6, #1
 800eb42:	4456      	add	r6, sl
 800eb44:	2700      	movs	r7, #0
 800eb46:	4649      	mov	r1, r9
 800eb48:	2201      	movs	r2, #1
 800eb4a:	4658      	mov	r0, fp
 800eb4c:	f000 fef0 	bl	800f930 <__lshift>
 800eb50:	4621      	mov	r1, r4
 800eb52:	4681      	mov	r9, r0
 800eb54:	f000 ff58 	bl	800fa08 <__mcmp>
 800eb58:	2800      	cmp	r0, #0
 800eb5a:	dcb0      	bgt.n	800eabe <_dtoa_r+0xa5e>
 800eb5c:	d102      	bne.n	800eb64 <_dtoa_r+0xb04>
 800eb5e:	f018 0f01 	tst.w	r8, #1
 800eb62:	d1ac      	bne.n	800eabe <_dtoa_r+0xa5e>
 800eb64:	4633      	mov	r3, r6
 800eb66:	461e      	mov	r6, r3
 800eb68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb6c:	2a30      	cmp	r2, #48	@ 0x30
 800eb6e:	d0fa      	beq.n	800eb66 <_dtoa_r+0xb06>
 800eb70:	e5c2      	b.n	800e6f8 <_dtoa_r+0x698>
 800eb72:	459a      	cmp	sl, r3
 800eb74:	d1a4      	bne.n	800eac0 <_dtoa_r+0xa60>
 800eb76:	9b04      	ldr	r3, [sp, #16]
 800eb78:	3301      	adds	r3, #1
 800eb7a:	9304      	str	r3, [sp, #16]
 800eb7c:	2331      	movs	r3, #49	@ 0x31
 800eb7e:	f88a 3000 	strb.w	r3, [sl]
 800eb82:	e5b9      	b.n	800e6f8 <_dtoa_r+0x698>
 800eb84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eb86:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ebe4 <_dtoa_r+0xb84>
 800eb8a:	b11b      	cbz	r3, 800eb94 <_dtoa_r+0xb34>
 800eb8c:	f10a 0308 	add.w	r3, sl, #8
 800eb90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800eb92:	6013      	str	r3, [r2, #0]
 800eb94:	4650      	mov	r0, sl
 800eb96:	b019      	add	sp, #100	@ 0x64
 800eb98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb9e:	2b01      	cmp	r3, #1
 800eba0:	f77f ae37 	ble.w	800e812 <_dtoa_r+0x7b2>
 800eba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eba6:	930a      	str	r3, [sp, #40]	@ 0x28
 800eba8:	2001      	movs	r0, #1
 800ebaa:	e655      	b.n	800e858 <_dtoa_r+0x7f8>
 800ebac:	9b00      	ldr	r3, [sp, #0]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	f77f aed6 	ble.w	800e960 <_dtoa_r+0x900>
 800ebb4:	4656      	mov	r6, sl
 800ebb6:	4621      	mov	r1, r4
 800ebb8:	4648      	mov	r0, r9
 800ebba:	f7ff f9c7 	bl	800df4c <quorem>
 800ebbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ebc2:	f806 8b01 	strb.w	r8, [r6], #1
 800ebc6:	9b00      	ldr	r3, [sp, #0]
 800ebc8:	eba6 020a 	sub.w	r2, r6, sl
 800ebcc:	4293      	cmp	r3, r2
 800ebce:	ddb3      	ble.n	800eb38 <_dtoa_r+0xad8>
 800ebd0:	4649      	mov	r1, r9
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	220a      	movs	r2, #10
 800ebd6:	4658      	mov	r0, fp
 800ebd8:	f000 fcb4 	bl	800f544 <__multadd>
 800ebdc:	4681      	mov	r9, r0
 800ebde:	e7ea      	b.n	800ebb6 <_dtoa_r+0xb56>
 800ebe0:	08010ec5 	.word	0x08010ec5
 800ebe4:	08010e49 	.word	0x08010e49

0800ebe8 <_free_r>:
 800ebe8:	b538      	push	{r3, r4, r5, lr}
 800ebea:	4605      	mov	r5, r0
 800ebec:	2900      	cmp	r1, #0
 800ebee:	d041      	beq.n	800ec74 <_free_r+0x8c>
 800ebf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebf4:	1f0c      	subs	r4, r1, #4
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	bfb8      	it	lt
 800ebfa:	18e4      	addlt	r4, r4, r3
 800ebfc:	f000 fc34 	bl	800f468 <__malloc_lock>
 800ec00:	4a1d      	ldr	r2, [pc, #116]	@ (800ec78 <_free_r+0x90>)
 800ec02:	6813      	ldr	r3, [r2, #0]
 800ec04:	b933      	cbnz	r3, 800ec14 <_free_r+0x2c>
 800ec06:	6063      	str	r3, [r4, #4]
 800ec08:	6014      	str	r4, [r2, #0]
 800ec0a:	4628      	mov	r0, r5
 800ec0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec10:	f000 bc30 	b.w	800f474 <__malloc_unlock>
 800ec14:	42a3      	cmp	r3, r4
 800ec16:	d908      	bls.n	800ec2a <_free_r+0x42>
 800ec18:	6820      	ldr	r0, [r4, #0]
 800ec1a:	1821      	adds	r1, r4, r0
 800ec1c:	428b      	cmp	r3, r1
 800ec1e:	bf01      	itttt	eq
 800ec20:	6819      	ldreq	r1, [r3, #0]
 800ec22:	685b      	ldreq	r3, [r3, #4]
 800ec24:	1809      	addeq	r1, r1, r0
 800ec26:	6021      	streq	r1, [r4, #0]
 800ec28:	e7ed      	b.n	800ec06 <_free_r+0x1e>
 800ec2a:	461a      	mov	r2, r3
 800ec2c:	685b      	ldr	r3, [r3, #4]
 800ec2e:	b10b      	cbz	r3, 800ec34 <_free_r+0x4c>
 800ec30:	42a3      	cmp	r3, r4
 800ec32:	d9fa      	bls.n	800ec2a <_free_r+0x42>
 800ec34:	6811      	ldr	r1, [r2, #0]
 800ec36:	1850      	adds	r0, r2, r1
 800ec38:	42a0      	cmp	r0, r4
 800ec3a:	d10b      	bne.n	800ec54 <_free_r+0x6c>
 800ec3c:	6820      	ldr	r0, [r4, #0]
 800ec3e:	4401      	add	r1, r0
 800ec40:	1850      	adds	r0, r2, r1
 800ec42:	4283      	cmp	r3, r0
 800ec44:	6011      	str	r1, [r2, #0]
 800ec46:	d1e0      	bne.n	800ec0a <_free_r+0x22>
 800ec48:	6818      	ldr	r0, [r3, #0]
 800ec4a:	685b      	ldr	r3, [r3, #4]
 800ec4c:	6053      	str	r3, [r2, #4]
 800ec4e:	4408      	add	r0, r1
 800ec50:	6010      	str	r0, [r2, #0]
 800ec52:	e7da      	b.n	800ec0a <_free_r+0x22>
 800ec54:	d902      	bls.n	800ec5c <_free_r+0x74>
 800ec56:	230c      	movs	r3, #12
 800ec58:	602b      	str	r3, [r5, #0]
 800ec5a:	e7d6      	b.n	800ec0a <_free_r+0x22>
 800ec5c:	6820      	ldr	r0, [r4, #0]
 800ec5e:	1821      	adds	r1, r4, r0
 800ec60:	428b      	cmp	r3, r1
 800ec62:	bf04      	itt	eq
 800ec64:	6819      	ldreq	r1, [r3, #0]
 800ec66:	685b      	ldreq	r3, [r3, #4]
 800ec68:	6063      	str	r3, [r4, #4]
 800ec6a:	bf04      	itt	eq
 800ec6c:	1809      	addeq	r1, r1, r0
 800ec6e:	6021      	streq	r1, [r4, #0]
 800ec70:	6054      	str	r4, [r2, #4]
 800ec72:	e7ca      	b.n	800ec0a <_free_r+0x22>
 800ec74:	bd38      	pop	{r3, r4, r5, pc}
 800ec76:	bf00      	nop
 800ec78:	200009b0 	.word	0x200009b0

0800ec7c <rshift>:
 800ec7c:	6903      	ldr	r3, [r0, #16]
 800ec7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ec82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec86:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ec8a:	f100 0414 	add.w	r4, r0, #20
 800ec8e:	dd45      	ble.n	800ed1c <rshift+0xa0>
 800ec90:	f011 011f 	ands.w	r1, r1, #31
 800ec94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ec98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ec9c:	d10c      	bne.n	800ecb8 <rshift+0x3c>
 800ec9e:	f100 0710 	add.w	r7, r0, #16
 800eca2:	4629      	mov	r1, r5
 800eca4:	42b1      	cmp	r1, r6
 800eca6:	d334      	bcc.n	800ed12 <rshift+0x96>
 800eca8:	1a9b      	subs	r3, r3, r2
 800ecaa:	009b      	lsls	r3, r3, #2
 800ecac:	1eea      	subs	r2, r5, #3
 800ecae:	4296      	cmp	r6, r2
 800ecb0:	bf38      	it	cc
 800ecb2:	2300      	movcc	r3, #0
 800ecb4:	4423      	add	r3, r4
 800ecb6:	e015      	b.n	800ece4 <rshift+0x68>
 800ecb8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ecbc:	f1c1 0820 	rsb	r8, r1, #32
 800ecc0:	40cf      	lsrs	r7, r1
 800ecc2:	f105 0e04 	add.w	lr, r5, #4
 800ecc6:	46a1      	mov	r9, r4
 800ecc8:	4576      	cmp	r6, lr
 800ecca:	46f4      	mov	ip, lr
 800eccc:	d815      	bhi.n	800ecfa <rshift+0x7e>
 800ecce:	1a9a      	subs	r2, r3, r2
 800ecd0:	0092      	lsls	r2, r2, #2
 800ecd2:	3a04      	subs	r2, #4
 800ecd4:	3501      	adds	r5, #1
 800ecd6:	42ae      	cmp	r6, r5
 800ecd8:	bf38      	it	cc
 800ecda:	2200      	movcc	r2, #0
 800ecdc:	18a3      	adds	r3, r4, r2
 800ecde:	50a7      	str	r7, [r4, r2]
 800ece0:	b107      	cbz	r7, 800ece4 <rshift+0x68>
 800ece2:	3304      	adds	r3, #4
 800ece4:	1b1a      	subs	r2, r3, r4
 800ece6:	42a3      	cmp	r3, r4
 800ece8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ecec:	bf08      	it	eq
 800ecee:	2300      	moveq	r3, #0
 800ecf0:	6102      	str	r2, [r0, #16]
 800ecf2:	bf08      	it	eq
 800ecf4:	6143      	streq	r3, [r0, #20]
 800ecf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecfa:	f8dc c000 	ldr.w	ip, [ip]
 800ecfe:	fa0c fc08 	lsl.w	ip, ip, r8
 800ed02:	ea4c 0707 	orr.w	r7, ip, r7
 800ed06:	f849 7b04 	str.w	r7, [r9], #4
 800ed0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ed0e:	40cf      	lsrs	r7, r1
 800ed10:	e7da      	b.n	800ecc8 <rshift+0x4c>
 800ed12:	f851 cb04 	ldr.w	ip, [r1], #4
 800ed16:	f847 cf04 	str.w	ip, [r7, #4]!
 800ed1a:	e7c3      	b.n	800eca4 <rshift+0x28>
 800ed1c:	4623      	mov	r3, r4
 800ed1e:	e7e1      	b.n	800ece4 <rshift+0x68>

0800ed20 <__hexdig_fun>:
 800ed20:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ed24:	2b09      	cmp	r3, #9
 800ed26:	d802      	bhi.n	800ed2e <__hexdig_fun+0xe>
 800ed28:	3820      	subs	r0, #32
 800ed2a:	b2c0      	uxtb	r0, r0
 800ed2c:	4770      	bx	lr
 800ed2e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ed32:	2b05      	cmp	r3, #5
 800ed34:	d801      	bhi.n	800ed3a <__hexdig_fun+0x1a>
 800ed36:	3847      	subs	r0, #71	@ 0x47
 800ed38:	e7f7      	b.n	800ed2a <__hexdig_fun+0xa>
 800ed3a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ed3e:	2b05      	cmp	r3, #5
 800ed40:	d801      	bhi.n	800ed46 <__hexdig_fun+0x26>
 800ed42:	3827      	subs	r0, #39	@ 0x27
 800ed44:	e7f1      	b.n	800ed2a <__hexdig_fun+0xa>
 800ed46:	2000      	movs	r0, #0
 800ed48:	4770      	bx	lr
	...

0800ed4c <__gethex>:
 800ed4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed50:	b085      	sub	sp, #20
 800ed52:	468a      	mov	sl, r1
 800ed54:	9302      	str	r3, [sp, #8]
 800ed56:	680b      	ldr	r3, [r1, #0]
 800ed58:	9001      	str	r0, [sp, #4]
 800ed5a:	4690      	mov	r8, r2
 800ed5c:	1c9c      	adds	r4, r3, #2
 800ed5e:	46a1      	mov	r9, r4
 800ed60:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ed64:	2830      	cmp	r0, #48	@ 0x30
 800ed66:	d0fa      	beq.n	800ed5e <__gethex+0x12>
 800ed68:	eba9 0303 	sub.w	r3, r9, r3
 800ed6c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ed70:	f7ff ffd6 	bl	800ed20 <__hexdig_fun>
 800ed74:	4605      	mov	r5, r0
 800ed76:	2800      	cmp	r0, #0
 800ed78:	d168      	bne.n	800ee4c <__gethex+0x100>
 800ed7a:	49a0      	ldr	r1, [pc, #640]	@ (800effc <__gethex+0x2b0>)
 800ed7c:	2201      	movs	r2, #1
 800ed7e:	4648      	mov	r0, r9
 800ed80:	f7ff f83e 	bl	800de00 <strncmp>
 800ed84:	4607      	mov	r7, r0
 800ed86:	2800      	cmp	r0, #0
 800ed88:	d167      	bne.n	800ee5a <__gethex+0x10e>
 800ed8a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ed8e:	4626      	mov	r6, r4
 800ed90:	f7ff ffc6 	bl	800ed20 <__hexdig_fun>
 800ed94:	2800      	cmp	r0, #0
 800ed96:	d062      	beq.n	800ee5e <__gethex+0x112>
 800ed98:	4623      	mov	r3, r4
 800ed9a:	7818      	ldrb	r0, [r3, #0]
 800ed9c:	2830      	cmp	r0, #48	@ 0x30
 800ed9e:	4699      	mov	r9, r3
 800eda0:	f103 0301 	add.w	r3, r3, #1
 800eda4:	d0f9      	beq.n	800ed9a <__gethex+0x4e>
 800eda6:	f7ff ffbb 	bl	800ed20 <__hexdig_fun>
 800edaa:	fab0 f580 	clz	r5, r0
 800edae:	096d      	lsrs	r5, r5, #5
 800edb0:	f04f 0b01 	mov.w	fp, #1
 800edb4:	464a      	mov	r2, r9
 800edb6:	4616      	mov	r6, r2
 800edb8:	3201      	adds	r2, #1
 800edba:	7830      	ldrb	r0, [r6, #0]
 800edbc:	f7ff ffb0 	bl	800ed20 <__hexdig_fun>
 800edc0:	2800      	cmp	r0, #0
 800edc2:	d1f8      	bne.n	800edb6 <__gethex+0x6a>
 800edc4:	498d      	ldr	r1, [pc, #564]	@ (800effc <__gethex+0x2b0>)
 800edc6:	2201      	movs	r2, #1
 800edc8:	4630      	mov	r0, r6
 800edca:	f7ff f819 	bl	800de00 <strncmp>
 800edce:	2800      	cmp	r0, #0
 800edd0:	d13f      	bne.n	800ee52 <__gethex+0x106>
 800edd2:	b944      	cbnz	r4, 800ede6 <__gethex+0x9a>
 800edd4:	1c74      	adds	r4, r6, #1
 800edd6:	4622      	mov	r2, r4
 800edd8:	4616      	mov	r6, r2
 800edda:	3201      	adds	r2, #1
 800eddc:	7830      	ldrb	r0, [r6, #0]
 800edde:	f7ff ff9f 	bl	800ed20 <__hexdig_fun>
 800ede2:	2800      	cmp	r0, #0
 800ede4:	d1f8      	bne.n	800edd8 <__gethex+0x8c>
 800ede6:	1ba4      	subs	r4, r4, r6
 800ede8:	00a7      	lsls	r7, r4, #2
 800edea:	7833      	ldrb	r3, [r6, #0]
 800edec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800edf0:	2b50      	cmp	r3, #80	@ 0x50
 800edf2:	d13e      	bne.n	800ee72 <__gethex+0x126>
 800edf4:	7873      	ldrb	r3, [r6, #1]
 800edf6:	2b2b      	cmp	r3, #43	@ 0x2b
 800edf8:	d033      	beq.n	800ee62 <__gethex+0x116>
 800edfa:	2b2d      	cmp	r3, #45	@ 0x2d
 800edfc:	d034      	beq.n	800ee68 <__gethex+0x11c>
 800edfe:	1c71      	adds	r1, r6, #1
 800ee00:	2400      	movs	r4, #0
 800ee02:	7808      	ldrb	r0, [r1, #0]
 800ee04:	f7ff ff8c 	bl	800ed20 <__hexdig_fun>
 800ee08:	1e43      	subs	r3, r0, #1
 800ee0a:	b2db      	uxtb	r3, r3
 800ee0c:	2b18      	cmp	r3, #24
 800ee0e:	d830      	bhi.n	800ee72 <__gethex+0x126>
 800ee10:	f1a0 0210 	sub.w	r2, r0, #16
 800ee14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ee18:	f7ff ff82 	bl	800ed20 <__hexdig_fun>
 800ee1c:	f100 3cff 	add.w	ip, r0, #4294967295
 800ee20:	fa5f fc8c 	uxtb.w	ip, ip
 800ee24:	f1bc 0f18 	cmp.w	ip, #24
 800ee28:	f04f 030a 	mov.w	r3, #10
 800ee2c:	d91e      	bls.n	800ee6c <__gethex+0x120>
 800ee2e:	b104      	cbz	r4, 800ee32 <__gethex+0xe6>
 800ee30:	4252      	negs	r2, r2
 800ee32:	4417      	add	r7, r2
 800ee34:	f8ca 1000 	str.w	r1, [sl]
 800ee38:	b1ed      	cbz	r5, 800ee76 <__gethex+0x12a>
 800ee3a:	f1bb 0f00 	cmp.w	fp, #0
 800ee3e:	bf0c      	ite	eq
 800ee40:	2506      	moveq	r5, #6
 800ee42:	2500      	movne	r5, #0
 800ee44:	4628      	mov	r0, r5
 800ee46:	b005      	add	sp, #20
 800ee48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee4c:	2500      	movs	r5, #0
 800ee4e:	462c      	mov	r4, r5
 800ee50:	e7b0      	b.n	800edb4 <__gethex+0x68>
 800ee52:	2c00      	cmp	r4, #0
 800ee54:	d1c7      	bne.n	800ede6 <__gethex+0x9a>
 800ee56:	4627      	mov	r7, r4
 800ee58:	e7c7      	b.n	800edea <__gethex+0x9e>
 800ee5a:	464e      	mov	r6, r9
 800ee5c:	462f      	mov	r7, r5
 800ee5e:	2501      	movs	r5, #1
 800ee60:	e7c3      	b.n	800edea <__gethex+0x9e>
 800ee62:	2400      	movs	r4, #0
 800ee64:	1cb1      	adds	r1, r6, #2
 800ee66:	e7cc      	b.n	800ee02 <__gethex+0xb6>
 800ee68:	2401      	movs	r4, #1
 800ee6a:	e7fb      	b.n	800ee64 <__gethex+0x118>
 800ee6c:	fb03 0002 	mla	r0, r3, r2, r0
 800ee70:	e7ce      	b.n	800ee10 <__gethex+0xc4>
 800ee72:	4631      	mov	r1, r6
 800ee74:	e7de      	b.n	800ee34 <__gethex+0xe8>
 800ee76:	eba6 0309 	sub.w	r3, r6, r9
 800ee7a:	3b01      	subs	r3, #1
 800ee7c:	4629      	mov	r1, r5
 800ee7e:	2b07      	cmp	r3, #7
 800ee80:	dc0a      	bgt.n	800ee98 <__gethex+0x14c>
 800ee82:	9801      	ldr	r0, [sp, #4]
 800ee84:	f000 fafc 	bl	800f480 <_Balloc>
 800ee88:	4604      	mov	r4, r0
 800ee8a:	b940      	cbnz	r0, 800ee9e <__gethex+0x152>
 800ee8c:	4b5c      	ldr	r3, [pc, #368]	@ (800f000 <__gethex+0x2b4>)
 800ee8e:	4602      	mov	r2, r0
 800ee90:	21e4      	movs	r1, #228	@ 0xe4
 800ee92:	485c      	ldr	r0, [pc, #368]	@ (800f004 <__gethex+0x2b8>)
 800ee94:	f001 fa5c 	bl	8010350 <__assert_func>
 800ee98:	3101      	adds	r1, #1
 800ee9a:	105b      	asrs	r3, r3, #1
 800ee9c:	e7ef      	b.n	800ee7e <__gethex+0x132>
 800ee9e:	f100 0a14 	add.w	sl, r0, #20
 800eea2:	2300      	movs	r3, #0
 800eea4:	4655      	mov	r5, sl
 800eea6:	469b      	mov	fp, r3
 800eea8:	45b1      	cmp	r9, r6
 800eeaa:	d337      	bcc.n	800ef1c <__gethex+0x1d0>
 800eeac:	f845 bb04 	str.w	fp, [r5], #4
 800eeb0:	eba5 050a 	sub.w	r5, r5, sl
 800eeb4:	10ad      	asrs	r5, r5, #2
 800eeb6:	6125      	str	r5, [r4, #16]
 800eeb8:	4658      	mov	r0, fp
 800eeba:	f000 fbd3 	bl	800f664 <__hi0bits>
 800eebe:	016d      	lsls	r5, r5, #5
 800eec0:	f8d8 6000 	ldr.w	r6, [r8]
 800eec4:	1a2d      	subs	r5, r5, r0
 800eec6:	42b5      	cmp	r5, r6
 800eec8:	dd54      	ble.n	800ef74 <__gethex+0x228>
 800eeca:	1bad      	subs	r5, r5, r6
 800eecc:	4629      	mov	r1, r5
 800eece:	4620      	mov	r0, r4
 800eed0:	f000 ff67 	bl	800fda2 <__any_on>
 800eed4:	4681      	mov	r9, r0
 800eed6:	b178      	cbz	r0, 800eef8 <__gethex+0x1ac>
 800eed8:	1e6b      	subs	r3, r5, #1
 800eeda:	1159      	asrs	r1, r3, #5
 800eedc:	f003 021f 	and.w	r2, r3, #31
 800eee0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800eee4:	f04f 0901 	mov.w	r9, #1
 800eee8:	fa09 f202 	lsl.w	r2, r9, r2
 800eeec:	420a      	tst	r2, r1
 800eeee:	d003      	beq.n	800eef8 <__gethex+0x1ac>
 800eef0:	454b      	cmp	r3, r9
 800eef2:	dc36      	bgt.n	800ef62 <__gethex+0x216>
 800eef4:	f04f 0902 	mov.w	r9, #2
 800eef8:	4629      	mov	r1, r5
 800eefa:	4620      	mov	r0, r4
 800eefc:	f7ff febe 	bl	800ec7c <rshift>
 800ef00:	442f      	add	r7, r5
 800ef02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ef06:	42bb      	cmp	r3, r7
 800ef08:	da42      	bge.n	800ef90 <__gethex+0x244>
 800ef0a:	9801      	ldr	r0, [sp, #4]
 800ef0c:	4621      	mov	r1, r4
 800ef0e:	f000 faf7 	bl	800f500 <_Bfree>
 800ef12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef14:	2300      	movs	r3, #0
 800ef16:	6013      	str	r3, [r2, #0]
 800ef18:	25a3      	movs	r5, #163	@ 0xa3
 800ef1a:	e793      	b.n	800ee44 <__gethex+0xf8>
 800ef1c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ef20:	2a2e      	cmp	r2, #46	@ 0x2e
 800ef22:	d012      	beq.n	800ef4a <__gethex+0x1fe>
 800ef24:	2b20      	cmp	r3, #32
 800ef26:	d104      	bne.n	800ef32 <__gethex+0x1e6>
 800ef28:	f845 bb04 	str.w	fp, [r5], #4
 800ef2c:	f04f 0b00 	mov.w	fp, #0
 800ef30:	465b      	mov	r3, fp
 800ef32:	7830      	ldrb	r0, [r6, #0]
 800ef34:	9303      	str	r3, [sp, #12]
 800ef36:	f7ff fef3 	bl	800ed20 <__hexdig_fun>
 800ef3a:	9b03      	ldr	r3, [sp, #12]
 800ef3c:	f000 000f 	and.w	r0, r0, #15
 800ef40:	4098      	lsls	r0, r3
 800ef42:	ea4b 0b00 	orr.w	fp, fp, r0
 800ef46:	3304      	adds	r3, #4
 800ef48:	e7ae      	b.n	800eea8 <__gethex+0x15c>
 800ef4a:	45b1      	cmp	r9, r6
 800ef4c:	d8ea      	bhi.n	800ef24 <__gethex+0x1d8>
 800ef4e:	492b      	ldr	r1, [pc, #172]	@ (800effc <__gethex+0x2b0>)
 800ef50:	9303      	str	r3, [sp, #12]
 800ef52:	2201      	movs	r2, #1
 800ef54:	4630      	mov	r0, r6
 800ef56:	f7fe ff53 	bl	800de00 <strncmp>
 800ef5a:	9b03      	ldr	r3, [sp, #12]
 800ef5c:	2800      	cmp	r0, #0
 800ef5e:	d1e1      	bne.n	800ef24 <__gethex+0x1d8>
 800ef60:	e7a2      	b.n	800eea8 <__gethex+0x15c>
 800ef62:	1ea9      	subs	r1, r5, #2
 800ef64:	4620      	mov	r0, r4
 800ef66:	f000 ff1c 	bl	800fda2 <__any_on>
 800ef6a:	2800      	cmp	r0, #0
 800ef6c:	d0c2      	beq.n	800eef4 <__gethex+0x1a8>
 800ef6e:	f04f 0903 	mov.w	r9, #3
 800ef72:	e7c1      	b.n	800eef8 <__gethex+0x1ac>
 800ef74:	da09      	bge.n	800ef8a <__gethex+0x23e>
 800ef76:	1b75      	subs	r5, r6, r5
 800ef78:	4621      	mov	r1, r4
 800ef7a:	9801      	ldr	r0, [sp, #4]
 800ef7c:	462a      	mov	r2, r5
 800ef7e:	f000 fcd7 	bl	800f930 <__lshift>
 800ef82:	1b7f      	subs	r7, r7, r5
 800ef84:	4604      	mov	r4, r0
 800ef86:	f100 0a14 	add.w	sl, r0, #20
 800ef8a:	f04f 0900 	mov.w	r9, #0
 800ef8e:	e7b8      	b.n	800ef02 <__gethex+0x1b6>
 800ef90:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ef94:	42bd      	cmp	r5, r7
 800ef96:	dd6f      	ble.n	800f078 <__gethex+0x32c>
 800ef98:	1bed      	subs	r5, r5, r7
 800ef9a:	42ae      	cmp	r6, r5
 800ef9c:	dc34      	bgt.n	800f008 <__gethex+0x2bc>
 800ef9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800efa2:	2b02      	cmp	r3, #2
 800efa4:	d022      	beq.n	800efec <__gethex+0x2a0>
 800efa6:	2b03      	cmp	r3, #3
 800efa8:	d024      	beq.n	800eff4 <__gethex+0x2a8>
 800efaa:	2b01      	cmp	r3, #1
 800efac:	d115      	bne.n	800efda <__gethex+0x28e>
 800efae:	42ae      	cmp	r6, r5
 800efb0:	d113      	bne.n	800efda <__gethex+0x28e>
 800efb2:	2e01      	cmp	r6, #1
 800efb4:	d10b      	bne.n	800efce <__gethex+0x282>
 800efb6:	9a02      	ldr	r2, [sp, #8]
 800efb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800efbc:	6013      	str	r3, [r2, #0]
 800efbe:	2301      	movs	r3, #1
 800efc0:	6123      	str	r3, [r4, #16]
 800efc2:	f8ca 3000 	str.w	r3, [sl]
 800efc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800efc8:	2562      	movs	r5, #98	@ 0x62
 800efca:	601c      	str	r4, [r3, #0]
 800efcc:	e73a      	b.n	800ee44 <__gethex+0xf8>
 800efce:	1e71      	subs	r1, r6, #1
 800efd0:	4620      	mov	r0, r4
 800efd2:	f000 fee6 	bl	800fda2 <__any_on>
 800efd6:	2800      	cmp	r0, #0
 800efd8:	d1ed      	bne.n	800efb6 <__gethex+0x26a>
 800efda:	9801      	ldr	r0, [sp, #4]
 800efdc:	4621      	mov	r1, r4
 800efde:	f000 fa8f 	bl	800f500 <_Bfree>
 800efe2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800efe4:	2300      	movs	r3, #0
 800efe6:	6013      	str	r3, [r2, #0]
 800efe8:	2550      	movs	r5, #80	@ 0x50
 800efea:	e72b      	b.n	800ee44 <__gethex+0xf8>
 800efec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d1f3      	bne.n	800efda <__gethex+0x28e>
 800eff2:	e7e0      	b.n	800efb6 <__gethex+0x26a>
 800eff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d1dd      	bne.n	800efb6 <__gethex+0x26a>
 800effa:	e7ee      	b.n	800efda <__gethex+0x28e>
 800effc:	08010db0 	.word	0x08010db0
 800f000:	08010ec5 	.word	0x08010ec5
 800f004:	08010ed6 	.word	0x08010ed6
 800f008:	1e6f      	subs	r7, r5, #1
 800f00a:	f1b9 0f00 	cmp.w	r9, #0
 800f00e:	d130      	bne.n	800f072 <__gethex+0x326>
 800f010:	b127      	cbz	r7, 800f01c <__gethex+0x2d0>
 800f012:	4639      	mov	r1, r7
 800f014:	4620      	mov	r0, r4
 800f016:	f000 fec4 	bl	800fda2 <__any_on>
 800f01a:	4681      	mov	r9, r0
 800f01c:	117a      	asrs	r2, r7, #5
 800f01e:	2301      	movs	r3, #1
 800f020:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f024:	f007 071f 	and.w	r7, r7, #31
 800f028:	40bb      	lsls	r3, r7
 800f02a:	4213      	tst	r3, r2
 800f02c:	4629      	mov	r1, r5
 800f02e:	4620      	mov	r0, r4
 800f030:	bf18      	it	ne
 800f032:	f049 0902 	orrne.w	r9, r9, #2
 800f036:	f7ff fe21 	bl	800ec7c <rshift>
 800f03a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f03e:	1b76      	subs	r6, r6, r5
 800f040:	2502      	movs	r5, #2
 800f042:	f1b9 0f00 	cmp.w	r9, #0
 800f046:	d047      	beq.n	800f0d8 <__gethex+0x38c>
 800f048:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f04c:	2b02      	cmp	r3, #2
 800f04e:	d015      	beq.n	800f07c <__gethex+0x330>
 800f050:	2b03      	cmp	r3, #3
 800f052:	d017      	beq.n	800f084 <__gethex+0x338>
 800f054:	2b01      	cmp	r3, #1
 800f056:	d109      	bne.n	800f06c <__gethex+0x320>
 800f058:	f019 0f02 	tst.w	r9, #2
 800f05c:	d006      	beq.n	800f06c <__gethex+0x320>
 800f05e:	f8da 3000 	ldr.w	r3, [sl]
 800f062:	ea49 0903 	orr.w	r9, r9, r3
 800f066:	f019 0f01 	tst.w	r9, #1
 800f06a:	d10e      	bne.n	800f08a <__gethex+0x33e>
 800f06c:	f045 0510 	orr.w	r5, r5, #16
 800f070:	e032      	b.n	800f0d8 <__gethex+0x38c>
 800f072:	f04f 0901 	mov.w	r9, #1
 800f076:	e7d1      	b.n	800f01c <__gethex+0x2d0>
 800f078:	2501      	movs	r5, #1
 800f07a:	e7e2      	b.n	800f042 <__gethex+0x2f6>
 800f07c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f07e:	f1c3 0301 	rsb	r3, r3, #1
 800f082:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f084:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f086:	2b00      	cmp	r3, #0
 800f088:	d0f0      	beq.n	800f06c <__gethex+0x320>
 800f08a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f08e:	f104 0314 	add.w	r3, r4, #20
 800f092:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f096:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f09a:	f04f 0c00 	mov.w	ip, #0
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f0a8:	d01b      	beq.n	800f0e2 <__gethex+0x396>
 800f0aa:	3201      	adds	r2, #1
 800f0ac:	6002      	str	r2, [r0, #0]
 800f0ae:	2d02      	cmp	r5, #2
 800f0b0:	f104 0314 	add.w	r3, r4, #20
 800f0b4:	d13c      	bne.n	800f130 <__gethex+0x3e4>
 800f0b6:	f8d8 2000 	ldr.w	r2, [r8]
 800f0ba:	3a01      	subs	r2, #1
 800f0bc:	42b2      	cmp	r2, r6
 800f0be:	d109      	bne.n	800f0d4 <__gethex+0x388>
 800f0c0:	1171      	asrs	r1, r6, #5
 800f0c2:	2201      	movs	r2, #1
 800f0c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f0c8:	f006 061f 	and.w	r6, r6, #31
 800f0cc:	fa02 f606 	lsl.w	r6, r2, r6
 800f0d0:	421e      	tst	r6, r3
 800f0d2:	d13a      	bne.n	800f14a <__gethex+0x3fe>
 800f0d4:	f045 0520 	orr.w	r5, r5, #32
 800f0d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0da:	601c      	str	r4, [r3, #0]
 800f0dc:	9b02      	ldr	r3, [sp, #8]
 800f0de:	601f      	str	r7, [r3, #0]
 800f0e0:	e6b0      	b.n	800ee44 <__gethex+0xf8>
 800f0e2:	4299      	cmp	r1, r3
 800f0e4:	f843 cc04 	str.w	ip, [r3, #-4]
 800f0e8:	d8d9      	bhi.n	800f09e <__gethex+0x352>
 800f0ea:	68a3      	ldr	r3, [r4, #8]
 800f0ec:	459b      	cmp	fp, r3
 800f0ee:	db17      	blt.n	800f120 <__gethex+0x3d4>
 800f0f0:	6861      	ldr	r1, [r4, #4]
 800f0f2:	9801      	ldr	r0, [sp, #4]
 800f0f4:	3101      	adds	r1, #1
 800f0f6:	f000 f9c3 	bl	800f480 <_Balloc>
 800f0fa:	4681      	mov	r9, r0
 800f0fc:	b918      	cbnz	r0, 800f106 <__gethex+0x3ba>
 800f0fe:	4b1a      	ldr	r3, [pc, #104]	@ (800f168 <__gethex+0x41c>)
 800f100:	4602      	mov	r2, r0
 800f102:	2184      	movs	r1, #132	@ 0x84
 800f104:	e6c5      	b.n	800ee92 <__gethex+0x146>
 800f106:	6922      	ldr	r2, [r4, #16]
 800f108:	3202      	adds	r2, #2
 800f10a:	f104 010c 	add.w	r1, r4, #12
 800f10e:	0092      	lsls	r2, r2, #2
 800f110:	300c      	adds	r0, #12
 800f112:	f7fe fefe 	bl	800df12 <memcpy>
 800f116:	4621      	mov	r1, r4
 800f118:	9801      	ldr	r0, [sp, #4]
 800f11a:	f000 f9f1 	bl	800f500 <_Bfree>
 800f11e:	464c      	mov	r4, r9
 800f120:	6923      	ldr	r3, [r4, #16]
 800f122:	1c5a      	adds	r2, r3, #1
 800f124:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f128:	6122      	str	r2, [r4, #16]
 800f12a:	2201      	movs	r2, #1
 800f12c:	615a      	str	r2, [r3, #20]
 800f12e:	e7be      	b.n	800f0ae <__gethex+0x362>
 800f130:	6922      	ldr	r2, [r4, #16]
 800f132:	455a      	cmp	r2, fp
 800f134:	dd0b      	ble.n	800f14e <__gethex+0x402>
 800f136:	2101      	movs	r1, #1
 800f138:	4620      	mov	r0, r4
 800f13a:	f7ff fd9f 	bl	800ec7c <rshift>
 800f13e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f142:	3701      	adds	r7, #1
 800f144:	42bb      	cmp	r3, r7
 800f146:	f6ff aee0 	blt.w	800ef0a <__gethex+0x1be>
 800f14a:	2501      	movs	r5, #1
 800f14c:	e7c2      	b.n	800f0d4 <__gethex+0x388>
 800f14e:	f016 061f 	ands.w	r6, r6, #31
 800f152:	d0fa      	beq.n	800f14a <__gethex+0x3fe>
 800f154:	4453      	add	r3, sl
 800f156:	f1c6 0620 	rsb	r6, r6, #32
 800f15a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f15e:	f000 fa81 	bl	800f664 <__hi0bits>
 800f162:	42b0      	cmp	r0, r6
 800f164:	dbe7      	blt.n	800f136 <__gethex+0x3ea>
 800f166:	e7f0      	b.n	800f14a <__gethex+0x3fe>
 800f168:	08010ec5 	.word	0x08010ec5

0800f16c <L_shift>:
 800f16c:	f1c2 0208 	rsb	r2, r2, #8
 800f170:	0092      	lsls	r2, r2, #2
 800f172:	b570      	push	{r4, r5, r6, lr}
 800f174:	f1c2 0620 	rsb	r6, r2, #32
 800f178:	6843      	ldr	r3, [r0, #4]
 800f17a:	6804      	ldr	r4, [r0, #0]
 800f17c:	fa03 f506 	lsl.w	r5, r3, r6
 800f180:	432c      	orrs	r4, r5
 800f182:	40d3      	lsrs	r3, r2
 800f184:	6004      	str	r4, [r0, #0]
 800f186:	f840 3f04 	str.w	r3, [r0, #4]!
 800f18a:	4288      	cmp	r0, r1
 800f18c:	d3f4      	bcc.n	800f178 <L_shift+0xc>
 800f18e:	bd70      	pop	{r4, r5, r6, pc}

0800f190 <__match>:
 800f190:	b530      	push	{r4, r5, lr}
 800f192:	6803      	ldr	r3, [r0, #0]
 800f194:	3301      	adds	r3, #1
 800f196:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f19a:	b914      	cbnz	r4, 800f1a2 <__match+0x12>
 800f19c:	6003      	str	r3, [r0, #0]
 800f19e:	2001      	movs	r0, #1
 800f1a0:	bd30      	pop	{r4, r5, pc}
 800f1a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f1aa:	2d19      	cmp	r5, #25
 800f1ac:	bf98      	it	ls
 800f1ae:	3220      	addls	r2, #32
 800f1b0:	42a2      	cmp	r2, r4
 800f1b2:	d0f0      	beq.n	800f196 <__match+0x6>
 800f1b4:	2000      	movs	r0, #0
 800f1b6:	e7f3      	b.n	800f1a0 <__match+0x10>

0800f1b8 <__hexnan>:
 800f1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1bc:	680b      	ldr	r3, [r1, #0]
 800f1be:	6801      	ldr	r1, [r0, #0]
 800f1c0:	115e      	asrs	r6, r3, #5
 800f1c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f1c6:	f013 031f 	ands.w	r3, r3, #31
 800f1ca:	b087      	sub	sp, #28
 800f1cc:	bf18      	it	ne
 800f1ce:	3604      	addne	r6, #4
 800f1d0:	2500      	movs	r5, #0
 800f1d2:	1f37      	subs	r7, r6, #4
 800f1d4:	4682      	mov	sl, r0
 800f1d6:	4690      	mov	r8, r2
 800f1d8:	9301      	str	r3, [sp, #4]
 800f1da:	f846 5c04 	str.w	r5, [r6, #-4]
 800f1de:	46b9      	mov	r9, r7
 800f1e0:	463c      	mov	r4, r7
 800f1e2:	9502      	str	r5, [sp, #8]
 800f1e4:	46ab      	mov	fp, r5
 800f1e6:	784a      	ldrb	r2, [r1, #1]
 800f1e8:	1c4b      	adds	r3, r1, #1
 800f1ea:	9303      	str	r3, [sp, #12]
 800f1ec:	b342      	cbz	r2, 800f240 <__hexnan+0x88>
 800f1ee:	4610      	mov	r0, r2
 800f1f0:	9105      	str	r1, [sp, #20]
 800f1f2:	9204      	str	r2, [sp, #16]
 800f1f4:	f7ff fd94 	bl	800ed20 <__hexdig_fun>
 800f1f8:	2800      	cmp	r0, #0
 800f1fa:	d151      	bne.n	800f2a0 <__hexnan+0xe8>
 800f1fc:	9a04      	ldr	r2, [sp, #16]
 800f1fe:	9905      	ldr	r1, [sp, #20]
 800f200:	2a20      	cmp	r2, #32
 800f202:	d818      	bhi.n	800f236 <__hexnan+0x7e>
 800f204:	9b02      	ldr	r3, [sp, #8]
 800f206:	459b      	cmp	fp, r3
 800f208:	dd13      	ble.n	800f232 <__hexnan+0x7a>
 800f20a:	454c      	cmp	r4, r9
 800f20c:	d206      	bcs.n	800f21c <__hexnan+0x64>
 800f20e:	2d07      	cmp	r5, #7
 800f210:	dc04      	bgt.n	800f21c <__hexnan+0x64>
 800f212:	462a      	mov	r2, r5
 800f214:	4649      	mov	r1, r9
 800f216:	4620      	mov	r0, r4
 800f218:	f7ff ffa8 	bl	800f16c <L_shift>
 800f21c:	4544      	cmp	r4, r8
 800f21e:	d952      	bls.n	800f2c6 <__hexnan+0x10e>
 800f220:	2300      	movs	r3, #0
 800f222:	f1a4 0904 	sub.w	r9, r4, #4
 800f226:	f844 3c04 	str.w	r3, [r4, #-4]
 800f22a:	f8cd b008 	str.w	fp, [sp, #8]
 800f22e:	464c      	mov	r4, r9
 800f230:	461d      	mov	r5, r3
 800f232:	9903      	ldr	r1, [sp, #12]
 800f234:	e7d7      	b.n	800f1e6 <__hexnan+0x2e>
 800f236:	2a29      	cmp	r2, #41	@ 0x29
 800f238:	d157      	bne.n	800f2ea <__hexnan+0x132>
 800f23a:	3102      	adds	r1, #2
 800f23c:	f8ca 1000 	str.w	r1, [sl]
 800f240:	f1bb 0f00 	cmp.w	fp, #0
 800f244:	d051      	beq.n	800f2ea <__hexnan+0x132>
 800f246:	454c      	cmp	r4, r9
 800f248:	d206      	bcs.n	800f258 <__hexnan+0xa0>
 800f24a:	2d07      	cmp	r5, #7
 800f24c:	dc04      	bgt.n	800f258 <__hexnan+0xa0>
 800f24e:	462a      	mov	r2, r5
 800f250:	4649      	mov	r1, r9
 800f252:	4620      	mov	r0, r4
 800f254:	f7ff ff8a 	bl	800f16c <L_shift>
 800f258:	4544      	cmp	r4, r8
 800f25a:	d936      	bls.n	800f2ca <__hexnan+0x112>
 800f25c:	f1a8 0204 	sub.w	r2, r8, #4
 800f260:	4623      	mov	r3, r4
 800f262:	f853 1b04 	ldr.w	r1, [r3], #4
 800f266:	f842 1f04 	str.w	r1, [r2, #4]!
 800f26a:	429f      	cmp	r7, r3
 800f26c:	d2f9      	bcs.n	800f262 <__hexnan+0xaa>
 800f26e:	1b3b      	subs	r3, r7, r4
 800f270:	f023 0303 	bic.w	r3, r3, #3
 800f274:	3304      	adds	r3, #4
 800f276:	3401      	adds	r4, #1
 800f278:	3e03      	subs	r6, #3
 800f27a:	42b4      	cmp	r4, r6
 800f27c:	bf88      	it	hi
 800f27e:	2304      	movhi	r3, #4
 800f280:	4443      	add	r3, r8
 800f282:	2200      	movs	r2, #0
 800f284:	f843 2b04 	str.w	r2, [r3], #4
 800f288:	429f      	cmp	r7, r3
 800f28a:	d2fb      	bcs.n	800f284 <__hexnan+0xcc>
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	b91b      	cbnz	r3, 800f298 <__hexnan+0xe0>
 800f290:	4547      	cmp	r7, r8
 800f292:	d128      	bne.n	800f2e6 <__hexnan+0x12e>
 800f294:	2301      	movs	r3, #1
 800f296:	603b      	str	r3, [r7, #0]
 800f298:	2005      	movs	r0, #5
 800f29a:	b007      	add	sp, #28
 800f29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2a0:	3501      	adds	r5, #1
 800f2a2:	2d08      	cmp	r5, #8
 800f2a4:	f10b 0b01 	add.w	fp, fp, #1
 800f2a8:	dd06      	ble.n	800f2b8 <__hexnan+0x100>
 800f2aa:	4544      	cmp	r4, r8
 800f2ac:	d9c1      	bls.n	800f232 <__hexnan+0x7a>
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	f844 3c04 	str.w	r3, [r4, #-4]
 800f2b4:	2501      	movs	r5, #1
 800f2b6:	3c04      	subs	r4, #4
 800f2b8:	6822      	ldr	r2, [r4, #0]
 800f2ba:	f000 000f 	and.w	r0, r0, #15
 800f2be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f2c2:	6020      	str	r0, [r4, #0]
 800f2c4:	e7b5      	b.n	800f232 <__hexnan+0x7a>
 800f2c6:	2508      	movs	r5, #8
 800f2c8:	e7b3      	b.n	800f232 <__hexnan+0x7a>
 800f2ca:	9b01      	ldr	r3, [sp, #4]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d0dd      	beq.n	800f28c <__hexnan+0xd4>
 800f2d0:	f1c3 0320 	rsb	r3, r3, #32
 800f2d4:	f04f 32ff 	mov.w	r2, #4294967295
 800f2d8:	40da      	lsrs	r2, r3
 800f2da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f2de:	4013      	ands	r3, r2
 800f2e0:	f846 3c04 	str.w	r3, [r6, #-4]
 800f2e4:	e7d2      	b.n	800f28c <__hexnan+0xd4>
 800f2e6:	3f04      	subs	r7, #4
 800f2e8:	e7d0      	b.n	800f28c <__hexnan+0xd4>
 800f2ea:	2004      	movs	r0, #4
 800f2ec:	e7d5      	b.n	800f29a <__hexnan+0xe2>
	...

0800f2f0 <malloc>:
 800f2f0:	4b02      	ldr	r3, [pc, #8]	@ (800f2fc <malloc+0xc>)
 800f2f2:	4601      	mov	r1, r0
 800f2f4:	6818      	ldr	r0, [r3, #0]
 800f2f6:	f000 b825 	b.w	800f344 <_malloc_r>
 800f2fa:	bf00      	nop
 800f2fc:	20000208 	.word	0x20000208

0800f300 <sbrk_aligned>:
 800f300:	b570      	push	{r4, r5, r6, lr}
 800f302:	4e0f      	ldr	r6, [pc, #60]	@ (800f340 <sbrk_aligned+0x40>)
 800f304:	460c      	mov	r4, r1
 800f306:	6831      	ldr	r1, [r6, #0]
 800f308:	4605      	mov	r5, r0
 800f30a:	b911      	cbnz	r1, 800f312 <sbrk_aligned+0x12>
 800f30c:	f001 f810 	bl	8010330 <_sbrk_r>
 800f310:	6030      	str	r0, [r6, #0]
 800f312:	4621      	mov	r1, r4
 800f314:	4628      	mov	r0, r5
 800f316:	f001 f80b 	bl	8010330 <_sbrk_r>
 800f31a:	1c43      	adds	r3, r0, #1
 800f31c:	d103      	bne.n	800f326 <sbrk_aligned+0x26>
 800f31e:	f04f 34ff 	mov.w	r4, #4294967295
 800f322:	4620      	mov	r0, r4
 800f324:	bd70      	pop	{r4, r5, r6, pc}
 800f326:	1cc4      	adds	r4, r0, #3
 800f328:	f024 0403 	bic.w	r4, r4, #3
 800f32c:	42a0      	cmp	r0, r4
 800f32e:	d0f8      	beq.n	800f322 <sbrk_aligned+0x22>
 800f330:	1a21      	subs	r1, r4, r0
 800f332:	4628      	mov	r0, r5
 800f334:	f000 fffc 	bl	8010330 <_sbrk_r>
 800f338:	3001      	adds	r0, #1
 800f33a:	d1f2      	bne.n	800f322 <sbrk_aligned+0x22>
 800f33c:	e7ef      	b.n	800f31e <sbrk_aligned+0x1e>
 800f33e:	bf00      	nop
 800f340:	200009ac 	.word	0x200009ac

0800f344 <_malloc_r>:
 800f344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f348:	1ccd      	adds	r5, r1, #3
 800f34a:	f025 0503 	bic.w	r5, r5, #3
 800f34e:	3508      	adds	r5, #8
 800f350:	2d0c      	cmp	r5, #12
 800f352:	bf38      	it	cc
 800f354:	250c      	movcc	r5, #12
 800f356:	2d00      	cmp	r5, #0
 800f358:	4606      	mov	r6, r0
 800f35a:	db01      	blt.n	800f360 <_malloc_r+0x1c>
 800f35c:	42a9      	cmp	r1, r5
 800f35e:	d904      	bls.n	800f36a <_malloc_r+0x26>
 800f360:	230c      	movs	r3, #12
 800f362:	6033      	str	r3, [r6, #0]
 800f364:	2000      	movs	r0, #0
 800f366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f36a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f440 <_malloc_r+0xfc>
 800f36e:	f000 f87b 	bl	800f468 <__malloc_lock>
 800f372:	f8d8 3000 	ldr.w	r3, [r8]
 800f376:	461c      	mov	r4, r3
 800f378:	bb44      	cbnz	r4, 800f3cc <_malloc_r+0x88>
 800f37a:	4629      	mov	r1, r5
 800f37c:	4630      	mov	r0, r6
 800f37e:	f7ff ffbf 	bl	800f300 <sbrk_aligned>
 800f382:	1c43      	adds	r3, r0, #1
 800f384:	4604      	mov	r4, r0
 800f386:	d158      	bne.n	800f43a <_malloc_r+0xf6>
 800f388:	f8d8 4000 	ldr.w	r4, [r8]
 800f38c:	4627      	mov	r7, r4
 800f38e:	2f00      	cmp	r7, #0
 800f390:	d143      	bne.n	800f41a <_malloc_r+0xd6>
 800f392:	2c00      	cmp	r4, #0
 800f394:	d04b      	beq.n	800f42e <_malloc_r+0xea>
 800f396:	6823      	ldr	r3, [r4, #0]
 800f398:	4639      	mov	r1, r7
 800f39a:	4630      	mov	r0, r6
 800f39c:	eb04 0903 	add.w	r9, r4, r3
 800f3a0:	f000 ffc6 	bl	8010330 <_sbrk_r>
 800f3a4:	4581      	cmp	r9, r0
 800f3a6:	d142      	bne.n	800f42e <_malloc_r+0xea>
 800f3a8:	6821      	ldr	r1, [r4, #0]
 800f3aa:	1a6d      	subs	r5, r5, r1
 800f3ac:	4629      	mov	r1, r5
 800f3ae:	4630      	mov	r0, r6
 800f3b0:	f7ff ffa6 	bl	800f300 <sbrk_aligned>
 800f3b4:	3001      	adds	r0, #1
 800f3b6:	d03a      	beq.n	800f42e <_malloc_r+0xea>
 800f3b8:	6823      	ldr	r3, [r4, #0]
 800f3ba:	442b      	add	r3, r5
 800f3bc:	6023      	str	r3, [r4, #0]
 800f3be:	f8d8 3000 	ldr.w	r3, [r8]
 800f3c2:	685a      	ldr	r2, [r3, #4]
 800f3c4:	bb62      	cbnz	r2, 800f420 <_malloc_r+0xdc>
 800f3c6:	f8c8 7000 	str.w	r7, [r8]
 800f3ca:	e00f      	b.n	800f3ec <_malloc_r+0xa8>
 800f3cc:	6822      	ldr	r2, [r4, #0]
 800f3ce:	1b52      	subs	r2, r2, r5
 800f3d0:	d420      	bmi.n	800f414 <_malloc_r+0xd0>
 800f3d2:	2a0b      	cmp	r2, #11
 800f3d4:	d917      	bls.n	800f406 <_malloc_r+0xc2>
 800f3d6:	1961      	adds	r1, r4, r5
 800f3d8:	42a3      	cmp	r3, r4
 800f3da:	6025      	str	r5, [r4, #0]
 800f3dc:	bf18      	it	ne
 800f3de:	6059      	strne	r1, [r3, #4]
 800f3e0:	6863      	ldr	r3, [r4, #4]
 800f3e2:	bf08      	it	eq
 800f3e4:	f8c8 1000 	streq.w	r1, [r8]
 800f3e8:	5162      	str	r2, [r4, r5]
 800f3ea:	604b      	str	r3, [r1, #4]
 800f3ec:	4630      	mov	r0, r6
 800f3ee:	f000 f841 	bl	800f474 <__malloc_unlock>
 800f3f2:	f104 000b 	add.w	r0, r4, #11
 800f3f6:	1d23      	adds	r3, r4, #4
 800f3f8:	f020 0007 	bic.w	r0, r0, #7
 800f3fc:	1ac2      	subs	r2, r0, r3
 800f3fe:	bf1c      	itt	ne
 800f400:	1a1b      	subne	r3, r3, r0
 800f402:	50a3      	strne	r3, [r4, r2]
 800f404:	e7af      	b.n	800f366 <_malloc_r+0x22>
 800f406:	6862      	ldr	r2, [r4, #4]
 800f408:	42a3      	cmp	r3, r4
 800f40a:	bf0c      	ite	eq
 800f40c:	f8c8 2000 	streq.w	r2, [r8]
 800f410:	605a      	strne	r2, [r3, #4]
 800f412:	e7eb      	b.n	800f3ec <_malloc_r+0xa8>
 800f414:	4623      	mov	r3, r4
 800f416:	6864      	ldr	r4, [r4, #4]
 800f418:	e7ae      	b.n	800f378 <_malloc_r+0x34>
 800f41a:	463c      	mov	r4, r7
 800f41c:	687f      	ldr	r7, [r7, #4]
 800f41e:	e7b6      	b.n	800f38e <_malloc_r+0x4a>
 800f420:	461a      	mov	r2, r3
 800f422:	685b      	ldr	r3, [r3, #4]
 800f424:	42a3      	cmp	r3, r4
 800f426:	d1fb      	bne.n	800f420 <_malloc_r+0xdc>
 800f428:	2300      	movs	r3, #0
 800f42a:	6053      	str	r3, [r2, #4]
 800f42c:	e7de      	b.n	800f3ec <_malloc_r+0xa8>
 800f42e:	230c      	movs	r3, #12
 800f430:	6033      	str	r3, [r6, #0]
 800f432:	4630      	mov	r0, r6
 800f434:	f000 f81e 	bl	800f474 <__malloc_unlock>
 800f438:	e794      	b.n	800f364 <_malloc_r+0x20>
 800f43a:	6005      	str	r5, [r0, #0]
 800f43c:	e7d6      	b.n	800f3ec <_malloc_r+0xa8>
 800f43e:	bf00      	nop
 800f440:	200009b0 	.word	0x200009b0

0800f444 <__ascii_mbtowc>:
 800f444:	b082      	sub	sp, #8
 800f446:	b901      	cbnz	r1, 800f44a <__ascii_mbtowc+0x6>
 800f448:	a901      	add	r1, sp, #4
 800f44a:	b142      	cbz	r2, 800f45e <__ascii_mbtowc+0x1a>
 800f44c:	b14b      	cbz	r3, 800f462 <__ascii_mbtowc+0x1e>
 800f44e:	7813      	ldrb	r3, [r2, #0]
 800f450:	600b      	str	r3, [r1, #0]
 800f452:	7812      	ldrb	r2, [r2, #0]
 800f454:	1e10      	subs	r0, r2, #0
 800f456:	bf18      	it	ne
 800f458:	2001      	movne	r0, #1
 800f45a:	b002      	add	sp, #8
 800f45c:	4770      	bx	lr
 800f45e:	4610      	mov	r0, r2
 800f460:	e7fb      	b.n	800f45a <__ascii_mbtowc+0x16>
 800f462:	f06f 0001 	mvn.w	r0, #1
 800f466:	e7f8      	b.n	800f45a <__ascii_mbtowc+0x16>

0800f468 <__malloc_lock>:
 800f468:	4801      	ldr	r0, [pc, #4]	@ (800f470 <__malloc_lock+0x8>)
 800f46a:	f7fe bd50 	b.w	800df0e <__retarget_lock_acquire_recursive>
 800f46e:	bf00      	nop
 800f470:	200009a8 	.word	0x200009a8

0800f474 <__malloc_unlock>:
 800f474:	4801      	ldr	r0, [pc, #4]	@ (800f47c <__malloc_unlock+0x8>)
 800f476:	f7fe bd4b 	b.w	800df10 <__retarget_lock_release_recursive>
 800f47a:	bf00      	nop
 800f47c:	200009a8 	.word	0x200009a8

0800f480 <_Balloc>:
 800f480:	b570      	push	{r4, r5, r6, lr}
 800f482:	69c6      	ldr	r6, [r0, #28]
 800f484:	4604      	mov	r4, r0
 800f486:	460d      	mov	r5, r1
 800f488:	b976      	cbnz	r6, 800f4a8 <_Balloc+0x28>
 800f48a:	2010      	movs	r0, #16
 800f48c:	f7ff ff30 	bl	800f2f0 <malloc>
 800f490:	4602      	mov	r2, r0
 800f492:	61e0      	str	r0, [r4, #28]
 800f494:	b920      	cbnz	r0, 800f4a0 <_Balloc+0x20>
 800f496:	4b18      	ldr	r3, [pc, #96]	@ (800f4f8 <_Balloc+0x78>)
 800f498:	4818      	ldr	r0, [pc, #96]	@ (800f4fc <_Balloc+0x7c>)
 800f49a:	216b      	movs	r1, #107	@ 0x6b
 800f49c:	f000 ff58 	bl	8010350 <__assert_func>
 800f4a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f4a4:	6006      	str	r6, [r0, #0]
 800f4a6:	60c6      	str	r6, [r0, #12]
 800f4a8:	69e6      	ldr	r6, [r4, #28]
 800f4aa:	68f3      	ldr	r3, [r6, #12]
 800f4ac:	b183      	cbz	r3, 800f4d0 <_Balloc+0x50>
 800f4ae:	69e3      	ldr	r3, [r4, #28]
 800f4b0:	68db      	ldr	r3, [r3, #12]
 800f4b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f4b6:	b9b8      	cbnz	r0, 800f4e8 <_Balloc+0x68>
 800f4b8:	2101      	movs	r1, #1
 800f4ba:	fa01 f605 	lsl.w	r6, r1, r5
 800f4be:	1d72      	adds	r2, r6, #5
 800f4c0:	0092      	lsls	r2, r2, #2
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	f000 ff62 	bl	801038c <_calloc_r>
 800f4c8:	b160      	cbz	r0, 800f4e4 <_Balloc+0x64>
 800f4ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f4ce:	e00e      	b.n	800f4ee <_Balloc+0x6e>
 800f4d0:	2221      	movs	r2, #33	@ 0x21
 800f4d2:	2104      	movs	r1, #4
 800f4d4:	4620      	mov	r0, r4
 800f4d6:	f000 ff59 	bl	801038c <_calloc_r>
 800f4da:	69e3      	ldr	r3, [r4, #28]
 800f4dc:	60f0      	str	r0, [r6, #12]
 800f4de:	68db      	ldr	r3, [r3, #12]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d1e4      	bne.n	800f4ae <_Balloc+0x2e>
 800f4e4:	2000      	movs	r0, #0
 800f4e6:	bd70      	pop	{r4, r5, r6, pc}
 800f4e8:	6802      	ldr	r2, [r0, #0]
 800f4ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f4f4:	e7f7      	b.n	800f4e6 <_Balloc+0x66>
 800f4f6:	bf00      	nop
 800f4f8:	08010e56 	.word	0x08010e56
 800f4fc:	08010f36 	.word	0x08010f36

0800f500 <_Bfree>:
 800f500:	b570      	push	{r4, r5, r6, lr}
 800f502:	69c6      	ldr	r6, [r0, #28]
 800f504:	4605      	mov	r5, r0
 800f506:	460c      	mov	r4, r1
 800f508:	b976      	cbnz	r6, 800f528 <_Bfree+0x28>
 800f50a:	2010      	movs	r0, #16
 800f50c:	f7ff fef0 	bl	800f2f0 <malloc>
 800f510:	4602      	mov	r2, r0
 800f512:	61e8      	str	r0, [r5, #28]
 800f514:	b920      	cbnz	r0, 800f520 <_Bfree+0x20>
 800f516:	4b09      	ldr	r3, [pc, #36]	@ (800f53c <_Bfree+0x3c>)
 800f518:	4809      	ldr	r0, [pc, #36]	@ (800f540 <_Bfree+0x40>)
 800f51a:	218f      	movs	r1, #143	@ 0x8f
 800f51c:	f000 ff18 	bl	8010350 <__assert_func>
 800f520:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f524:	6006      	str	r6, [r0, #0]
 800f526:	60c6      	str	r6, [r0, #12]
 800f528:	b13c      	cbz	r4, 800f53a <_Bfree+0x3a>
 800f52a:	69eb      	ldr	r3, [r5, #28]
 800f52c:	6862      	ldr	r2, [r4, #4]
 800f52e:	68db      	ldr	r3, [r3, #12]
 800f530:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f534:	6021      	str	r1, [r4, #0]
 800f536:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f53a:	bd70      	pop	{r4, r5, r6, pc}
 800f53c:	08010e56 	.word	0x08010e56
 800f540:	08010f36 	.word	0x08010f36

0800f544 <__multadd>:
 800f544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f548:	690d      	ldr	r5, [r1, #16]
 800f54a:	4607      	mov	r7, r0
 800f54c:	460c      	mov	r4, r1
 800f54e:	461e      	mov	r6, r3
 800f550:	f101 0c14 	add.w	ip, r1, #20
 800f554:	2000      	movs	r0, #0
 800f556:	f8dc 3000 	ldr.w	r3, [ip]
 800f55a:	b299      	uxth	r1, r3
 800f55c:	fb02 6101 	mla	r1, r2, r1, r6
 800f560:	0c1e      	lsrs	r6, r3, #16
 800f562:	0c0b      	lsrs	r3, r1, #16
 800f564:	fb02 3306 	mla	r3, r2, r6, r3
 800f568:	b289      	uxth	r1, r1
 800f56a:	3001      	adds	r0, #1
 800f56c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f570:	4285      	cmp	r5, r0
 800f572:	f84c 1b04 	str.w	r1, [ip], #4
 800f576:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f57a:	dcec      	bgt.n	800f556 <__multadd+0x12>
 800f57c:	b30e      	cbz	r6, 800f5c2 <__multadd+0x7e>
 800f57e:	68a3      	ldr	r3, [r4, #8]
 800f580:	42ab      	cmp	r3, r5
 800f582:	dc19      	bgt.n	800f5b8 <__multadd+0x74>
 800f584:	6861      	ldr	r1, [r4, #4]
 800f586:	4638      	mov	r0, r7
 800f588:	3101      	adds	r1, #1
 800f58a:	f7ff ff79 	bl	800f480 <_Balloc>
 800f58e:	4680      	mov	r8, r0
 800f590:	b928      	cbnz	r0, 800f59e <__multadd+0x5a>
 800f592:	4602      	mov	r2, r0
 800f594:	4b0c      	ldr	r3, [pc, #48]	@ (800f5c8 <__multadd+0x84>)
 800f596:	480d      	ldr	r0, [pc, #52]	@ (800f5cc <__multadd+0x88>)
 800f598:	21ba      	movs	r1, #186	@ 0xba
 800f59a:	f000 fed9 	bl	8010350 <__assert_func>
 800f59e:	6922      	ldr	r2, [r4, #16]
 800f5a0:	3202      	adds	r2, #2
 800f5a2:	f104 010c 	add.w	r1, r4, #12
 800f5a6:	0092      	lsls	r2, r2, #2
 800f5a8:	300c      	adds	r0, #12
 800f5aa:	f7fe fcb2 	bl	800df12 <memcpy>
 800f5ae:	4621      	mov	r1, r4
 800f5b0:	4638      	mov	r0, r7
 800f5b2:	f7ff ffa5 	bl	800f500 <_Bfree>
 800f5b6:	4644      	mov	r4, r8
 800f5b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f5bc:	3501      	adds	r5, #1
 800f5be:	615e      	str	r6, [r3, #20]
 800f5c0:	6125      	str	r5, [r4, #16]
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5c8:	08010ec5 	.word	0x08010ec5
 800f5cc:	08010f36 	.word	0x08010f36

0800f5d0 <__s2b>:
 800f5d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5d4:	460c      	mov	r4, r1
 800f5d6:	4615      	mov	r5, r2
 800f5d8:	461f      	mov	r7, r3
 800f5da:	2209      	movs	r2, #9
 800f5dc:	3308      	adds	r3, #8
 800f5de:	4606      	mov	r6, r0
 800f5e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f5e4:	2100      	movs	r1, #0
 800f5e6:	2201      	movs	r2, #1
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	db09      	blt.n	800f600 <__s2b+0x30>
 800f5ec:	4630      	mov	r0, r6
 800f5ee:	f7ff ff47 	bl	800f480 <_Balloc>
 800f5f2:	b940      	cbnz	r0, 800f606 <__s2b+0x36>
 800f5f4:	4602      	mov	r2, r0
 800f5f6:	4b19      	ldr	r3, [pc, #100]	@ (800f65c <__s2b+0x8c>)
 800f5f8:	4819      	ldr	r0, [pc, #100]	@ (800f660 <__s2b+0x90>)
 800f5fa:	21d3      	movs	r1, #211	@ 0xd3
 800f5fc:	f000 fea8 	bl	8010350 <__assert_func>
 800f600:	0052      	lsls	r2, r2, #1
 800f602:	3101      	adds	r1, #1
 800f604:	e7f0      	b.n	800f5e8 <__s2b+0x18>
 800f606:	9b08      	ldr	r3, [sp, #32]
 800f608:	6143      	str	r3, [r0, #20]
 800f60a:	2d09      	cmp	r5, #9
 800f60c:	f04f 0301 	mov.w	r3, #1
 800f610:	6103      	str	r3, [r0, #16]
 800f612:	dd16      	ble.n	800f642 <__s2b+0x72>
 800f614:	f104 0909 	add.w	r9, r4, #9
 800f618:	46c8      	mov	r8, r9
 800f61a:	442c      	add	r4, r5
 800f61c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f620:	4601      	mov	r1, r0
 800f622:	3b30      	subs	r3, #48	@ 0x30
 800f624:	220a      	movs	r2, #10
 800f626:	4630      	mov	r0, r6
 800f628:	f7ff ff8c 	bl	800f544 <__multadd>
 800f62c:	45a0      	cmp	r8, r4
 800f62e:	d1f5      	bne.n	800f61c <__s2b+0x4c>
 800f630:	f1a5 0408 	sub.w	r4, r5, #8
 800f634:	444c      	add	r4, r9
 800f636:	1b2d      	subs	r5, r5, r4
 800f638:	1963      	adds	r3, r4, r5
 800f63a:	42bb      	cmp	r3, r7
 800f63c:	db04      	blt.n	800f648 <__s2b+0x78>
 800f63e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f642:	340a      	adds	r4, #10
 800f644:	2509      	movs	r5, #9
 800f646:	e7f6      	b.n	800f636 <__s2b+0x66>
 800f648:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f64c:	4601      	mov	r1, r0
 800f64e:	3b30      	subs	r3, #48	@ 0x30
 800f650:	220a      	movs	r2, #10
 800f652:	4630      	mov	r0, r6
 800f654:	f7ff ff76 	bl	800f544 <__multadd>
 800f658:	e7ee      	b.n	800f638 <__s2b+0x68>
 800f65a:	bf00      	nop
 800f65c:	08010ec5 	.word	0x08010ec5
 800f660:	08010f36 	.word	0x08010f36

0800f664 <__hi0bits>:
 800f664:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f668:	4603      	mov	r3, r0
 800f66a:	bf36      	itet	cc
 800f66c:	0403      	lslcc	r3, r0, #16
 800f66e:	2000      	movcs	r0, #0
 800f670:	2010      	movcc	r0, #16
 800f672:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f676:	bf3c      	itt	cc
 800f678:	021b      	lslcc	r3, r3, #8
 800f67a:	3008      	addcc	r0, #8
 800f67c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f680:	bf3c      	itt	cc
 800f682:	011b      	lslcc	r3, r3, #4
 800f684:	3004      	addcc	r0, #4
 800f686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f68a:	bf3c      	itt	cc
 800f68c:	009b      	lslcc	r3, r3, #2
 800f68e:	3002      	addcc	r0, #2
 800f690:	2b00      	cmp	r3, #0
 800f692:	db05      	blt.n	800f6a0 <__hi0bits+0x3c>
 800f694:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f698:	f100 0001 	add.w	r0, r0, #1
 800f69c:	bf08      	it	eq
 800f69e:	2020      	moveq	r0, #32
 800f6a0:	4770      	bx	lr

0800f6a2 <__lo0bits>:
 800f6a2:	6803      	ldr	r3, [r0, #0]
 800f6a4:	4602      	mov	r2, r0
 800f6a6:	f013 0007 	ands.w	r0, r3, #7
 800f6aa:	d00b      	beq.n	800f6c4 <__lo0bits+0x22>
 800f6ac:	07d9      	lsls	r1, r3, #31
 800f6ae:	d421      	bmi.n	800f6f4 <__lo0bits+0x52>
 800f6b0:	0798      	lsls	r0, r3, #30
 800f6b2:	bf49      	itett	mi
 800f6b4:	085b      	lsrmi	r3, r3, #1
 800f6b6:	089b      	lsrpl	r3, r3, #2
 800f6b8:	2001      	movmi	r0, #1
 800f6ba:	6013      	strmi	r3, [r2, #0]
 800f6bc:	bf5c      	itt	pl
 800f6be:	6013      	strpl	r3, [r2, #0]
 800f6c0:	2002      	movpl	r0, #2
 800f6c2:	4770      	bx	lr
 800f6c4:	b299      	uxth	r1, r3
 800f6c6:	b909      	cbnz	r1, 800f6cc <__lo0bits+0x2a>
 800f6c8:	0c1b      	lsrs	r3, r3, #16
 800f6ca:	2010      	movs	r0, #16
 800f6cc:	b2d9      	uxtb	r1, r3
 800f6ce:	b909      	cbnz	r1, 800f6d4 <__lo0bits+0x32>
 800f6d0:	3008      	adds	r0, #8
 800f6d2:	0a1b      	lsrs	r3, r3, #8
 800f6d4:	0719      	lsls	r1, r3, #28
 800f6d6:	bf04      	itt	eq
 800f6d8:	091b      	lsreq	r3, r3, #4
 800f6da:	3004      	addeq	r0, #4
 800f6dc:	0799      	lsls	r1, r3, #30
 800f6de:	bf04      	itt	eq
 800f6e0:	089b      	lsreq	r3, r3, #2
 800f6e2:	3002      	addeq	r0, #2
 800f6e4:	07d9      	lsls	r1, r3, #31
 800f6e6:	d403      	bmi.n	800f6f0 <__lo0bits+0x4e>
 800f6e8:	085b      	lsrs	r3, r3, #1
 800f6ea:	f100 0001 	add.w	r0, r0, #1
 800f6ee:	d003      	beq.n	800f6f8 <__lo0bits+0x56>
 800f6f0:	6013      	str	r3, [r2, #0]
 800f6f2:	4770      	bx	lr
 800f6f4:	2000      	movs	r0, #0
 800f6f6:	4770      	bx	lr
 800f6f8:	2020      	movs	r0, #32
 800f6fa:	4770      	bx	lr

0800f6fc <__i2b>:
 800f6fc:	b510      	push	{r4, lr}
 800f6fe:	460c      	mov	r4, r1
 800f700:	2101      	movs	r1, #1
 800f702:	f7ff febd 	bl	800f480 <_Balloc>
 800f706:	4602      	mov	r2, r0
 800f708:	b928      	cbnz	r0, 800f716 <__i2b+0x1a>
 800f70a:	4b05      	ldr	r3, [pc, #20]	@ (800f720 <__i2b+0x24>)
 800f70c:	4805      	ldr	r0, [pc, #20]	@ (800f724 <__i2b+0x28>)
 800f70e:	f240 1145 	movw	r1, #325	@ 0x145
 800f712:	f000 fe1d 	bl	8010350 <__assert_func>
 800f716:	2301      	movs	r3, #1
 800f718:	6144      	str	r4, [r0, #20]
 800f71a:	6103      	str	r3, [r0, #16]
 800f71c:	bd10      	pop	{r4, pc}
 800f71e:	bf00      	nop
 800f720:	08010ec5 	.word	0x08010ec5
 800f724:	08010f36 	.word	0x08010f36

0800f728 <__multiply>:
 800f728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f72c:	4614      	mov	r4, r2
 800f72e:	690a      	ldr	r2, [r1, #16]
 800f730:	6923      	ldr	r3, [r4, #16]
 800f732:	429a      	cmp	r2, r3
 800f734:	bfa8      	it	ge
 800f736:	4623      	movge	r3, r4
 800f738:	460f      	mov	r7, r1
 800f73a:	bfa4      	itt	ge
 800f73c:	460c      	movge	r4, r1
 800f73e:	461f      	movge	r7, r3
 800f740:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f744:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f748:	68a3      	ldr	r3, [r4, #8]
 800f74a:	6861      	ldr	r1, [r4, #4]
 800f74c:	eb0a 0609 	add.w	r6, sl, r9
 800f750:	42b3      	cmp	r3, r6
 800f752:	b085      	sub	sp, #20
 800f754:	bfb8      	it	lt
 800f756:	3101      	addlt	r1, #1
 800f758:	f7ff fe92 	bl	800f480 <_Balloc>
 800f75c:	b930      	cbnz	r0, 800f76c <__multiply+0x44>
 800f75e:	4602      	mov	r2, r0
 800f760:	4b44      	ldr	r3, [pc, #272]	@ (800f874 <__multiply+0x14c>)
 800f762:	4845      	ldr	r0, [pc, #276]	@ (800f878 <__multiply+0x150>)
 800f764:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f768:	f000 fdf2 	bl	8010350 <__assert_func>
 800f76c:	f100 0514 	add.w	r5, r0, #20
 800f770:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f774:	462b      	mov	r3, r5
 800f776:	2200      	movs	r2, #0
 800f778:	4543      	cmp	r3, r8
 800f77a:	d321      	bcc.n	800f7c0 <__multiply+0x98>
 800f77c:	f107 0114 	add.w	r1, r7, #20
 800f780:	f104 0214 	add.w	r2, r4, #20
 800f784:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f788:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f78c:	9302      	str	r3, [sp, #8]
 800f78e:	1b13      	subs	r3, r2, r4
 800f790:	3b15      	subs	r3, #21
 800f792:	f023 0303 	bic.w	r3, r3, #3
 800f796:	3304      	adds	r3, #4
 800f798:	f104 0715 	add.w	r7, r4, #21
 800f79c:	42ba      	cmp	r2, r7
 800f79e:	bf38      	it	cc
 800f7a0:	2304      	movcc	r3, #4
 800f7a2:	9301      	str	r3, [sp, #4]
 800f7a4:	9b02      	ldr	r3, [sp, #8]
 800f7a6:	9103      	str	r1, [sp, #12]
 800f7a8:	428b      	cmp	r3, r1
 800f7aa:	d80c      	bhi.n	800f7c6 <__multiply+0x9e>
 800f7ac:	2e00      	cmp	r6, #0
 800f7ae:	dd03      	ble.n	800f7b8 <__multiply+0x90>
 800f7b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d05b      	beq.n	800f870 <__multiply+0x148>
 800f7b8:	6106      	str	r6, [r0, #16]
 800f7ba:	b005      	add	sp, #20
 800f7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7c0:	f843 2b04 	str.w	r2, [r3], #4
 800f7c4:	e7d8      	b.n	800f778 <__multiply+0x50>
 800f7c6:	f8b1 a000 	ldrh.w	sl, [r1]
 800f7ca:	f1ba 0f00 	cmp.w	sl, #0
 800f7ce:	d024      	beq.n	800f81a <__multiply+0xf2>
 800f7d0:	f104 0e14 	add.w	lr, r4, #20
 800f7d4:	46a9      	mov	r9, r5
 800f7d6:	f04f 0c00 	mov.w	ip, #0
 800f7da:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f7de:	f8d9 3000 	ldr.w	r3, [r9]
 800f7e2:	fa1f fb87 	uxth.w	fp, r7
 800f7e6:	b29b      	uxth	r3, r3
 800f7e8:	fb0a 330b 	mla	r3, sl, fp, r3
 800f7ec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f7f0:	f8d9 7000 	ldr.w	r7, [r9]
 800f7f4:	4463      	add	r3, ip
 800f7f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f7fa:	fb0a c70b 	mla	r7, sl, fp, ip
 800f7fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f802:	b29b      	uxth	r3, r3
 800f804:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f808:	4572      	cmp	r2, lr
 800f80a:	f849 3b04 	str.w	r3, [r9], #4
 800f80e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f812:	d8e2      	bhi.n	800f7da <__multiply+0xb2>
 800f814:	9b01      	ldr	r3, [sp, #4]
 800f816:	f845 c003 	str.w	ip, [r5, r3]
 800f81a:	9b03      	ldr	r3, [sp, #12]
 800f81c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f820:	3104      	adds	r1, #4
 800f822:	f1b9 0f00 	cmp.w	r9, #0
 800f826:	d021      	beq.n	800f86c <__multiply+0x144>
 800f828:	682b      	ldr	r3, [r5, #0]
 800f82a:	f104 0c14 	add.w	ip, r4, #20
 800f82e:	46ae      	mov	lr, r5
 800f830:	f04f 0a00 	mov.w	sl, #0
 800f834:	f8bc b000 	ldrh.w	fp, [ip]
 800f838:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f83c:	fb09 770b 	mla	r7, r9, fp, r7
 800f840:	4457      	add	r7, sl
 800f842:	b29b      	uxth	r3, r3
 800f844:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f848:	f84e 3b04 	str.w	r3, [lr], #4
 800f84c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f850:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f854:	f8be 3000 	ldrh.w	r3, [lr]
 800f858:	fb09 330a 	mla	r3, r9, sl, r3
 800f85c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f860:	4562      	cmp	r2, ip
 800f862:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f866:	d8e5      	bhi.n	800f834 <__multiply+0x10c>
 800f868:	9f01      	ldr	r7, [sp, #4]
 800f86a:	51eb      	str	r3, [r5, r7]
 800f86c:	3504      	adds	r5, #4
 800f86e:	e799      	b.n	800f7a4 <__multiply+0x7c>
 800f870:	3e01      	subs	r6, #1
 800f872:	e79b      	b.n	800f7ac <__multiply+0x84>
 800f874:	08010ec5 	.word	0x08010ec5
 800f878:	08010f36 	.word	0x08010f36

0800f87c <__pow5mult>:
 800f87c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f880:	4615      	mov	r5, r2
 800f882:	f012 0203 	ands.w	r2, r2, #3
 800f886:	4607      	mov	r7, r0
 800f888:	460e      	mov	r6, r1
 800f88a:	d007      	beq.n	800f89c <__pow5mult+0x20>
 800f88c:	4c25      	ldr	r4, [pc, #148]	@ (800f924 <__pow5mult+0xa8>)
 800f88e:	3a01      	subs	r2, #1
 800f890:	2300      	movs	r3, #0
 800f892:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f896:	f7ff fe55 	bl	800f544 <__multadd>
 800f89a:	4606      	mov	r6, r0
 800f89c:	10ad      	asrs	r5, r5, #2
 800f89e:	d03d      	beq.n	800f91c <__pow5mult+0xa0>
 800f8a0:	69fc      	ldr	r4, [r7, #28]
 800f8a2:	b97c      	cbnz	r4, 800f8c4 <__pow5mult+0x48>
 800f8a4:	2010      	movs	r0, #16
 800f8a6:	f7ff fd23 	bl	800f2f0 <malloc>
 800f8aa:	4602      	mov	r2, r0
 800f8ac:	61f8      	str	r0, [r7, #28]
 800f8ae:	b928      	cbnz	r0, 800f8bc <__pow5mult+0x40>
 800f8b0:	4b1d      	ldr	r3, [pc, #116]	@ (800f928 <__pow5mult+0xac>)
 800f8b2:	481e      	ldr	r0, [pc, #120]	@ (800f92c <__pow5mult+0xb0>)
 800f8b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f8b8:	f000 fd4a 	bl	8010350 <__assert_func>
 800f8bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f8c0:	6004      	str	r4, [r0, #0]
 800f8c2:	60c4      	str	r4, [r0, #12]
 800f8c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f8c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f8cc:	b94c      	cbnz	r4, 800f8e2 <__pow5mult+0x66>
 800f8ce:	f240 2171 	movw	r1, #625	@ 0x271
 800f8d2:	4638      	mov	r0, r7
 800f8d4:	f7ff ff12 	bl	800f6fc <__i2b>
 800f8d8:	2300      	movs	r3, #0
 800f8da:	f8c8 0008 	str.w	r0, [r8, #8]
 800f8de:	4604      	mov	r4, r0
 800f8e0:	6003      	str	r3, [r0, #0]
 800f8e2:	f04f 0900 	mov.w	r9, #0
 800f8e6:	07eb      	lsls	r3, r5, #31
 800f8e8:	d50a      	bpl.n	800f900 <__pow5mult+0x84>
 800f8ea:	4631      	mov	r1, r6
 800f8ec:	4622      	mov	r2, r4
 800f8ee:	4638      	mov	r0, r7
 800f8f0:	f7ff ff1a 	bl	800f728 <__multiply>
 800f8f4:	4631      	mov	r1, r6
 800f8f6:	4680      	mov	r8, r0
 800f8f8:	4638      	mov	r0, r7
 800f8fa:	f7ff fe01 	bl	800f500 <_Bfree>
 800f8fe:	4646      	mov	r6, r8
 800f900:	106d      	asrs	r5, r5, #1
 800f902:	d00b      	beq.n	800f91c <__pow5mult+0xa0>
 800f904:	6820      	ldr	r0, [r4, #0]
 800f906:	b938      	cbnz	r0, 800f918 <__pow5mult+0x9c>
 800f908:	4622      	mov	r2, r4
 800f90a:	4621      	mov	r1, r4
 800f90c:	4638      	mov	r0, r7
 800f90e:	f7ff ff0b 	bl	800f728 <__multiply>
 800f912:	6020      	str	r0, [r4, #0]
 800f914:	f8c0 9000 	str.w	r9, [r0]
 800f918:	4604      	mov	r4, r0
 800f91a:	e7e4      	b.n	800f8e6 <__pow5mult+0x6a>
 800f91c:	4630      	mov	r0, r6
 800f91e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f922:	bf00      	nop
 800f924:	08010f90 	.word	0x08010f90
 800f928:	08010e56 	.word	0x08010e56
 800f92c:	08010f36 	.word	0x08010f36

0800f930 <__lshift>:
 800f930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f934:	460c      	mov	r4, r1
 800f936:	6849      	ldr	r1, [r1, #4]
 800f938:	6923      	ldr	r3, [r4, #16]
 800f93a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f93e:	68a3      	ldr	r3, [r4, #8]
 800f940:	4607      	mov	r7, r0
 800f942:	4691      	mov	r9, r2
 800f944:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f948:	f108 0601 	add.w	r6, r8, #1
 800f94c:	42b3      	cmp	r3, r6
 800f94e:	db0b      	blt.n	800f968 <__lshift+0x38>
 800f950:	4638      	mov	r0, r7
 800f952:	f7ff fd95 	bl	800f480 <_Balloc>
 800f956:	4605      	mov	r5, r0
 800f958:	b948      	cbnz	r0, 800f96e <__lshift+0x3e>
 800f95a:	4602      	mov	r2, r0
 800f95c:	4b28      	ldr	r3, [pc, #160]	@ (800fa00 <__lshift+0xd0>)
 800f95e:	4829      	ldr	r0, [pc, #164]	@ (800fa04 <__lshift+0xd4>)
 800f960:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f964:	f000 fcf4 	bl	8010350 <__assert_func>
 800f968:	3101      	adds	r1, #1
 800f96a:	005b      	lsls	r3, r3, #1
 800f96c:	e7ee      	b.n	800f94c <__lshift+0x1c>
 800f96e:	2300      	movs	r3, #0
 800f970:	f100 0114 	add.w	r1, r0, #20
 800f974:	f100 0210 	add.w	r2, r0, #16
 800f978:	4618      	mov	r0, r3
 800f97a:	4553      	cmp	r3, sl
 800f97c:	db33      	blt.n	800f9e6 <__lshift+0xb6>
 800f97e:	6920      	ldr	r0, [r4, #16]
 800f980:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f984:	f104 0314 	add.w	r3, r4, #20
 800f988:	f019 091f 	ands.w	r9, r9, #31
 800f98c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f990:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f994:	d02b      	beq.n	800f9ee <__lshift+0xbe>
 800f996:	f1c9 0e20 	rsb	lr, r9, #32
 800f99a:	468a      	mov	sl, r1
 800f99c:	2200      	movs	r2, #0
 800f99e:	6818      	ldr	r0, [r3, #0]
 800f9a0:	fa00 f009 	lsl.w	r0, r0, r9
 800f9a4:	4310      	orrs	r0, r2
 800f9a6:	f84a 0b04 	str.w	r0, [sl], #4
 800f9aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9ae:	459c      	cmp	ip, r3
 800f9b0:	fa22 f20e 	lsr.w	r2, r2, lr
 800f9b4:	d8f3      	bhi.n	800f99e <__lshift+0x6e>
 800f9b6:	ebac 0304 	sub.w	r3, ip, r4
 800f9ba:	3b15      	subs	r3, #21
 800f9bc:	f023 0303 	bic.w	r3, r3, #3
 800f9c0:	3304      	adds	r3, #4
 800f9c2:	f104 0015 	add.w	r0, r4, #21
 800f9c6:	4584      	cmp	ip, r0
 800f9c8:	bf38      	it	cc
 800f9ca:	2304      	movcc	r3, #4
 800f9cc:	50ca      	str	r2, [r1, r3]
 800f9ce:	b10a      	cbz	r2, 800f9d4 <__lshift+0xa4>
 800f9d0:	f108 0602 	add.w	r6, r8, #2
 800f9d4:	3e01      	subs	r6, #1
 800f9d6:	4638      	mov	r0, r7
 800f9d8:	612e      	str	r6, [r5, #16]
 800f9da:	4621      	mov	r1, r4
 800f9dc:	f7ff fd90 	bl	800f500 <_Bfree>
 800f9e0:	4628      	mov	r0, r5
 800f9e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	e7c5      	b.n	800f97a <__lshift+0x4a>
 800f9ee:	3904      	subs	r1, #4
 800f9f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800f9f8:	459c      	cmp	ip, r3
 800f9fa:	d8f9      	bhi.n	800f9f0 <__lshift+0xc0>
 800f9fc:	e7ea      	b.n	800f9d4 <__lshift+0xa4>
 800f9fe:	bf00      	nop
 800fa00:	08010ec5 	.word	0x08010ec5
 800fa04:	08010f36 	.word	0x08010f36

0800fa08 <__mcmp>:
 800fa08:	690a      	ldr	r2, [r1, #16]
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	6900      	ldr	r0, [r0, #16]
 800fa0e:	1a80      	subs	r0, r0, r2
 800fa10:	b530      	push	{r4, r5, lr}
 800fa12:	d10e      	bne.n	800fa32 <__mcmp+0x2a>
 800fa14:	3314      	adds	r3, #20
 800fa16:	3114      	adds	r1, #20
 800fa18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fa1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fa20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fa24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fa28:	4295      	cmp	r5, r2
 800fa2a:	d003      	beq.n	800fa34 <__mcmp+0x2c>
 800fa2c:	d205      	bcs.n	800fa3a <__mcmp+0x32>
 800fa2e:	f04f 30ff 	mov.w	r0, #4294967295
 800fa32:	bd30      	pop	{r4, r5, pc}
 800fa34:	42a3      	cmp	r3, r4
 800fa36:	d3f3      	bcc.n	800fa20 <__mcmp+0x18>
 800fa38:	e7fb      	b.n	800fa32 <__mcmp+0x2a>
 800fa3a:	2001      	movs	r0, #1
 800fa3c:	e7f9      	b.n	800fa32 <__mcmp+0x2a>
	...

0800fa40 <__mdiff>:
 800fa40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa44:	4689      	mov	r9, r1
 800fa46:	4606      	mov	r6, r0
 800fa48:	4611      	mov	r1, r2
 800fa4a:	4648      	mov	r0, r9
 800fa4c:	4614      	mov	r4, r2
 800fa4e:	f7ff ffdb 	bl	800fa08 <__mcmp>
 800fa52:	1e05      	subs	r5, r0, #0
 800fa54:	d112      	bne.n	800fa7c <__mdiff+0x3c>
 800fa56:	4629      	mov	r1, r5
 800fa58:	4630      	mov	r0, r6
 800fa5a:	f7ff fd11 	bl	800f480 <_Balloc>
 800fa5e:	4602      	mov	r2, r0
 800fa60:	b928      	cbnz	r0, 800fa6e <__mdiff+0x2e>
 800fa62:	4b3f      	ldr	r3, [pc, #252]	@ (800fb60 <__mdiff+0x120>)
 800fa64:	f240 2137 	movw	r1, #567	@ 0x237
 800fa68:	483e      	ldr	r0, [pc, #248]	@ (800fb64 <__mdiff+0x124>)
 800fa6a:	f000 fc71 	bl	8010350 <__assert_func>
 800fa6e:	2301      	movs	r3, #1
 800fa70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fa74:	4610      	mov	r0, r2
 800fa76:	b003      	add	sp, #12
 800fa78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa7c:	bfbc      	itt	lt
 800fa7e:	464b      	movlt	r3, r9
 800fa80:	46a1      	movlt	r9, r4
 800fa82:	4630      	mov	r0, r6
 800fa84:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fa88:	bfba      	itte	lt
 800fa8a:	461c      	movlt	r4, r3
 800fa8c:	2501      	movlt	r5, #1
 800fa8e:	2500      	movge	r5, #0
 800fa90:	f7ff fcf6 	bl	800f480 <_Balloc>
 800fa94:	4602      	mov	r2, r0
 800fa96:	b918      	cbnz	r0, 800faa0 <__mdiff+0x60>
 800fa98:	4b31      	ldr	r3, [pc, #196]	@ (800fb60 <__mdiff+0x120>)
 800fa9a:	f240 2145 	movw	r1, #581	@ 0x245
 800fa9e:	e7e3      	b.n	800fa68 <__mdiff+0x28>
 800faa0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800faa4:	6926      	ldr	r6, [r4, #16]
 800faa6:	60c5      	str	r5, [r0, #12]
 800faa8:	f109 0310 	add.w	r3, r9, #16
 800faac:	f109 0514 	add.w	r5, r9, #20
 800fab0:	f104 0e14 	add.w	lr, r4, #20
 800fab4:	f100 0b14 	add.w	fp, r0, #20
 800fab8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fabc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fac0:	9301      	str	r3, [sp, #4]
 800fac2:	46d9      	mov	r9, fp
 800fac4:	f04f 0c00 	mov.w	ip, #0
 800fac8:	9b01      	ldr	r3, [sp, #4]
 800faca:	f85e 0b04 	ldr.w	r0, [lr], #4
 800face:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fad2:	9301      	str	r3, [sp, #4]
 800fad4:	fa1f f38a 	uxth.w	r3, sl
 800fad8:	4619      	mov	r1, r3
 800fada:	b283      	uxth	r3, r0
 800fadc:	1acb      	subs	r3, r1, r3
 800fade:	0c00      	lsrs	r0, r0, #16
 800fae0:	4463      	add	r3, ip
 800fae2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fae6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800faea:	b29b      	uxth	r3, r3
 800faec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800faf0:	4576      	cmp	r6, lr
 800faf2:	f849 3b04 	str.w	r3, [r9], #4
 800faf6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fafa:	d8e5      	bhi.n	800fac8 <__mdiff+0x88>
 800fafc:	1b33      	subs	r3, r6, r4
 800fafe:	3b15      	subs	r3, #21
 800fb00:	f023 0303 	bic.w	r3, r3, #3
 800fb04:	3415      	adds	r4, #21
 800fb06:	3304      	adds	r3, #4
 800fb08:	42a6      	cmp	r6, r4
 800fb0a:	bf38      	it	cc
 800fb0c:	2304      	movcc	r3, #4
 800fb0e:	441d      	add	r5, r3
 800fb10:	445b      	add	r3, fp
 800fb12:	461e      	mov	r6, r3
 800fb14:	462c      	mov	r4, r5
 800fb16:	4544      	cmp	r4, r8
 800fb18:	d30e      	bcc.n	800fb38 <__mdiff+0xf8>
 800fb1a:	f108 0103 	add.w	r1, r8, #3
 800fb1e:	1b49      	subs	r1, r1, r5
 800fb20:	f021 0103 	bic.w	r1, r1, #3
 800fb24:	3d03      	subs	r5, #3
 800fb26:	45a8      	cmp	r8, r5
 800fb28:	bf38      	it	cc
 800fb2a:	2100      	movcc	r1, #0
 800fb2c:	440b      	add	r3, r1
 800fb2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fb32:	b191      	cbz	r1, 800fb5a <__mdiff+0x11a>
 800fb34:	6117      	str	r7, [r2, #16]
 800fb36:	e79d      	b.n	800fa74 <__mdiff+0x34>
 800fb38:	f854 1b04 	ldr.w	r1, [r4], #4
 800fb3c:	46e6      	mov	lr, ip
 800fb3e:	0c08      	lsrs	r0, r1, #16
 800fb40:	fa1c fc81 	uxtah	ip, ip, r1
 800fb44:	4471      	add	r1, lr
 800fb46:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fb4a:	b289      	uxth	r1, r1
 800fb4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fb50:	f846 1b04 	str.w	r1, [r6], #4
 800fb54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fb58:	e7dd      	b.n	800fb16 <__mdiff+0xd6>
 800fb5a:	3f01      	subs	r7, #1
 800fb5c:	e7e7      	b.n	800fb2e <__mdiff+0xee>
 800fb5e:	bf00      	nop
 800fb60:	08010ec5 	.word	0x08010ec5
 800fb64:	08010f36 	.word	0x08010f36

0800fb68 <__ulp>:
 800fb68:	b082      	sub	sp, #8
 800fb6a:	ed8d 0b00 	vstr	d0, [sp]
 800fb6e:	9a01      	ldr	r2, [sp, #4]
 800fb70:	4b0f      	ldr	r3, [pc, #60]	@ (800fbb0 <__ulp+0x48>)
 800fb72:	4013      	ands	r3, r2
 800fb74:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	dc08      	bgt.n	800fb8e <__ulp+0x26>
 800fb7c:	425b      	negs	r3, r3
 800fb7e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800fb82:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fb86:	da04      	bge.n	800fb92 <__ulp+0x2a>
 800fb88:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fb8c:	4113      	asrs	r3, r2
 800fb8e:	2200      	movs	r2, #0
 800fb90:	e008      	b.n	800fba4 <__ulp+0x3c>
 800fb92:	f1a2 0314 	sub.w	r3, r2, #20
 800fb96:	2b1e      	cmp	r3, #30
 800fb98:	bfda      	itte	le
 800fb9a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800fb9e:	40da      	lsrle	r2, r3
 800fba0:	2201      	movgt	r2, #1
 800fba2:	2300      	movs	r3, #0
 800fba4:	4619      	mov	r1, r3
 800fba6:	4610      	mov	r0, r2
 800fba8:	ec41 0b10 	vmov	d0, r0, r1
 800fbac:	b002      	add	sp, #8
 800fbae:	4770      	bx	lr
 800fbb0:	7ff00000 	.word	0x7ff00000

0800fbb4 <__b2d>:
 800fbb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbb8:	6906      	ldr	r6, [r0, #16]
 800fbba:	f100 0814 	add.w	r8, r0, #20
 800fbbe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fbc2:	1f37      	subs	r7, r6, #4
 800fbc4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fbc8:	4610      	mov	r0, r2
 800fbca:	f7ff fd4b 	bl	800f664 <__hi0bits>
 800fbce:	f1c0 0320 	rsb	r3, r0, #32
 800fbd2:	280a      	cmp	r0, #10
 800fbd4:	600b      	str	r3, [r1, #0]
 800fbd6:	491b      	ldr	r1, [pc, #108]	@ (800fc44 <__b2d+0x90>)
 800fbd8:	dc15      	bgt.n	800fc06 <__b2d+0x52>
 800fbda:	f1c0 0c0b 	rsb	ip, r0, #11
 800fbde:	fa22 f30c 	lsr.w	r3, r2, ip
 800fbe2:	45b8      	cmp	r8, r7
 800fbe4:	ea43 0501 	orr.w	r5, r3, r1
 800fbe8:	bf34      	ite	cc
 800fbea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fbee:	2300      	movcs	r3, #0
 800fbf0:	3015      	adds	r0, #21
 800fbf2:	fa02 f000 	lsl.w	r0, r2, r0
 800fbf6:	fa23 f30c 	lsr.w	r3, r3, ip
 800fbfa:	4303      	orrs	r3, r0
 800fbfc:	461c      	mov	r4, r3
 800fbfe:	ec45 4b10 	vmov	d0, r4, r5
 800fc02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc06:	45b8      	cmp	r8, r7
 800fc08:	bf3a      	itte	cc
 800fc0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fc0e:	f1a6 0708 	subcc.w	r7, r6, #8
 800fc12:	2300      	movcs	r3, #0
 800fc14:	380b      	subs	r0, #11
 800fc16:	d012      	beq.n	800fc3e <__b2d+0x8a>
 800fc18:	f1c0 0120 	rsb	r1, r0, #32
 800fc1c:	fa23 f401 	lsr.w	r4, r3, r1
 800fc20:	4082      	lsls	r2, r0
 800fc22:	4322      	orrs	r2, r4
 800fc24:	4547      	cmp	r7, r8
 800fc26:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800fc2a:	bf8c      	ite	hi
 800fc2c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fc30:	2200      	movls	r2, #0
 800fc32:	4083      	lsls	r3, r0
 800fc34:	40ca      	lsrs	r2, r1
 800fc36:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800fc3a:	4313      	orrs	r3, r2
 800fc3c:	e7de      	b.n	800fbfc <__b2d+0x48>
 800fc3e:	ea42 0501 	orr.w	r5, r2, r1
 800fc42:	e7db      	b.n	800fbfc <__b2d+0x48>
 800fc44:	3ff00000 	.word	0x3ff00000

0800fc48 <__d2b>:
 800fc48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fc4c:	460f      	mov	r7, r1
 800fc4e:	2101      	movs	r1, #1
 800fc50:	ec59 8b10 	vmov	r8, r9, d0
 800fc54:	4616      	mov	r6, r2
 800fc56:	f7ff fc13 	bl	800f480 <_Balloc>
 800fc5a:	4604      	mov	r4, r0
 800fc5c:	b930      	cbnz	r0, 800fc6c <__d2b+0x24>
 800fc5e:	4602      	mov	r2, r0
 800fc60:	4b23      	ldr	r3, [pc, #140]	@ (800fcf0 <__d2b+0xa8>)
 800fc62:	4824      	ldr	r0, [pc, #144]	@ (800fcf4 <__d2b+0xac>)
 800fc64:	f240 310f 	movw	r1, #783	@ 0x30f
 800fc68:	f000 fb72 	bl	8010350 <__assert_func>
 800fc6c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fc70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fc74:	b10d      	cbz	r5, 800fc7a <__d2b+0x32>
 800fc76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fc7a:	9301      	str	r3, [sp, #4]
 800fc7c:	f1b8 0300 	subs.w	r3, r8, #0
 800fc80:	d023      	beq.n	800fcca <__d2b+0x82>
 800fc82:	4668      	mov	r0, sp
 800fc84:	9300      	str	r3, [sp, #0]
 800fc86:	f7ff fd0c 	bl	800f6a2 <__lo0bits>
 800fc8a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fc8e:	b1d0      	cbz	r0, 800fcc6 <__d2b+0x7e>
 800fc90:	f1c0 0320 	rsb	r3, r0, #32
 800fc94:	fa02 f303 	lsl.w	r3, r2, r3
 800fc98:	430b      	orrs	r3, r1
 800fc9a:	40c2      	lsrs	r2, r0
 800fc9c:	6163      	str	r3, [r4, #20]
 800fc9e:	9201      	str	r2, [sp, #4]
 800fca0:	9b01      	ldr	r3, [sp, #4]
 800fca2:	61a3      	str	r3, [r4, #24]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	bf0c      	ite	eq
 800fca8:	2201      	moveq	r2, #1
 800fcaa:	2202      	movne	r2, #2
 800fcac:	6122      	str	r2, [r4, #16]
 800fcae:	b1a5      	cbz	r5, 800fcda <__d2b+0x92>
 800fcb0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fcb4:	4405      	add	r5, r0
 800fcb6:	603d      	str	r5, [r7, #0]
 800fcb8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fcbc:	6030      	str	r0, [r6, #0]
 800fcbe:	4620      	mov	r0, r4
 800fcc0:	b003      	add	sp, #12
 800fcc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcc6:	6161      	str	r1, [r4, #20]
 800fcc8:	e7ea      	b.n	800fca0 <__d2b+0x58>
 800fcca:	a801      	add	r0, sp, #4
 800fccc:	f7ff fce9 	bl	800f6a2 <__lo0bits>
 800fcd0:	9b01      	ldr	r3, [sp, #4]
 800fcd2:	6163      	str	r3, [r4, #20]
 800fcd4:	3020      	adds	r0, #32
 800fcd6:	2201      	movs	r2, #1
 800fcd8:	e7e8      	b.n	800fcac <__d2b+0x64>
 800fcda:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fcde:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fce2:	6038      	str	r0, [r7, #0]
 800fce4:	6918      	ldr	r0, [r3, #16]
 800fce6:	f7ff fcbd 	bl	800f664 <__hi0bits>
 800fcea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fcee:	e7e5      	b.n	800fcbc <__d2b+0x74>
 800fcf0:	08010ec5 	.word	0x08010ec5
 800fcf4:	08010f36 	.word	0x08010f36

0800fcf8 <__ratio>:
 800fcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcfc:	b085      	sub	sp, #20
 800fcfe:	e9cd 1000 	strd	r1, r0, [sp]
 800fd02:	a902      	add	r1, sp, #8
 800fd04:	f7ff ff56 	bl	800fbb4 <__b2d>
 800fd08:	9800      	ldr	r0, [sp, #0]
 800fd0a:	a903      	add	r1, sp, #12
 800fd0c:	ec55 4b10 	vmov	r4, r5, d0
 800fd10:	f7ff ff50 	bl	800fbb4 <__b2d>
 800fd14:	9b01      	ldr	r3, [sp, #4]
 800fd16:	6919      	ldr	r1, [r3, #16]
 800fd18:	9b00      	ldr	r3, [sp, #0]
 800fd1a:	691b      	ldr	r3, [r3, #16]
 800fd1c:	1ac9      	subs	r1, r1, r3
 800fd1e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fd22:	1a9b      	subs	r3, r3, r2
 800fd24:	ec5b ab10 	vmov	sl, fp, d0
 800fd28:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	bfce      	itee	gt
 800fd30:	462a      	movgt	r2, r5
 800fd32:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fd36:	465a      	movle	r2, fp
 800fd38:	462f      	mov	r7, r5
 800fd3a:	46d9      	mov	r9, fp
 800fd3c:	bfcc      	ite	gt
 800fd3e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fd42:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800fd46:	464b      	mov	r3, r9
 800fd48:	4652      	mov	r2, sl
 800fd4a:	4620      	mov	r0, r4
 800fd4c:	4639      	mov	r1, r7
 800fd4e:	f7f0 fda5 	bl	800089c <__aeabi_ddiv>
 800fd52:	ec41 0b10 	vmov	d0, r0, r1
 800fd56:	b005      	add	sp, #20
 800fd58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fd5c <__copybits>:
 800fd5c:	3901      	subs	r1, #1
 800fd5e:	b570      	push	{r4, r5, r6, lr}
 800fd60:	1149      	asrs	r1, r1, #5
 800fd62:	6914      	ldr	r4, [r2, #16]
 800fd64:	3101      	adds	r1, #1
 800fd66:	f102 0314 	add.w	r3, r2, #20
 800fd6a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fd6e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fd72:	1f05      	subs	r5, r0, #4
 800fd74:	42a3      	cmp	r3, r4
 800fd76:	d30c      	bcc.n	800fd92 <__copybits+0x36>
 800fd78:	1aa3      	subs	r3, r4, r2
 800fd7a:	3b11      	subs	r3, #17
 800fd7c:	f023 0303 	bic.w	r3, r3, #3
 800fd80:	3211      	adds	r2, #17
 800fd82:	42a2      	cmp	r2, r4
 800fd84:	bf88      	it	hi
 800fd86:	2300      	movhi	r3, #0
 800fd88:	4418      	add	r0, r3
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	4288      	cmp	r0, r1
 800fd8e:	d305      	bcc.n	800fd9c <__copybits+0x40>
 800fd90:	bd70      	pop	{r4, r5, r6, pc}
 800fd92:	f853 6b04 	ldr.w	r6, [r3], #4
 800fd96:	f845 6f04 	str.w	r6, [r5, #4]!
 800fd9a:	e7eb      	b.n	800fd74 <__copybits+0x18>
 800fd9c:	f840 3b04 	str.w	r3, [r0], #4
 800fda0:	e7f4      	b.n	800fd8c <__copybits+0x30>

0800fda2 <__any_on>:
 800fda2:	f100 0214 	add.w	r2, r0, #20
 800fda6:	6900      	ldr	r0, [r0, #16]
 800fda8:	114b      	asrs	r3, r1, #5
 800fdaa:	4298      	cmp	r0, r3
 800fdac:	b510      	push	{r4, lr}
 800fdae:	db11      	blt.n	800fdd4 <__any_on+0x32>
 800fdb0:	dd0a      	ble.n	800fdc8 <__any_on+0x26>
 800fdb2:	f011 011f 	ands.w	r1, r1, #31
 800fdb6:	d007      	beq.n	800fdc8 <__any_on+0x26>
 800fdb8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fdbc:	fa24 f001 	lsr.w	r0, r4, r1
 800fdc0:	fa00 f101 	lsl.w	r1, r0, r1
 800fdc4:	428c      	cmp	r4, r1
 800fdc6:	d10b      	bne.n	800fde0 <__any_on+0x3e>
 800fdc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fdcc:	4293      	cmp	r3, r2
 800fdce:	d803      	bhi.n	800fdd8 <__any_on+0x36>
 800fdd0:	2000      	movs	r0, #0
 800fdd2:	bd10      	pop	{r4, pc}
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	e7f7      	b.n	800fdc8 <__any_on+0x26>
 800fdd8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fddc:	2900      	cmp	r1, #0
 800fdde:	d0f5      	beq.n	800fdcc <__any_on+0x2a>
 800fde0:	2001      	movs	r0, #1
 800fde2:	e7f6      	b.n	800fdd2 <__any_on+0x30>

0800fde4 <_strtol_l.constprop.0>:
 800fde4:	2b24      	cmp	r3, #36	@ 0x24
 800fde6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdea:	4686      	mov	lr, r0
 800fdec:	4690      	mov	r8, r2
 800fdee:	d801      	bhi.n	800fdf4 <_strtol_l.constprop.0+0x10>
 800fdf0:	2b01      	cmp	r3, #1
 800fdf2:	d106      	bne.n	800fe02 <_strtol_l.constprop.0+0x1e>
 800fdf4:	f7fe f860 	bl	800deb8 <__errno>
 800fdf8:	2316      	movs	r3, #22
 800fdfa:	6003      	str	r3, [r0, #0]
 800fdfc:	2000      	movs	r0, #0
 800fdfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe02:	4834      	ldr	r0, [pc, #208]	@ (800fed4 <_strtol_l.constprop.0+0xf0>)
 800fe04:	460d      	mov	r5, r1
 800fe06:	462a      	mov	r2, r5
 800fe08:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fe0c:	5d06      	ldrb	r6, [r0, r4]
 800fe0e:	f016 0608 	ands.w	r6, r6, #8
 800fe12:	d1f8      	bne.n	800fe06 <_strtol_l.constprop.0+0x22>
 800fe14:	2c2d      	cmp	r4, #45	@ 0x2d
 800fe16:	d12d      	bne.n	800fe74 <_strtol_l.constprop.0+0x90>
 800fe18:	782c      	ldrb	r4, [r5, #0]
 800fe1a:	2601      	movs	r6, #1
 800fe1c:	1c95      	adds	r5, r2, #2
 800fe1e:	f033 0210 	bics.w	r2, r3, #16
 800fe22:	d109      	bne.n	800fe38 <_strtol_l.constprop.0+0x54>
 800fe24:	2c30      	cmp	r4, #48	@ 0x30
 800fe26:	d12a      	bne.n	800fe7e <_strtol_l.constprop.0+0x9a>
 800fe28:	782a      	ldrb	r2, [r5, #0]
 800fe2a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fe2e:	2a58      	cmp	r2, #88	@ 0x58
 800fe30:	d125      	bne.n	800fe7e <_strtol_l.constprop.0+0x9a>
 800fe32:	786c      	ldrb	r4, [r5, #1]
 800fe34:	2310      	movs	r3, #16
 800fe36:	3502      	adds	r5, #2
 800fe38:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800fe3c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fe40:	2200      	movs	r2, #0
 800fe42:	fbbc f9f3 	udiv	r9, ip, r3
 800fe46:	4610      	mov	r0, r2
 800fe48:	fb03 ca19 	mls	sl, r3, r9, ip
 800fe4c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800fe50:	2f09      	cmp	r7, #9
 800fe52:	d81b      	bhi.n	800fe8c <_strtol_l.constprop.0+0xa8>
 800fe54:	463c      	mov	r4, r7
 800fe56:	42a3      	cmp	r3, r4
 800fe58:	dd27      	ble.n	800feaa <_strtol_l.constprop.0+0xc6>
 800fe5a:	1c57      	adds	r7, r2, #1
 800fe5c:	d007      	beq.n	800fe6e <_strtol_l.constprop.0+0x8a>
 800fe5e:	4581      	cmp	r9, r0
 800fe60:	d320      	bcc.n	800fea4 <_strtol_l.constprop.0+0xc0>
 800fe62:	d101      	bne.n	800fe68 <_strtol_l.constprop.0+0x84>
 800fe64:	45a2      	cmp	sl, r4
 800fe66:	db1d      	blt.n	800fea4 <_strtol_l.constprop.0+0xc0>
 800fe68:	fb00 4003 	mla	r0, r0, r3, r4
 800fe6c:	2201      	movs	r2, #1
 800fe6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fe72:	e7eb      	b.n	800fe4c <_strtol_l.constprop.0+0x68>
 800fe74:	2c2b      	cmp	r4, #43	@ 0x2b
 800fe76:	bf04      	itt	eq
 800fe78:	782c      	ldrbeq	r4, [r5, #0]
 800fe7a:	1c95      	addeq	r5, r2, #2
 800fe7c:	e7cf      	b.n	800fe1e <_strtol_l.constprop.0+0x3a>
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d1da      	bne.n	800fe38 <_strtol_l.constprop.0+0x54>
 800fe82:	2c30      	cmp	r4, #48	@ 0x30
 800fe84:	bf0c      	ite	eq
 800fe86:	2308      	moveq	r3, #8
 800fe88:	230a      	movne	r3, #10
 800fe8a:	e7d5      	b.n	800fe38 <_strtol_l.constprop.0+0x54>
 800fe8c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800fe90:	2f19      	cmp	r7, #25
 800fe92:	d801      	bhi.n	800fe98 <_strtol_l.constprop.0+0xb4>
 800fe94:	3c37      	subs	r4, #55	@ 0x37
 800fe96:	e7de      	b.n	800fe56 <_strtol_l.constprop.0+0x72>
 800fe98:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800fe9c:	2f19      	cmp	r7, #25
 800fe9e:	d804      	bhi.n	800feaa <_strtol_l.constprop.0+0xc6>
 800fea0:	3c57      	subs	r4, #87	@ 0x57
 800fea2:	e7d8      	b.n	800fe56 <_strtol_l.constprop.0+0x72>
 800fea4:	f04f 32ff 	mov.w	r2, #4294967295
 800fea8:	e7e1      	b.n	800fe6e <_strtol_l.constprop.0+0x8a>
 800feaa:	1c53      	adds	r3, r2, #1
 800feac:	d108      	bne.n	800fec0 <_strtol_l.constprop.0+0xdc>
 800feae:	2322      	movs	r3, #34	@ 0x22
 800feb0:	f8ce 3000 	str.w	r3, [lr]
 800feb4:	4660      	mov	r0, ip
 800feb6:	f1b8 0f00 	cmp.w	r8, #0
 800feba:	d0a0      	beq.n	800fdfe <_strtol_l.constprop.0+0x1a>
 800febc:	1e69      	subs	r1, r5, #1
 800febe:	e006      	b.n	800fece <_strtol_l.constprop.0+0xea>
 800fec0:	b106      	cbz	r6, 800fec4 <_strtol_l.constprop.0+0xe0>
 800fec2:	4240      	negs	r0, r0
 800fec4:	f1b8 0f00 	cmp.w	r8, #0
 800fec8:	d099      	beq.n	800fdfe <_strtol_l.constprop.0+0x1a>
 800feca:	2a00      	cmp	r2, #0
 800fecc:	d1f6      	bne.n	800febc <_strtol_l.constprop.0+0xd8>
 800fece:	f8c8 1000 	str.w	r1, [r8]
 800fed2:	e794      	b.n	800fdfe <_strtol_l.constprop.0+0x1a>
 800fed4:	08011091 	.word	0x08011091

0800fed8 <_strtol_r>:
 800fed8:	f7ff bf84 	b.w	800fde4 <_strtol_l.constprop.0>

0800fedc <__ascii_wctomb>:
 800fedc:	4603      	mov	r3, r0
 800fede:	4608      	mov	r0, r1
 800fee0:	b141      	cbz	r1, 800fef4 <__ascii_wctomb+0x18>
 800fee2:	2aff      	cmp	r2, #255	@ 0xff
 800fee4:	d904      	bls.n	800fef0 <__ascii_wctomb+0x14>
 800fee6:	228a      	movs	r2, #138	@ 0x8a
 800fee8:	601a      	str	r2, [r3, #0]
 800feea:	f04f 30ff 	mov.w	r0, #4294967295
 800feee:	4770      	bx	lr
 800fef0:	700a      	strb	r2, [r1, #0]
 800fef2:	2001      	movs	r0, #1
 800fef4:	4770      	bx	lr

0800fef6 <__ssputs_r>:
 800fef6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fefa:	688e      	ldr	r6, [r1, #8]
 800fefc:	461f      	mov	r7, r3
 800fefe:	42be      	cmp	r6, r7
 800ff00:	680b      	ldr	r3, [r1, #0]
 800ff02:	4682      	mov	sl, r0
 800ff04:	460c      	mov	r4, r1
 800ff06:	4690      	mov	r8, r2
 800ff08:	d82d      	bhi.n	800ff66 <__ssputs_r+0x70>
 800ff0a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ff0e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ff12:	d026      	beq.n	800ff62 <__ssputs_r+0x6c>
 800ff14:	6965      	ldr	r5, [r4, #20]
 800ff16:	6909      	ldr	r1, [r1, #16]
 800ff18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ff1c:	eba3 0901 	sub.w	r9, r3, r1
 800ff20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ff24:	1c7b      	adds	r3, r7, #1
 800ff26:	444b      	add	r3, r9
 800ff28:	106d      	asrs	r5, r5, #1
 800ff2a:	429d      	cmp	r5, r3
 800ff2c:	bf38      	it	cc
 800ff2e:	461d      	movcc	r5, r3
 800ff30:	0553      	lsls	r3, r2, #21
 800ff32:	d527      	bpl.n	800ff84 <__ssputs_r+0x8e>
 800ff34:	4629      	mov	r1, r5
 800ff36:	f7ff fa05 	bl	800f344 <_malloc_r>
 800ff3a:	4606      	mov	r6, r0
 800ff3c:	b360      	cbz	r0, 800ff98 <__ssputs_r+0xa2>
 800ff3e:	6921      	ldr	r1, [r4, #16]
 800ff40:	464a      	mov	r2, r9
 800ff42:	f7fd ffe6 	bl	800df12 <memcpy>
 800ff46:	89a3      	ldrh	r3, [r4, #12]
 800ff48:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ff4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff50:	81a3      	strh	r3, [r4, #12]
 800ff52:	6126      	str	r6, [r4, #16]
 800ff54:	6165      	str	r5, [r4, #20]
 800ff56:	444e      	add	r6, r9
 800ff58:	eba5 0509 	sub.w	r5, r5, r9
 800ff5c:	6026      	str	r6, [r4, #0]
 800ff5e:	60a5      	str	r5, [r4, #8]
 800ff60:	463e      	mov	r6, r7
 800ff62:	42be      	cmp	r6, r7
 800ff64:	d900      	bls.n	800ff68 <__ssputs_r+0x72>
 800ff66:	463e      	mov	r6, r7
 800ff68:	6820      	ldr	r0, [r4, #0]
 800ff6a:	4632      	mov	r2, r6
 800ff6c:	4641      	mov	r1, r8
 800ff6e:	f000 f9c5 	bl	80102fc <memmove>
 800ff72:	68a3      	ldr	r3, [r4, #8]
 800ff74:	1b9b      	subs	r3, r3, r6
 800ff76:	60a3      	str	r3, [r4, #8]
 800ff78:	6823      	ldr	r3, [r4, #0]
 800ff7a:	4433      	add	r3, r6
 800ff7c:	6023      	str	r3, [r4, #0]
 800ff7e:	2000      	movs	r0, #0
 800ff80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff84:	462a      	mov	r2, r5
 800ff86:	f000 fa15 	bl	80103b4 <_realloc_r>
 800ff8a:	4606      	mov	r6, r0
 800ff8c:	2800      	cmp	r0, #0
 800ff8e:	d1e0      	bne.n	800ff52 <__ssputs_r+0x5c>
 800ff90:	6921      	ldr	r1, [r4, #16]
 800ff92:	4650      	mov	r0, sl
 800ff94:	f7fe fe28 	bl	800ebe8 <_free_r>
 800ff98:	230c      	movs	r3, #12
 800ff9a:	f8ca 3000 	str.w	r3, [sl]
 800ff9e:	89a3      	ldrh	r3, [r4, #12]
 800ffa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ffa4:	81a3      	strh	r3, [r4, #12]
 800ffa6:	f04f 30ff 	mov.w	r0, #4294967295
 800ffaa:	e7e9      	b.n	800ff80 <__ssputs_r+0x8a>

0800ffac <_svfiprintf_r>:
 800ffac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffb0:	4698      	mov	r8, r3
 800ffb2:	898b      	ldrh	r3, [r1, #12]
 800ffb4:	061b      	lsls	r3, r3, #24
 800ffb6:	b09d      	sub	sp, #116	@ 0x74
 800ffb8:	4607      	mov	r7, r0
 800ffba:	460d      	mov	r5, r1
 800ffbc:	4614      	mov	r4, r2
 800ffbe:	d510      	bpl.n	800ffe2 <_svfiprintf_r+0x36>
 800ffc0:	690b      	ldr	r3, [r1, #16]
 800ffc2:	b973      	cbnz	r3, 800ffe2 <_svfiprintf_r+0x36>
 800ffc4:	2140      	movs	r1, #64	@ 0x40
 800ffc6:	f7ff f9bd 	bl	800f344 <_malloc_r>
 800ffca:	6028      	str	r0, [r5, #0]
 800ffcc:	6128      	str	r0, [r5, #16]
 800ffce:	b930      	cbnz	r0, 800ffde <_svfiprintf_r+0x32>
 800ffd0:	230c      	movs	r3, #12
 800ffd2:	603b      	str	r3, [r7, #0]
 800ffd4:	f04f 30ff 	mov.w	r0, #4294967295
 800ffd8:	b01d      	add	sp, #116	@ 0x74
 800ffda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffde:	2340      	movs	r3, #64	@ 0x40
 800ffe0:	616b      	str	r3, [r5, #20]
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ffe6:	2320      	movs	r3, #32
 800ffe8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ffec:	f8cd 800c 	str.w	r8, [sp, #12]
 800fff0:	2330      	movs	r3, #48	@ 0x30
 800fff2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010190 <_svfiprintf_r+0x1e4>
 800fff6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fffa:	f04f 0901 	mov.w	r9, #1
 800fffe:	4623      	mov	r3, r4
 8010000:	469a      	mov	sl, r3
 8010002:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010006:	b10a      	cbz	r2, 801000c <_svfiprintf_r+0x60>
 8010008:	2a25      	cmp	r2, #37	@ 0x25
 801000a:	d1f9      	bne.n	8010000 <_svfiprintf_r+0x54>
 801000c:	ebba 0b04 	subs.w	fp, sl, r4
 8010010:	d00b      	beq.n	801002a <_svfiprintf_r+0x7e>
 8010012:	465b      	mov	r3, fp
 8010014:	4622      	mov	r2, r4
 8010016:	4629      	mov	r1, r5
 8010018:	4638      	mov	r0, r7
 801001a:	f7ff ff6c 	bl	800fef6 <__ssputs_r>
 801001e:	3001      	adds	r0, #1
 8010020:	f000 80a7 	beq.w	8010172 <_svfiprintf_r+0x1c6>
 8010024:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010026:	445a      	add	r2, fp
 8010028:	9209      	str	r2, [sp, #36]	@ 0x24
 801002a:	f89a 3000 	ldrb.w	r3, [sl]
 801002e:	2b00      	cmp	r3, #0
 8010030:	f000 809f 	beq.w	8010172 <_svfiprintf_r+0x1c6>
 8010034:	2300      	movs	r3, #0
 8010036:	f04f 32ff 	mov.w	r2, #4294967295
 801003a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801003e:	f10a 0a01 	add.w	sl, sl, #1
 8010042:	9304      	str	r3, [sp, #16]
 8010044:	9307      	str	r3, [sp, #28]
 8010046:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801004a:	931a      	str	r3, [sp, #104]	@ 0x68
 801004c:	4654      	mov	r4, sl
 801004e:	2205      	movs	r2, #5
 8010050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010054:	484e      	ldr	r0, [pc, #312]	@ (8010190 <_svfiprintf_r+0x1e4>)
 8010056:	f7f0 f8e3 	bl	8000220 <memchr>
 801005a:	9a04      	ldr	r2, [sp, #16]
 801005c:	b9d8      	cbnz	r0, 8010096 <_svfiprintf_r+0xea>
 801005e:	06d0      	lsls	r0, r2, #27
 8010060:	bf44      	itt	mi
 8010062:	2320      	movmi	r3, #32
 8010064:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010068:	0711      	lsls	r1, r2, #28
 801006a:	bf44      	itt	mi
 801006c:	232b      	movmi	r3, #43	@ 0x2b
 801006e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010072:	f89a 3000 	ldrb.w	r3, [sl]
 8010076:	2b2a      	cmp	r3, #42	@ 0x2a
 8010078:	d015      	beq.n	80100a6 <_svfiprintf_r+0xfa>
 801007a:	9a07      	ldr	r2, [sp, #28]
 801007c:	4654      	mov	r4, sl
 801007e:	2000      	movs	r0, #0
 8010080:	f04f 0c0a 	mov.w	ip, #10
 8010084:	4621      	mov	r1, r4
 8010086:	f811 3b01 	ldrb.w	r3, [r1], #1
 801008a:	3b30      	subs	r3, #48	@ 0x30
 801008c:	2b09      	cmp	r3, #9
 801008e:	d94b      	bls.n	8010128 <_svfiprintf_r+0x17c>
 8010090:	b1b0      	cbz	r0, 80100c0 <_svfiprintf_r+0x114>
 8010092:	9207      	str	r2, [sp, #28]
 8010094:	e014      	b.n	80100c0 <_svfiprintf_r+0x114>
 8010096:	eba0 0308 	sub.w	r3, r0, r8
 801009a:	fa09 f303 	lsl.w	r3, r9, r3
 801009e:	4313      	orrs	r3, r2
 80100a0:	9304      	str	r3, [sp, #16]
 80100a2:	46a2      	mov	sl, r4
 80100a4:	e7d2      	b.n	801004c <_svfiprintf_r+0xa0>
 80100a6:	9b03      	ldr	r3, [sp, #12]
 80100a8:	1d19      	adds	r1, r3, #4
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	9103      	str	r1, [sp, #12]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	bfbb      	ittet	lt
 80100b2:	425b      	neglt	r3, r3
 80100b4:	f042 0202 	orrlt.w	r2, r2, #2
 80100b8:	9307      	strge	r3, [sp, #28]
 80100ba:	9307      	strlt	r3, [sp, #28]
 80100bc:	bfb8      	it	lt
 80100be:	9204      	strlt	r2, [sp, #16]
 80100c0:	7823      	ldrb	r3, [r4, #0]
 80100c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80100c4:	d10a      	bne.n	80100dc <_svfiprintf_r+0x130>
 80100c6:	7863      	ldrb	r3, [r4, #1]
 80100c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80100ca:	d132      	bne.n	8010132 <_svfiprintf_r+0x186>
 80100cc:	9b03      	ldr	r3, [sp, #12]
 80100ce:	1d1a      	adds	r2, r3, #4
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	9203      	str	r2, [sp, #12]
 80100d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80100d8:	3402      	adds	r4, #2
 80100da:	9305      	str	r3, [sp, #20]
 80100dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80101a0 <_svfiprintf_r+0x1f4>
 80100e0:	7821      	ldrb	r1, [r4, #0]
 80100e2:	2203      	movs	r2, #3
 80100e4:	4650      	mov	r0, sl
 80100e6:	f7f0 f89b 	bl	8000220 <memchr>
 80100ea:	b138      	cbz	r0, 80100fc <_svfiprintf_r+0x150>
 80100ec:	9b04      	ldr	r3, [sp, #16]
 80100ee:	eba0 000a 	sub.w	r0, r0, sl
 80100f2:	2240      	movs	r2, #64	@ 0x40
 80100f4:	4082      	lsls	r2, r0
 80100f6:	4313      	orrs	r3, r2
 80100f8:	3401      	adds	r4, #1
 80100fa:	9304      	str	r3, [sp, #16]
 80100fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010100:	4824      	ldr	r0, [pc, #144]	@ (8010194 <_svfiprintf_r+0x1e8>)
 8010102:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010106:	2206      	movs	r2, #6
 8010108:	f7f0 f88a 	bl	8000220 <memchr>
 801010c:	2800      	cmp	r0, #0
 801010e:	d036      	beq.n	801017e <_svfiprintf_r+0x1d2>
 8010110:	4b21      	ldr	r3, [pc, #132]	@ (8010198 <_svfiprintf_r+0x1ec>)
 8010112:	bb1b      	cbnz	r3, 801015c <_svfiprintf_r+0x1b0>
 8010114:	9b03      	ldr	r3, [sp, #12]
 8010116:	3307      	adds	r3, #7
 8010118:	f023 0307 	bic.w	r3, r3, #7
 801011c:	3308      	adds	r3, #8
 801011e:	9303      	str	r3, [sp, #12]
 8010120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010122:	4433      	add	r3, r6
 8010124:	9309      	str	r3, [sp, #36]	@ 0x24
 8010126:	e76a      	b.n	800fffe <_svfiprintf_r+0x52>
 8010128:	fb0c 3202 	mla	r2, ip, r2, r3
 801012c:	460c      	mov	r4, r1
 801012e:	2001      	movs	r0, #1
 8010130:	e7a8      	b.n	8010084 <_svfiprintf_r+0xd8>
 8010132:	2300      	movs	r3, #0
 8010134:	3401      	adds	r4, #1
 8010136:	9305      	str	r3, [sp, #20]
 8010138:	4619      	mov	r1, r3
 801013a:	f04f 0c0a 	mov.w	ip, #10
 801013e:	4620      	mov	r0, r4
 8010140:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010144:	3a30      	subs	r2, #48	@ 0x30
 8010146:	2a09      	cmp	r2, #9
 8010148:	d903      	bls.n	8010152 <_svfiprintf_r+0x1a6>
 801014a:	2b00      	cmp	r3, #0
 801014c:	d0c6      	beq.n	80100dc <_svfiprintf_r+0x130>
 801014e:	9105      	str	r1, [sp, #20]
 8010150:	e7c4      	b.n	80100dc <_svfiprintf_r+0x130>
 8010152:	fb0c 2101 	mla	r1, ip, r1, r2
 8010156:	4604      	mov	r4, r0
 8010158:	2301      	movs	r3, #1
 801015a:	e7f0      	b.n	801013e <_svfiprintf_r+0x192>
 801015c:	ab03      	add	r3, sp, #12
 801015e:	9300      	str	r3, [sp, #0]
 8010160:	462a      	mov	r2, r5
 8010162:	4b0e      	ldr	r3, [pc, #56]	@ (801019c <_svfiprintf_r+0x1f0>)
 8010164:	a904      	add	r1, sp, #16
 8010166:	4638      	mov	r0, r7
 8010168:	f7fc ff30 	bl	800cfcc <_printf_float>
 801016c:	1c42      	adds	r2, r0, #1
 801016e:	4606      	mov	r6, r0
 8010170:	d1d6      	bne.n	8010120 <_svfiprintf_r+0x174>
 8010172:	89ab      	ldrh	r3, [r5, #12]
 8010174:	065b      	lsls	r3, r3, #25
 8010176:	f53f af2d 	bmi.w	800ffd4 <_svfiprintf_r+0x28>
 801017a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801017c:	e72c      	b.n	800ffd8 <_svfiprintf_r+0x2c>
 801017e:	ab03      	add	r3, sp, #12
 8010180:	9300      	str	r3, [sp, #0]
 8010182:	462a      	mov	r2, r5
 8010184:	4b05      	ldr	r3, [pc, #20]	@ (801019c <_svfiprintf_r+0x1f0>)
 8010186:	a904      	add	r1, sp, #16
 8010188:	4638      	mov	r0, r7
 801018a:	f7fd f9b7 	bl	800d4fc <_printf_i>
 801018e:	e7ed      	b.n	801016c <_svfiprintf_r+0x1c0>
 8010190:	08011191 	.word	0x08011191
 8010194:	0801119b 	.word	0x0801119b
 8010198:	0800cfcd 	.word	0x0800cfcd
 801019c:	0800fef7 	.word	0x0800fef7
 80101a0:	08011197 	.word	0x08011197

080101a4 <__sflush_r>:
 80101a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80101a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101ac:	0716      	lsls	r6, r2, #28
 80101ae:	4605      	mov	r5, r0
 80101b0:	460c      	mov	r4, r1
 80101b2:	d454      	bmi.n	801025e <__sflush_r+0xba>
 80101b4:	684b      	ldr	r3, [r1, #4]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	dc02      	bgt.n	80101c0 <__sflush_r+0x1c>
 80101ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80101bc:	2b00      	cmp	r3, #0
 80101be:	dd48      	ble.n	8010252 <__sflush_r+0xae>
 80101c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80101c2:	2e00      	cmp	r6, #0
 80101c4:	d045      	beq.n	8010252 <__sflush_r+0xae>
 80101c6:	2300      	movs	r3, #0
 80101c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80101cc:	682f      	ldr	r7, [r5, #0]
 80101ce:	6a21      	ldr	r1, [r4, #32]
 80101d0:	602b      	str	r3, [r5, #0]
 80101d2:	d030      	beq.n	8010236 <__sflush_r+0x92>
 80101d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80101d6:	89a3      	ldrh	r3, [r4, #12]
 80101d8:	0759      	lsls	r1, r3, #29
 80101da:	d505      	bpl.n	80101e8 <__sflush_r+0x44>
 80101dc:	6863      	ldr	r3, [r4, #4]
 80101de:	1ad2      	subs	r2, r2, r3
 80101e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80101e2:	b10b      	cbz	r3, 80101e8 <__sflush_r+0x44>
 80101e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80101e6:	1ad2      	subs	r2, r2, r3
 80101e8:	2300      	movs	r3, #0
 80101ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80101ec:	6a21      	ldr	r1, [r4, #32]
 80101ee:	4628      	mov	r0, r5
 80101f0:	47b0      	blx	r6
 80101f2:	1c43      	adds	r3, r0, #1
 80101f4:	89a3      	ldrh	r3, [r4, #12]
 80101f6:	d106      	bne.n	8010206 <__sflush_r+0x62>
 80101f8:	6829      	ldr	r1, [r5, #0]
 80101fa:	291d      	cmp	r1, #29
 80101fc:	d82b      	bhi.n	8010256 <__sflush_r+0xb2>
 80101fe:	4a2a      	ldr	r2, [pc, #168]	@ (80102a8 <__sflush_r+0x104>)
 8010200:	410a      	asrs	r2, r1
 8010202:	07d6      	lsls	r6, r2, #31
 8010204:	d427      	bmi.n	8010256 <__sflush_r+0xb2>
 8010206:	2200      	movs	r2, #0
 8010208:	6062      	str	r2, [r4, #4]
 801020a:	04d9      	lsls	r1, r3, #19
 801020c:	6922      	ldr	r2, [r4, #16]
 801020e:	6022      	str	r2, [r4, #0]
 8010210:	d504      	bpl.n	801021c <__sflush_r+0x78>
 8010212:	1c42      	adds	r2, r0, #1
 8010214:	d101      	bne.n	801021a <__sflush_r+0x76>
 8010216:	682b      	ldr	r3, [r5, #0]
 8010218:	b903      	cbnz	r3, 801021c <__sflush_r+0x78>
 801021a:	6560      	str	r0, [r4, #84]	@ 0x54
 801021c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801021e:	602f      	str	r7, [r5, #0]
 8010220:	b1b9      	cbz	r1, 8010252 <__sflush_r+0xae>
 8010222:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010226:	4299      	cmp	r1, r3
 8010228:	d002      	beq.n	8010230 <__sflush_r+0x8c>
 801022a:	4628      	mov	r0, r5
 801022c:	f7fe fcdc 	bl	800ebe8 <_free_r>
 8010230:	2300      	movs	r3, #0
 8010232:	6363      	str	r3, [r4, #52]	@ 0x34
 8010234:	e00d      	b.n	8010252 <__sflush_r+0xae>
 8010236:	2301      	movs	r3, #1
 8010238:	4628      	mov	r0, r5
 801023a:	47b0      	blx	r6
 801023c:	4602      	mov	r2, r0
 801023e:	1c50      	adds	r0, r2, #1
 8010240:	d1c9      	bne.n	80101d6 <__sflush_r+0x32>
 8010242:	682b      	ldr	r3, [r5, #0]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d0c6      	beq.n	80101d6 <__sflush_r+0x32>
 8010248:	2b1d      	cmp	r3, #29
 801024a:	d001      	beq.n	8010250 <__sflush_r+0xac>
 801024c:	2b16      	cmp	r3, #22
 801024e:	d11e      	bne.n	801028e <__sflush_r+0xea>
 8010250:	602f      	str	r7, [r5, #0]
 8010252:	2000      	movs	r0, #0
 8010254:	e022      	b.n	801029c <__sflush_r+0xf8>
 8010256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801025a:	b21b      	sxth	r3, r3
 801025c:	e01b      	b.n	8010296 <__sflush_r+0xf2>
 801025e:	690f      	ldr	r7, [r1, #16]
 8010260:	2f00      	cmp	r7, #0
 8010262:	d0f6      	beq.n	8010252 <__sflush_r+0xae>
 8010264:	0793      	lsls	r3, r2, #30
 8010266:	680e      	ldr	r6, [r1, #0]
 8010268:	bf08      	it	eq
 801026a:	694b      	ldreq	r3, [r1, #20]
 801026c:	600f      	str	r7, [r1, #0]
 801026e:	bf18      	it	ne
 8010270:	2300      	movne	r3, #0
 8010272:	eba6 0807 	sub.w	r8, r6, r7
 8010276:	608b      	str	r3, [r1, #8]
 8010278:	f1b8 0f00 	cmp.w	r8, #0
 801027c:	dde9      	ble.n	8010252 <__sflush_r+0xae>
 801027e:	6a21      	ldr	r1, [r4, #32]
 8010280:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010282:	4643      	mov	r3, r8
 8010284:	463a      	mov	r2, r7
 8010286:	4628      	mov	r0, r5
 8010288:	47b0      	blx	r6
 801028a:	2800      	cmp	r0, #0
 801028c:	dc08      	bgt.n	80102a0 <__sflush_r+0xfc>
 801028e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010292:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010296:	81a3      	strh	r3, [r4, #12]
 8010298:	f04f 30ff 	mov.w	r0, #4294967295
 801029c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102a0:	4407      	add	r7, r0
 80102a2:	eba8 0800 	sub.w	r8, r8, r0
 80102a6:	e7e7      	b.n	8010278 <__sflush_r+0xd4>
 80102a8:	dfbffffe 	.word	0xdfbffffe

080102ac <_fflush_r>:
 80102ac:	b538      	push	{r3, r4, r5, lr}
 80102ae:	690b      	ldr	r3, [r1, #16]
 80102b0:	4605      	mov	r5, r0
 80102b2:	460c      	mov	r4, r1
 80102b4:	b913      	cbnz	r3, 80102bc <_fflush_r+0x10>
 80102b6:	2500      	movs	r5, #0
 80102b8:	4628      	mov	r0, r5
 80102ba:	bd38      	pop	{r3, r4, r5, pc}
 80102bc:	b118      	cbz	r0, 80102c6 <_fflush_r+0x1a>
 80102be:	6a03      	ldr	r3, [r0, #32]
 80102c0:	b90b      	cbnz	r3, 80102c6 <_fflush_r+0x1a>
 80102c2:	f7fd fcdb 	bl	800dc7c <__sinit>
 80102c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d0f3      	beq.n	80102b6 <_fflush_r+0xa>
 80102ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80102d0:	07d0      	lsls	r0, r2, #31
 80102d2:	d404      	bmi.n	80102de <_fflush_r+0x32>
 80102d4:	0599      	lsls	r1, r3, #22
 80102d6:	d402      	bmi.n	80102de <_fflush_r+0x32>
 80102d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80102da:	f7fd fe18 	bl	800df0e <__retarget_lock_acquire_recursive>
 80102de:	4628      	mov	r0, r5
 80102e0:	4621      	mov	r1, r4
 80102e2:	f7ff ff5f 	bl	80101a4 <__sflush_r>
 80102e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80102e8:	07da      	lsls	r2, r3, #31
 80102ea:	4605      	mov	r5, r0
 80102ec:	d4e4      	bmi.n	80102b8 <_fflush_r+0xc>
 80102ee:	89a3      	ldrh	r3, [r4, #12]
 80102f0:	059b      	lsls	r3, r3, #22
 80102f2:	d4e1      	bmi.n	80102b8 <_fflush_r+0xc>
 80102f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80102f6:	f7fd fe0b 	bl	800df10 <__retarget_lock_release_recursive>
 80102fa:	e7dd      	b.n	80102b8 <_fflush_r+0xc>

080102fc <memmove>:
 80102fc:	4288      	cmp	r0, r1
 80102fe:	b510      	push	{r4, lr}
 8010300:	eb01 0402 	add.w	r4, r1, r2
 8010304:	d902      	bls.n	801030c <memmove+0x10>
 8010306:	4284      	cmp	r4, r0
 8010308:	4623      	mov	r3, r4
 801030a:	d807      	bhi.n	801031c <memmove+0x20>
 801030c:	1e43      	subs	r3, r0, #1
 801030e:	42a1      	cmp	r1, r4
 8010310:	d008      	beq.n	8010324 <memmove+0x28>
 8010312:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010316:	f803 2f01 	strb.w	r2, [r3, #1]!
 801031a:	e7f8      	b.n	801030e <memmove+0x12>
 801031c:	4402      	add	r2, r0
 801031e:	4601      	mov	r1, r0
 8010320:	428a      	cmp	r2, r1
 8010322:	d100      	bne.n	8010326 <memmove+0x2a>
 8010324:	bd10      	pop	{r4, pc}
 8010326:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801032a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801032e:	e7f7      	b.n	8010320 <memmove+0x24>

08010330 <_sbrk_r>:
 8010330:	b538      	push	{r3, r4, r5, lr}
 8010332:	4d06      	ldr	r5, [pc, #24]	@ (801034c <_sbrk_r+0x1c>)
 8010334:	2300      	movs	r3, #0
 8010336:	4604      	mov	r4, r0
 8010338:	4608      	mov	r0, r1
 801033a:	602b      	str	r3, [r5, #0]
 801033c:	f7f1 fc52 	bl	8001be4 <_sbrk>
 8010340:	1c43      	adds	r3, r0, #1
 8010342:	d102      	bne.n	801034a <_sbrk_r+0x1a>
 8010344:	682b      	ldr	r3, [r5, #0]
 8010346:	b103      	cbz	r3, 801034a <_sbrk_r+0x1a>
 8010348:	6023      	str	r3, [r4, #0]
 801034a:	bd38      	pop	{r3, r4, r5, pc}
 801034c:	200009a4 	.word	0x200009a4

08010350 <__assert_func>:
 8010350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010352:	4614      	mov	r4, r2
 8010354:	461a      	mov	r2, r3
 8010356:	4b09      	ldr	r3, [pc, #36]	@ (801037c <__assert_func+0x2c>)
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	4605      	mov	r5, r0
 801035c:	68d8      	ldr	r0, [r3, #12]
 801035e:	b954      	cbnz	r4, 8010376 <__assert_func+0x26>
 8010360:	4b07      	ldr	r3, [pc, #28]	@ (8010380 <__assert_func+0x30>)
 8010362:	461c      	mov	r4, r3
 8010364:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010368:	9100      	str	r1, [sp, #0]
 801036a:	462b      	mov	r3, r5
 801036c:	4905      	ldr	r1, [pc, #20]	@ (8010384 <__assert_func+0x34>)
 801036e:	f000 f84f 	bl	8010410 <fiprintf>
 8010372:	f000 f85f 	bl	8010434 <abort>
 8010376:	4b04      	ldr	r3, [pc, #16]	@ (8010388 <__assert_func+0x38>)
 8010378:	e7f4      	b.n	8010364 <__assert_func+0x14>
 801037a:	bf00      	nop
 801037c:	20000208 	.word	0x20000208
 8010380:	080111dd 	.word	0x080111dd
 8010384:	080111af 	.word	0x080111af
 8010388:	080111a2 	.word	0x080111a2

0801038c <_calloc_r>:
 801038c:	b570      	push	{r4, r5, r6, lr}
 801038e:	fba1 5402 	umull	r5, r4, r1, r2
 8010392:	b93c      	cbnz	r4, 80103a4 <_calloc_r+0x18>
 8010394:	4629      	mov	r1, r5
 8010396:	f7fe ffd5 	bl	800f344 <_malloc_r>
 801039a:	4606      	mov	r6, r0
 801039c:	b928      	cbnz	r0, 80103aa <_calloc_r+0x1e>
 801039e:	2600      	movs	r6, #0
 80103a0:	4630      	mov	r0, r6
 80103a2:	bd70      	pop	{r4, r5, r6, pc}
 80103a4:	220c      	movs	r2, #12
 80103a6:	6002      	str	r2, [r0, #0]
 80103a8:	e7f9      	b.n	801039e <_calloc_r+0x12>
 80103aa:	462a      	mov	r2, r5
 80103ac:	4621      	mov	r1, r4
 80103ae:	f7fd fd1f 	bl	800ddf0 <memset>
 80103b2:	e7f5      	b.n	80103a0 <_calloc_r+0x14>

080103b4 <_realloc_r>:
 80103b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103b8:	4680      	mov	r8, r0
 80103ba:	4615      	mov	r5, r2
 80103bc:	460c      	mov	r4, r1
 80103be:	b921      	cbnz	r1, 80103ca <_realloc_r+0x16>
 80103c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103c4:	4611      	mov	r1, r2
 80103c6:	f7fe bfbd 	b.w	800f344 <_malloc_r>
 80103ca:	b92a      	cbnz	r2, 80103d8 <_realloc_r+0x24>
 80103cc:	f7fe fc0c 	bl	800ebe8 <_free_r>
 80103d0:	2400      	movs	r4, #0
 80103d2:	4620      	mov	r0, r4
 80103d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103d8:	f000 f833 	bl	8010442 <_malloc_usable_size_r>
 80103dc:	4285      	cmp	r5, r0
 80103de:	4606      	mov	r6, r0
 80103e0:	d802      	bhi.n	80103e8 <_realloc_r+0x34>
 80103e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80103e6:	d8f4      	bhi.n	80103d2 <_realloc_r+0x1e>
 80103e8:	4629      	mov	r1, r5
 80103ea:	4640      	mov	r0, r8
 80103ec:	f7fe ffaa 	bl	800f344 <_malloc_r>
 80103f0:	4607      	mov	r7, r0
 80103f2:	2800      	cmp	r0, #0
 80103f4:	d0ec      	beq.n	80103d0 <_realloc_r+0x1c>
 80103f6:	42b5      	cmp	r5, r6
 80103f8:	462a      	mov	r2, r5
 80103fa:	4621      	mov	r1, r4
 80103fc:	bf28      	it	cs
 80103fe:	4632      	movcs	r2, r6
 8010400:	f7fd fd87 	bl	800df12 <memcpy>
 8010404:	4621      	mov	r1, r4
 8010406:	4640      	mov	r0, r8
 8010408:	f7fe fbee 	bl	800ebe8 <_free_r>
 801040c:	463c      	mov	r4, r7
 801040e:	e7e0      	b.n	80103d2 <_realloc_r+0x1e>

08010410 <fiprintf>:
 8010410:	b40e      	push	{r1, r2, r3}
 8010412:	b503      	push	{r0, r1, lr}
 8010414:	4601      	mov	r1, r0
 8010416:	ab03      	add	r3, sp, #12
 8010418:	4805      	ldr	r0, [pc, #20]	@ (8010430 <fiprintf+0x20>)
 801041a:	f853 2b04 	ldr.w	r2, [r3], #4
 801041e:	6800      	ldr	r0, [r0, #0]
 8010420:	9301      	str	r3, [sp, #4]
 8010422:	f000 f83f 	bl	80104a4 <_vfiprintf_r>
 8010426:	b002      	add	sp, #8
 8010428:	f85d eb04 	ldr.w	lr, [sp], #4
 801042c:	b003      	add	sp, #12
 801042e:	4770      	bx	lr
 8010430:	20000208 	.word	0x20000208

08010434 <abort>:
 8010434:	b508      	push	{r3, lr}
 8010436:	2006      	movs	r0, #6
 8010438:	f000 fa08 	bl	801084c <raise>
 801043c:	2001      	movs	r0, #1
 801043e:	f7f1 fb59 	bl	8001af4 <_exit>

08010442 <_malloc_usable_size_r>:
 8010442:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010446:	1f18      	subs	r0, r3, #4
 8010448:	2b00      	cmp	r3, #0
 801044a:	bfbc      	itt	lt
 801044c:	580b      	ldrlt	r3, [r1, r0]
 801044e:	18c0      	addlt	r0, r0, r3
 8010450:	4770      	bx	lr

08010452 <__sfputc_r>:
 8010452:	6893      	ldr	r3, [r2, #8]
 8010454:	3b01      	subs	r3, #1
 8010456:	2b00      	cmp	r3, #0
 8010458:	b410      	push	{r4}
 801045a:	6093      	str	r3, [r2, #8]
 801045c:	da08      	bge.n	8010470 <__sfputc_r+0x1e>
 801045e:	6994      	ldr	r4, [r2, #24]
 8010460:	42a3      	cmp	r3, r4
 8010462:	db01      	blt.n	8010468 <__sfputc_r+0x16>
 8010464:	290a      	cmp	r1, #10
 8010466:	d103      	bne.n	8010470 <__sfputc_r+0x1e>
 8010468:	f85d 4b04 	ldr.w	r4, [sp], #4
 801046c:	f000 b932 	b.w	80106d4 <__swbuf_r>
 8010470:	6813      	ldr	r3, [r2, #0]
 8010472:	1c58      	adds	r0, r3, #1
 8010474:	6010      	str	r0, [r2, #0]
 8010476:	7019      	strb	r1, [r3, #0]
 8010478:	4608      	mov	r0, r1
 801047a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801047e:	4770      	bx	lr

08010480 <__sfputs_r>:
 8010480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010482:	4606      	mov	r6, r0
 8010484:	460f      	mov	r7, r1
 8010486:	4614      	mov	r4, r2
 8010488:	18d5      	adds	r5, r2, r3
 801048a:	42ac      	cmp	r4, r5
 801048c:	d101      	bne.n	8010492 <__sfputs_r+0x12>
 801048e:	2000      	movs	r0, #0
 8010490:	e007      	b.n	80104a2 <__sfputs_r+0x22>
 8010492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010496:	463a      	mov	r2, r7
 8010498:	4630      	mov	r0, r6
 801049a:	f7ff ffda 	bl	8010452 <__sfputc_r>
 801049e:	1c43      	adds	r3, r0, #1
 80104a0:	d1f3      	bne.n	801048a <__sfputs_r+0xa>
 80104a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080104a4 <_vfiprintf_r>:
 80104a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104a8:	460d      	mov	r5, r1
 80104aa:	b09d      	sub	sp, #116	@ 0x74
 80104ac:	4614      	mov	r4, r2
 80104ae:	4698      	mov	r8, r3
 80104b0:	4606      	mov	r6, r0
 80104b2:	b118      	cbz	r0, 80104bc <_vfiprintf_r+0x18>
 80104b4:	6a03      	ldr	r3, [r0, #32]
 80104b6:	b90b      	cbnz	r3, 80104bc <_vfiprintf_r+0x18>
 80104b8:	f7fd fbe0 	bl	800dc7c <__sinit>
 80104bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80104be:	07d9      	lsls	r1, r3, #31
 80104c0:	d405      	bmi.n	80104ce <_vfiprintf_r+0x2a>
 80104c2:	89ab      	ldrh	r3, [r5, #12]
 80104c4:	059a      	lsls	r2, r3, #22
 80104c6:	d402      	bmi.n	80104ce <_vfiprintf_r+0x2a>
 80104c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80104ca:	f7fd fd20 	bl	800df0e <__retarget_lock_acquire_recursive>
 80104ce:	89ab      	ldrh	r3, [r5, #12]
 80104d0:	071b      	lsls	r3, r3, #28
 80104d2:	d501      	bpl.n	80104d8 <_vfiprintf_r+0x34>
 80104d4:	692b      	ldr	r3, [r5, #16]
 80104d6:	b99b      	cbnz	r3, 8010500 <_vfiprintf_r+0x5c>
 80104d8:	4629      	mov	r1, r5
 80104da:	4630      	mov	r0, r6
 80104dc:	f000 f938 	bl	8010750 <__swsetup_r>
 80104e0:	b170      	cbz	r0, 8010500 <_vfiprintf_r+0x5c>
 80104e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80104e4:	07dc      	lsls	r4, r3, #31
 80104e6:	d504      	bpl.n	80104f2 <_vfiprintf_r+0x4e>
 80104e8:	f04f 30ff 	mov.w	r0, #4294967295
 80104ec:	b01d      	add	sp, #116	@ 0x74
 80104ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104f2:	89ab      	ldrh	r3, [r5, #12]
 80104f4:	0598      	lsls	r0, r3, #22
 80104f6:	d4f7      	bmi.n	80104e8 <_vfiprintf_r+0x44>
 80104f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80104fa:	f7fd fd09 	bl	800df10 <__retarget_lock_release_recursive>
 80104fe:	e7f3      	b.n	80104e8 <_vfiprintf_r+0x44>
 8010500:	2300      	movs	r3, #0
 8010502:	9309      	str	r3, [sp, #36]	@ 0x24
 8010504:	2320      	movs	r3, #32
 8010506:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801050a:	f8cd 800c 	str.w	r8, [sp, #12]
 801050e:	2330      	movs	r3, #48	@ 0x30
 8010510:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80106c0 <_vfiprintf_r+0x21c>
 8010514:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010518:	f04f 0901 	mov.w	r9, #1
 801051c:	4623      	mov	r3, r4
 801051e:	469a      	mov	sl, r3
 8010520:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010524:	b10a      	cbz	r2, 801052a <_vfiprintf_r+0x86>
 8010526:	2a25      	cmp	r2, #37	@ 0x25
 8010528:	d1f9      	bne.n	801051e <_vfiprintf_r+0x7a>
 801052a:	ebba 0b04 	subs.w	fp, sl, r4
 801052e:	d00b      	beq.n	8010548 <_vfiprintf_r+0xa4>
 8010530:	465b      	mov	r3, fp
 8010532:	4622      	mov	r2, r4
 8010534:	4629      	mov	r1, r5
 8010536:	4630      	mov	r0, r6
 8010538:	f7ff ffa2 	bl	8010480 <__sfputs_r>
 801053c:	3001      	adds	r0, #1
 801053e:	f000 80a7 	beq.w	8010690 <_vfiprintf_r+0x1ec>
 8010542:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010544:	445a      	add	r2, fp
 8010546:	9209      	str	r2, [sp, #36]	@ 0x24
 8010548:	f89a 3000 	ldrb.w	r3, [sl]
 801054c:	2b00      	cmp	r3, #0
 801054e:	f000 809f 	beq.w	8010690 <_vfiprintf_r+0x1ec>
 8010552:	2300      	movs	r3, #0
 8010554:	f04f 32ff 	mov.w	r2, #4294967295
 8010558:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801055c:	f10a 0a01 	add.w	sl, sl, #1
 8010560:	9304      	str	r3, [sp, #16]
 8010562:	9307      	str	r3, [sp, #28]
 8010564:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010568:	931a      	str	r3, [sp, #104]	@ 0x68
 801056a:	4654      	mov	r4, sl
 801056c:	2205      	movs	r2, #5
 801056e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010572:	4853      	ldr	r0, [pc, #332]	@ (80106c0 <_vfiprintf_r+0x21c>)
 8010574:	f7ef fe54 	bl	8000220 <memchr>
 8010578:	9a04      	ldr	r2, [sp, #16]
 801057a:	b9d8      	cbnz	r0, 80105b4 <_vfiprintf_r+0x110>
 801057c:	06d1      	lsls	r1, r2, #27
 801057e:	bf44      	itt	mi
 8010580:	2320      	movmi	r3, #32
 8010582:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010586:	0713      	lsls	r3, r2, #28
 8010588:	bf44      	itt	mi
 801058a:	232b      	movmi	r3, #43	@ 0x2b
 801058c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010590:	f89a 3000 	ldrb.w	r3, [sl]
 8010594:	2b2a      	cmp	r3, #42	@ 0x2a
 8010596:	d015      	beq.n	80105c4 <_vfiprintf_r+0x120>
 8010598:	9a07      	ldr	r2, [sp, #28]
 801059a:	4654      	mov	r4, sl
 801059c:	2000      	movs	r0, #0
 801059e:	f04f 0c0a 	mov.w	ip, #10
 80105a2:	4621      	mov	r1, r4
 80105a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105a8:	3b30      	subs	r3, #48	@ 0x30
 80105aa:	2b09      	cmp	r3, #9
 80105ac:	d94b      	bls.n	8010646 <_vfiprintf_r+0x1a2>
 80105ae:	b1b0      	cbz	r0, 80105de <_vfiprintf_r+0x13a>
 80105b0:	9207      	str	r2, [sp, #28]
 80105b2:	e014      	b.n	80105de <_vfiprintf_r+0x13a>
 80105b4:	eba0 0308 	sub.w	r3, r0, r8
 80105b8:	fa09 f303 	lsl.w	r3, r9, r3
 80105bc:	4313      	orrs	r3, r2
 80105be:	9304      	str	r3, [sp, #16]
 80105c0:	46a2      	mov	sl, r4
 80105c2:	e7d2      	b.n	801056a <_vfiprintf_r+0xc6>
 80105c4:	9b03      	ldr	r3, [sp, #12]
 80105c6:	1d19      	adds	r1, r3, #4
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	9103      	str	r1, [sp, #12]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	bfbb      	ittet	lt
 80105d0:	425b      	neglt	r3, r3
 80105d2:	f042 0202 	orrlt.w	r2, r2, #2
 80105d6:	9307      	strge	r3, [sp, #28]
 80105d8:	9307      	strlt	r3, [sp, #28]
 80105da:	bfb8      	it	lt
 80105dc:	9204      	strlt	r2, [sp, #16]
 80105de:	7823      	ldrb	r3, [r4, #0]
 80105e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80105e2:	d10a      	bne.n	80105fa <_vfiprintf_r+0x156>
 80105e4:	7863      	ldrb	r3, [r4, #1]
 80105e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80105e8:	d132      	bne.n	8010650 <_vfiprintf_r+0x1ac>
 80105ea:	9b03      	ldr	r3, [sp, #12]
 80105ec:	1d1a      	adds	r2, r3, #4
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	9203      	str	r2, [sp, #12]
 80105f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80105f6:	3402      	adds	r4, #2
 80105f8:	9305      	str	r3, [sp, #20]
 80105fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80106d0 <_vfiprintf_r+0x22c>
 80105fe:	7821      	ldrb	r1, [r4, #0]
 8010600:	2203      	movs	r2, #3
 8010602:	4650      	mov	r0, sl
 8010604:	f7ef fe0c 	bl	8000220 <memchr>
 8010608:	b138      	cbz	r0, 801061a <_vfiprintf_r+0x176>
 801060a:	9b04      	ldr	r3, [sp, #16]
 801060c:	eba0 000a 	sub.w	r0, r0, sl
 8010610:	2240      	movs	r2, #64	@ 0x40
 8010612:	4082      	lsls	r2, r0
 8010614:	4313      	orrs	r3, r2
 8010616:	3401      	adds	r4, #1
 8010618:	9304      	str	r3, [sp, #16]
 801061a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801061e:	4829      	ldr	r0, [pc, #164]	@ (80106c4 <_vfiprintf_r+0x220>)
 8010620:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010624:	2206      	movs	r2, #6
 8010626:	f7ef fdfb 	bl	8000220 <memchr>
 801062a:	2800      	cmp	r0, #0
 801062c:	d03f      	beq.n	80106ae <_vfiprintf_r+0x20a>
 801062e:	4b26      	ldr	r3, [pc, #152]	@ (80106c8 <_vfiprintf_r+0x224>)
 8010630:	bb1b      	cbnz	r3, 801067a <_vfiprintf_r+0x1d6>
 8010632:	9b03      	ldr	r3, [sp, #12]
 8010634:	3307      	adds	r3, #7
 8010636:	f023 0307 	bic.w	r3, r3, #7
 801063a:	3308      	adds	r3, #8
 801063c:	9303      	str	r3, [sp, #12]
 801063e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010640:	443b      	add	r3, r7
 8010642:	9309      	str	r3, [sp, #36]	@ 0x24
 8010644:	e76a      	b.n	801051c <_vfiprintf_r+0x78>
 8010646:	fb0c 3202 	mla	r2, ip, r2, r3
 801064a:	460c      	mov	r4, r1
 801064c:	2001      	movs	r0, #1
 801064e:	e7a8      	b.n	80105a2 <_vfiprintf_r+0xfe>
 8010650:	2300      	movs	r3, #0
 8010652:	3401      	adds	r4, #1
 8010654:	9305      	str	r3, [sp, #20]
 8010656:	4619      	mov	r1, r3
 8010658:	f04f 0c0a 	mov.w	ip, #10
 801065c:	4620      	mov	r0, r4
 801065e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010662:	3a30      	subs	r2, #48	@ 0x30
 8010664:	2a09      	cmp	r2, #9
 8010666:	d903      	bls.n	8010670 <_vfiprintf_r+0x1cc>
 8010668:	2b00      	cmp	r3, #0
 801066a:	d0c6      	beq.n	80105fa <_vfiprintf_r+0x156>
 801066c:	9105      	str	r1, [sp, #20]
 801066e:	e7c4      	b.n	80105fa <_vfiprintf_r+0x156>
 8010670:	fb0c 2101 	mla	r1, ip, r1, r2
 8010674:	4604      	mov	r4, r0
 8010676:	2301      	movs	r3, #1
 8010678:	e7f0      	b.n	801065c <_vfiprintf_r+0x1b8>
 801067a:	ab03      	add	r3, sp, #12
 801067c:	9300      	str	r3, [sp, #0]
 801067e:	462a      	mov	r2, r5
 8010680:	4b12      	ldr	r3, [pc, #72]	@ (80106cc <_vfiprintf_r+0x228>)
 8010682:	a904      	add	r1, sp, #16
 8010684:	4630      	mov	r0, r6
 8010686:	f7fc fca1 	bl	800cfcc <_printf_float>
 801068a:	4607      	mov	r7, r0
 801068c:	1c78      	adds	r0, r7, #1
 801068e:	d1d6      	bne.n	801063e <_vfiprintf_r+0x19a>
 8010690:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010692:	07d9      	lsls	r1, r3, #31
 8010694:	d405      	bmi.n	80106a2 <_vfiprintf_r+0x1fe>
 8010696:	89ab      	ldrh	r3, [r5, #12]
 8010698:	059a      	lsls	r2, r3, #22
 801069a:	d402      	bmi.n	80106a2 <_vfiprintf_r+0x1fe>
 801069c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801069e:	f7fd fc37 	bl	800df10 <__retarget_lock_release_recursive>
 80106a2:	89ab      	ldrh	r3, [r5, #12]
 80106a4:	065b      	lsls	r3, r3, #25
 80106a6:	f53f af1f 	bmi.w	80104e8 <_vfiprintf_r+0x44>
 80106aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80106ac:	e71e      	b.n	80104ec <_vfiprintf_r+0x48>
 80106ae:	ab03      	add	r3, sp, #12
 80106b0:	9300      	str	r3, [sp, #0]
 80106b2:	462a      	mov	r2, r5
 80106b4:	4b05      	ldr	r3, [pc, #20]	@ (80106cc <_vfiprintf_r+0x228>)
 80106b6:	a904      	add	r1, sp, #16
 80106b8:	4630      	mov	r0, r6
 80106ba:	f7fc ff1f 	bl	800d4fc <_printf_i>
 80106be:	e7e4      	b.n	801068a <_vfiprintf_r+0x1e6>
 80106c0:	08011191 	.word	0x08011191
 80106c4:	0801119b 	.word	0x0801119b
 80106c8:	0800cfcd 	.word	0x0800cfcd
 80106cc:	08010481 	.word	0x08010481
 80106d0:	08011197 	.word	0x08011197

080106d4 <__swbuf_r>:
 80106d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106d6:	460e      	mov	r6, r1
 80106d8:	4614      	mov	r4, r2
 80106da:	4605      	mov	r5, r0
 80106dc:	b118      	cbz	r0, 80106e6 <__swbuf_r+0x12>
 80106de:	6a03      	ldr	r3, [r0, #32]
 80106e0:	b90b      	cbnz	r3, 80106e6 <__swbuf_r+0x12>
 80106e2:	f7fd facb 	bl	800dc7c <__sinit>
 80106e6:	69a3      	ldr	r3, [r4, #24]
 80106e8:	60a3      	str	r3, [r4, #8]
 80106ea:	89a3      	ldrh	r3, [r4, #12]
 80106ec:	071a      	lsls	r2, r3, #28
 80106ee:	d501      	bpl.n	80106f4 <__swbuf_r+0x20>
 80106f0:	6923      	ldr	r3, [r4, #16]
 80106f2:	b943      	cbnz	r3, 8010706 <__swbuf_r+0x32>
 80106f4:	4621      	mov	r1, r4
 80106f6:	4628      	mov	r0, r5
 80106f8:	f000 f82a 	bl	8010750 <__swsetup_r>
 80106fc:	b118      	cbz	r0, 8010706 <__swbuf_r+0x32>
 80106fe:	f04f 37ff 	mov.w	r7, #4294967295
 8010702:	4638      	mov	r0, r7
 8010704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010706:	6823      	ldr	r3, [r4, #0]
 8010708:	6922      	ldr	r2, [r4, #16]
 801070a:	1a98      	subs	r0, r3, r2
 801070c:	6963      	ldr	r3, [r4, #20]
 801070e:	b2f6      	uxtb	r6, r6
 8010710:	4283      	cmp	r3, r0
 8010712:	4637      	mov	r7, r6
 8010714:	dc05      	bgt.n	8010722 <__swbuf_r+0x4e>
 8010716:	4621      	mov	r1, r4
 8010718:	4628      	mov	r0, r5
 801071a:	f7ff fdc7 	bl	80102ac <_fflush_r>
 801071e:	2800      	cmp	r0, #0
 8010720:	d1ed      	bne.n	80106fe <__swbuf_r+0x2a>
 8010722:	68a3      	ldr	r3, [r4, #8]
 8010724:	3b01      	subs	r3, #1
 8010726:	60a3      	str	r3, [r4, #8]
 8010728:	6823      	ldr	r3, [r4, #0]
 801072a:	1c5a      	adds	r2, r3, #1
 801072c:	6022      	str	r2, [r4, #0]
 801072e:	701e      	strb	r6, [r3, #0]
 8010730:	6962      	ldr	r2, [r4, #20]
 8010732:	1c43      	adds	r3, r0, #1
 8010734:	429a      	cmp	r2, r3
 8010736:	d004      	beq.n	8010742 <__swbuf_r+0x6e>
 8010738:	89a3      	ldrh	r3, [r4, #12]
 801073a:	07db      	lsls	r3, r3, #31
 801073c:	d5e1      	bpl.n	8010702 <__swbuf_r+0x2e>
 801073e:	2e0a      	cmp	r6, #10
 8010740:	d1df      	bne.n	8010702 <__swbuf_r+0x2e>
 8010742:	4621      	mov	r1, r4
 8010744:	4628      	mov	r0, r5
 8010746:	f7ff fdb1 	bl	80102ac <_fflush_r>
 801074a:	2800      	cmp	r0, #0
 801074c:	d0d9      	beq.n	8010702 <__swbuf_r+0x2e>
 801074e:	e7d6      	b.n	80106fe <__swbuf_r+0x2a>

08010750 <__swsetup_r>:
 8010750:	b538      	push	{r3, r4, r5, lr}
 8010752:	4b29      	ldr	r3, [pc, #164]	@ (80107f8 <__swsetup_r+0xa8>)
 8010754:	4605      	mov	r5, r0
 8010756:	6818      	ldr	r0, [r3, #0]
 8010758:	460c      	mov	r4, r1
 801075a:	b118      	cbz	r0, 8010764 <__swsetup_r+0x14>
 801075c:	6a03      	ldr	r3, [r0, #32]
 801075e:	b90b      	cbnz	r3, 8010764 <__swsetup_r+0x14>
 8010760:	f7fd fa8c 	bl	800dc7c <__sinit>
 8010764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010768:	0719      	lsls	r1, r3, #28
 801076a:	d422      	bmi.n	80107b2 <__swsetup_r+0x62>
 801076c:	06da      	lsls	r2, r3, #27
 801076e:	d407      	bmi.n	8010780 <__swsetup_r+0x30>
 8010770:	2209      	movs	r2, #9
 8010772:	602a      	str	r2, [r5, #0]
 8010774:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010778:	81a3      	strh	r3, [r4, #12]
 801077a:	f04f 30ff 	mov.w	r0, #4294967295
 801077e:	e033      	b.n	80107e8 <__swsetup_r+0x98>
 8010780:	0758      	lsls	r0, r3, #29
 8010782:	d512      	bpl.n	80107aa <__swsetup_r+0x5a>
 8010784:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010786:	b141      	cbz	r1, 801079a <__swsetup_r+0x4a>
 8010788:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801078c:	4299      	cmp	r1, r3
 801078e:	d002      	beq.n	8010796 <__swsetup_r+0x46>
 8010790:	4628      	mov	r0, r5
 8010792:	f7fe fa29 	bl	800ebe8 <_free_r>
 8010796:	2300      	movs	r3, #0
 8010798:	6363      	str	r3, [r4, #52]	@ 0x34
 801079a:	89a3      	ldrh	r3, [r4, #12]
 801079c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80107a0:	81a3      	strh	r3, [r4, #12]
 80107a2:	2300      	movs	r3, #0
 80107a4:	6063      	str	r3, [r4, #4]
 80107a6:	6923      	ldr	r3, [r4, #16]
 80107a8:	6023      	str	r3, [r4, #0]
 80107aa:	89a3      	ldrh	r3, [r4, #12]
 80107ac:	f043 0308 	orr.w	r3, r3, #8
 80107b0:	81a3      	strh	r3, [r4, #12]
 80107b2:	6923      	ldr	r3, [r4, #16]
 80107b4:	b94b      	cbnz	r3, 80107ca <__swsetup_r+0x7a>
 80107b6:	89a3      	ldrh	r3, [r4, #12]
 80107b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80107bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80107c0:	d003      	beq.n	80107ca <__swsetup_r+0x7a>
 80107c2:	4621      	mov	r1, r4
 80107c4:	4628      	mov	r0, r5
 80107c6:	f000 f883 	bl	80108d0 <__smakebuf_r>
 80107ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107ce:	f013 0201 	ands.w	r2, r3, #1
 80107d2:	d00a      	beq.n	80107ea <__swsetup_r+0x9a>
 80107d4:	2200      	movs	r2, #0
 80107d6:	60a2      	str	r2, [r4, #8]
 80107d8:	6962      	ldr	r2, [r4, #20]
 80107da:	4252      	negs	r2, r2
 80107dc:	61a2      	str	r2, [r4, #24]
 80107de:	6922      	ldr	r2, [r4, #16]
 80107e0:	b942      	cbnz	r2, 80107f4 <__swsetup_r+0xa4>
 80107e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80107e6:	d1c5      	bne.n	8010774 <__swsetup_r+0x24>
 80107e8:	bd38      	pop	{r3, r4, r5, pc}
 80107ea:	0799      	lsls	r1, r3, #30
 80107ec:	bf58      	it	pl
 80107ee:	6962      	ldrpl	r2, [r4, #20]
 80107f0:	60a2      	str	r2, [r4, #8]
 80107f2:	e7f4      	b.n	80107de <__swsetup_r+0x8e>
 80107f4:	2000      	movs	r0, #0
 80107f6:	e7f7      	b.n	80107e8 <__swsetup_r+0x98>
 80107f8:	20000208 	.word	0x20000208

080107fc <_raise_r>:
 80107fc:	291f      	cmp	r1, #31
 80107fe:	b538      	push	{r3, r4, r5, lr}
 8010800:	4605      	mov	r5, r0
 8010802:	460c      	mov	r4, r1
 8010804:	d904      	bls.n	8010810 <_raise_r+0x14>
 8010806:	2316      	movs	r3, #22
 8010808:	6003      	str	r3, [r0, #0]
 801080a:	f04f 30ff 	mov.w	r0, #4294967295
 801080e:	bd38      	pop	{r3, r4, r5, pc}
 8010810:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010812:	b112      	cbz	r2, 801081a <_raise_r+0x1e>
 8010814:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010818:	b94b      	cbnz	r3, 801082e <_raise_r+0x32>
 801081a:	4628      	mov	r0, r5
 801081c:	f000 f830 	bl	8010880 <_getpid_r>
 8010820:	4622      	mov	r2, r4
 8010822:	4601      	mov	r1, r0
 8010824:	4628      	mov	r0, r5
 8010826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801082a:	f000 b817 	b.w	801085c <_kill_r>
 801082e:	2b01      	cmp	r3, #1
 8010830:	d00a      	beq.n	8010848 <_raise_r+0x4c>
 8010832:	1c59      	adds	r1, r3, #1
 8010834:	d103      	bne.n	801083e <_raise_r+0x42>
 8010836:	2316      	movs	r3, #22
 8010838:	6003      	str	r3, [r0, #0]
 801083a:	2001      	movs	r0, #1
 801083c:	e7e7      	b.n	801080e <_raise_r+0x12>
 801083e:	2100      	movs	r1, #0
 8010840:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010844:	4620      	mov	r0, r4
 8010846:	4798      	blx	r3
 8010848:	2000      	movs	r0, #0
 801084a:	e7e0      	b.n	801080e <_raise_r+0x12>

0801084c <raise>:
 801084c:	4b02      	ldr	r3, [pc, #8]	@ (8010858 <raise+0xc>)
 801084e:	4601      	mov	r1, r0
 8010850:	6818      	ldr	r0, [r3, #0]
 8010852:	f7ff bfd3 	b.w	80107fc <_raise_r>
 8010856:	bf00      	nop
 8010858:	20000208 	.word	0x20000208

0801085c <_kill_r>:
 801085c:	b538      	push	{r3, r4, r5, lr}
 801085e:	4d07      	ldr	r5, [pc, #28]	@ (801087c <_kill_r+0x20>)
 8010860:	2300      	movs	r3, #0
 8010862:	4604      	mov	r4, r0
 8010864:	4608      	mov	r0, r1
 8010866:	4611      	mov	r1, r2
 8010868:	602b      	str	r3, [r5, #0]
 801086a:	f7f1 f933 	bl	8001ad4 <_kill>
 801086e:	1c43      	adds	r3, r0, #1
 8010870:	d102      	bne.n	8010878 <_kill_r+0x1c>
 8010872:	682b      	ldr	r3, [r5, #0]
 8010874:	b103      	cbz	r3, 8010878 <_kill_r+0x1c>
 8010876:	6023      	str	r3, [r4, #0]
 8010878:	bd38      	pop	{r3, r4, r5, pc}
 801087a:	bf00      	nop
 801087c:	200009a4 	.word	0x200009a4

08010880 <_getpid_r>:
 8010880:	f7f1 b920 	b.w	8001ac4 <_getpid>

08010884 <__swhatbuf_r>:
 8010884:	b570      	push	{r4, r5, r6, lr}
 8010886:	460c      	mov	r4, r1
 8010888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801088c:	2900      	cmp	r1, #0
 801088e:	b096      	sub	sp, #88	@ 0x58
 8010890:	4615      	mov	r5, r2
 8010892:	461e      	mov	r6, r3
 8010894:	da0d      	bge.n	80108b2 <__swhatbuf_r+0x2e>
 8010896:	89a3      	ldrh	r3, [r4, #12]
 8010898:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801089c:	f04f 0100 	mov.w	r1, #0
 80108a0:	bf14      	ite	ne
 80108a2:	2340      	movne	r3, #64	@ 0x40
 80108a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80108a8:	2000      	movs	r0, #0
 80108aa:	6031      	str	r1, [r6, #0]
 80108ac:	602b      	str	r3, [r5, #0]
 80108ae:	b016      	add	sp, #88	@ 0x58
 80108b0:	bd70      	pop	{r4, r5, r6, pc}
 80108b2:	466a      	mov	r2, sp
 80108b4:	f000 f848 	bl	8010948 <_fstat_r>
 80108b8:	2800      	cmp	r0, #0
 80108ba:	dbec      	blt.n	8010896 <__swhatbuf_r+0x12>
 80108bc:	9901      	ldr	r1, [sp, #4]
 80108be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80108c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80108c6:	4259      	negs	r1, r3
 80108c8:	4159      	adcs	r1, r3
 80108ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80108ce:	e7eb      	b.n	80108a8 <__swhatbuf_r+0x24>

080108d0 <__smakebuf_r>:
 80108d0:	898b      	ldrh	r3, [r1, #12]
 80108d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80108d4:	079d      	lsls	r5, r3, #30
 80108d6:	4606      	mov	r6, r0
 80108d8:	460c      	mov	r4, r1
 80108da:	d507      	bpl.n	80108ec <__smakebuf_r+0x1c>
 80108dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80108e0:	6023      	str	r3, [r4, #0]
 80108e2:	6123      	str	r3, [r4, #16]
 80108e4:	2301      	movs	r3, #1
 80108e6:	6163      	str	r3, [r4, #20]
 80108e8:	b003      	add	sp, #12
 80108ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108ec:	ab01      	add	r3, sp, #4
 80108ee:	466a      	mov	r2, sp
 80108f0:	f7ff ffc8 	bl	8010884 <__swhatbuf_r>
 80108f4:	9f00      	ldr	r7, [sp, #0]
 80108f6:	4605      	mov	r5, r0
 80108f8:	4639      	mov	r1, r7
 80108fa:	4630      	mov	r0, r6
 80108fc:	f7fe fd22 	bl	800f344 <_malloc_r>
 8010900:	b948      	cbnz	r0, 8010916 <__smakebuf_r+0x46>
 8010902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010906:	059a      	lsls	r2, r3, #22
 8010908:	d4ee      	bmi.n	80108e8 <__smakebuf_r+0x18>
 801090a:	f023 0303 	bic.w	r3, r3, #3
 801090e:	f043 0302 	orr.w	r3, r3, #2
 8010912:	81a3      	strh	r3, [r4, #12]
 8010914:	e7e2      	b.n	80108dc <__smakebuf_r+0xc>
 8010916:	89a3      	ldrh	r3, [r4, #12]
 8010918:	6020      	str	r0, [r4, #0]
 801091a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801091e:	81a3      	strh	r3, [r4, #12]
 8010920:	9b01      	ldr	r3, [sp, #4]
 8010922:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010926:	b15b      	cbz	r3, 8010940 <__smakebuf_r+0x70>
 8010928:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801092c:	4630      	mov	r0, r6
 801092e:	f000 f81d 	bl	801096c <_isatty_r>
 8010932:	b128      	cbz	r0, 8010940 <__smakebuf_r+0x70>
 8010934:	89a3      	ldrh	r3, [r4, #12]
 8010936:	f023 0303 	bic.w	r3, r3, #3
 801093a:	f043 0301 	orr.w	r3, r3, #1
 801093e:	81a3      	strh	r3, [r4, #12]
 8010940:	89a3      	ldrh	r3, [r4, #12]
 8010942:	431d      	orrs	r5, r3
 8010944:	81a5      	strh	r5, [r4, #12]
 8010946:	e7cf      	b.n	80108e8 <__smakebuf_r+0x18>

08010948 <_fstat_r>:
 8010948:	b538      	push	{r3, r4, r5, lr}
 801094a:	4d07      	ldr	r5, [pc, #28]	@ (8010968 <_fstat_r+0x20>)
 801094c:	2300      	movs	r3, #0
 801094e:	4604      	mov	r4, r0
 8010950:	4608      	mov	r0, r1
 8010952:	4611      	mov	r1, r2
 8010954:	602b      	str	r3, [r5, #0]
 8010956:	f7f1 f91d 	bl	8001b94 <_fstat>
 801095a:	1c43      	adds	r3, r0, #1
 801095c:	d102      	bne.n	8010964 <_fstat_r+0x1c>
 801095e:	682b      	ldr	r3, [r5, #0]
 8010960:	b103      	cbz	r3, 8010964 <_fstat_r+0x1c>
 8010962:	6023      	str	r3, [r4, #0]
 8010964:	bd38      	pop	{r3, r4, r5, pc}
 8010966:	bf00      	nop
 8010968:	200009a4 	.word	0x200009a4

0801096c <_isatty_r>:
 801096c:	b538      	push	{r3, r4, r5, lr}
 801096e:	4d06      	ldr	r5, [pc, #24]	@ (8010988 <_isatty_r+0x1c>)
 8010970:	2300      	movs	r3, #0
 8010972:	4604      	mov	r4, r0
 8010974:	4608      	mov	r0, r1
 8010976:	602b      	str	r3, [r5, #0]
 8010978:	f7f1 f91c 	bl	8001bb4 <_isatty>
 801097c:	1c43      	adds	r3, r0, #1
 801097e:	d102      	bne.n	8010986 <_isatty_r+0x1a>
 8010980:	682b      	ldr	r3, [r5, #0]
 8010982:	b103      	cbz	r3, 8010986 <_isatty_r+0x1a>
 8010984:	6023      	str	r3, [r4, #0]
 8010986:	bd38      	pop	{r3, r4, r5, pc}
 8010988:	200009a4 	.word	0x200009a4

0801098c <fmod>:
 801098c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801098e:	ed2d 8b02 	vpush	{d8}
 8010992:	ec57 6b10 	vmov	r6, r7, d0
 8010996:	ec55 4b11 	vmov	r4, r5, d1
 801099a:	f000 f825 	bl	80109e8 <__ieee754_fmod>
 801099e:	4622      	mov	r2, r4
 80109a0:	462b      	mov	r3, r5
 80109a2:	4630      	mov	r0, r6
 80109a4:	4639      	mov	r1, r7
 80109a6:	eeb0 8a40 	vmov.f32	s16, s0
 80109aa:	eef0 8a60 	vmov.f32	s17, s1
 80109ae:	f7f0 f8e5 	bl	8000b7c <__aeabi_dcmpun>
 80109b2:	b990      	cbnz	r0, 80109da <fmod+0x4e>
 80109b4:	2200      	movs	r2, #0
 80109b6:	2300      	movs	r3, #0
 80109b8:	4620      	mov	r0, r4
 80109ba:	4629      	mov	r1, r5
 80109bc:	f7f0 f8ac 	bl	8000b18 <__aeabi_dcmpeq>
 80109c0:	b158      	cbz	r0, 80109da <fmod+0x4e>
 80109c2:	f7fd fa79 	bl	800deb8 <__errno>
 80109c6:	2321      	movs	r3, #33	@ 0x21
 80109c8:	6003      	str	r3, [r0, #0]
 80109ca:	2200      	movs	r2, #0
 80109cc:	2300      	movs	r3, #0
 80109ce:	4610      	mov	r0, r2
 80109d0:	4619      	mov	r1, r3
 80109d2:	f7ef ff63 	bl	800089c <__aeabi_ddiv>
 80109d6:	ec41 0b18 	vmov	d8, r0, r1
 80109da:	eeb0 0a48 	vmov.f32	s0, s16
 80109de:	eef0 0a68 	vmov.f32	s1, s17
 80109e2:	ecbd 8b02 	vpop	{d8}
 80109e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080109e8 <__ieee754_fmod>:
 80109e8:	ec53 2b11 	vmov	r2, r3, d1
 80109ec:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 80109f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109f4:	ea52 040c 	orrs.w	r4, r2, ip
 80109f8:	ec51 0b10 	vmov	r0, r1, d0
 80109fc:	461e      	mov	r6, r3
 80109fe:	4617      	mov	r7, r2
 8010a00:	4696      	mov	lr, r2
 8010a02:	d00c      	beq.n	8010a1e <__ieee754_fmod+0x36>
 8010a04:	4c77      	ldr	r4, [pc, #476]	@ (8010be4 <__ieee754_fmod+0x1fc>)
 8010a06:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8010a0a:	45a0      	cmp	r8, r4
 8010a0c:	4689      	mov	r9, r1
 8010a0e:	d806      	bhi.n	8010a1e <__ieee754_fmod+0x36>
 8010a10:	4254      	negs	r4, r2
 8010a12:	4d75      	ldr	r5, [pc, #468]	@ (8010be8 <__ieee754_fmod+0x200>)
 8010a14:	4314      	orrs	r4, r2
 8010a16:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8010a1a:	42ac      	cmp	r4, r5
 8010a1c:	d909      	bls.n	8010a32 <__ieee754_fmod+0x4a>
 8010a1e:	f7ef fe13 	bl	8000648 <__aeabi_dmul>
 8010a22:	4602      	mov	r2, r0
 8010a24:	460b      	mov	r3, r1
 8010a26:	f7ef ff39 	bl	800089c <__aeabi_ddiv>
 8010a2a:	ec41 0b10 	vmov	d0, r0, r1
 8010a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a32:	45e0      	cmp	r8, ip
 8010a34:	4682      	mov	sl, r0
 8010a36:	4604      	mov	r4, r0
 8010a38:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8010a3c:	dc09      	bgt.n	8010a52 <__ieee754_fmod+0x6a>
 8010a3e:	dbf4      	blt.n	8010a2a <__ieee754_fmod+0x42>
 8010a40:	4282      	cmp	r2, r0
 8010a42:	d8f2      	bhi.n	8010a2a <__ieee754_fmod+0x42>
 8010a44:	d105      	bne.n	8010a52 <__ieee754_fmod+0x6a>
 8010a46:	4b69      	ldr	r3, [pc, #420]	@ (8010bec <__ieee754_fmod+0x204>)
 8010a48:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8010a4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010a50:	e7eb      	b.n	8010a2a <__ieee754_fmod+0x42>
 8010a52:	4a65      	ldr	r2, [pc, #404]	@ (8010be8 <__ieee754_fmod+0x200>)
 8010a54:	ea19 0f02 	tst.w	r9, r2
 8010a58:	d148      	bne.n	8010aec <__ieee754_fmod+0x104>
 8010a5a:	f1b8 0f00 	cmp.w	r8, #0
 8010a5e:	d13d      	bne.n	8010adc <__ieee754_fmod+0xf4>
 8010a60:	4963      	ldr	r1, [pc, #396]	@ (8010bf0 <__ieee754_fmod+0x208>)
 8010a62:	4653      	mov	r3, sl
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	dc36      	bgt.n	8010ad6 <__ieee754_fmod+0xee>
 8010a68:	4216      	tst	r6, r2
 8010a6a:	d14f      	bne.n	8010b0c <__ieee754_fmod+0x124>
 8010a6c:	f1bc 0f00 	cmp.w	ip, #0
 8010a70:	d144      	bne.n	8010afc <__ieee754_fmod+0x114>
 8010a72:	4a5f      	ldr	r2, [pc, #380]	@ (8010bf0 <__ieee754_fmod+0x208>)
 8010a74:	463b      	mov	r3, r7
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	dc3d      	bgt.n	8010af6 <__ieee754_fmod+0x10e>
 8010a7a:	485e      	ldr	r0, [pc, #376]	@ (8010bf4 <__ieee754_fmod+0x20c>)
 8010a7c:	4281      	cmp	r1, r0
 8010a7e:	db4a      	blt.n	8010b16 <__ieee754_fmod+0x12e>
 8010a80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010a84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010a88:	485a      	ldr	r0, [pc, #360]	@ (8010bf4 <__ieee754_fmod+0x20c>)
 8010a8a:	4282      	cmp	r2, r0
 8010a8c:	db57      	blt.n	8010b3e <__ieee754_fmod+0x156>
 8010a8e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8010a92:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8010a96:	1a89      	subs	r1, r1, r2
 8010a98:	1b98      	subs	r0, r3, r6
 8010a9a:	eba4 070e 	sub.w	r7, r4, lr
 8010a9e:	2900      	cmp	r1, #0
 8010aa0:	d162      	bne.n	8010b68 <__ieee754_fmod+0x180>
 8010aa2:	4574      	cmp	r4, lr
 8010aa4:	bf38      	it	cc
 8010aa6:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8010aaa:	2800      	cmp	r0, #0
 8010aac:	bfa4      	itt	ge
 8010aae:	463c      	movge	r4, r7
 8010ab0:	4603      	movge	r3, r0
 8010ab2:	ea53 0104 	orrs.w	r1, r3, r4
 8010ab6:	d0c6      	beq.n	8010a46 <__ieee754_fmod+0x5e>
 8010ab8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010abc:	db69      	blt.n	8010b92 <__ieee754_fmod+0x1aa>
 8010abe:	494d      	ldr	r1, [pc, #308]	@ (8010bf4 <__ieee754_fmod+0x20c>)
 8010ac0:	428a      	cmp	r2, r1
 8010ac2:	db6c      	blt.n	8010b9e <__ieee754_fmod+0x1b6>
 8010ac4:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010ac8:	432b      	orrs	r3, r5
 8010aca:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8010ace:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010ad2:	4620      	mov	r0, r4
 8010ad4:	e7a9      	b.n	8010a2a <__ieee754_fmod+0x42>
 8010ad6:	3901      	subs	r1, #1
 8010ad8:	005b      	lsls	r3, r3, #1
 8010ada:	e7c3      	b.n	8010a64 <__ieee754_fmod+0x7c>
 8010adc:	4945      	ldr	r1, [pc, #276]	@ (8010bf4 <__ieee754_fmod+0x20c>)
 8010ade:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	ddc0      	ble.n	8010a68 <__ieee754_fmod+0x80>
 8010ae6:	3901      	subs	r1, #1
 8010ae8:	005b      	lsls	r3, r3, #1
 8010aea:	e7fa      	b.n	8010ae2 <__ieee754_fmod+0xfa>
 8010aec:	ea4f 5128 	mov.w	r1, r8, asr #20
 8010af0:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8010af4:	e7b8      	b.n	8010a68 <__ieee754_fmod+0x80>
 8010af6:	3a01      	subs	r2, #1
 8010af8:	005b      	lsls	r3, r3, #1
 8010afa:	e7bc      	b.n	8010a76 <__ieee754_fmod+0x8e>
 8010afc:	4a3d      	ldr	r2, [pc, #244]	@ (8010bf4 <__ieee754_fmod+0x20c>)
 8010afe:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	ddb9      	ble.n	8010a7a <__ieee754_fmod+0x92>
 8010b06:	3a01      	subs	r2, #1
 8010b08:	005b      	lsls	r3, r3, #1
 8010b0a:	e7fa      	b.n	8010b02 <__ieee754_fmod+0x11a>
 8010b0c:	ea4f 522c 	mov.w	r2, ip, asr #20
 8010b10:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8010b14:	e7b1      	b.n	8010a7a <__ieee754_fmod+0x92>
 8010b16:	1a40      	subs	r0, r0, r1
 8010b18:	281f      	cmp	r0, #31
 8010b1a:	dc0a      	bgt.n	8010b32 <__ieee754_fmod+0x14a>
 8010b1c:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 8010b20:	fa08 f800 	lsl.w	r8, r8, r0
 8010b24:	fa2a f303 	lsr.w	r3, sl, r3
 8010b28:	ea43 0308 	orr.w	r3, r3, r8
 8010b2c:	fa0a f400 	lsl.w	r4, sl, r0
 8010b30:	e7aa      	b.n	8010a88 <__ieee754_fmod+0xa0>
 8010b32:	4b31      	ldr	r3, [pc, #196]	@ (8010bf8 <__ieee754_fmod+0x210>)
 8010b34:	1a5b      	subs	r3, r3, r1
 8010b36:	fa0a f303 	lsl.w	r3, sl, r3
 8010b3a:	2400      	movs	r4, #0
 8010b3c:	e7a4      	b.n	8010a88 <__ieee754_fmod+0xa0>
 8010b3e:	1a80      	subs	r0, r0, r2
 8010b40:	281f      	cmp	r0, #31
 8010b42:	dc0a      	bgt.n	8010b5a <__ieee754_fmod+0x172>
 8010b44:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 8010b48:	fa0c fc00 	lsl.w	ip, ip, r0
 8010b4c:	fa27 f606 	lsr.w	r6, r7, r6
 8010b50:	ea46 060c 	orr.w	r6, r6, ip
 8010b54:	fa07 fe00 	lsl.w	lr, r7, r0
 8010b58:	e79d      	b.n	8010a96 <__ieee754_fmod+0xae>
 8010b5a:	4e27      	ldr	r6, [pc, #156]	@ (8010bf8 <__ieee754_fmod+0x210>)
 8010b5c:	1ab6      	subs	r6, r6, r2
 8010b5e:	fa07 f606 	lsl.w	r6, r7, r6
 8010b62:	f04f 0e00 	mov.w	lr, #0
 8010b66:	e796      	b.n	8010a96 <__ieee754_fmod+0xae>
 8010b68:	4574      	cmp	r4, lr
 8010b6a:	bf38      	it	cc
 8010b6c:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8010b70:	2800      	cmp	r0, #0
 8010b72:	da05      	bge.n	8010b80 <__ieee754_fmod+0x198>
 8010b74:	0fe0      	lsrs	r0, r4, #31
 8010b76:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8010b7a:	0064      	lsls	r4, r4, #1
 8010b7c:	3901      	subs	r1, #1
 8010b7e:	e78b      	b.n	8010a98 <__ieee754_fmod+0xb0>
 8010b80:	ea50 0307 	orrs.w	r3, r0, r7
 8010b84:	f43f af5f 	beq.w	8010a46 <__ieee754_fmod+0x5e>
 8010b88:	0ffb      	lsrs	r3, r7, #31
 8010b8a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8010b8e:	007c      	lsls	r4, r7, #1
 8010b90:	e7f4      	b.n	8010b7c <__ieee754_fmod+0x194>
 8010b92:	0fe1      	lsrs	r1, r4, #31
 8010b94:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8010b98:	0064      	lsls	r4, r4, #1
 8010b9a:	3a01      	subs	r2, #1
 8010b9c:	e78c      	b.n	8010ab8 <__ieee754_fmod+0xd0>
 8010b9e:	1a89      	subs	r1, r1, r2
 8010ba0:	2914      	cmp	r1, #20
 8010ba2:	dc0a      	bgt.n	8010bba <__ieee754_fmod+0x1d2>
 8010ba4:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8010ba8:	fa03 f202 	lsl.w	r2, r3, r2
 8010bac:	40cc      	lsrs	r4, r1
 8010bae:	4322      	orrs	r2, r4
 8010bb0:	410b      	asrs	r3, r1
 8010bb2:	ea43 0105 	orr.w	r1, r3, r5
 8010bb6:	4610      	mov	r0, r2
 8010bb8:	e737      	b.n	8010a2a <__ieee754_fmod+0x42>
 8010bba:	291f      	cmp	r1, #31
 8010bbc:	dc07      	bgt.n	8010bce <__ieee754_fmod+0x1e6>
 8010bbe:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8010bc2:	40cc      	lsrs	r4, r1
 8010bc4:	fa03 f202 	lsl.w	r2, r3, r2
 8010bc8:	4322      	orrs	r2, r4
 8010bca:	462b      	mov	r3, r5
 8010bcc:	e7f1      	b.n	8010bb2 <__ieee754_fmod+0x1ca>
 8010bce:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8010bd2:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8010bd6:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8010bda:	32e2      	adds	r2, #226	@ 0xe2
 8010bdc:	fa43 f202 	asr.w	r2, r3, r2
 8010be0:	e7f3      	b.n	8010bca <__ieee754_fmod+0x1e2>
 8010be2:	bf00      	nop
 8010be4:	7fefffff 	.word	0x7fefffff
 8010be8:	7ff00000 	.word	0x7ff00000
 8010bec:	080111e0 	.word	0x080111e0
 8010bf0:	fffffbed 	.word	0xfffffbed
 8010bf4:	fffffc02 	.word	0xfffffc02
 8010bf8:	fffffbe2 	.word	0xfffffbe2

08010bfc <_init>:
 8010bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bfe:	bf00      	nop
 8010c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c02:	bc08      	pop	{r3}
 8010c04:	469e      	mov	lr, r3
 8010c06:	4770      	bx	lr

08010c08 <_fini>:
 8010c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c0a:	bf00      	nop
 8010c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c0e:	bc08      	pop	{r3}
 8010c10:	469e      	mov	lr, r3
 8010c12:	4770      	bx	lr
