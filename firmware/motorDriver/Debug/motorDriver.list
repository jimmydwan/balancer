
motorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010fa4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  08011188  08011188  00012188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011730  08011730  0001327c  2**0
                  CONTENTS
  4 .ARM          00000008  08011730  08011730  00012730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011738  08011738  0001327c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011738  08011738  00012738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801173c  0801173c  0001273c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000027c  20000000  08011740  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000858  2000027c  080119bc  0001327c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ad4  080119bc  00013ad4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001327c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023bcf  00000000  00000000  000132ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000553d  00000000  00000000  00036e7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c60  00000000  00000000  0003c3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015a1  00000000  00000000  0003e018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e91  00000000  00000000  0003f5b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002882d  00000000  00000000  0006644a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4cce  00000000  00000000  0008ec77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00173945  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008990  00000000  00000000  00173988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0017c318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000027c 	.word	0x2000027c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801116c 	.word	0x0801116c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000280 	.word	0x20000280
 800021c:	0801116c 	.word	0x0801116c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09a      	sub	sp, #104	@ 0x68
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800104a:	2220      	movs	r2, #32
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00d f986 	bl	800e360 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	223c      	movs	r2, #60	@ 0x3c
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f00d f980 	bl	800e360 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001060:	4b4d      	ldr	r3, [pc, #308]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001062:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001068:	4b4b      	ldr	r3, [pc, #300]	@ (8001198 <MX_ADC1_Init+0x164>)
 800106a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800106e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001070:	4b49      	ldr	r3, [pc, #292]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b48      	ldr	r3, [pc, #288]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800107c:	4b46      	ldr	r3, [pc, #280]	@ (8001198 <MX_ADC1_Init+0x164>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001082:	4b45      	ldr	r3, [pc, #276]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001084:	2201      	movs	r2, #1
 8001086:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001088:	4b43      	ldr	r3, [pc, #268]	@ (8001198 <MX_ADC1_Init+0x164>)
 800108a:	2204      	movs	r2, #4
 800108c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800108e:	4b42      	ldr	r3, [pc, #264]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001090:	2200      	movs	r2, #0
 8001092:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001094:	4b40      	ldr	r3, [pc, #256]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001096:	2200      	movs	r2, #0
 8001098:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800109a:	4b3f      	ldr	r3, [pc, #252]	@ (8001198 <MX_ADC1_Init+0x164>)
 800109c:	2201      	movs	r2, #1
 800109e:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b4:	4b38      	ldr	r3, [pc, #224]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010bc:	4b36      	ldr	r3, [pc, #216]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010be:	2200      	movs	r2, #0
 80010c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c2:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ca:	4833      	ldr	r0, [pc, #204]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010cc:	f001 fc7e 	bl	80029cc <HAL_ADC_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010d6:	f000 fba8 	bl	800182a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010da:	2300      	movs	r3, #0
 80010dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010e2:	4619      	mov	r1, r3
 80010e4:	482c      	ldr	r0, [pc, #176]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010e6:	f003 fe71 	bl	8004dcc <HAL_ADCEx_MultiModeConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80010f0:	f000 fb9b 	bl	800182a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010f4:	4b29      	ldr	r3, [pc, #164]	@ (800119c <MX_ADC1_Init+0x168>)
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f8:	2306      	movs	r3, #6
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010fc:	2300      	movs	r3, #0
 80010fe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001100:	237f      	movs	r3, #127	@ 0x7f
 8001102:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001104:	2304      	movs	r3, #4
 8001106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.Offset = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001110:	4619      	mov	r1, r3
 8001112:	4821      	ldr	r0, [pc, #132]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001114:	f002 f8e0 	bl	80032d8 <HAL_ADC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800111e:	f000 fb84 	bl	800182a <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8001122:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <MX_ADC1_Init+0x16c>)
 8001124:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001126:	2309      	movs	r3, #9
 8001128:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800112a:	2301      	movs	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800112e:	237f      	movs	r3, #127	@ 0x7f
 8001130:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001132:	2304      	movs	r3, #4
 8001134:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800113a:	2302      	movs	r3, #2
 800113c:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001150:	2384      	movs	r3, #132	@ 0x84
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001164:	f003 f952 	bl	800440c <HAL_ADCEx_InjectedConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 800116e:	f000 fb5c 	bl	800182a <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8001172:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <MX_ADC1_Init+0x168>)
 8001174:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001176:	f240 130f 	movw	r3, #271	@ 0x10f
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001182:	f003 f943 	bl	800440c <HAL_ADCEx_InjectedConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 800118c:	f000 fb4d 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3768      	adds	r7, #104	@ 0x68
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000298 	.word	0x20000298
 800119c:	2e300800 	.word	0x2e300800
 80011a0:	14f00020 	.word	0x14f00020

080011a4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b090      	sub	sp, #64	@ 0x40
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	223c      	movs	r2, #60	@ 0x3c
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f00d f8d5 	bl	800e360 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011b6:	4b38      	ldr	r3, [pc, #224]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011b8:	4a38      	ldr	r2, [pc, #224]	@ (800129c <MX_ADC2_Init+0xf8>)
 80011ba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80011bc:	4b36      	ldr	r3, [pc, #216]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011be:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011c2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011c4:	4b34      	ldr	r3, [pc, #208]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ca:	4b33      	ldr	r3, [pc, #204]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80011d0:	4b31      	ldr	r3, [pc, #196]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011d6:	4b30      	ldr	r3, [pc, #192]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011d8:	2201      	movs	r2, #1
 80011da:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011de:	2204      	movs	r2, #4
 80011e0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80011e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80011ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011f4:	4b28      	ldr	r3, [pc, #160]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011fc:	4b26      	ldr	r3, [pc, #152]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001204:	4b24      	ldr	r3, [pc, #144]	@ (8001298 <MX_ADC2_Init+0xf4>)
 8001206:	2200      	movs	r2, #0
 8001208:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800120a:	4b23      	ldr	r3, [pc, #140]	@ (8001298 <MX_ADC2_Init+0xf4>)
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001212:	4821      	ldr	r0, [pc, #132]	@ (8001298 <MX_ADC2_Init+0xf4>)
 8001214:	f001 fbda 	bl	80029cc <HAL_ADC_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800121e:	f000 fb04 	bl	800182a <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 8001222:	4b1f      	ldr	r3, [pc, #124]	@ (80012a0 <MX_ADC2_Init+0xfc>)
 8001224:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001226:	2309      	movs	r3, #9
 8001228:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800122a:	2301      	movs	r3, #1
 800122c:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800122e:	237f      	movs	r3, #127	@ 0x7f
 8001230:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001232:	2304      	movs	r3, #4
 8001234:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800123a:	2302      	movs	r3, #2
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T8_CC4;
 8001250:	239c      	movs	r3, #156	@ 0x9c
 8001252:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001254:	2380      	movs	r3, #128	@ 0x80
 8001256:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	4619      	mov	r1, r3
 8001262:	480d      	ldr	r0, [pc, #52]	@ (8001298 <MX_ADC2_Init+0xf4>)
 8001264:	f003 f8d2 	bl	800440c <HAL_ADCEx_InjectedConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 800126e:	f000 fadc 	bl	800182a <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8001272:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <MX_ADC2_Init+0x100>)
 8001274:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001276:	f240 130f 	movw	r3, #271	@ 0x10f
 800127a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	4619      	mov	r1, r3
 8001280:	4805      	ldr	r0, [pc, #20]	@ (8001298 <MX_ADC2_Init+0xf4>)
 8001282:	f003 f8c3 	bl	800440c <HAL_ADCEx_InjectedConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_ADC2_Init+0xec>
  {
    Error_Handler();
 800128c:	f000 facd 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	3740      	adds	r7, #64	@ 0x40
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000304 	.word	0x20000304
 800129c:	50000100 	.word	0x50000100
 80012a0:	3ef08000 	.word	0x3ef08000
 80012a4:	32601000 	.word	0x32601000

080012a8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b09e      	sub	sp, #120	@ 0x78
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c0:	f107 0320 	add.w	r3, r7, #32
 80012c4:	2244      	movs	r2, #68	@ 0x44
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f00d f849 	bl	800e360 <memset>
  if(adcHandle->Instance==ADC1)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012d6:	d15f      	bne.n	8001398 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012dc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012de:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80012e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e4:	f107 0320 	add.w	r3, r7, #32
 80012e8:	4618      	mov	r0, r3
 80012ea:	f005 fbab 	bl	8006a44 <HAL_RCCEx_PeriphCLKConfig>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80012f4:	f000 fa99 	bl	800182a <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012f8:	4b4f      	ldr	r3, [pc, #316]	@ (8001438 <HAL_ADC_MspInit+0x190>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	4a4e      	ldr	r2, [pc, #312]	@ (8001438 <HAL_ADC_MspInit+0x190>)
 8001300:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001302:	4b4d      	ldr	r3, [pc, #308]	@ (8001438 <HAL_ADC_MspInit+0x190>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d10b      	bne.n	8001322 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800130a:	4b4c      	ldr	r3, [pc, #304]	@ (800143c <HAL_ADC_MspInit+0x194>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130e:	4a4b      	ldr	r2, [pc, #300]	@ (800143c <HAL_ADC_MspInit+0x194>)
 8001310:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001314:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001316:	4b49      	ldr	r3, [pc, #292]	@ (800143c <HAL_ADC_MspInit+0x194>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800131e:	61fb      	str	r3, [r7, #28]
 8001320:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	4b46      	ldr	r3, [pc, #280]	@ (800143c <HAL_ADC_MspInit+0x194>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001326:	4a45      	ldr	r2, [pc, #276]	@ (800143c <HAL_ADC_MspInit+0x194>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800132e:	4b43      	ldr	r3, [pc, #268]	@ (800143c <HAL_ADC_MspInit+0x194>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	61bb      	str	r3, [r7, #24]
 8001338:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	4b40      	ldr	r3, [pc, #256]	@ (800143c <HAL_ADC_MspInit+0x194>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	4a3f      	ldr	r2, [pc, #252]	@ (800143c <HAL_ADC_MspInit+0x194>)
 8001340:	f043 0302 	orr.w	r3, r3, #2
 8001344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001346:	4b3d      	ldr	r3, [pc, #244]	@ (800143c <HAL_ADC_MspInit+0x194>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001352:	2302      	movs	r3, #2
 8001354:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001356:	2303      	movs	r3, #3
 8001358:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001362:	4619      	mov	r1, r3
 8001364:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001368:	f004 fbf0 	bl	8005b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800136c:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001370:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001372:	2303      	movs	r3, #3
 8001374:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800137e:	4619      	mov	r1, r3
 8001380:	482f      	ldr	r0, [pc, #188]	@ (8001440 <HAL_ADC_MspInit+0x198>)
 8001382:	f004 fbe3 	bl	8005b4c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	2012      	movs	r0, #18
 800138c:	f003 fe9d 	bl	80050ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001390:	2012      	movs	r0, #18
 8001392:	f003 feb4 	bl	80050fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001396:	e04a      	b.n	800142e <HAL_ADC_MspInit+0x186>
  else if(adcHandle->Instance==ADC2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a29      	ldr	r2, [pc, #164]	@ (8001444 <HAL_ADC_MspInit+0x19c>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d145      	bne.n	800142e <HAL_ADC_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013a6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013a8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80013ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ae:	f107 0320 	add.w	r3, r7, #32
 80013b2:	4618      	mov	r0, r3
 80013b4:	f005 fb46 	bl	8006a44 <HAL_RCCEx_PeriphCLKConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 80013be:	f000 fa34 	bl	800182a <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001438 <HAL_ADC_MspInit+0x190>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001438 <HAL_ADC_MspInit+0x190>)
 80013ca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <HAL_ADC_MspInit+0x190>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d10b      	bne.n	80013ec <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013d4:	4b19      	ldr	r3, [pc, #100]	@ (800143c <HAL_ADC_MspInit+0x194>)
 80013d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d8:	4a18      	ldr	r2, [pc, #96]	@ (800143c <HAL_ADC_MspInit+0x194>)
 80013da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e0:	4b16      	ldr	r3, [pc, #88]	@ (800143c <HAL_ADC_MspInit+0x194>)
 80013e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ec:	4b13      	ldr	r3, [pc, #76]	@ (800143c <HAL_ADC_MspInit+0x194>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f0:	4a12      	ldr	r2, [pc, #72]	@ (800143c <HAL_ADC_MspInit+0x194>)
 80013f2:	f043 0302 	orr.w	r3, r3, #2
 80013f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f8:	4b10      	ldr	r3, [pc, #64]	@ (800143c <HAL_ADC_MspInit+0x194>)
 80013fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001404:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001408:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140a:	2303      	movs	r3, #3
 800140c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001412:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001416:	4619      	mov	r1, r3
 8001418:	4809      	ldr	r0, [pc, #36]	@ (8001440 <HAL_ADC_MspInit+0x198>)
 800141a:	f004 fb97 	bl	8005b4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	2012      	movs	r0, #18
 8001424:	f003 fe51 	bl	80050ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001428:	2012      	movs	r0, #18
 800142a:	f003 fe68 	bl	80050fe <HAL_NVIC_EnableIRQ>
}
 800142e:	bf00      	nop
 8001430:	3778      	adds	r7, #120	@ 0x78
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000370 	.word	0x20000370
 800143c:	40021000 	.word	0x40021000
 8001440:	48000400 	.word	0x48000400
 8001444:	50000100 	.word	0x50000100

08001448 <MX_DAC3_Init>:

DAC_HandleTypeDef hdac3;

/* DAC3 init function */
void MX_DAC3_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08c      	sub	sp, #48	@ 0x30
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800144e:	463b      	mov	r3, r7
 8001450:	2230      	movs	r2, #48	@ 0x30
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f00c ff83 	bl	800e360 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 800145a:	4b16      	ldr	r3, [pc, #88]	@ (80014b4 <MX_DAC3_Init+0x6c>)
 800145c:	4a16      	ldr	r2, [pc, #88]	@ (80014b8 <MX_DAC3_Init+0x70>)
 800145e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001460:	4814      	ldr	r0, [pc, #80]	@ (80014b4 <MX_DAC3_Init+0x6c>)
 8001462:	f003 fe66 	bl	8005132 <HAL_DAC_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 800146c:	f000 f9dd 	bl	800182a <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001470:	2302      	movs	r3, #2
 8001472:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001484:	2300      	movs	r3, #0
 8001486:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001488:	2302      	movs	r3, #2
 800148a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 800148c:	2302      	movs	r3, #2
 800148e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001494:	463b      	mov	r3, r7
 8001496:	2200      	movs	r2, #0
 8001498:	4619      	mov	r1, r3
 800149a:	4806      	ldr	r0, [pc, #24]	@ (80014b4 <MX_DAC3_Init+0x6c>)
 800149c:	f003 fe6c 	bl	8005178 <HAL_DAC_ConfigChannel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 80014a6:	f000 f9c0 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	3730      	adds	r7, #48	@ 0x30
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000374 	.word	0x20000374
 80014b8:	50001000 	.word	0x50001000

080014bc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC3)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0a      	ldr	r2, [pc, #40]	@ (80014f4 <HAL_DAC_MspInit+0x38>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d10b      	bne.n	80014e6 <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* DAC3 clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 80014ce:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <HAL_DAC_MspInit+0x3c>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d2:	4a09      	ldr	r2, [pc, #36]	@ (80014f8 <HAL_DAC_MspInit+0x3c>)
 80014d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014da:	4b07      	ldr	r3, [pc, #28]	@ (80014f8 <HAL_DAC_MspInit+0x3c>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }
}
 80014e6:	bf00      	nop
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	50001000 	.word	0x50001000
 80014f8:	40021000 	.word	0x40021000

080014fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001502:	4b16      	ldr	r3, [pc, #88]	@ (800155c <MX_DMA_Init+0x60>)
 8001504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <MX_DMA_Init+0x60>)
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	6493      	str	r3, [r2, #72]	@ 0x48
 800150e:	4b13      	ldr	r3, [pc, #76]	@ (800155c <MX_DMA_Init+0x60>)
 8001510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <MX_DMA_Init+0x60>)
 800151c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800151e:	4a0f      	ldr	r2, [pc, #60]	@ (800155c <MX_DMA_Init+0x60>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6493      	str	r3, [r2, #72]	@ 0x48
 8001526:	4b0d      	ldr	r3, [pc, #52]	@ (800155c <MX_DMA_Init+0x60>)
 8001528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2101      	movs	r1, #1
 8001536:	200b      	movs	r0, #11
 8001538:	f003 fdc7 	bl	80050ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800153c:	200b      	movs	r0, #11
 800153e:	f003 fdde 	bl	80050fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 1, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2101      	movs	r1, #1
 8001546:	200c      	movs	r0, #12
 8001548:	f003 fdbf 	bl	80050ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800154c:	200c      	movs	r0, #12
 800154e:	f003 fdd6 	bl	80050fe <HAL_NVIC_EnableIRQ>

}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40021000 	.word	0x40021000

08001560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	@ 0x28
 8001564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001576:	4b4d      	ldr	r3, [pc, #308]	@ (80016ac <MX_GPIO_Init+0x14c>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157a:	4a4c      	ldr	r2, [pc, #304]	@ (80016ac <MX_GPIO_Init+0x14c>)
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001582:	4b4a      	ldr	r3, [pc, #296]	@ (80016ac <MX_GPIO_Init+0x14c>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800158e:	4b47      	ldr	r3, [pc, #284]	@ (80016ac <MX_GPIO_Init+0x14c>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001592:	4a46      	ldr	r2, [pc, #280]	@ (80016ac <MX_GPIO_Init+0x14c>)
 8001594:	f043 0320 	orr.w	r3, r3, #32
 8001598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800159a:	4b44      	ldr	r3, [pc, #272]	@ (80016ac <MX_GPIO_Init+0x14c>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	f003 0320 	and.w	r3, r3, #32
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	4b41      	ldr	r3, [pc, #260]	@ (80016ac <MX_GPIO_Init+0x14c>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015aa:	4a40      	ldr	r2, [pc, #256]	@ (80016ac <MX_GPIO_Init+0x14c>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015b2:	4b3e      	ldr	r3, [pc, #248]	@ (80016ac <MX_GPIO_Init+0x14c>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	4b3b      	ldr	r3, [pc, #236]	@ (80016ac <MX_GPIO_Init+0x14c>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c2:	4a3a      	ldr	r2, [pc, #232]	@ (80016ac <MX_GPIO_Init+0x14c>)
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ca:	4b38      	ldr	r3, [pc, #224]	@ (80016ac <MX_GPIO_Init+0x14c>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|TEST_Pin, GPIO_PIN_SET);
 80015d6:	2201      	movs	r2, #1
 80015d8:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 80015dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e0:	f004 fc36 	bl	8005e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS2_GPIO_Port, NSS2_Pin, GPIO_PIN_SET);
 80015e4:	2201      	movs	r2, #1
 80015e6:	2110      	movs	r1, #16
 80015e8:	4831      	ldr	r0, [pc, #196]	@ (80016b0 <MX_GPIO_Init+0x150>)
 80015ea:	f004 fc31 	bl	8005e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|NSS1_Pin, GPIO_PIN_SET);
 80015ee:	2201      	movs	r2, #1
 80015f0:	2109      	movs	r1, #9
 80015f2:	4830      	ldr	r0, [pc, #192]	@ (80016b4 <MX_GPIO_Init+0x154>)
 80015f4:	f004 fc2c 	bl	8005e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	4828      	ldr	r0, [pc, #160]	@ (80016b0 <MX_GPIO_Init+0x150>)
 800160e:	f004 fa9d 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001612:	2310      	movs	r3, #16
 8001614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001616:	2301      	movs	r3, #1
 8001618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800162c:	f004 fa8e 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS2_Pin;
 8001630:	2310      	movs	r3, #16
 8001632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001634:	2301      	movs	r3, #1
 8001636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800163c:	2302      	movs	r3, #2
 800163e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS2_GPIO_Port, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	481a      	ldr	r0, [pc, #104]	@ (80016b0 <MX_GPIO_Init+0x150>)
 8001648:	f004 fa80 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800164c:	2301      	movs	r3, #1
 800164e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001650:	2301      	movs	r3, #1
 8001652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	4814      	ldr	r0, [pc, #80]	@ (80016b4 <MX_GPIO_Init+0x154>)
 8001664:	f004 fa72 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8001668:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800166c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166e:	2301      	movs	r3, #1
 8001670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001676:	2302      	movs	r3, #2
 8001678:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001684:	f004 fa62 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS1_Pin;
 8001688:	2308      	movs	r3, #8
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001694:	2302      	movs	r3, #2
 8001696:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS1_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	4805      	ldr	r0, [pc, #20]	@ (80016b4 <MX_GPIO_Init+0x154>)
 80016a0:	f004 fa54 	bl	8005b4c <HAL_GPIO_Init>

}
 80016a4:	bf00      	nop
 80016a6:	3728      	adds	r7, #40	@ 0x28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40021000 	.word	0x40021000
 80016b0:	48000800 	.word	0x48000800
 80016b4:	48000400 	.word	0x48000400

080016b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016bc:	f000 feaf 	bl	800241e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c0:	f000 f86a 	bl	8001798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c4:	f7ff ff4c 	bl	8001560 <MX_GPIO_Init>
  MX_DMA_Init();
 80016c8:	f7ff ff18 	bl	80014fc <MX_DMA_Init>
  MX_USART3_UART_Init();
 80016cc:	f000 fd74 	bl	80021b8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80016d0:	f7ff fcb0 	bl	8001034 <MX_ADC1_Init>
  MX_ADC2_Init();
 80016d4:	f7ff fd66 	bl	80011a4 <MX_ADC2_Init>
  MX_TIM1_Init();
 80016d8:	f000 fb16 	bl	8001d08 <MX_TIM1_Init>
  MX_DAC3_Init();
 80016dc:	f7ff feb4 	bl	8001448 <MX_DAC3_Init>
  MX_SPI1_Init();
 80016e0:	f000 f8aa 	bl	8001838 <MX_SPI1_Init>
  MX_TIM8_Init();
 80016e4:	f000 fbec 	bl	8001ec0 <MX_TIM8_Init>
  MX_SPI3_Init();
 80016e8:	f000 f8e4 	bl	80018b4 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  appInit();
 80016ec:	f00a fb4c 	bl	800bd88 <appInit>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 80016f0:	2264      	movs	r2, #100	@ 0x64
 80016f2:	4923      	ldr	r1, [pc, #140]	@ (8001780 <main+0xc8>)
 80016f4:	4823      	ldr	r0, [pc, #140]	@ (8001784 <main+0xcc>)
 80016f6:	f008 fef8 	bl	800a4ea <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80016fa:	217f      	movs	r1, #127	@ 0x7f
 80016fc:	4822      	ldr	r0, [pc, #136]	@ (8001788 <main+0xd0>)
 80016fe:	f002 fc65 	bl	8003fcc <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001702:	217f      	movs	r1, #127	@ 0x7f
 8001704:	4821      	ldr	r0, [pc, #132]	@ (800178c <main+0xd4>)
 8001706:	f002 fc61 	bl	8003fcc <HAL_ADCEx_Calibration_Start>
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_JEOC);
 800170a:	4b1f      	ldr	r3, [pc, #124]	@ (8001788 <main+0xd0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2220      	movs	r2, #32
 8001710:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOC);
 8001712:	4b1d      	ldr	r3, [pc, #116]	@ (8001788 <main+0xd0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2204      	movs	r2, #4
 8001718:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_JEOC);
 800171a:	4b1c      	ldr	r3, [pc, #112]	@ (800178c <main+0xd4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2220      	movs	r2, #32
 8001720:	601a      	str	r2, [r3, #0]
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001722:	4819      	ldr	r0, [pc, #100]	@ (8001788 <main+0xd0>)
 8001724:	f002 fd64 	bl	80041f0 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart(&hadc2);
 8001728:	4818      	ldr	r0, [pc, #96]	@ (800178c <main+0xd4>)
 800172a:	f002 fcb1 	bl	8004090 <HAL_ADCEx_InjectedStart>
  HAL_TIM_Base_Start(&htim8);
 800172e:	4818      	ldr	r0, [pc, #96]	@ (8001790 <main+0xd8>)
 8001730:	f006 f810 	bl	8007754 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001734:	210c      	movs	r1, #12
 8001736:	4816      	ldr	r0, [pc, #88]	@ (8001790 <main+0xd8>)
 8001738:	f006 f8d0 	bl	80078dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800173c:	2100      	movs	r1, #0
 800173e:	4814      	ldr	r0, [pc, #80]	@ (8001790 <main+0xd8>)
 8001740:	f006 f8cc 	bl	80078dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001744:	2104      	movs	r1, #4
 8001746:	4812      	ldr	r0, [pc, #72]	@ (8001790 <main+0xd8>)
 8001748:	f006 f8c8 	bl	80078dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800174c:	2108      	movs	r1, #8
 800174e:	4810      	ldr	r0, [pc, #64]	@ (8001790 <main+0xd8>)
 8001750:	f006 f8c4 	bl	80078dc <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim1);
 8001754:	480f      	ldr	r0, [pc, #60]	@ (8001794 <main+0xdc>)
 8001756:	f005 fffd 	bl	8007754 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800175a:	210c      	movs	r1, #12
 800175c:	480d      	ldr	r0, [pc, #52]	@ (8001794 <main+0xdc>)
 800175e:	f006 f8bd 	bl	80078dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001762:	2100      	movs	r1, #0
 8001764:	480b      	ldr	r0, [pc, #44]	@ (8001794 <main+0xdc>)
 8001766:	f006 f8b9 	bl	80078dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800176a:	2104      	movs	r1, #4
 800176c:	4809      	ldr	r0, [pc, #36]	@ (8001794 <main+0xdc>)
 800176e:	f006 f8b5 	bl	80078dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001772:	2108      	movs	r1, #8
 8001774:	4807      	ldr	r0, [pc, #28]	@ (8001794 <main+0xdc>)
 8001776:	f006 f8b1 	bl	80078dc <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    userMain();
 800177a:	f00a ff0f 	bl	800c59c <userMain>
 800177e:	e7fc      	b.n	800177a <main+0xc2>
 8001780:	200008f0 	.word	0x200008f0
 8001784:	200004ec 	.word	0x200004ec
 8001788:	20000298 	.word	0x20000298
 800178c:	20000304 	.word	0x20000304
 8001790:	200004a0 	.word	0x200004a0
 8001794:	20000454 	.word	0x20000454

08001798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b094      	sub	sp, #80	@ 0x50
 800179c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800179e:	f107 0318 	add.w	r3, r7, #24
 80017a2:	2238      	movs	r2, #56	@ 0x38
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f00c fdda 	bl	800e360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
 80017b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80017ba:	2000      	movs	r0, #0
 80017bc:	f004 fb60 	bl	8005e80 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017c0:	2301      	movs	r3, #1
 80017c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017c8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ca:	2302      	movs	r3, #2
 80017cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017ce:	2303      	movs	r3, #3
 80017d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 80017d2:	2303      	movs	r3, #3
 80017d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80017d6:	2328      	movs	r3, #40	@ 0x28
 80017d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017da:	2302      	movs	r3, #2
 80017dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017de:	2302      	movs	r3, #2
 80017e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017e2:	2302      	movs	r3, #2
 80017e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e6:	f107 0318 	add.w	r3, r7, #24
 80017ea:	4618      	mov	r0, r3
 80017ec:	f004 fbfc 	bl	8005fe8 <HAL_RCC_OscConfig>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <SystemClock_Config+0x62>
  {
    Error_Handler();
 80017f6:	f000 f818 	bl	800182a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017fa:	230f      	movs	r3, #15
 80017fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fe:	2303      	movs	r3, #3
 8001800:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2104      	movs	r1, #4
 8001812:	4618      	mov	r0, r3
 8001814:	f004 fefa 	bl	800660c <HAL_RCC_ClockConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800181e:	f000 f804 	bl	800182a <Error_Handler>
  }
}
 8001822:	bf00      	nop
 8001824:	3750      	adds	r7, #80	@ 0x50
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800182e:	b672      	cpsid	i
}
 8001830:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001832:	bf00      	nop
 8001834:	e7fd      	b.n	8001832 <Error_Handler+0x8>
	...

08001838 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800183c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <MX_SPI1_Init+0x74>)
 800183e:	4a1c      	ldr	r2, [pc, #112]	@ (80018b0 <MX_SPI1_Init+0x78>)
 8001840:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001842:	4b1a      	ldr	r3, [pc, #104]	@ (80018ac <MX_SPI1_Init+0x74>)
 8001844:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001848:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800184a:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <MX_SPI1_Init+0x74>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001850:	4b16      	ldr	r3, [pc, #88]	@ (80018ac <MX_SPI1_Init+0x74>)
 8001852:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001856:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001858:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <MX_SPI1_Init+0x74>)
 800185a:	2202      	movs	r2, #2
 800185c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800185e:	4b13      	ldr	r3, [pc, #76]	@ (80018ac <MX_SPI1_Init+0x74>)
 8001860:	2201      	movs	r2, #1
 8001862:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001864:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <MX_SPI1_Init+0x74>)
 8001866:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800186a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800186c:	4b0f      	ldr	r3, [pc, #60]	@ (80018ac <MX_SPI1_Init+0x74>)
 800186e:	2238      	movs	r2, #56	@ 0x38
 8001870:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001872:	4b0e      	ldr	r3, [pc, #56]	@ (80018ac <MX_SPI1_Init+0x74>)
 8001874:	2200      	movs	r2, #0
 8001876:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001878:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <MX_SPI1_Init+0x74>)
 800187a:	2200      	movs	r2, #0
 800187c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800187e:	4b0b      	ldr	r3, [pc, #44]	@ (80018ac <MX_SPI1_Init+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001884:	4b09      	ldr	r3, [pc, #36]	@ (80018ac <MX_SPI1_Init+0x74>)
 8001886:	2207      	movs	r2, #7
 8001888:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800188a:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <MX_SPI1_Init+0x74>)
 800188c:	2200      	movs	r2, #0
 800188e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001890:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <MX_SPI1_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001896:	4805      	ldr	r0, [pc, #20]	@ (80018ac <MX_SPI1_Init+0x74>)
 8001898:	f005 fac4 	bl	8006e24 <HAL_SPI_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80018a2:	f7ff ffc2 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000388 	.word	0x20000388
 80018b0:	40013000 	.word	0x40013000

080018b4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80018b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001928 <MX_SPI3_Init+0x74>)
 80018ba:	4a1c      	ldr	r2, [pc, #112]	@ (800192c <MX_SPI3_Init+0x78>)
 80018bc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018be:	4b1a      	ldr	r3, [pc, #104]	@ (8001928 <MX_SPI3_Init+0x74>)
 80018c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018c4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80018c6:	4b18      	ldr	r3, [pc, #96]	@ (8001928 <MX_SPI3_Init+0x74>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80018cc:	4b16      	ldr	r3, [pc, #88]	@ (8001928 <MX_SPI3_Init+0x74>)
 80018ce:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80018d2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018d4:	4b14      	ldr	r3, [pc, #80]	@ (8001928 <MX_SPI3_Init+0x74>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80018da:	4b13      	ldr	r3, [pc, #76]	@ (8001928 <MX_SPI3_Init+0x74>)
 80018dc:	2201      	movs	r2, #1
 80018de:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80018e0:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <MX_SPI3_Init+0x74>)
 80018e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018e6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80018e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001928 <MX_SPI3_Init+0x74>)
 80018ea:	2210      	movs	r2, #16
 80018ec:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <MX_SPI3_Init+0x74>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <MX_SPI3_Init+0x74>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <MX_SPI3_Init+0x74>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001900:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <MX_SPI3_Init+0x74>)
 8001902:	2207      	movs	r2, #7
 8001904:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001906:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <MX_SPI3_Init+0x74>)
 8001908:	2200      	movs	r2, #0
 800190a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <MX_SPI3_Init+0x74>)
 800190e:	2200      	movs	r2, #0
 8001910:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001912:	4805      	ldr	r0, [pc, #20]	@ (8001928 <MX_SPI3_Init+0x74>)
 8001914:	f005 fa86 	bl	8006e24 <HAL_SPI_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800191e:	f7ff ff84 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200003ec 	.word	0x200003ec
 800192c:	40003c00 	.word	0x40003c00

08001930 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08c      	sub	sp, #48	@ 0x30
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a3d      	ldr	r2, [pc, #244]	@ (8001a44 <HAL_SPI_MspInit+0x114>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d129      	bne.n	80019a6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001952:	4b3d      	ldr	r3, [pc, #244]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 8001954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001956:	4a3c      	ldr	r2, [pc, #240]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 8001958:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800195c:	6613      	str	r3, [r2, #96]	@ 0x60
 800195e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 8001960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001962:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001966:	61bb      	str	r3, [r7, #24]
 8001968:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	4b37      	ldr	r3, [pc, #220]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196e:	4a36      	ldr	r2, [pc, #216]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001976:	4b34      	ldr	r3, [pc, #208]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001982:	23e0      	movs	r3, #224	@ 0xe0
 8001984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001992:	2305      	movs	r3, #5
 8001994:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001996:	f107 031c 	add.w	r3, r7, #28
 800199a:	4619      	mov	r1, r3
 800199c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019a0:	f004 f8d4 	bl	8005b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80019a4:	e049      	b.n	8001a3a <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a28      	ldr	r2, [pc, #160]	@ (8001a4c <HAL_SPI_MspInit+0x11c>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d144      	bne.n	8001a3a <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019b0:	4b25      	ldr	r3, [pc, #148]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 80019b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b4:	4a24      	ldr	r2, [pc, #144]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 80019b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80019bc:	4b22      	ldr	r3, [pc, #136]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 80019be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 80019ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019cc:	4a1e      	ldr	r2, [pc, #120]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 80019ce:	f043 0304 	orr.w	r3, r3, #4
 80019d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 80019d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e0:	4b19      	ldr	r3, [pc, #100]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 80019e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e4:	4a18      	ldr	r2, [pc, #96]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 80019e6:	f043 0302 	orr.w	r3, r3, #2
 80019ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ec:	4b16      	ldr	r3, [pc, #88]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 80019ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019f8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80019fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a0a:	2306      	movs	r3, #6
 8001a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	4619      	mov	r1, r3
 8001a14:	480e      	ldr	r0, [pc, #56]	@ (8001a50 <HAL_SPI_MspInit+0x120>)
 8001a16:	f004 f899 	bl	8005b4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a1a:	2320      	movs	r3, #32
 8001a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a2a:	2306      	movs	r3, #6
 8001a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	4619      	mov	r1, r3
 8001a34:	4807      	ldr	r0, [pc, #28]	@ (8001a54 <HAL_SPI_MspInit+0x124>)
 8001a36:	f004 f889 	bl	8005b4c <HAL_GPIO_Init>
}
 8001a3a:	bf00      	nop
 8001a3c:	3730      	adds	r7, #48	@ 0x30
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40013000 	.word	0x40013000
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40003c00 	.word	0x40003c00
 8001a50:	48000800 	.word	0x48000800
 8001a54:	48000400 	.word	0x48000400

08001a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a9c <HAL_MspInit+0x44>)
 8001a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a62:	4a0e      	ldr	r2, [pc, #56]	@ (8001a9c <HAL_MspInit+0x44>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a9c <HAL_MspInit+0x44>)
 8001a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a76:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <HAL_MspInit+0x44>)
 8001a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7a:	4a08      	ldr	r2, [pc, #32]	@ (8001a9c <HAL_MspInit+0x44>)
 8001a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a80:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a82:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <HAL_MspInit+0x44>)
 8001a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a8e:	f004 fa9b 	bl	8005fc8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40021000 	.word	0x40021000

08001aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <NMI_Handler+0x4>

08001aa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <HardFault_Handler+0x4>

08001ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <MemManage_Handler+0x4>

08001ab8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <BusFault_Handler+0x4>

08001ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <UsageFault_Handler+0x4>

08001ac8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af6:	f000 fce5 	bl	80024c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001b04:	4802      	ldr	r0, [pc, #8]	@ (8001b10 <DMA1_Channel1_IRQHandler+0x10>)
 8001b06:	f003 fed2 	bl	80058ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000580 	.word	0x20000580

08001b14 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001b18:	4802      	ldr	r0, [pc, #8]	@ (8001b24 <DMA1_Channel2_IRQHandler+0x10>)
 8001b1a:	f003 fec8 	bl	80058ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200005e0 	.word	0x200005e0

08001b28 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b2c:	4803      	ldr	r0, [pc, #12]	@ (8001b3c <ADC1_2_IRQHandler+0x14>)
 8001b2e:	f001 f99b 	bl	8002e68 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001b32:	4803      	ldr	r0, [pc, #12]	@ (8001b40 <ADC1_2_IRQHandler+0x18>)
 8001b34:	f001 f998 	bl	8002e68 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000298 	.word	0x20000298
 8001b40:	20000304 	.word	0x20000304

08001b44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b48:	4802      	ldr	r0, [pc, #8]	@ (8001b54 <USART3_IRQHandler+0x10>)
 8001b4a:	f007 f92b 	bl	8008da4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200004ec 	.word	0x200004ec

08001b58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return 1;
 8001b5c:	2301      	movs	r3, #1
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <_kill>:

int _kill(int pid, int sig)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b72:	f00c fc59 	bl	800e428 <__errno>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2216      	movs	r2, #22
 8001b7a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <_exit>:

void _exit (int status)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b90:	f04f 31ff 	mov.w	r1, #4294967295
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ffe7 	bl	8001b68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b9a:	bf00      	nop
 8001b9c:	e7fd      	b.n	8001b9a <_exit+0x12>

08001b9e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b086      	sub	sp, #24
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	e00a      	b.n	8001bc6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bb0:	f3af 8000 	nop.w
 8001bb4:	4601      	mov	r1, r0
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	60ba      	str	r2, [r7, #8]
 8001bbc:	b2ca      	uxtb	r2, r1
 8001bbe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	dbf0      	blt.n	8001bb0 <_read+0x12>
  }

  return len;
 8001bce:	687b      	ldr	r3, [r7, #4]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	e009      	b.n	8001bfe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	60ba      	str	r2, [r7, #8]
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	dbf1      	blt.n	8001bea <_write+0x12>
  }
  return len;
 8001c06:	687b      	ldr	r3, [r7, #4]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <_close>:

int _close(int file)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c38:	605a      	str	r2, [r3, #4]
  return 0;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <_isatty>:

int _isatty(int file)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c50:	2301      	movs	r3, #1
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b085      	sub	sp, #20
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c80:	4a14      	ldr	r2, [pc, #80]	@ (8001cd4 <_sbrk+0x5c>)
 8001c82:	4b15      	ldr	r3, [pc, #84]	@ (8001cd8 <_sbrk+0x60>)
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c8c:	4b13      	ldr	r3, [pc, #76]	@ (8001cdc <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c94:	4b11      	ldr	r3, [pc, #68]	@ (8001cdc <_sbrk+0x64>)
 8001c96:	4a12      	ldr	r2, [pc, #72]	@ (8001ce0 <_sbrk+0x68>)
 8001c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c9a:	4b10      	ldr	r3, [pc, #64]	@ (8001cdc <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d207      	bcs.n	8001cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca8:	f00c fbbe 	bl	800e428 <__errno>
 8001cac:	4603      	mov	r3, r0
 8001cae:	220c      	movs	r2, #12
 8001cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb6:	e009      	b.n	8001ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb8:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cbe:	4b07      	ldr	r3, [pc, #28]	@ (8001cdc <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a05      	ldr	r2, [pc, #20]	@ (8001cdc <_sbrk+0x64>)
 8001cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cca:	68fb      	ldr	r3, [r7, #12]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20008000 	.word	0x20008000
 8001cd8:	00000400 	.word	0x00000400
 8001cdc:	20000450 	.word	0x20000450
 8001ce0:	20000ad8 	.word	0x20000ad8

08001ce4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ce8:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <SystemInit+0x20>)
 8001cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cee:	4a05      	ldr	r2, [pc, #20]	@ (8001d04 <SystemInit+0x20>)
 8001cf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b09c      	sub	sp, #112	@ 0x70
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d0e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d28:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
 8001d38:	615a      	str	r2, [r3, #20]
 8001d3a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	2234      	movs	r2, #52	@ 0x34
 8001d40:	2100      	movs	r1, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f00c fb0c 	bl	800e360 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d48:	4b5b      	ldr	r3, [pc, #364]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001d4a:	4a5c      	ldr	r2, [pc, #368]	@ (8001ebc <MX_TIM1_Init+0x1b4>)
 8001d4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8001d4e:	4b5a      	ldr	r3, [pc, #360]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001d54:	4b58      	ldr	r3, [pc, #352]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001d56:	2220      	movs	r2, #32
 8001d58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 8001d5a:	4b57      	ldr	r3, [pc, #348]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001d5c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001d60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001d62:	4b55      	ldr	r3, [pc, #340]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001d64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001d6a:	4b53      	ldr	r3, [pc, #332]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d70:	4b51      	ldr	r3, [pc, #324]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d76:	4850      	ldr	r0, [pc, #320]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001d78:	f005 fc94 	bl	80076a4 <HAL_TIM_Base_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001d82:	f7ff fd52 	bl	800182a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d8a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d8c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d90:	4619      	mov	r1, r3
 8001d92:	4849      	ldr	r0, [pc, #292]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001d94:	f006 f84c 	bl	8007e30 <HAL_TIM_ConfigClockSource>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001d9e:	f7ff fd44 	bl	800182a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001da2:	4845      	ldr	r0, [pc, #276]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001da4:	f005 fd38 	bl	8007818 <HAL_TIM_PWM_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001dae:	f7ff fd3c 	bl	800182a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001db2:	2370      	movs	r3, #112	@ 0x70
 8001db4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001db6:	2300      	movs	r3, #0
 8001db8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dbe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	483c      	ldr	r0, [pc, #240]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001dc6:	f006 fd81 	bl	80088cc <HAL_TIMEx_MasterConfigSynchronization>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001dd0:	f7ff fd2b 	bl	800182a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dd4:	2360      	movs	r3, #96	@ 0x60
 8001dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001de0:	2300      	movs	r3, #0
 8001de2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001de8:	2300      	movs	r3, #0
 8001dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dec:	2300      	movs	r3, #0
 8001dee:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001df0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001df4:	2200      	movs	r2, #0
 8001df6:	4619      	mov	r1, r3
 8001df8:	482f      	ldr	r0, [pc, #188]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001dfa:	f005 ff05 	bl	8007c08 <HAL_TIM_PWM_ConfigChannel>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001e04:	f7ff fd11 	bl	800182a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e08:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4829      	ldr	r0, [pc, #164]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001e12:	f005 fef9 	bl	8007c08 <HAL_TIM_PWM_ConfigChannel>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001e1c:	f7ff fd05 	bl	800182a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e20:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e24:	2208      	movs	r2, #8
 8001e26:	4619      	mov	r1, r3
 8001e28:	4823      	ldr	r0, [pc, #140]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001e2a:	f005 feed 	bl	8007c08 <HAL_TIM_PWM_ConfigChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001e34:	f7ff fcf9 	bl	800182a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001e38:	2370      	movs	r3, #112	@ 0x70
 8001e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 7998;
 8001e3c:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 8001e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e42:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e46:	220c      	movs	r2, #12
 8001e48:	4619      	mov	r1, r3
 8001e4a:	481b      	ldr	r0, [pc, #108]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001e4c:	f005 fedc 	bl	8007c08 <HAL_TIM_PWM_ConfigChannel>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8001e56:	f7ff fce8 	bl	800182a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001e6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e74:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 2;
 8001e76:	2302      	movs	r3, #2
 8001e78:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e86:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	4619      	mov	r1, r3
 8001e98:	4807      	ldr	r0, [pc, #28]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001e9a:	f006 fd99 	bl	80089d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM1_Init+0x1a0>
  {
    Error_Handler();
 8001ea4:	f7ff fcc1 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ea8:	4803      	ldr	r0, [pc, #12]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001eaa:	f000 f917 	bl	80020dc <HAL_TIM_MspPostInit>

}
 8001eae:	bf00      	nop
 8001eb0:	3770      	adds	r7, #112	@ 0x70
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000454 	.word	0x20000454
 8001ebc:	40012c00 	.word	0x40012c00

08001ec0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b09c      	sub	sp, #112	@ 0x70
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ec6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ee0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
 8001ef0:	615a      	str	r2, [r3, #20]
 8001ef2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	2234      	movs	r2, #52	@ 0x34
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f00c fa30 	bl	800e360 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f00:	4b5a      	ldr	r3, [pc, #360]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001f02:	4a5b      	ldr	r2, [pc, #364]	@ (8002070 <MX_TIM8_Init+0x1b0>)
 8001f04:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001f06:	4b59      	ldr	r3, [pc, #356]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001f0c:	4b57      	ldr	r3, [pc, #348]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001f0e:	2220      	movs	r2, #32
 8001f10:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7999;
 8001f12:	4b56      	ldr	r3, [pc, #344]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001f14:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001f18:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001f1a:	4b54      	ldr	r3, [pc, #336]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001f1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f20:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 1;
 8001f22:	4b52      	ldr	r3, [pc, #328]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f28:	4b50      	ldr	r3, [pc, #320]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001f2e:	484f      	ldr	r0, [pc, #316]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001f30:	f005 fbb8 	bl	80076a4 <HAL_TIM_Base_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8001f3a:	f7ff fc76 	bl	800182a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f42:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001f44:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4848      	ldr	r0, [pc, #288]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001f4c:	f005 ff70 	bl	8007e30 <HAL_TIM_ConfigClockSource>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001f56:	f7ff fc68 	bl	800182a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001f5a:	4844      	ldr	r0, [pc, #272]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001f5c:	f005 fc5c 	bl	8007818 <HAL_TIM_PWM_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001f66:	f7ff fc60 	bl	800182a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001f6a:	2370      	movs	r3, #112	@ 0x70
 8001f6c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f76:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	483b      	ldr	r0, [pc, #236]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001f7e:	f006 fca5 	bl	80088cc <HAL_TIMEx_MasterConfigSynchronization>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8001f88:	f7ff fc4f 	bl	800182a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f8c:	2360      	movs	r3, #96	@ 0x60
 8001f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f94:	2300      	movs	r3, #0
 8001f96:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fa8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001fac:	2200      	movs	r2, #0
 8001fae:	4619      	mov	r1, r3
 8001fb0:	482e      	ldr	r0, [pc, #184]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001fb2:	f005 fe29 	bl	8007c08 <HAL_TIM_PWM_ConfigChannel>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001fbc:	f7ff fc35 	bl	800182a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fc0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4828      	ldr	r0, [pc, #160]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001fca:	f005 fe1d 	bl	8007c08 <HAL_TIM_PWM_ConfigChannel>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8001fd4:	f7ff fc29 	bl	800182a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fd8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001fdc:	2208      	movs	r2, #8
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4822      	ldr	r0, [pc, #136]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001fe2:	f005 fe11 	bl	8007c08 <HAL_TIM_PWM_ConfigChannel>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001fec:	f7ff fc1d 	bl	800182a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001ff0:	2370      	movs	r3, #112	@ 0x70
 8001ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 7998;
 8001ff4:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 8001ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ffa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ffe:	220c      	movs	r2, #12
 8002000:	4619      	mov	r1, r3
 8002002:	481a      	ldr	r0, [pc, #104]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8002004:	f005 fe00 	bl	8007c08 <HAL_TIM_PWM_ConfigChannel>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_TIM8_Init+0x152>
  {
    Error_Handler();
 800200e:	f7ff fc0c 	bl	800182a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002016:	2300      	movs	r3, #0
 8002018:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002026:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800202a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002030:	2300      	movs	r3, #0
 8002032:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002038:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800203c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002042:	2300      	movs	r3, #0
 8002044:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002046:	2300      	movs	r3, #0
 8002048:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	4619      	mov	r1, r3
 800204e:	4807      	ldr	r0, [pc, #28]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8002050:	f006 fcbe 	bl	80089d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM8_Init+0x19e>
  {
    Error_Handler();
 800205a:	f7ff fbe6 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800205e:	4803      	ldr	r0, [pc, #12]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8002060:	f000 f83c 	bl	80020dc <HAL_TIM_MspPostInit>

}
 8002064:	bf00      	nop
 8002066:	3770      	adds	r7, #112	@ 0x70
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	200004a0 	.word	0x200004a0
 8002070:	40013400 	.word	0x40013400

08002074 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a13      	ldr	r2, [pc, #76]	@ (80020d0 <HAL_TIM_Base_MspInit+0x5c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d10c      	bne.n	80020a0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002086:	4b13      	ldr	r3, [pc, #76]	@ (80020d4 <HAL_TIM_Base_MspInit+0x60>)
 8002088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800208a:	4a12      	ldr	r2, [pc, #72]	@ (80020d4 <HAL_TIM_Base_MspInit+0x60>)
 800208c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002090:	6613      	str	r3, [r2, #96]	@ 0x60
 8002092:	4b10      	ldr	r3, [pc, #64]	@ (80020d4 <HAL_TIM_Base_MspInit+0x60>)
 8002094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002096:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800209e:	e010      	b.n	80020c2 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM8)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a0c      	ldr	r2, [pc, #48]	@ (80020d8 <HAL_TIM_Base_MspInit+0x64>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d10b      	bne.n	80020c2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80020aa:	4b0a      	ldr	r3, [pc, #40]	@ (80020d4 <HAL_TIM_Base_MspInit+0x60>)
 80020ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ae:	4a09      	ldr	r2, [pc, #36]	@ (80020d4 <HAL_TIM_Base_MspInit+0x60>)
 80020b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80020b6:	4b07      	ldr	r3, [pc, #28]	@ (80020d4 <HAL_TIM_Base_MspInit+0x60>)
 80020b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	68bb      	ldr	r3, [r7, #8]
}
 80020c2:	bf00      	nop
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40012c00 	.word	0x40012c00
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40013400 	.word	0x40013400

080020dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	@ 0x28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a2b      	ldr	r2, [pc, #172]	@ (80021a8 <HAL_TIM_MspPostInit+0xcc>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d11e      	bne.n	800213c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fe:	4b2b      	ldr	r3, [pc, #172]	@ (80021ac <HAL_TIM_MspPostInit+0xd0>)
 8002100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002102:	4a2a      	ldr	r2, [pc, #168]	@ (80021ac <HAL_TIM_MspPostInit+0xd0>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800210a:	4b28      	ldr	r3, [pc, #160]	@ (80021ac <HAL_TIM_MspPostInit+0xd0>)
 800210c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002116:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800211a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002124:	2300      	movs	r3, #0
 8002126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002128:	2306      	movs	r3, #6
 800212a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	4619      	mov	r1, r3
 8002132:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002136:	f003 fd09 	bl	8005b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800213a:	e031      	b.n	80021a0 <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM8)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a1b      	ldr	r2, [pc, #108]	@ (80021b0 <HAL_TIM_MspPostInit+0xd4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d12c      	bne.n	80021a0 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002146:	4b19      	ldr	r3, [pc, #100]	@ (80021ac <HAL_TIM_MspPostInit+0xd0>)
 8002148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800214a:	4a18      	ldr	r2, [pc, #96]	@ (80021ac <HAL_TIM_MspPostInit+0xd0>)
 800214c:	f043 0302 	orr.w	r3, r3, #2
 8002150:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002152:	4b16      	ldr	r3, [pc, #88]	@ (80021ac <HAL_TIM_MspPostInit+0xd0>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800215e:	2340      	movs	r3, #64	@ 0x40
 8002160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216a:	2300      	movs	r3, #0
 800216c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 800216e:	2305      	movs	r3, #5
 8002170:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002172:	f107 0314 	add.w	r3, r7, #20
 8002176:	4619      	mov	r1, r3
 8002178:	480e      	ldr	r0, [pc, #56]	@ (80021b4 <HAL_TIM_MspPostInit+0xd8>)
 800217a:	f003 fce7 	bl	8005b4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800217e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002184:	2302      	movs	r3, #2
 8002186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218c:	2300      	movs	r3, #0
 800218e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8002190:	230a      	movs	r3, #10
 8002192:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	4619      	mov	r1, r3
 800219a:	4806      	ldr	r0, [pc, #24]	@ (80021b4 <HAL_TIM_MspPostInit+0xd8>)
 800219c:	f003 fcd6 	bl	8005b4c <HAL_GPIO_Init>
}
 80021a0:	bf00      	nop
 80021a2:	3728      	adds	r7, #40	@ 0x28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40012c00 	.word	0x40012c00
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40013400 	.word	0x40013400
 80021b4:	48000400 	.word	0x48000400

080021b8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021bc:	4b22      	ldr	r3, [pc, #136]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 80021be:	4a23      	ldr	r2, [pc, #140]	@ (800224c <MX_USART3_UART_Init+0x94>)
 80021c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 80021c2:	4b21      	ldr	r3, [pc, #132]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 80021c4:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80021c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 80021d8:	2200      	movs	r2, #0
 80021da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 80021de:	220c      	movs	r2, #12
 80021e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021e2:	4b19      	ldr	r3, [pc, #100]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021e8:	4b17      	ldr	r3, [pc, #92]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021ee:	4b16      	ldr	r3, [pc, #88]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021f4:	4b14      	ldr	r3, [pc, #80]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021fa:	4b13      	ldr	r3, [pc, #76]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002200:	4811      	ldr	r0, [pc, #68]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 8002202:	f006 fc71 	bl	8008ae8 <HAL_UART_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800220c:	f7ff fb0d 	bl	800182a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002210:	2100      	movs	r1, #0
 8002212:	480d      	ldr	r0, [pc, #52]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 8002214:	f008 f8ed 	bl	800a3f2 <HAL_UARTEx_SetTxFifoThreshold>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800221e:	f7ff fb04 	bl	800182a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002222:	2100      	movs	r1, #0
 8002224:	4808      	ldr	r0, [pc, #32]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 8002226:	f008 f922 	bl	800a46e <HAL_UARTEx_SetRxFifoThreshold>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002230:	f7ff fafb 	bl	800182a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002234:	4804      	ldr	r0, [pc, #16]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 8002236:	f008 f8a3 	bl	800a380 <HAL_UARTEx_DisableFifoMode>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002240:	f7ff faf3 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002244:	bf00      	nop
 8002246:	bd80      	pop	{r7, pc}
 8002248:	200004ec 	.word	0x200004ec
 800224c:	40004800 	.word	0x40004800

08002250 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b09a      	sub	sp, #104	@ 0x68
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002258:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002268:	f107 0310 	add.w	r3, r7, #16
 800226c:	2244      	movs	r2, #68	@ 0x44
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f00c f875 	bl	800e360 <memset>
  if(uartHandle->Instance==USART3)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a4d      	ldr	r2, [pc, #308]	@ (80023b0 <HAL_UART_MspInit+0x160>)
 800227c:	4293      	cmp	r3, r2
 800227e:	f040 8092 	bne.w	80023a6 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002282:	2304      	movs	r3, #4
 8002284:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800228a:	f107 0310 	add.w	r3, r7, #16
 800228e:	4618      	mov	r0, r3
 8002290:	f004 fbd8 	bl	8006a44 <HAL_RCCEx_PeriphCLKConfig>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800229a:	f7ff fac6 	bl	800182a <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800229e:	4b45      	ldr	r3, [pc, #276]	@ (80023b4 <HAL_UART_MspInit+0x164>)
 80022a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a2:	4a44      	ldr	r2, [pc, #272]	@ (80023b4 <HAL_UART_MspInit+0x164>)
 80022a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80022aa:	4b42      	ldr	r3, [pc, #264]	@ (80023b4 <HAL_UART_MspInit+0x164>)
 80022ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b6:	4b3f      	ldr	r3, [pc, #252]	@ (80023b4 <HAL_UART_MspInit+0x164>)
 80022b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ba:	4a3e      	ldr	r2, [pc, #248]	@ (80023b4 <HAL_UART_MspInit+0x164>)
 80022bc:	f043 0302 	orr.w	r3, r3, #2
 80022c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022c2:	4b3c      	ldr	r3, [pc, #240]	@ (80023b4 <HAL_UART_MspInit+0x164>)
 80022c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022ce:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80022d2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	2302      	movs	r3, #2
 80022d6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022dc:	2300      	movs	r3, #0
 80022de:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022e0:	2307      	movs	r3, #7
 80022e2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022e8:	4619      	mov	r1, r3
 80022ea:	4833      	ldr	r0, [pc, #204]	@ (80023b8 <HAL_UART_MspInit+0x168>)
 80022ec:	f003 fc2e 	bl	8005b4c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel1;
 80022f0:	4b32      	ldr	r3, [pc, #200]	@ (80023bc <HAL_UART_MspInit+0x16c>)
 80022f2:	4a33      	ldr	r2, [pc, #204]	@ (80023c0 <HAL_UART_MspInit+0x170>)
 80022f4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80022f6:	4b31      	ldr	r3, [pc, #196]	@ (80023bc <HAL_UART_MspInit+0x16c>)
 80022f8:	221d      	movs	r2, #29
 80022fa:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022fc:	4b2f      	ldr	r3, [pc, #188]	@ (80023bc <HAL_UART_MspInit+0x16c>)
 80022fe:	2210      	movs	r2, #16
 8002300:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002302:	4b2e      	ldr	r3, [pc, #184]	@ (80023bc <HAL_UART_MspInit+0x16c>)
 8002304:	2200      	movs	r2, #0
 8002306:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002308:	4b2c      	ldr	r3, [pc, #176]	@ (80023bc <HAL_UART_MspInit+0x16c>)
 800230a:	2280      	movs	r2, #128	@ 0x80
 800230c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800230e:	4b2b      	ldr	r3, [pc, #172]	@ (80023bc <HAL_UART_MspInit+0x16c>)
 8002310:	2200      	movs	r2, #0
 8002312:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002314:	4b29      	ldr	r3, [pc, #164]	@ (80023bc <HAL_UART_MspInit+0x16c>)
 8002316:	2200      	movs	r2, #0
 8002318:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800231a:	4b28      	ldr	r3, [pc, #160]	@ (80023bc <HAL_UART_MspInit+0x16c>)
 800231c:	2200      	movs	r2, #0
 800231e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002320:	4b26      	ldr	r3, [pc, #152]	@ (80023bc <HAL_UART_MspInit+0x16c>)
 8002322:	2200      	movs	r2, #0
 8002324:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002326:	4825      	ldr	r0, [pc, #148]	@ (80023bc <HAL_UART_MspInit+0x16c>)
 8002328:	f003 f8de 	bl	80054e8 <HAL_DMA_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002332:	f7ff fa7a 	bl	800182a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a20      	ldr	r2, [pc, #128]	@ (80023bc <HAL_UART_MspInit+0x16c>)
 800233a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800233c:	4a1f      	ldr	r2, [pc, #124]	@ (80023bc <HAL_UART_MspInit+0x16c>)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel2;
 8002342:	4b20      	ldr	r3, [pc, #128]	@ (80023c4 <HAL_UART_MspInit+0x174>)
 8002344:	4a20      	ldr	r2, [pc, #128]	@ (80023c8 <HAL_UART_MspInit+0x178>)
 8002346:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002348:	4b1e      	ldr	r3, [pc, #120]	@ (80023c4 <HAL_UART_MspInit+0x174>)
 800234a:	221c      	movs	r2, #28
 800234c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800234e:	4b1d      	ldr	r3, [pc, #116]	@ (80023c4 <HAL_UART_MspInit+0x174>)
 8002350:	2200      	movs	r2, #0
 8002352:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002354:	4b1b      	ldr	r3, [pc, #108]	@ (80023c4 <HAL_UART_MspInit+0x174>)
 8002356:	2200      	movs	r2, #0
 8002358:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800235a:	4b1a      	ldr	r3, [pc, #104]	@ (80023c4 <HAL_UART_MspInit+0x174>)
 800235c:	2280      	movs	r2, #128	@ 0x80
 800235e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002360:	4b18      	ldr	r3, [pc, #96]	@ (80023c4 <HAL_UART_MspInit+0x174>)
 8002362:	2200      	movs	r2, #0
 8002364:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002366:	4b17      	ldr	r3, [pc, #92]	@ (80023c4 <HAL_UART_MspInit+0x174>)
 8002368:	2200      	movs	r2, #0
 800236a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800236c:	4b15      	ldr	r3, [pc, #84]	@ (80023c4 <HAL_UART_MspInit+0x174>)
 800236e:	2200      	movs	r2, #0
 8002370:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002372:	4b14      	ldr	r3, [pc, #80]	@ (80023c4 <HAL_UART_MspInit+0x174>)
 8002374:	2200      	movs	r2, #0
 8002376:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002378:	4812      	ldr	r0, [pc, #72]	@ (80023c4 <HAL_UART_MspInit+0x174>)
 800237a:	f003 f8b5 	bl	80054e8 <HAL_DMA_Init>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8002384:	f7ff fa51 	bl	800182a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a0e      	ldr	r2, [pc, #56]	@ (80023c4 <HAL_UART_MspInit+0x174>)
 800238c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002390:	4a0c      	ldr	r2, [pc, #48]	@ (80023c4 <HAL_UART_MspInit+0x174>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8002396:	2200      	movs	r2, #0
 8002398:	2101      	movs	r1, #1
 800239a:	2027      	movs	r0, #39	@ 0x27
 800239c:	f002 fe95 	bl	80050ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80023a0:	2027      	movs	r0, #39	@ 0x27
 80023a2:	f002 feac 	bl	80050fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80023a6:	bf00      	nop
 80023a8:	3768      	adds	r7, #104	@ 0x68
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40004800 	.word	0x40004800
 80023b4:	40021000 	.word	0x40021000
 80023b8:	48000400 	.word	0x48000400
 80023bc:	20000580 	.word	0x20000580
 80023c0:	40020008 	.word	0x40020008
 80023c4:	200005e0 	.word	0x200005e0
 80023c8:	4002001c 	.word	0x4002001c

080023cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023cc:	480d      	ldr	r0, [pc, #52]	@ (8002404 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023ce:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80023d0:	f7ff fc88 	bl	8001ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023d4:	480c      	ldr	r0, [pc, #48]	@ (8002408 <LoopForever+0x6>)
  ldr r1, =_edata
 80023d6:	490d      	ldr	r1, [pc, #52]	@ (800240c <LoopForever+0xa>)
  ldr r2, =_sidata
 80023d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002410 <LoopForever+0xe>)
  movs r3, #0
 80023da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80023dc:	e002      	b.n	80023e4 <LoopCopyDataInit>

080023de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e2:	3304      	adds	r3, #4

080023e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e8:	d3f9      	bcc.n	80023de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002418 <LoopForever+0x16>)
  movs r3, #0
 80023ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f0:	e001      	b.n	80023f6 <LoopFillZerobss>

080023f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f4:	3204      	adds	r2, #4

080023f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f8:	d3fb      	bcc.n	80023f2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80023fa:	f00c f81b 	bl	800e434 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023fe:	f7ff f95b 	bl	80016b8 <main>

08002402 <LoopForever>:

LoopForever:
    b LoopForever
 8002402:	e7fe      	b.n	8002402 <LoopForever>
  ldr   r0, =_estack
 8002404:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800240c:	2000027c 	.word	0x2000027c
  ldr r2, =_sidata
 8002410:	08011740 	.word	0x08011740
  ldr r2, =_sbss
 8002414:	2000027c 	.word	0x2000027c
  ldr r4, =_ebss
 8002418:	20000ad4 	.word	0x20000ad4

0800241c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800241c:	e7fe      	b.n	800241c <COMP1_2_3_IRQHandler>

0800241e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002428:	2003      	movs	r0, #3
 800242a:	f002 fe43 	bl	80050b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800242e:	200f      	movs	r0, #15
 8002430:	f000 f80e 	bl	8002450 <HAL_InitTick>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	71fb      	strb	r3, [r7, #7]
 800243e:	e001      	b.n	8002444 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002440:	f7ff fb0a 	bl	8001a58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002444:	79fb      	ldrb	r3, [r7, #7]

}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800245c:	4b16      	ldr	r3, [pc, #88]	@ (80024b8 <HAL_InitTick+0x68>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d022      	beq.n	80024aa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002464:	4b15      	ldr	r3, [pc, #84]	@ (80024bc <HAL_InitTick+0x6c>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b13      	ldr	r3, [pc, #76]	@ (80024b8 <HAL_InitTick+0x68>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002470:	fbb1 f3f3 	udiv	r3, r1, r3
 8002474:	fbb2 f3f3 	udiv	r3, r2, r3
 8002478:	4618      	mov	r0, r3
 800247a:	f002 fe4e 	bl	800511a <HAL_SYSTICK_Config>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10f      	bne.n	80024a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b0f      	cmp	r3, #15
 8002488:	d809      	bhi.n	800249e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800248a:	2200      	movs	r2, #0
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	f04f 30ff 	mov.w	r0, #4294967295
 8002492:	f002 fe1a 	bl	80050ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002496:	4a0a      	ldr	r2, [pc, #40]	@ (80024c0 <HAL_InitTick+0x70>)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	e007      	b.n	80024ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	73fb      	strb	r3, [r7, #15]
 80024a2:	e004      	b.n	80024ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
 80024a8:	e001      	b.n	80024ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000008 	.word	0x20000008
 80024bc:	20000000 	.word	0x20000000
 80024c0:	20000004 	.word	0x20000004

080024c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024c8:	4b05      	ldr	r3, [pc, #20]	@ (80024e0 <HAL_IncTick+0x1c>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4b05      	ldr	r3, [pc, #20]	@ (80024e4 <HAL_IncTick+0x20>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4413      	add	r3, r2
 80024d2:	4a03      	ldr	r2, [pc, #12]	@ (80024e0 <HAL_IncTick+0x1c>)
 80024d4:	6013      	str	r3, [r2, #0]
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	20000640 	.word	0x20000640
 80024e4:	20000008 	.word	0x20000008

080024e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  return uwTick;
 80024ec:	4b03      	ldr	r3, [pc, #12]	@ (80024fc <HAL_GetTick+0x14>)
 80024ee:	681b      	ldr	r3, [r3, #0]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	20000640 	.word	0x20000640

08002500 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	609a      	str	r2, [r3, #8]
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	609a      	str	r2, [r3, #8]
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	3360      	adds	r3, #96	@ 0x60
 800257a:	461a      	mov	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b08      	ldr	r3, [pc, #32]	@ (80025ac <LL_ADC_SetOffset+0x44>)
 800258a:	4013      	ands	r3, r2
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	4313      	orrs	r3, r2
 8002598:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025a0:	bf00      	nop
 80025a2:	371c      	adds	r7, #28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	03fff000 	.word	0x03fff000

080025b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3360      	adds	r3, #96	@ 0x60
 80025be:	461a      	mov	r2, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3360      	adds	r3, #96	@ 0x60
 80025ec:	461a      	mov	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	431a      	orrs	r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002606:	bf00      	nop
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002612:	b480      	push	{r7}
 8002614:	b087      	sub	sp, #28
 8002616:	af00      	add	r7, sp, #0
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	3360      	adds	r3, #96	@ 0x60
 8002622:	461a      	mov	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	431a      	orrs	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800263c:	bf00      	nop
 800263e:	371c      	adds	r7, #28
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002648:	b480      	push	{r7}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3360      	adds	r3, #96	@ 0x60
 8002658:	461a      	mov	r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	431a      	orrs	r2, r3
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002672:	bf00      	nop
 8002674:	371c      	adds	r7, #28
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	615a      	str	r2, [r3, #20]
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b087      	sub	sp, #28
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	3330      	adds	r3, #48	@ 0x30
 80026da:	461a      	mov	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	0a1b      	lsrs	r3, r3, #8
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	f003 030c 	and.w	r3, r3, #12
 80026e6:	4413      	add	r3, r2
 80026e8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	211f      	movs	r1, #31
 80026f6:	fa01 f303 	lsl.w	r3, r1, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	401a      	ands	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	0e9b      	lsrs	r3, r3, #26
 8002702:	f003 011f 	and.w	r1, r3, #31
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	fa01 f303 	lsl.w	r3, r1, r3
 8002710:	431a      	orrs	r2, r3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002716:	bf00      	nop
 8002718:	371c      	adds	r7, #28
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002748:	b480      	push	{r7}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3314      	adds	r3, #20
 8002758:	461a      	mov	r2, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	0e5b      	lsrs	r3, r3, #25
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	4413      	add	r3, r2
 8002766:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	0d1b      	lsrs	r3, r3, #20
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	2107      	movs	r1, #7
 8002776:	fa01 f303 	lsl.w	r3, r1, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	401a      	ands	r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	0d1b      	lsrs	r3, r3, #20
 8002782:	f003 031f 	and.w	r3, r3, #31
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	fa01 f303 	lsl.w	r3, r1, r3
 800278c:	431a      	orrs	r2, r3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002792:	bf00      	nop
 8002794:	371c      	adds	r7, #28
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b8:	43db      	mvns	r3, r3
 80027ba:	401a      	ands	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f003 0318 	and.w	r3, r3, #24
 80027c2:	4908      	ldr	r1, [pc, #32]	@ (80027e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80027c4:	40d9      	lsrs	r1, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	400b      	ands	r3, r1
 80027ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ce:	431a      	orrs	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	0007ffff 	.word	0x0007ffff

080027e8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 031f 	and.w	r3, r3, #31
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002830:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6093      	str	r3, [r2, #8]
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002854:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002858:	d101      	bne.n	800285e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800287c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002880:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028a8:	d101      	bne.n	80028ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028d0:	f043 0201 	orr.w	r2, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028f8:	f043 0202 	orr.w	r2, r3, #2
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <LL_ADC_IsEnabled+0x18>
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <LL_ADC_IsEnabled+0x1a>
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b02      	cmp	r3, #2
 8002944:	d101      	bne.n	800294a <LL_ADC_IsDisableOngoing+0x18>
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <LL_ADC_IsDisableOngoing+0x1a>
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002968:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800296c:	f043 0204 	orr.w	r2, r3, #4
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b04      	cmp	r3, #4
 8002992:	d101      	bne.n	8002998 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d101      	bne.n	80029be <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029cc:	b590      	push	{r4, r7, lr}
 80029ce:	b089      	sub	sp, #36	@ 0x24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029d4:	2300      	movs	r3, #0
 80029d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80029d8:	2300      	movs	r3, #0
 80029da:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e167      	b.n	8002cb6 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d109      	bne.n	8002a08 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7fe fc57 	bl	80012a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ff19 	bl	8002844 <LL_ADC_IsDeepPowerDownEnabled>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d004      	beq.n	8002a22 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff feff 	bl	8002820 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff ff34 	bl	8002894 <LL_ADC_IsInternalRegulatorEnabled>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d115      	bne.n	8002a5e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff ff18 	bl	800286c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a3c:	4ba0      	ldr	r3, [pc, #640]	@ (8002cc0 <HAL_ADC_Init+0x2f4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	099b      	lsrs	r3, r3, #6
 8002a42:	4aa0      	ldr	r2, [pc, #640]	@ (8002cc4 <HAL_ADC_Init+0x2f8>)
 8002a44:	fba2 2303 	umull	r2, r3, r2, r3
 8002a48:	099b      	lsrs	r3, r3, #6
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a50:	e002      	b.n	8002a58 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	3b01      	subs	r3, #1
 8002a56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f9      	bne.n	8002a52 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff ff16 	bl	8002894 <LL_ADC_IsInternalRegulatorEnabled>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10d      	bne.n	8002a8a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a72:	f043 0210 	orr.w	r2, r3, #16
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a7e:	f043 0201 	orr.w	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff ff76 	bl	8002980 <LL_ADC_REG_IsConversionOngoing>
 8002a94:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a9a:	f003 0310 	and.w	r3, r3, #16
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f040 8100 	bne.w	8002ca4 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f040 80fc 	bne.w	8002ca4 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002ab4:	f043 0202 	orr.w	r2, r3, #2
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff ff23 	bl	800290c <LL_ADC_IsEnabled>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d111      	bne.n	8002af0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002acc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002ad0:	f7ff ff1c 	bl	800290c <LL_ADC_IsEnabled>
 8002ad4:	4604      	mov	r4, r0
 8002ad6:	487c      	ldr	r0, [pc, #496]	@ (8002cc8 <HAL_ADC_Init+0x2fc>)
 8002ad8:	f7ff ff18 	bl	800290c <LL_ADC_IsEnabled>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4323      	orrs	r3, r4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d105      	bne.n	8002af0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4878      	ldr	r0, [pc, #480]	@ (8002ccc <HAL_ADC_Init+0x300>)
 8002aec:	f7ff fd08 	bl	8002500 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	7f5b      	ldrb	r3, [r3, #29]
 8002af4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002afa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002b00:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002b06:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b0e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d106      	bne.n	8002b2c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b22:	3b01      	subs	r3, #1
 8002b24:	045b      	lsls	r3, r3, #17
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d009      	beq.n	8002b48 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b38:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b40:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	4b60      	ldr	r3, [pc, #384]	@ (8002cd0 <HAL_ADC_Init+0x304>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6812      	ldr	r2, [r2, #0]
 8002b56:	69b9      	ldr	r1, [r7, #24]
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff ff15 	bl	80029a6 <LL_ADC_INJ_IsConversionOngoing>
 8002b7c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d16d      	bne.n	8002c60 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d16a      	bne.n	8002c60 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b8e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b96:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ba6:	f023 0302 	bic.w	r3, r3, #2
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6812      	ldr	r2, [r2, #0]
 8002bae:	69b9      	ldr	r1, [r7, #24]
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d017      	beq.n	8002bec <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691a      	ldr	r2, [r3, #16]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002bca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002bd4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002bd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6911      	ldr	r1, [r2, #16]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	430b      	orrs	r3, r1
 8002be6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002bea:	e013      	b.n	8002c14 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691a      	ldr	r2, [r3, #16]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002bfa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002c0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c10:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d118      	bne.n	8002c50 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002c28:	f023 0304 	bic.w	r3, r3, #4
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c34:	4311      	orrs	r1, r2
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002c3a:	4311      	orrs	r1, r2
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c40:	430a      	orrs	r2, r1
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 0201 	orr.w	r2, r2, #1
 8002c4c:	611a      	str	r2, [r3, #16]
 8002c4e:	e007      	b.n	8002c60 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691a      	ldr	r2, [r3, #16]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0201 	bic.w	r2, r2, #1
 8002c5e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d10c      	bne.n	8002c82 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6e:	f023 010f 	bic.w	r1, r3, #15
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	1e5a      	subs	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c80:	e007      	b.n	8002c92 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 020f 	bic.w	r2, r2, #15
 8002c90:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c96:	f023 0303 	bic.w	r3, r3, #3
 8002c9a:	f043 0201 	orr.w	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ca2:	e007      	b.n	8002cb4 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca8:	f043 0210 	orr.w	r2, r3, #16
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3724      	adds	r7, #36	@ 0x24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd90      	pop	{r4, r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000000 	.word	0x20000000
 8002cc4:	053e2d63 	.word	0x053e2d63
 8002cc8:	50000100 	.word	0x50000100
 8002ccc:	50000300 	.word	0x50000300
 8002cd0:	fff04007 	.word	0xfff04007

08002cd4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cdc:	4859      	ldr	r0, [pc, #356]	@ (8002e44 <HAL_ADC_Start+0x170>)
 8002cde:	f7ff fd83 	bl	80027e8 <LL_ADC_GetMultimode>
 8002ce2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fe49 	bl	8002980 <LL_ADC_REG_IsConversionOngoing>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f040 809f 	bne.w	8002e34 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_ADC_Start+0x30>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e09a      	b.n	8002e3a <HAL_ADC_Start+0x166>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 fed3 	bl	8003ab8 <ADC_Enable>
 8002d12:	4603      	mov	r3, r0
 8002d14:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002d16:	7dfb      	ldrb	r3, [r7, #23]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f040 8086 	bne.w	8002e2a <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d22:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002d26:	f023 0301 	bic.w	r3, r3, #1
 8002d2a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a44      	ldr	r2, [pc, #272]	@ (8002e48 <HAL_ADC_Start+0x174>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d002      	beq.n	8002d42 <HAL_ADC_Start+0x6e>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	e001      	b.n	8002d46 <HAL_ADC_Start+0x72>
 8002d42:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6812      	ldr	r2, [r2, #0]
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d002      	beq.n	8002d54 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d105      	bne.n	8002d60 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d58:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d6c:	d106      	bne.n	8002d7c <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d72:	f023 0206 	bic.w	r2, r3, #6
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	661a      	str	r2, [r3, #96]	@ 0x60
 8002d7a:	e002      	b.n	8002d82 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	221c      	movs	r2, #28
 8002d88:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a2c      	ldr	r2, [pc, #176]	@ (8002e48 <HAL_ADC_Start+0x174>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d002      	beq.n	8002da2 <HAL_ADC_Start+0xce>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	e001      	b.n	8002da6 <HAL_ADC_Start+0xd2>
 8002da2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6812      	ldr	r2, [r2, #0]
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d008      	beq.n	8002dc0 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	2b05      	cmp	r3, #5
 8002db8:	d002      	beq.n	8002dc0 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	2b09      	cmp	r3, #9
 8002dbe:	d114      	bne.n	8002dea <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d007      	beq.n	8002dde <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002dd6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff fdb8 	bl	8002958 <LL_ADC_REG_StartConversion>
 8002de8:	e026      	b.n	8002e38 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a13      	ldr	r2, [pc, #76]	@ (8002e48 <HAL_ADC_Start+0x174>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d002      	beq.n	8002e06 <HAL_ADC_Start+0x132>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	e001      	b.n	8002e0a <HAL_ADC_Start+0x136>
 8002e06:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e0a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00f      	beq.n	8002e38 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e1c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e20:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e28:	e006      	b.n	8002e38 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002e32:	e001      	b.n	8002e38 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e34:	2302      	movs	r3, #2
 8002e36:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	50000300 	.word	0x50000300
 8002e48:	50000100 	.word	0x50000100

08002e4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
	...

08002e68 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08a      	sub	sp, #40	@ 0x28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002e70:	2300      	movs	r3, #0
 8002e72:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e84:	4883      	ldr	r0, [pc, #524]	@ (8003094 <HAL_ADC_IRQHandler+0x22c>)
 8002e86:	f7ff fcaf 	bl	80027e8 <LL_ADC_GetMultimode>
 8002e8a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d017      	beq.n	8002ec6 <HAL_ADC_IRQHandler+0x5e>
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d012      	beq.n	8002ec6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d105      	bne.n	8002eb8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb0:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f001 fa9d 	bl	80043f8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d004      	beq.n	8002eda <HAL_ADC_IRQHandler+0x72>
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10a      	bne.n	8002ef0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 8085 	beq.w	8002ff0 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d07f      	beq.n	8002ff0 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef4:	f003 0310 	and.w	r3, r3, #16
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d105      	bne.n	8002f08 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f00:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff fbc9 	bl	80026a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d064      	beq.n	8002fe2 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a5e      	ldr	r2, [pc, #376]	@ (8003098 <HAL_ADC_IRQHandler+0x230>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d002      	beq.n	8002f28 <HAL_ADC_IRQHandler+0xc0>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	e001      	b.n	8002f2c <HAL_ADC_IRQHandler+0xc4>
 8002f28:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d008      	beq.n	8002f46 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b05      	cmp	r3, #5
 8002f3e:	d002      	beq.n	8002f46 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2b09      	cmp	r3, #9
 8002f44:	d104      	bne.n	8002f50 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	623b      	str	r3, [r7, #32]
 8002f4e:	e00d      	b.n	8002f6c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a50      	ldr	r2, [pc, #320]	@ (8003098 <HAL_ADC_IRQHandler+0x230>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d002      	beq.n	8002f60 <HAL_ADC_IRQHandler+0xf8>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	e001      	b.n	8002f64 <HAL_ADC_IRQHandler+0xfc>
 8002f60:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f64:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d135      	bne.n	8002fe2 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d12e      	bne.n	8002fe2 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff fcf9 	bl	8002980 <LL_ADC_REG_IsConversionOngoing>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d11a      	bne.n	8002fca <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 020c 	bic.w	r2, r2, #12
 8002fa2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d112      	bne.n	8002fe2 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc0:	f043 0201 	orr.w	r2, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fc8:	e00b      	b.n	8002fe2 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fce:	f043 0210 	orr.w	r2, r3, #16
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fda:	f043 0201 	orr.w	r2, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f95a 	bl	800329c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	220c      	movs	r2, #12
 8002fee:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f003 0320 	and.w	r3, r3, #32
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d004      	beq.n	8003004 <HAL_ADC_IRQHandler+0x19c>
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	f003 0320 	and.w	r3, r3, #32
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10b      	bne.n	800301c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 809e 	beq.w	800314c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 8098 	beq.w	800314c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b00      	cmp	r3, #0
 8003026:	d105      	bne.n	8003034 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff fb72 	bl	8002722 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800303e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff fb2d 	bl	80026a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800304a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a11      	ldr	r2, [pc, #68]	@ (8003098 <HAL_ADC_IRQHandler+0x230>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d002      	beq.n	800305c <HAL_ADC_IRQHandler+0x1f4>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	e001      	b.n	8003060 <HAL_ADC_IRQHandler+0x1f8>
 800305c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	4293      	cmp	r3, r2
 8003066:	d008      	beq.n	800307a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d005      	beq.n	800307a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b06      	cmp	r3, #6
 8003072:	d002      	beq.n	800307a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2b07      	cmp	r3, #7
 8003078:	d104      	bne.n	8003084 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	623b      	str	r3, [r7, #32]
 8003082:	e011      	b.n	80030a8 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a03      	ldr	r2, [pc, #12]	@ (8003098 <HAL_ADC_IRQHandler+0x230>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d006      	beq.n	800309c <HAL_ADC_IRQHandler+0x234>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	e005      	b.n	80030a0 <HAL_ADC_IRQHandler+0x238>
 8003094:	50000300 	.word	0x50000300
 8003098:	50000100 	.word	0x50000100
 800309c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80030a0:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d047      	beq.n	800313e <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d007      	beq.n	80030c8 <HAL_ADC_IRQHandler+0x260>
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d03f      	beq.n	800313e <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d13a      	bne.n	800313e <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d2:	2b40      	cmp	r3, #64	@ 0x40
 80030d4:	d133      	bne.n	800313e <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d12e      	bne.n	800313e <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff fc5e 	bl	80029a6 <LL_ADC_INJ_IsConversionOngoing>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d11a      	bne.n	8003126 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80030fe:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003104:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003114:	2b00      	cmp	r3, #0
 8003116:	d112      	bne.n	800313e <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800311c:	f043 0201 	orr.w	r2, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003124:	e00b      	b.n	800313e <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312a:	f043 0210 	orr.w	r2, r3, #16
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003136:	f043 0201 	orr.w	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f008 ff74 	bl	800c02c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2260      	movs	r2, #96	@ 0x60
 800314a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003152:	2b00      	cmp	r3, #0
 8003154:	d011      	beq.n	800317a <HAL_ADC_IRQHandler+0x312>
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00c      	beq.n	800317a <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003164:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f89f 	bl	80032b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2280      	movs	r2, #128	@ 0x80
 8003178:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003180:	2b00      	cmp	r3, #0
 8003182:	d012      	beq.n	80031aa <HAL_ADC_IRQHandler+0x342>
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00d      	beq.n	80031aa <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003192:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f001 f918 	bl	80043d0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d012      	beq.n	80031da <HAL_ADC_IRQHandler+0x372>
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00d      	beq.n	80031da <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f001 f90a 	bl	80043e4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d036      	beq.n	8003252 <HAL_ADC_IRQHandler+0x3ea>
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d031      	beq.n	8003252 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d102      	bne.n	80031fc <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80031f6:	2301      	movs	r3, #1
 80031f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80031fa:	e014      	b.n	8003226 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d008      	beq.n	8003214 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003202:	4825      	ldr	r0, [pc, #148]	@ (8003298 <HAL_ADC_IRQHandler+0x430>)
 8003204:	f7ff fafe 	bl	8002804 <LL_ADC_GetMultiDMATransfer>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00b      	beq.n	8003226 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800320e:	2301      	movs	r3, #1
 8003210:	627b      	str	r3, [r7, #36]	@ 0x24
 8003212:	e008      	b.n	8003226 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003222:	2301      	movs	r3, #1
 8003224:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003228:	2b01      	cmp	r3, #1
 800322a:	d10e      	bne.n	800324a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003230:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800323c:	f043 0202 	orr.w	r2, r3, #2
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f83d 	bl	80032c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2210      	movs	r2, #16
 8003250:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003258:	2b00      	cmp	r3, #0
 800325a:	d018      	beq.n	800328e <HAL_ADC_IRQHandler+0x426>
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003262:	2b00      	cmp	r3, #0
 8003264:	d013      	beq.n	800328e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800326a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003276:	f043 0208 	orr.w	r2, r3, #8
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003286:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f001 f897 	bl	80043bc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800328e:	bf00      	nop
 8003290:	3728      	adds	r7, #40	@ 0x28
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	50000300 	.word	0x50000300

0800329c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b0b6      	sub	sp, #216	@ 0xd8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x22>
 80032f6:	2302      	movs	r3, #2
 80032f8:	e3c8      	b.n	8003a8c <HAL_ADC_ConfigChannel+0x7b4>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff fb3a 	bl	8002980 <LL_ADC_REG_IsConversionOngoing>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	f040 83ad 	bne.w	8003a6e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6818      	ldr	r0, [r3, #0]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	6859      	ldr	r1, [r3, #4]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	f7ff f9d2 	bl	80026ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff fb28 	bl	8002980 <LL_ADC_REG_IsConversionOngoing>
 8003330:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff fb34 	bl	80029a6 <LL_ADC_INJ_IsConversionOngoing>
 800333e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003342:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003346:	2b00      	cmp	r3, #0
 8003348:	f040 81d9 	bne.w	80036fe <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800334c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003350:	2b00      	cmp	r3, #0
 8003352:	f040 81d4 	bne.w	80036fe <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800335e:	d10f      	bne.n	8003380 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6818      	ldr	r0, [r3, #0]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2200      	movs	r2, #0
 800336a:	4619      	mov	r1, r3
 800336c:	f7ff f9ec 	bl	8002748 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff f980 	bl	800267e <LL_ADC_SetSamplingTimeCommonConfig>
 800337e:	e00e      	b.n	800339e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6818      	ldr	r0, [r3, #0]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	6819      	ldr	r1, [r3, #0]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	461a      	mov	r2, r3
 800338e:	f7ff f9db 	bl	8002748 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2100      	movs	r1, #0
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff f970 	bl	800267e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	695a      	ldr	r2, [r3, #20]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	08db      	lsrs	r3, r3, #3
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d022      	beq.n	8003406 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6818      	ldr	r0, [r3, #0]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	6919      	ldr	r1, [r3, #16]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80033d0:	f7ff f8ca 	bl	8002568 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	6919      	ldr	r1, [r3, #16]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	461a      	mov	r2, r3
 80033e2:	f7ff f916 	bl	8002612 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d102      	bne.n	80033fc <HAL_ADC_ConfigChannel+0x124>
 80033f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033fa:	e000      	b.n	80033fe <HAL_ADC_ConfigChannel+0x126>
 80033fc:	2300      	movs	r3, #0
 80033fe:	461a      	mov	r2, r3
 8003400:	f7ff f922 	bl	8002648 <LL_ADC_SetOffsetSaturation>
 8003404:	e17b      	b.n	80036fe <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2100      	movs	r1, #0
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff f8cf 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8003412:	4603      	mov	r3, r0
 8003414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10a      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x15a>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2100      	movs	r1, #0
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff f8c4 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8003428:	4603      	mov	r3, r0
 800342a:	0e9b      	lsrs	r3, r3, #26
 800342c:	f003 021f 	and.w	r2, r3, #31
 8003430:	e01e      	b.n	8003470 <HAL_ADC_ConfigChannel+0x198>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2100      	movs	r1, #0
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff f8b9 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 800343e:	4603      	mov	r3, r0
 8003440:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003444:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003448:	fa93 f3a3 	rbit	r3, r3
 800344c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003450:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003454:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003458:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003460:	2320      	movs	r3, #32
 8003462:	e004      	b.n	800346e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003464:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003468:	fab3 f383 	clz	r3, r3
 800346c:	b2db      	uxtb	r3, r3
 800346e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003478:	2b00      	cmp	r3, #0
 800347a:	d105      	bne.n	8003488 <HAL_ADC_ConfigChannel+0x1b0>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	0e9b      	lsrs	r3, r3, #26
 8003482:	f003 031f 	and.w	r3, r3, #31
 8003486:	e018      	b.n	80034ba <HAL_ADC_ConfigChannel+0x1e2>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003494:	fa93 f3a3 	rbit	r3, r3
 8003498:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800349c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80034a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80034ac:	2320      	movs	r3, #32
 80034ae:	e004      	b.n	80034ba <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80034b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80034b4:	fab3 f383 	clz	r3, r3
 80034b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d106      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2200      	movs	r2, #0
 80034c4:	2100      	movs	r1, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff f888 	bl	80025dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2101      	movs	r1, #1
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff f86c 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 80034d8:	4603      	mov	r3, r0
 80034da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10a      	bne.n	80034f8 <HAL_ADC_ConfigChannel+0x220>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2101      	movs	r1, #1
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff f861 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 80034ee:	4603      	mov	r3, r0
 80034f0:	0e9b      	lsrs	r3, r3, #26
 80034f2:	f003 021f 	and.w	r2, r3, #31
 80034f6:	e01e      	b.n	8003536 <HAL_ADC_ConfigChannel+0x25e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2101      	movs	r1, #1
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff f856 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8003504:	4603      	mov	r3, r0
 8003506:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800350e:	fa93 f3a3 	rbit	r3, r3
 8003512:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003516:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800351a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800351e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003526:	2320      	movs	r3, #32
 8003528:	e004      	b.n	8003534 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800352a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800352e:	fab3 f383 	clz	r3, r3
 8003532:	b2db      	uxtb	r3, r3
 8003534:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800353e:	2b00      	cmp	r3, #0
 8003540:	d105      	bne.n	800354e <HAL_ADC_ConfigChannel+0x276>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	0e9b      	lsrs	r3, r3, #26
 8003548:	f003 031f 	and.w	r3, r3, #31
 800354c:	e018      	b.n	8003580 <HAL_ADC_ConfigChannel+0x2a8>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003556:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800355a:	fa93 f3a3 	rbit	r3, r3
 800355e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003562:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003566:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800356a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003572:	2320      	movs	r3, #32
 8003574:	e004      	b.n	8003580 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003576:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800357a:	fab3 f383 	clz	r3, r3
 800357e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003580:	429a      	cmp	r2, r3
 8003582:	d106      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2200      	movs	r2, #0
 800358a:	2101      	movs	r1, #1
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff f825 	bl	80025dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2102      	movs	r1, #2
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff f809 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 800359e:	4603      	mov	r3, r0
 80035a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10a      	bne.n	80035be <HAL_ADC_ConfigChannel+0x2e6>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2102      	movs	r1, #2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe fffe 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 80035b4:	4603      	mov	r3, r0
 80035b6:	0e9b      	lsrs	r3, r3, #26
 80035b8:	f003 021f 	and.w	r2, r3, #31
 80035bc:	e01e      	b.n	80035fc <HAL_ADC_ConfigChannel+0x324>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2102      	movs	r1, #2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fe fff3 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035d4:	fa93 f3a3 	rbit	r3, r3
 80035d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80035dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80035e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80035ec:	2320      	movs	r3, #32
 80035ee:	e004      	b.n	80035fa <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80035f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80035f4:	fab3 f383 	clz	r3, r3
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003604:	2b00      	cmp	r3, #0
 8003606:	d105      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x33c>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	0e9b      	lsrs	r3, r3, #26
 800360e:	f003 031f 	and.w	r3, r3, #31
 8003612:	e016      	b.n	8003642 <HAL_ADC_ConfigChannel+0x36a>
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003620:	fa93 f3a3 	rbit	r3, r3
 8003624:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003626:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003628:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800362c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003634:	2320      	movs	r3, #32
 8003636:	e004      	b.n	8003642 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003638:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800363c:	fab3 f383 	clz	r3, r3
 8003640:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003642:	429a      	cmp	r2, r3
 8003644:	d106      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2200      	movs	r2, #0
 800364c:	2102      	movs	r1, #2
 800364e:	4618      	mov	r0, r3
 8003650:	f7fe ffc4 	bl	80025dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2103      	movs	r1, #3
 800365a:	4618      	mov	r0, r3
 800365c:	f7fe ffa8 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8003660:	4603      	mov	r3, r0
 8003662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10a      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x3a8>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2103      	movs	r1, #3
 8003670:	4618      	mov	r0, r3
 8003672:	f7fe ff9d 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8003676:	4603      	mov	r3, r0
 8003678:	0e9b      	lsrs	r3, r3, #26
 800367a:	f003 021f 	and.w	r2, r3, #31
 800367e:	e017      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x3d8>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2103      	movs	r1, #3
 8003686:	4618      	mov	r0, r3
 8003688:	f7fe ff92 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 800368c:	4603      	mov	r3, r0
 800368e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003690:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003692:	fa93 f3a3 	rbit	r3, r3
 8003696:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003698:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800369a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800369c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80036a2:	2320      	movs	r3, #32
 80036a4:	e003      	b.n	80036ae <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80036a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036a8:	fab3 f383 	clz	r3, r3
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d105      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x3f0>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	0e9b      	lsrs	r3, r3, #26
 80036c2:	f003 031f 	and.w	r3, r3, #31
 80036c6:	e011      	b.n	80036ec <HAL_ADC_ConfigChannel+0x414>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036d0:	fa93 f3a3 	rbit	r3, r3
 80036d4:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80036d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80036da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80036e0:	2320      	movs	r3, #32
 80036e2:	e003      	b.n	80036ec <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80036e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036e6:	fab3 f383 	clz	r3, r3
 80036ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d106      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2200      	movs	r2, #0
 80036f6:	2103      	movs	r1, #3
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fe ff6f 	bl	80025dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff f902 	bl	800290c <LL_ADC_IsEnabled>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	f040 8140 	bne.w	8003990 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	6819      	ldr	r1, [r3, #0]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	461a      	mov	r2, r3
 800371e:	f7ff f83f 	bl	80027a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	4a8f      	ldr	r2, [pc, #572]	@ (8003964 <HAL_ADC_ConfigChannel+0x68c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	f040 8131 	bne.w	8003990 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10b      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x47e>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	0e9b      	lsrs	r3, r3, #26
 8003744:	3301      	adds	r3, #1
 8003746:	f003 031f 	and.w	r3, r3, #31
 800374a:	2b09      	cmp	r3, #9
 800374c:	bf94      	ite	ls
 800374e:	2301      	movls	r3, #1
 8003750:	2300      	movhi	r3, #0
 8003752:	b2db      	uxtb	r3, r3
 8003754:	e019      	b.n	800378a <HAL_ADC_ConfigChannel+0x4b2>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800375e:	fa93 f3a3 	rbit	r3, r3
 8003762:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003764:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003766:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003768:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800376e:	2320      	movs	r3, #32
 8003770:	e003      	b.n	800377a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003772:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003774:	fab3 f383 	clz	r3, r3
 8003778:	b2db      	uxtb	r3, r3
 800377a:	3301      	adds	r3, #1
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	2b09      	cmp	r3, #9
 8003782:	bf94      	ite	ls
 8003784:	2301      	movls	r3, #1
 8003786:	2300      	movhi	r3, #0
 8003788:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800378a:	2b00      	cmp	r3, #0
 800378c:	d079      	beq.n	8003882 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003796:	2b00      	cmp	r3, #0
 8003798:	d107      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x4d2>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	0e9b      	lsrs	r3, r3, #26
 80037a0:	3301      	adds	r3, #1
 80037a2:	069b      	lsls	r3, r3, #26
 80037a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037a8:	e015      	b.n	80037d6 <HAL_ADC_ConfigChannel+0x4fe>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037b2:	fa93 f3a3 	rbit	r3, r3
 80037b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80037b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037ba:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80037bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80037c2:	2320      	movs	r3, #32
 80037c4:	e003      	b.n	80037ce <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80037c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037c8:	fab3 f383 	clz	r3, r3
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	3301      	adds	r3, #1
 80037d0:	069b      	lsls	r3, r3, #26
 80037d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d109      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x51e>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	0e9b      	lsrs	r3, r3, #26
 80037e8:	3301      	adds	r3, #1
 80037ea:	f003 031f 	and.w	r3, r3, #31
 80037ee:	2101      	movs	r1, #1
 80037f0:	fa01 f303 	lsl.w	r3, r1, r3
 80037f4:	e017      	b.n	8003826 <HAL_ADC_ConfigChannel+0x54e>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037fe:	fa93 f3a3 	rbit	r3, r3
 8003802:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003804:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003806:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003808:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800380e:	2320      	movs	r3, #32
 8003810:	e003      	b.n	800381a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003812:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003814:	fab3 f383 	clz	r3, r3
 8003818:	b2db      	uxtb	r3, r3
 800381a:	3301      	adds	r3, #1
 800381c:	f003 031f 	and.w	r3, r3, #31
 8003820:	2101      	movs	r1, #1
 8003822:	fa01 f303 	lsl.w	r3, r1, r3
 8003826:	ea42 0103 	orr.w	r1, r2, r3
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10a      	bne.n	800384c <HAL_ADC_ConfigChannel+0x574>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	0e9b      	lsrs	r3, r3, #26
 800383c:	3301      	adds	r3, #1
 800383e:	f003 021f 	and.w	r2, r3, #31
 8003842:	4613      	mov	r3, r2
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	4413      	add	r3, r2
 8003848:	051b      	lsls	r3, r3, #20
 800384a:	e018      	b.n	800387e <HAL_ADC_ConfigChannel+0x5a6>
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003854:	fa93 f3a3 	rbit	r3, r3
 8003858:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800385a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800385c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800385e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003864:	2320      	movs	r3, #32
 8003866:	e003      	b.n	8003870 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800386a:	fab3 f383 	clz	r3, r3
 800386e:	b2db      	uxtb	r3, r3
 8003870:	3301      	adds	r3, #1
 8003872:	f003 021f 	and.w	r2, r3, #31
 8003876:	4613      	mov	r3, r2
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	4413      	add	r3, r2
 800387c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800387e:	430b      	orrs	r3, r1
 8003880:	e081      	b.n	8003986 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800388a:	2b00      	cmp	r3, #0
 800388c:	d107      	bne.n	800389e <HAL_ADC_ConfigChannel+0x5c6>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	0e9b      	lsrs	r3, r3, #26
 8003894:	3301      	adds	r3, #1
 8003896:	069b      	lsls	r3, r3, #26
 8003898:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800389c:	e015      	b.n	80038ca <HAL_ADC_ConfigChannel+0x5f2>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038a6:	fa93 f3a3 	rbit	r3, r3
 80038aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80038ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ae:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80038b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80038b6:	2320      	movs	r3, #32
 80038b8:	e003      	b.n	80038c2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80038ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038bc:	fab3 f383 	clz	r3, r3
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	3301      	adds	r3, #1
 80038c4:	069b      	lsls	r3, r3, #26
 80038c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d109      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x612>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	0e9b      	lsrs	r3, r3, #26
 80038dc:	3301      	adds	r3, #1
 80038de:	f003 031f 	and.w	r3, r3, #31
 80038e2:	2101      	movs	r1, #1
 80038e4:	fa01 f303 	lsl.w	r3, r1, r3
 80038e8:	e017      	b.n	800391a <HAL_ADC_ConfigChannel+0x642>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	fa93 f3a3 	rbit	r3, r3
 80038f6:	61fb      	str	r3, [r7, #28]
  return result;
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80038fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003902:	2320      	movs	r3, #32
 8003904:	e003      	b.n	800390e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003908:	fab3 f383 	clz	r3, r3
 800390c:	b2db      	uxtb	r3, r3
 800390e:	3301      	adds	r3, #1
 8003910:	f003 031f 	and.w	r3, r3, #31
 8003914:	2101      	movs	r1, #1
 8003916:	fa01 f303 	lsl.w	r3, r1, r3
 800391a:	ea42 0103 	orr.w	r1, r2, r3
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10d      	bne.n	8003946 <HAL_ADC_ConfigChannel+0x66e>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	0e9b      	lsrs	r3, r3, #26
 8003930:	3301      	adds	r3, #1
 8003932:	f003 021f 	and.w	r2, r3, #31
 8003936:	4613      	mov	r3, r2
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	4413      	add	r3, r2
 800393c:	3b1e      	subs	r3, #30
 800393e:	051b      	lsls	r3, r3, #20
 8003940:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003944:	e01e      	b.n	8003984 <HAL_ADC_ConfigChannel+0x6ac>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	fa93 f3a3 	rbit	r3, r3
 8003952:	613b      	str	r3, [r7, #16]
  return result;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d104      	bne.n	8003968 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800395e:	2320      	movs	r3, #32
 8003960:	e006      	b.n	8003970 <HAL_ADC_ConfigChannel+0x698>
 8003962:	bf00      	nop
 8003964:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	fab3 f383 	clz	r3, r3
 800396e:	b2db      	uxtb	r3, r3
 8003970:	3301      	adds	r3, #1
 8003972:	f003 021f 	and.w	r2, r3, #31
 8003976:	4613      	mov	r3, r2
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	4413      	add	r3, r2
 800397c:	3b1e      	subs	r3, #30
 800397e:	051b      	lsls	r3, r3, #20
 8003980:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003984:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800398a:	4619      	mov	r1, r3
 800398c:	f7fe fedc 	bl	8002748 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	4b3f      	ldr	r3, [pc, #252]	@ (8003a94 <HAL_ADC_ConfigChannel+0x7bc>)
 8003996:	4013      	ands	r3, r2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d071      	beq.n	8003a80 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800399c:	483e      	ldr	r0, [pc, #248]	@ (8003a98 <HAL_ADC_ConfigChannel+0x7c0>)
 800399e:	f7fe fdd5 	bl	800254c <LL_ADC_GetCommonPathInternalCh>
 80039a2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a3c      	ldr	r2, [pc, #240]	@ (8003a9c <HAL_ADC_ConfigChannel+0x7c4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d004      	beq.n	80039ba <HAL_ADC_ConfigChannel+0x6e2>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a3a      	ldr	r2, [pc, #232]	@ (8003aa0 <HAL_ADC_ConfigChannel+0x7c8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d127      	bne.n	8003a0a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d121      	bne.n	8003a0a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039ce:	d157      	bne.n	8003a80 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80039d8:	4619      	mov	r1, r3
 80039da:	482f      	ldr	r0, [pc, #188]	@ (8003a98 <HAL_ADC_ConfigChannel+0x7c0>)
 80039dc:	f7fe fda3 	bl	8002526 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039e0:	4b30      	ldr	r3, [pc, #192]	@ (8003aa4 <HAL_ADC_ConfigChannel+0x7cc>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	099b      	lsrs	r3, r3, #6
 80039e6:	4a30      	ldr	r2, [pc, #192]	@ (8003aa8 <HAL_ADC_ConfigChannel+0x7d0>)
 80039e8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ec:	099b      	lsrs	r3, r3, #6
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	4613      	mov	r3, r2
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	4413      	add	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80039fa:	e002      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1f9      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a08:	e03a      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a27      	ldr	r2, [pc, #156]	@ (8003aac <HAL_ADC_ConfigChannel+0x7d4>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d113      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10d      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a22      	ldr	r2, [pc, #136]	@ (8003ab0 <HAL_ADC_ConfigChannel+0x7d8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d02a      	beq.n	8003a80 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a32:	4619      	mov	r1, r3
 8003a34:	4818      	ldr	r0, [pc, #96]	@ (8003a98 <HAL_ADC_ConfigChannel+0x7c0>)
 8003a36:	f7fe fd76 	bl	8002526 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a3a:	e021      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a1c      	ldr	r2, [pc, #112]	@ (8003ab4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d11c      	bne.n	8003a80 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d116      	bne.n	8003a80 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a16      	ldr	r2, [pc, #88]	@ (8003ab0 <HAL_ADC_ConfigChannel+0x7d8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d011      	beq.n	8003a80 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a64:	4619      	mov	r1, r3
 8003a66:	480c      	ldr	r0, [pc, #48]	@ (8003a98 <HAL_ADC_ConfigChannel+0x7c0>)
 8003a68:	f7fe fd5d 	bl	8002526 <LL_ADC_SetCommonPathInternalCh>
 8003a6c:	e008      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a72:	f043 0220 	orr.w	r2, r3, #32
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a88:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	37d8      	adds	r7, #216	@ 0xd8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	80080000 	.word	0x80080000
 8003a98:	50000300 	.word	0x50000300
 8003a9c:	c3210000 	.word	0xc3210000
 8003aa0:	90c00010 	.word	0x90c00010
 8003aa4:	20000000 	.word	0x20000000
 8003aa8:	053e2d63 	.word	0x053e2d63
 8003aac:	c7520000 	.word	0xc7520000
 8003ab0:	50000100 	.word	0x50000100
 8003ab4:	cb840000 	.word	0xcb840000

08003ab8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7fe ff1f 	bl	800290c <LL_ADC_IsEnabled>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d169      	bne.n	8003ba8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	4b36      	ldr	r3, [pc, #216]	@ (8003bb4 <ADC_Enable+0xfc>)
 8003adc:	4013      	ands	r3, r2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00d      	beq.n	8003afe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae6:	f043 0210 	orr.w	r2, r3, #16
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af2:	f043 0201 	orr.w	r2, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e055      	b.n	8003baa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe feda 	bl	80028bc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003b08:	482b      	ldr	r0, [pc, #172]	@ (8003bb8 <ADC_Enable+0x100>)
 8003b0a:	f7fe fd1f 	bl	800254c <LL_ADC_GetCommonPathInternalCh>
 8003b0e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003b10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d013      	beq.n	8003b40 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b18:	4b28      	ldr	r3, [pc, #160]	@ (8003bbc <ADC_Enable+0x104>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	099b      	lsrs	r3, r3, #6
 8003b1e:	4a28      	ldr	r2, [pc, #160]	@ (8003bc0 <ADC_Enable+0x108>)
 8003b20:	fba2 2303 	umull	r2, r3, r2, r3
 8003b24:	099b      	lsrs	r3, r3, #6
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	4613      	mov	r3, r2
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b32:	e002      	b.n	8003b3a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1f9      	bne.n	8003b34 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003b40:	f7fe fcd2 	bl	80024e8 <HAL_GetTick>
 8003b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b46:	e028      	b.n	8003b9a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fe fedd 	bl	800290c <LL_ADC_IsEnabled>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d104      	bne.n	8003b62 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fe fead 	bl	80028bc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b62:	f7fe fcc1 	bl	80024e8 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d914      	bls.n	8003b9a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d00d      	beq.n	8003b9a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b82:	f043 0210 	orr.w	r2, r3, #16
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b8e:	f043 0201 	orr.w	r2, r3, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e007      	b.n	8003baa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d1cf      	bne.n	8003b48 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	8000003f 	.word	0x8000003f
 8003bb8:	50000300 	.word	0x50000300
 8003bbc:	20000000 	.word	0x20000000
 8003bc0:	053e2d63 	.word	0x053e2d63

08003bc4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fe feae 	bl	8002932 <LL_ADC_IsDisableOngoing>
 8003bd6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fe fe95 	bl	800290c <LL_ADC_IsEnabled>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d047      	beq.n	8003c78 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d144      	bne.n	8003c78 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 030d 	and.w	r3, r3, #13
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d10c      	bne.n	8003c16 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fe fe6f 	bl	80028e4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2203      	movs	r2, #3
 8003c0c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c0e:	f7fe fc6b 	bl	80024e8 <HAL_GetTick>
 8003c12:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c14:	e029      	b.n	8003c6a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c1a:	f043 0210 	orr.w	r2, r3, #16
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c26:	f043 0201 	orr.w	r2, r3, #1
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e023      	b.n	8003c7a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c32:	f7fe fc59 	bl	80024e8 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d914      	bls.n	8003c6a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00d      	beq.n	8003c6a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c52:	f043 0210 	orr.w	r2, r3, #16
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c5e:	f043 0201 	orr.w	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e007      	b.n	8003c7a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1dc      	bne.n	8003c32 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <LL_ADC_SetCommonPathInternalCh>:
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	609a      	str	r2, [r3, #8]
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <LL_ADC_GetCommonPathInternalCh>:
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <LL_ADC_SetOffset>:
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	3360      	adds	r3, #96	@ 0x60
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4b08      	ldr	r3, [pc, #32]	@ (8003d08 <LL_ADC_SetOffset+0x44>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	601a      	str	r2, [r3, #0]
}
 8003cfc:	bf00      	nop
 8003cfe:	371c      	adds	r7, #28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	03fff000 	.word	0x03fff000

08003d0c <LL_ADC_GetOffsetChannel>:
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3360      	adds	r3, #96	@ 0x60
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <LL_ADC_SetOffsetState>:
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	3360      	adds	r3, #96	@ 0x60
 8003d48:	461a      	mov	r2, r3
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	601a      	str	r2, [r3, #0]
}
 8003d62:	bf00      	nop
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <LL_ADC_SetOffsetSign>:
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b087      	sub	sp, #28
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	3360      	adds	r3, #96	@ 0x60
 8003d7e:	461a      	mov	r2, r3
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	601a      	str	r2, [r3, #0]
}
 8003d98:	bf00      	nop
 8003d9a:	371c      	adds	r7, #28
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <LL_ADC_SetOffsetSaturation>:
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	3360      	adds	r3, #96	@ 0x60
 8003db4:	461a      	mov	r2, r3
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	601a      	str	r2, [r3, #0]
}
 8003dce:	bf00      	nop
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	615a      	str	r2, [r3, #20]
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <LL_ADC_INJ_GetTrigAuto>:
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <LL_ADC_SetChannelSamplingTime>:
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	3314      	adds	r3, #20
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	0e5b      	lsrs	r3, r3, #25
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	4413      	add	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	0d1b      	lsrs	r3, r3, #20
 8003e44:	f003 031f 	and.w	r3, r3, #31
 8003e48:	2107      	movs	r1, #7
 8003e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	401a      	ands	r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	0d1b      	lsrs	r3, r3, #20
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e60:	431a      	orrs	r2, r3
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	601a      	str	r2, [r3, #0]
}
 8003e66:	bf00      	nop
 8003e68:	371c      	adds	r7, #28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <LL_ADC_SetChannelSingleDiff>:
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	401a      	ands	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f003 0318 	and.w	r3, r3, #24
 8003e96:	4908      	ldr	r1, [pc, #32]	@ (8003eb8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003e98:	40d9      	lsrs	r1, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	400b      	ands	r3, r1
 8003e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8003eaa:	bf00      	nop
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	0007ffff 	.word	0x0007ffff

08003ebc <LL_ADC_GetMultimode>:
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 031f 	and.w	r3, r3, #31
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <LL_ADC_IsEnabled>:
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d101      	bne.n	8003ef0 <LL_ADC_IsEnabled+0x18>
 8003eec:	2301      	movs	r3, #1
 8003eee:	e000      	b.n	8003ef2 <LL_ADC_IsEnabled+0x1a>
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <LL_ADC_StartCalibration>:
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003f10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	609a      	str	r2, [r3, #8]
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <LL_ADC_IsCalibrationOnGoing>:
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f44:	d101      	bne.n	8003f4a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <LL_ADC_REG_IsConversionOngoing>:
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d101      	bne.n	8003f70 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e000      	b.n	8003f72 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <LL_ADC_INJ_StartConversion>:
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f8e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f92:	f043 0208 	orr.w	r2, r3, #8
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	609a      	str	r2, [r3, #8]
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <LL_ADC_INJ_IsConversionOngoing>:
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d101      	bne.n	8003fbe <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_ADCEx_Calibration_Start+0x1c>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e04d      	b.n	8004084 <HAL_ADCEx_Calibration_Start+0xb8>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff fde7 	bl	8003bc4 <ADC_Disable>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d136      	bne.n	800406e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004004:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004008:	f023 0302 	bic.w	r3, r3, #2
 800400c:	f043 0202 	orr.w	r2, r3, #2
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6839      	ldr	r1, [r7, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff ff6f 	bl	8003efe <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004020:	e014      	b.n	800404c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	3301      	adds	r3, #1
 8004026:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4a18      	ldr	r2, [pc, #96]	@ (800408c <HAL_ADCEx_Calibration_Start+0xc0>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d90d      	bls.n	800404c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004034:	f023 0312 	bic.w	r3, r3, #18
 8004038:	f043 0210 	orr.w	r2, r3, #16
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e01b      	b.n	8004084 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff ff6d 	bl	8003f30 <LL_ADC_IsCalibrationOnGoing>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1e2      	bne.n	8004022 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004060:	f023 0303 	bic.w	r3, r3, #3
 8004064:	f043 0201 	orr.w	r2, r3, #1
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800406c:	e005      	b.n	800407a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004072:	f043 0210 	orr.w	r2, r3, #16
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004082:	7bfb      	ldrb	r3, [r7, #15]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	0004de01 	.word	0x0004de01

08004090 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004098:	4853      	ldr	r0, [pc, #332]	@ (80041e8 <HAL_ADCEx_InjectedStart+0x158>)
 800409a:	f7ff ff0f 	bl	8003ebc <LL_ADC_GetMultimode>
 800409e:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff ff7e 	bl	8003fa6 <LL_ADC_INJ_IsConversionOngoing>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 80040b0:	2302      	movs	r3, #2
 80040b2:	e094      	b.n	80041de <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040be:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040c6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10a      	bne.n	80040e4 <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d107      	bne.n	80040e4 <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d8:	f043 0220 	orr.w	r2, r3, #32
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e07c      	b.n	80041de <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <HAL_ADCEx_InjectedStart+0x62>
 80040ee:	2302      	movs	r3, #2
 80040f0:	e075      	b.n	80041de <HAL_ADCEx_InjectedStart+0x14e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7ff fcdc 	bl	8003ab8 <ADC_Enable>
 8004100:	4603      	mov	r3, r0
 8004102:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004104:	7bfb      	ldrb	r3, [r7, #15]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d164      	bne.n	80041d4 <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800410e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004112:	2b00      	cmp	r3, #0
 8004114:	d006      	beq.n	8004124 <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800411a:	f023 0208 	bic.w	r2, r3, #8
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	661a      	str	r2, [r3, #96]	@ 0x60
 8004122:	e002      	b.n	800412a <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800412e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004132:	f023 0301 	bic.w	r3, r3, #1
 8004136:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a2a      	ldr	r2, [pc, #168]	@ (80041ec <HAL_ADCEx_InjectedStart+0x15c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d002      	beq.n	800414e <HAL_ADCEx_InjectedStart+0xbe>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	e001      	b.n	8004152 <HAL_ADCEx_InjectedStart+0xc2>
 800414e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6812      	ldr	r2, [r2, #0]
 8004156:	4293      	cmp	r3, r2
 8004158:	d002      	beq.n	8004160 <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d105      	bne.n	800416c <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004164:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2260      	movs	r2, #96	@ 0x60
 8004172:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a1a      	ldr	r2, [pc, #104]	@ (80041ec <HAL_ADCEx_InjectedStart+0x15c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d002      	beq.n	800418c <HAL_ADCEx_InjectedStart+0xfc>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	e001      	b.n	8004190 <HAL_ADCEx_InjectedStart+0x100>
 800418c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	4293      	cmp	r3, r2
 8004196:	d008      	beq.n	80041aa <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d005      	beq.n	80041aa <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2b06      	cmp	r3, #6
 80041a2:	d002      	beq.n	80041aa <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2b07      	cmp	r3, #7
 80041a8:	d10d      	bne.n	80041c6 <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff fe26 	bl	8003e00 <LL_ADC_INJ_GetTrigAuto>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d110      	bne.n	80041dc <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff fedd 	bl	8003f7e <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80041c4:	e00a      	b.n	80041dc <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80041d2:	e003      	b.n	80041dc <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	50000300 	.word	0x50000300
 80041ec:	50000100 	.word	0x50000100

080041f0 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041f8:	486e      	ldr	r0, [pc, #440]	@ (80043b4 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 80041fa:	f7ff fe5f 	bl	8003ebc <LL_ADC_GetMultimode>
 80041fe:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff fece 	bl	8003fa6 <LL_ADC_INJ_IsConversionOngoing>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 8004210:	2302      	movs	r3, #2
 8004212:	e0ca      	b.n	80043aa <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800421e:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004226:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10a      	bne.n	8004244 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d107      	bne.n	8004244 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004238:	f043 0220 	orr.w	r2, r3, #32
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0b2      	b.n	80043aa <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800424a:	2b01      	cmp	r3, #1
 800424c:	d101      	bne.n	8004252 <HAL_ADCEx_InjectedStart_IT+0x62>
 800424e:	2302      	movs	r3, #2
 8004250:	e0ab      	b.n	80043aa <HAL_ADCEx_InjectedStart_IT+0x1ba>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7ff fc2c 	bl	8003ab8 <ADC_Enable>
 8004260:	4603      	mov	r3, r0
 8004262:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004264:	7bfb      	ldrb	r3, [r7, #15]
 8004266:	2b00      	cmp	r3, #0
 8004268:	f040 809a 	bne.w	80043a0 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004274:	2b00      	cmp	r3, #0
 8004276:	d006      	beq.n	8004286 <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800427c:	f023 0208 	bic.w	r2, r3, #8
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	661a      	str	r2, [r3, #96]	@ 0x60
 8004284:	e002      	b.n	800428c <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004290:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004294:	f023 0301 	bic.w	r3, r3, #1
 8004298:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a44      	ldr	r2, [pc, #272]	@ (80043b8 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d002      	beq.n	80042b0 <HAL_ADCEx_InjectedStart_IT+0xc0>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	e001      	b.n	80042b4 <HAL_ADCEx_InjectedStart_IT+0xc4>
 80042b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6812      	ldr	r2, [r2, #0]
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d002      	beq.n	80042c2 <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d105      	bne.n	80042ce <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2260      	movs	r2, #96	@ 0x60
 80042d4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d007      	beq.n	80042fc <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042fa:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	2b08      	cmp	r3, #8
 8004302:	d110      	bne.n	8004326 <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0220 	bic.w	r2, r2, #32
 8004312:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004322:	605a      	str	r2, [r3, #4]
          break;
 8004324:	e010      	b.n	8004348 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004334:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f042 0220 	orr.w	r2, r2, #32
 8004344:	605a      	str	r2, [r3, #4]
          break;
 8004346:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a1a      	ldr	r2, [pc, #104]	@ (80043b8 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d002      	beq.n	8004358 <HAL_ADCEx_InjectedStart_IT+0x168>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	e001      	b.n	800435c <HAL_ADCEx_InjectedStart_IT+0x16c>
 8004358:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6812      	ldr	r2, [r2, #0]
 8004360:	4293      	cmp	r3, r2
 8004362:	d008      	beq.n	8004376 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d005      	beq.n	8004376 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2b06      	cmp	r3, #6
 800436e:	d002      	beq.n	8004376 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	2b07      	cmp	r3, #7
 8004374:	d10d      	bne.n	8004392 <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff fd40 	bl	8003e00 <LL_ADC_INJ_GetTrigAuto>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d110      	bne.n	80043a8 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fdf7 	bl	8003f7e <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004390:	e00a      	b.n	80043a8 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004396:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800439e:	e003      	b.n	80043a8 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	50000300 	.word	0x50000300
 80043b8:	50000100 	.word	0x50000100

080043bc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b0b6      	sub	sp, #216	@ 0xd8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 800441c:	2300      	movs	r3, #0
 800441e:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800442c:	2b01      	cmp	r3, #1
 800442e:	d102      	bne.n	8004436 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8004430:	2302      	movs	r3, #2
 8004432:	f000 bcb5 	b.w	8004da0 <HAL_ADCEx_InjectedConfigChannel+0x994>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800444a:	2b01      	cmp	r3, #1
 800444c:	d130      	bne.n	80044b0 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b09      	cmp	r3, #9
 8004454:	d179      	bne.n	800454a <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800445a:	2b00      	cmp	r3, #0
 800445c:	d010      	beq.n	8004480 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	0e9b      	lsrs	r3, r3, #26
 8004464:	025b      	lsls	r3, r3, #9
 8004466:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446e:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8004472:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800447e:	e007      	b.n	8004490 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	0e9b      	lsrs	r3, r3, #26
 8004486:	025b      	lsls	r3, r3, #9
 8004488:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 800448c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004496:	4b84      	ldr	r3, [pc, #528]	@ (80046a8 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004498:	4013      	ands	r3, r2
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6812      	ldr	r2, [r2, #0]
 800449e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80044a2:	430b      	orrs	r3, r1
 80044a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80044ac:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80044ae:	e04c      	b.n	800454a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d11d      	bne.n	80044f4 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	6a1a      	ldr	r2, [r3, #32]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00d      	beq.n	80044ea <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d8:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80044dc:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044e8:	e004      	b.n	80044f4 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	0e9b      	lsrs	r3, r3, #26
 80044fa:	f003 021f 	and.w	r2, r3, #31
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f003 031f 	and.w	r3, r3, #31
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004518:	1e5a      	subs	r2, r3, #1
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004522:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10a      	bne.n	800454a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800453a:	4b5b      	ldr	r3, [pc, #364]	@ (80046a8 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 800453c:	4013      	ands	r3, r2
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6812      	ldr	r2, [r2, #0]
 8004546:	430b      	orrs	r3, r1
 8004548:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff fd29 	bl	8003fa6 <LL_ADC_INJ_IsConversionOngoing>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d124      	bne.n	80045a4 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004560:	2b00      	cmp	r3, #0
 8004562:	d112      	bne.n	800458a <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8004574:	055a      	lsls	r2, r3, #21
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800457c:	051b      	lsls	r3, r3, #20
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	60da      	str	r2, [r3, #12]
 8004588:	e00c      	b.n	80045a4 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800459a:	055a      	lsls	r2, r3, #21
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff fcd5 	bl	8003f58 <LL_ADC_REG_IsConversionOngoing>
 80045ae:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff fcf5 	bl	8003fa6 <LL_ADC_INJ_IsConversionOngoing>
 80045bc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f040 822e 	bne.w	8004a26 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f040 8229 	bne.w	8004a26 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d116      	bne.n	8004612 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d108      	bne.n	8004600 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80045fc:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80045fe:	e01f      	b.n	8004640 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800460e:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004610:	e016      	b.n	8004640 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004618:	2b01      	cmp	r3, #1
 800461a:	d109      	bne.n	8004630 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004620:	f043 0220 	orr.w	r2, r3, #32
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800462e:	e007      	b.n	8004640 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800463e:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004646:	2b01      	cmp	r3, #1
 8004648:	d110      	bne.n	800466c <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800465c:	430b      	orrs	r3, r1
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f042 0202 	orr.w	r2, r2, #2
 8004668:	611a      	str	r2, [r3, #16]
 800466a:	e007      	b.n	800467c <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	691a      	ldr	r2, [r3, #16]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 0202 	bic.w	r2, r2, #2
 800467a:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004684:	d112      	bne.n	80046ac <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2200      	movs	r2, #0
 8004690:	4619      	mov	r1, r3
 8004692:	f7ff fbc3 	bl	8003e1c <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff fb9b 	bl	8003dda <LL_ADC_SetSamplingTimeCommonConfig>
 80046a4:	e011      	b.n	80046ca <HAL_ADCEx_InjectedConfigChannel+0x2be>
 80046a6:	bf00      	nop
 80046a8:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6818      	ldr	r0, [r3, #0]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80046b8:	461a      	mov	r2, r3
 80046ba:	f7ff fbaf 	bl	8003e1c <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2100      	movs	r1, #0
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff fb88 	bl	8003dda <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	695a      	ldr	r2, [r3, #20]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	08db      	lsrs	r3, r3, #3
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	2b04      	cmp	r3, #4
 80046ea:	d022      	beq.n	8004732 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6818      	ldr	r0, [r3, #0]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	6919      	ldr	r1, [r3, #16]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046fc:	f7ff fae2 	bl	8003cc4 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6818      	ldr	r0, [r3, #0]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	6919      	ldr	r1, [r3, #16]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	461a      	mov	r2, r3
 800470e:	f7ff fb2e 	bl	8003d6e <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 800471e:	2b01      	cmp	r3, #1
 8004720:	d102      	bne.n	8004728 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8004722:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004726:	e000      	b.n	800472a <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8004728:	2300      	movs	r3, #0
 800472a:	461a      	mov	r2, r3
 800472c:	f7ff fb3a 	bl	8003da4 <LL_ADC_SetOffsetSaturation>
 8004730:	e179      	b.n	8004a26 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2100      	movs	r1, #0
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff fae7 	bl	8003d0c <LL_ADC_GetOffsetChannel>
 800473e:	4603      	mov	r3, r0
 8004740:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10a      	bne.n	800475e <HAL_ADCEx_InjectedConfigChannel+0x352>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2100      	movs	r1, #0
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff fadc 	bl	8003d0c <LL_ADC_GetOffsetChannel>
 8004754:	4603      	mov	r3, r0
 8004756:	0e9b      	lsrs	r3, r3, #26
 8004758:	f003 021f 	and.w	r2, r3, #31
 800475c:	e01e      	b.n	800479c <HAL_ADCEx_InjectedConfigChannel+0x390>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2100      	movs	r1, #0
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff fad1 	bl	8003d0c <LL_ADC_GetOffsetChannel>
 800476a:	4603      	mov	r3, r0
 800476c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004770:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004774:	fa93 f3a3 	rbit	r3, r3
 8004778:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800477c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004780:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004784:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 800478c:	2320      	movs	r3, #32
 800478e:	e004      	b.n	800479a <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8004790:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004794:	fab3 f383 	clz	r3, r3
 8004798:	b2db      	uxtb	r3, r3
 800479a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d105      	bne.n	80047b4 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	0e9b      	lsrs	r3, r3, #26
 80047ae:	f003 031f 	and.w	r3, r3, #31
 80047b2:	e018      	b.n	80047e6 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047c0:	fa93 f3a3 	rbit	r3, r3
 80047c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80047c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80047cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80047d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 80047d8:	2320      	movs	r3, #32
 80047da:	e004      	b.n	80047e6 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 80047dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80047e0:	fab3 f383 	clz	r3, r3
 80047e4:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d106      	bne.n	80047f8 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2200      	movs	r2, #0
 80047f0:	2100      	movs	r1, #0
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff faa0 	bl	8003d38 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2101      	movs	r1, #1
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff fa84 	bl	8003d0c <LL_ADC_GetOffsetChannel>
 8004804:	4603      	mov	r3, r0
 8004806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10a      	bne.n	8004824 <HAL_ADCEx_InjectedConfigChannel+0x418>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2101      	movs	r1, #1
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff fa79 	bl	8003d0c <LL_ADC_GetOffsetChannel>
 800481a:	4603      	mov	r3, r0
 800481c:	0e9b      	lsrs	r3, r3, #26
 800481e:	f003 021f 	and.w	r2, r3, #31
 8004822:	e01e      	b.n	8004862 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2101      	movs	r1, #1
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff fa6e 	bl	8003d0c <LL_ADC_GetOffsetChannel>
 8004830:	4603      	mov	r3, r0
 8004832:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004836:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800483a:	fa93 f3a3 	rbit	r3, r3
 800483e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004842:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004846:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800484a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8004852:	2320      	movs	r3, #32
 8004854:	e004      	b.n	8004860 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8004856:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800485a:	fab3 f383 	clz	r3, r3
 800485e:	b2db      	uxtb	r3, r3
 8004860:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800486a:	2b00      	cmp	r3, #0
 800486c:	d105      	bne.n	800487a <HAL_ADCEx_InjectedConfigChannel+0x46e>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	0e9b      	lsrs	r3, r3, #26
 8004874:	f003 031f 	and.w	r3, r3, #31
 8004878:	e018      	b.n	80048ac <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004882:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004886:	fa93 f3a3 	rbit	r3, r3
 800488a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800488e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004892:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004896:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 800489e:	2320      	movs	r3, #32
 80048a0:	e004      	b.n	80048ac <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 80048a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80048a6:	fab3 f383 	clz	r3, r3
 80048aa:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d106      	bne.n	80048be <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2200      	movs	r2, #0
 80048b6:	2101      	movs	r1, #1
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7ff fa3d 	bl	8003d38 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2102      	movs	r1, #2
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff fa21 	bl	8003d0c <LL_ADC_GetOffsetChannel>
 80048ca:	4603      	mov	r3, r0
 80048cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10a      	bne.n	80048ea <HAL_ADCEx_InjectedConfigChannel+0x4de>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2102      	movs	r1, #2
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff fa16 	bl	8003d0c <LL_ADC_GetOffsetChannel>
 80048e0:	4603      	mov	r3, r0
 80048e2:	0e9b      	lsrs	r3, r3, #26
 80048e4:	f003 021f 	and.w	r2, r3, #31
 80048e8:	e01e      	b.n	8004928 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2102      	movs	r1, #2
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7ff fa0b 	bl	8003d0c <LL_ADC_GetOffsetChannel>
 80048f6:	4603      	mov	r3, r0
 80048f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004900:	fa93 f3a3 	rbit	r3, r3
 8004904:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004908:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800490c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004910:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8004918:	2320      	movs	r3, #32
 800491a:	e004      	b.n	8004926 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 800491c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004920:	fab3 f383 	clz	r3, r3
 8004924:	b2db      	uxtb	r3, r3
 8004926:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004930:	2b00      	cmp	r3, #0
 8004932:	d105      	bne.n	8004940 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	0e9b      	lsrs	r3, r3, #26
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	e014      	b.n	800496a <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004946:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004948:	fa93 f3a3 	rbit	r3, r3
 800494c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800494e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004950:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004954:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 800495c:	2320      	movs	r3, #32
 800495e:	e004      	b.n	800496a <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004960:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004964:	fab3 f383 	clz	r3, r3
 8004968:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800496a:	429a      	cmp	r2, r3
 800496c:	d106      	bne.n	800497c <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2200      	movs	r2, #0
 8004974:	2102      	movs	r1, #2
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff f9de 	bl	8003d38 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2103      	movs	r1, #3
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff f9c2 	bl	8003d0c <LL_ADC_GetOffsetChannel>
 8004988:	4603      	mov	r3, r0
 800498a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10a      	bne.n	80049a8 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2103      	movs	r1, #3
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff f9b7 	bl	8003d0c <LL_ADC_GetOffsetChannel>
 800499e:	4603      	mov	r3, r0
 80049a0:	0e9b      	lsrs	r3, r3, #26
 80049a2:	f003 021f 	and.w	r2, r3, #31
 80049a6:	e017      	b.n	80049d8 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2103      	movs	r1, #3
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7ff f9ac 	bl	8003d0c <LL_ADC_GetOffsetChannel>
 80049b4:	4603      	mov	r3, r0
 80049b6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049ba:	fa93 f3a3 	rbit	r3, r3
 80049be:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80049c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049c2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80049c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 80049ca:	2320      	movs	r3, #32
 80049cc:	e003      	b.n	80049d6 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 80049ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049d0:	fab3 f383 	clz	r3, r3
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d105      	bne.n	80049f0 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	0e9b      	lsrs	r3, r3, #26
 80049ea:	f003 031f 	and.w	r3, r3, #31
 80049ee:	e011      	b.n	8004a14 <HAL_ADCEx_InjectedConfigChannel+0x608>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049f8:	fa93 f3a3 	rbit	r3, r3
 80049fc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80049fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a00:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004a02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8004a08:	2320      	movs	r3, #32
 8004a0a:	e003      	b.n	8004a14 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8004a0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a0e:	fab3 f383 	clz	r3, r3
 8004a12:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d106      	bne.n	8004a26 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2103      	movs	r1, #3
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff f989 	bl	8003d38 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff fa54 	bl	8003ed8 <LL_ADC_IsEnabled>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f040 8140 	bne.w	8004cb8 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6818      	ldr	r0, [r3, #0]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	6819      	ldr	r1, [r3, #0]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	461a      	mov	r2, r3
 8004a46:	f7ff fa15 	bl	8003e74 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	4a8f      	ldr	r2, [pc, #572]	@ (8004c8c <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	f040 8131 	bne.w	8004cb8 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10b      	bne.n	8004a7e <HAL_ADCEx_InjectedConfigChannel+0x672>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	0e9b      	lsrs	r3, r3, #26
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	f003 031f 	and.w	r3, r3, #31
 8004a72:	2b09      	cmp	r3, #9
 8004a74:	bf94      	ite	ls
 8004a76:	2301      	movls	r3, #1
 8004a78:	2300      	movhi	r3, #0
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	e019      	b.n	8004ab2 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a86:	fa93 f3a3 	rbit	r3, r3
 8004a8a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004a8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004a90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8004a96:	2320      	movs	r3, #32
 8004a98:	e003      	b.n	8004aa2 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8004a9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a9c:	fab3 f383 	clz	r3, r3
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	f003 031f 	and.w	r3, r3, #31
 8004aa8:	2b09      	cmp	r3, #9
 8004aaa:	bf94      	ite	ls
 8004aac:	2301      	movls	r3, #1
 8004aae:	2300      	movhi	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d079      	beq.n	8004baa <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d107      	bne.n	8004ad2 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	0e9b      	lsrs	r3, r3, #26
 8004ac8:	3301      	adds	r3, #1
 8004aca:	069b      	lsls	r3, r3, #26
 8004acc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ad0:	e015      	b.n	8004afe <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ada:	fa93 f3a3 	rbit	r3, r3
 8004ade:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004ae0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ae2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004ae4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8004aea:	2320      	movs	r3, #32
 8004aec:	e003      	b.n	8004af6 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8004aee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004af0:	fab3 f383 	clz	r3, r3
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	3301      	adds	r3, #1
 8004af8:	069b      	lsls	r3, r3, #26
 8004afa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d109      	bne.n	8004b1e <HAL_ADCEx_InjectedConfigChannel+0x712>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	0e9b      	lsrs	r3, r3, #26
 8004b10:	3301      	adds	r3, #1
 8004b12:	f003 031f 	and.w	r3, r3, #31
 8004b16:	2101      	movs	r1, #1
 8004b18:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1c:	e017      	b.n	8004b4e <HAL_ADCEx_InjectedConfigChannel+0x742>
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b26:	fa93 f3a3 	rbit	r3, r3
 8004b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b2e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8004b36:	2320      	movs	r3, #32
 8004b38:	e003      	b.n	8004b42 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8004b3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b3c:	fab3 f383 	clz	r3, r3
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	3301      	adds	r3, #1
 8004b44:	f003 031f 	and.w	r3, r3, #31
 8004b48:	2101      	movs	r1, #1
 8004b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4e:	ea42 0103 	orr.w	r1, r2, r3
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10a      	bne.n	8004b74 <HAL_ADCEx_InjectedConfigChannel+0x768>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	0e9b      	lsrs	r3, r3, #26
 8004b64:	3301      	adds	r3, #1
 8004b66:	f003 021f 	and.w	r2, r3, #31
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	4413      	add	r3, r2
 8004b70:	051b      	lsls	r3, r3, #20
 8004b72:	e018      	b.n	8004ba6 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b7c:	fa93 f3a3 	rbit	r3, r3
 8004b80:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b84:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8004b8c:	2320      	movs	r3, #32
 8004b8e:	e003      	b.n	8004b98 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8004b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b92:	fab3 f383 	clz	r3, r3
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	3301      	adds	r3, #1
 8004b9a:	f003 021f 	and.w	r2, r3, #31
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	4413      	add	r3, r2
 8004ba4:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ba6:	430b      	orrs	r3, r1
 8004ba8:	e081      	b.n	8004cae <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d107      	bne.n	8004bc6 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	0e9b      	lsrs	r3, r3, #26
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	069b      	lsls	r3, r3, #26
 8004bc0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004bc4:	e015      	b.n	8004bf2 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bce:	fa93 f3a3 	rbit	r3, r3
 8004bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8004bde:	2320      	movs	r3, #32
 8004be0:	e003      	b.n	8004bea <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8004be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004be4:	fab3 f383 	clz	r3, r3
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	3301      	adds	r3, #1
 8004bec:	069b      	lsls	r3, r3, #26
 8004bee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d109      	bne.n	8004c12 <HAL_ADCEx_InjectedConfigChannel+0x806>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	0e9b      	lsrs	r3, r3, #26
 8004c04:	3301      	adds	r3, #1
 8004c06:	f003 031f 	and.w	r3, r3, #31
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c10:	e017      	b.n	8004c42 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	fa93 f3a3 	rbit	r3, r3
 8004c1e:	61bb      	str	r3, [r7, #24]
  return result;
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8004c2a:	2320      	movs	r3, #32
 8004c2c:	e003      	b.n	8004c36 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	fab3 f383 	clz	r3, r3
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	3301      	adds	r3, #1
 8004c38:	f003 031f 	and.w	r3, r3, #31
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c42:	ea42 0103 	orr.w	r1, r2, r3
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10d      	bne.n	8004c6e <HAL_ADCEx_InjectedConfigChannel+0x862>
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	0e9b      	lsrs	r3, r3, #26
 8004c58:	3301      	adds	r3, #1
 8004c5a:	f003 021f 	and.w	r2, r3, #31
 8004c5e:	4613      	mov	r3, r2
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	4413      	add	r3, r2
 8004c64:	3b1e      	subs	r3, #30
 8004c66:	051b      	lsls	r3, r3, #20
 8004c68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c6c:	e01e      	b.n	8004cac <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	fa93 f3a3 	rbit	r3, r3
 8004c7a:	60fb      	str	r3, [r7, #12]
  return result;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d104      	bne.n	8004c90 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 8004c86:	2320      	movs	r3, #32
 8004c88:	e006      	b.n	8004c98 <HAL_ADCEx_InjectedConfigChannel+0x88c>
 8004c8a:	bf00      	nop
 8004c8c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	fab3 f383 	clz	r3, r3
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	3301      	adds	r3, #1
 8004c9a:	f003 021f 	and.w	r2, r3, #31
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	4413      	add	r3, r2
 8004ca4:	3b1e      	subs	r3, #30
 8004ca6:	051b      	lsls	r3, r3, #20
 8004ca8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cac:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	f7ff f8b2 	bl	8003e1c <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	4b3a      	ldr	r3, [pc, #232]	@ (8004da8 <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d067      	beq.n	8004d94 <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004cc4:	4839      	ldr	r0, [pc, #228]	@ (8004dac <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004cc6:	f7fe ffef 	bl	8003ca8 <LL_ADC_GetCommonPathInternalCh>
 8004cca:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a37      	ldr	r2, [pc, #220]	@ (8004db0 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d004      	beq.n	8004ce2 <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a35      	ldr	r2, [pc, #212]	@ (8004db4 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d127      	bne.n	8004d32 <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ce2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ce6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d121      	bne.n	8004d32 <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cf6:	d14d      	bne.n	8004d94 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cf8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004cfc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004d00:	4619      	mov	r1, r3
 8004d02:	482a      	ldr	r0, [pc, #168]	@ (8004dac <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004d04:	f7fe ffbd 	bl	8003c82 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004d08:	4b2b      	ldr	r3, [pc, #172]	@ (8004db8 <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	099b      	lsrs	r3, r3, #6
 8004d0e:	4a2b      	ldr	r2, [pc, #172]	@ (8004dbc <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8004d10:	fba2 2303 	umull	r2, r3, r2, r3
 8004d14:	099a      	lsrs	r2, r3, #6
 8004d16:	4613      	mov	r3, r2
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004d20:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004d22:	e002      	b.n	8004d2a <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	3b01      	subs	r3, #1
 8004d28:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1f9      	bne.n	8004d24 <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d30:	e030      	b.n	8004d94 <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a22      	ldr	r2, [pc, #136]	@ (8004dc0 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d113      	bne.n	8004d64 <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10d      	bne.n	8004d64 <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8004dc4 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d020      	beq.n	8004d94 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4813      	ldr	r0, [pc, #76]	@ (8004dac <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004d5e:	f7fe ff90 	bl	8003c82 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d62:	e017      	b.n	8004d94 <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a17      	ldr	r2, [pc, #92]	@ (8004dc8 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d112      	bne.n	8004d94 <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10c      	bne.n	8004d94 <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a11      	ldr	r2, [pc, #68]	@ (8004dc4 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d007      	beq.n	8004d94 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d88:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4807      	ldr	r0, [pc, #28]	@ (8004dac <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004d90:	f7fe ff77 	bl	8003c82 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004d9c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	37d8      	adds	r7, #216	@ 0xd8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	80080000 	.word	0x80080000
 8004dac:	50000300 	.word	0x50000300
 8004db0:	c3210000 	.word	0xc3210000
 8004db4:	90c00010 	.word	0x90c00010
 8004db8:	20000000 	.word	0x20000000
 8004dbc:	053e2d63 	.word	0x053e2d63
 8004dc0:	c7520000 	.word	0xc7520000
 8004dc4:	50000100 	.word	0x50000100
 8004dc8:	cb840000 	.word	0xcb840000

08004dcc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004dcc:	b590      	push	{r4, r7, lr}
 8004dce:	b0a1      	sub	sp, #132	@ 0x84
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004de6:	2302      	movs	r3, #2
 8004de8:	e08b      	b.n	8004f02 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004df2:	2300      	movs	r3, #0
 8004df4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004df6:	2300      	movs	r3, #0
 8004df8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e02:	d102      	bne.n	8004e0a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004e04:	4b41      	ldr	r3, [pc, #260]	@ (8004f0c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004e06:	60bb      	str	r3, [r7, #8]
 8004e08:	e001      	b.n	8004e0e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10b      	bne.n	8004e2c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e18:	f043 0220 	orr.w	r2, r3, #32
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e06a      	b.n	8004f02 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7ff f892 	bl	8003f58 <LL_ADC_REG_IsConversionOngoing>
 8004e34:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7ff f88c 	bl	8003f58 <LL_ADC_REG_IsConversionOngoing>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d14c      	bne.n	8004ee0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004e46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d149      	bne.n	8004ee0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004e4c:	4b30      	ldr	r3, [pc, #192]	@ (8004f10 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004e4e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d028      	beq.n	8004eaa <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004e58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	6859      	ldr	r1, [r3, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004e6a:	035b      	lsls	r3, r3, #13
 8004e6c:	430b      	orrs	r3, r1
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e72:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e74:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004e78:	f7ff f82e 	bl	8003ed8 <LL_ADC_IsEnabled>
 8004e7c:	4604      	mov	r4, r0
 8004e7e:	4823      	ldr	r0, [pc, #140]	@ (8004f0c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004e80:	f7ff f82a 	bl	8003ed8 <LL_ADC_IsEnabled>
 8004e84:	4603      	mov	r3, r0
 8004e86:	4323      	orrs	r3, r4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d133      	bne.n	8004ef4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004e8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004e94:	f023 030f 	bic.w	r3, r3, #15
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	6811      	ldr	r1, [r2, #0]
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	6892      	ldr	r2, [r2, #8]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ea6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ea8:	e024      	b.n	8004ef4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004eaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004eb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004eb4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004eb6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004eba:	f7ff f80d 	bl	8003ed8 <LL_ADC_IsEnabled>
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	4812      	ldr	r0, [pc, #72]	@ (8004f0c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004ec2:	f7ff f809 	bl	8003ed8 <LL_ADC_IsEnabled>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	4323      	orrs	r3, r4
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d112      	bne.n	8004ef4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004ece:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004ed6:	f023 030f 	bic.w	r3, r3, #15
 8004eda:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004edc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ede:	e009      	b.n	8004ef4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ee4:	f043 0220 	orr.w	r2, r3, #32
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004ef2:	e000      	b.n	8004ef6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ef4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004efe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3784      	adds	r7, #132	@ 0x84
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd90      	pop	{r4, r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	50000100 	.word	0x50000100
 8004f10:	50000300 	.word	0x50000300

08004f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f003 0307 	and.w	r3, r3, #7
 8004f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f24:	4b0c      	ldr	r3, [pc, #48]	@ (8004f58 <__NVIC_SetPriorityGrouping+0x44>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004f30:	4013      	ands	r3, r2
 8004f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004f40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f46:	4a04      	ldr	r2, [pc, #16]	@ (8004f58 <__NVIC_SetPriorityGrouping+0x44>)
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	60d3      	str	r3, [r2, #12]
}
 8004f4c:	bf00      	nop
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	e000ed00 	.word	0xe000ed00

08004f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f60:	4b04      	ldr	r3, [pc, #16]	@ (8004f74 <__NVIC_GetPriorityGrouping+0x18>)
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	0a1b      	lsrs	r3, r3, #8
 8004f66:	f003 0307 	and.w	r3, r3, #7
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	e000ed00 	.word	0xe000ed00

08004f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	db0b      	blt.n	8004fa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f8a:	79fb      	ldrb	r3, [r7, #7]
 8004f8c:	f003 021f 	and.w	r2, r3, #31
 8004f90:	4907      	ldr	r1, [pc, #28]	@ (8004fb0 <__NVIC_EnableIRQ+0x38>)
 8004f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f96:	095b      	lsrs	r3, r3, #5
 8004f98:	2001      	movs	r0, #1
 8004f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004fa2:	bf00      	nop
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	e000e100 	.word	0xe000e100

08004fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	4603      	mov	r3, r0
 8004fbc:	6039      	str	r1, [r7, #0]
 8004fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	db0a      	blt.n	8004fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	490c      	ldr	r1, [pc, #48]	@ (8005000 <__NVIC_SetPriority+0x4c>)
 8004fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd2:	0112      	lsls	r2, r2, #4
 8004fd4:	b2d2      	uxtb	r2, r2
 8004fd6:	440b      	add	r3, r1
 8004fd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fdc:	e00a      	b.n	8004ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	4908      	ldr	r1, [pc, #32]	@ (8005004 <__NVIC_SetPriority+0x50>)
 8004fe4:	79fb      	ldrb	r3, [r7, #7]
 8004fe6:	f003 030f 	and.w	r3, r3, #15
 8004fea:	3b04      	subs	r3, #4
 8004fec:	0112      	lsls	r2, r2, #4
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	761a      	strb	r2, [r3, #24]
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	e000e100 	.word	0xe000e100
 8005004:	e000ed00 	.word	0xe000ed00

08005008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005008:	b480      	push	{r7}
 800500a:	b089      	sub	sp, #36	@ 0x24
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	f1c3 0307 	rsb	r3, r3, #7
 8005022:	2b04      	cmp	r3, #4
 8005024:	bf28      	it	cs
 8005026:	2304      	movcs	r3, #4
 8005028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	3304      	adds	r3, #4
 800502e:	2b06      	cmp	r3, #6
 8005030:	d902      	bls.n	8005038 <NVIC_EncodePriority+0x30>
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	3b03      	subs	r3, #3
 8005036:	e000      	b.n	800503a <NVIC_EncodePriority+0x32>
 8005038:	2300      	movs	r3, #0
 800503a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800503c:	f04f 32ff 	mov.w	r2, #4294967295
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	fa02 f303 	lsl.w	r3, r2, r3
 8005046:	43da      	mvns	r2, r3
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	401a      	ands	r2, r3
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005050:	f04f 31ff 	mov.w	r1, #4294967295
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	fa01 f303 	lsl.w	r3, r1, r3
 800505a:	43d9      	mvns	r1, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005060:	4313      	orrs	r3, r2
         );
}
 8005062:	4618      	mov	r0, r3
 8005064:	3724      	adds	r7, #36	@ 0x24
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
	...

08005070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3b01      	subs	r3, #1
 800507c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005080:	d301      	bcc.n	8005086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005082:	2301      	movs	r3, #1
 8005084:	e00f      	b.n	80050a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005086:	4a0a      	ldr	r2, [pc, #40]	@ (80050b0 <SysTick_Config+0x40>)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3b01      	subs	r3, #1
 800508c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800508e:	210f      	movs	r1, #15
 8005090:	f04f 30ff 	mov.w	r0, #4294967295
 8005094:	f7ff ff8e 	bl	8004fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005098:	4b05      	ldr	r3, [pc, #20]	@ (80050b0 <SysTick_Config+0x40>)
 800509a:	2200      	movs	r2, #0
 800509c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800509e:	4b04      	ldr	r3, [pc, #16]	@ (80050b0 <SysTick_Config+0x40>)
 80050a0:	2207      	movs	r2, #7
 80050a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	e000e010 	.word	0xe000e010

080050b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7ff ff29 	bl	8004f14 <__NVIC_SetPriorityGrouping>
}
 80050c2:	bf00      	nop
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b086      	sub	sp, #24
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	4603      	mov	r3, r0
 80050d2:	60b9      	str	r1, [r7, #8]
 80050d4:	607a      	str	r2, [r7, #4]
 80050d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80050d8:	f7ff ff40 	bl	8004f5c <__NVIC_GetPriorityGrouping>
 80050dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	68b9      	ldr	r1, [r7, #8]
 80050e2:	6978      	ldr	r0, [r7, #20]
 80050e4:	f7ff ff90 	bl	8005008 <NVIC_EncodePriority>
 80050e8:	4602      	mov	r2, r0
 80050ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050ee:	4611      	mov	r1, r2
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff ff5f 	bl	8004fb4 <__NVIC_SetPriority>
}
 80050f6:	bf00      	nop
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b082      	sub	sp, #8
 8005102:	af00      	add	r7, sp, #0
 8005104:	4603      	mov	r3, r0
 8005106:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800510c:	4618      	mov	r0, r3
 800510e:	f7ff ff33 	bl	8004f78 <__NVIC_EnableIRQ>
}
 8005112:	bf00      	nop
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b082      	sub	sp, #8
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7ff ffa4 	bl	8005070 <SysTick_Config>
 8005128:	4603      	mov	r3, r0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b082      	sub	sp, #8
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e014      	b.n	800516e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	791b      	ldrb	r3, [r3, #4]
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d105      	bne.n	800515a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7fc f9b1 	bl	80014bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2202      	movs	r2, #2
 800515e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
	...

08005178 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08a      	sub	sp, #40	@ 0x28
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005184:	2300      	movs	r3, #0
 8005186:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <HAL_DAC_ConfigChannel+0x1c>
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e19e      	b.n	80054d6 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	795b      	ldrb	r3, [r3, #5]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d101      	bne.n	80051a4 <HAL_DAC_ConfigChannel+0x2c>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e198      	b.n	80054d6 <HAL_DAC_ConfigChannel+0x35e>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2201      	movs	r2, #1
 80051a8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2202      	movs	r2, #2
 80051ae:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	2b04      	cmp	r3, #4
 80051b6:	d17a      	bne.n	80052ae <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80051b8:	f7fd f996 	bl	80024e8 <HAL_GetTick>
 80051bc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d13d      	bne.n	8005240 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80051c4:	e018      	b.n	80051f8 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80051c6:	f7fd f98f 	bl	80024e8 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d911      	bls.n	80051f8 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f043 0208 	orr.w	r2, r3, #8
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2203      	movs	r2, #3
 80051f2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e16e      	b.n	80054d6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1df      	bne.n	80051c6 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800520e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005210:	e020      	b.n	8005254 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005212:	f7fd f969 	bl	80024e8 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b01      	cmp	r3, #1
 800521e:	d90f      	bls.n	8005240 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005226:	2b00      	cmp	r3, #0
 8005228:	da0a      	bge.n	8005240 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f043 0208 	orr.w	r2, r3, #8
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2203      	movs	r2, #3
 800523a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e14a      	b.n	80054d6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005246:	2b00      	cmp	r3, #0
 8005248:	dbe3      	blt.n	8005212 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005252:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f003 0310 	and.w	r3, r3, #16
 8005260:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005264:	fa01 f303 	lsl.w	r3, r1, r3
 8005268:	43db      	mvns	r3, r3
 800526a:	ea02 0103 	and.w	r1, r2, r3
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f003 0310 	and.w	r3, r3, #16
 8005278:	409a      	lsls	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f003 0310 	and.w	r3, r3, #16
 800528e:	21ff      	movs	r1, #255	@ 0xff
 8005290:	fa01 f303 	lsl.w	r3, r1, r3
 8005294:	43db      	mvns	r3, r3
 8005296:	ea02 0103 	and.w	r1, r2, r3
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f003 0310 	and.w	r3, r3, #16
 80052a4:	409a      	lsls	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d11d      	bne.n	80052f2 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052bc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f003 0310 	and.w	r3, r3, #16
 80052c4:	221f      	movs	r2, #31
 80052c6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ca:	43db      	mvns	r3, r3
 80052cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ce:	4013      	ands	r3, r2
 80052d0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f003 0310 	and.w	r3, r3, #16
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	fa02 f303 	lsl.w	r3, r2, r3
 80052e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052e6:	4313      	orrs	r3, r2
 80052e8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052f0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f003 0310 	and.w	r3, r3, #16
 8005300:	2207      	movs	r2, #7
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	43db      	mvns	r3, r3
 8005308:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800530a:	4013      	ands	r3, r2
 800530c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d102      	bne.n	800531c <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8005316:	2300      	movs	r3, #0
 8005318:	623b      	str	r3, [r7, #32]
 800531a:	e00f      	b.n	800533c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	2b02      	cmp	r3, #2
 8005322:	d102      	bne.n	800532a <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005324:	2301      	movs	r3, #1
 8005326:	623b      	str	r3, [r7, #32]
 8005328:	e008      	b.n	800533c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d102      	bne.n	8005338 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005332:	2301      	movs	r3, #1
 8005334:	623b      	str	r3, [r7, #32]
 8005336:	e001      	b.n	800533c <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005338:	2300      	movs	r3, #0
 800533a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	4313      	orrs	r3, r2
 8005346:	6a3a      	ldr	r2, [r7, #32]
 8005348:	4313      	orrs	r3, r2
 800534a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f003 0310 	and.w	r3, r3, #16
 8005352:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005356:	fa02 f303 	lsl.w	r3, r2, r3
 800535a:	43db      	mvns	r3, r3
 800535c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800535e:	4013      	ands	r3, r2
 8005360:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	791b      	ldrb	r3, [r3, #4]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d102      	bne.n	8005370 <HAL_DAC_ConfigChannel+0x1f8>
 800536a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800536e:	e000      	b.n	8005372 <HAL_DAC_ConfigChannel+0x1fa>
 8005370:	2300      	movs	r3, #0
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	4313      	orrs	r3, r2
 8005376:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f003 0310 	and.w	r3, r3, #16
 800537e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005382:	fa02 f303 	lsl.w	r3, r2, r3
 8005386:	43db      	mvns	r3, r3
 8005388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800538a:	4013      	ands	r3, r2
 800538c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	795b      	ldrb	r3, [r3, #5]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d102      	bne.n	800539c <HAL_DAC_ConfigChannel+0x224>
 8005396:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800539a:	e000      	b.n	800539e <HAL_DAC_ConfigChannel+0x226>
 800539c:	2300      	movs	r3, #0
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80053a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80053aa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d114      	bne.n	80053de <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80053b4:	f001 fac8 	bl	8006948 <HAL_RCC_GetHCLKFreq>
 80053b8:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	4a48      	ldr	r2, [pc, #288]	@ (80054e0 <HAL_DAC_ConfigChannel+0x368>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d904      	bls.n	80053cc <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80053c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80053ca:	e00f      	b.n	80053ec <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	4a45      	ldr	r2, [pc, #276]	@ (80054e4 <HAL_DAC_ConfigChannel+0x36c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d90a      	bls.n	80053ea <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80053d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053da:	627b      	str	r3, [r7, #36]	@ 0x24
 80053dc:	e006      	b.n	80053ec <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053e4:	4313      	orrs	r3, r2
 80053e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80053e8:	e000      	b.n	80053ec <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80053ea:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f003 0310 	and.w	r3, r3, #16
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	fa02 f303 	lsl.w	r3, r2, r3
 80053f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053fa:	4313      	orrs	r3, r2
 80053fc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005404:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6819      	ldr	r1, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f003 0310 	and.w	r3, r3, #16
 8005412:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	43da      	mvns	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	400a      	ands	r2, r1
 8005422:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f003 0310 	and.w	r3, r3, #16
 8005432:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005436:	fa02 f303 	lsl.w	r3, r2, r3
 800543a:	43db      	mvns	r3, r3
 800543c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800543e:	4013      	ands	r3, r2
 8005440:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f003 0310 	and.w	r3, r3, #16
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	fa02 f303 	lsl.w	r3, r2, r3
 8005454:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005456:	4313      	orrs	r3, r2
 8005458:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005460:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6819      	ldr	r1, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f003 0310 	and.w	r3, r3, #16
 800546e:	22c0      	movs	r2, #192	@ 0xc0
 8005470:	fa02 f303 	lsl.w	r3, r2, r3
 8005474:	43da      	mvns	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	400a      	ands	r2, r1
 800547c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	089b      	lsrs	r3, r3, #2
 8005484:	f003 030f 	and.w	r3, r3, #15
 8005488:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	089b      	lsrs	r3, r3, #2
 8005490:	021b      	lsls	r3, r3, #8
 8005492:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	4313      	orrs	r3, r2
 800549a:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f003 0310 	and.w	r3, r3, #16
 80054a8:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80054ac:	fa01 f303 	lsl.w	r3, r1, r3
 80054b0:	43db      	mvns	r3, r3
 80054b2:	ea02 0103 	and.w	r1, r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f003 0310 	and.w	r3, r3, #16
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	409a      	lsls	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2201      	movs	r2, #1
 80054cc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80054d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3728      	adds	r7, #40	@ 0x28
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	09896800 	.word	0x09896800
 80054e4:	04c4b400 	.word	0x04c4b400

080054e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e08d      	b.n	8005616 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	4b47      	ldr	r3, [pc, #284]	@ (8005620 <HAL_DMA_Init+0x138>)
 8005502:	429a      	cmp	r2, r3
 8005504:	d80f      	bhi.n	8005526 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	461a      	mov	r2, r3
 800550c:	4b45      	ldr	r3, [pc, #276]	@ (8005624 <HAL_DMA_Init+0x13c>)
 800550e:	4413      	add	r3, r2
 8005510:	4a45      	ldr	r2, [pc, #276]	@ (8005628 <HAL_DMA_Init+0x140>)
 8005512:	fba2 2303 	umull	r2, r3, r2, r3
 8005516:	091b      	lsrs	r3, r3, #4
 8005518:	009a      	lsls	r2, r3, #2
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a42      	ldr	r2, [pc, #264]	@ (800562c <HAL_DMA_Init+0x144>)
 8005522:	641a      	str	r2, [r3, #64]	@ 0x40
 8005524:	e00e      	b.n	8005544 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	4b40      	ldr	r3, [pc, #256]	@ (8005630 <HAL_DMA_Init+0x148>)
 800552e:	4413      	add	r3, r2
 8005530:	4a3d      	ldr	r2, [pc, #244]	@ (8005628 <HAL_DMA_Init+0x140>)
 8005532:	fba2 2303 	umull	r2, r3, r2, r3
 8005536:	091b      	lsrs	r3, r3, #4
 8005538:	009a      	lsls	r2, r3, #2
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a3c      	ldr	r2, [pc, #240]	@ (8005634 <HAL_DMA_Init+0x14c>)
 8005542:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800555a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800555e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005568:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005574:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005580:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fa76 	bl	8005a88 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055a4:	d102      	bne.n	80055ac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055b4:	b2d2      	uxtb	r2, r2
 80055b6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80055c0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d010      	beq.n	80055ec <HAL_DMA_Init+0x104>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2b04      	cmp	r3, #4
 80055d0:	d80c      	bhi.n	80055ec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fa96 	bl	8005b04 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055dc:	2200      	movs	r2, #0
 80055de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80055e8:	605a      	str	r2, [r3, #4]
 80055ea:	e008      	b.n	80055fe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	40020407 	.word	0x40020407
 8005624:	bffdfff8 	.word	0xbffdfff8
 8005628:	cccccccd 	.word	0xcccccccd
 800562c:	40020000 	.word	0x40020000
 8005630:	bffdfbf8 	.word	0xbffdfbf8
 8005634:	40020400 	.word	0x40020400

08005638 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005650:	2b01      	cmp	r3, #1
 8005652:	d101      	bne.n	8005658 <HAL_DMA_Start_IT+0x20>
 8005654:	2302      	movs	r3, #2
 8005656:	e066      	b.n	8005726 <HAL_DMA_Start_IT+0xee>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b01      	cmp	r3, #1
 800566a:	d155      	bne.n	8005718 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 0201 	bic.w	r2, r2, #1
 8005688:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	68b9      	ldr	r1, [r7, #8]
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 f9bb 	bl	8005a0c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800569a:	2b00      	cmp	r3, #0
 800569c:	d008      	beq.n	80056b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f042 020e 	orr.w	r2, r2, #14
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	e00f      	b.n	80056d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 0204 	bic.w	r2, r2, #4
 80056be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 020a 	orr.w	r2, r2, #10
 80056ce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d007      	beq.n	80056ee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056ec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d007      	beq.n	8005706 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005700:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005704:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f042 0201 	orr.w	r2, r2, #1
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	e005      	b.n	8005724 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005720:	2302      	movs	r3, #2
 8005722:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005724:	7dfb      	ldrb	r3, [r7, #23]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800572e:	b480      	push	{r7}
 8005730:	b085      	sub	sp, #20
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d005      	beq.n	8005752 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2204      	movs	r2, #4
 800574a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	73fb      	strb	r3, [r7, #15]
 8005750:	e037      	b.n	80057c2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 020e 	bic.w	r2, r2, #14
 8005760:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800576c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005770:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 0201 	bic.w	r2, r2, #1
 8005780:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005786:	f003 021f 	and.w	r2, r3, #31
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578e:	2101      	movs	r1, #1
 8005790:	fa01 f202 	lsl.w	r2, r1, r2
 8005794:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800579e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00c      	beq.n	80057c2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057b6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80057c0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057e8:	2300      	movs	r3, #0
 80057ea:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d00d      	beq.n	8005814 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2204      	movs	r2, #4
 80057fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	73fb      	strb	r3, [r7, #15]
 8005812:	e047      	b.n	80058a4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f022 020e 	bic.w	r2, r2, #14
 8005822:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0201 	bic.w	r2, r2, #1
 8005832:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800583e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005842:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005848:	f003 021f 	and.w	r2, r3, #31
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005850:	2101      	movs	r1, #1
 8005852:	fa01 f202 	lsl.w	r2, r1, r2
 8005856:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005860:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00c      	beq.n	8005884 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005874:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005878:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005882:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005898:	2b00      	cmp	r3, #0
 800589a:	d003      	beq.n	80058a4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	4798      	blx	r3
    }
  }
  return status;
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b084      	sub	sp, #16
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ca:	f003 031f 	and.w	r3, r3, #31
 80058ce:	2204      	movs	r2, #4
 80058d0:	409a      	lsls	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4013      	ands	r3, r2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d026      	beq.n	8005928 <HAL_DMA_IRQHandler+0x7a>
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d021      	beq.n	8005928 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0320 	and.w	r3, r3, #32
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d107      	bne.n	8005902 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0204 	bic.w	r2, r2, #4
 8005900:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005906:	f003 021f 	and.w	r2, r3, #31
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590e:	2104      	movs	r1, #4
 8005910:	fa01 f202 	lsl.w	r2, r1, r2
 8005914:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800591a:	2b00      	cmp	r3, #0
 800591c:	d071      	beq.n	8005a02 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005926:	e06c      	b.n	8005a02 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800592c:	f003 031f 	and.w	r3, r3, #31
 8005930:	2202      	movs	r2, #2
 8005932:	409a      	lsls	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4013      	ands	r3, r2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d02e      	beq.n	800599a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d029      	beq.n	800599a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0320 	and.w	r3, r3, #32
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10b      	bne.n	800596c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 020a 	bic.w	r2, r2, #10
 8005962:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005970:	f003 021f 	and.w	r2, r3, #31
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005978:	2102      	movs	r1, #2
 800597a:	fa01 f202 	lsl.w	r2, r1, r2
 800597e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598c:	2b00      	cmp	r3, #0
 800598e:	d038      	beq.n	8005a02 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005998:	e033      	b.n	8005a02 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800599e:	f003 031f 	and.w	r3, r3, #31
 80059a2:	2208      	movs	r2, #8
 80059a4:	409a      	lsls	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4013      	ands	r3, r2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d02a      	beq.n	8005a04 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f003 0308 	and.w	r3, r3, #8
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d025      	beq.n	8005a04 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 020e 	bic.w	r2, r2, #14
 80059c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059cc:	f003 021f 	and.w	r2, r3, #31
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d4:	2101      	movs	r1, #1
 80059d6:	fa01 f202 	lsl.w	r2, r1, r2
 80059da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d004      	beq.n	8005a04 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005a02:	bf00      	nop
 8005a04:	bf00      	nop
}
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
 8005a18:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005a22:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d004      	beq.n	8005a36 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005a34:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a3a:	f003 021f 	and.w	r2, r3, #31
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a42:	2101      	movs	r1, #1
 8005a44:	fa01 f202 	lsl.w	r2, r1, r2
 8005a48:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	2b10      	cmp	r3, #16
 8005a58:	d108      	bne.n	8005a6c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005a6a:	e007      	b.n	8005a7c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	60da      	str	r2, [r3, #12]
}
 8005a7c:	bf00      	nop
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	461a      	mov	r2, r3
 8005a96:	4b16      	ldr	r3, [pc, #88]	@ (8005af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d802      	bhi.n	8005aa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005a9c:	4b15      	ldr	r3, [pc, #84]	@ (8005af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005a9e:	617b      	str	r3, [r7, #20]
 8005aa0:	e001      	b.n	8005aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005aa2:	4b15      	ldr	r3, [pc, #84]	@ (8005af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005aa4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	3b08      	subs	r3, #8
 8005ab2:	4a12      	ldr	r2, [pc, #72]	@ (8005afc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab8:	091b      	lsrs	r3, r3, #4
 8005aba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ac0:	089b      	lsrs	r3, r3, #2
 8005ac2:	009a      	lsls	r2, r3, #2
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	461a      	mov	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8005b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005ad2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f003 031f 	and.w	r3, r3, #31
 8005ada:	2201      	movs	r2, #1
 8005adc:	409a      	lsls	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005ae2:	bf00      	nop
 8005ae4:	371c      	adds	r7, #28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	40020407 	.word	0x40020407
 8005af4:	40020800 	.word	0x40020800
 8005af8:	40020820 	.word	0x40020820
 8005afc:	cccccccd 	.word	0xcccccccd
 8005b00:	40020880 	.word	0x40020880

08005b04 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	4b0b      	ldr	r3, [pc, #44]	@ (8005b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005b18:	4413      	add	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a08      	ldr	r2, [pc, #32]	@ (8005b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005b26:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	f003 031f 	and.w	r3, r3, #31
 8005b30:	2201      	movs	r2, #1
 8005b32:	409a      	lsls	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005b38:	bf00      	nop
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	1000823f 	.word	0x1000823f
 8005b48:	40020940 	.word	0x40020940

08005b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005b5a:	e15a      	b.n	8005e12 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	2101      	movs	r1, #1
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	fa01 f303 	lsl.w	r3, r1, r3
 8005b68:	4013      	ands	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 814c 	beq.w	8005e0c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f003 0303 	and.w	r3, r3, #3
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d005      	beq.n	8005b8c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d130      	bne.n	8005bee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	2203      	movs	r2, #3
 8005b98:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9c:	43db      	mvns	r3, r3
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	68da      	ldr	r2, [r3, #12]
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bca:	43db      	mvns	r3, r3
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	4013      	ands	r3, r2
 8005bd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	091b      	lsrs	r3, r3, #4
 8005bd8:	f003 0201 	and.w	r2, r3, #1
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	fa02 f303 	lsl.w	r3, r2, r3
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f003 0303 	and.w	r3, r3, #3
 8005bf6:	2b03      	cmp	r3, #3
 8005bf8:	d017      	beq.n	8005c2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	2203      	movs	r2, #3
 8005c06:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0a:	43db      	mvns	r3, r3
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	4013      	ands	r3, r2
 8005c10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	689a      	ldr	r2, [r3, #8]
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f003 0303 	and.w	r3, r3, #3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d123      	bne.n	8005c7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	08da      	lsrs	r2, r3, #3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	3208      	adds	r2, #8
 8005c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f003 0307 	and.w	r3, r3, #7
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	220f      	movs	r2, #15
 8005c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c52:	43db      	mvns	r3, r3
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	4013      	ands	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	691a      	ldr	r2, [r3, #16]
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	08da      	lsrs	r2, r3, #3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	3208      	adds	r2, #8
 8005c78:	6939      	ldr	r1, [r7, #16]
 8005c7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	005b      	lsls	r3, r3, #1
 8005c88:	2203      	movs	r2, #3
 8005c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8e:	43db      	mvns	r3, r3
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	4013      	ands	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f003 0203 	and.w	r2, r3, #3
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 80a6 	beq.w	8005e0c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cc0:	4b5b      	ldr	r3, [pc, #364]	@ (8005e30 <HAL_GPIO_Init+0x2e4>)
 8005cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cc4:	4a5a      	ldr	r2, [pc, #360]	@ (8005e30 <HAL_GPIO_Init+0x2e4>)
 8005cc6:	f043 0301 	orr.w	r3, r3, #1
 8005cca:	6613      	str	r3, [r2, #96]	@ 0x60
 8005ccc:	4b58      	ldr	r3, [pc, #352]	@ (8005e30 <HAL_GPIO_Init+0x2e4>)
 8005cce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	60bb      	str	r3, [r7, #8]
 8005cd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005cd8:	4a56      	ldr	r2, [pc, #344]	@ (8005e34 <HAL_GPIO_Init+0x2e8>)
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	089b      	lsrs	r3, r3, #2
 8005cde:	3302      	adds	r3, #2
 8005ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f003 0303 	and.w	r3, r3, #3
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	220f      	movs	r2, #15
 8005cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf4:	43db      	mvns	r3, r3
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005d02:	d01f      	beq.n	8005d44 <HAL_GPIO_Init+0x1f8>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a4c      	ldr	r2, [pc, #304]	@ (8005e38 <HAL_GPIO_Init+0x2ec>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d019      	beq.n	8005d40 <HAL_GPIO_Init+0x1f4>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a4b      	ldr	r2, [pc, #300]	@ (8005e3c <HAL_GPIO_Init+0x2f0>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d013      	beq.n	8005d3c <HAL_GPIO_Init+0x1f0>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a4a      	ldr	r2, [pc, #296]	@ (8005e40 <HAL_GPIO_Init+0x2f4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d00d      	beq.n	8005d38 <HAL_GPIO_Init+0x1ec>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a49      	ldr	r2, [pc, #292]	@ (8005e44 <HAL_GPIO_Init+0x2f8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d007      	beq.n	8005d34 <HAL_GPIO_Init+0x1e8>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a48      	ldr	r2, [pc, #288]	@ (8005e48 <HAL_GPIO_Init+0x2fc>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d101      	bne.n	8005d30 <HAL_GPIO_Init+0x1e4>
 8005d2c:	2305      	movs	r3, #5
 8005d2e:	e00a      	b.n	8005d46 <HAL_GPIO_Init+0x1fa>
 8005d30:	2306      	movs	r3, #6
 8005d32:	e008      	b.n	8005d46 <HAL_GPIO_Init+0x1fa>
 8005d34:	2304      	movs	r3, #4
 8005d36:	e006      	b.n	8005d46 <HAL_GPIO_Init+0x1fa>
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e004      	b.n	8005d46 <HAL_GPIO_Init+0x1fa>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e002      	b.n	8005d46 <HAL_GPIO_Init+0x1fa>
 8005d40:	2301      	movs	r3, #1
 8005d42:	e000      	b.n	8005d46 <HAL_GPIO_Init+0x1fa>
 8005d44:	2300      	movs	r3, #0
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	f002 0203 	and.w	r2, r2, #3
 8005d4c:	0092      	lsls	r2, r2, #2
 8005d4e:	4093      	lsls	r3, r2
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d56:	4937      	ldr	r1, [pc, #220]	@ (8005e34 <HAL_GPIO_Init+0x2e8>)
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	089b      	lsrs	r3, r3, #2
 8005d5c:	3302      	adds	r3, #2
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d64:	4b39      	ldr	r3, [pc, #228]	@ (8005e4c <HAL_GPIO_Init+0x300>)
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	43db      	mvns	r3, r3
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	4013      	ands	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d003      	beq.n	8005d88 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005d88:	4a30      	ldr	r2, [pc, #192]	@ (8005e4c <HAL_GPIO_Init+0x300>)
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005d8e:	4b2f      	ldr	r3, [pc, #188]	@ (8005e4c <HAL_GPIO_Init+0x300>)
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	43db      	mvns	r3, r3
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005db2:	4a26      	ldr	r2, [pc, #152]	@ (8005e4c <HAL_GPIO_Init+0x300>)
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005db8:	4b24      	ldr	r3, [pc, #144]	@ (8005e4c <HAL_GPIO_Init+0x300>)
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	43db      	mvns	r3, r3
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8005e4c <HAL_GPIO_Init+0x300>)
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005de2:	4b1a      	ldr	r3, [pc, #104]	@ (8005e4c <HAL_GPIO_Init+0x300>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	43db      	mvns	r3, r3
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	4013      	ands	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005e06:	4a11      	ldr	r2, [pc, #68]	@ (8005e4c <HAL_GPIO_Init+0x300>)
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	fa22 f303 	lsr.w	r3, r2, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f47f ae9d 	bne.w	8005b5c <HAL_GPIO_Init+0x10>
  }
}
 8005e22:	bf00      	nop
 8005e24:	bf00      	nop
 8005e26:	371c      	adds	r7, #28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	40021000 	.word	0x40021000
 8005e34:	40010000 	.word	0x40010000
 8005e38:	48000400 	.word	0x48000400
 8005e3c:	48000800 	.word	0x48000800
 8005e40:	48000c00 	.word	0x48000c00
 8005e44:	48001000 	.word	0x48001000
 8005e48:	48001400 	.word	0x48001400
 8005e4c:	40010400 	.word	0x40010400

08005e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	460b      	mov	r3, r1
 8005e5a:	807b      	strh	r3, [r7, #2]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e60:	787b      	ldrb	r3, [r7, #1]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e66:	887a      	ldrh	r2, [r7, #2]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005e6c:	e002      	b.n	8005e74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e6e:	887a      	ldrh	r2, [r7, #2]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d141      	bne.n	8005f12 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e8e:	4b4b      	ldr	r3, [pc, #300]	@ (8005fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005e96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e9a:	d131      	bne.n	8005f00 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e9c:	4b47      	ldr	r3, [pc, #284]	@ (8005fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ea2:	4a46      	ldr	r2, [pc, #280]	@ (8005fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ea4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ea8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005eac:	4b43      	ldr	r3, [pc, #268]	@ (8005fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005eb4:	4a41      	ldr	r2, [pc, #260]	@ (8005fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005eba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ebc:	4b40      	ldr	r3, [pc, #256]	@ (8005fc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2232      	movs	r2, #50	@ 0x32
 8005ec2:	fb02 f303 	mul.w	r3, r2, r3
 8005ec6:	4a3f      	ldr	r2, [pc, #252]	@ (8005fc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ecc:	0c9b      	lsrs	r3, r3, #18
 8005ece:	3301      	adds	r3, #1
 8005ed0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ed2:	e002      	b.n	8005eda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005eda:	4b38      	ldr	r3, [pc, #224]	@ (8005fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ee6:	d102      	bne.n	8005eee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1f2      	bne.n	8005ed4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005eee:	4b33      	ldr	r3, [pc, #204]	@ (8005fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005efa:	d158      	bne.n	8005fae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e057      	b.n	8005fb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f00:	4b2e      	ldr	r3, [pc, #184]	@ (8005fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f06:	4a2d      	ldr	r2, [pc, #180]	@ (8005fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005f10:	e04d      	b.n	8005fae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f18:	d141      	bne.n	8005f9e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f1a:	4b28      	ldr	r3, [pc, #160]	@ (8005fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f26:	d131      	bne.n	8005f8c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f28:	4b24      	ldr	r3, [pc, #144]	@ (8005fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f2e:	4a23      	ldr	r2, [pc, #140]	@ (8005fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f38:	4b20      	ldr	r3, [pc, #128]	@ (8005fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f40:	4a1e      	ldr	r2, [pc, #120]	@ (8005fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f48:	4b1d      	ldr	r3, [pc, #116]	@ (8005fc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2232      	movs	r2, #50	@ 0x32
 8005f4e:	fb02 f303 	mul.w	r3, r2, r3
 8005f52:	4a1c      	ldr	r2, [pc, #112]	@ (8005fc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005f54:	fba2 2303 	umull	r2, r3, r2, r3
 8005f58:	0c9b      	lsrs	r3, r3, #18
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f5e:	e002      	b.n	8005f66 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f66:	4b15      	ldr	r3, [pc, #84]	@ (8005fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f72:	d102      	bne.n	8005f7a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1f2      	bne.n	8005f60 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f7a:	4b10      	ldr	r3, [pc, #64]	@ (8005fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f86:	d112      	bne.n	8005fae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e011      	b.n	8005fb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f92:	4a0a      	ldr	r2, [pc, #40]	@ (8005fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005f9c:	e007      	b.n	8005fae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f9e:	4b07      	ldr	r3, [pc, #28]	@ (8005fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005fa6:	4a05      	ldr	r2, [pc, #20]	@ (8005fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fa8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005fac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	40007000 	.word	0x40007000
 8005fc0:	20000000 	.word	0x20000000
 8005fc4:	431bde83 	.word	0x431bde83

08005fc8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005fcc:	4b05      	ldr	r3, [pc, #20]	@ (8005fe4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	4a04      	ldr	r2, [pc, #16]	@ (8005fe4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005fd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005fd6:	6093      	str	r3, [r2, #8]
}
 8005fd8:	bf00      	nop
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	40007000 	.word	0x40007000

08005fe8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b088      	sub	sp, #32
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e2fe      	b.n	80065f8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d075      	beq.n	80060f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006006:	4b97      	ldr	r3, [pc, #604]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f003 030c 	and.w	r3, r3, #12
 800600e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006010:	4b94      	ldr	r3, [pc, #592]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f003 0303 	and.w	r3, r3, #3
 8006018:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	2b0c      	cmp	r3, #12
 800601e:	d102      	bne.n	8006026 <HAL_RCC_OscConfig+0x3e>
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	2b03      	cmp	r3, #3
 8006024:	d002      	beq.n	800602c <HAL_RCC_OscConfig+0x44>
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	2b08      	cmp	r3, #8
 800602a:	d10b      	bne.n	8006044 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800602c:	4b8d      	ldr	r3, [pc, #564]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d05b      	beq.n	80060f0 <HAL_RCC_OscConfig+0x108>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d157      	bne.n	80060f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e2d9      	b.n	80065f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800604c:	d106      	bne.n	800605c <HAL_RCC_OscConfig+0x74>
 800604e:	4b85      	ldr	r3, [pc, #532]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a84      	ldr	r2, [pc, #528]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 8006054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006058:	6013      	str	r3, [r2, #0]
 800605a:	e01d      	b.n	8006098 <HAL_RCC_OscConfig+0xb0>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006064:	d10c      	bne.n	8006080 <HAL_RCC_OscConfig+0x98>
 8006066:	4b7f      	ldr	r3, [pc, #508]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a7e      	ldr	r2, [pc, #504]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 800606c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006070:	6013      	str	r3, [r2, #0]
 8006072:	4b7c      	ldr	r3, [pc, #496]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a7b      	ldr	r2, [pc, #492]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 8006078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	e00b      	b.n	8006098 <HAL_RCC_OscConfig+0xb0>
 8006080:	4b78      	ldr	r3, [pc, #480]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a77      	ldr	r2, [pc, #476]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 8006086:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800608a:	6013      	str	r3, [r2, #0]
 800608c:	4b75      	ldr	r3, [pc, #468]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a74      	ldr	r2, [pc, #464]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 8006092:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d013      	beq.n	80060c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a0:	f7fc fa22 	bl	80024e8 <HAL_GetTick>
 80060a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060a6:	e008      	b.n	80060ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060a8:	f7fc fa1e 	bl	80024e8 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b64      	cmp	r3, #100	@ 0x64
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e29e      	b.n	80065f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060ba:	4b6a      	ldr	r3, [pc, #424]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0f0      	beq.n	80060a8 <HAL_RCC_OscConfig+0xc0>
 80060c6:	e014      	b.n	80060f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c8:	f7fc fa0e 	bl	80024e8 <HAL_GetTick>
 80060cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060ce:	e008      	b.n	80060e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060d0:	f7fc fa0a 	bl	80024e8 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	2b64      	cmp	r3, #100	@ 0x64
 80060dc:	d901      	bls.n	80060e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e28a      	b.n	80065f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060e2:	4b60      	ldr	r3, [pc, #384]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1f0      	bne.n	80060d0 <HAL_RCC_OscConfig+0xe8>
 80060ee:	e000      	b.n	80060f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d075      	beq.n	80061ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060fe:	4b59      	ldr	r3, [pc, #356]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f003 030c 	and.w	r3, r3, #12
 8006106:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006108:	4b56      	ldr	r3, [pc, #344]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	f003 0303 	and.w	r3, r3, #3
 8006110:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	2b0c      	cmp	r3, #12
 8006116:	d102      	bne.n	800611e <HAL_RCC_OscConfig+0x136>
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	2b02      	cmp	r3, #2
 800611c:	d002      	beq.n	8006124 <HAL_RCC_OscConfig+0x13c>
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	2b04      	cmp	r3, #4
 8006122:	d11f      	bne.n	8006164 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006124:	4b4f      	ldr	r3, [pc, #316]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800612c:	2b00      	cmp	r3, #0
 800612e:	d005      	beq.n	800613c <HAL_RCC_OscConfig+0x154>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e25d      	b.n	80065f8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800613c:	4b49      	ldr	r3, [pc, #292]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	061b      	lsls	r3, r3, #24
 800614a:	4946      	ldr	r1, [pc, #280]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 800614c:	4313      	orrs	r3, r2
 800614e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006150:	4b45      	ldr	r3, [pc, #276]	@ (8006268 <HAL_RCC_OscConfig+0x280>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4618      	mov	r0, r3
 8006156:	f7fc f97b 	bl	8002450 <HAL_InitTick>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d043      	beq.n	80061e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e249      	b.n	80065f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d023      	beq.n	80061b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800616c:	4b3d      	ldr	r3, [pc, #244]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a3c      	ldr	r2, [pc, #240]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 8006172:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006178:	f7fc f9b6 	bl	80024e8 <HAL_GetTick>
 800617c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800617e:	e008      	b.n	8006192 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006180:	f7fc f9b2 	bl	80024e8 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e232      	b.n	80065f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006192:	4b34      	ldr	r3, [pc, #208]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0f0      	beq.n	8006180 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800619e:	4b31      	ldr	r3, [pc, #196]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	061b      	lsls	r3, r3, #24
 80061ac:	492d      	ldr	r1, [pc, #180]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	604b      	str	r3, [r1, #4]
 80061b2:	e01a      	b.n	80061ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061b4:	4b2b      	ldr	r3, [pc, #172]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a2a      	ldr	r2, [pc, #168]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 80061ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c0:	f7fc f992 	bl	80024e8 <HAL_GetTick>
 80061c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061c6:	e008      	b.n	80061da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061c8:	f7fc f98e 	bl	80024e8 <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d901      	bls.n	80061da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e20e      	b.n	80065f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061da:	4b22      	ldr	r3, [pc, #136]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1f0      	bne.n	80061c8 <HAL_RCC_OscConfig+0x1e0>
 80061e6:	e000      	b.n	80061ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0308 	and.w	r3, r3, #8
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d041      	beq.n	800627a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d01c      	beq.n	8006238 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061fe:	4b19      	ldr	r3, [pc, #100]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 8006200:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006204:	4a17      	ldr	r2, [pc, #92]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 8006206:	f043 0301 	orr.w	r3, r3, #1
 800620a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800620e:	f7fc f96b 	bl	80024e8 <HAL_GetTick>
 8006212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006214:	e008      	b.n	8006228 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006216:	f7fc f967 	bl	80024e8 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b02      	cmp	r3, #2
 8006222:	d901      	bls.n	8006228 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e1e7      	b.n	80065f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006228:	4b0e      	ldr	r3, [pc, #56]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 800622a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d0ef      	beq.n	8006216 <HAL_RCC_OscConfig+0x22e>
 8006236:	e020      	b.n	800627a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006238:	4b0a      	ldr	r3, [pc, #40]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 800623a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800623e:	4a09      	ldr	r2, [pc, #36]	@ (8006264 <HAL_RCC_OscConfig+0x27c>)
 8006240:	f023 0301 	bic.w	r3, r3, #1
 8006244:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006248:	f7fc f94e 	bl	80024e8 <HAL_GetTick>
 800624c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800624e:	e00d      	b.n	800626c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006250:	f7fc f94a 	bl	80024e8 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d906      	bls.n	800626c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e1ca      	b.n	80065f8 <HAL_RCC_OscConfig+0x610>
 8006262:	bf00      	nop
 8006264:	40021000 	.word	0x40021000
 8006268:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800626c:	4b8c      	ldr	r3, [pc, #560]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 800626e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1ea      	bne.n	8006250 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0304 	and.w	r3, r3, #4
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 80a6 	beq.w	80063d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006288:	2300      	movs	r3, #0
 800628a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800628c:	4b84      	ldr	r3, [pc, #528]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 800628e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <HAL_RCC_OscConfig+0x2b4>
 8006298:	2301      	movs	r3, #1
 800629a:	e000      	b.n	800629e <HAL_RCC_OscConfig+0x2b6>
 800629c:	2300      	movs	r3, #0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00d      	beq.n	80062be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062a2:	4b7f      	ldr	r3, [pc, #508]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 80062a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062a6:	4a7e      	ldr	r2, [pc, #504]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 80062a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80062ae:	4b7c      	ldr	r3, [pc, #496]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 80062b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80062ba:	2301      	movs	r3, #1
 80062bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062be:	4b79      	ldr	r3, [pc, #484]	@ (80064a4 <HAL_RCC_OscConfig+0x4bc>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d118      	bne.n	80062fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062ca:	4b76      	ldr	r3, [pc, #472]	@ (80064a4 <HAL_RCC_OscConfig+0x4bc>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a75      	ldr	r2, [pc, #468]	@ (80064a4 <HAL_RCC_OscConfig+0x4bc>)
 80062d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062d6:	f7fc f907 	bl	80024e8 <HAL_GetTick>
 80062da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062dc:	e008      	b.n	80062f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062de:	f7fc f903 	bl	80024e8 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d901      	bls.n	80062f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e183      	b.n	80065f8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062f0:	4b6c      	ldr	r3, [pc, #432]	@ (80064a4 <HAL_RCC_OscConfig+0x4bc>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d0f0      	beq.n	80062de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d108      	bne.n	8006316 <HAL_RCC_OscConfig+0x32e>
 8006304:	4b66      	ldr	r3, [pc, #408]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 8006306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800630a:	4a65      	ldr	r2, [pc, #404]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 800630c:	f043 0301 	orr.w	r3, r3, #1
 8006310:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006314:	e024      	b.n	8006360 <HAL_RCC_OscConfig+0x378>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	2b05      	cmp	r3, #5
 800631c:	d110      	bne.n	8006340 <HAL_RCC_OscConfig+0x358>
 800631e:	4b60      	ldr	r3, [pc, #384]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 8006320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006324:	4a5e      	ldr	r2, [pc, #376]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 8006326:	f043 0304 	orr.w	r3, r3, #4
 800632a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800632e:	4b5c      	ldr	r3, [pc, #368]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 8006330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006334:	4a5a      	ldr	r2, [pc, #360]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 8006336:	f043 0301 	orr.w	r3, r3, #1
 800633a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800633e:	e00f      	b.n	8006360 <HAL_RCC_OscConfig+0x378>
 8006340:	4b57      	ldr	r3, [pc, #348]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 8006342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006346:	4a56      	ldr	r2, [pc, #344]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 8006348:	f023 0301 	bic.w	r3, r3, #1
 800634c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006350:	4b53      	ldr	r3, [pc, #332]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 8006352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006356:	4a52      	ldr	r2, [pc, #328]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 8006358:	f023 0304 	bic.w	r3, r3, #4
 800635c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d016      	beq.n	8006396 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006368:	f7fc f8be 	bl	80024e8 <HAL_GetTick>
 800636c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800636e:	e00a      	b.n	8006386 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006370:	f7fc f8ba 	bl	80024e8 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800637e:	4293      	cmp	r3, r2
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e138      	b.n	80065f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006386:	4b46      	ldr	r3, [pc, #280]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 8006388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b00      	cmp	r3, #0
 8006392:	d0ed      	beq.n	8006370 <HAL_RCC_OscConfig+0x388>
 8006394:	e015      	b.n	80063c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006396:	f7fc f8a7 	bl	80024e8 <HAL_GetTick>
 800639a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800639c:	e00a      	b.n	80063b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800639e:	f7fc f8a3 	bl	80024e8 <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d901      	bls.n	80063b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e121      	b.n	80065f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80063b4:	4b3a      	ldr	r3, [pc, #232]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 80063b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1ed      	bne.n	800639e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80063c2:	7ffb      	ldrb	r3, [r7, #31]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d105      	bne.n	80063d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063c8:	4b35      	ldr	r3, [pc, #212]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 80063ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063cc:	4a34      	ldr	r2, [pc, #208]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 80063ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063d2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0320 	and.w	r3, r3, #32
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d03c      	beq.n	800645a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d01c      	beq.n	8006422 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80063e8:	4b2d      	ldr	r3, [pc, #180]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 80063ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063ee:	4a2c      	ldr	r2, [pc, #176]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 80063f0:	f043 0301 	orr.w	r3, r3, #1
 80063f4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f8:	f7fc f876 	bl	80024e8 <HAL_GetTick>
 80063fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006400:	f7fc f872 	bl	80024e8 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b02      	cmp	r3, #2
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e0f2      	b.n	80065f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006412:	4b23      	ldr	r3, [pc, #140]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 8006414:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006418:	f003 0302 	and.w	r3, r3, #2
 800641c:	2b00      	cmp	r3, #0
 800641e:	d0ef      	beq.n	8006400 <HAL_RCC_OscConfig+0x418>
 8006420:	e01b      	b.n	800645a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006422:	4b1f      	ldr	r3, [pc, #124]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 8006424:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006428:	4a1d      	ldr	r2, [pc, #116]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 800642a:	f023 0301 	bic.w	r3, r3, #1
 800642e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006432:	f7fc f859 	bl	80024e8 <HAL_GetTick>
 8006436:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006438:	e008      	b.n	800644c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800643a:	f7fc f855 	bl	80024e8 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	2b02      	cmp	r3, #2
 8006446:	d901      	bls.n	800644c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e0d5      	b.n	80065f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800644c:	4b14      	ldr	r3, [pc, #80]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 800644e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1ef      	bne.n	800643a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	69db      	ldr	r3, [r3, #28]
 800645e:	2b00      	cmp	r3, #0
 8006460:	f000 80c9 	beq.w	80065f6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006464:	4b0e      	ldr	r3, [pc, #56]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f003 030c 	and.w	r3, r3, #12
 800646c:	2b0c      	cmp	r3, #12
 800646e:	f000 8083 	beq.w	8006578 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	2b02      	cmp	r3, #2
 8006478:	d15e      	bne.n	8006538 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800647a:	4b09      	ldr	r3, [pc, #36]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a08      	ldr	r2, [pc, #32]	@ (80064a0 <HAL_RCC_OscConfig+0x4b8>)
 8006480:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006486:	f7fc f82f 	bl	80024e8 <HAL_GetTick>
 800648a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800648c:	e00c      	b.n	80064a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800648e:	f7fc f82b 	bl	80024e8 <HAL_GetTick>
 8006492:	4602      	mov	r2, r0
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	2b02      	cmp	r3, #2
 800649a:	d905      	bls.n	80064a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e0ab      	b.n	80065f8 <HAL_RCC_OscConfig+0x610>
 80064a0:	40021000 	.word	0x40021000
 80064a4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064a8:	4b55      	ldr	r3, [pc, #340]	@ (8006600 <HAL_RCC_OscConfig+0x618>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1ec      	bne.n	800648e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064b4:	4b52      	ldr	r3, [pc, #328]	@ (8006600 <HAL_RCC_OscConfig+0x618>)
 80064b6:	68da      	ldr	r2, [r3, #12]
 80064b8:	4b52      	ldr	r3, [pc, #328]	@ (8006604 <HAL_RCC_OscConfig+0x61c>)
 80064ba:	4013      	ands	r3, r2
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	6a11      	ldr	r1, [r2, #32]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80064c4:	3a01      	subs	r2, #1
 80064c6:	0112      	lsls	r2, r2, #4
 80064c8:	4311      	orrs	r1, r2
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80064ce:	0212      	lsls	r2, r2, #8
 80064d0:	4311      	orrs	r1, r2
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80064d6:	0852      	lsrs	r2, r2, #1
 80064d8:	3a01      	subs	r2, #1
 80064da:	0552      	lsls	r2, r2, #21
 80064dc:	4311      	orrs	r1, r2
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80064e2:	0852      	lsrs	r2, r2, #1
 80064e4:	3a01      	subs	r2, #1
 80064e6:	0652      	lsls	r2, r2, #25
 80064e8:	4311      	orrs	r1, r2
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80064ee:	06d2      	lsls	r2, r2, #27
 80064f0:	430a      	orrs	r2, r1
 80064f2:	4943      	ldr	r1, [pc, #268]	@ (8006600 <HAL_RCC_OscConfig+0x618>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064f8:	4b41      	ldr	r3, [pc, #260]	@ (8006600 <HAL_RCC_OscConfig+0x618>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a40      	ldr	r2, [pc, #256]	@ (8006600 <HAL_RCC_OscConfig+0x618>)
 80064fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006502:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006504:	4b3e      	ldr	r3, [pc, #248]	@ (8006600 <HAL_RCC_OscConfig+0x618>)
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	4a3d      	ldr	r2, [pc, #244]	@ (8006600 <HAL_RCC_OscConfig+0x618>)
 800650a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800650e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006510:	f7fb ffea 	bl	80024e8 <HAL_GetTick>
 8006514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006516:	e008      	b.n	800652a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006518:	f7fb ffe6 	bl	80024e8 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d901      	bls.n	800652a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e066      	b.n	80065f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800652a:	4b35      	ldr	r3, [pc, #212]	@ (8006600 <HAL_RCC_OscConfig+0x618>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d0f0      	beq.n	8006518 <HAL_RCC_OscConfig+0x530>
 8006536:	e05e      	b.n	80065f6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006538:	4b31      	ldr	r3, [pc, #196]	@ (8006600 <HAL_RCC_OscConfig+0x618>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a30      	ldr	r2, [pc, #192]	@ (8006600 <HAL_RCC_OscConfig+0x618>)
 800653e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006544:	f7fb ffd0 	bl	80024e8 <HAL_GetTick>
 8006548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800654a:	e008      	b.n	800655e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800654c:	f7fb ffcc 	bl	80024e8 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b02      	cmp	r3, #2
 8006558:	d901      	bls.n	800655e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e04c      	b.n	80065f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800655e:	4b28      	ldr	r3, [pc, #160]	@ (8006600 <HAL_RCC_OscConfig+0x618>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1f0      	bne.n	800654c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800656a:	4b25      	ldr	r3, [pc, #148]	@ (8006600 <HAL_RCC_OscConfig+0x618>)
 800656c:	68da      	ldr	r2, [r3, #12]
 800656e:	4924      	ldr	r1, [pc, #144]	@ (8006600 <HAL_RCC_OscConfig+0x618>)
 8006570:	4b25      	ldr	r3, [pc, #148]	@ (8006608 <HAL_RCC_OscConfig+0x620>)
 8006572:	4013      	ands	r3, r2
 8006574:	60cb      	str	r3, [r1, #12]
 8006576:	e03e      	b.n	80065f6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d101      	bne.n	8006584 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e039      	b.n	80065f8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006584:	4b1e      	ldr	r3, [pc, #120]	@ (8006600 <HAL_RCC_OscConfig+0x618>)
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f003 0203 	and.w	r2, r3, #3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	429a      	cmp	r2, r3
 8006596:	d12c      	bne.n	80065f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a2:	3b01      	subs	r3, #1
 80065a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d123      	bne.n	80065f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d11b      	bne.n	80065f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d113      	bne.n	80065f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d4:	085b      	lsrs	r3, r3, #1
 80065d6:	3b01      	subs	r3, #1
 80065d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80065da:	429a      	cmp	r2, r3
 80065dc:	d109      	bne.n	80065f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065e8:	085b      	lsrs	r3, r3, #1
 80065ea:	3b01      	subs	r3, #1
 80065ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d001      	beq.n	80065f6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e000      	b.n	80065f8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3720      	adds	r7, #32
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	40021000 	.word	0x40021000
 8006604:	019f800c 	.word	0x019f800c
 8006608:	feeefffc 	.word	0xfeeefffc

0800660c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006616:	2300      	movs	r3, #0
 8006618:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e11e      	b.n	8006862 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006624:	4b91      	ldr	r3, [pc, #580]	@ (800686c <HAL_RCC_ClockConfig+0x260>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 030f 	and.w	r3, r3, #15
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	429a      	cmp	r2, r3
 8006630:	d910      	bls.n	8006654 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006632:	4b8e      	ldr	r3, [pc, #568]	@ (800686c <HAL_RCC_ClockConfig+0x260>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f023 020f 	bic.w	r2, r3, #15
 800663a:	498c      	ldr	r1, [pc, #560]	@ (800686c <HAL_RCC_ClockConfig+0x260>)
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	4313      	orrs	r3, r2
 8006640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006642:	4b8a      	ldr	r3, [pc, #552]	@ (800686c <HAL_RCC_ClockConfig+0x260>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 030f 	and.w	r3, r3, #15
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	429a      	cmp	r2, r3
 800664e:	d001      	beq.n	8006654 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e106      	b.n	8006862 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b00      	cmp	r3, #0
 800665e:	d073      	beq.n	8006748 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	2b03      	cmp	r3, #3
 8006666:	d129      	bne.n	80066bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006668:	4b81      	ldr	r3, [pc, #516]	@ (8006870 <HAL_RCC_ClockConfig+0x264>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e0f4      	b.n	8006862 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006678:	f000 f99e 	bl	80069b8 <RCC_GetSysClockFreqFromPLLSource>
 800667c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	4a7c      	ldr	r2, [pc, #496]	@ (8006874 <HAL_RCC_ClockConfig+0x268>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d93f      	bls.n	8006706 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006686:	4b7a      	ldr	r3, [pc, #488]	@ (8006870 <HAL_RCC_ClockConfig+0x264>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d009      	beq.n	80066a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800669a:	2b00      	cmp	r3, #0
 800669c:	d033      	beq.n	8006706 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d12f      	bne.n	8006706 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80066a6:	4b72      	ldr	r3, [pc, #456]	@ (8006870 <HAL_RCC_ClockConfig+0x264>)
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066ae:	4a70      	ldr	r2, [pc, #448]	@ (8006870 <HAL_RCC_ClockConfig+0x264>)
 80066b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80066b6:	2380      	movs	r3, #128	@ 0x80
 80066b8:	617b      	str	r3, [r7, #20]
 80066ba:	e024      	b.n	8006706 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d107      	bne.n	80066d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066c4:	4b6a      	ldr	r3, [pc, #424]	@ (8006870 <HAL_RCC_ClockConfig+0x264>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d109      	bne.n	80066e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e0c6      	b.n	8006862 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066d4:	4b66      	ldr	r3, [pc, #408]	@ (8006870 <HAL_RCC_ClockConfig+0x264>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e0be      	b.n	8006862 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80066e4:	f000 f8ce 	bl	8006884 <HAL_RCC_GetSysClockFreq>
 80066e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	4a61      	ldr	r2, [pc, #388]	@ (8006874 <HAL_RCC_ClockConfig+0x268>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d909      	bls.n	8006706 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80066f2:	4b5f      	ldr	r3, [pc, #380]	@ (8006870 <HAL_RCC_ClockConfig+0x264>)
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066fa:	4a5d      	ldr	r2, [pc, #372]	@ (8006870 <HAL_RCC_ClockConfig+0x264>)
 80066fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006700:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006702:	2380      	movs	r3, #128	@ 0x80
 8006704:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006706:	4b5a      	ldr	r3, [pc, #360]	@ (8006870 <HAL_RCC_ClockConfig+0x264>)
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f023 0203 	bic.w	r2, r3, #3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	4957      	ldr	r1, [pc, #348]	@ (8006870 <HAL_RCC_ClockConfig+0x264>)
 8006714:	4313      	orrs	r3, r2
 8006716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006718:	f7fb fee6 	bl	80024e8 <HAL_GetTick>
 800671c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800671e:	e00a      	b.n	8006736 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006720:	f7fb fee2 	bl	80024e8 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800672e:	4293      	cmp	r3, r2
 8006730:	d901      	bls.n	8006736 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e095      	b.n	8006862 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006736:	4b4e      	ldr	r3, [pc, #312]	@ (8006870 <HAL_RCC_ClockConfig+0x264>)
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f003 020c 	and.w	r2, r3, #12
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	429a      	cmp	r2, r3
 8006746:	d1eb      	bne.n	8006720 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0302 	and.w	r3, r3, #2
 8006750:	2b00      	cmp	r3, #0
 8006752:	d023      	beq.n	800679c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0304 	and.w	r3, r3, #4
 800675c:	2b00      	cmp	r3, #0
 800675e:	d005      	beq.n	800676c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006760:	4b43      	ldr	r3, [pc, #268]	@ (8006870 <HAL_RCC_ClockConfig+0x264>)
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	4a42      	ldr	r2, [pc, #264]	@ (8006870 <HAL_RCC_ClockConfig+0x264>)
 8006766:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800676a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0308 	and.w	r3, r3, #8
 8006774:	2b00      	cmp	r3, #0
 8006776:	d007      	beq.n	8006788 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006778:	4b3d      	ldr	r3, [pc, #244]	@ (8006870 <HAL_RCC_ClockConfig+0x264>)
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006780:	4a3b      	ldr	r2, [pc, #236]	@ (8006870 <HAL_RCC_ClockConfig+0x264>)
 8006782:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006786:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006788:	4b39      	ldr	r3, [pc, #228]	@ (8006870 <HAL_RCC_ClockConfig+0x264>)
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	4936      	ldr	r1, [pc, #216]	@ (8006870 <HAL_RCC_ClockConfig+0x264>)
 8006796:	4313      	orrs	r3, r2
 8006798:	608b      	str	r3, [r1, #8]
 800679a:	e008      	b.n	80067ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	2b80      	cmp	r3, #128	@ 0x80
 80067a0:	d105      	bne.n	80067ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80067a2:	4b33      	ldr	r3, [pc, #204]	@ (8006870 <HAL_RCC_ClockConfig+0x264>)
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	4a32      	ldr	r2, [pc, #200]	@ (8006870 <HAL_RCC_ClockConfig+0x264>)
 80067a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067ae:	4b2f      	ldr	r3, [pc, #188]	@ (800686c <HAL_RCC_ClockConfig+0x260>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 030f 	and.w	r3, r3, #15
 80067b6:	683a      	ldr	r2, [r7, #0]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d21d      	bcs.n	80067f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067bc:	4b2b      	ldr	r3, [pc, #172]	@ (800686c <HAL_RCC_ClockConfig+0x260>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f023 020f 	bic.w	r2, r3, #15
 80067c4:	4929      	ldr	r1, [pc, #164]	@ (800686c <HAL_RCC_ClockConfig+0x260>)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80067cc:	f7fb fe8c 	bl	80024e8 <HAL_GetTick>
 80067d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067d2:	e00a      	b.n	80067ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067d4:	f7fb fe88 	bl	80024e8 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d901      	bls.n	80067ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e03b      	b.n	8006862 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ea:	4b20      	ldr	r3, [pc, #128]	@ (800686c <HAL_RCC_ClockConfig+0x260>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 030f 	and.w	r3, r3, #15
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d1ed      	bne.n	80067d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0304 	and.w	r3, r3, #4
 8006800:	2b00      	cmp	r3, #0
 8006802:	d008      	beq.n	8006816 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006804:	4b1a      	ldr	r3, [pc, #104]	@ (8006870 <HAL_RCC_ClockConfig+0x264>)
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	4917      	ldr	r1, [pc, #92]	@ (8006870 <HAL_RCC_ClockConfig+0x264>)
 8006812:	4313      	orrs	r3, r2
 8006814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0308 	and.w	r3, r3, #8
 800681e:	2b00      	cmp	r3, #0
 8006820:	d009      	beq.n	8006836 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006822:	4b13      	ldr	r3, [pc, #76]	@ (8006870 <HAL_RCC_ClockConfig+0x264>)
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	00db      	lsls	r3, r3, #3
 8006830:	490f      	ldr	r1, [pc, #60]	@ (8006870 <HAL_RCC_ClockConfig+0x264>)
 8006832:	4313      	orrs	r3, r2
 8006834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006836:	f000 f825 	bl	8006884 <HAL_RCC_GetSysClockFreq>
 800683a:	4602      	mov	r2, r0
 800683c:	4b0c      	ldr	r3, [pc, #48]	@ (8006870 <HAL_RCC_ClockConfig+0x264>)
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	091b      	lsrs	r3, r3, #4
 8006842:	f003 030f 	and.w	r3, r3, #15
 8006846:	490c      	ldr	r1, [pc, #48]	@ (8006878 <HAL_RCC_ClockConfig+0x26c>)
 8006848:	5ccb      	ldrb	r3, [r1, r3]
 800684a:	f003 031f 	and.w	r3, r3, #31
 800684e:	fa22 f303 	lsr.w	r3, r2, r3
 8006852:	4a0a      	ldr	r2, [pc, #40]	@ (800687c <HAL_RCC_ClockConfig+0x270>)
 8006854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006856:	4b0a      	ldr	r3, [pc, #40]	@ (8006880 <HAL_RCC_ClockConfig+0x274>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4618      	mov	r0, r3
 800685c:	f7fb fdf8 	bl	8002450 <HAL_InitTick>
 8006860:	4603      	mov	r3, r0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3718      	adds	r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	40022000 	.word	0x40022000
 8006870:	40021000 	.word	0x40021000
 8006874:	04c4b400 	.word	0x04c4b400
 8006878:	080112b4 	.word	0x080112b4
 800687c:	20000000 	.word	0x20000000
 8006880:	20000004 	.word	0x20000004

08006884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006884:	b480      	push	{r7}
 8006886:	b087      	sub	sp, #28
 8006888:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800688a:	4b2c      	ldr	r3, [pc, #176]	@ (800693c <HAL_RCC_GetSysClockFreq+0xb8>)
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f003 030c 	and.w	r3, r3, #12
 8006892:	2b04      	cmp	r3, #4
 8006894:	d102      	bne.n	800689c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006896:	4b2a      	ldr	r3, [pc, #168]	@ (8006940 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006898:	613b      	str	r3, [r7, #16]
 800689a:	e047      	b.n	800692c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800689c:	4b27      	ldr	r3, [pc, #156]	@ (800693c <HAL_RCC_GetSysClockFreq+0xb8>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f003 030c 	and.w	r3, r3, #12
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	d102      	bne.n	80068ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80068a8:	4b26      	ldr	r3, [pc, #152]	@ (8006944 <HAL_RCC_GetSysClockFreq+0xc0>)
 80068aa:	613b      	str	r3, [r7, #16]
 80068ac:	e03e      	b.n	800692c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80068ae:	4b23      	ldr	r3, [pc, #140]	@ (800693c <HAL_RCC_GetSysClockFreq+0xb8>)
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f003 030c 	and.w	r3, r3, #12
 80068b6:	2b0c      	cmp	r3, #12
 80068b8:	d136      	bne.n	8006928 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80068ba:	4b20      	ldr	r3, [pc, #128]	@ (800693c <HAL_RCC_GetSysClockFreq+0xb8>)
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	f003 0303 	and.w	r3, r3, #3
 80068c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80068c4:	4b1d      	ldr	r3, [pc, #116]	@ (800693c <HAL_RCC_GetSysClockFreq+0xb8>)
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	091b      	lsrs	r3, r3, #4
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	3301      	adds	r3, #1
 80068d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2b03      	cmp	r3, #3
 80068d6:	d10c      	bne.n	80068f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80068d8:	4a1a      	ldr	r2, [pc, #104]	@ (8006944 <HAL_RCC_GetSysClockFreq+0xc0>)
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e0:	4a16      	ldr	r2, [pc, #88]	@ (800693c <HAL_RCC_GetSysClockFreq+0xb8>)
 80068e2:	68d2      	ldr	r2, [r2, #12]
 80068e4:	0a12      	lsrs	r2, r2, #8
 80068e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80068ea:	fb02 f303 	mul.w	r3, r2, r3
 80068ee:	617b      	str	r3, [r7, #20]
      break;
 80068f0:	e00c      	b.n	800690c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80068f2:	4a13      	ldr	r2, [pc, #76]	@ (8006940 <HAL_RCC_GetSysClockFreq+0xbc>)
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068fa:	4a10      	ldr	r2, [pc, #64]	@ (800693c <HAL_RCC_GetSysClockFreq+0xb8>)
 80068fc:	68d2      	ldr	r2, [r2, #12]
 80068fe:	0a12      	lsrs	r2, r2, #8
 8006900:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006904:	fb02 f303 	mul.w	r3, r2, r3
 8006908:	617b      	str	r3, [r7, #20]
      break;
 800690a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800690c:	4b0b      	ldr	r3, [pc, #44]	@ (800693c <HAL_RCC_GetSysClockFreq+0xb8>)
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	0e5b      	lsrs	r3, r3, #25
 8006912:	f003 0303 	and.w	r3, r3, #3
 8006916:	3301      	adds	r3, #1
 8006918:	005b      	lsls	r3, r3, #1
 800691a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	fbb2 f3f3 	udiv	r3, r2, r3
 8006924:	613b      	str	r3, [r7, #16]
 8006926:	e001      	b.n	800692c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006928:	2300      	movs	r3, #0
 800692a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800692c:	693b      	ldr	r3, [r7, #16]
}
 800692e:	4618      	mov	r0, r3
 8006930:	371c      	adds	r7, #28
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	40021000 	.word	0x40021000
 8006940:	00f42400 	.word	0x00f42400
 8006944:	016e3600 	.word	0x016e3600

08006948 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006948:	b480      	push	{r7}
 800694a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800694c:	4b03      	ldr	r3, [pc, #12]	@ (800695c <HAL_RCC_GetHCLKFreq+0x14>)
 800694e:	681b      	ldr	r3, [r3, #0]
}
 8006950:	4618      	mov	r0, r3
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	20000000 	.word	0x20000000

08006960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006964:	f7ff fff0 	bl	8006948 <HAL_RCC_GetHCLKFreq>
 8006968:	4602      	mov	r2, r0
 800696a:	4b06      	ldr	r3, [pc, #24]	@ (8006984 <HAL_RCC_GetPCLK1Freq+0x24>)
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	0a1b      	lsrs	r3, r3, #8
 8006970:	f003 0307 	and.w	r3, r3, #7
 8006974:	4904      	ldr	r1, [pc, #16]	@ (8006988 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006976:	5ccb      	ldrb	r3, [r1, r3]
 8006978:	f003 031f 	and.w	r3, r3, #31
 800697c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006980:	4618      	mov	r0, r3
 8006982:	bd80      	pop	{r7, pc}
 8006984:	40021000 	.word	0x40021000
 8006988:	080112c4 	.word	0x080112c4

0800698c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006990:	f7ff ffda 	bl	8006948 <HAL_RCC_GetHCLKFreq>
 8006994:	4602      	mov	r2, r0
 8006996:	4b06      	ldr	r3, [pc, #24]	@ (80069b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	0adb      	lsrs	r3, r3, #11
 800699c:	f003 0307 	and.w	r3, r3, #7
 80069a0:	4904      	ldr	r1, [pc, #16]	@ (80069b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80069a2:	5ccb      	ldrb	r3, [r1, r3]
 80069a4:	f003 031f 	and.w	r3, r3, #31
 80069a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	40021000 	.word	0x40021000
 80069b4:	080112c4 	.word	0x080112c4

080069b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80069be:	4b1e      	ldr	r3, [pc, #120]	@ (8006a38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	f003 0303 	and.w	r3, r3, #3
 80069c6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80069c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006a38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	091b      	lsrs	r3, r3, #4
 80069ce:	f003 030f 	and.w	r3, r3, #15
 80069d2:	3301      	adds	r3, #1
 80069d4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	2b03      	cmp	r3, #3
 80069da:	d10c      	bne.n	80069f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069dc:	4a17      	ldr	r2, [pc, #92]	@ (8006a3c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e4:	4a14      	ldr	r2, [pc, #80]	@ (8006a38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069e6:	68d2      	ldr	r2, [r2, #12]
 80069e8:	0a12      	lsrs	r2, r2, #8
 80069ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80069ee:	fb02 f303 	mul.w	r3, r2, r3
 80069f2:	617b      	str	r3, [r7, #20]
    break;
 80069f4:	e00c      	b.n	8006a10 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069f6:	4a12      	ldr	r2, [pc, #72]	@ (8006a40 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80069fe:	4a0e      	ldr	r2, [pc, #56]	@ (8006a38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006a00:	68d2      	ldr	r2, [r2, #12]
 8006a02:	0a12      	lsrs	r2, r2, #8
 8006a04:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006a08:	fb02 f303 	mul.w	r3, r2, r3
 8006a0c:	617b      	str	r3, [r7, #20]
    break;
 8006a0e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006a10:	4b09      	ldr	r3, [pc, #36]	@ (8006a38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	0e5b      	lsrs	r3, r3, #25
 8006a16:	f003 0303 	and.w	r3, r3, #3
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	005b      	lsls	r3, r3, #1
 8006a1e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a28:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006a2a:	687b      	ldr	r3, [r7, #4]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	371c      	adds	r7, #28
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	40021000 	.word	0x40021000
 8006a3c:	016e3600 	.word	0x016e3600
 8006a40:	00f42400 	.word	0x00f42400

08006a44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a50:	2300      	movs	r3, #0
 8006a52:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 8098 	beq.w	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a62:	2300      	movs	r3, #0
 8006a64:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a66:	4b43      	ldr	r3, [pc, #268]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10d      	bne.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a72:	4b40      	ldr	r3, [pc, #256]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a76:	4a3f      	ldr	r2, [pc, #252]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a86:	60bb      	str	r3, [r7, #8]
 8006a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a8e:	4b3a      	ldr	r3, [pc, #232]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a39      	ldr	r2, [pc, #228]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a9a:	f7fb fd25 	bl	80024e8 <HAL_GetTick>
 8006a9e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006aa0:	e009      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aa2:	f7fb fd21 	bl	80024e8 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d902      	bls.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	74fb      	strb	r3, [r7, #19]
        break;
 8006ab4:	e005      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ab6:	4b30      	ldr	r3, [pc, #192]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d0ef      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006ac2:	7cfb      	ldrb	r3, [r7, #19]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d159      	bne.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ad2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d01e      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d019      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006ae4:	4b23      	ldr	r3, [pc, #140]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006af0:	4b20      	ldr	r3, [pc, #128]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006af6:	4a1f      	ldr	r2, [pc, #124]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006afc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b00:	4b1c      	ldr	r3, [pc, #112]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b06:	4a1b      	ldr	r2, [pc, #108]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006b10:	4a18      	ldr	r2, [pc, #96]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d016      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b22:	f7fb fce1 	bl	80024e8 <HAL_GetTick>
 8006b26:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b28:	e00b      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b2a:	f7fb fcdd 	bl	80024e8 <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d902      	bls.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	74fb      	strb	r3, [r7, #19]
            break;
 8006b40:	e006      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b42:	4b0c      	ldr	r3, [pc, #48]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b48:	f003 0302 	and.w	r3, r3, #2
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d0ec      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006b50:	7cfb      	ldrb	r3, [r7, #19]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10b      	bne.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b56:	4b07      	ldr	r3, [pc, #28]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b64:	4903      	ldr	r1, [pc, #12]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006b6c:	e008      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b6e:	7cfb      	ldrb	r3, [r7, #19]
 8006b70:	74bb      	strb	r3, [r7, #18]
 8006b72:	e005      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006b74:	40021000 	.word	0x40021000
 8006b78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b7c:	7cfb      	ldrb	r3, [r7, #19]
 8006b7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b80:	7c7b      	ldrb	r3, [r7, #17]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d105      	bne.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b86:	4ba6      	ldr	r3, [pc, #664]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b8a:	4aa5      	ldr	r2, [pc, #660]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b90:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00a      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b9e:	4ba0      	ldr	r3, [pc, #640]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ba4:	f023 0203 	bic.w	r2, r3, #3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	499c      	ldr	r1, [pc, #624]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00a      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006bc0:	4b97      	ldr	r3, [pc, #604]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bc6:	f023 020c 	bic.w	r2, r3, #12
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	4994      	ldr	r1, [pc, #592]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0304 	and.w	r3, r3, #4
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00a      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006be2:	4b8f      	ldr	r3, [pc, #572]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006be8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	498b      	ldr	r1, [pc, #556]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0308 	and.w	r3, r3, #8
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00a      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006c04:	4b86      	ldr	r3, [pc, #536]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c0a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	4983      	ldr	r1, [pc, #524]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0320 	and.w	r3, r3, #32
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00a      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c26:	4b7e      	ldr	r3, [pc, #504]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c2c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	497a      	ldr	r1, [pc, #488]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c36:	4313      	orrs	r3, r2
 8006c38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00a      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c48:	4b75      	ldr	r3, [pc, #468]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c4e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	4972      	ldr	r1, [pc, #456]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00a      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c6a:	4b6d      	ldr	r3, [pc, #436]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c70:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	4969      	ldr	r1, [pc, #420]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00a      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c8c:	4b64      	ldr	r3, [pc, #400]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c92:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	4961      	ldr	r1, [pc, #388]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00a      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cae:	4b5c      	ldr	r3, [pc, #368]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cb4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cbc:	4958      	ldr	r1, [pc, #352]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d015      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006cd0:	4b53      	ldr	r3, [pc, #332]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cde:	4950      	ldr	r1, [pc, #320]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cee:	d105      	bne.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cf0:	4b4b      	ldr	r3, [pc, #300]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	4a4a      	ldr	r2, [pc, #296]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cfa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d015      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006d08:	4b45      	ldr	r3, [pc, #276]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d0e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d16:	4942      	ldr	r1, [pc, #264]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d26:	d105      	bne.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d28:	4b3d      	ldr	r3, [pc, #244]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	4a3c      	ldr	r2, [pc, #240]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d32:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d015      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006d40:	4b37      	ldr	r3, [pc, #220]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d46:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d4e:	4934      	ldr	r1, [pc, #208]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d5e:	d105      	bne.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d60:	4b2f      	ldr	r3, [pc, #188]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	4a2e      	ldr	r2, [pc, #184]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d6a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d015      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d78:	4b29      	ldr	r3, [pc, #164]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d86:	4926      	ldr	r1, [pc, #152]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d96:	d105      	bne.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d98:	4b21      	ldr	r3, [pc, #132]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	4a20      	ldr	r2, [pc, #128]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006da2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d015      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006db0:	4b1b      	ldr	r3, [pc, #108]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006db6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dbe:	4918      	ldr	r1, [pc, #96]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006dce:	d105      	bne.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006dd0:	4b13      	ldr	r3, [pc, #76]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	4a12      	ldr	r2, [pc, #72]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006dda:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d015      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006de8:	4b0d      	ldr	r3, [pc, #52]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006df6:	490a      	ldr	r1, [pc, #40]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e06:	d105      	bne.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006e08:	4b05      	ldr	r3, [pc, #20]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	4a04      	ldr	r2, [pc, #16]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e12:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006e14:	7cbb      	ldrb	r3, [r7, #18]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3718      	adds	r7, #24
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	40021000 	.word	0x40021000

08006e24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e09d      	b.n	8006f72 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d108      	bne.n	8006e50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e46:	d009      	beq.n	8006e5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	61da      	str	r2, [r3, #28]
 8006e4e:	e005      	b.n	8006e5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d106      	bne.n	8006e7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7fa fd5a 	bl	8001930 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2202      	movs	r2, #2
 8006e80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e9c:	d902      	bls.n	8006ea4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	60fb      	str	r3, [r7, #12]
 8006ea2:	e002      	b.n	8006eaa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006ea4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006ea8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006eb2:	d007      	beq.n	8006ec4 <HAL_SPI_Init+0xa0>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ebc:	d002      	beq.n	8006ec4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	431a      	orrs	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	431a      	orrs	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	69db      	ldr	r3, [r3, #28]
 8006ef8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006efc:	431a      	orrs	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f06:	ea42 0103 	orr.w	r1, r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f0e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	0c1b      	lsrs	r3, r3, #16
 8006f20:	f003 0204 	and.w	r2, r3, #4
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f28:	f003 0310 	and.w	r3, r3, #16
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f32:	f003 0308 	and.w	r3, r3, #8
 8006f36:	431a      	orrs	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006f40:	ea42 0103 	orr.w	r1, r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	69da      	ldr	r2, [r3, #28]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b08a      	sub	sp, #40	@ 0x28
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	60f8      	str	r0, [r7, #12]
 8006f82:	60b9      	str	r1, [r7, #8]
 8006f84:	607a      	str	r2, [r7, #4]
 8006f86:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d101      	bne.n	8006fa0 <HAL_SPI_TransmitReceive+0x26>
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	e20a      	b.n	80073b6 <HAL_SPI_TransmitReceive+0x43c>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fa8:	f7fb fa9e 	bl	80024e8 <HAL_GetTick>
 8006fac:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006fb4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006fbc:	887b      	ldrh	r3, [r7, #2]
 8006fbe:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006fc0:	887b      	ldrh	r3, [r7, #2]
 8006fc2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006fc4:	7efb      	ldrb	r3, [r7, #27]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d00e      	beq.n	8006fe8 <HAL_SPI_TransmitReceive+0x6e>
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fd0:	d106      	bne.n	8006fe0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d102      	bne.n	8006fe0 <HAL_SPI_TransmitReceive+0x66>
 8006fda:	7efb      	ldrb	r3, [r7, #27]
 8006fdc:	2b04      	cmp	r3, #4
 8006fde:	d003      	beq.n	8006fe8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006fe6:	e1e0      	b.n	80073aa <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d005      	beq.n	8006ffa <HAL_SPI_TransmitReceive+0x80>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <HAL_SPI_TransmitReceive+0x80>
 8006ff4:	887b      	ldrh	r3, [r7, #2]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d103      	bne.n	8007002 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007000:	e1d3      	b.n	80073aa <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b04      	cmp	r3, #4
 800700c:	d003      	beq.n	8007016 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2205      	movs	r2, #5
 8007012:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	887a      	ldrh	r2, [r7, #2]
 8007026:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	887a      	ldrh	r2, [r7, #2]
 800702e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	887a      	ldrh	r2, [r7, #2]
 800703c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	887a      	ldrh	r2, [r7, #2]
 8007042:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007058:	d802      	bhi.n	8007060 <HAL_SPI_TransmitReceive+0xe6>
 800705a:	8a3b      	ldrh	r3, [r7, #16]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d908      	bls.n	8007072 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800706e:	605a      	str	r2, [r3, #4]
 8007070:	e007      	b.n	8007082 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007080:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800708c:	2b40      	cmp	r3, #64	@ 0x40
 800708e:	d007      	beq.n	80070a0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800709e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80070a8:	f240 8081 	bls.w	80071ae <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d002      	beq.n	80070ba <HAL_SPI_TransmitReceive+0x140>
 80070b4:	8a7b      	ldrh	r3, [r7, #18]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d16d      	bne.n	8007196 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070be:	881a      	ldrh	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ca:	1c9a      	adds	r2, r3, #2
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	3b01      	subs	r3, #1
 80070d8:	b29a      	uxth	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070de:	e05a      	b.n	8007196 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d11b      	bne.n	8007126 <HAL_SPI_TransmitReceive+0x1ac>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d016      	beq.n	8007126 <HAL_SPI_TransmitReceive+0x1ac>
 80070f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d113      	bne.n	8007126 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007102:	881a      	ldrh	r2, [r3, #0]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800710e:	1c9a      	adds	r2, r3, #2
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007118:	b29b      	uxth	r3, r3
 800711a:	3b01      	subs	r3, #1
 800711c:	b29a      	uxth	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007122:	2300      	movs	r3, #0
 8007124:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f003 0301 	and.w	r3, r3, #1
 8007130:	2b01      	cmp	r3, #1
 8007132:	d11c      	bne.n	800716e <HAL_SPI_TransmitReceive+0x1f4>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800713a:	b29b      	uxth	r3, r3
 800713c:	2b00      	cmp	r3, #0
 800713e:	d016      	beq.n	800716e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68da      	ldr	r2, [r3, #12]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800714a:	b292      	uxth	r2, r2
 800714c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007152:	1c9a      	adds	r2, r3, #2
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800715e:	b29b      	uxth	r3, r3
 8007160:	3b01      	subs	r3, #1
 8007162:	b29a      	uxth	r2, r3
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800716a:	2301      	movs	r3, #1
 800716c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800716e:	f7fb f9bb 	bl	80024e8 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800717a:	429a      	cmp	r2, r3
 800717c:	d80b      	bhi.n	8007196 <HAL_SPI_TransmitReceive+0x21c>
 800717e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007184:	d007      	beq.n	8007196 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007194:	e109      	b.n	80073aa <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800719a:	b29b      	uxth	r3, r3
 800719c:	2b00      	cmp	r3, #0
 800719e:	d19f      	bne.n	80070e0 <HAL_SPI_TransmitReceive+0x166>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d199      	bne.n	80070e0 <HAL_SPI_TransmitReceive+0x166>
 80071ac:	e0e3      	b.n	8007376 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <HAL_SPI_TransmitReceive+0x244>
 80071b6:	8a7b      	ldrh	r3, [r7, #18]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	f040 80cf 	bne.w	800735c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d912      	bls.n	80071ee <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071cc:	881a      	ldrh	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d8:	1c9a      	adds	r2, r3, #2
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	3b02      	subs	r3, #2
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80071ec:	e0b6      	b.n	800735c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	330c      	adds	r3, #12
 80071f8:	7812      	ldrb	r2, [r2, #0]
 80071fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800720a:	b29b      	uxth	r3, r3
 800720c:	3b01      	subs	r3, #1
 800720e:	b29a      	uxth	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007214:	e0a2      	b.n	800735c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f003 0302 	and.w	r3, r3, #2
 8007220:	2b02      	cmp	r3, #2
 8007222:	d134      	bne.n	800728e <HAL_SPI_TransmitReceive+0x314>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007228:	b29b      	uxth	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d02f      	beq.n	800728e <HAL_SPI_TransmitReceive+0x314>
 800722e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007230:	2b01      	cmp	r3, #1
 8007232:	d12c      	bne.n	800728e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007238:	b29b      	uxth	r3, r3
 800723a:	2b01      	cmp	r3, #1
 800723c:	d912      	bls.n	8007264 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007242:	881a      	ldrh	r2, [r3, #0]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800724e:	1c9a      	adds	r2, r3, #2
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007258:	b29b      	uxth	r3, r3
 800725a:	3b02      	subs	r3, #2
 800725c:	b29a      	uxth	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007262:	e012      	b.n	800728a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	330c      	adds	r3, #12
 800726e:	7812      	ldrb	r2, [r2, #0]
 8007270:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007276:	1c5a      	adds	r2, r3, #1
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007280:	b29b      	uxth	r3, r3
 8007282:	3b01      	subs	r3, #1
 8007284:	b29a      	uxth	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800728a:	2300      	movs	r3, #0
 800728c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f003 0301 	and.w	r3, r3, #1
 8007298:	2b01      	cmp	r3, #1
 800729a:	d148      	bne.n	800732e <HAL_SPI_TransmitReceive+0x3b4>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d042      	beq.n	800732e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d923      	bls.n	80072fc <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68da      	ldr	r2, [r3, #12]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072be:	b292      	uxth	r2, r2
 80072c0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c6:	1c9a      	adds	r2, r3, #2
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	3b02      	subs	r3, #2
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d81f      	bhi.n	800732a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80072f8:	605a      	str	r2, [r3, #4]
 80072fa:	e016      	b.n	800732a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f103 020c 	add.w	r2, r3, #12
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007308:	7812      	ldrb	r2, [r2, #0]
 800730a:	b2d2      	uxtb	r2, r2
 800730c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007312:	1c5a      	adds	r2, r3, #1
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800731e:	b29b      	uxth	r3, r3
 8007320:	3b01      	subs	r3, #1
 8007322:	b29a      	uxth	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800732a:	2301      	movs	r3, #1
 800732c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800732e:	f7fb f8db 	bl	80024e8 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800733a:	429a      	cmp	r2, r3
 800733c:	d803      	bhi.n	8007346 <HAL_SPI_TransmitReceive+0x3cc>
 800733e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007344:	d102      	bne.n	800734c <HAL_SPI_TransmitReceive+0x3d2>
 8007346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007348:	2b00      	cmp	r3, #0
 800734a:	d107      	bne.n	800735c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2201      	movs	r2, #1
 8007356:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800735a:	e026      	b.n	80073aa <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007360:	b29b      	uxth	r3, r3
 8007362:	2b00      	cmp	r3, #0
 8007364:	f47f af57 	bne.w	8007216 <HAL_SPI_TransmitReceive+0x29c>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800736e:	b29b      	uxth	r3, r3
 8007370:	2b00      	cmp	r3, #0
 8007372:	f47f af50 	bne.w	8007216 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007376:	69fa      	ldr	r2, [r7, #28]
 8007378:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f000 f94c 	bl	8007618 <SPI_EndRxTxTransaction>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d005      	beq.n	8007392 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2220      	movs	r2, #32
 8007390:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007396:	2b00      	cmp	r3, #0
 8007398:	d003      	beq.n	80073a2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073a0:	e003      	b.n	80073aa <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80073b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3728      	adds	r7, #40	@ 0x28
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80073be:	b480      	push	{r7}
 80073c0:	b083      	sub	sp, #12
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80073cc:	b2db      	uxtb	r3, r3
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	370c      	adds	r7, #12
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
	...

080073dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b088      	sub	sp, #32
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	603b      	str	r3, [r7, #0]
 80073e8:	4613      	mov	r3, r2
 80073ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80073ec:	f7fb f87c 	bl	80024e8 <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f4:	1a9b      	subs	r3, r3, r2
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	4413      	add	r3, r2
 80073fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80073fc:	f7fb f874 	bl	80024e8 <HAL_GetTick>
 8007400:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007402:	4b39      	ldr	r3, [pc, #228]	@ (80074e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	015b      	lsls	r3, r3, #5
 8007408:	0d1b      	lsrs	r3, r3, #20
 800740a:	69fa      	ldr	r2, [r7, #28]
 800740c:	fb02 f303 	mul.w	r3, r2, r3
 8007410:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007412:	e054      	b.n	80074be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741a:	d050      	beq.n	80074be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800741c:	f7fb f864 	bl	80024e8 <HAL_GetTick>
 8007420:	4602      	mov	r2, r0
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	69fa      	ldr	r2, [r7, #28]
 8007428:	429a      	cmp	r2, r3
 800742a:	d902      	bls.n	8007432 <SPI_WaitFlagStateUntilTimeout+0x56>
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d13d      	bne.n	80074ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007440:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800744a:	d111      	bne.n	8007470 <SPI_WaitFlagStateUntilTimeout+0x94>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007454:	d004      	beq.n	8007460 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800745e:	d107      	bne.n	8007470 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800746e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007474:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007478:	d10f      	bne.n	800749a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007488:	601a      	str	r2, [r3, #0]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007498:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e017      	b.n	80074de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d101      	bne.n	80074b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	3b01      	subs	r3, #1
 80074bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	689a      	ldr	r2, [r3, #8]
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	4013      	ands	r3, r2
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	bf0c      	ite	eq
 80074ce:	2301      	moveq	r3, #1
 80074d0:	2300      	movne	r3, #0
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	461a      	mov	r2, r3
 80074d6:	79fb      	ldrb	r3, [r7, #7]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d19b      	bne.n	8007414 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3720      	adds	r7, #32
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	20000000 	.word	0x20000000

080074ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08a      	sub	sp, #40	@ 0x28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80074fa:	2300      	movs	r3, #0
 80074fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80074fe:	f7fa fff3 	bl	80024e8 <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007506:	1a9b      	subs	r3, r3, r2
 8007508:	683a      	ldr	r2, [r7, #0]
 800750a:	4413      	add	r3, r2
 800750c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800750e:	f7fa ffeb 	bl	80024e8 <HAL_GetTick>
 8007512:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	330c      	adds	r3, #12
 800751a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800751c:	4b3d      	ldr	r3, [pc, #244]	@ (8007614 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	4613      	mov	r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	4413      	add	r3, r2
 8007526:	00da      	lsls	r2, r3, #3
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	0d1b      	lsrs	r3, r3, #20
 800752c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800752e:	fb02 f303 	mul.w	r3, r2, r3
 8007532:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007534:	e060      	b.n	80075f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800753c:	d107      	bne.n	800754e <SPI_WaitFifoStateUntilTimeout+0x62>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d104      	bne.n	800754e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	b2db      	uxtb	r3, r3
 800754a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800754c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007554:	d050      	beq.n	80075f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007556:	f7fa ffc7 	bl	80024e8 <HAL_GetTick>
 800755a:	4602      	mov	r2, r0
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007562:	429a      	cmp	r2, r3
 8007564:	d902      	bls.n	800756c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007568:	2b00      	cmp	r3, #0
 800756a:	d13d      	bne.n	80075e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800757a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007584:	d111      	bne.n	80075aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800758e:	d004      	beq.n	800759a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007598:	d107      	bne.n	80075aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075b2:	d10f      	bne.n	80075d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e010      	b.n	800760a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	3b01      	subs	r3, #1
 80075f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689a      	ldr	r2, [r3, #8]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	4013      	ands	r3, r2
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	429a      	cmp	r2, r3
 8007606:	d196      	bne.n	8007536 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3728      	adds	r7, #40	@ 0x28
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	20000000 	.word	0x20000000

08007618 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af02      	add	r7, sp, #8
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	2200      	movs	r2, #0
 800762c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f7ff ff5b 	bl	80074ec <SPI_WaitFifoStateUntilTimeout>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d007      	beq.n	800764c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007640:	f043 0220 	orr.w	r2, r3, #32
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007648:	2303      	movs	r3, #3
 800764a:	e027      	b.n	800769c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	2200      	movs	r2, #0
 8007654:	2180      	movs	r1, #128	@ 0x80
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f7ff fec0 	bl	80073dc <SPI_WaitFlagStateUntilTimeout>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d007      	beq.n	8007672 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007666:	f043 0220 	orr.w	r2, r3, #32
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e014      	b.n	800769c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	2200      	movs	r2, #0
 800767a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f7ff ff34 	bl	80074ec <SPI_WaitFifoStateUntilTimeout>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d007      	beq.n	800769a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800768e:	f043 0220 	orr.w	r2, r3, #32
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e000      	b.n	800769c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d101      	bne.n	80076b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e049      	b.n	800774a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d106      	bne.n	80076d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7fa fcd2 	bl	8002074 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2202      	movs	r2, #2
 80076d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	3304      	adds	r3, #4
 80076e0:	4619      	mov	r1, r3
 80076e2:	4610      	mov	r0, r2
 80076e4:	f000 fc9e 	bl	8008024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3708      	adds	r7, #8
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
	...

08007754 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007762:	b2db      	uxtb	r3, r3
 8007764:	2b01      	cmp	r3, #1
 8007766:	d001      	beq.n	800776c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e042      	b.n	80077f2 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2202      	movs	r2, #2
 8007770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a21      	ldr	r2, [pc, #132]	@ (8007800 <HAL_TIM_Base_Start+0xac>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d018      	beq.n	80077b0 <HAL_TIM_Base_Start+0x5c>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007786:	d013      	beq.n	80077b0 <HAL_TIM_Base_Start+0x5c>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a1d      	ldr	r2, [pc, #116]	@ (8007804 <HAL_TIM_Base_Start+0xb0>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d00e      	beq.n	80077b0 <HAL_TIM_Base_Start+0x5c>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a1c      	ldr	r2, [pc, #112]	@ (8007808 <HAL_TIM_Base_Start+0xb4>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d009      	beq.n	80077b0 <HAL_TIM_Base_Start+0x5c>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a1a      	ldr	r2, [pc, #104]	@ (800780c <HAL_TIM_Base_Start+0xb8>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d004      	beq.n	80077b0 <HAL_TIM_Base_Start+0x5c>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a19      	ldr	r2, [pc, #100]	@ (8007810 <HAL_TIM_Base_Start+0xbc>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d115      	bne.n	80077dc <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689a      	ldr	r2, [r3, #8]
 80077b6:	4b17      	ldr	r3, [pc, #92]	@ (8007814 <HAL_TIM_Base_Start+0xc0>)
 80077b8:	4013      	ands	r3, r2
 80077ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2b06      	cmp	r3, #6
 80077c0:	d015      	beq.n	80077ee <HAL_TIM_Base_Start+0x9a>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077c8:	d011      	beq.n	80077ee <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f042 0201 	orr.w	r2, r2, #1
 80077d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077da:	e008      	b.n	80077ee <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f042 0201 	orr.w	r2, r2, #1
 80077ea:	601a      	str	r2, [r3, #0]
 80077ec:	e000      	b.n	80077f0 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3714      	adds	r7, #20
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	40012c00 	.word	0x40012c00
 8007804:	40000400 	.word	0x40000400
 8007808:	40000800 	.word	0x40000800
 800780c:	40013400 	.word	0x40013400
 8007810:	40014000 	.word	0x40014000
 8007814:	00010007 	.word	0x00010007

08007818 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e049      	b.n	80078be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d106      	bne.n	8007844 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f841 	bl	80078c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2202      	movs	r2, #2
 8007848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	3304      	adds	r3, #4
 8007854:	4619      	mov	r1, r3
 8007856:	4610      	mov	r0, r2
 8007858:	f000 fbe4 	bl	8008024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80078c6:	b480      	push	{r7}
 80078c8:	b083      	sub	sp, #12
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80078ce:	bf00      	nop
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
	...

080078dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d109      	bne.n	8007900 <HAL_TIM_PWM_Start+0x24>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	bf14      	ite	ne
 80078f8:	2301      	movne	r3, #1
 80078fa:	2300      	moveq	r3, #0
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	e03c      	b.n	800797a <HAL_TIM_PWM_Start+0x9e>
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	2b04      	cmp	r3, #4
 8007904:	d109      	bne.n	800791a <HAL_TIM_PWM_Start+0x3e>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b01      	cmp	r3, #1
 8007910:	bf14      	ite	ne
 8007912:	2301      	movne	r3, #1
 8007914:	2300      	moveq	r3, #0
 8007916:	b2db      	uxtb	r3, r3
 8007918:	e02f      	b.n	800797a <HAL_TIM_PWM_Start+0x9e>
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b08      	cmp	r3, #8
 800791e:	d109      	bne.n	8007934 <HAL_TIM_PWM_Start+0x58>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b01      	cmp	r3, #1
 800792a:	bf14      	ite	ne
 800792c:	2301      	movne	r3, #1
 800792e:	2300      	moveq	r3, #0
 8007930:	b2db      	uxtb	r3, r3
 8007932:	e022      	b.n	800797a <HAL_TIM_PWM_Start+0x9e>
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	2b0c      	cmp	r3, #12
 8007938:	d109      	bne.n	800794e <HAL_TIM_PWM_Start+0x72>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007940:	b2db      	uxtb	r3, r3
 8007942:	2b01      	cmp	r3, #1
 8007944:	bf14      	ite	ne
 8007946:	2301      	movne	r3, #1
 8007948:	2300      	moveq	r3, #0
 800794a:	b2db      	uxtb	r3, r3
 800794c:	e015      	b.n	800797a <HAL_TIM_PWM_Start+0x9e>
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	2b10      	cmp	r3, #16
 8007952:	d109      	bne.n	8007968 <HAL_TIM_PWM_Start+0x8c>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800795a:	b2db      	uxtb	r3, r3
 800795c:	2b01      	cmp	r3, #1
 800795e:	bf14      	ite	ne
 8007960:	2301      	movne	r3, #1
 8007962:	2300      	moveq	r3, #0
 8007964:	b2db      	uxtb	r3, r3
 8007966:	e008      	b.n	800797a <HAL_TIM_PWM_Start+0x9e>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b01      	cmp	r3, #1
 8007972:	bf14      	ite	ne
 8007974:	2301      	movne	r3, #1
 8007976:	2300      	moveq	r3, #0
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e097      	b.n	8007ab2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d104      	bne.n	8007992 <HAL_TIM_PWM_Start+0xb6>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2202      	movs	r2, #2
 800798c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007990:	e023      	b.n	80079da <HAL_TIM_PWM_Start+0xfe>
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	2b04      	cmp	r3, #4
 8007996:	d104      	bne.n	80079a2 <HAL_TIM_PWM_Start+0xc6>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2202      	movs	r2, #2
 800799c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079a0:	e01b      	b.n	80079da <HAL_TIM_PWM_Start+0xfe>
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	2b08      	cmp	r3, #8
 80079a6:	d104      	bne.n	80079b2 <HAL_TIM_PWM_Start+0xd6>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2202      	movs	r2, #2
 80079ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079b0:	e013      	b.n	80079da <HAL_TIM_PWM_Start+0xfe>
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	2b0c      	cmp	r3, #12
 80079b6:	d104      	bne.n	80079c2 <HAL_TIM_PWM_Start+0xe6>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2202      	movs	r2, #2
 80079bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80079c0:	e00b      	b.n	80079da <HAL_TIM_PWM_Start+0xfe>
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	2b10      	cmp	r3, #16
 80079c6:	d104      	bne.n	80079d2 <HAL_TIM_PWM_Start+0xf6>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2202      	movs	r2, #2
 80079cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079d0:	e003      	b.n	80079da <HAL_TIM_PWM_Start+0xfe>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2202      	movs	r2, #2
 80079d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2201      	movs	r2, #1
 80079e0:	6839      	ldr	r1, [r7, #0]
 80079e2:	4618      	mov	r0, r3
 80079e4:	f000 ff4c 	bl	8008880 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a33      	ldr	r2, [pc, #204]	@ (8007abc <HAL_TIM_PWM_Start+0x1e0>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d013      	beq.n	8007a1a <HAL_TIM_PWM_Start+0x13e>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a32      	ldr	r2, [pc, #200]	@ (8007ac0 <HAL_TIM_PWM_Start+0x1e4>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d00e      	beq.n	8007a1a <HAL_TIM_PWM_Start+0x13e>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a30      	ldr	r2, [pc, #192]	@ (8007ac4 <HAL_TIM_PWM_Start+0x1e8>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d009      	beq.n	8007a1a <HAL_TIM_PWM_Start+0x13e>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a2f      	ldr	r2, [pc, #188]	@ (8007ac8 <HAL_TIM_PWM_Start+0x1ec>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d004      	beq.n	8007a1a <HAL_TIM_PWM_Start+0x13e>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a2d      	ldr	r2, [pc, #180]	@ (8007acc <HAL_TIM_PWM_Start+0x1f0>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d101      	bne.n	8007a1e <HAL_TIM_PWM_Start+0x142>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e000      	b.n	8007a20 <HAL_TIM_PWM_Start+0x144>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d007      	beq.n	8007a34 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a32:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a20      	ldr	r2, [pc, #128]	@ (8007abc <HAL_TIM_PWM_Start+0x1e0>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d018      	beq.n	8007a70 <HAL_TIM_PWM_Start+0x194>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a46:	d013      	beq.n	8007a70 <HAL_TIM_PWM_Start+0x194>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a20      	ldr	r2, [pc, #128]	@ (8007ad0 <HAL_TIM_PWM_Start+0x1f4>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d00e      	beq.n	8007a70 <HAL_TIM_PWM_Start+0x194>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a1f      	ldr	r2, [pc, #124]	@ (8007ad4 <HAL_TIM_PWM_Start+0x1f8>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d009      	beq.n	8007a70 <HAL_TIM_PWM_Start+0x194>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a17      	ldr	r2, [pc, #92]	@ (8007ac0 <HAL_TIM_PWM_Start+0x1e4>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d004      	beq.n	8007a70 <HAL_TIM_PWM_Start+0x194>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a16      	ldr	r2, [pc, #88]	@ (8007ac4 <HAL_TIM_PWM_Start+0x1e8>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d115      	bne.n	8007a9c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	689a      	ldr	r2, [r3, #8]
 8007a76:	4b18      	ldr	r3, [pc, #96]	@ (8007ad8 <HAL_TIM_PWM_Start+0x1fc>)
 8007a78:	4013      	ands	r3, r2
 8007a7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2b06      	cmp	r3, #6
 8007a80:	d015      	beq.n	8007aae <HAL_TIM_PWM_Start+0x1d2>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a88:	d011      	beq.n	8007aae <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f042 0201 	orr.w	r2, r2, #1
 8007a98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a9a:	e008      	b.n	8007aae <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f042 0201 	orr.w	r2, r2, #1
 8007aaa:	601a      	str	r2, [r3, #0]
 8007aac:	e000      	b.n	8007ab0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	40012c00 	.word	0x40012c00
 8007ac0:	40013400 	.word	0x40013400
 8007ac4:	40014000 	.word	0x40014000
 8007ac8:	40014400 	.word	0x40014400
 8007acc:	40014800 	.word	0x40014800
 8007ad0:	40000400 	.word	0x40000400
 8007ad4:	40000800 	.word	0x40000800
 8007ad8:	00010007 	.word	0x00010007

08007adc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2200      	movs	r2, #0
 8007aec:	6839      	ldr	r1, [r7, #0]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 fec6 	bl	8008880 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a3e      	ldr	r2, [pc, #248]	@ (8007bf4 <HAL_TIM_PWM_Stop+0x118>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d013      	beq.n	8007b26 <HAL_TIM_PWM_Stop+0x4a>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a3d      	ldr	r2, [pc, #244]	@ (8007bf8 <HAL_TIM_PWM_Stop+0x11c>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d00e      	beq.n	8007b26 <HAL_TIM_PWM_Stop+0x4a>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a3b      	ldr	r2, [pc, #236]	@ (8007bfc <HAL_TIM_PWM_Stop+0x120>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d009      	beq.n	8007b26 <HAL_TIM_PWM_Stop+0x4a>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a3a      	ldr	r2, [pc, #232]	@ (8007c00 <HAL_TIM_PWM_Stop+0x124>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d004      	beq.n	8007b26 <HAL_TIM_PWM_Stop+0x4a>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a38      	ldr	r2, [pc, #224]	@ (8007c04 <HAL_TIM_PWM_Stop+0x128>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d101      	bne.n	8007b2a <HAL_TIM_PWM_Stop+0x4e>
 8007b26:	2301      	movs	r3, #1
 8007b28:	e000      	b.n	8007b2c <HAL_TIM_PWM_Stop+0x50>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d017      	beq.n	8007b60 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6a1a      	ldr	r2, [r3, #32]
 8007b36:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d10f      	bne.n	8007b60 <HAL_TIM_PWM_Stop+0x84>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6a1a      	ldr	r2, [r3, #32]
 8007b46:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d107      	bne.n	8007b60 <HAL_TIM_PWM_Stop+0x84>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b5e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6a1a      	ldr	r2, [r3, #32]
 8007b66:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10f      	bne.n	8007b90 <HAL_TIM_PWM_Stop+0xb4>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6a1a      	ldr	r2, [r3, #32]
 8007b76:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d107      	bne.n	8007b90 <HAL_TIM_PWM_Stop+0xb4>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f022 0201 	bic.w	r2, r2, #1
 8007b8e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d104      	bne.n	8007ba0 <HAL_TIM_PWM_Stop+0xc4>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b9e:	e023      	b.n	8007be8 <HAL_TIM_PWM_Stop+0x10c>
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	2b04      	cmp	r3, #4
 8007ba4:	d104      	bne.n	8007bb0 <HAL_TIM_PWM_Stop+0xd4>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bae:	e01b      	b.n	8007be8 <HAL_TIM_PWM_Stop+0x10c>
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	2b08      	cmp	r3, #8
 8007bb4:	d104      	bne.n	8007bc0 <HAL_TIM_PWM_Stop+0xe4>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bbe:	e013      	b.n	8007be8 <HAL_TIM_PWM_Stop+0x10c>
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	2b0c      	cmp	r3, #12
 8007bc4:	d104      	bne.n	8007bd0 <HAL_TIM_PWM_Stop+0xf4>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007bce:	e00b      	b.n	8007be8 <HAL_TIM_PWM_Stop+0x10c>
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	2b10      	cmp	r3, #16
 8007bd4:	d104      	bne.n	8007be0 <HAL_TIM_PWM_Stop+0x104>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bde:	e003      	b.n	8007be8 <HAL_TIM_PWM_Stop+0x10c>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	40012c00 	.word	0x40012c00
 8007bf8:	40013400 	.word	0x40013400
 8007bfc:	40014000 	.word	0x40014000
 8007c00:	40014400 	.word	0x40014400
 8007c04:	40014800 	.word	0x40014800

08007c08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b086      	sub	sp, #24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c14:	2300      	movs	r3, #0
 8007c16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d101      	bne.n	8007c26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007c22:	2302      	movs	r3, #2
 8007c24:	e0ff      	b.n	8007e26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2b14      	cmp	r3, #20
 8007c32:	f200 80f0 	bhi.w	8007e16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007c36:	a201      	add	r2, pc, #4	@ (adr r2, 8007c3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3c:	08007c91 	.word	0x08007c91
 8007c40:	08007e17 	.word	0x08007e17
 8007c44:	08007e17 	.word	0x08007e17
 8007c48:	08007e17 	.word	0x08007e17
 8007c4c:	08007cd1 	.word	0x08007cd1
 8007c50:	08007e17 	.word	0x08007e17
 8007c54:	08007e17 	.word	0x08007e17
 8007c58:	08007e17 	.word	0x08007e17
 8007c5c:	08007d13 	.word	0x08007d13
 8007c60:	08007e17 	.word	0x08007e17
 8007c64:	08007e17 	.word	0x08007e17
 8007c68:	08007e17 	.word	0x08007e17
 8007c6c:	08007d53 	.word	0x08007d53
 8007c70:	08007e17 	.word	0x08007e17
 8007c74:	08007e17 	.word	0x08007e17
 8007c78:	08007e17 	.word	0x08007e17
 8007c7c:	08007d95 	.word	0x08007d95
 8007c80:	08007e17 	.word	0x08007e17
 8007c84:	08007e17 	.word	0x08007e17
 8007c88:	08007e17 	.word	0x08007e17
 8007c8c:	08007dd5 	.word	0x08007dd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68b9      	ldr	r1, [r7, #8]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 fa60 	bl	800815c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	699a      	ldr	r2, [r3, #24]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f042 0208 	orr.w	r2, r2, #8
 8007caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	699a      	ldr	r2, [r3, #24]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f022 0204 	bic.w	r2, r2, #4
 8007cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6999      	ldr	r1, [r3, #24]
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	691a      	ldr	r2, [r3, #16]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	619a      	str	r2, [r3, #24]
      break;
 8007cce:	e0a5      	b.n	8007e1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68b9      	ldr	r1, [r7, #8]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 fad0 	bl	800827c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	699a      	ldr	r2, [r3, #24]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007cea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	699a      	ldr	r2, [r3, #24]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007cfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6999      	ldr	r1, [r3, #24]
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	021a      	lsls	r2, r3, #8
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	430a      	orrs	r2, r1
 8007d0e:	619a      	str	r2, [r3, #24]
      break;
 8007d10:	e084      	b.n	8007e1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68b9      	ldr	r1, [r7, #8]
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f000 fb39 	bl	8008390 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	69da      	ldr	r2, [r3, #28]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f042 0208 	orr.w	r2, r2, #8
 8007d2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	69da      	ldr	r2, [r3, #28]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f022 0204 	bic.w	r2, r2, #4
 8007d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	69d9      	ldr	r1, [r3, #28]
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	691a      	ldr	r2, [r3, #16]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	430a      	orrs	r2, r1
 8007d4e:	61da      	str	r2, [r3, #28]
      break;
 8007d50:	e064      	b.n	8007e1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68b9      	ldr	r1, [r7, #8]
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f000 fba1 	bl	80084a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	69da      	ldr	r2, [r3, #28]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	69da      	ldr	r2, [r3, #28]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	69d9      	ldr	r1, [r3, #28]
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	021a      	lsls	r2, r3, #8
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	430a      	orrs	r2, r1
 8007d90:	61da      	str	r2, [r3, #28]
      break;
 8007d92:	e043      	b.n	8007e1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68b9      	ldr	r1, [r7, #8]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f000 fc0a 	bl	80085b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f042 0208 	orr.w	r2, r2, #8
 8007dae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f022 0204 	bic.w	r2, r2, #4
 8007dbe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	691a      	ldr	r2, [r3, #16]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007dd2:	e023      	b.n	8007e1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68b9      	ldr	r1, [r7, #8]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f000 fc4e 	bl	800867c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007dee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dfe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	021a      	lsls	r2, r3, #8
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	430a      	orrs	r2, r1
 8007e12:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007e14:	e002      	b.n	8007e1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	75fb      	strb	r3, [r7, #23]
      break;
 8007e1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3718      	adds	r7, #24
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop

08007e30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d101      	bne.n	8007e4c <HAL_TIM_ConfigClockSource+0x1c>
 8007e48:	2302      	movs	r3, #2
 8007e4a:	e0de      	b.n	800800a <HAL_TIM_ConfigClockSource+0x1da>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2202      	movs	r2, #2
 8007e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007e6a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007e6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a63      	ldr	r2, [pc, #396]	@ (8008014 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	f000 80a9 	beq.w	8007fde <HAL_TIM_ConfigClockSource+0x1ae>
 8007e8c:	4a61      	ldr	r2, [pc, #388]	@ (8008014 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	f200 80ae 	bhi.w	8007ff0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007e94:	4a60      	ldr	r2, [pc, #384]	@ (8008018 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	f000 80a1 	beq.w	8007fde <HAL_TIM_ConfigClockSource+0x1ae>
 8007e9c:	4a5e      	ldr	r2, [pc, #376]	@ (8008018 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	f200 80a6 	bhi.w	8007ff0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007ea4:	4a5d      	ldr	r2, [pc, #372]	@ (800801c <HAL_TIM_ConfigClockSource+0x1ec>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	f000 8099 	beq.w	8007fde <HAL_TIM_ConfigClockSource+0x1ae>
 8007eac:	4a5b      	ldr	r2, [pc, #364]	@ (800801c <HAL_TIM_ConfigClockSource+0x1ec>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	f200 809e 	bhi.w	8007ff0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007eb4:	4a5a      	ldr	r2, [pc, #360]	@ (8008020 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	f000 8091 	beq.w	8007fde <HAL_TIM_ConfigClockSource+0x1ae>
 8007ebc:	4a58      	ldr	r2, [pc, #352]	@ (8008020 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	f200 8096 	bhi.w	8007ff0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007ec4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007ec8:	f000 8089 	beq.w	8007fde <HAL_TIM_ConfigClockSource+0x1ae>
 8007ecc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007ed0:	f200 808e 	bhi.w	8007ff0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007ed4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ed8:	d03e      	beq.n	8007f58 <HAL_TIM_ConfigClockSource+0x128>
 8007eda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ede:	f200 8087 	bhi.w	8007ff0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007ee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ee6:	f000 8086 	beq.w	8007ff6 <HAL_TIM_ConfigClockSource+0x1c6>
 8007eea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eee:	d87f      	bhi.n	8007ff0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007ef0:	2b70      	cmp	r3, #112	@ 0x70
 8007ef2:	d01a      	beq.n	8007f2a <HAL_TIM_ConfigClockSource+0xfa>
 8007ef4:	2b70      	cmp	r3, #112	@ 0x70
 8007ef6:	d87b      	bhi.n	8007ff0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007ef8:	2b60      	cmp	r3, #96	@ 0x60
 8007efa:	d050      	beq.n	8007f9e <HAL_TIM_ConfigClockSource+0x16e>
 8007efc:	2b60      	cmp	r3, #96	@ 0x60
 8007efe:	d877      	bhi.n	8007ff0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007f00:	2b50      	cmp	r3, #80	@ 0x50
 8007f02:	d03c      	beq.n	8007f7e <HAL_TIM_ConfigClockSource+0x14e>
 8007f04:	2b50      	cmp	r3, #80	@ 0x50
 8007f06:	d873      	bhi.n	8007ff0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007f08:	2b40      	cmp	r3, #64	@ 0x40
 8007f0a:	d058      	beq.n	8007fbe <HAL_TIM_ConfigClockSource+0x18e>
 8007f0c:	2b40      	cmp	r3, #64	@ 0x40
 8007f0e:	d86f      	bhi.n	8007ff0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007f10:	2b30      	cmp	r3, #48	@ 0x30
 8007f12:	d064      	beq.n	8007fde <HAL_TIM_ConfigClockSource+0x1ae>
 8007f14:	2b30      	cmp	r3, #48	@ 0x30
 8007f16:	d86b      	bhi.n	8007ff0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007f18:	2b20      	cmp	r3, #32
 8007f1a:	d060      	beq.n	8007fde <HAL_TIM_ConfigClockSource+0x1ae>
 8007f1c:	2b20      	cmp	r3, #32
 8007f1e:	d867      	bhi.n	8007ff0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d05c      	beq.n	8007fde <HAL_TIM_ConfigClockSource+0x1ae>
 8007f24:	2b10      	cmp	r3, #16
 8007f26:	d05a      	beq.n	8007fde <HAL_TIM_ConfigClockSource+0x1ae>
 8007f28:	e062      	b.n	8007ff0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f3a:	f000 fc81 	bl	8008840 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007f4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	609a      	str	r2, [r3, #8]
      break;
 8007f56:	e04f      	b.n	8007ff8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f68:	f000 fc6a 	bl	8008840 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689a      	ldr	r2, [r3, #8]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f7a:	609a      	str	r2, [r3, #8]
      break;
 8007f7c:	e03c      	b.n	8007ff8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	f000 fbdc 	bl	8008748 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2150      	movs	r1, #80	@ 0x50
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 fc35 	bl	8008806 <TIM_ITRx_SetConfig>
      break;
 8007f9c:	e02c      	b.n	8007ff8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007faa:	461a      	mov	r2, r3
 8007fac:	f000 fbfb 	bl	80087a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2160      	movs	r1, #96	@ 0x60
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f000 fc25 	bl	8008806 <TIM_ITRx_SetConfig>
      break;
 8007fbc:	e01c      	b.n	8007ff8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fca:	461a      	mov	r2, r3
 8007fcc:	f000 fbbc 	bl	8008748 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2140      	movs	r1, #64	@ 0x40
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 fc15 	bl	8008806 <TIM_ITRx_SetConfig>
      break;
 8007fdc:	e00c      	b.n	8007ff8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	4610      	mov	r0, r2
 8007fea:	f000 fc0c 	bl	8008806 <TIM_ITRx_SetConfig>
      break;
 8007fee:	e003      	b.n	8007ff8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ff4:	e000      	b.n	8007ff8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8007ff6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008008:	7bfb      	ldrb	r3, [r7, #15]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	00100070 	.word	0x00100070
 8008018:	00100040 	.word	0x00100040
 800801c:	00100030 	.word	0x00100030
 8008020:	00100020 	.word	0x00100020

08008024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a42      	ldr	r2, [pc, #264]	@ (8008140 <TIM_Base_SetConfig+0x11c>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d00f      	beq.n	800805c <TIM_Base_SetConfig+0x38>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008042:	d00b      	beq.n	800805c <TIM_Base_SetConfig+0x38>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a3f      	ldr	r2, [pc, #252]	@ (8008144 <TIM_Base_SetConfig+0x120>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d007      	beq.n	800805c <TIM_Base_SetConfig+0x38>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a3e      	ldr	r2, [pc, #248]	@ (8008148 <TIM_Base_SetConfig+0x124>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d003      	beq.n	800805c <TIM_Base_SetConfig+0x38>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a3d      	ldr	r2, [pc, #244]	@ (800814c <TIM_Base_SetConfig+0x128>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d108      	bne.n	800806e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008062:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	4313      	orrs	r3, r2
 800806c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a33      	ldr	r2, [pc, #204]	@ (8008140 <TIM_Base_SetConfig+0x11c>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d01b      	beq.n	80080ae <TIM_Base_SetConfig+0x8a>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800807c:	d017      	beq.n	80080ae <TIM_Base_SetConfig+0x8a>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a30      	ldr	r2, [pc, #192]	@ (8008144 <TIM_Base_SetConfig+0x120>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d013      	beq.n	80080ae <TIM_Base_SetConfig+0x8a>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4a2f      	ldr	r2, [pc, #188]	@ (8008148 <TIM_Base_SetConfig+0x124>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d00f      	beq.n	80080ae <TIM_Base_SetConfig+0x8a>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a2e      	ldr	r2, [pc, #184]	@ (800814c <TIM_Base_SetConfig+0x128>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d00b      	beq.n	80080ae <TIM_Base_SetConfig+0x8a>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a2d      	ldr	r2, [pc, #180]	@ (8008150 <TIM_Base_SetConfig+0x12c>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d007      	beq.n	80080ae <TIM_Base_SetConfig+0x8a>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a2c      	ldr	r2, [pc, #176]	@ (8008154 <TIM_Base_SetConfig+0x130>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d003      	beq.n	80080ae <TIM_Base_SetConfig+0x8a>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a2b      	ldr	r2, [pc, #172]	@ (8008158 <TIM_Base_SetConfig+0x134>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d108      	bne.n	80080c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	4313      	orrs	r3, r2
 80080be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	689a      	ldr	r2, [r3, #8]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a16      	ldr	r2, [pc, #88]	@ (8008140 <TIM_Base_SetConfig+0x11c>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d00f      	beq.n	800810c <TIM_Base_SetConfig+0xe8>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a17      	ldr	r2, [pc, #92]	@ (800814c <TIM_Base_SetConfig+0x128>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d00b      	beq.n	800810c <TIM_Base_SetConfig+0xe8>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a16      	ldr	r2, [pc, #88]	@ (8008150 <TIM_Base_SetConfig+0x12c>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d007      	beq.n	800810c <TIM_Base_SetConfig+0xe8>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a15      	ldr	r2, [pc, #84]	@ (8008154 <TIM_Base_SetConfig+0x130>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d003      	beq.n	800810c <TIM_Base_SetConfig+0xe8>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a14      	ldr	r2, [pc, #80]	@ (8008158 <TIM_Base_SetConfig+0x134>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d103      	bne.n	8008114 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	691a      	ldr	r2, [r3, #16]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	f003 0301 	and.w	r3, r3, #1
 8008122:	2b01      	cmp	r3, #1
 8008124:	d105      	bne.n	8008132 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	f023 0201 	bic.w	r2, r3, #1
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	611a      	str	r2, [r3, #16]
  }
}
 8008132:	bf00      	nop
 8008134:	3714      	adds	r7, #20
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	40012c00 	.word	0x40012c00
 8008144:	40000400 	.word	0x40000400
 8008148:	40000800 	.word	0x40000800
 800814c:	40013400 	.word	0x40013400
 8008150:	40014000 	.word	0x40014000
 8008154:	40014400 	.word	0x40014400
 8008158:	40014800 	.word	0x40014800

0800815c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800815c:	b480      	push	{r7}
 800815e:	b087      	sub	sp, #28
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a1b      	ldr	r3, [r3, #32]
 8008170:	f023 0201 	bic.w	r2, r3, #1
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800818a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800818e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f023 0303 	bic.w	r3, r3, #3
 8008196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	4313      	orrs	r3, r2
 80081a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	f023 0302 	bic.w	r3, r3, #2
 80081a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	697a      	ldr	r2, [r7, #20]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a2c      	ldr	r2, [pc, #176]	@ (8008268 <TIM_OC1_SetConfig+0x10c>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d00f      	beq.n	80081dc <TIM_OC1_SetConfig+0x80>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a2b      	ldr	r2, [pc, #172]	@ (800826c <TIM_OC1_SetConfig+0x110>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d00b      	beq.n	80081dc <TIM_OC1_SetConfig+0x80>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a2a      	ldr	r2, [pc, #168]	@ (8008270 <TIM_OC1_SetConfig+0x114>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d007      	beq.n	80081dc <TIM_OC1_SetConfig+0x80>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a29      	ldr	r2, [pc, #164]	@ (8008274 <TIM_OC1_SetConfig+0x118>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d003      	beq.n	80081dc <TIM_OC1_SetConfig+0x80>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a28      	ldr	r2, [pc, #160]	@ (8008278 <TIM_OC1_SetConfig+0x11c>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d10c      	bne.n	80081f6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	f023 0308 	bic.w	r3, r3, #8
 80081e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	697a      	ldr	r2, [r7, #20]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	f023 0304 	bic.w	r3, r3, #4
 80081f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a1b      	ldr	r2, [pc, #108]	@ (8008268 <TIM_OC1_SetConfig+0x10c>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d00f      	beq.n	800821e <TIM_OC1_SetConfig+0xc2>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a1a      	ldr	r2, [pc, #104]	@ (800826c <TIM_OC1_SetConfig+0x110>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d00b      	beq.n	800821e <TIM_OC1_SetConfig+0xc2>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a19      	ldr	r2, [pc, #100]	@ (8008270 <TIM_OC1_SetConfig+0x114>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d007      	beq.n	800821e <TIM_OC1_SetConfig+0xc2>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a18      	ldr	r2, [pc, #96]	@ (8008274 <TIM_OC1_SetConfig+0x118>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d003      	beq.n	800821e <TIM_OC1_SetConfig+0xc2>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a17      	ldr	r2, [pc, #92]	@ (8008278 <TIM_OC1_SetConfig+0x11c>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d111      	bne.n	8008242 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800822c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	693a      	ldr	r2, [r7, #16]
 8008234:	4313      	orrs	r3, r2
 8008236:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	693a      	ldr	r2, [r7, #16]
 800823e:	4313      	orrs	r3, r2
 8008240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	685a      	ldr	r2, [r3, #4]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	697a      	ldr	r2, [r7, #20]
 800825a:	621a      	str	r2, [r3, #32]
}
 800825c:	bf00      	nop
 800825e:	371c      	adds	r7, #28
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr
 8008268:	40012c00 	.word	0x40012c00
 800826c:	40013400 	.word	0x40013400
 8008270:	40014000 	.word	0x40014000
 8008274:	40014400 	.word	0x40014400
 8008278:	40014800 	.word	0x40014800

0800827c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800827c:	b480      	push	{r7}
 800827e:	b087      	sub	sp, #28
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a1b      	ldr	r3, [r3, #32]
 800828a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a1b      	ldr	r3, [r3, #32]
 8008290:	f023 0210 	bic.w	r2, r3, #16
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80082aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	021b      	lsls	r3, r3, #8
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	f023 0320 	bic.w	r3, r3, #32
 80082ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	011b      	lsls	r3, r3, #4
 80082d2:	697a      	ldr	r2, [r7, #20]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a28      	ldr	r2, [pc, #160]	@ (800837c <TIM_OC2_SetConfig+0x100>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d003      	beq.n	80082e8 <TIM_OC2_SetConfig+0x6c>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a27      	ldr	r2, [pc, #156]	@ (8008380 <TIM_OC2_SetConfig+0x104>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d10d      	bne.n	8008304 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	011b      	lsls	r3, r3, #4
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	4313      	orrs	r3, r2
 80082fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008302:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a1d      	ldr	r2, [pc, #116]	@ (800837c <TIM_OC2_SetConfig+0x100>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d00f      	beq.n	800832c <TIM_OC2_SetConfig+0xb0>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a1c      	ldr	r2, [pc, #112]	@ (8008380 <TIM_OC2_SetConfig+0x104>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d00b      	beq.n	800832c <TIM_OC2_SetConfig+0xb0>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a1b      	ldr	r2, [pc, #108]	@ (8008384 <TIM_OC2_SetConfig+0x108>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d007      	beq.n	800832c <TIM_OC2_SetConfig+0xb0>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a1a      	ldr	r2, [pc, #104]	@ (8008388 <TIM_OC2_SetConfig+0x10c>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d003      	beq.n	800832c <TIM_OC2_SetConfig+0xb0>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a19      	ldr	r2, [pc, #100]	@ (800838c <TIM_OC2_SetConfig+0x110>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d113      	bne.n	8008354 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008332:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800833a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	695b      	ldr	r3, [r3, #20]
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	4313      	orrs	r3, r2
 8008346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	693a      	ldr	r2, [r7, #16]
 8008350:	4313      	orrs	r3, r2
 8008352:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	693a      	ldr	r2, [r7, #16]
 8008358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	697a      	ldr	r2, [r7, #20]
 800836c:	621a      	str	r2, [r3, #32]
}
 800836e:	bf00      	nop
 8008370:	371c      	adds	r7, #28
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	40012c00 	.word	0x40012c00
 8008380:	40013400 	.word	0x40013400
 8008384:	40014000 	.word	0x40014000
 8008388:	40014400 	.word	0x40014400
 800838c:	40014800 	.word	0x40014800

08008390 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008390:	b480      	push	{r7}
 8008392:	b087      	sub	sp, #28
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a1b      	ldr	r3, [r3, #32]
 800839e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a1b      	ldr	r3, [r3, #32]
 80083a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	69db      	ldr	r3, [r3, #28]
 80083b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f023 0303 	bic.w	r3, r3, #3
 80083ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80083dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	021b      	lsls	r3, r3, #8
 80083e4:	697a      	ldr	r2, [r7, #20]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a27      	ldr	r2, [pc, #156]	@ (800848c <TIM_OC3_SetConfig+0xfc>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d003      	beq.n	80083fa <TIM_OC3_SetConfig+0x6a>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a26      	ldr	r2, [pc, #152]	@ (8008490 <TIM_OC3_SetConfig+0x100>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d10d      	bne.n	8008416 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008400:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	021b      	lsls	r3, r3, #8
 8008408:	697a      	ldr	r2, [r7, #20]
 800840a:	4313      	orrs	r3, r2
 800840c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008414:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a1c      	ldr	r2, [pc, #112]	@ (800848c <TIM_OC3_SetConfig+0xfc>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d00f      	beq.n	800843e <TIM_OC3_SetConfig+0xae>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a1b      	ldr	r2, [pc, #108]	@ (8008490 <TIM_OC3_SetConfig+0x100>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d00b      	beq.n	800843e <TIM_OC3_SetConfig+0xae>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a1a      	ldr	r2, [pc, #104]	@ (8008494 <TIM_OC3_SetConfig+0x104>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d007      	beq.n	800843e <TIM_OC3_SetConfig+0xae>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a19      	ldr	r2, [pc, #100]	@ (8008498 <TIM_OC3_SetConfig+0x108>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d003      	beq.n	800843e <TIM_OC3_SetConfig+0xae>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a18      	ldr	r2, [pc, #96]	@ (800849c <TIM_OC3_SetConfig+0x10c>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d113      	bne.n	8008466 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800844c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	011b      	lsls	r3, r3, #4
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	4313      	orrs	r3, r2
 8008458:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	699b      	ldr	r3, [r3, #24]
 800845e:	011b      	lsls	r3, r3, #4
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	4313      	orrs	r3, r2
 8008464:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	685a      	ldr	r2, [r3, #4]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	697a      	ldr	r2, [r7, #20]
 800847e:	621a      	str	r2, [r3, #32]
}
 8008480:	bf00      	nop
 8008482:	371c      	adds	r7, #28
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr
 800848c:	40012c00 	.word	0x40012c00
 8008490:	40013400 	.word	0x40013400
 8008494:	40014000 	.word	0x40014000
 8008498:	40014400 	.word	0x40014400
 800849c:	40014800 	.word	0x40014800

080084a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b087      	sub	sp, #28
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a1b      	ldr	r3, [r3, #32]
 80084b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	69db      	ldr	r3, [r3, #28]
 80084c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80084ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	021b      	lsls	r3, r3, #8
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80084ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	031b      	lsls	r3, r3, #12
 80084f6:	697a      	ldr	r2, [r7, #20]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a28      	ldr	r2, [pc, #160]	@ (80085a0 <TIM_OC4_SetConfig+0x100>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d003      	beq.n	800850c <TIM_OC4_SetConfig+0x6c>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a27      	ldr	r2, [pc, #156]	@ (80085a4 <TIM_OC4_SetConfig+0x104>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d10d      	bne.n	8008528 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	031b      	lsls	r3, r3, #12
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	4313      	orrs	r3, r2
 800851e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008526:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a1d      	ldr	r2, [pc, #116]	@ (80085a0 <TIM_OC4_SetConfig+0x100>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d00f      	beq.n	8008550 <TIM_OC4_SetConfig+0xb0>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a1c      	ldr	r2, [pc, #112]	@ (80085a4 <TIM_OC4_SetConfig+0x104>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d00b      	beq.n	8008550 <TIM_OC4_SetConfig+0xb0>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a1b      	ldr	r2, [pc, #108]	@ (80085a8 <TIM_OC4_SetConfig+0x108>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d007      	beq.n	8008550 <TIM_OC4_SetConfig+0xb0>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a1a      	ldr	r2, [pc, #104]	@ (80085ac <TIM_OC4_SetConfig+0x10c>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d003      	beq.n	8008550 <TIM_OC4_SetConfig+0xb0>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a19      	ldr	r2, [pc, #100]	@ (80085b0 <TIM_OC4_SetConfig+0x110>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d113      	bne.n	8008578 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008556:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800855e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	695b      	ldr	r3, [r3, #20]
 8008564:	019b      	lsls	r3, r3, #6
 8008566:	693a      	ldr	r2, [r7, #16]
 8008568:	4313      	orrs	r3, r2
 800856a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	019b      	lsls	r3, r3, #6
 8008572:	693a      	ldr	r2, [r7, #16]
 8008574:	4313      	orrs	r3, r2
 8008576:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	685a      	ldr	r2, [r3, #4]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	621a      	str	r2, [r3, #32]
}
 8008592:	bf00      	nop
 8008594:	371c      	adds	r7, #28
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	40012c00 	.word	0x40012c00
 80085a4:	40013400 	.word	0x40013400
 80085a8:	40014000 	.word	0x40014000
 80085ac:	40014400 	.word	0x40014400
 80085b0:	40014800 	.word	0x40014800

080085b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a1b      	ldr	r3, [r3, #32]
 80085c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a1b      	ldr	r3, [r3, #32]
 80085c8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80085f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	041b      	lsls	r3, r3, #16
 8008600:	693a      	ldr	r2, [r7, #16]
 8008602:	4313      	orrs	r3, r2
 8008604:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a17      	ldr	r2, [pc, #92]	@ (8008668 <TIM_OC5_SetConfig+0xb4>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d00f      	beq.n	800862e <TIM_OC5_SetConfig+0x7a>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a16      	ldr	r2, [pc, #88]	@ (800866c <TIM_OC5_SetConfig+0xb8>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d00b      	beq.n	800862e <TIM_OC5_SetConfig+0x7a>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a15      	ldr	r2, [pc, #84]	@ (8008670 <TIM_OC5_SetConfig+0xbc>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d007      	beq.n	800862e <TIM_OC5_SetConfig+0x7a>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a14      	ldr	r2, [pc, #80]	@ (8008674 <TIM_OC5_SetConfig+0xc0>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d003      	beq.n	800862e <TIM_OC5_SetConfig+0x7a>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a13      	ldr	r2, [pc, #76]	@ (8008678 <TIM_OC5_SetConfig+0xc4>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d109      	bne.n	8008642 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008634:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	021b      	lsls	r3, r3, #8
 800863c:	697a      	ldr	r2, [r7, #20]
 800863e:	4313      	orrs	r3, r2
 8008640:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	68fa      	ldr	r2, [r7, #12]
 800864c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	685a      	ldr	r2, [r3, #4]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	621a      	str	r2, [r3, #32]
}
 800865c:	bf00      	nop
 800865e:	371c      	adds	r7, #28
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr
 8008668:	40012c00 	.word	0x40012c00
 800866c:	40013400 	.word	0x40013400
 8008670:	40014000 	.word	0x40014000
 8008674:	40014400 	.word	0x40014400
 8008678:	40014800 	.word	0x40014800

0800867c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800867c:	b480      	push	{r7}
 800867e:	b087      	sub	sp, #28
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a1b      	ldr	r3, [r3, #32]
 800868a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a1b      	ldr	r3, [r3, #32]
 8008690:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80086aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	021b      	lsls	r3, r3, #8
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80086c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	051b      	lsls	r3, r3, #20
 80086ca:	693a      	ldr	r2, [r7, #16]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a18      	ldr	r2, [pc, #96]	@ (8008734 <TIM_OC6_SetConfig+0xb8>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d00f      	beq.n	80086f8 <TIM_OC6_SetConfig+0x7c>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a17      	ldr	r2, [pc, #92]	@ (8008738 <TIM_OC6_SetConfig+0xbc>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d00b      	beq.n	80086f8 <TIM_OC6_SetConfig+0x7c>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a16      	ldr	r2, [pc, #88]	@ (800873c <TIM_OC6_SetConfig+0xc0>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d007      	beq.n	80086f8 <TIM_OC6_SetConfig+0x7c>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a15      	ldr	r2, [pc, #84]	@ (8008740 <TIM_OC6_SetConfig+0xc4>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d003      	beq.n	80086f8 <TIM_OC6_SetConfig+0x7c>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4a14      	ldr	r2, [pc, #80]	@ (8008744 <TIM_OC6_SetConfig+0xc8>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d109      	bne.n	800870c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80086fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	695b      	ldr	r3, [r3, #20]
 8008704:	029b      	lsls	r3, r3, #10
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	4313      	orrs	r3, r2
 800870a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	697a      	ldr	r2, [r7, #20]
 8008710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	685a      	ldr	r2, [r3, #4]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	693a      	ldr	r2, [r7, #16]
 8008724:	621a      	str	r2, [r3, #32]
}
 8008726:	bf00      	nop
 8008728:	371c      	adds	r7, #28
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	40012c00 	.word	0x40012c00
 8008738:	40013400 	.word	0x40013400
 800873c:	40014000 	.word	0x40014000
 8008740:	40014400 	.word	0x40014400
 8008744:	40014800 	.word	0x40014800

08008748 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008748:	b480      	push	{r7}
 800874a:	b087      	sub	sp, #28
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6a1b      	ldr	r3, [r3, #32]
 8008758:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	f023 0201 	bic.w	r2, r3, #1
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	011b      	lsls	r3, r3, #4
 8008778:	693a      	ldr	r2, [r7, #16]
 800877a:	4313      	orrs	r3, r2
 800877c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	f023 030a 	bic.w	r3, r3, #10
 8008784:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008786:	697a      	ldr	r2, [r7, #20]
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	4313      	orrs	r3, r2
 800878c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	621a      	str	r2, [r3, #32]
}
 800879a:	bf00      	nop
 800879c:	371c      	adds	r7, #28
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr

080087a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087a6:	b480      	push	{r7}
 80087a8:	b087      	sub	sp, #28
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	60f8      	str	r0, [r7, #12]
 80087ae:	60b9      	str	r1, [r7, #8]
 80087b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6a1b      	ldr	r3, [r3, #32]
 80087bc:	f023 0210 	bic.w	r2, r3, #16
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80087d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	031b      	lsls	r3, r3, #12
 80087d6:	693a      	ldr	r2, [r7, #16]
 80087d8:	4313      	orrs	r3, r2
 80087da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80087e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	011b      	lsls	r3, r3, #4
 80087e8:	697a      	ldr	r2, [r7, #20]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	693a      	ldr	r2, [r7, #16]
 80087f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	697a      	ldr	r2, [r7, #20]
 80087f8:	621a      	str	r2, [r3, #32]
}
 80087fa:	bf00      	nop
 80087fc:	371c      	adds	r7, #28
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008806:	b480      	push	{r7}
 8008808:	b085      	sub	sp, #20
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800881c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008820:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008822:	683a      	ldr	r2, [r7, #0]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	4313      	orrs	r3, r2
 8008828:	f043 0307 	orr.w	r3, r3, #7
 800882c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	609a      	str	r2, [r3, #8]
}
 8008834:	bf00      	nop
 8008836:	3714      	adds	r7, #20
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008840:	b480      	push	{r7}
 8008842:	b087      	sub	sp, #28
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
 800884c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800885a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	021a      	lsls	r2, r3, #8
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	431a      	orrs	r2, r3
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	4313      	orrs	r3, r2
 8008868:	697a      	ldr	r2, [r7, #20]
 800886a:	4313      	orrs	r3, r2
 800886c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	697a      	ldr	r2, [r7, #20]
 8008872:	609a      	str	r2, [r3, #8]
}
 8008874:	bf00      	nop
 8008876:	371c      	adds	r7, #28
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008880:	b480      	push	{r7}
 8008882:	b087      	sub	sp, #28
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	f003 031f 	and.w	r3, r3, #31
 8008892:	2201      	movs	r2, #1
 8008894:	fa02 f303 	lsl.w	r3, r2, r3
 8008898:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6a1a      	ldr	r2, [r3, #32]
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	43db      	mvns	r3, r3
 80088a2:	401a      	ands	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6a1a      	ldr	r2, [r3, #32]
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	f003 031f 	and.w	r3, r3, #31
 80088b2:	6879      	ldr	r1, [r7, #4]
 80088b4:	fa01 f303 	lsl.w	r3, r1, r3
 80088b8:	431a      	orrs	r2, r3
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	621a      	str	r2, [r3, #32]
}
 80088be:	bf00      	nop
 80088c0:	371c      	adds	r7, #28
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
	...

080088cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d101      	bne.n	80088e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088e0:	2302      	movs	r3, #2
 80088e2:	e065      	b.n	80089b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2202      	movs	r2, #2
 80088f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a2c      	ldr	r2, [pc, #176]	@ (80089bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d004      	beq.n	8008918 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a2b      	ldr	r2, [pc, #172]	@ (80089c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d108      	bne.n	800892a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800891e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	4313      	orrs	r3, r2
 8008928:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008930:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008934:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	4313      	orrs	r3, r2
 800893e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a1b      	ldr	r2, [pc, #108]	@ (80089bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d018      	beq.n	8008984 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800895a:	d013      	beq.n	8008984 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a18      	ldr	r2, [pc, #96]	@ (80089c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d00e      	beq.n	8008984 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a17      	ldr	r2, [pc, #92]	@ (80089c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d009      	beq.n	8008984 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a12      	ldr	r2, [pc, #72]	@ (80089c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d004      	beq.n	8008984 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a13      	ldr	r2, [pc, #76]	@ (80089cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d10c      	bne.n	800899e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800898a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	4313      	orrs	r3, r2
 8008994:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2201      	movs	r2, #1
 80089a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3714      	adds	r7, #20
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr
 80089bc:	40012c00 	.word	0x40012c00
 80089c0:	40013400 	.word	0x40013400
 80089c4:	40000400 	.word	0x40000400
 80089c8:	40000800 	.word	0x40000800
 80089cc:	40014000 	.word	0x40014000

080089d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80089da:	2300      	movs	r3, #0
 80089dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d101      	bne.n	80089ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80089e8:	2302      	movs	r3, #2
 80089ea:	e073      	b.n	8008ad4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	695b      	ldr	r3, [r3, #20]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a52:	4313      	orrs	r3, r2
 8008a54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	041b      	lsls	r3, r3, #16
 8008a62:	4313      	orrs	r3, r2
 8008a64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	69db      	ldr	r3, [r3, #28]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a19      	ldr	r2, [pc, #100]	@ (8008ae0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d004      	beq.n	8008a88 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a18      	ldr	r2, [pc, #96]	@ (8008ae4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d11c      	bne.n	8008ac2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a92:	051b      	lsls	r3, r3, #20
 8008a94:	4313      	orrs	r3, r2
 8008a96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	40012c00 	.word	0x40012c00
 8008ae4:	40013400 	.word	0x40013400

08008ae8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d101      	bne.n	8008afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e042      	b.n	8008b80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d106      	bne.n	8008b12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f7f9 fb9f 	bl	8002250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2224      	movs	r2, #36	@ 0x24
 8008b16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f022 0201 	bic.w	r2, r2, #1
 8008b28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d002      	beq.n	8008b38 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 ff6e 	bl	8009a14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fc9f 	bl	800947c <UART_SetConfig>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d101      	bne.n	8008b48 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e01b      	b.n	8008b80 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	685a      	ldr	r2, [r3, #4]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	689a      	ldr	r2, [r3, #8]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f042 0201 	orr.w	r2, r2, #1
 8008b76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 ffed 	bl	8009b58 <UART_CheckIdleState>
 8008b7e:	4603      	mov	r3, r0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b08a      	sub	sp, #40	@ 0x28
 8008b8c:	af02      	add	r7, sp, #8
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	603b      	str	r3, [r7, #0]
 8008b94:	4613      	mov	r3, r2
 8008b96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b9e:	2b20      	cmp	r3, #32
 8008ba0:	d17b      	bne.n	8008c9a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d002      	beq.n	8008bae <HAL_UART_Transmit+0x26>
 8008ba8:	88fb      	ldrh	r3, [r7, #6]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d101      	bne.n	8008bb2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e074      	b.n	8008c9c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2221      	movs	r2, #33	@ 0x21
 8008bbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008bc2:	f7f9 fc91 	bl	80024e8 <HAL_GetTick>
 8008bc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	88fa      	ldrh	r2, [r7, #6]
 8008bcc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	88fa      	ldrh	r2, [r7, #6]
 8008bd4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008be0:	d108      	bne.n	8008bf4 <HAL_UART_Transmit+0x6c>
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d104      	bne.n	8008bf4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008bea:	2300      	movs	r3, #0
 8008bec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	61bb      	str	r3, [r7, #24]
 8008bf2:	e003      	b.n	8008bfc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008bfc:	e030      	b.n	8008c60 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	9300      	str	r3, [sp, #0]
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	2200      	movs	r2, #0
 8008c06:	2180      	movs	r1, #128	@ 0x80
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	f001 f84f 	bl	8009cac <UART_WaitOnFlagUntilTimeout>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d005      	beq.n	8008c20 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2220      	movs	r2, #32
 8008c18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	e03d      	b.n	8008c9c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d10b      	bne.n	8008c3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	881b      	ldrh	r3, [r3, #0]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c34:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	3302      	adds	r3, #2
 8008c3a:	61bb      	str	r3, [r7, #24]
 8008c3c:	e007      	b.n	8008c4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	781a      	ldrb	r2, [r3, #0]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	3b01      	subs	r3, #1
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d1c8      	bne.n	8008bfe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	2200      	movs	r2, #0
 8008c74:	2140      	movs	r1, #64	@ 0x40
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f001 f818 	bl	8009cac <UART_WaitOnFlagUntilTimeout>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d005      	beq.n	8008c8e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2220      	movs	r2, #32
 8008c86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	e006      	b.n	8008c9c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2220      	movs	r2, #32
 8008c92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	e000      	b.n	8008c9c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008c9a:	2302      	movs	r3, #2
  }
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3720      	adds	r7, #32
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b08a      	sub	sp, #40	@ 0x28
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	4613      	mov	r3, r2
 8008cb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cb8:	2b20      	cmp	r3, #32
 8008cba:	d167      	bne.n	8008d8c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d002      	beq.n	8008cc8 <HAL_UART_Transmit_DMA+0x24>
 8008cc2:	88fb      	ldrh	r3, [r7, #6]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d101      	bne.n	8008ccc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e060      	b.n	8008d8e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	88fa      	ldrh	r2, [r7, #6]
 8008cd6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	88fa      	ldrh	r2, [r7, #6]
 8008cde:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2221      	movs	r2, #33	@ 0x21
 8008cee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d028      	beq.n	8008d4c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008cfe:	4a26      	ldr	r2, [pc, #152]	@ (8008d98 <HAL_UART_Transmit_DMA+0xf4>)
 8008d00:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d06:	4a25      	ldr	r2, [pc, #148]	@ (8008d9c <HAL_UART_Transmit_DMA+0xf8>)
 8008d08:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d0e:	4a24      	ldr	r2, [pc, #144]	@ (8008da0 <HAL_UART_Transmit_DMA+0xfc>)
 8008d10:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d16:	2200      	movs	r2, #0
 8008d18:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d22:	4619      	mov	r1, r3
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3328      	adds	r3, #40	@ 0x28
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	88fb      	ldrh	r3, [r7, #6]
 8008d2e:	f7fc fc83 	bl	8005638 <HAL_DMA_Start_IT>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d009      	beq.n	8008d4c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2210      	movs	r2, #16
 8008d3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2220      	movs	r2, #32
 8008d44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e020      	b.n	8008d8e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2240      	movs	r2, #64	@ 0x40
 8008d52:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	3308      	adds	r3, #8
 8008d5a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	e853 3f00 	ldrex	r3, [r3]
 8008d62:	613b      	str	r3, [r7, #16]
   return(result);
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3308      	adds	r3, #8
 8008d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d74:	623a      	str	r2, [r7, #32]
 8008d76:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d78:	69f9      	ldr	r1, [r7, #28]
 8008d7a:	6a3a      	ldr	r2, [r7, #32]
 8008d7c:	e841 2300 	strex	r3, r2, [r1]
 8008d80:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1e5      	bne.n	8008d54 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	e000      	b.n	8008d8e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008d8c:	2302      	movs	r3, #2
  }
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3728      	adds	r7, #40	@ 0x28
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	0800a023 	.word	0x0800a023
 8008d9c:	0800a0bd 	.word	0x0800a0bd
 8008da0:	0800a243 	.word	0x0800a243

08008da4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b0ba      	sub	sp, #232	@ 0xe8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	69db      	ldr	r3, [r3, #28]
 8008db2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008dca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008dce:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008dd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d11b      	bne.n	8008e18 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008de4:	f003 0320 	and.w	r3, r3, #32
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d015      	beq.n	8008e18 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008df0:	f003 0320 	and.w	r3, r3, #32
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d105      	bne.n	8008e04 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008df8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d009      	beq.n	8008e18 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f000 82e3 	beq.w	80093d4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	4798      	blx	r3
      }
      return;
 8008e16:	e2dd      	b.n	80093d4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f000 8123 	beq.w	8009068 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008e22:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008e26:	4b8d      	ldr	r3, [pc, #564]	@ (800905c <HAL_UART_IRQHandler+0x2b8>)
 8008e28:	4013      	ands	r3, r2
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d106      	bne.n	8008e3c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008e2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008e32:	4b8b      	ldr	r3, [pc, #556]	@ (8009060 <HAL_UART_IRQHandler+0x2bc>)
 8008e34:	4013      	ands	r3, r2
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f000 8116 	beq.w	8009068 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d011      	beq.n	8008e6c <HAL_UART_IRQHandler+0xc8>
 8008e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00b      	beq.n	8008e6c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e62:	f043 0201 	orr.w	r2, r3, #1
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e70:	f003 0302 	and.w	r3, r3, #2
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d011      	beq.n	8008e9c <HAL_UART_IRQHandler+0xf8>
 8008e78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e7c:	f003 0301 	and.w	r3, r3, #1
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00b      	beq.n	8008e9c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2202      	movs	r2, #2
 8008e8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e92:	f043 0204 	orr.w	r2, r3, #4
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ea0:	f003 0304 	and.w	r3, r3, #4
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d011      	beq.n	8008ecc <HAL_UART_IRQHandler+0x128>
 8008ea8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008eac:	f003 0301 	and.w	r3, r3, #1
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00b      	beq.n	8008ecc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2204      	movs	r2, #4
 8008eba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ec2:	f043 0202 	orr.w	r2, r3, #2
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ed0:	f003 0308 	and.w	r3, r3, #8
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d017      	beq.n	8008f08 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008edc:	f003 0320 	and.w	r3, r3, #32
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d105      	bne.n	8008ef0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008ee4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008ee8:	4b5c      	ldr	r3, [pc, #368]	@ (800905c <HAL_UART_IRQHandler+0x2b8>)
 8008eea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00b      	beq.n	8008f08 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2208      	movs	r2, #8
 8008ef6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008efe:	f043 0208 	orr.w	r2, r3, #8
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d012      	beq.n	8008f3a <HAL_UART_IRQHandler+0x196>
 8008f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00c      	beq.n	8008f3a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008f28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f30:	f043 0220 	orr.w	r2, r3, #32
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 8249 	beq.w	80093d8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f4a:	f003 0320 	and.w	r3, r3, #32
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d013      	beq.n	8008f7a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f56:	f003 0320 	and.w	r3, r3, #32
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d105      	bne.n	8008f6a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d007      	beq.n	8008f7a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d003      	beq.n	8008f7a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f8e:	2b40      	cmp	r3, #64	@ 0x40
 8008f90:	d005      	beq.n	8008f9e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008f92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008f96:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d054      	beq.n	8009048 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 ffd9 	bl	8009f56 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fae:	2b40      	cmp	r3, #64	@ 0x40
 8008fb0:	d146      	bne.n	8009040 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3308      	adds	r3, #8
 8008fb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008fc0:	e853 3f00 	ldrex	r3, [r3]
 8008fc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008fc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008fcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3308      	adds	r3, #8
 8008fda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008fde:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008fe2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008fea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008fee:	e841 2300 	strex	r3, r2, [r1]
 8008ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008ff6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1d9      	bne.n	8008fb2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009004:	2b00      	cmp	r3, #0
 8009006:	d017      	beq.n	8009038 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800900e:	4a15      	ldr	r2, [pc, #84]	@ (8009064 <HAL_UART_IRQHandler+0x2c0>)
 8009010:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009018:	4618      	mov	r0, r3
 800901a:	f7fc fbe1 	bl	80057e0 <HAL_DMA_Abort_IT>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d019      	beq.n	8009058 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800902a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009032:	4610      	mov	r0, r2
 8009034:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009036:	e00f      	b.n	8009058 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 f9ff 	bl	800943c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800903e:	e00b      	b.n	8009058 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 f9fb 	bl	800943c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009046:	e007      	b.n	8009058 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 f9f7 	bl	800943c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009056:	e1bf      	b.n	80093d8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009058:	bf00      	nop
    return;
 800905a:	e1bd      	b.n	80093d8 <HAL_UART_IRQHandler+0x634>
 800905c:	10000001 	.word	0x10000001
 8009060:	04000120 	.word	0x04000120
 8009064:	0800a2c3 	.word	0x0800a2c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800906c:	2b01      	cmp	r3, #1
 800906e:	f040 8153 	bne.w	8009318 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009076:	f003 0310 	and.w	r3, r3, #16
 800907a:	2b00      	cmp	r3, #0
 800907c:	f000 814c 	beq.w	8009318 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009084:	f003 0310 	and.w	r3, r3, #16
 8009088:	2b00      	cmp	r3, #0
 800908a:	f000 8145 	beq.w	8009318 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2210      	movs	r2, #16
 8009094:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090a0:	2b40      	cmp	r3, #64	@ 0x40
 80090a2:	f040 80bb 	bne.w	800921c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80090b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f000 818f 	beq.w	80093dc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80090c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80090c8:	429a      	cmp	r2, r3
 80090ca:	f080 8187 	bcs.w	80093dc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80090d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 0320 	and.w	r3, r3, #32
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f040 8087 	bne.w	80091fa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80090f8:	e853 3f00 	ldrex	r3, [r3]
 80090fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009100:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009104:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009108:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	461a      	mov	r2, r3
 8009112:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009116:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800911a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009122:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009126:	e841 2300 	strex	r3, r2, [r1]
 800912a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800912e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1da      	bne.n	80090ec <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	3308      	adds	r3, #8
 800913c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009140:	e853 3f00 	ldrex	r3, [r3]
 8009144:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009146:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009148:	f023 0301 	bic.w	r3, r3, #1
 800914c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	3308      	adds	r3, #8
 8009156:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800915a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800915e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009160:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009162:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009166:	e841 2300 	strex	r3, r2, [r1]
 800916a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800916c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800916e:	2b00      	cmp	r3, #0
 8009170:	d1e1      	bne.n	8009136 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	3308      	adds	r3, #8
 8009178:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800917c:	e853 3f00 	ldrex	r3, [r3]
 8009180:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009182:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009184:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009188:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	3308      	adds	r3, #8
 8009192:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009196:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009198:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800919c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800919e:	e841 2300 	strex	r3, r2, [r1]
 80091a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80091a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1e3      	bne.n	8009172 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2220      	movs	r2, #32
 80091ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091c0:	e853 3f00 	ldrex	r3, [r3]
 80091c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80091c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091c8:	f023 0310 	bic.w	r3, r3, #16
 80091cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	461a      	mov	r2, r3
 80091d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80091dc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80091e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80091e2:	e841 2300 	strex	r3, r2, [r1]
 80091e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80091e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1e4      	bne.n	80091b8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7fc fa9a 	bl	800572e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2202      	movs	r2, #2
 80091fe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800920c:	b29b      	uxth	r3, r3
 800920e:	1ad3      	subs	r3, r2, r3
 8009210:	b29b      	uxth	r3, r3
 8009212:	4619      	mov	r1, r3
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f002 ff89 	bl	800c12c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800921a:	e0df      	b.n	80093dc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009228:	b29b      	uxth	r3, r3
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009236:	b29b      	uxth	r3, r3
 8009238:	2b00      	cmp	r3, #0
 800923a:	f000 80d1 	beq.w	80093e0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800923e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009242:	2b00      	cmp	r3, #0
 8009244:	f000 80cc 	beq.w	80093e0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009250:	e853 3f00 	ldrex	r3, [r3]
 8009254:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009258:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800925c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	461a      	mov	r2, r3
 8009266:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800926a:	647b      	str	r3, [r7, #68]	@ 0x44
 800926c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009270:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009272:	e841 2300 	strex	r3, r2, [r1]
 8009276:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800927a:	2b00      	cmp	r3, #0
 800927c:	d1e4      	bne.n	8009248 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	3308      	adds	r3, #8
 8009284:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009288:	e853 3f00 	ldrex	r3, [r3]
 800928c:	623b      	str	r3, [r7, #32]
   return(result);
 800928e:	6a3b      	ldr	r3, [r7, #32]
 8009290:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009294:	f023 0301 	bic.w	r3, r3, #1
 8009298:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	3308      	adds	r3, #8
 80092a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80092a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80092a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092ae:	e841 2300 	strex	r3, r2, [r1]
 80092b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80092b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d1e1      	bne.n	800927e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2220      	movs	r2, #32
 80092be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	e853 3f00 	ldrex	r3, [r3]
 80092da:	60fb      	str	r3, [r7, #12]
   return(result);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f023 0310 	bic.w	r3, r3, #16
 80092e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	461a      	mov	r2, r3
 80092ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80092f0:	61fb      	str	r3, [r7, #28]
 80092f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f4:	69b9      	ldr	r1, [r7, #24]
 80092f6:	69fa      	ldr	r2, [r7, #28]
 80092f8:	e841 2300 	strex	r3, r2, [r1]
 80092fc:	617b      	str	r3, [r7, #20]
   return(result);
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d1e4      	bne.n	80092ce <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2202      	movs	r2, #2
 8009308:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800930a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800930e:	4619      	mov	r1, r3
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f002 ff0b 	bl	800c12c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009316:	e063      	b.n	80093e0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800931c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00e      	beq.n	8009342 <HAL_UART_IRQHandler+0x59e>
 8009324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009328:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800932c:	2b00      	cmp	r3, #0
 800932e:	d008      	beq.n	8009342 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009338:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f001 f802 	bl	800a344 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009340:	e051      	b.n	80093e6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800934a:	2b00      	cmp	r3, #0
 800934c:	d014      	beq.n	8009378 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800934e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009356:	2b00      	cmp	r3, #0
 8009358:	d105      	bne.n	8009366 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800935a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800935e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009362:	2b00      	cmp	r3, #0
 8009364:	d008      	beq.n	8009378 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800936a:	2b00      	cmp	r3, #0
 800936c:	d03a      	beq.n	80093e4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	4798      	blx	r3
    }
    return;
 8009376:	e035      	b.n	80093e4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800937c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009380:	2b00      	cmp	r3, #0
 8009382:	d009      	beq.n	8009398 <HAL_UART_IRQHandler+0x5f4>
 8009384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800938c:	2b00      	cmp	r3, #0
 800938e:	d003      	beq.n	8009398 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 ffac 	bl	800a2ee <UART_EndTransmit_IT>
    return;
 8009396:	e026      	b.n	80093e6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800939c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d009      	beq.n	80093b8 <HAL_UART_IRQHandler+0x614>
 80093a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093a8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d003      	beq.n	80093b8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 ffdb 	bl	800a36c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80093b6:	e016      	b.n	80093e6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80093b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d010      	beq.n	80093e6 <HAL_UART_IRQHandler+0x642>
 80093c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	da0c      	bge.n	80093e6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 ffc3 	bl	800a358 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80093d2:	e008      	b.n	80093e6 <HAL_UART_IRQHandler+0x642>
      return;
 80093d4:	bf00      	nop
 80093d6:	e006      	b.n	80093e6 <HAL_UART_IRQHandler+0x642>
    return;
 80093d8:	bf00      	nop
 80093da:	e004      	b.n	80093e6 <HAL_UART_IRQHandler+0x642>
      return;
 80093dc:	bf00      	nop
 80093de:	e002      	b.n	80093e6 <HAL_UART_IRQHandler+0x642>
      return;
 80093e0:	bf00      	nop
 80093e2:	e000      	b.n	80093e6 <HAL_UART_IRQHandler+0x642>
    return;
 80093e4:	bf00      	nop
  }
}
 80093e6:	37e8      	adds	r7, #232	@ 0xe8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80093f4:	bf00      	nop
 80093f6:	370c      	adds	r7, #12
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009408:	bf00      	nop
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800941c:	bf00      	nop
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800945e:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009466:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	4313      	orrs	r3, r2
}
 800946e:	4618      	mov	r0, r3
 8009470:	3714      	adds	r7, #20
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr
	...

0800947c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800947c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009480:	b08c      	sub	sp, #48	@ 0x30
 8009482:	af00      	add	r7, sp, #0
 8009484:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009486:	2300      	movs	r3, #0
 8009488:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	689a      	ldr	r2, [r3, #8]
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	431a      	orrs	r2, r3
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	695b      	ldr	r3, [r3, #20]
 800949a:	431a      	orrs	r2, r3
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	69db      	ldr	r3, [r3, #28]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	4bab      	ldr	r3, [pc, #684]	@ (8009758 <UART_SetConfig+0x2dc>)
 80094ac:	4013      	ands	r3, r2
 80094ae:	697a      	ldr	r2, [r7, #20]
 80094b0:	6812      	ldr	r2, [r2, #0]
 80094b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094b4:	430b      	orrs	r3, r1
 80094b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	68da      	ldr	r2, [r3, #12]
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	430a      	orrs	r2, r1
 80094cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4aa0      	ldr	r2, [pc, #640]	@ (800975c <UART_SetConfig+0x2e0>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d004      	beq.n	80094e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	6a1b      	ldr	r3, [r3, #32]
 80094e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094e4:	4313      	orrs	r3, r2
 80094e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80094f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80094f6:	697a      	ldr	r2, [r7, #20]
 80094f8:	6812      	ldr	r2, [r2, #0]
 80094fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094fc:	430b      	orrs	r3, r1
 80094fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009506:	f023 010f 	bic.w	r1, r3, #15
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	430a      	orrs	r2, r1
 8009514:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a91      	ldr	r2, [pc, #580]	@ (8009760 <UART_SetConfig+0x2e4>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d125      	bne.n	800956c <UART_SetConfig+0xf0>
 8009520:	4b90      	ldr	r3, [pc, #576]	@ (8009764 <UART_SetConfig+0x2e8>)
 8009522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009526:	f003 0303 	and.w	r3, r3, #3
 800952a:	2b03      	cmp	r3, #3
 800952c:	d81a      	bhi.n	8009564 <UART_SetConfig+0xe8>
 800952e:	a201      	add	r2, pc, #4	@ (adr r2, 8009534 <UART_SetConfig+0xb8>)
 8009530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009534:	08009545 	.word	0x08009545
 8009538:	08009555 	.word	0x08009555
 800953c:	0800954d 	.word	0x0800954d
 8009540:	0800955d 	.word	0x0800955d
 8009544:	2301      	movs	r3, #1
 8009546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800954a:	e0d6      	b.n	80096fa <UART_SetConfig+0x27e>
 800954c:	2302      	movs	r3, #2
 800954e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009552:	e0d2      	b.n	80096fa <UART_SetConfig+0x27e>
 8009554:	2304      	movs	r3, #4
 8009556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800955a:	e0ce      	b.n	80096fa <UART_SetConfig+0x27e>
 800955c:	2308      	movs	r3, #8
 800955e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009562:	e0ca      	b.n	80096fa <UART_SetConfig+0x27e>
 8009564:	2310      	movs	r3, #16
 8009566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800956a:	e0c6      	b.n	80096fa <UART_SetConfig+0x27e>
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a7d      	ldr	r2, [pc, #500]	@ (8009768 <UART_SetConfig+0x2ec>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d138      	bne.n	80095e8 <UART_SetConfig+0x16c>
 8009576:	4b7b      	ldr	r3, [pc, #492]	@ (8009764 <UART_SetConfig+0x2e8>)
 8009578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800957c:	f003 030c 	and.w	r3, r3, #12
 8009580:	2b0c      	cmp	r3, #12
 8009582:	d82d      	bhi.n	80095e0 <UART_SetConfig+0x164>
 8009584:	a201      	add	r2, pc, #4	@ (adr r2, 800958c <UART_SetConfig+0x110>)
 8009586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800958a:	bf00      	nop
 800958c:	080095c1 	.word	0x080095c1
 8009590:	080095e1 	.word	0x080095e1
 8009594:	080095e1 	.word	0x080095e1
 8009598:	080095e1 	.word	0x080095e1
 800959c:	080095d1 	.word	0x080095d1
 80095a0:	080095e1 	.word	0x080095e1
 80095a4:	080095e1 	.word	0x080095e1
 80095a8:	080095e1 	.word	0x080095e1
 80095ac:	080095c9 	.word	0x080095c9
 80095b0:	080095e1 	.word	0x080095e1
 80095b4:	080095e1 	.word	0x080095e1
 80095b8:	080095e1 	.word	0x080095e1
 80095bc:	080095d9 	.word	0x080095d9
 80095c0:	2300      	movs	r3, #0
 80095c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095c6:	e098      	b.n	80096fa <UART_SetConfig+0x27e>
 80095c8:	2302      	movs	r3, #2
 80095ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095ce:	e094      	b.n	80096fa <UART_SetConfig+0x27e>
 80095d0:	2304      	movs	r3, #4
 80095d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095d6:	e090      	b.n	80096fa <UART_SetConfig+0x27e>
 80095d8:	2308      	movs	r3, #8
 80095da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095de:	e08c      	b.n	80096fa <UART_SetConfig+0x27e>
 80095e0:	2310      	movs	r3, #16
 80095e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095e6:	e088      	b.n	80096fa <UART_SetConfig+0x27e>
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a5f      	ldr	r2, [pc, #380]	@ (800976c <UART_SetConfig+0x2f0>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d125      	bne.n	800963e <UART_SetConfig+0x1c2>
 80095f2:	4b5c      	ldr	r3, [pc, #368]	@ (8009764 <UART_SetConfig+0x2e8>)
 80095f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80095fc:	2b30      	cmp	r3, #48	@ 0x30
 80095fe:	d016      	beq.n	800962e <UART_SetConfig+0x1b2>
 8009600:	2b30      	cmp	r3, #48	@ 0x30
 8009602:	d818      	bhi.n	8009636 <UART_SetConfig+0x1ba>
 8009604:	2b20      	cmp	r3, #32
 8009606:	d00a      	beq.n	800961e <UART_SetConfig+0x1a2>
 8009608:	2b20      	cmp	r3, #32
 800960a:	d814      	bhi.n	8009636 <UART_SetConfig+0x1ba>
 800960c:	2b00      	cmp	r3, #0
 800960e:	d002      	beq.n	8009616 <UART_SetConfig+0x19a>
 8009610:	2b10      	cmp	r3, #16
 8009612:	d008      	beq.n	8009626 <UART_SetConfig+0x1aa>
 8009614:	e00f      	b.n	8009636 <UART_SetConfig+0x1ba>
 8009616:	2300      	movs	r3, #0
 8009618:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800961c:	e06d      	b.n	80096fa <UART_SetConfig+0x27e>
 800961e:	2302      	movs	r3, #2
 8009620:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009624:	e069      	b.n	80096fa <UART_SetConfig+0x27e>
 8009626:	2304      	movs	r3, #4
 8009628:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800962c:	e065      	b.n	80096fa <UART_SetConfig+0x27e>
 800962e:	2308      	movs	r3, #8
 8009630:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009634:	e061      	b.n	80096fa <UART_SetConfig+0x27e>
 8009636:	2310      	movs	r3, #16
 8009638:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800963c:	e05d      	b.n	80096fa <UART_SetConfig+0x27e>
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a4b      	ldr	r2, [pc, #300]	@ (8009770 <UART_SetConfig+0x2f4>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d125      	bne.n	8009694 <UART_SetConfig+0x218>
 8009648:	4b46      	ldr	r3, [pc, #280]	@ (8009764 <UART_SetConfig+0x2e8>)
 800964a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800964e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009652:	2bc0      	cmp	r3, #192	@ 0xc0
 8009654:	d016      	beq.n	8009684 <UART_SetConfig+0x208>
 8009656:	2bc0      	cmp	r3, #192	@ 0xc0
 8009658:	d818      	bhi.n	800968c <UART_SetConfig+0x210>
 800965a:	2b80      	cmp	r3, #128	@ 0x80
 800965c:	d00a      	beq.n	8009674 <UART_SetConfig+0x1f8>
 800965e:	2b80      	cmp	r3, #128	@ 0x80
 8009660:	d814      	bhi.n	800968c <UART_SetConfig+0x210>
 8009662:	2b00      	cmp	r3, #0
 8009664:	d002      	beq.n	800966c <UART_SetConfig+0x1f0>
 8009666:	2b40      	cmp	r3, #64	@ 0x40
 8009668:	d008      	beq.n	800967c <UART_SetConfig+0x200>
 800966a:	e00f      	b.n	800968c <UART_SetConfig+0x210>
 800966c:	2300      	movs	r3, #0
 800966e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009672:	e042      	b.n	80096fa <UART_SetConfig+0x27e>
 8009674:	2302      	movs	r3, #2
 8009676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800967a:	e03e      	b.n	80096fa <UART_SetConfig+0x27e>
 800967c:	2304      	movs	r3, #4
 800967e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009682:	e03a      	b.n	80096fa <UART_SetConfig+0x27e>
 8009684:	2308      	movs	r3, #8
 8009686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800968a:	e036      	b.n	80096fa <UART_SetConfig+0x27e>
 800968c:	2310      	movs	r3, #16
 800968e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009692:	e032      	b.n	80096fa <UART_SetConfig+0x27e>
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a30      	ldr	r2, [pc, #192]	@ (800975c <UART_SetConfig+0x2e0>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d12a      	bne.n	80096f4 <UART_SetConfig+0x278>
 800969e:	4b31      	ldr	r3, [pc, #196]	@ (8009764 <UART_SetConfig+0x2e8>)
 80096a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80096a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80096ac:	d01a      	beq.n	80096e4 <UART_SetConfig+0x268>
 80096ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80096b2:	d81b      	bhi.n	80096ec <UART_SetConfig+0x270>
 80096b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096b8:	d00c      	beq.n	80096d4 <UART_SetConfig+0x258>
 80096ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096be:	d815      	bhi.n	80096ec <UART_SetConfig+0x270>
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d003      	beq.n	80096cc <UART_SetConfig+0x250>
 80096c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096c8:	d008      	beq.n	80096dc <UART_SetConfig+0x260>
 80096ca:	e00f      	b.n	80096ec <UART_SetConfig+0x270>
 80096cc:	2300      	movs	r3, #0
 80096ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096d2:	e012      	b.n	80096fa <UART_SetConfig+0x27e>
 80096d4:	2302      	movs	r3, #2
 80096d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096da:	e00e      	b.n	80096fa <UART_SetConfig+0x27e>
 80096dc:	2304      	movs	r3, #4
 80096de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096e2:	e00a      	b.n	80096fa <UART_SetConfig+0x27e>
 80096e4:	2308      	movs	r3, #8
 80096e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096ea:	e006      	b.n	80096fa <UART_SetConfig+0x27e>
 80096ec:	2310      	movs	r3, #16
 80096ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096f2:	e002      	b.n	80096fa <UART_SetConfig+0x27e>
 80096f4:	2310      	movs	r3, #16
 80096f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a17      	ldr	r2, [pc, #92]	@ (800975c <UART_SetConfig+0x2e0>)
 8009700:	4293      	cmp	r3, r2
 8009702:	f040 80a8 	bne.w	8009856 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009706:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800970a:	2b08      	cmp	r3, #8
 800970c:	d834      	bhi.n	8009778 <UART_SetConfig+0x2fc>
 800970e:	a201      	add	r2, pc, #4	@ (adr r2, 8009714 <UART_SetConfig+0x298>)
 8009710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009714:	08009739 	.word	0x08009739
 8009718:	08009779 	.word	0x08009779
 800971c:	08009741 	.word	0x08009741
 8009720:	08009779 	.word	0x08009779
 8009724:	08009747 	.word	0x08009747
 8009728:	08009779 	.word	0x08009779
 800972c:	08009779 	.word	0x08009779
 8009730:	08009779 	.word	0x08009779
 8009734:	0800974f 	.word	0x0800974f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009738:	f7fd f912 	bl	8006960 <HAL_RCC_GetPCLK1Freq>
 800973c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800973e:	e021      	b.n	8009784 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009740:	4b0c      	ldr	r3, [pc, #48]	@ (8009774 <UART_SetConfig+0x2f8>)
 8009742:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009744:	e01e      	b.n	8009784 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009746:	f7fd f89d 	bl	8006884 <HAL_RCC_GetSysClockFreq>
 800974a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800974c:	e01a      	b.n	8009784 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800974e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009752:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009754:	e016      	b.n	8009784 <UART_SetConfig+0x308>
 8009756:	bf00      	nop
 8009758:	cfff69f3 	.word	0xcfff69f3
 800975c:	40008000 	.word	0x40008000
 8009760:	40013800 	.word	0x40013800
 8009764:	40021000 	.word	0x40021000
 8009768:	40004400 	.word	0x40004400
 800976c:	40004800 	.word	0x40004800
 8009770:	40004c00 	.word	0x40004c00
 8009774:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009778:	2300      	movs	r3, #0
 800977a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009782:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009786:	2b00      	cmp	r3, #0
 8009788:	f000 812a 	beq.w	80099e0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009790:	4a9e      	ldr	r2, [pc, #632]	@ (8009a0c <UART_SetConfig+0x590>)
 8009792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009796:	461a      	mov	r2, r3
 8009798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800979a:	fbb3 f3f2 	udiv	r3, r3, r2
 800979e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	685a      	ldr	r2, [r3, #4]
 80097a4:	4613      	mov	r3, r2
 80097a6:	005b      	lsls	r3, r3, #1
 80097a8:	4413      	add	r3, r2
 80097aa:	69ba      	ldr	r2, [r7, #24]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d305      	bcc.n	80097bc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097b6:	69ba      	ldr	r2, [r7, #24]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d903      	bls.n	80097c4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80097c2:	e10d      	b.n	80099e0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097c6:	2200      	movs	r2, #0
 80097c8:	60bb      	str	r3, [r7, #8]
 80097ca:	60fa      	str	r2, [r7, #12]
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097d0:	4a8e      	ldr	r2, [pc, #568]	@ (8009a0c <UART_SetConfig+0x590>)
 80097d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	2200      	movs	r2, #0
 80097da:	603b      	str	r3, [r7, #0]
 80097dc:	607a      	str	r2, [r7, #4]
 80097de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80097e6:	f7f7 fa77 	bl	8000cd8 <__aeabi_uldivmod>
 80097ea:	4602      	mov	r2, r0
 80097ec:	460b      	mov	r3, r1
 80097ee:	4610      	mov	r0, r2
 80097f0:	4619      	mov	r1, r3
 80097f2:	f04f 0200 	mov.w	r2, #0
 80097f6:	f04f 0300 	mov.w	r3, #0
 80097fa:	020b      	lsls	r3, r1, #8
 80097fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009800:	0202      	lsls	r2, r0, #8
 8009802:	6979      	ldr	r1, [r7, #20]
 8009804:	6849      	ldr	r1, [r1, #4]
 8009806:	0849      	lsrs	r1, r1, #1
 8009808:	2000      	movs	r0, #0
 800980a:	460c      	mov	r4, r1
 800980c:	4605      	mov	r5, r0
 800980e:	eb12 0804 	adds.w	r8, r2, r4
 8009812:	eb43 0905 	adc.w	r9, r3, r5
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	469a      	mov	sl, r3
 800981e:	4693      	mov	fp, r2
 8009820:	4652      	mov	r2, sl
 8009822:	465b      	mov	r3, fp
 8009824:	4640      	mov	r0, r8
 8009826:	4649      	mov	r1, r9
 8009828:	f7f7 fa56 	bl	8000cd8 <__aeabi_uldivmod>
 800982c:	4602      	mov	r2, r0
 800982e:	460b      	mov	r3, r1
 8009830:	4613      	mov	r3, r2
 8009832:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009834:	6a3b      	ldr	r3, [r7, #32]
 8009836:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800983a:	d308      	bcc.n	800984e <UART_SetConfig+0x3d2>
 800983c:	6a3b      	ldr	r3, [r7, #32]
 800983e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009842:	d204      	bcs.n	800984e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	6a3a      	ldr	r2, [r7, #32]
 800984a:	60da      	str	r2, [r3, #12]
 800984c:	e0c8      	b.n	80099e0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009854:	e0c4      	b.n	80099e0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	69db      	ldr	r3, [r3, #28]
 800985a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800985e:	d167      	bne.n	8009930 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009860:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009864:	2b08      	cmp	r3, #8
 8009866:	d828      	bhi.n	80098ba <UART_SetConfig+0x43e>
 8009868:	a201      	add	r2, pc, #4	@ (adr r2, 8009870 <UART_SetConfig+0x3f4>)
 800986a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800986e:	bf00      	nop
 8009870:	08009895 	.word	0x08009895
 8009874:	0800989d 	.word	0x0800989d
 8009878:	080098a5 	.word	0x080098a5
 800987c:	080098bb 	.word	0x080098bb
 8009880:	080098ab 	.word	0x080098ab
 8009884:	080098bb 	.word	0x080098bb
 8009888:	080098bb 	.word	0x080098bb
 800988c:	080098bb 	.word	0x080098bb
 8009890:	080098b3 	.word	0x080098b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009894:	f7fd f864 	bl	8006960 <HAL_RCC_GetPCLK1Freq>
 8009898:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800989a:	e014      	b.n	80098c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800989c:	f7fd f876 	bl	800698c <HAL_RCC_GetPCLK2Freq>
 80098a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80098a2:	e010      	b.n	80098c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098a4:	4b5a      	ldr	r3, [pc, #360]	@ (8009a10 <UART_SetConfig+0x594>)
 80098a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80098a8:	e00d      	b.n	80098c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098aa:	f7fc ffeb 	bl	8006884 <HAL_RCC_GetSysClockFreq>
 80098ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80098b0:	e009      	b.n	80098c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80098b8:	e005      	b.n	80098c6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80098ba:	2300      	movs	r3, #0
 80098bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80098c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80098c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f000 8089 	beq.w	80099e0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098d2:	4a4e      	ldr	r2, [pc, #312]	@ (8009a0c <UART_SetConfig+0x590>)
 80098d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098d8:	461a      	mov	r2, r3
 80098da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80098e0:	005a      	lsls	r2, r3, #1
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	085b      	lsrs	r3, r3, #1
 80098e8:	441a      	add	r2, r3
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80098f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098f4:	6a3b      	ldr	r3, [r7, #32]
 80098f6:	2b0f      	cmp	r3, #15
 80098f8:	d916      	bls.n	8009928 <UART_SetConfig+0x4ac>
 80098fa:	6a3b      	ldr	r3, [r7, #32]
 80098fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009900:	d212      	bcs.n	8009928 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009902:	6a3b      	ldr	r3, [r7, #32]
 8009904:	b29b      	uxth	r3, r3
 8009906:	f023 030f 	bic.w	r3, r3, #15
 800990a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800990c:	6a3b      	ldr	r3, [r7, #32]
 800990e:	085b      	lsrs	r3, r3, #1
 8009910:	b29b      	uxth	r3, r3
 8009912:	f003 0307 	and.w	r3, r3, #7
 8009916:	b29a      	uxth	r2, r3
 8009918:	8bfb      	ldrh	r3, [r7, #30]
 800991a:	4313      	orrs	r3, r2
 800991c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	8bfa      	ldrh	r2, [r7, #30]
 8009924:	60da      	str	r2, [r3, #12]
 8009926:	e05b      	b.n	80099e0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009928:	2301      	movs	r3, #1
 800992a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800992e:	e057      	b.n	80099e0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009930:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009934:	2b08      	cmp	r3, #8
 8009936:	d828      	bhi.n	800998a <UART_SetConfig+0x50e>
 8009938:	a201      	add	r2, pc, #4	@ (adr r2, 8009940 <UART_SetConfig+0x4c4>)
 800993a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800993e:	bf00      	nop
 8009940:	08009965 	.word	0x08009965
 8009944:	0800996d 	.word	0x0800996d
 8009948:	08009975 	.word	0x08009975
 800994c:	0800998b 	.word	0x0800998b
 8009950:	0800997b 	.word	0x0800997b
 8009954:	0800998b 	.word	0x0800998b
 8009958:	0800998b 	.word	0x0800998b
 800995c:	0800998b 	.word	0x0800998b
 8009960:	08009983 	.word	0x08009983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009964:	f7fc fffc 	bl	8006960 <HAL_RCC_GetPCLK1Freq>
 8009968:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800996a:	e014      	b.n	8009996 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800996c:	f7fd f80e 	bl	800698c <HAL_RCC_GetPCLK2Freq>
 8009970:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009972:	e010      	b.n	8009996 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009974:	4b26      	ldr	r3, [pc, #152]	@ (8009a10 <UART_SetConfig+0x594>)
 8009976:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009978:	e00d      	b.n	8009996 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800997a:	f7fc ff83 	bl	8006884 <HAL_RCC_GetSysClockFreq>
 800997e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009980:	e009      	b.n	8009996 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009982:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009986:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009988:	e005      	b.n	8009996 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800998a:	2300      	movs	r3, #0
 800998c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009994:	bf00      	nop
    }

    if (pclk != 0U)
 8009996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009998:	2b00      	cmp	r3, #0
 800999a:	d021      	beq.n	80099e0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099a0:	4a1a      	ldr	r2, [pc, #104]	@ (8009a0c <UART_SetConfig+0x590>)
 80099a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099a6:	461a      	mov	r2, r3
 80099a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	085b      	lsrs	r3, r3, #1
 80099b4:	441a      	add	r2, r3
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80099be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099c0:	6a3b      	ldr	r3, [r7, #32]
 80099c2:	2b0f      	cmp	r3, #15
 80099c4:	d909      	bls.n	80099da <UART_SetConfig+0x55e>
 80099c6:	6a3b      	ldr	r3, [r7, #32]
 80099c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099cc:	d205      	bcs.n	80099da <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80099ce:	6a3b      	ldr	r3, [r7, #32]
 80099d0:	b29a      	uxth	r2, r3
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	60da      	str	r2, [r3, #12]
 80099d8:	e002      	b.n	80099e0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	2201      	movs	r2, #1
 80099e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	2200      	movs	r2, #0
 80099f4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	2200      	movs	r2, #0
 80099fa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80099fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3730      	adds	r7, #48	@ 0x30
 8009a04:	46bd      	mov	sp, r7
 8009a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a0a:	bf00      	nop
 8009a0c:	080112cc 	.word	0x080112cc
 8009a10:	00f42400 	.word	0x00f42400

08009a14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a20:	f003 0308 	and.w	r3, r3, #8
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00a      	beq.n	8009a3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	430a      	orrs	r2, r1
 8009a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a42:	f003 0301 	and.w	r3, r3, #1
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00a      	beq.n	8009a60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	430a      	orrs	r2, r1
 8009a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a64:	f003 0302 	and.w	r3, r3, #2
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00a      	beq.n	8009a82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	430a      	orrs	r2, r1
 8009a80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a86:	f003 0304 	and.w	r3, r3, #4
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00a      	beq.n	8009aa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	430a      	orrs	r2, r1
 8009aa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aa8:	f003 0310 	and.w	r3, r3, #16
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00a      	beq.n	8009ac6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	430a      	orrs	r2, r1
 8009ac4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aca:	f003 0320 	and.w	r3, r3, #32
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00a      	beq.n	8009ae8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	430a      	orrs	r2, r1
 8009ae6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d01a      	beq.n	8009b2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	430a      	orrs	r2, r1
 8009b08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b12:	d10a      	bne.n	8009b2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	430a      	orrs	r2, r1
 8009b28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00a      	beq.n	8009b4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	430a      	orrs	r2, r1
 8009b4a:	605a      	str	r2, [r3, #4]
  }
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b098      	sub	sp, #96	@ 0x60
 8009b5c:	af02      	add	r7, sp, #8
 8009b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b68:	f7f8 fcbe 	bl	80024e8 <HAL_GetTick>
 8009b6c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f003 0308 	and.w	r3, r3, #8
 8009b78:	2b08      	cmp	r3, #8
 8009b7a:	d12f      	bne.n	8009bdc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009b80:	9300      	str	r3, [sp, #0]
 8009b82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b84:	2200      	movs	r2, #0
 8009b86:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 f88e 	bl	8009cac <UART_WaitOnFlagUntilTimeout>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d022      	beq.n	8009bdc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b9e:	e853 3f00 	ldrex	r3, [r3]
 8009ba2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ba6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009baa:	653b      	str	r3, [r7, #80]	@ 0x50
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bb6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009bba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009bbc:	e841 2300 	strex	r3, r2, [r1]
 8009bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d1e6      	bne.n	8009b96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2220      	movs	r2, #32
 8009bcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bd8:	2303      	movs	r3, #3
 8009bda:	e063      	b.n	8009ca4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f003 0304 	and.w	r3, r3, #4
 8009be6:	2b04      	cmp	r3, #4
 8009be8:	d149      	bne.n	8009c7e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f857 	bl	8009cac <UART_WaitOnFlagUntilTimeout>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d03c      	beq.n	8009c7e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c0c:	e853 3f00 	ldrex	r3, [r3]
 8009c10:	623b      	str	r3, [r7, #32]
   return(result);
 8009c12:	6a3b      	ldr	r3, [r7, #32]
 8009c14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	461a      	mov	r2, r3
 8009c20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c22:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c24:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c2a:	e841 2300 	strex	r3, r2, [r1]
 8009c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d1e6      	bne.n	8009c04 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	3308      	adds	r3, #8
 8009c3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	e853 3f00 	ldrex	r3, [r3]
 8009c44:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f023 0301 	bic.w	r3, r3, #1
 8009c4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	3308      	adds	r3, #8
 8009c54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c56:	61fa      	str	r2, [r7, #28]
 8009c58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5a:	69b9      	ldr	r1, [r7, #24]
 8009c5c:	69fa      	ldr	r2, [r7, #28]
 8009c5e:	e841 2300 	strex	r3, r2, [r1]
 8009c62:	617b      	str	r3, [r7, #20]
   return(result);
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d1e5      	bne.n	8009c36 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2220      	movs	r2, #32
 8009c6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	e012      	b.n	8009ca4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2220      	movs	r2, #32
 8009c82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2220      	movs	r2, #32
 8009c8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ca2:	2300      	movs	r3, #0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3758      	adds	r7, #88	@ 0x58
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	603b      	str	r3, [r7, #0]
 8009cb8:	4613      	mov	r3, r2
 8009cba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cbc:	e04f      	b.n	8009d5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc4:	d04b      	beq.n	8009d5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cc6:	f7f8 fc0f 	bl	80024e8 <HAL_GetTick>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	1ad3      	subs	r3, r2, r3
 8009cd0:	69ba      	ldr	r2, [r7, #24]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d302      	bcc.n	8009cdc <UART_WaitOnFlagUntilTimeout+0x30>
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d101      	bne.n	8009ce0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009cdc:	2303      	movs	r3, #3
 8009cde:	e04e      	b.n	8009d7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f003 0304 	and.w	r3, r3, #4
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d037      	beq.n	8009d5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	2b80      	cmp	r3, #128	@ 0x80
 8009cf2:	d034      	beq.n	8009d5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	2b40      	cmp	r3, #64	@ 0x40
 8009cf8:	d031      	beq.n	8009d5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	69db      	ldr	r3, [r3, #28]
 8009d00:	f003 0308 	and.w	r3, r3, #8
 8009d04:	2b08      	cmp	r3, #8
 8009d06:	d110      	bne.n	8009d2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2208      	movs	r2, #8
 8009d0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f000 f920 	bl	8009f56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2208      	movs	r2, #8
 8009d1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2200      	movs	r2, #0
 8009d22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009d26:	2301      	movs	r3, #1
 8009d28:	e029      	b.n	8009d7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	69db      	ldr	r3, [r3, #28]
 8009d30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d38:	d111      	bne.n	8009d5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009d42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f000 f906 	bl	8009f56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2220      	movs	r2, #32
 8009d4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2200      	movs	r2, #0
 8009d56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009d5a:	2303      	movs	r3, #3
 8009d5c:	e00f      	b.n	8009d7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	69da      	ldr	r2, [r3, #28]
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	4013      	ands	r3, r2
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	bf0c      	ite	eq
 8009d6e:	2301      	moveq	r3, #1
 8009d70:	2300      	movne	r3, #0
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	461a      	mov	r2, r3
 8009d76:	79fb      	ldrb	r3, [r7, #7]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d0a0      	beq.n	8009cbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
	...

08009d88 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b096      	sub	sp, #88	@ 0x58
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	4613      	mov	r3, r2
 8009d94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	68ba      	ldr	r2, [r7, #8]
 8009d9a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	88fa      	ldrh	r2, [r7, #6]
 8009da0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2200      	movs	r2, #0
 8009da8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2222      	movs	r2, #34	@ 0x22
 8009db0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d02d      	beq.n	8009e1a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dc4:	4a40      	ldr	r2, [pc, #256]	@ (8009ec8 <UART_Start_Receive_DMA+0x140>)
 8009dc6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dce:	4a3f      	ldr	r2, [pc, #252]	@ (8009ecc <UART_Start_Receive_DMA+0x144>)
 8009dd0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dd8:	4a3d      	ldr	r2, [pc, #244]	@ (8009ed0 <UART_Start_Receive_DMA+0x148>)
 8009dda:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009de2:	2200      	movs	r2, #0
 8009de4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	3324      	adds	r3, #36	@ 0x24
 8009df2:	4619      	mov	r1, r3
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009df8:	461a      	mov	r2, r3
 8009dfa:	88fb      	ldrh	r3, [r7, #6]
 8009dfc:	f7fb fc1c 	bl	8005638 <HAL_DMA_Start_IT>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d009      	beq.n	8009e1a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2210      	movs	r2, #16
 8009e0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2220      	movs	r2, #32
 8009e12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e051      	b.n	8009ebe <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d018      	beq.n	8009e54 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e2a:	e853 3f00 	ldrex	r3, [r3]
 8009e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e36:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e42:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e44:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009e46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e48:	e841 2300 	strex	r3, r2, [r1]
 8009e4c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009e4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d1e6      	bne.n	8009e22 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	3308      	adds	r3, #8
 8009e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e5e:	e853 3f00 	ldrex	r3, [r3]
 8009e62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e66:	f043 0301 	orr.w	r3, r3, #1
 8009e6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3308      	adds	r3, #8
 8009e72:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009e74:	637a      	str	r2, [r7, #52]	@ 0x34
 8009e76:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e78:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009e7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e7c:	e841 2300 	strex	r3, r2, [r1]
 8009e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d1e5      	bne.n	8009e54 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	3308      	adds	r3, #8
 8009e8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	e853 3f00 	ldrex	r3, [r3]
 8009e96:	613b      	str	r3, [r7, #16]
   return(result);
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	3308      	adds	r3, #8
 8009ea6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009ea8:	623a      	str	r2, [r7, #32]
 8009eaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eac:	69f9      	ldr	r1, [r7, #28]
 8009eae:	6a3a      	ldr	r2, [r7, #32]
 8009eb0:	e841 2300 	strex	r3, r2, [r1]
 8009eb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d1e5      	bne.n	8009e88 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3758      	adds	r7, #88	@ 0x58
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	0800a0d9 	.word	0x0800a0d9
 8009ecc:	0800a205 	.word	0x0800a205
 8009ed0:	0800a243 	.word	0x0800a243

08009ed4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b08f      	sub	sp, #60	@ 0x3c
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee2:	6a3b      	ldr	r3, [r7, #32]
 8009ee4:	e853 3f00 	ldrex	r3, [r3]
 8009ee8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009eea:	69fb      	ldr	r3, [r7, #28]
 8009eec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009ef0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009efc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009efe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f02:	e841 2300 	strex	r3, r2, [r1]
 8009f06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d1e6      	bne.n	8009edc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	3308      	adds	r3, #8
 8009f14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	e853 3f00 	ldrex	r3, [r3]
 8009f1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009f24:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	3308      	adds	r3, #8
 8009f2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f2e:	61ba      	str	r2, [r7, #24]
 8009f30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f32:	6979      	ldr	r1, [r7, #20]
 8009f34:	69ba      	ldr	r2, [r7, #24]
 8009f36:	e841 2300 	strex	r3, r2, [r1]
 8009f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1e5      	bne.n	8009f0e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2220      	movs	r2, #32
 8009f46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009f4a:	bf00      	nop
 8009f4c:	373c      	adds	r7, #60	@ 0x3c
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr

08009f56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f56:	b480      	push	{r7}
 8009f58:	b095      	sub	sp, #84	@ 0x54
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f66:	e853 3f00 	ldrex	r3, [r3]
 8009f6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	461a      	mov	r2, r3
 8009f7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f84:	e841 2300 	strex	r3, r2, [r1]
 8009f88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d1e6      	bne.n	8009f5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	3308      	adds	r3, #8
 8009f96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f98:	6a3b      	ldr	r3, [r7, #32]
 8009f9a:	e853 3f00 	ldrex	r3, [r3]
 8009f9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009fa6:	f023 0301 	bic.w	r3, r3, #1
 8009faa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	3308      	adds	r3, #8
 8009fb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009fba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fbc:	e841 2300 	strex	r3, r2, [r1]
 8009fc0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d1e3      	bne.n	8009f90 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d118      	bne.n	800a002 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	e853 3f00 	ldrex	r3, [r3]
 8009fdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	f023 0310 	bic.w	r3, r3, #16
 8009fe4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	461a      	mov	r2, r3
 8009fec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fee:	61bb      	str	r3, [r7, #24]
 8009ff0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff2:	6979      	ldr	r1, [r7, #20]
 8009ff4:	69ba      	ldr	r2, [r7, #24]
 8009ff6:	e841 2300 	strex	r3, r2, [r1]
 8009ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1e6      	bne.n	8009fd0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2220      	movs	r2, #32
 800a006:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2200      	movs	r2, #0
 800a00e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a016:	bf00      	nop
 800a018:	3754      	adds	r7, #84	@ 0x54
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr

0800a022 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a022:	b580      	push	{r7, lr}
 800a024:	b090      	sub	sp, #64	@ 0x40
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a02e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f003 0320 	and.w	r3, r3, #32
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d137      	bne.n	800a0ae <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a03e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a040:	2200      	movs	r2, #0
 800a042:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	3308      	adds	r3, #8
 800a04c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a050:	e853 3f00 	ldrex	r3, [r3]
 800a054:	623b      	str	r3, [r7, #32]
   return(result);
 800a056:	6a3b      	ldr	r3, [r7, #32]
 800a058:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a05c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a05e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	3308      	adds	r3, #8
 800a064:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a066:	633a      	str	r2, [r7, #48]	@ 0x30
 800a068:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a06c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a06e:	e841 2300 	strex	r3, r2, [r1]
 800a072:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a076:	2b00      	cmp	r3, #0
 800a078:	d1e5      	bne.n	800a046 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a07a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	e853 3f00 	ldrex	r3, [r3]
 800a086:	60fb      	str	r3, [r7, #12]
   return(result);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a08e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	461a      	mov	r2, r3
 800a096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a098:	61fb      	str	r3, [r7, #28]
 800a09a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a09c:	69b9      	ldr	r1, [r7, #24]
 800a09e:	69fa      	ldr	r2, [r7, #28]
 800a0a0:	e841 2300 	strex	r3, r2, [r1]
 800a0a4:	617b      	str	r3, [r7, #20]
   return(result);
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d1e6      	bne.n	800a07a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a0ac:	e002      	b.n	800a0b4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a0ae:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a0b0:	f7ff f99c 	bl	80093ec <HAL_UART_TxCpltCallback>
}
 800a0b4:	bf00      	nop
 800a0b6:	3740      	adds	r7, #64	@ 0x40
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0c8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f7ff f998 	bl	8009400 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0d0:	bf00      	nop
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b09c      	sub	sp, #112	@ 0x70
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0e4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f003 0320 	and.w	r3, r3, #32
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d171      	bne.n	800a1d8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a0f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a102:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a104:	e853 3f00 	ldrex	r3, [r3]
 800a108:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a10a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a10c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a110:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a112:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	461a      	mov	r2, r3
 800a118:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a11a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a11c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a120:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a122:	e841 2300 	strex	r3, r2, [r1]
 800a126:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a128:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d1e6      	bne.n	800a0fc <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a12e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	3308      	adds	r3, #8
 800a134:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a138:	e853 3f00 	ldrex	r3, [r3]
 800a13c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a13e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a140:	f023 0301 	bic.w	r3, r3, #1
 800a144:	667b      	str	r3, [r7, #100]	@ 0x64
 800a146:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	3308      	adds	r3, #8
 800a14c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a14e:	647a      	str	r2, [r7, #68]	@ 0x44
 800a150:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a152:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a154:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a156:	e841 2300 	strex	r3, r2, [r1]
 800a15a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a15c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d1e5      	bne.n	800a12e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a162:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	3308      	adds	r3, #8
 800a168:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a16c:	e853 3f00 	ldrex	r3, [r3]
 800a170:	623b      	str	r3, [r7, #32]
   return(result);
 800a172:	6a3b      	ldr	r3, [r7, #32]
 800a174:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a178:	663b      	str	r3, [r7, #96]	@ 0x60
 800a17a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	3308      	adds	r3, #8
 800a180:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a182:	633a      	str	r2, [r7, #48]	@ 0x30
 800a184:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a186:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a188:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a18a:	e841 2300 	strex	r3, r2, [r1]
 800a18e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1e5      	bne.n	800a162 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a196:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a198:	2220      	movs	r2, #32
 800a19a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a19e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d118      	bne.n	800a1d8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	e853 3f00 	ldrex	r3, [r3]
 800a1b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f023 0310 	bic.w	r3, r3, #16
 800a1ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a1bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a1c4:	61fb      	str	r3, [r7, #28]
 800a1c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c8:	69b9      	ldr	r1, [r7, #24]
 800a1ca:	69fa      	ldr	r2, [r7, #28]
 800a1cc:	e841 2300 	strex	r3, r2, [r1]
 800a1d0:	617b      	str	r3, [r7, #20]
   return(result);
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1e6      	bne.n	800a1a6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1da:	2200      	movs	r2, #0
 800a1dc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d107      	bne.n	800a1f6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a1f0:	f001 ff9c 	bl	800c12c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a1f4:	e002      	b.n	800a1fc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a1f6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a1f8:	f7ff f90c 	bl	8009414 <HAL_UART_RxCpltCallback>
}
 800a1fc:	bf00      	nop
 800a1fe:	3770      	adds	r7, #112	@ 0x70
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a210:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2201      	movs	r2, #1
 800a216:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d109      	bne.n	800a234 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a226:	085b      	lsrs	r3, r3, #1
 800a228:	b29b      	uxth	r3, r3
 800a22a:	4619      	mov	r1, r3
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f001 ff7d 	bl	800c12c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a232:	e002      	b.n	800a23a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f7ff f8f7 	bl	8009428 <HAL_UART_RxHalfCpltCallback>
}
 800a23a:	bf00      	nop
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b086      	sub	sp, #24
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a24e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a256:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a25e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a26a:	2b80      	cmp	r3, #128	@ 0x80
 800a26c:	d109      	bne.n	800a282 <UART_DMAError+0x40>
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	2b21      	cmp	r3, #33	@ 0x21
 800a272:	d106      	bne.n	800a282 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	2200      	movs	r2, #0
 800a278:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a27c:	6978      	ldr	r0, [r7, #20]
 800a27e:	f7ff fe29 	bl	8009ed4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a28c:	2b40      	cmp	r3, #64	@ 0x40
 800a28e:	d109      	bne.n	800a2a4 <UART_DMAError+0x62>
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2b22      	cmp	r3, #34	@ 0x22
 800a294:	d106      	bne.n	800a2a4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	2200      	movs	r2, #0
 800a29a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a29e:	6978      	ldr	r0, [r7, #20]
 800a2a0:	f7ff fe59 	bl	8009f56 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2aa:	f043 0210 	orr.w	r2, r3, #16
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2b4:	6978      	ldr	r0, [r7, #20]
 800a2b6:	f7ff f8c1 	bl	800943c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2ba:	bf00      	nop
 800a2bc:	3718      	adds	r7, #24
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b084      	sub	sp, #16
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f7ff f8ab 	bl	800943c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2e6:	bf00      	nop
 800a2e8:	3710      	adds	r7, #16
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b088      	sub	sp, #32
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	e853 3f00 	ldrex	r3, [r3]
 800a302:	60bb      	str	r3, [r7, #8]
   return(result);
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a30a:	61fb      	str	r3, [r7, #28]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	461a      	mov	r2, r3
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	61bb      	str	r3, [r7, #24]
 800a316:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a318:	6979      	ldr	r1, [r7, #20]
 800a31a:	69ba      	ldr	r2, [r7, #24]
 800a31c:	e841 2300 	strex	r3, r2, [r1]
 800a320:	613b      	str	r3, [r7, #16]
   return(result);
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d1e6      	bne.n	800a2f6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2220      	movs	r2, #32
 800a32c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f7ff f858 	bl	80093ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a33c:	bf00      	nop
 800a33e:	3720      	adds	r7, #32
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a34c:	bf00      	nop
 800a34e:	370c      	adds	r7, #12
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr

0800a358 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a360:	bf00      	nop
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a374:	bf00      	nop
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d101      	bne.n	800a396 <HAL_UARTEx_DisableFifoMode+0x16>
 800a392:	2302      	movs	r3, #2
 800a394:	e027      	b.n	800a3e6 <HAL_UARTEx_DisableFifoMode+0x66>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2201      	movs	r2, #1
 800a39a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2224      	movs	r2, #36	@ 0x24
 800a3a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f022 0201 	bic.w	r2, r2, #1
 800a3bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a3c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2220      	movs	r2, #32
 800a3d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3714      	adds	r7, #20
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr

0800a3f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b084      	sub	sp, #16
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
 800a3fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a402:	2b01      	cmp	r3, #1
 800a404:	d101      	bne.n	800a40a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a406:	2302      	movs	r3, #2
 800a408:	e02d      	b.n	800a466 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2201      	movs	r2, #1
 800a40e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2224      	movs	r2, #36	@ 0x24
 800a416:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f022 0201 	bic.w	r2, r2, #1
 800a430:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	683a      	ldr	r2, [r7, #0]
 800a442:	430a      	orrs	r2, r1
 800a444:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 f8a4 	bl	800a594 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2220      	movs	r2, #32
 800a458:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a464:	2300      	movs	r3, #0
}
 800a466:	4618      	mov	r0, r3
 800a468:	3710      	adds	r7, #16
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b084      	sub	sp, #16
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
 800a476:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d101      	bne.n	800a486 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a482:	2302      	movs	r3, #2
 800a484:	e02d      	b.n	800a4e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2201      	movs	r2, #1
 800a48a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2224      	movs	r2, #36	@ 0x24
 800a492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f022 0201 	bic.w	r2, r2, #1
 800a4ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	683a      	ldr	r2, [r7, #0]
 800a4be:	430a      	orrs	r2, r1
 800a4c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 f866 	bl	800a594 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	68fa      	ldr	r2, [r7, #12]
 800a4ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2220      	movs	r2, #32
 800a4d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3710      	adds	r7, #16
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b08c      	sub	sp, #48	@ 0x30
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	60f8      	str	r0, [r7, #12]
 800a4f2:	60b9      	str	r1, [r7, #8]
 800a4f4:	4613      	mov	r3, r2
 800a4f6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a4fe:	2b20      	cmp	r3, #32
 800a500:	d142      	bne.n	800a588 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d002      	beq.n	800a50e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800a508:	88fb      	ldrh	r3, [r7, #6]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800a50e:	2301      	movs	r3, #1
 800a510:	e03b      	b.n	800a58a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2201      	movs	r2, #1
 800a516:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2200      	movs	r2, #0
 800a51c:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a51e:	88fb      	ldrh	r3, [r7, #6]
 800a520:	461a      	mov	r2, r3
 800a522:	68b9      	ldr	r1, [r7, #8]
 800a524:	68f8      	ldr	r0, [r7, #12]
 800a526:	f7ff fc2f 	bl	8009d88 <UART_Start_Receive_DMA>
 800a52a:	4603      	mov	r3, r0
 800a52c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a530:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a534:	2b00      	cmp	r3, #0
 800a536:	d124      	bne.n	800a582 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d11d      	bne.n	800a57c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2210      	movs	r2, #16
 800a546:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a54e:	69bb      	ldr	r3, [r7, #24]
 800a550:	e853 3f00 	ldrex	r3, [r3]
 800a554:	617b      	str	r3, [r7, #20]
   return(result);
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	f043 0310 	orr.w	r3, r3, #16
 800a55c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	461a      	mov	r2, r3
 800a564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a566:	627b      	str	r3, [r7, #36]	@ 0x24
 800a568:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a56a:	6a39      	ldr	r1, [r7, #32]
 800a56c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a56e:	e841 2300 	strex	r3, r2, [r1]
 800a572:	61fb      	str	r3, [r7, #28]
   return(result);
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d1e6      	bne.n	800a548 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800a57a:	e002      	b.n	800a582 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a57c:	2301      	movs	r3, #1
 800a57e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800a582:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a586:	e000      	b.n	800a58a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a588:	2302      	movs	r3, #2
  }
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3730      	adds	r7, #48	@ 0x30
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
	...

0800a594 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a594:	b480      	push	{r7}
 800a596:	b085      	sub	sp, #20
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d108      	bne.n	800a5b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a5b4:	e031      	b.n	800a61a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a5b6:	2308      	movs	r3, #8
 800a5b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a5ba:	2308      	movs	r3, #8
 800a5bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	0e5b      	lsrs	r3, r3, #25
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	f003 0307 	and.w	r3, r3, #7
 800a5cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	0f5b      	lsrs	r3, r3, #29
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	f003 0307 	and.w	r3, r3, #7
 800a5dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a5de:	7bbb      	ldrb	r3, [r7, #14]
 800a5e0:	7b3a      	ldrb	r2, [r7, #12]
 800a5e2:	4911      	ldr	r1, [pc, #68]	@ (800a628 <UARTEx_SetNbDataToProcess+0x94>)
 800a5e4:	5c8a      	ldrb	r2, [r1, r2]
 800a5e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a5ea:	7b3a      	ldrb	r2, [r7, #12]
 800a5ec:	490f      	ldr	r1, [pc, #60]	@ (800a62c <UARTEx_SetNbDataToProcess+0x98>)
 800a5ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a5f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
 800a5fe:	7b7a      	ldrb	r2, [r7, #13]
 800a600:	4909      	ldr	r1, [pc, #36]	@ (800a628 <UARTEx_SetNbDataToProcess+0x94>)
 800a602:	5c8a      	ldrb	r2, [r1, r2]
 800a604:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a608:	7b7a      	ldrb	r2, [r7, #13]
 800a60a:	4908      	ldr	r1, [pc, #32]	@ (800a62c <UARTEx_SetNbDataToProcess+0x98>)
 800a60c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a60e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a612:	b29a      	uxth	r2, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a61a:	bf00      	nop
 800a61c:	3714      	adds	r7, #20
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr
 800a626:	bf00      	nop
 800a628:	080112e4 	.word	0x080112e4
 800a62c:	080112ec 	.word	0x080112ec

0800a630 <goToZeroElecAngle>:
#include "pid.h"
#include "lowpass_filter.h"
#include "focLib.h"

void goToZeroElecAngle(BldcMotor *motor)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
    setTorque(motor, 0, OPEN_LOOP_TORQUE, 0);
 800a638:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 800a65c <goToZeroElecAngle+0x2c>
 800a63c:	eddf 0a08 	vldr	s1, [pc, #32]	@ 800a660 <goToZeroElecAngle+0x30>
 800a640:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 800a65c <goToZeroElecAngle+0x2c>
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f001 f853 	bl	800b6f0 <setTorque>
    delay(700);
 800a64a:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800a64e:	f001 ff1b 	bl	800c488 <delay>
}
 800a652:	bf00      	nop
 800a654:	3708      	adds	r7, #8
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	00000000 	.word	0x00000000
 800a660:	4013cd3a 	.word	0x4013cd3a

0800a664 <alignSensor>:
int alignSensor(BldcMotor *motor)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b08a      	sub	sp, #40	@ 0x28
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
    // setTorque(motor, OPEN_LOOP_TORQUE, 0, _3PI_2);
    // delay(200);
    // encoderUpdate(&motor->magEncoder);
    // float start_angle = motor->magEncoder.fullAngle;
    // printLog("start_angle:%f\n", start_angle);
    for (int i = 0; i <= 500; i++)
 800a66c:	2300      	movs	r3, #0
 800a66e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a670:	e025      	b.n	800a6be <alignSensor+0x5a>
    {
        float angle = _3PI_2 + _2PI * i / 500.0f;
 800a672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a674:	ee07 3a90 	vmov	s15, r3
 800a678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a67c:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 800a884 <alignSensor+0x220>
 800a680:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a684:	eddf 6a80 	vldr	s13, [pc, #512]	@ 800a888 <alignSensor+0x224>
 800a688:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a68c:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 800a88c <alignSensor+0x228>
 800a690:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a694:	edc7 7a02 	vstr	s15, [r7, #8]
        setTorque(motor, OPEN_LOOP_TORQUE, 0, angle);
 800a698:	ed97 1a02 	vldr	s2, [r7, #8]
 800a69c:	eddf 0a7c 	vldr	s1, [pc, #496]	@ 800a890 <alignSensor+0x22c>
 800a6a0:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 800a894 <alignSensor+0x230>
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f001 f823 	bl	800b6f0 <setTorque>
        encoderUpdate(&motor->magEncoder);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f000 fcf5 	bl	800b09c <encoderUpdate>
        delay(2);
 800a6b2:	2002      	movs	r0, #2
 800a6b4:	f001 fee8 	bl	800c488 <delay>
    for (int i = 0; i <= 500; i++)
 800a6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800a6c4:	ddd5      	ble.n	800a672 <alignSensor+0xe>
    }
    // encoderUpdate(&motor->magEncoder);

    float mid_angle = motor->magEncoder.fullAngle;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	695b      	ldr	r3, [r3, #20]
 800a6ca:	61fb      	str	r3, [r7, #28]
    printLog("mid_angle:%f\n", mid_angle);
 800a6cc:	69f8      	ldr	r0, [r7, #28]
 800a6ce:	f7f5 ff63 	bl	8000598 <__aeabi_f2d>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	4870      	ldr	r0, [pc, #448]	@ (800a898 <alignSensor+0x234>)
 800a6d8:	f001 fd44 	bl	800c164 <printLog>
    // move one electrical revolution backwards
    for (int i = 500; i >= 0; i--)
 800a6dc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800a6e0:	623b      	str	r3, [r7, #32]
 800a6e2:	e025      	b.n	800a730 <alignSensor+0xcc>
    {
        float angle = _3PI_2 + _2PI * i / 500.0f;
 800a6e4:	6a3b      	ldr	r3, [r7, #32]
 800a6e6:	ee07 3a90 	vmov	s15, r3
 800a6ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6ee:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 800a884 <alignSensor+0x220>
 800a6f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a6f6:	eddf 6a64 	vldr	s13, [pc, #400]	@ 800a888 <alignSensor+0x224>
 800a6fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a6fe:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 800a88c <alignSensor+0x228>
 800a702:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a706:	edc7 7a03 	vstr	s15, [r7, #12]
        setTorque(motor, OPEN_LOOP_TORQUE, 0, angle);
 800a70a:	ed97 1a03 	vldr	s2, [r7, #12]
 800a70e:	eddf 0a60 	vldr	s1, [pc, #384]	@ 800a890 <alignSensor+0x22c>
 800a712:	ed9f 0a60 	vldr	s0, [pc, #384]	@ 800a894 <alignSensor+0x230>
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 ffea 	bl	800b6f0 <setTorque>
        encoderUpdate(&motor->magEncoder);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	4618      	mov	r0, r3
 800a720:	f000 fcbc 	bl	800b09c <encoderUpdate>
        delay(2);
 800a724:	2002      	movs	r0, #2
 800a726:	f001 feaf 	bl	800c488 <delay>
    for (int i = 500; i >= 0; i--)
 800a72a:	6a3b      	ldr	r3, [r7, #32]
 800a72c:	3b01      	subs	r3, #1
 800a72e:	623b      	str	r3, [r7, #32]
 800a730:	6a3b      	ldr	r3, [r7, #32]
 800a732:	2b00      	cmp	r3, #0
 800a734:	dad6      	bge.n	800a6e4 <alignSensor+0x80>
    }
    // encoderUpdate(&motor->magEncoder);

    float end_angle = motor->magEncoder.fullAngle;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	695b      	ldr	r3, [r3, #20]
 800a73a:	61bb      	str	r3, [r7, #24]
    printLog("end_angle:%f\n", end_angle);
 800a73c:	69b8      	ldr	r0, [r7, #24]
 800a73e:	f7f5 ff2b 	bl	8000598 <__aeabi_f2d>
 800a742:	4602      	mov	r2, r0
 800a744:	460b      	mov	r3, r1
 800a746:	4855      	ldr	r0, [pc, #340]	@ (800a89c <alignSensor+0x238>)
 800a748:	f001 fd0c 	bl	800c164 <printLog>
    // setPhaseVoltage(0, 0, 0);
    delay(200);
 800a74c:	20c8      	movs	r0, #200	@ 0xc8
 800a74e:	f001 fe9b 	bl	800c488 <delay>

    // determine the direction the sensor moved
    float moved = fabsf(mid_angle - end_angle);
 800a752:	ed97 7a07 	vldr	s14, [r7, #28]
 800a756:	edd7 7a06 	vldr	s15, [r7, #24]
 800a75a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a75e:	eef0 7ae7 	vabs.f32	s15, s15
 800a762:	edc7 7a05 	vstr	s15, [r7, #20]
    printLog("moved:%f\n", moved);
 800a766:	6978      	ldr	r0, [r7, #20]
 800a768:	f7f5 ff16 	bl	8000598 <__aeabi_f2d>
 800a76c:	4602      	mov	r2, r0
 800a76e:	460b      	mov	r3, r1
 800a770:	484b      	ldr	r0, [pc, #300]	@ (800a8a0 <alignSensor+0x23c>)
 800a772:	f001 fcf7 	bl	800c164 <printLog>
    if (moved < MIN_ANGLE_DETECT_MOVEMENT)
 800a776:	edd7 7a05 	vldr	s15, [r7, #20]
 800a77a:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800a8a4 <alignSensor+0x240>
 800a77e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a786:	d504      	bpl.n	800a792 <alignSensor+0x12e>
    { // minimum angle to detect movement
        printLog("Failed to notice movement\n");
 800a788:	4847      	ldr	r0, [pc, #284]	@ (800a8a8 <alignSensor+0x244>)
 800a78a:	f001 fceb 	bl	800c164 <printLog>
        return 0; // failed calibration
 800a78e:	2300      	movs	r3, #0
 800a790:	e073      	b.n	800a87a <alignSensor+0x216>
    }
    else if (mid_angle < end_angle)
 800a792:	ed97 7a07 	vldr	s14, [r7, #28]
 800a796:	edd7 7a06 	vldr	s15, [r7, #24]
 800a79a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7a2:	d507      	bpl.n	800a7b4 <alignSensor+0x150>
    {
        printLog("sensor_direction==CCW\n");
 800a7a4:	4841      	ldr	r0, [pc, #260]	@ (800a8ac <alignSensor+0x248>)
 800a7a6:	f001 fcdd 	bl	800c164 <printLog>
        motor->magEncoder.direction = CCW;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	22ff      	movs	r2, #255	@ 0xff
 800a7ae:	f883 2020 	strb.w	r2, [r3, #32]
 800a7b2:	e006      	b.n	800a7c2 <alignSensor+0x15e>
    }
    else
    {
        printLog("sensor_direction==CW\n");
 800a7b4:	483e      	ldr	r0, [pc, #248]	@ (800a8b0 <alignSensor+0x24c>)
 800a7b6:	f001 fcd5 	bl	800c164 <printLog>
        motor->magEncoder.direction = CW;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	f883 2020 	strb.w	r2, [r3, #32]
    }
    // check pole pair number
    bool pp_check_result = !(fabsf(moved * motor->pole_pairs - _2PI) > 0.5f); // 0.5f is arbitrary number it can be lower or higher!
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a7c8:	ee07 3a90 	vmov	s15, r3
 800a7cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a7d0:	edd7 7a05 	vldr	s15, [r7, #20]
 800a7d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7d8:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800a884 <alignSensor+0x220>
 800a7dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a7e0:	eef0 7ae7 	vabs.f32	s15, s15
 800a7e4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a7e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7f0:	bfcc      	ite	gt
 800a7f2:	2301      	movgt	r3, #1
 800a7f4:	2300      	movle	r3, #0
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	f083 0301 	eor.w	r3, r3, #1
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	74fb      	strb	r3, [r7, #19]
    if (pp_check_result == false)
 800a800:	7cfb      	ldrb	r3, [r7, #19]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d10d      	bne.n	800a822 <alignSensor+0x1be>
    {
        printLog("PP check: fail - estimated pp: %d\n", (int)(_2PI / moved));
 800a806:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800a884 <alignSensor+0x220>
 800a80a:	ed97 7a05 	vldr	s14, [r7, #20]
 800a80e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a812:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a816:	ee17 1a90 	vmov	r1, s15
 800a81a:	4826      	ldr	r0, [pc, #152]	@ (800a8b4 <alignSensor+0x250>)
 800a81c:	f001 fca2 	bl	800c164 <printLog>
 800a820:	e002      	b.n	800a828 <alignSensor+0x1c4>
    }
    else
    {
        printLog("PP check: OK!\n");
 800a822:	4825      	ldr	r0, [pc, #148]	@ (800a8b8 <alignSensor+0x254>)
 800a824:	f001 fc9e 	bl	800c164 <printLog>
    }

    // align the electrical phases of the motor and sensor
    // set angle -90(270 = 3PI/2) degrees
    goToZeroElecAngle(motor);
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f7ff ff01 	bl	800a630 <goToZeroElecAngle>
    // read the sensor
    encoderUpdate(&motor->magEncoder);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	4618      	mov	r0, r3
 800a832:	f000 fc33 	bl	800b09c <encoderUpdate>
    // get the current zero electric angle
    motor->zeroElectricAngleOffSet = 0;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f04f 0200 	mov.w	r2, #0
 800a83c:	635a      	str	r2, [r3, #52]	@ 0x34
    getElecAngle(motor);
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f840 	bl	800a8c4 <getElecAngle>
    motor->zeroElectricAngleOffSet = motor->angle_el;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	635a      	str	r2, [r3, #52]	@ 0x34
    // zero_electric_angle =  _normalizeAngle(_electricalAngle(sensor_direction*sensor->getAngle(), pole_pairs));

    // encoderUpdate(&motor->magEncoder);
    getElecAngle(motor);
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 f839 	bl	800a8c4 <getElecAngle>
    // motor->zeroElectricAngleOffSet = 0;
    // printLog("[zeroAngleOffset]:%f  [zeroAngle]:%f\r\n", motor->zeroElectricAngleOffSet, motor->angle_el);
    printLog("[zeroAngleOffset]:%f\n", motor->zeroElectricAngleOffSet);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a856:	4618      	mov	r0, r3
 800a858:	f7f5 fe9e 	bl	8000598 <__aeabi_f2d>
 800a85c:	4602      	mov	r2, r0
 800a85e:	460b      	mov	r3, r1
 800a860:	4816      	ldr	r0, [pc, #88]	@ (800a8bc <alignSensor+0x258>)
 800a862:	f001 fc7f 	bl	800c164 <printLog>
    printLog("[zeroAngle]:%f\n", motor->angle_el);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7f5 fe94 	bl	8000598 <__aeabi_f2d>
 800a870:	4602      	mov	r2, r0
 800a872:	460b      	mov	r3, r1
 800a874:	4812      	ldr	r0, [pc, #72]	@ (800a8c0 <alignSensor+0x25c>)
 800a876:	f001 fc75 	bl	800c164 <printLog>
    // // make sure the angle_el is about zero

    // delay(200);
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3728      	adds	r7, #40	@ 0x28
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	40c90fdb 	.word	0x40c90fdb
 800a888:	43fa0000 	.word	0x43fa0000
 800a88c:	4096cbe4 	.word	0x4096cbe4
 800a890:	00000000 	.word	0x00000000
 800a894:	4013cd3a 	.word	0x4013cd3a
 800a898:	08011188 	.word	0x08011188
 800a89c:	08011198 	.word	0x08011198
 800a8a0:	080111a8 	.word	0x080111a8
 800a8a4:	3d7ecfa9 	.word	0x3d7ecfa9
 800a8a8:	080111b4 	.word	0x080111b4
 800a8ac:	080111d0 	.word	0x080111d0
 800a8b0:	080111e8 	.word	0x080111e8
 800a8b4:	08011200 	.word	0x08011200
 800a8b8:	08011224 	.word	0x08011224
 800a8bc:	08011234 	.word	0x08011234
 800a8c0:	0801124c 	.word	0x0801124c

0800a8c4 <getElecAngle>:

void getElecAngle(BldcMotor *motor)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
    motor->angle_el = _normalizeAngle(motor->pole_pairs * motor->magEncoder.shaftAngle - motor->zeroElectricAngleOffSet);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a8d2:	ee07 3a90 	vmov	s15, r3
 800a8d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	edd3 7a04 	vldr	s15, [r3, #16]
 800a8e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800a8ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8ee:	eeb0 0a67 	vmov.f32	s0, s15
 800a8f2:	f000 fd75 	bl	800b3e0 <_normalizeAngle>
 800a8f6:	eef0 7a40 	vmov.f32	s15, s0
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
}
 800a900:	bf00      	nop
 800a902:	3708      	adds	r7, #8
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <foc>:

void foc(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b088      	sub	sp, #32
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	607a      	str	r2, [r7, #4]

    if (motor->state == MOTOR_CALIBRATE)
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d10d      	bne.n	800a93a <foc+0x32>
    {
        getCurrentOffsets(motor, adc_a, adc_b, 100);
 800a91e:	2364      	movs	r3, #100	@ 0x64
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	68b9      	ldr	r1, [r7, #8]
 800a924:	68f8      	ldr	r0, [r7, #12]
 800a926:	f000 f9b3 	bl	800ac90 <getCurrentOffsets>
        alignSensor(motor);
 800a92a:	68f8      	ldr	r0, [r7, #12]
 800a92c:	f7ff fe9a 	bl	800a664 <alignSensor>
        motor->state = MOTOR_START;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2202      	movs	r2, #2
 800a934:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                break;
            }
            setTorque(motor, motor->Uq, motor->Ud, motor->angle_el);
        }
    }
}
 800a938:	e19a      	b.n	800ac70 <foc+0x368>
        getPhaseCurrents(motor, adc_a, adc_b);
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	68b9      	ldr	r1, [r7, #8]
 800a93e:	68f8      	ldr	r0, [r7, #12]
 800a940:	f000 fa76 	bl	800ae30 <getPhaseCurrents>
        getABCurrents(motor);
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	f000 fb15 	bl	800af74 <getABCurrents>
        getDQCurrents(motor);
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	f000 fb38 	bl	800afc0 <getDQCurrents>
        motor->Iq = lpfOperator(&motor->IqFilter, motor->Iq);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f103 02f4 	add.w	r2, r3, #244	@ 0xf4
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800a95c:	eeb0 0a67 	vmov.f32	s0, s15
 800a960:	4610      	mov	r0, r2
 800a962:	f000 fc35 	bl	800b1d0 <lpfOperator>
 800a966:	eef0 7a40 	vmov.f32	s15, s0
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
        motor->Id = lpfOperator(&motor->IdFilter, motor->Id);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f503 7280 	add.w	r2, r3, #256	@ 0x100
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800a97c:	eeb0 0a67 	vmov.f32	s0, s15
 800a980:	4610      	mov	r0, r2
 800a982:	f000 fc25 	bl	800b1d0 <lpfOperator>
 800a986:	eef0 7a40 	vmov.f32	s15, s0
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
        encoderUpdate(&motor->magEncoder);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	4618      	mov	r0, r3
 800a994:	f000 fb82 	bl	800b09c <encoderUpdate>
        motor->magEncoder.velocity = lpfOperator(&motor->velocityFilter, motor->magEncoder.velocity);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f503 7286 	add.w	r2, r3, #268	@ 0x10c
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	edd3 7a06 	vldr	s15, [r3, #24]
 800a9a4:	eeb0 0a67 	vmov.f32	s0, s15
 800a9a8:	4610      	mov	r0, r2
 800a9aa:	f000 fc11 	bl	800b1d0 <lpfOperator>
 800a9ae:	eef0 7a40 	vmov.f32	s15, s0
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	edc3 7a06 	vstr	s15, [r3, #24]
        getElecAngle(motor);
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f7ff ff83 	bl	800a8c4 <getElecAngle>
        if (motor->state == MOTOR_READY)
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	f000 8153 	beq.w	800ac70 <foc+0x368>
        else if (motor->state == MOTOR_START)
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a9d0:	2b02      	cmp	r3, #2
 800a9d2:	f040 814d 	bne.w	800ac70 <foc+0x368>
            switch (motor->controlType)
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800a9dc:	2b03      	cmp	r3, #3
 800a9de:	f200 8135 	bhi.w	800ac4c <foc+0x344>
 800a9e2:	a201      	add	r2, pc, #4	@ (adr r2, 800a9e8 <foc+0xe0>)
 800a9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e8:	0800aa55 	.word	0x0800aa55
 800a9ec:	0800a9f9 	.word	0x0800a9f9
 800a9f0:	0800aac5 	.word	0x0800aac5
 800a9f4:	0800ab7b 	.word	0x0800ab7b
                motor->target = 50;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	4a9f      	ldr	r2, [pc, #636]	@ (800ac78 <foc+0x370>)
 800a9fc:	631a      	str	r2, [r3, #48]	@ 0x30
                shaftAngle = _normalizeAngle(shaftAngle + motor->target * motor->Ts);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800aa0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa0e:	4b9b      	ldr	r3, [pc, #620]	@ (800ac7c <foc+0x374>)
 800aa10:	edd3 7a00 	vldr	s15, [r3]
 800aa14:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa18:	eeb0 0a67 	vmov.f32	s0, s15
 800aa1c:	f000 fce0 	bl	800b3e0 <_normalizeAngle>
 800aa20:	eef0 7a40 	vmov.f32	s15, s0
 800aa24:	4b95      	ldr	r3, [pc, #596]	@ (800ac7c <foc+0x374>)
 800aa26:	edc3 7a00 	vstr	s15, [r3]
                motor->angle_el = _electricalAngle(shaftAngle, motor->pole_pairs);
 800aa2a:	4b94      	ldr	r3, [pc, #592]	@ (800ac7c <foc+0x374>)
 800aa2c:	edd3 7a00 	vldr	s15, [r3]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800aa36:	4618      	mov	r0, r3
 800aa38:	eeb0 0a67 	vmov.f32	s0, s15
 800aa3c:	f000 fd06 	bl	800b44c <_electricalAngle>
 800aa40:	eef0 7a40 	vmov.f32	s15, s0
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                motor->Uq = OPEN_LOOP_TORQUE;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	4a8c      	ldr	r2, [pc, #560]	@ (800ac80 <foc+0x378>)
 800aa4e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
                break;
 800aa52:	e0fb      	b.n	800ac4c <foc+0x344>
                if (motor->torqueType == VOLTAGE)
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d108      	bne.n	800aa70 <foc+0x168>
                    motor->target = UqMAX;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	4a88      	ldr	r2, [pc, #544]	@ (800ac84 <foc+0x37c>)
 800aa62:	631a      	str	r2, [r3, #48]	@ 0x30
                    motor->Uq = motor->target;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
                break;
 800aa6e:	e0ed      	b.n	800ac4c <foc+0x344>
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800aa7c:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 800ac88 <foc+0x380>
 800aa80:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa84:	eeb0 0a67 	vmov.f32	s0, s15
 800aa88:	4610      	mov	r0, r2
 800aa8a:	f000 fd29 	bl	800b4e0 <pidOperator>
 800aa8e:	eef0 7a40 	vmov.f32	s15, s0
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                    motor->Uq = pidOperator(&motor->pidIq, motor->target - motor->Iq);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800aaaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aaae:	eeb0 0a67 	vmov.f32	s0, s15
 800aab2:	4610      	mov	r0, r2
 800aab4:	f000 fd14 	bl	800b4e0 <pidOperator>
 800aab8:	eef0 7a40 	vmov.f32	s15, s0
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800aac2:	e0c3      	b.n	800ac4c <foc+0x344>
                if (motor->torqueType == VOLTAGE)
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d119      	bne.n	800ab02 <foc+0x1fa>
                    motor->target = 190;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	4a6e      	ldr	r2, [pc, #440]	@ (800ac8c <foc+0x384>)
 800aad2:	631a      	str	r2, [r3, #48]	@ 0x30
                    velocityErr = motor->target - motor->magEncoder.velocity;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	edd3 7a06 	vldr	s15, [r3, #24]
 800aae0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aae4:	edc7 7a04 	vstr	s15, [r7, #16]
                    motor->Uq = pidOperator(&motor->velocityPID, velocityErr);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	33ac      	adds	r3, #172	@ 0xac
 800aaec:	ed97 0a04 	vldr	s0, [r7, #16]
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f000 fcf5 	bl	800b4e0 <pidOperator>
 800aaf6:	eef0 7a40 	vmov.f32	s15, s0
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800ab00:	e0a4      	b.n	800ac4c <foc+0x344>
                    velocityErr = motor->target - motor->magEncoder.velocity;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	edd3 7a06 	vldr	s15, [r3, #24]
 800ab0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab12:	edc7 7a04 	vstr	s15, [r7, #16]
                    IqRef = pidOperator(&motor->velocityPID, velocityErr);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	33ac      	adds	r3, #172	@ 0xac
 800ab1a:	ed97 0a04 	vldr	s0, [r7, #16]
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f000 fcde 	bl	800b4e0 <pidOperator>
 800ab24:	ed87 0a05 	vstr	s0, [r7, #20]
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800ab34:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 800ac88 <foc+0x380>
 800ab38:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab3c:	eeb0 0a67 	vmov.f32	s0, s15
 800ab40:	4610      	mov	r0, r2
 800ab42:	f000 fccd 	bl	800b4e0 <pidOperator>
 800ab46:	eef0 7a40 	vmov.f32	s15, s0
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                    motor->Uq = pidOperator(&motor->pidIq, IqRef - motor->Iq);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800ab5c:	ed97 7a05 	vldr	s14, [r7, #20]
 800ab60:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab64:	eeb0 0a67 	vmov.f32	s0, s15
 800ab68:	4610      	mov	r0, r2
 800ab6a:	f000 fcb9 	bl	800b4e0 <pidOperator>
 800ab6e:	eef0 7a40 	vmov.f32	s15, s0
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800ab78:	e068      	b.n	800ac4c <foc+0x344>
                if (motor->torqueType == VOLTAGE)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d116      	bne.n	800abb2 <foc+0x2aa>
                    angleErr = motor->target - motor->magEncoder.fullAngle;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	edd3 7a05 	vldr	s15, [r3, #20]
 800ab90:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab94:	edc7 7a07 	vstr	s15, [r7, #28]
                    motor->Uq = pidOperator(&motor->anglePID, angleErr);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	33d0      	adds	r3, #208	@ 0xd0
 800ab9c:	ed97 0a07 	vldr	s0, [r7, #28]
 800aba0:	4618      	mov	r0, r3
 800aba2:	f000 fc9d 	bl	800b4e0 <pidOperator>
 800aba6:	eef0 7a40 	vmov.f32	s15, s0
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800abb0:	e04b      	b.n	800ac4a <foc+0x342>
                    angleErr = motor->target - motor->magEncoder.fullAngle;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	edd3 7a05 	vldr	s15, [r3, #20]
 800abbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abc2:	edc7 7a07 	vstr	s15, [r7, #28]
                    velocityRef = pidOperator(&motor->anglePID, angleErr);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	33d0      	adds	r3, #208	@ 0xd0
 800abca:	ed97 0a07 	vldr	s0, [r7, #28]
 800abce:	4618      	mov	r0, r3
 800abd0:	f000 fc86 	bl	800b4e0 <pidOperator>
 800abd4:	ed87 0a06 	vstr	s0, [r7, #24]
                    IqRef = pidOperator(&motor->velocityPID, velocityRef - motor->magEncoder.velocity);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f103 02ac 	add.w	r2, r3, #172	@ 0xac
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	edd3 7a06 	vldr	s15, [r3, #24]
 800abe4:	ed97 7a06 	vldr	s14, [r7, #24]
 800abe8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abec:	eeb0 0a67 	vmov.f32	s0, s15
 800abf0:	4610      	mov	r0, r2
 800abf2:	f000 fc75 	bl	800b4e0 <pidOperator>
 800abf6:	ed87 0a05 	vstr	s0, [r7, #20]
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800ac06:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800ac88 <foc+0x380>
 800ac0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac0e:	eeb0 0a67 	vmov.f32	s0, s15
 800ac12:	4610      	mov	r0, r2
 800ac14:	f000 fc64 	bl	800b4e0 <pidOperator>
 800ac18:	eef0 7a40 	vmov.f32	s15, s0
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                    motor->Uq = pidOperator(&motor->pidIq, IqRef - motor->Iq);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800ac2e:	ed97 7a05 	vldr	s14, [r7, #20]
 800ac32:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac36:	eeb0 0a67 	vmov.f32	s0, s15
 800ac3a:	4610      	mov	r0, r2
 800ac3c:	f000 fc50 	bl	800b4e0 <pidOperator>
 800ac40:	eef0 7a40 	vmov.f32	s15, s0
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800ac4a:	bf00      	nop
            setTorque(motor, motor->Uq, motor->Ud, motor->angle_el);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	edd3 7a47 	vldr	s15, [r3, #284]	@ 0x11c
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	ed93 7a46 	vldr	s14, [r3, #280]	@ 0x118
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800ac5e:	eeb0 1a66 	vmov.f32	s2, s13
 800ac62:	eef0 0a47 	vmov.f32	s1, s14
 800ac66:	eeb0 0a67 	vmov.f32	s0, s15
 800ac6a:	68f8      	ldr	r0, [r7, #12]
 800ac6c:	f000 fd40 	bl	800b6f0 <setTorque>
}
 800ac70:	bf00      	nop
 800ac72:	3720      	adds	r7, #32
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	42480000 	.word	0x42480000
 800ac7c:	20000644 	.word	0x20000644
 800ac80:	4013cd3a 	.word	0x4013cd3a
 800ac84:	4093cd3a 	.word	0x4093cd3a
 800ac88:	00000000 	.word	0x00000000
 800ac8c:	433e0000 	.word	0x433e0000

0800ac90 <getCurrentOffsets>:
#include "math_utils.h"
#include "focLib.h"

// Function finding zero offsets of the ADC
void getCurrentOffsets(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b, uint32_t rounds)
{
 800ac90:	b5b0      	push	{r4, r5, r7, lr}
 800ac92:	b086      	sub	sp, #24
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	60f8      	str	r0, [r7, #12]
 800ac98:	60b9      	str	r1, [r7, #8]
 800ac9a:	607a      	str	r2, [r7, #4]
 800ac9c:	603b      	str	r3, [r7, #0]
    // find adc offset = zero current voltage
    motor->offset_ia = 0;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f04f 0200 	mov.w	r2, #0
 800aca4:	641a      	str	r2, [r3, #64]	@ 0x40
    motor->offset_ib = 0;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f04f 0200 	mov.w	r2, #0
 800acac:	645a      	str	r2, [r3, #68]	@ 0x44
    // read the adc voltage  times ( arbitrary number )
    for (int i = 0; i < rounds; i++)
 800acae:	2300      	movs	r3, #0
 800acb0:	617b      	str	r3, [r7, #20]
 800acb2:	e076      	b.n	800ada2 <getCurrentOffsets+0x112>
    {
        motor->offset_ia += ADC_2_CURRENT(adc_a);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acb8:	4618      	mov	r0, r3
 800acba:	f7f5 fc6d 	bl	8000598 <__aeabi_f2d>
 800acbe:	4604      	mov	r4, r0
 800acc0:	460d      	mov	r5, r1
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	ee07 3a90 	vmov	s15, r3
 800acc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800accc:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 800ae20 <getCurrentOffsets+0x190>
 800acd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800acd4:	ee17 0a90 	vmov	r0, s15
 800acd8:	f7f5 fc5e 	bl	8000598 <__aeabi_f2d>
 800acdc:	a34c      	add	r3, pc, #304	@ (adr r3, 800ae10 <getCurrentOffsets+0x180>)
 800acde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace2:	f7f5 fddb 	bl	800089c <__aeabi_ddiv>
 800ace6:	4602      	mov	r2, r0
 800ace8:	460b      	mov	r3, r1
 800acea:	4610      	mov	r0, r2
 800acec:	4619      	mov	r1, r3
 800acee:	a34a      	add	r3, pc, #296	@ (adr r3, 800ae18 <getCurrentOffsets+0x188>)
 800acf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf4:	f7f5 fdd2 	bl	800089c <__aeabi_ddiv>
 800acf8:	4602      	mov	r2, r0
 800acfa:	460b      	mov	r3, r1
 800acfc:	4610      	mov	r0, r2
 800acfe:	4619      	mov	r1, r3
 800ad00:	f04f 0200 	mov.w	r2, #0
 800ad04:	4b47      	ldr	r3, [pc, #284]	@ (800ae24 <getCurrentOffsets+0x194>)
 800ad06:	f7f5 fdc9 	bl	800089c <__aeabi_ddiv>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	4620      	mov	r0, r4
 800ad10:	4629      	mov	r1, r5
 800ad12:	f7f5 fae3 	bl	80002dc <__adddf3>
 800ad16:	4602      	mov	r2, r0
 800ad18:	460b      	mov	r3, r1
 800ad1a:	4610      	mov	r0, r2
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	f7f5 ff8b 	bl	8000c38 <__aeabi_d2f>
 800ad22:	4602      	mov	r2, r0
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	641a      	str	r2, [r3, #64]	@ 0x40
        motor->offset_ib += ADC_2_CURRENT(adc_b);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f7f5 fc33 	bl	8000598 <__aeabi_f2d>
 800ad32:	4604      	mov	r4, r0
 800ad34:	460d      	mov	r5, r1
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	ee07 3a90 	vmov	s15, r3
 800ad3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad40:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800ae20 <getCurrentOffsets+0x190>
 800ad44:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ad48:	ee17 0a90 	vmov	r0, s15
 800ad4c:	f7f5 fc24 	bl	8000598 <__aeabi_f2d>
 800ad50:	a32f      	add	r3, pc, #188	@ (adr r3, 800ae10 <getCurrentOffsets+0x180>)
 800ad52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad56:	f7f5 fda1 	bl	800089c <__aeabi_ddiv>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	4610      	mov	r0, r2
 800ad60:	4619      	mov	r1, r3
 800ad62:	a32d      	add	r3, pc, #180	@ (adr r3, 800ae18 <getCurrentOffsets+0x188>)
 800ad64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad68:	f7f5 fd98 	bl	800089c <__aeabi_ddiv>
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	460b      	mov	r3, r1
 800ad70:	4610      	mov	r0, r2
 800ad72:	4619      	mov	r1, r3
 800ad74:	f04f 0200 	mov.w	r2, #0
 800ad78:	4b2a      	ldr	r3, [pc, #168]	@ (800ae24 <getCurrentOffsets+0x194>)
 800ad7a:	f7f5 fd8f 	bl	800089c <__aeabi_ddiv>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	460b      	mov	r3, r1
 800ad82:	4620      	mov	r0, r4
 800ad84:	4629      	mov	r1, r5
 800ad86:	f7f5 faa9 	bl	80002dc <__adddf3>
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	4610      	mov	r0, r2
 800ad90:	4619      	mov	r1, r3
 800ad92:	f7f5 ff51 	bl	8000c38 <__aeabi_d2f>
 800ad96:	4602      	mov	r2, r0
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	645a      	str	r2, [r3, #68]	@ 0x44
    for (int i = 0; i < rounds; i++)
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	617b      	str	r3, [r7, #20]
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	683a      	ldr	r2, [r7, #0]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d884      	bhi.n	800acb4 <getCurrentOffsets+0x24>
    }
    // calculate the mean offsets
    motor->offset_ia = motor->offset_ia / rounds;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	ee07 3a90 	vmov	s15, r3
 800adb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800adba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    motor->offset_ib = motor->offset_ib / rounds;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	ee07 3a90 	vmov	s15, r3
 800add0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800add4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    // printLog("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
    // printf("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
    printLog("[offset_ia]:%f\r\n", motor->offset_ia);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7f5 fbd8 	bl	8000598 <__aeabi_f2d>
 800ade8:	4602      	mov	r2, r0
 800adea:	460b      	mov	r3, r1
 800adec:	480e      	ldr	r0, [pc, #56]	@ (800ae28 <getCurrentOffsets+0x198>)
 800adee:	f001 f9b9 	bl	800c164 <printLog>
    printLog("[offset_ib]:%f\r\n", motor->offset_ib);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7f5 fbce 	bl	8000598 <__aeabi_f2d>
 800adfc:	4602      	mov	r2, r0
 800adfe:	460b      	mov	r3, r1
 800ae00:	480a      	ldr	r0, [pc, #40]	@ (800ae2c <getCurrentOffsets+0x19c>)
 800ae02:	f001 f9af 	bl	800c164 <printLog>
    // _dbg_printf("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
}
 800ae06:	bf00      	nop
 800ae08:	3718      	adds	r7, #24
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bdb0      	pop	{r4, r5, r7, pc}
 800ae0e:	bf00      	nop
 800ae10:	00000000 	.word	0x00000000
 800ae14:	40affe00 	.word	0x40affe00
 800ae18:	40000000 	.word	0x40000000
 800ae1c:	3f847ae1 	.word	0x3f847ae1
 800ae20:	40533333 	.word	0x40533333
 800ae24:	40240000 	.word	0x40240000
 800ae28:	0801125c 	.word	0x0801125c
 800ae2c:	08011270 	.word	0x08011270

0800ae30 <getPhaseCurrents>:

// read all three phase currents (if possible 2 or 3)
void getPhaseCurrents(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800ae30:	b5b0      	push	{r4, r5, r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	607a      	str	r2, [r7, #4]
    motor->Ia = ADC_2_CURRENT(adc_a) - motor->offset_ia; // amps
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	ee07 3a90 	vmov	s15, r3
 800ae42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae46:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800af68 <getPhaseCurrents+0x138>
 800ae4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae4e:	ee17 0a90 	vmov	r0, s15
 800ae52:	f7f5 fba1 	bl	8000598 <__aeabi_f2d>
 800ae56:	a340      	add	r3, pc, #256	@ (adr r3, 800af58 <getPhaseCurrents+0x128>)
 800ae58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5c:	f7f5 fd1e 	bl	800089c <__aeabi_ddiv>
 800ae60:	4602      	mov	r2, r0
 800ae62:	460b      	mov	r3, r1
 800ae64:	4610      	mov	r0, r2
 800ae66:	4619      	mov	r1, r3
 800ae68:	a33d      	add	r3, pc, #244	@ (adr r3, 800af60 <getPhaseCurrents+0x130>)
 800ae6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6e:	f7f5 fd15 	bl	800089c <__aeabi_ddiv>
 800ae72:	4602      	mov	r2, r0
 800ae74:	460b      	mov	r3, r1
 800ae76:	4610      	mov	r0, r2
 800ae78:	4619      	mov	r1, r3
 800ae7a:	f04f 0200 	mov.w	r2, #0
 800ae7e:	4b3b      	ldr	r3, [pc, #236]	@ (800af6c <getPhaseCurrents+0x13c>)
 800ae80:	f7f5 fd0c 	bl	800089c <__aeabi_ddiv>
 800ae84:	4602      	mov	r2, r0
 800ae86:	460b      	mov	r3, r1
 800ae88:	4614      	mov	r4, r2
 800ae8a:	461d      	mov	r5, r3
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7f5 fb81 	bl	8000598 <__aeabi_f2d>
 800ae96:	4602      	mov	r2, r0
 800ae98:	460b      	mov	r3, r1
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	4629      	mov	r1, r5
 800ae9e:	f7f5 fa1b 	bl	80002d8 <__aeabi_dsub>
 800aea2:	4602      	mov	r2, r0
 800aea4:	460b      	mov	r3, r1
 800aea6:	4610      	mov	r0, r2
 800aea8:	4619      	mov	r1, r3
 800aeaa:	f7f5 fec5 	bl	8000c38 <__aeabi_d2f>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	649a      	str	r2, [r3, #72]	@ 0x48
    motor->Ic = ADC_2_CURRENT(adc_b) - motor->offset_ib;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	ee07 3a90 	vmov	s15, r3
 800aeba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aebe:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800af68 <getPhaseCurrents+0x138>
 800aec2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aec6:	ee17 0a90 	vmov	r0, s15
 800aeca:	f7f5 fb65 	bl	8000598 <__aeabi_f2d>
 800aece:	a322      	add	r3, pc, #136	@ (adr r3, 800af58 <getPhaseCurrents+0x128>)
 800aed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed4:	f7f5 fce2 	bl	800089c <__aeabi_ddiv>
 800aed8:	4602      	mov	r2, r0
 800aeda:	460b      	mov	r3, r1
 800aedc:	4610      	mov	r0, r2
 800aede:	4619      	mov	r1, r3
 800aee0:	a31f      	add	r3, pc, #124	@ (adr r3, 800af60 <getPhaseCurrents+0x130>)
 800aee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee6:	f7f5 fcd9 	bl	800089c <__aeabi_ddiv>
 800aeea:	4602      	mov	r2, r0
 800aeec:	460b      	mov	r3, r1
 800aeee:	4610      	mov	r0, r2
 800aef0:	4619      	mov	r1, r3
 800aef2:	f04f 0200 	mov.w	r2, #0
 800aef6:	4b1d      	ldr	r3, [pc, #116]	@ (800af6c <getPhaseCurrents+0x13c>)
 800aef8:	f7f5 fcd0 	bl	800089c <__aeabi_ddiv>
 800aefc:	4602      	mov	r2, r0
 800aefe:	460b      	mov	r3, r1
 800af00:	4614      	mov	r4, r2
 800af02:	461d      	mov	r5, r3
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af08:	4618      	mov	r0, r3
 800af0a:	f7f5 fb45 	bl	8000598 <__aeabi_f2d>
 800af0e:	4602      	mov	r2, r0
 800af10:	460b      	mov	r3, r1
 800af12:	4620      	mov	r0, r4
 800af14:	4629      	mov	r1, r5
 800af16:	f7f5 f9df 	bl	80002d8 <__aeabi_dsub>
 800af1a:	4602      	mov	r2, r0
 800af1c:	460b      	mov	r3, r1
 800af1e:	4610      	mov	r0, r2
 800af20:	4619      	mov	r1, r3
 800af22:	f7f5 fe89 	bl	8000c38 <__aeabi_d2f>
 800af26:	4602      	mov	r2, r0
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	651a      	str	r2, [r3, #80]	@ 0x50
    motor->Ib = 0 - motor->Ia - motor->Ic;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800af32:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800af70 <getPhaseCurrents+0x140>
 800af36:	ee37 7a67 	vsub.f32	s14, s14, s15
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800af40:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
}
 800af4a:	bf00      	nop
 800af4c:	3710      	adds	r7, #16
 800af4e:	46bd      	mov	sp, r7
 800af50:	bdb0      	pop	{r4, r5, r7, pc}
 800af52:	bf00      	nop
 800af54:	f3af 8000 	nop.w
 800af58:	00000000 	.word	0x00000000
 800af5c:	40affe00 	.word	0x40affe00
 800af60:	40000000 	.word	0x40000000
 800af64:	3f847ae1 	.word	0x3f847ae1
 800af68:	40533333 	.word	0x40533333
 800af6c:	40240000 	.word	0x40240000
 800af70:	00000000 	.word	0x00000000

0800af74 <getABCurrents>:
// Ibeta = 1/sqrt(3) * Ia + 1/sqrt(3) * 2Ib
/*============================================================================*/
//   calculating Alpha Beta currents from phase currents
//   - function calculating Clarke transform of the phase currents
void getABCurrents(BldcMotor *motor)
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
    motor->Ialpha = motor->Ia;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	655a      	str	r2, [r3, #84]	@ 0x54
    motor->Ibeta = _1_SQRT3 * motor->Ia + _2_SQRT3 * motor->Ib;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800af8a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800afb8 <getABCurrents+0x44>
 800af8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800af98:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800afbc <getABCurrents+0x48>
 800af9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800afa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
}
 800afaa:	bf00      	nop
 800afac:	370c      	adds	r7, #12
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr
 800afb6:	bf00      	nop
 800afb8:	3f13cd3a 	.word	0x3f13cd3a
 800afbc:	3f93cd3a 	.word	0x3f93cd3a

0800afc0 <getDQCurrents>:
/*============================================================================*/
// function used with the foc algorihtm
//   calculating D and Q currents from Alpha Beta currents and electrical angle
//   - function calculating Clarke transform of the phase currents
void getDQCurrents(BldcMotor *motor)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
    float ct;
    float st;
    _sincos(motor->angle_el, &st, &ct);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800afce:	f107 020c 	add.w	r2, r7, #12
 800afd2:	f107 0308 	add.w	r3, r7, #8
 800afd6:	4611      	mov	r1, r2
 800afd8:	4618      	mov	r0, r3
 800afda:	eeb0 0a67 	vmov.f32	s0, s15
 800afde:	f000 f9df 	bl	800b3a0 <_sincos>
    motor->Id = motor->Ialpha * ct + motor->Ibeta * st;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 800afe8:	edd7 7a03 	vldr	s15, [r7, #12]
 800afec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 800aff6:	edd7 7a02 	vldr	s15, [r7, #8]
 800affa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800affe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
    motor->Iq = motor->Ibeta * ct - motor->Ialpha * st;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 800b00e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b012:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 800b01c:	edd7 7a02 	vldr	s15, [r7, #8]
 800b020:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b024:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
 800b02e:	bf00      	nop
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <encoderInit>:

#include "encoder.h"
#include "math_utils.h"
#include "focLib.h"
void encoderInit(MagEncoder *encoder, float _Ts, float (*_getRawAngle)(void), Direction _direction)
{
 800b036:	b480      	push	{r7}
 800b038:	b085      	sub	sp, #20
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	60f8      	str	r0, [r7, #12]
 800b03e:	ed87 0a02 	vstr	s0, [r7, #8]
 800b042:	6079      	str	r1, [r7, #4]
 800b044:	4613      	mov	r3, r2
 800b046:	70fb      	strb	r3, [r7, #3]
    encoder->angle_prev = 0;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f04f 0200 	mov.w	r2, #0
 800b04e:	601a      	str	r2, [r3, #0]
    encoder->vel_angle_prev = 0;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f04f 0200 	mov.w	r2, #0
 800b056:	605a      	str	r2, [r3, #4]
    encoder->full_rotations = 0;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2200      	movs	r2, #0
 800b05c:	609a      	str	r2, [r3, #8]
    encoder->vel_full_rotations = 0;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2200      	movs	r2, #0
 800b062:	60da      	str	r2, [r3, #12]
    encoder->shaftAngle = 0;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f04f 0200 	mov.w	r2, #0
 800b06a:	611a      	str	r2, [r3, #16]
    encoder->fullAngle = 0;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f04f 0200 	mov.w	r2, #0
 800b072:	615a      	str	r2, [r3, #20]
    encoder->velocity = 0;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f04f 0200 	mov.w	r2, #0
 800b07a:	619a      	str	r2, [r3, #24]
    encoder->Ts = _Ts;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	68ba      	ldr	r2, [r7, #8]
 800b080:	61da      	str	r2, [r3, #28]
    encoder->getRawAngle = _getRawAngle;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	687a      	ldr	r2, [r7, #4]
 800b086:	625a      	str	r2, [r3, #36]	@ 0x24
    encoder->direction = _direction;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	78fa      	ldrb	r2, [r7, #3]
 800b08c:	f883 2020 	strb.w	r2, [r3, #32]
}
 800b090:	bf00      	nop
 800b092:	3714      	adds	r7, #20
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr

0800b09c <encoderUpdate>:

void encoderUpdate(MagEncoder *encoder)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
    float val = encoder->getRawAngle() * encoder->direction;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0a8:	4798      	blx	r3
 800b0aa:	eeb0 7a40 	vmov.f32	s14, s0
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800b0b4:	ee07 3a90 	vmov	s15, r3
 800b0b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b0bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0c0:	edc7 7a03 	vstr	s15, [r7, #12]

    float d_angle = val - encoder->angle_prev;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	edd3 7a00 	vldr	s15, [r3]
 800b0ca:	ed97 7a03 	vldr	s14, [r7, #12]
 800b0ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0d2:	edc7 7a02 	vstr	s15, [r7, #8]
    // 圈数检测
    if (fabsf(d_angle) > (0.8f * _2PI))
 800b0d6:	edd7 7a02 	vldr	s15, [r7, #8]
 800b0da:	eef0 7ae7 	vabs.f32	s15, s15
 800b0de:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800b198 <encoderUpdate+0xfc>
 800b0e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b0e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ea:	dd0f      	ble.n	800b10c <encoderUpdate+0x70>
        encoder->full_rotations += (d_angle > 0) ? -1 : 1;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	edd7 7a02 	vldr	s15, [r7, #8]
 800b0f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b0f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0fc:	dd02      	ble.n	800b104 <encoderUpdate+0x68>
 800b0fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b102:	e000      	b.n	800b106 <encoderUpdate+0x6a>
 800b104:	2201      	movs	r2, #1
 800b106:	441a      	add	r2, r3
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	609a      	str	r2, [r3, #8]

    // angle
    encoder->angle_prev = val;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	68fa      	ldr	r2, [r7, #12]
 800b110:	601a      	str	r2, [r3, #0]
    encoder->shaftAngle = val;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	68fa      	ldr	r2, [r7, #12]
 800b116:	611a      	str	r2, [r3, #16]
    encoder->fullAngle = (float)encoder->full_rotations * _2PI + encoder->angle_prev;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	ee07 3a90 	vmov	s15, r3
 800b120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b124:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800b19c <encoderUpdate+0x100>
 800b128:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	edd3 7a00 	vldr	s15, [r3]
 800b132:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	edc3 7a05 	vstr	s15, [r3, #20]

    // 速度计算
    val = ((float)(encoder->full_rotations - encoder->vel_full_rotations) * _2PI + (encoder->angle_prev - encoder->vel_angle_prev)) / encoder->Ts;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	689a      	ldr	r2, [r3, #8]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	1ad3      	subs	r3, r2, r3
 800b146:	ee07 3a90 	vmov	s15, r3
 800b14a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b14e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800b19c <encoderUpdate+0x100>
 800b152:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	edd3 6a00 	vldr	s13, [r3]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	edd3 7a01 	vldr	s15, [r3, #4]
 800b162:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b166:	ee77 6a27 	vadd.f32	s13, s14, s15
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	ed93 7a07 	vldr	s14, [r3, #28]
 800b170:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b174:	edc7 7a03 	vstr	s15, [r7, #12]
    // 保存变量以待将来使用
    encoder->vel_angle_prev = encoder->angle_prev;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	605a      	str	r2, [r3, #4]
    encoder->vel_full_rotations = encoder->full_rotations;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	689a      	ldr	r2, [r3, #8]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	60da      	str	r2, [r3, #12]
    encoder->velocity = val;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	68fa      	ldr	r2, [r7, #12]
 800b18c:	619a      	str	r2, [r3, #24]
}
 800b18e:	bf00      	nop
 800b190:	3710      	adds	r7, #16
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	40a0d97c 	.word	0x40a0d97c
 800b19c:	40c90fdb 	.word	0x40c90fdb

0800b1a0 <lpfInit>:
#include "lowpass_filter.h"

void lpfInit(LowPassFilter *filter, const float _Tf, const float _dt)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b085      	sub	sp, #20
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	ed87 0a02 	vstr	s0, [r7, #8]
 800b1ac:	edc7 0a01 	vstr	s1, [r7, #4]
    filter->Tf = _Tf;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	68ba      	ldr	r2, [r7, #8]
 800b1b4:	601a      	str	r2, [r3, #0]
    filter->dt = _dt;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	605a      	str	r2, [r3, #4]
    filter->y_prev = 0;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f04f 0200 	mov.w	r2, #0
 800b1c2:	609a      	str	r2, [r3, #8]
}
 800b1c4:	bf00      	nop
 800b1c6:	3714      	adds	r7, #20
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <lpfOperator>:

float lpfOperator(LowPassFilter *filter, float x)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b085      	sub	sp, #20
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	ed87 0a00 	vstr	s0, [r7]

    float alpha = filter->Tf / (filter->Tf + filter->dt);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	edd3 6a00 	vldr	s13, [r3]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	ed93 7a00 	vldr	s14, [r3]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	edd3 7a01 	vldr	s15, [r3, #4]
 800b1ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b1f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1f6:	edc7 7a03 	vstr	s15, [r7, #12]
    float y = alpha * filter->y_prev + (1.0f - alpha) * x;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	ed93 7a02 	vldr	s14, [r3, #8]
 800b200:	edd7 7a03 	vldr	s15, [r7, #12]
 800b204:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b208:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b20c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b210:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b214:	edd7 7a00 	vldr	s15, [r7]
 800b218:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b21c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b220:	edc7 7a02 	vstr	s15, [r7, #8]
    filter->y_prev = y;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	68ba      	ldr	r2, [r7, #8]
 800b228:	609a      	str	r2, [r3, #8]

    return y;
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	ee07 3a90 	vmov	s15, r3
}
 800b230:	eeb0 0a67 	vmov.f32	s0, s15
 800b234:	3714      	adds	r7, #20
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr
	...

0800b240 <_sin>:
#include "focLib.h"
// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b086      	sub	sp, #24
 800b244:	af00      	add	r7, sp, #0
 800b246:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0, 804, 1608, 2411, 3212, 4011, 4808, 5602, 6393, 7180, 7962, 8740, 9512, 10279, 11039, 11793, 12540, 13279, 14010, 14733, 15447, 16151, 16846, 17531, 18205, 18868, 19520, 20160, 20788, 21403, 22006, 22595, 23170, 23732, 24279, 24812, 25330, 25833, 26320, 26791, 27246, 27684, 28106, 28511, 28899, 29269, 29622, 29957, 30274, 30572, 30853, 31114, 31357, 31581, 31786, 31972, 32138, 32286, 32413, 32522, 32610, 32679, 32729, 32758, 32768};
  unsigned int i = (unsigned int)(a * (64 * 4 * 256.0 / _2PI));
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f7f5 f9a4 	bl	8000598 <__aeabi_f2d>
 800b250:	a339      	add	r3, pc, #228	@ (adr r3, 800b338 <_sin+0xf8>)
 800b252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b256:	f7f5 f9f7 	bl	8000648 <__aeabi_dmul>
 800b25a:	4602      	mov	r2, r0
 800b25c:	460b      	mov	r3, r1
 800b25e:	4610      	mov	r0, r2
 800b260:	4619      	mov	r1, r3
 800b262:	f7f5 fcc9 	bl	8000bf8 <__aeabi_d2uiz>
 800b266:	4603      	mov	r3, r0
 800b268:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	0a1b      	lsrs	r3, r3, #8
 800b274:	b2db      	uxtb	r3, r3
 800b276:	60fb      	str	r3, [r7, #12]
  if (i < 64)
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2b3f      	cmp	r3, #63	@ 0x3f
 800b27c:	d80b      	bhi.n	800b296 <_sin+0x56>
  {
    t1 = sine_array[i];
 800b27e:	4a2c      	ldr	r2, [pc, #176]	@ (800b330 <_sin+0xf0>)
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b286:	617b      	str	r3, [r7, #20]
    t2 = sine_array[i + 1];
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	3301      	adds	r3, #1
 800b28c:	4a28      	ldr	r2, [pc, #160]	@ (800b330 <_sin+0xf0>)
 800b28e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b292:	613b      	str	r3, [r7, #16]
 800b294:	e033      	b.n	800b2fe <_sin+0xbe>
  }
  else if (i < 128)
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2b7f      	cmp	r3, #127	@ 0x7f
 800b29a:	d80e      	bhi.n	800b2ba <_sin+0x7a>
  {
    t1 = sine_array[128 - i];
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800b2a2:	4a23      	ldr	r2, [pc, #140]	@ (800b330 <_sin+0xf0>)
 800b2a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2a8:	617b      	str	r3, [r7, #20]
    t2 = sine_array[127 - i];
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800b2b0:	4a1f      	ldr	r2, [pc, #124]	@ (800b330 <_sin+0xf0>)
 800b2b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2b6:	613b      	str	r3, [r7, #16]
 800b2b8:	e021      	b.n	800b2fe <_sin+0xbe>
  }
  else if (i < 192)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2bbf      	cmp	r3, #191	@ 0xbf
 800b2be:	d80e      	bhi.n	800b2de <_sin+0x9e>
  {
    t1 = -sine_array[-128 + i];
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	3b80      	subs	r3, #128	@ 0x80
 800b2c4:	4a1a      	ldr	r2, [pc, #104]	@ (800b330 <_sin+0xf0>)
 800b2c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2ca:	425b      	negs	r3, r3
 800b2cc:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[-127 + i];
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	3b7f      	subs	r3, #127	@ 0x7f
 800b2d2:	4a17      	ldr	r2, [pc, #92]	@ (800b330 <_sin+0xf0>)
 800b2d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2d8:	425b      	negs	r3, r3
 800b2da:	613b      	str	r3, [r7, #16]
 800b2dc:	e00f      	b.n	800b2fe <_sin+0xbe>
  }
  else
  {
    t1 = -sine_array[256 - i];
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800b2e4:	4a12      	ldr	r2, [pc, #72]	@ (800b330 <_sin+0xf0>)
 800b2e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2ea:	425b      	negs	r3, r3
 800b2ec:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[255 - i];
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800b2f4:	4a0e      	ldr	r2, [pc, #56]	@ (800b330 <_sin+0xf0>)
 800b2f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2fa:	425b      	negs	r3, r3
 800b2fc:	613b      	str	r3, [r7, #16]
  }
  return (1.0f / 32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 800b2fe:	693a      	ldr	r2, [r7, #16]
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	1ad3      	subs	r3, r2, r3
 800b304:	68ba      	ldr	r2, [r7, #8]
 800b306:	fb02 f303 	mul.w	r3, r2, r3
 800b30a:	121a      	asrs	r2, r3, #8
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	4413      	add	r3, r2
 800b310:	ee07 3a90 	vmov	s15, r3
 800b314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b318:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800b334 <_sin+0xf4>
 800b31c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b320:	eeb0 0a67 	vmov.f32	s0, s15
 800b324:	3718      	adds	r7, #24
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	f3af 8000 	nop.w
 800b330:	2000000c 	.word	0x2000000c
 800b334:	38000000 	.word	0x38000000
 800b338:	6446f9b4 	.word	0x6446f9b4
 800b33c:	40c45f30 	.word	0x40c45f30

0800b340 <_cos>:
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 800b34a:	edd7 7a01 	vldr	s15, [r7, #4]
 800b34e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800b398 <_cos+0x58>
 800b352:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b356:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 800b35a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b35e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800b39c <_cos+0x5c>
 800b362:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b36a:	dd06      	ble.n	800b37a <_cos+0x3a>
 800b36c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b370:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800b39c <_cos+0x5c>
 800b374:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b378:	e001      	b.n	800b37e <_cos+0x3e>
 800b37a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b37e:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 800b382:	ed97 0a03 	vldr	s0, [r7, #12]
 800b386:	f7ff ff5b 	bl	800b240 <_sin>
 800b38a:	eef0 7a40 	vmov.f32	s15, s0
}
 800b38e:	eeb0 0a67 	vmov.f32	s0, s15
 800b392:	3710      	adds	r7, #16
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}
 800b398:	3fc90fdb 	.word	0x3fc90fdb
 800b39c:	40c90fdb 	.word	0x40c90fdb

0800b3a0 <_sincos>:

__attribute__((weak)) void _sincos(float a, float *s, float *c)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	ed87 0a03 	vstr	s0, [r7, #12]
 800b3aa:	60b8      	str	r0, [r7, #8]
 800b3ac:	6079      	str	r1, [r7, #4]
  *s = _sin(a);
 800b3ae:	ed97 0a03 	vldr	s0, [r7, #12]
 800b3b2:	f7ff ff45 	bl	800b240 <_sin>
 800b3b6:	eef0 7a40 	vmov.f32	s15, s0
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	edc3 7a00 	vstr	s15, [r3]
  *c = _cos(a);
 800b3c0:	ed97 0a03 	vldr	s0, [r7, #12]
 800b3c4:	f7ff ffbc 	bl	800b340 <_cos>
 800b3c8:	eef0 7a40 	vmov.f32	s15, s0
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	edc3 7a00 	vstr	s15, [r3]
}
 800b3d2:	bf00      	nop
 800b3d4:	3710      	adds	r7, #16
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	0000      	movs	r0, r0
 800b3dc:	0000      	movs	r0, r0
	...

0800b3e0 <_normalizeAngle>:
  return r;
}

// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f7f5 f8d4 	bl	8000598 <__aeabi_f2d>
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 800b440 <_normalizeAngle+0x60>
 800b3f8:	ec43 2b10 	vmov	d0, r2, r3
 800b3fc:	f005 fd7e 	bl	8010efc <fmod>
 800b400:	ec53 2b10 	vmov	r2, r3, d0
 800b404:	4610      	mov	r0, r2
 800b406:	4619      	mov	r1, r3
 800b408:	f7f5 fc16 	bl	8000c38 <__aeabi_d2f>
 800b40c:	4603      	mov	r3, r0
 800b40e:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 800b410:	edd7 7a03 	vldr	s15, [r7, #12]
 800b414:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b41c:	db02      	blt.n	800b424 <_normalizeAngle+0x44>
 800b41e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b422:	e005      	b.n	800b430 <_normalizeAngle+0x50>
 800b424:	edd7 7a03 	vldr	s15, [r7, #12]
 800b428:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800b448 <_normalizeAngle+0x68>
 800b42c:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800b430:	eeb0 0a67 	vmov.f32	s0, s15
 800b434:	3710      	adds	r7, #16
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	f3af 8000 	nop.w
 800b440:	60000000 	.word	0x60000000
 800b444:	401921fb 	.word	0x401921fb
 800b448:	40c90fdb 	.word	0x40c90fdb

0800b44c <_electricalAngle>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b083      	sub	sp, #12
 800b450:	af00      	add	r7, sp, #0
 800b452:	ed87 0a01 	vstr	s0, [r7, #4]
 800b456:	6038      	str	r0, [r7, #0]
  return (shaft_angle * pole_pairs);
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	ee07 3a90 	vmov	s15, r3
 800b45e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b462:	edd7 7a01 	vldr	s15, [r7, #4]
 800b466:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800b46a:	eeb0 0a67 	vmov.f32	s0, s15
 800b46e:	370c      	adds	r7, #12
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <pidInit>:
#include "pid.h"
#include "math_utils.h"

void pidInit(PidController *pidController, float _P, float _I, float _D, float _ramp, float _limit, float _Ts)
{
 800b478:	b480      	push	{r7}
 800b47a:	b089      	sub	sp, #36	@ 0x24
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	61f8      	str	r0, [r7, #28]
 800b480:	ed87 0a06 	vstr	s0, [r7, #24]
 800b484:	edc7 0a05 	vstr	s1, [r7, #20]
 800b488:	ed87 1a04 	vstr	s2, [r7, #16]
 800b48c:	edc7 1a03 	vstr	s3, [r7, #12]
 800b490:	ed87 2a02 	vstr	s4, [r7, #8]
 800b494:	edc7 2a01 	vstr	s5, [r7, #4]
    pidController->P = _P;
 800b498:	69fb      	ldr	r3, [r7, #28]
 800b49a:	69ba      	ldr	r2, [r7, #24]
 800b49c:	601a      	str	r2, [r3, #0]
    pidController->I = _I;
 800b49e:	69fb      	ldr	r3, [r7, #28]
 800b4a0:	697a      	ldr	r2, [r7, #20]
 800b4a2:	605a      	str	r2, [r3, #4]
    pidController->D = _D;
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	693a      	ldr	r2, [r7, #16]
 800b4a8:	609a      	str	r2, [r3, #8]
    pidController->output_ramp = _ramp;
 800b4aa:	69fb      	ldr	r3, [r7, #28]
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	60da      	str	r2, [r3, #12]
    pidController->limit = _limit;
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	68ba      	ldr	r2, [r7, #8]
 800b4b4:	611a      	str	r2, [r3, #16]
    pidController->Ts = _Ts;
 800b4b6:	69fb      	ldr	r3, [r7, #28]
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	621a      	str	r2, [r3, #32]
    pidController->error_prev = 0;
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	f04f 0200 	mov.w	r2, #0
 800b4c2:	615a      	str	r2, [r3, #20]
    pidController->output_prev = 0;
 800b4c4:	69fb      	ldr	r3, [r7, #28]
 800b4c6:	f04f 0200 	mov.w	r2, #0
 800b4ca:	619a      	str	r2, [r3, #24]
    pidController->integral_prev = 0;
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	f04f 0200 	mov.w	r2, #0
 800b4d2:	61da      	str	r2, [r3, #28]
}
 800b4d4:	bf00      	nop
 800b4d6:	3724      	adds	r7, #36	@ 0x24
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <pidOperator>:

// PID controller function
float pidOperator(PidController *pidController, float error)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b08b      	sub	sp, #44	@ 0x2c
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	ed87 0a00 	vstr	s0, [r7]
    // u(s) = (P + I/s + Ds)e(s)
    // Discrete implementations
    // proportional part
    // u_p  = P *e(k)
    float proportional = pidController->P * error;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	edd3 7a00 	vldr	s15, [r3]
 800b4f2:	ed97 7a00 	vldr	s14, [r7]
 800b4f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4fa:	edc7 7a08 	vstr	s15, [r7, #32]
    // Tustin transform of the integral part
    // u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
    float a = 0.5f * (error + pidController->error_prev);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	ed93 7a05 	vldr	s14, [r3, #20]
 800b504:	edd7 7a00 	vldr	s15, [r7]
 800b508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b50c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b510:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b514:	edc7 7a07 	vstr	s15, [r7, #28]
    float b = pidController->I * pidController->Ts;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	ed93 7a01 	vldr	s14, [r3, #4]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	edd3 7a08 	vldr	s15, [r3, #32]
 800b524:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b528:	edc7 7a06 	vstr	s15, [r7, #24]
    float integral = pidController->integral_prev + pidController->I * pidController->Ts * 0.5f * (error + pidController->error_prev);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	ed93 7a07 	vldr	s14, [r3, #28]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	edd3 6a01 	vldr	s13, [r3, #4]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	edd3 7a08 	vldr	s15, [r3, #32]
 800b53e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b542:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800b546:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	ed93 6a05 	vldr	s12, [r3, #20]
 800b550:	edd7 7a00 	vldr	s15, [r7]
 800b554:	ee76 7a27 	vadd.f32	s15, s12, s15
 800b558:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b55c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b560:	edc7 7a05 	vstr	s15, [r7, #20]
    // antiwindup - limit the output
    integral = _constrain(integral, -pidController->limit, pidController->limit);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	edd3 7a04 	vldr	s15, [r3, #16]
 800b56a:	eef1 7a67 	vneg.f32	s15, s15
 800b56e:	ed97 7a05 	vldr	s14, [r7, #20]
 800b572:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b57a:	d505      	bpl.n	800b588 <pidOperator+0xa8>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	edd3 7a04 	vldr	s15, [r3, #16]
 800b582:	eef1 7a67 	vneg.f32	s15, s15
 800b586:	e00f      	b.n	800b5a8 <pidOperator+0xc8>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	edd3 7a04 	vldr	s15, [r3, #16]
 800b58e:	ed97 7a05 	vldr	s14, [r7, #20]
 800b592:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b59a:	dd03      	ble.n	800b5a4 <pidOperator+0xc4>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	edd3 7a04 	vldr	s15, [r3, #16]
 800b5a2:	e001      	b.n	800b5a8 <pidOperator+0xc8>
 800b5a4:	edd7 7a05 	vldr	s15, [r7, #20]
 800b5a8:	edc7 7a05 	vstr	s15, [r7, #20]
    // Discrete derivation
    // u_dk = D(ek - ek_1)/Ts
    float derivative = pidController->D * (error - pidController->error_prev) / pidController->Ts;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	ed93 7a02 	vldr	s14, [r3, #8]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	edd3 7a05 	vldr	s15, [r3, #20]
 800b5b8:	edd7 6a00 	vldr	s13, [r7]
 800b5bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b5c0:	ee67 6a27 	vmul.f32	s13, s14, s15
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	ed93 7a08 	vldr	s14, [r3, #32]
 800b5ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5ce:	edc7 7a04 	vstr	s15, [r7, #16]

    // sum all the components
    float output = proportional + integral + derivative;
 800b5d2:	ed97 7a08 	vldr	s14, [r7, #32]
 800b5d6:	edd7 7a05 	vldr	s15, [r7, #20]
 800b5da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b5de:	ed97 7a04 	vldr	s14, [r7, #16]
 800b5e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b5e6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    // antiwindup - limit the output variable
    output = _constrain(output, -pidController->limit, pidController->limit);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	edd3 7a04 	vldr	s15, [r3, #16]
 800b5f0:	eef1 7a67 	vneg.f32	s15, s15
 800b5f4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b5f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b5fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b600:	d505      	bpl.n	800b60e <pidOperator+0x12e>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	edd3 7a04 	vldr	s15, [r3, #16]
 800b608:	eef1 7a67 	vneg.f32	s15, s15
 800b60c:	e00f      	b.n	800b62e <pidOperator+0x14e>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	edd3 7a04 	vldr	s15, [r3, #16]
 800b614:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b618:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b61c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b620:	dd03      	ble.n	800b62a <pidOperator+0x14a>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	edd3 7a04 	vldr	s15, [r3, #16]
 800b628:	e001      	b.n	800b62e <pidOperator+0x14e>
 800b62a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b62e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // if output ramp defined
    if (pidController->output_ramp > 0)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	edd3 7a03 	vldr	s15, [r3, #12]
 800b638:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b63c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b640:	dd42      	ble.n	800b6c8 <pidOperator+0x1e8>
    {
        // limit the acceleration by ramping the output
        float output_rate = (output - pidController->output_prev) / pidController->Ts;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	edd3 7a06 	vldr	s15, [r3, #24]
 800b648:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b64c:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	ed93 7a08 	vldr	s14, [r3, #32]
 800b656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b65a:	edc7 7a03 	vstr	s15, [r7, #12]
        if (output_rate > pidController->output_ramp)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	edd3 7a03 	vldr	s15, [r3, #12]
 800b664:	ed97 7a03 	vldr	s14, [r7, #12]
 800b668:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b66c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b670:	dd0f      	ble.n	800b692 <pidOperator+0x1b2>
            output = pidController->output_prev + pidController->output_ramp * pidController->Ts;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	ed93 7a06 	vldr	s14, [r3, #24]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	edd3 6a03 	vldr	s13, [r3, #12]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	edd3 7a08 	vldr	s15, [r3, #32]
 800b684:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b68c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 800b690:	e01a      	b.n	800b6c8 <pidOperator+0x1e8>
        else if (output_rate < -pidController->output_ramp)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	edd3 7a03 	vldr	s15, [r3, #12]
 800b698:	eef1 7a67 	vneg.f32	s15, s15
 800b69c:	ed97 7a03 	vldr	s14, [r7, #12]
 800b6a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b6a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6a8:	d50e      	bpl.n	800b6c8 <pidOperator+0x1e8>
            output = pidController->output_prev - pidController->output_ramp * pidController->Ts;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	ed93 7a06 	vldr	s14, [r3, #24]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	edd3 6a03 	vldr	s13, [r3, #12]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	edd3 7a08 	vldr	s15, [r3, #32]
 800b6bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b6c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b6c4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }
    // saving for the next pass
    pidController->integral_prev = integral;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	697a      	ldr	r2, [r7, #20]
 800b6cc:	61da      	str	r2, [r3, #28]
    pidController->output_prev = output;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6d2:	619a      	str	r2, [r3, #24]
    pidController->error_prev = error;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	683a      	ldr	r2, [r7, #0]
 800b6d8:	615a      	str	r2, [r3, #20]
    return output;
 800b6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6dc:	ee07 3a90 	vmov	s15, r3
}
 800b6e0:	eeb0 0a67 	vmov.f32	s0, s15
 800b6e4:	372c      	adds	r7, #44	@ 0x2c
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr
	...

0800b6f0 <setTorque>:
    motor->updatePwm(HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Tc);
}
#elif 1

void setTorque(BldcMotor *motor, float Uq, float Ud, float angle_el)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b08e      	sub	sp, #56	@ 0x38
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	ed87 0a02 	vstr	s0, [r7, #8]
 800b6fc:	edc7 0a01 	vstr	s1, [r7, #4]
 800b700:	ed87 1a00 	vstr	s2, [r7]
    float Ualpha, Ubeta;
    float Ua, Ub, Uc;

    // Sinusoidal PWM modulation
    // Inverse Park + Clarke transformation
    _sincos(angle_el, &_sa, &_ca);
 800b704:	f107 0214 	add.w	r2, r7, #20
 800b708:	f107 0310 	add.w	r3, r7, #16
 800b70c:	4611      	mov	r1, r2
 800b70e:	4618      	mov	r0, r3
 800b710:	ed97 0a00 	vldr	s0, [r7]
 800b714:	f7ff fe44 	bl	800b3a0 <_sincos>

    // Inverse park transform
    Ualpha = _ca * Ud - _sa * Uq; // -sin(angle) * Uq;
 800b718:	ed97 7a05 	vldr	s14, [r7, #20]
 800b71c:	edd7 7a01 	vldr	s15, [r7, #4]
 800b720:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b724:	edd7 6a04 	vldr	s13, [r7, #16]
 800b728:	edd7 7a02 	vldr	s15, [r7, #8]
 800b72c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b730:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b734:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    Ubeta = _sa * Ud + _ca * Uq;  //  cos(angle) * Uq;
 800b738:	ed97 7a04 	vldr	s14, [r7, #16]
 800b73c:	edd7 7a01 	vldr	s15, [r7, #4]
 800b740:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b744:	edd7 6a05 	vldr	s13, [r7, #20]
 800b748:	edd7 7a02 	vldr	s15, [r7, #8]
 800b74c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b750:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b754:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Clarke transform
    Ua = Ualpha;
 800b758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b75a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Ub = -0.5f * Ualpha + _SQRT3_2 * Ubeta;
 800b75c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800b760:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800b764:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b768:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800b76c:	eddf 6a95 	vldr	s13, [pc, #596]	@ 800b9c4 <setTorque+0x2d4>
 800b770:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b774:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b778:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc = -0.5f * Ualpha - _SQRT3_2 * Ubeta;
 800b77c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800b780:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800b784:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b788:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800b78c:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 800b9c4 <setTorque+0x2d4>
 800b790:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b794:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b798:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    center = U_DC / 2;
 800b79c:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 800b7a0:	623b      	str	r3, [r7, #32]

    // discussed here: https://community.simplefoc.com/t/embedded-world-2023-stm32-cordic-co-processor/3107/165?u=candas1
    // a bit more info here: https://microchipdeveloper.com/mct5001:which-zsm-is-best
    // Midpoint Clamp
    float Umin = min(Ua, min(Ub, Uc));
 800b7a2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b7a6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b7aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7b2:	d502      	bpl.n	800b7ba <setTorque+0xca>
 800b7b4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800b7b8:	e001      	b.n	800b7be <setTorque+0xce>
 800b7ba:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b7be:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b7c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b7c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7ca:	dd01      	ble.n	800b7d0 <setTorque+0xe0>
 800b7cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7ce:	e00b      	b.n	800b7e8 <setTorque+0xf8>
 800b7d0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b7d4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b7d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b7dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7e0:	d501      	bpl.n	800b7e6 <setTorque+0xf6>
 800b7e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7e4:	e000      	b.n	800b7e8 <setTorque+0xf8>
 800b7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e8:	61fb      	str	r3, [r7, #28]
    float Umax = max(Ua, max(Ub, Uc));
 800b7ea:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b7ee:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b7f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b7f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7fa:	dd02      	ble.n	800b802 <setTorque+0x112>
 800b7fc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800b800:	e001      	b.n	800b806 <setTorque+0x116>
 800b802:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b806:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b80a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b80e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b812:	d501      	bpl.n	800b818 <setTorque+0x128>
 800b814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b816:	e00b      	b.n	800b830 <setTorque+0x140>
 800b818:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b81c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b820:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b828:	dd01      	ble.n	800b82e <setTorque+0x13e>
 800b82a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b82c:	e000      	b.n	800b830 <setTorque+0x140>
 800b82e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b830:	61bb      	str	r3, [r7, #24]
    center -= (Umax + Umin) / 2;
 800b832:	ed97 7a06 	vldr	s14, [r7, #24]
 800b836:	edd7 7a07 	vldr	s15, [r7, #28]
 800b83a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b83e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800b842:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b846:	ed97 7a08 	vldr	s14, [r7, #32]
 800b84a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b84e:	edc7 7a08 	vstr	s15, [r7, #32]

    Ua += center;
 800b852:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b856:	edd7 7a08 	vldr	s15, [r7, #32]
 800b85a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b85e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    Ub += center;
 800b862:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b866:	edd7 7a08 	vldr	s15, [r7, #32]
 800b86a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b86e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc += center;
 800b872:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b876:	edd7 7a08 	vldr	s15, [r7, #32]
 800b87a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b87e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    motor->Ta = _constrain(Ua / U_DC, 0.0f, 1.0f);
 800b882:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b886:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b88a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b88e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b896:	d502      	bpl.n	800b89e <setTorque+0x1ae>
 800b898:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 800b9c8 <setTorque+0x2d8>
 800b89c:	e015      	b.n	800b8ca <setTorque+0x1da>
 800b89e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b8a2:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b8a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b8aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b8ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8b6:	dd02      	ble.n	800b8be <setTorque+0x1ce>
 800b8b8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b8bc:	e005      	b.n	800b8ca <setTorque+0x1da>
 800b8be:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b8c2:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b8c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128
    motor->Tb = _constrain(Ub / U_DC, 0.0f, 1.0f);
 800b8d0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b8d4:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b8d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b8dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b8e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8e4:	d502      	bpl.n	800b8ec <setTorque+0x1fc>
 800b8e6:	eddf 7a38 	vldr	s15, [pc, #224]	@ 800b9c8 <setTorque+0x2d8>
 800b8ea:	e015      	b.n	800b918 <setTorque+0x228>
 800b8ec:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b8f0:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b8f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b8f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b8fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b904:	dd02      	ble.n	800b90c <setTorque+0x21c>
 800b906:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b90a:	e005      	b.n	800b918 <setTorque+0x228>
 800b90c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b910:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b914:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	edc3 7a4b 	vstr	s15, [r3, #300]	@ 0x12c
    motor->Tc = _constrain(Uc / U_DC, 0.0f, 1.0f);
 800b91e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b922:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b926:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b92a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b92e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b932:	d502      	bpl.n	800b93a <setTorque+0x24a>
 800b934:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800b9c8 <setTorque+0x2d8>
 800b938:	e015      	b.n	800b966 <setTorque+0x276>
 800b93a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b93e:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b942:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b946:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b94a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b94e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b952:	dd02      	ble.n	800b95a <setTorque+0x26a>
 800b954:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b958:	e005      	b.n	800b966 <setTorque+0x276>
 800b95a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b95e:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b962:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	edc3 7a4c 	vstr	s15, [r3, #304]	@ 0x130

    motor->updatePwm(HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tc);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800b972:	68fa      	ldr	r2, [r7, #12]
 800b974:	edd2 7a4b 	vldr	s15, [r2, #300]	@ 0x12c
 800b978:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800b9cc <setTorque+0x2dc>
 800b97c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b984:	ee17 2a90 	vmov	r2, s15
 800b988:	b290      	uxth	r0, r2
 800b98a:	68fa      	ldr	r2, [r7, #12]
 800b98c:	edd2 7a4a 	vldr	s15, [r2, #296]	@ 0x128
 800b990:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800b9cc <setTorque+0x2dc>
 800b994:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b99c:	ee17 2a90 	vmov	r2, s15
 800b9a0:	b291      	uxth	r1, r2
 800b9a2:	68fa      	ldr	r2, [r7, #12]
 800b9a4:	edd2 7a4c 	vldr	s15, [r2, #304]	@ 0x130
 800b9a8:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800b9cc <setTorque+0x2dc>
 800b9ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b9b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9b4:	ee17 2a90 	vmov	r2, s15
 800b9b8:	b292      	uxth	r2, r2
 800b9ba:	4798      	blx	r3
    // set the voltages in driver
    // driver->setPwm(Ua, Ub, Uc);
}
 800b9bc:	bf00      	nop
 800b9be:	3738      	adds	r7, #56	@ 0x38
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	3f5db3d7 	.word	0x3f5db3d7
 800b9c8:	00000000 	.word	0x00000000
 800b9cc:	45fa0000 	.word	0x45fa0000

0800b9d0 <motorInit>:
static void working(void);

// should be called before interruption enabled

static void motorInit()
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b086      	sub	sp, #24
 800b9d4:	af00      	add	r7, sp, #0
#if 1
    motor1.pole_pairs = 7;
 800b9d6:	4bc7      	ldr	r3, [pc, #796]	@ (800bcf4 <motorInit+0x324>)
 800b9d8:	2207      	movs	r2, #7
 800b9da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    motor1.updatePwm = updatePwm1;
 800b9de:	4bc5      	ldr	r3, [pc, #788]	@ (800bcf4 <motorInit+0x324>)
 800b9e0:	4ac5      	ldr	r2, [pc, #788]	@ (800bcf8 <motorInit+0x328>)
 800b9e2:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    motor1.startPwm = startPwm1;
 800b9e6:	4bc3      	ldr	r3, [pc, #780]	@ (800bcf4 <motorInit+0x324>)
 800b9e8:	4ac4      	ldr	r2, [pc, #784]	@ (800bcfc <motorInit+0x32c>)
 800b9ea:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor1.stopPwm = stopPwm1;
 800b9ee:	4bc1      	ldr	r3, [pc, #772]	@ (800bcf4 <motorInit+0x324>)
 800b9f0:	4ac3      	ldr	r2, [pc, #780]	@ (800bd00 <motorInit+0x330>)
 800b9f2:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    motor1.zeroElectricAngleOffSet = 0;
 800b9f6:	4bbf      	ldr	r3, [pc, #764]	@ (800bcf4 <motorInit+0x324>)
 800b9f8:	f04f 0200 	mov.w	r2, #0
 800b9fc:	635a      	str	r2, [r3, #52]	@ 0x34
    motor1.Ts = 100 * 1e-6f;
 800b9fe:	4bbd      	ldr	r3, [pc, #756]	@ (800bcf4 <motorInit+0x324>)
 800ba00:	4ac0      	ldr	r2, [pc, #768]	@ (800bd04 <motorInit+0x334>)
 800ba02:	62da      	str	r2, [r3, #44]	@ 0x2c
    motor1.torqueType = CURRENT;
 800ba04:	4bbb      	ldr	r3, [pc, #748]	@ (800bcf4 <motorInit+0x324>)
 800ba06:	2201      	movs	r2, #1
 800ba08:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

    motor1.controlType = VELOCITY_OPEN_LOOP;
 800ba0c:	4bb9      	ldr	r3, [pc, #740]	@ (800bcf4 <motorInit+0x324>)
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

    motor1.state = MOTOR_CALIBRATE;
 800ba14:	4bb7      	ldr	r3, [pc, #732]	@ (800bcf4 <motorInit+0x324>)
 800ba16:	2200      	movs	r2, #0
 800ba18:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    encoderInit(&motor1.magEncoder, motor1.Ts, _1_MT6701_GetRawAngle, UNKNOWN);
 800ba1c:	4bb5      	ldr	r3, [pc, #724]	@ (800bcf4 <motorInit+0x324>)
 800ba1e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ba22:	2201      	movs	r2, #1
 800ba24:	49b8      	ldr	r1, [pc, #736]	@ (800bd08 <motorInit+0x338>)
 800ba26:	eeb0 0a67 	vmov.f32	s0, s15
 800ba2a:	48b2      	ldr	r0, [pc, #712]	@ (800bcf4 <motorInit+0x324>)
 800ba2c:	f7ff fb03 	bl	800b036 <encoderInit>

    if (motor1.controlType == TORQUE && motor1.torqueType == CURRENT)
 800ba30:	4bb0      	ldr	r3, [pc, #704]	@ (800bcf4 <motorInit+0x324>)
 800ba32:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d12d      	bne.n	800ba96 <motorInit+0xc6>
 800ba3a:	4bae      	ldr	r3, [pc, #696]	@ (800bcf4 <motorInit+0x324>)
 800ba3c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d128      	bne.n	800ba96 <motorInit+0xc6>
    {
        float kp, ki;
        kp = 500.0f;
 800ba44:	4bb1      	ldr	r3, [pc, #708]	@ (800bd0c <motorInit+0x33c>)
 800ba46:	617b      	str	r3, [r7, #20]
        ki = 50.0f;
 800ba48:	4bb1      	ldr	r3, [pc, #708]	@ (800bd10 <motorInit+0x340>)
 800ba4a:	613b      	str	r3, [r7, #16]
        pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800ba4c:	4ba9      	ldr	r3, [pc, #676]	@ (800bcf4 <motorInit+0x324>)
 800ba4e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ba52:	eef0 2a67 	vmov.f32	s5, s15
 800ba56:	ed9f 2aaf 	vldr	s4, [pc, #700]	@ 800bd14 <motorInit+0x344>
 800ba5a:	eddf 1aaf 	vldr	s3, [pc, #700]	@ 800bd18 <motorInit+0x348>
 800ba5e:	ed9f 1aae 	vldr	s2, [pc, #696]	@ 800bd18 <motorInit+0x348>
 800ba62:	edd7 0a04 	vldr	s1, [r7, #16]
 800ba66:	ed97 0a05 	vldr	s0, [r7, #20]
 800ba6a:	48ac      	ldr	r0, [pc, #688]	@ (800bd1c <motorInit+0x34c>)
 800ba6c:	f7ff fd04 	bl	800b478 <pidInit>
        pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800ba70:	4ba0      	ldr	r3, [pc, #640]	@ (800bcf4 <motorInit+0x324>)
 800ba72:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ba76:	eef0 2a67 	vmov.f32	s5, s15
 800ba7a:	ed9f 2aa6 	vldr	s4, [pc, #664]	@ 800bd14 <motorInit+0x344>
 800ba7e:	eddf 1aa6 	vldr	s3, [pc, #664]	@ 800bd18 <motorInit+0x348>
 800ba82:	ed9f 1aa5 	vldr	s2, [pc, #660]	@ 800bd18 <motorInit+0x348>
 800ba86:	edd7 0a04 	vldr	s1, [r7, #16]
 800ba8a:	ed97 0a05 	vldr	s0, [r7, #20]
 800ba8e:	48a4      	ldr	r0, [pc, #656]	@ (800bd20 <motorInit+0x350>)
 800ba90:	f7ff fcf2 	bl	800b478 <pidInit>
    {
 800ba94:	e0c0      	b.n	800bc18 <motorInit+0x248>
    }
    else if (motor1.controlType == VELOCITY)
 800ba96:	4b97      	ldr	r3, [pc, #604]	@ (800bcf4 <motorInit+0x324>)
 800ba98:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800ba9c:	2b02      	cmp	r3, #2
 800ba9e:	d152      	bne.n	800bb46 <motorInit+0x176>
    {
        if (motor1.torqueType == CURRENT)
 800baa0:	4b94      	ldr	r3, [pc, #592]	@ (800bcf4 <motorInit+0x324>)
 800baa2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d13a      	bne.n	800bb20 <motorInit+0x150>
        {
            pidInit(&motor1.velocityPID, 0.02, 0.01, 0, 0, CURRENT_MAX, motor1.Ts);
 800baaa:	4b92      	ldr	r3, [pc, #584]	@ (800bcf4 <motorInit+0x324>)
 800baac:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bab0:	eef0 2a67 	vmov.f32	s5, s15
 800bab4:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800bab8:	eddf 1a97 	vldr	s3, [pc, #604]	@ 800bd18 <motorInit+0x348>
 800babc:	ed9f 1a96 	vldr	s2, [pc, #600]	@ 800bd18 <motorInit+0x348>
 800bac0:	eddf 0a98 	vldr	s1, [pc, #608]	@ 800bd24 <motorInit+0x354>
 800bac4:	ed9f 0a98 	vldr	s0, [pc, #608]	@ 800bd28 <motorInit+0x358>
 800bac8:	4898      	ldr	r0, [pc, #608]	@ (800bd2c <motorInit+0x35c>)
 800baca:	f7ff fcd5 	bl	800b478 <pidInit>

            float kp, ki;
            kp = 500.0f;
 800bace:	4b8f      	ldr	r3, [pc, #572]	@ (800bd0c <motorInit+0x33c>)
 800bad0:	607b      	str	r3, [r7, #4]
            ki = 50.0f;
 800bad2:	4b8f      	ldr	r3, [pc, #572]	@ (800bd10 <motorInit+0x340>)
 800bad4:	603b      	str	r3, [r7, #0]
            pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800bad6:	4b87      	ldr	r3, [pc, #540]	@ (800bcf4 <motorInit+0x324>)
 800bad8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800badc:	eef0 2a67 	vmov.f32	s5, s15
 800bae0:	ed9f 2a8c 	vldr	s4, [pc, #560]	@ 800bd14 <motorInit+0x344>
 800bae4:	eddf 1a8c 	vldr	s3, [pc, #560]	@ 800bd18 <motorInit+0x348>
 800bae8:	ed9f 1a8b 	vldr	s2, [pc, #556]	@ 800bd18 <motorInit+0x348>
 800baec:	edd7 0a00 	vldr	s1, [r7]
 800baf0:	ed97 0a01 	vldr	s0, [r7, #4]
 800baf4:	4889      	ldr	r0, [pc, #548]	@ (800bd1c <motorInit+0x34c>)
 800baf6:	f7ff fcbf 	bl	800b478 <pidInit>
            pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800bafa:	4b7e      	ldr	r3, [pc, #504]	@ (800bcf4 <motorInit+0x324>)
 800bafc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bb00:	eef0 2a67 	vmov.f32	s5, s15
 800bb04:	ed9f 2a83 	vldr	s4, [pc, #524]	@ 800bd14 <motorInit+0x344>
 800bb08:	eddf 1a83 	vldr	s3, [pc, #524]	@ 800bd18 <motorInit+0x348>
 800bb0c:	ed9f 1a82 	vldr	s2, [pc, #520]	@ 800bd18 <motorInit+0x348>
 800bb10:	edd7 0a00 	vldr	s1, [r7]
 800bb14:	ed97 0a01 	vldr	s0, [r7, #4]
 800bb18:	4881      	ldr	r0, [pc, #516]	@ (800bd20 <motorInit+0x350>)
 800bb1a:	f7ff fcad 	bl	800b478 <pidInit>
 800bb1e:	e07b      	b.n	800bc18 <motorInit+0x248>
        }
        else
        {
            pidInit(&motor1.velocityPID, 0.15, 0.05, 0, 0, UqMAX, motor1.Ts);
 800bb20:	4b74      	ldr	r3, [pc, #464]	@ (800bcf4 <motorInit+0x324>)
 800bb22:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bb26:	eef0 2a67 	vmov.f32	s5, s15
 800bb2a:	ed9f 2a7a 	vldr	s4, [pc, #488]	@ 800bd14 <motorInit+0x344>
 800bb2e:	eddf 1a7a 	vldr	s3, [pc, #488]	@ 800bd18 <motorInit+0x348>
 800bb32:	ed9f 1a79 	vldr	s2, [pc, #484]	@ 800bd18 <motorInit+0x348>
 800bb36:	eddf 0a7e 	vldr	s1, [pc, #504]	@ 800bd30 <motorInit+0x360>
 800bb3a:	ed9f 0a7e 	vldr	s0, [pc, #504]	@ 800bd34 <motorInit+0x364>
 800bb3e:	487b      	ldr	r0, [pc, #492]	@ (800bd2c <motorInit+0x35c>)
 800bb40:	f7ff fc9a 	bl	800b478 <pidInit>
 800bb44:	e068      	b.n	800bc18 <motorInit+0x248>
        }
    }
    else if (motor1.controlType == ANGLE)
 800bb46:	4b6b      	ldr	r3, [pc, #428]	@ (800bcf4 <motorInit+0x324>)
 800bb48:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800bb4c:	2b03      	cmp	r3, #3
 800bb4e:	d163      	bne.n	800bc18 <motorInit+0x248>
    {
        if (motor1.torqueType == CURRENT)
 800bb50:	4b68      	ldr	r3, [pc, #416]	@ (800bcf4 <motorInit+0x324>)
 800bb52:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800bb56:	2b01      	cmp	r3, #1
 800bb58:	d14c      	bne.n	800bbf4 <motorInit+0x224>
        {
            pidInit(&motor1.anglePID, 2, 0, 0, 0, MAX_VELOCITY, motor1.Ts);
 800bb5a:	4b66      	ldr	r3, [pc, #408]	@ (800bcf4 <motorInit+0x324>)
 800bb5c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bb60:	eef0 2a67 	vmov.f32	s5, s15
 800bb64:	ed9f 2a74 	vldr	s4, [pc, #464]	@ 800bd38 <motorInit+0x368>
 800bb68:	eddf 1a6b 	vldr	s3, [pc, #428]	@ 800bd18 <motorInit+0x348>
 800bb6c:	ed9f 1a6a 	vldr	s2, [pc, #424]	@ 800bd18 <motorInit+0x348>
 800bb70:	eddf 0a69 	vldr	s1, [pc, #420]	@ 800bd18 <motorInit+0x348>
 800bb74:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800bb78:	4870      	ldr	r0, [pc, #448]	@ (800bd3c <motorInit+0x36c>)
 800bb7a:	f7ff fc7d 	bl	800b478 <pidInit>

            pidInit(&motor1.velocityPID, -0.02, -0.01, 0, 0, CURRENT_MAX, motor1.Ts);
 800bb7e:	4b5d      	ldr	r3, [pc, #372]	@ (800bcf4 <motorInit+0x324>)
 800bb80:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bb84:	eef0 2a67 	vmov.f32	s5, s15
 800bb88:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800bb8c:	eddf 1a62 	vldr	s3, [pc, #392]	@ 800bd18 <motorInit+0x348>
 800bb90:	ed9f 1a61 	vldr	s2, [pc, #388]	@ 800bd18 <motorInit+0x348>
 800bb94:	eddf 0a6a 	vldr	s1, [pc, #424]	@ 800bd40 <motorInit+0x370>
 800bb98:	ed9f 0a6a 	vldr	s0, [pc, #424]	@ 800bd44 <motorInit+0x374>
 800bb9c:	4863      	ldr	r0, [pc, #396]	@ (800bd2c <motorInit+0x35c>)
 800bb9e:	f7ff fc6b 	bl	800b478 <pidInit>

            // pidInit(&motor1.anglePID, -0.001, -0.0001, 0, 0, CURRENT_MAX / 2, motor1.Ts);

            float kp, ki;
            kp = -200;
 800bba2:	4b69      	ldr	r3, [pc, #420]	@ (800bd48 <motorInit+0x378>)
 800bba4:	60fb      	str	r3, [r7, #12]
            ki = -20;
 800bba6:	4b69      	ldr	r3, [pc, #420]	@ (800bd4c <motorInit+0x37c>)
 800bba8:	60bb      	str	r3, [r7, #8]
            pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800bbaa:	4b52      	ldr	r3, [pc, #328]	@ (800bcf4 <motorInit+0x324>)
 800bbac:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bbb0:	eef0 2a67 	vmov.f32	s5, s15
 800bbb4:	ed9f 2a57 	vldr	s4, [pc, #348]	@ 800bd14 <motorInit+0x344>
 800bbb8:	eddf 1a57 	vldr	s3, [pc, #348]	@ 800bd18 <motorInit+0x348>
 800bbbc:	ed9f 1a56 	vldr	s2, [pc, #344]	@ 800bd18 <motorInit+0x348>
 800bbc0:	edd7 0a02 	vldr	s1, [r7, #8]
 800bbc4:	ed97 0a03 	vldr	s0, [r7, #12]
 800bbc8:	4854      	ldr	r0, [pc, #336]	@ (800bd1c <motorInit+0x34c>)
 800bbca:	f7ff fc55 	bl	800b478 <pidInit>
            pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800bbce:	4b49      	ldr	r3, [pc, #292]	@ (800bcf4 <motorInit+0x324>)
 800bbd0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bbd4:	eef0 2a67 	vmov.f32	s5, s15
 800bbd8:	ed9f 2a4e 	vldr	s4, [pc, #312]	@ 800bd14 <motorInit+0x344>
 800bbdc:	eddf 1a4e 	vldr	s3, [pc, #312]	@ 800bd18 <motorInit+0x348>
 800bbe0:	ed9f 1a4d 	vldr	s2, [pc, #308]	@ 800bd18 <motorInit+0x348>
 800bbe4:	edd7 0a02 	vldr	s1, [r7, #8]
 800bbe8:	ed97 0a03 	vldr	s0, [r7, #12]
 800bbec:	484c      	ldr	r0, [pc, #304]	@ (800bd20 <motorInit+0x350>)
 800bbee:	f7ff fc43 	bl	800b478 <pidInit>
 800bbf2:	e011      	b.n	800bc18 <motorInit+0x248>
        }
        else
        {
            pidInit(&motor1.anglePID, 0.3, 0.001, 0, 0, UqMAX / 2, motor1.Ts);
 800bbf4:	4b3f      	ldr	r3, [pc, #252]	@ (800bcf4 <motorInit+0x324>)
 800bbf6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bbfa:	eef0 2a67 	vmov.f32	s5, s15
 800bbfe:	ed9f 2a54 	vldr	s4, [pc, #336]	@ 800bd50 <motorInit+0x380>
 800bc02:	eddf 1a45 	vldr	s3, [pc, #276]	@ 800bd18 <motorInit+0x348>
 800bc06:	ed9f 1a44 	vldr	s2, [pc, #272]	@ 800bd18 <motorInit+0x348>
 800bc0a:	eddf 0a52 	vldr	s1, [pc, #328]	@ 800bd54 <motorInit+0x384>
 800bc0e:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 800bd58 <motorInit+0x388>
 800bc12:	484a      	ldr	r0, [pc, #296]	@ (800bd3c <motorInit+0x36c>)
 800bc14:	f7ff fc30 	bl	800b478 <pidInit>
        }
    }

    lpfInit(&motor1.IqFilter, 0.05, motor1.Ts);
 800bc18:	4b36      	ldr	r3, [pc, #216]	@ (800bcf4 <motorInit+0x324>)
 800bc1a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bc1e:	eef0 0a67 	vmov.f32	s1, s15
 800bc22:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 800bd30 <motorInit+0x360>
 800bc26:	484d      	ldr	r0, [pc, #308]	@ (800bd5c <motorInit+0x38c>)
 800bc28:	f7ff faba 	bl	800b1a0 <lpfInit>
    lpfInit(&motor1.IdFilter, 0.05, motor1.Ts);
 800bc2c:	4b31      	ldr	r3, [pc, #196]	@ (800bcf4 <motorInit+0x324>)
 800bc2e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bc32:	eef0 0a67 	vmov.f32	s1, s15
 800bc36:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 800bd30 <motorInit+0x360>
 800bc3a:	4849      	ldr	r0, [pc, #292]	@ (800bd60 <motorInit+0x390>)
 800bc3c:	f7ff fab0 	bl	800b1a0 <lpfInit>
    lpfInit(&motor1.velocityFilter, 0.01, motor1.Ts);
 800bc40:	4b2c      	ldr	r3, [pc, #176]	@ (800bcf4 <motorInit+0x324>)
 800bc42:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bc46:	eef0 0a67 	vmov.f32	s1, s15
 800bc4a:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 800bd24 <motorInit+0x354>
 800bc4e:	4845      	ldr	r0, [pc, #276]	@ (800bd64 <motorInit+0x394>)
 800bc50:	f7ff faa6 	bl	800b1a0 <lpfInit>

#endif
    motor2.pole_pairs = 7;
 800bc54:	4b44      	ldr	r3, [pc, #272]	@ (800bd68 <motorInit+0x398>)
 800bc56:	2207      	movs	r2, #7
 800bc58:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    motor2.updatePwm = updatePwm2;
 800bc5c:	4b42      	ldr	r3, [pc, #264]	@ (800bd68 <motorInit+0x398>)
 800bc5e:	4a43      	ldr	r2, [pc, #268]	@ (800bd6c <motorInit+0x39c>)
 800bc60:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    motor2.startPwm = startPwm2;
 800bc64:	4b40      	ldr	r3, [pc, #256]	@ (800bd68 <motorInit+0x398>)
 800bc66:	4a42      	ldr	r2, [pc, #264]	@ (800bd70 <motorInit+0x3a0>)
 800bc68:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor2.stopPwm = stopPwm2;
 800bc6c:	4b3e      	ldr	r3, [pc, #248]	@ (800bd68 <motorInit+0x398>)
 800bc6e:	4a41      	ldr	r2, [pc, #260]	@ (800bd74 <motorInit+0x3a4>)
 800bc70:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    motor2.zeroElectricAngleOffSet = 0;
 800bc74:	4b3c      	ldr	r3, [pc, #240]	@ (800bd68 <motorInit+0x398>)
 800bc76:	f04f 0200 	mov.w	r2, #0
 800bc7a:	635a      	str	r2, [r3, #52]	@ 0x34
    motor2.Ts = 100 * 1e-6f;
 800bc7c:	4b3a      	ldr	r3, [pc, #232]	@ (800bd68 <motorInit+0x398>)
 800bc7e:	4a21      	ldr	r2, [pc, #132]	@ (800bd04 <motorInit+0x334>)
 800bc80:	62da      	str	r2, [r3, #44]	@ 0x2c
    motor2.torqueType = CURRENT;
 800bc82:	4b39      	ldr	r3, [pc, #228]	@ (800bd68 <motorInit+0x398>)
 800bc84:	2201      	movs	r2, #1
 800bc86:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    motor2.controlType = VELOCITY_OPEN_LOOP;
 800bc8a:	4b37      	ldr	r3, [pc, #220]	@ (800bd68 <motorInit+0x398>)
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

    motor2.state = MOTOR_CALIBRATE;
 800bc92:	4b35      	ldr	r3, [pc, #212]	@ (800bd68 <motorInit+0x398>)
 800bc94:	2200      	movs	r2, #0
 800bc96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    encoderInit(&motor2.magEncoder, motor1.Ts, _2_MT6701_GetRawAngle, UNKNOWN);
 800bc9a:	4b16      	ldr	r3, [pc, #88]	@ (800bcf4 <motorInit+0x324>)
 800bc9c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bca0:	2201      	movs	r2, #1
 800bca2:	4935      	ldr	r1, [pc, #212]	@ (800bd78 <motorInit+0x3a8>)
 800bca4:	eeb0 0a67 	vmov.f32	s0, s15
 800bca8:	482f      	ldr	r0, [pc, #188]	@ (800bd68 <motorInit+0x398>)
 800bcaa:	f7ff f9c4 	bl	800b036 <encoderInit>

    lpfInit(&motor2.IqFilter, 0.05, motor1.Ts);
 800bcae:	4b11      	ldr	r3, [pc, #68]	@ (800bcf4 <motorInit+0x324>)
 800bcb0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bcb4:	eef0 0a67 	vmov.f32	s1, s15
 800bcb8:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 800bd30 <motorInit+0x360>
 800bcbc:	482f      	ldr	r0, [pc, #188]	@ (800bd7c <motorInit+0x3ac>)
 800bcbe:	f7ff fa6f 	bl	800b1a0 <lpfInit>
    lpfInit(&motor2.IdFilter, 0.05, motor1.Ts);
 800bcc2:	4b0c      	ldr	r3, [pc, #48]	@ (800bcf4 <motorInit+0x324>)
 800bcc4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bcc8:	eef0 0a67 	vmov.f32	s1, s15
 800bccc:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 800bd30 <motorInit+0x360>
 800bcd0:	482b      	ldr	r0, [pc, #172]	@ (800bd80 <motorInit+0x3b0>)
 800bcd2:	f7ff fa65 	bl	800b1a0 <lpfInit>
    lpfInit(&motor2.velocityFilter, 0.01, motor1.Ts);
 800bcd6:	4b07      	ldr	r3, [pc, #28]	@ (800bcf4 <motorInit+0x324>)
 800bcd8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bcdc:	eef0 0a67 	vmov.f32	s1, s15
 800bce0:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 800bd24 <motorInit+0x354>
 800bce4:	4827      	ldr	r0, [pc, #156]	@ (800bd84 <motorInit+0x3b4>)
 800bce6:	f7ff fa5b 	bl	800b1a0 <lpfInit>
}
 800bcea:	bf00      	nop
 800bcec:	3718      	adds	r7, #24
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	2000066c 	.word	0x2000066c
 800bcf8:	0800c3d9 	.word	0x0800c3d9
 800bcfc:	0800c391 	.word	0x0800c391
 800bd00:	0800c3b5 	.word	0x0800c3b5
 800bd04:	38d1b717 	.word	0x38d1b717
 800bd08:	0800c285 	.word	0x0800c285
 800bd0c:	43fa0000 	.word	0x43fa0000
 800bd10:	42480000 	.word	0x42480000
 800bd14:	4093cd3a 	.word	0x4093cd3a
 800bd18:	00000000 	.word	0x00000000
 800bd1c:	200006d0 	.word	0x200006d0
 800bd20:	200006f4 	.word	0x200006f4
 800bd24:	3c23d70a 	.word	0x3c23d70a
 800bd28:	3ca3d70a 	.word	0x3ca3d70a
 800bd2c:	20000718 	.word	0x20000718
 800bd30:	3d4ccccd 	.word	0x3d4ccccd
 800bd34:	3e19999a 	.word	0x3e19999a
 800bd38:	43960000 	.word	0x43960000
 800bd3c:	2000073c 	.word	0x2000073c
 800bd40:	bc23d70a 	.word	0xbc23d70a
 800bd44:	bca3d70a 	.word	0xbca3d70a
 800bd48:	c3480000 	.word	0xc3480000
 800bd4c:	c1a00000 	.word	0xc1a00000
 800bd50:	4013cd3a 	.word	0x4013cd3a
 800bd54:	3a83126f 	.word	0x3a83126f
 800bd58:	3e99999a 	.word	0x3e99999a
 800bd5c:	20000760 	.word	0x20000760
 800bd60:	2000076c 	.word	0x2000076c
 800bd64:	20000778 	.word	0x20000778
 800bd68:	200007ac 	.word	0x200007ac
 800bd6c:	0800c455 	.word	0x0800c455
 800bd70:	0800c40d 	.word	0x0800c40d
 800bd74:	0800c431 	.word	0x0800c431
 800bd78:	0800c355 	.word	0x0800c355
 800bd7c:	200008a0 	.word	0x200008a0
 800bd80:	200008ac 	.word	0x200008ac
 800bd84:	200008b8 	.word	0x200008b8

0800bd88 <appInit>:
void appInit()
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	af00      	add	r7, sp, #0
    motorInit();
 800bd8c:	f7ff fe20 	bl	800b9d0 <motorInit>
    devState = WORK;
 800bd90:	4b02      	ldr	r3, [pc, #8]	@ (800bd9c <appInit+0x14>)
 800bd92:	2201      	movs	r2, #1
 800bd94:	701a      	strb	r2, [r3, #0]
    //     printLog("IMU_Init failed\n");
    // }
    // else
    //     init_quaternion();
    //    MPU6050_Init(); // MPU6050初始化
}
 800bd96:	bf00      	nop
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	2000008e 	.word	0x2000008e

0800bda0 <appRunning>:
static bool zeroReset, _1s;
void appRunning()
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b086      	sub	sp, #24
 800bda4:	af00      	add	r7, sp, #0
    _1s = getOneSecFlag();
 800bda6:	f000 fcf9 	bl	800c79c <getOneSecFlag>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	461a      	mov	r2, r3
 800bdae:	4b5e      	ldr	r3, [pc, #376]	@ (800bf28 <appRunning+0x188>)
 800bdb0:	701a      	strb	r2, [r3, #0]
    //  getKeyState(&keyState);
    // commander_run(&motor1);
    if (++flashCnt >= 10)
 800bdb2:	4b5e      	ldr	r3, [pc, #376]	@ (800bf2c <appRunning+0x18c>)
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	b2da      	uxtb	r2, r3
 800bdba:	4b5c      	ldr	r3, [pc, #368]	@ (800bf2c <appRunning+0x18c>)
 800bdbc:	701a      	strb	r2, [r3, #0]
 800bdbe:	4b5b      	ldr	r3, [pc, #364]	@ (800bf2c <appRunning+0x18c>)
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	2b09      	cmp	r3, #9
 800bdc4:	d902      	bls.n	800bdcc <appRunning+0x2c>
        flashCnt = 0;
 800bdc6:	4b59      	ldr	r3, [pc, #356]	@ (800bf2c <appRunning+0x18c>)
 800bdc8:	2200      	movs	r2, #0
 800bdca:	701a      	strb	r2, [r3, #0]

    ledOn = 0;
 800bdcc:	4b58      	ldr	r3, [pc, #352]	@ (800bf30 <appRunning+0x190>)
 800bdce:	2200      	movs	r2, #0
 800bdd0:	701a      	strb	r2, [r3, #0]

#if USE_COMM_TARGET == 0
    uint32_t Vpoten, adc_vbus;
    float Vbus, goalVelocity;
    HAL_ADC_Start(&hadc1);
 800bdd2:	4858      	ldr	r0, [pc, #352]	@ (800bf34 <appRunning+0x194>)
 800bdd4:	f7f6 ff7e 	bl	8002cd4 <HAL_ADC_Start>
    HAL_ADC_Start(&hadc2);
 800bdd8:	4857      	ldr	r0, [pc, #348]	@ (800bf38 <appRunning+0x198>)
 800bdda:	f7f6 ff7b 	bl	8002cd4 <HAL_ADC_Start>
    Vpoten = HAL_ADC_GetValue(&hadc1);
 800bdde:	4855      	ldr	r0, [pc, #340]	@ (800bf34 <appRunning+0x194>)
 800bde0:	f7f7 f834 	bl	8002e4c <HAL_ADC_GetValue>
 800bde4:	6178      	str	r0, [r7, #20]

     goalVelocity = map(Vpoten, 0, 4095, -MAX_VELOCITY, MAX_VELOCITY);
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	ee07 3a90 	vmov	s15, r3
 800bdec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdf0:	ed9f 2a52 	vldr	s4, [pc, #328]	@ 800bf3c <appRunning+0x19c>
 800bdf4:	eddf 1a52 	vldr	s3, [pc, #328]	@ 800bf40 <appRunning+0x1a0>
 800bdf8:	ed9f 1a52 	vldr	s2, [pc, #328]	@ 800bf44 <appRunning+0x1a4>
 800bdfc:	eddf 0a52 	vldr	s1, [pc, #328]	@ 800bf48 <appRunning+0x1a8>
 800be00:	eeb0 0a67 	vmov.f32	s0, s15
 800be04:	f000 fbd5 	bl	800c5b2 <map>
 800be08:	ed87 0a04 	vstr	s0, [r7, #16]

     goalVelocity = Vpoten / 4095.0f * MAX_VELOCITY;
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	ee07 3a90 	vmov	s15, r3
 800be12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800be16:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 800bf44 <appRunning+0x1a4>
 800be1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800be1e:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800bf3c <appRunning+0x19c>
 800be22:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be26:	edc7 7a04 	vstr	s15, [r7, #16]
     float goalTorqueV = map(Vpoten, 0, 4095, -UqMAX, UqMAX);
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	ee07 3a90 	vmov	s15, r3
 800be30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be34:	ed9f 2a45 	vldr	s4, [pc, #276]	@ 800bf4c <appRunning+0x1ac>
 800be38:	eddf 1a45 	vldr	s3, [pc, #276]	@ 800bf50 <appRunning+0x1b0>
 800be3c:	ed9f 1a41 	vldr	s2, [pc, #260]	@ 800bf44 <appRunning+0x1a4>
 800be40:	eddf 0a41 	vldr	s1, [pc, #260]	@ 800bf48 <appRunning+0x1a8>
 800be44:	eeb0 0a67 	vmov.f32	s0, s15
 800be48:	f000 fbb3 	bl	800c5b2 <map>
 800be4c:	ed87 0a03 	vstr	s0, [r7, #12]
     float goalTorqueC = map(Vpoten, 0, 4095, -CURRENT_MAX, CURRENT_MAX);
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	ee07 3a90 	vmov	s15, r3
 800be56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be5a:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800be5e:	eefe 1a00 	vmov.f32	s3, #224	@ 0xbf000000 -0.5
 800be62:	ed9f 1a38 	vldr	s2, [pc, #224]	@ 800bf44 <appRunning+0x1a4>
 800be66:	eddf 0a38 	vldr	s1, [pc, #224]	@ 800bf48 <appRunning+0x1a8>
 800be6a:	eeb0 0a67 	vmov.f32	s0, s15
 800be6e:	f000 fba0 	bl	800c5b2 <map>
 800be72:	ed87 0a02 	vstr	s0, [r7, #8]

     adc_vbus = HAL_ADC_GetValue(&hadc2);
 800be76:	4830      	ldr	r0, [pc, #192]	@ (800bf38 <appRunning+0x198>)
 800be78:	f7f6 ffe8 	bl	8002e4c <HAL_ADC_GetValue>
 800be7c:	6078      	str	r0, [r7, #4]

     Vbus = adc_vbus * 3.3f / 4096 * 26;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	ee07 3a90 	vmov	s15, r3
 800be84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be88:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800bf54 <appRunning+0x1b4>
 800be8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800be90:	eddf 6a31 	vldr	s13, [pc, #196]	@ 800bf58 <appRunning+0x1b8>
 800be94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800be98:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800be9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bea0:	edc7 7a00 	vstr	s15, [r7]

     if (motor1.controlType == VELOCITY || motor1.controlType == VELOCITY_OPEN_LOOP)
 800bea4:	4b2d      	ldr	r3, [pc, #180]	@ (800bf5c <appRunning+0x1bc>)
 800bea6:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800beaa:	2b02      	cmp	r3, #2
 800beac:	d004      	beq.n	800beb8 <appRunning+0x118>
 800beae:	4b2b      	ldr	r3, [pc, #172]	@ (800bf5c <appRunning+0x1bc>)
 800beb0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d103      	bne.n	800bec0 <appRunning+0x120>
     {
         motor1.target = goalVelocity;
 800beb8:	4a28      	ldr	r2, [pc, #160]	@ (800bf5c <appRunning+0x1bc>)
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	6313      	str	r3, [r2, #48]	@ 0x30
 800bebe:	e01f      	b.n	800bf00 <appRunning+0x160>
     }

    else if (motor1.controlType == ANGLE)
 800bec0:	4b26      	ldr	r3, [pc, #152]	@ (800bf5c <appRunning+0x1bc>)
 800bec2:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800bec6:	2b03      	cmp	r3, #3
 800bec8:	d109      	bne.n	800bede <appRunning+0x13e>
    {
        motor1.target = goalVelocity / 3;
 800beca:	ed97 7a04 	vldr	s14, [r7, #16]
 800bece:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 800bed2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bed6:	4b21      	ldr	r3, [pc, #132]	@ (800bf5c <appRunning+0x1bc>)
 800bed8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 800bedc:	e010      	b.n	800bf00 <appRunning+0x160>
    }
    else if (motor1.controlType == TORQUE)
 800bede:	4b1f      	ldr	r3, [pc, #124]	@ (800bf5c <appRunning+0x1bc>)
 800bee0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d10b      	bne.n	800bf00 <appRunning+0x160>
    {
        if (motor1.torqueType == VOLTAGE)
 800bee8:	4b1c      	ldr	r3, [pc, #112]	@ (800bf5c <appRunning+0x1bc>)
 800beea:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d103      	bne.n	800befa <appRunning+0x15a>
            motor1.target = goalTorqueV;
 800bef2:	4a1a      	ldr	r2, [pc, #104]	@ (800bf5c <appRunning+0x1bc>)
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	6313      	str	r3, [r2, #48]	@ 0x30
 800bef8:	e002      	b.n	800bf00 <appRunning+0x160>
        else
            motor1.target = goalTorqueC;
 800befa:	4a18      	ldr	r2, [pc, #96]	@ (800bf5c <appRunning+0x1bc>)
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	6313      	str	r3, [r2, #48]	@ 0x30
    //         motor1.target = goalTorqueV;
    //     else
    //         motor1.target = goalTorqueC;
    // }

    switch (devState)
 800bf00:	4b17      	ldr	r3, [pc, #92]	@ (800bf60 <appRunning+0x1c0>)
 800bf02:	781b      	ldrb	r3, [r3, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d002      	beq.n	800bf0e <appRunning+0x16e>
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d003      	beq.n	800bf14 <appRunning+0x174>
 800bf0c:	e005      	b.n	800bf1a <appRunning+0x17a>
    {
    case STANDBY:
        standingBy();
 800bf0e:	f000 f829 	bl	800bf64 <standingBy>
        break;
 800bf12:	e002      	b.n	800bf1a <appRunning+0x17a>

    case WORK:
        working();
 800bf14:	f000 f872 	bl	800bffc <working>
        break;
 800bf18:	bf00      	nop
    }

    LED_drive();
 800bf1a:	f000 f951 	bl	800c1c0 <LED_drive>
}
 800bf1e:	bf00      	nop
 800bf20:	3718      	adds	r7, #24
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	200008ed 	.word	0x200008ed
 800bf2c:	20000648 	.word	0x20000648
 800bf30:	20000955 	.word	0x20000955
 800bf34:	20000298 	.word	0x20000298
 800bf38:	20000304 	.word	0x20000304
 800bf3c:	43960000 	.word	0x43960000
 800bf40:	c3960000 	.word	0xc3960000
 800bf44:	457ff000 	.word	0x457ff000
 800bf48:	00000000 	.word	0x00000000
 800bf4c:	4093cd3a 	.word	0x4093cd3a
 800bf50:	c093cd3a 	.word	0xc093cd3a
 800bf54:	40533333 	.word	0x40533333
 800bf58:	45800000 	.word	0x45800000
 800bf5c:	2000066c 	.word	0x2000066c
 800bf60:	2000008e 	.word	0x2000008e

0800bf64 <standingBy>:
static void standingBy()
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	af00      	add	r7, sp, #0
    static uchar cnt;

    ledOn = 1;
 800bf68:	4b1d      	ldr	r3, [pc, #116]	@ (800bfe0 <standingBy+0x7c>)
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	701a      	strb	r2, [r3, #0]
    // setTorque(&motor1, 0, OPEN_LOOP_TORQUE, 0);
    if (zeroReset == 0)
 800bf6e:	4b1d      	ldr	r3, [pc, #116]	@ (800bfe4 <standingBy+0x80>)
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d109      	bne.n	800bf8a <standingBy+0x26>
    {
        goToZeroElecAngle(&motor1);
 800bf76:	481c      	ldr	r0, [pc, #112]	@ (800bfe8 <standingBy+0x84>)
 800bf78:	f7fe fb5a 	bl	800a630 <goToZeroElecAngle>
        goToZeroElecAngle(&motor2);
 800bf7c:	481b      	ldr	r0, [pc, #108]	@ (800bfec <standingBy+0x88>)
 800bf7e:	f7fe fb57 	bl	800a630 <goToZeroElecAngle>
        zeroReset = 1;
 800bf82:	4b18      	ldr	r3, [pc, #96]	@ (800bfe4 <standingBy+0x80>)
 800bf84:	2201      	movs	r2, #1
 800bf86:	701a      	strb	r2, [r3, #0]
 800bf88:	e007      	b.n	800bf9a <standingBy+0x36>
    }
    else
    {
        motor1.stopPwm();
 800bf8a:	4b17      	ldr	r3, [pc, #92]	@ (800bfe8 <standingBy+0x84>)
 800bf8c:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800bf90:	4798      	blx	r3
        motor2.stopPwm();
 800bf92:	4b16      	ldr	r3, [pc, #88]	@ (800bfec <standingBy+0x88>)
 800bf94:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800bf98:	4798      	blx	r3
    }

    if (++cnt >= 10)
 800bf9a:	4b15      	ldr	r3, [pc, #84]	@ (800bff0 <standingBy+0x8c>)
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	b2da      	uxtb	r2, r3
 800bfa2:	4b13      	ldr	r3, [pc, #76]	@ (800bff0 <standingBy+0x8c>)
 800bfa4:	701a      	strb	r2, [r3, #0]
 800bfa6:	4b12      	ldr	r3, [pc, #72]	@ (800bff0 <standingBy+0x8c>)
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	2b09      	cmp	r3, #9
 800bfac:	d915      	bls.n	800bfda <standingBy+0x76>
    {
        WORK_INIT;
 800bfae:	4b11      	ldr	r3, [pc, #68]	@ (800bff4 <standingBy+0x90>)
 800bfb0:	2201      	movs	r2, #1
 800bfb2:	701a      	strb	r2, [r3, #0]
 800bfb4:	4b10      	ldr	r3, [pc, #64]	@ (800bff8 <standingBy+0x94>)
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	701a      	strb	r2, [r3, #0]
 800bfba:	4b0b      	ldr	r3, [pc, #44]	@ (800bfe8 <standingBy+0x84>)
 800bfbc:	2202      	movs	r2, #2
 800bfbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800bfc2:	4b09      	ldr	r3, [pc, #36]	@ (800bfe8 <standingBy+0x84>)
 800bfc4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800bfc8:	4798      	blx	r3
 800bfca:	4b08      	ldr	r3, [pc, #32]	@ (800bfec <standingBy+0x88>)
 800bfcc:	2202      	movs	r2, #2
 800bfce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800bfd2:	4b06      	ldr	r3, [pc, #24]	@ (800bfec <standingBy+0x88>)
 800bfd4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800bfd8:	4798      	blx	r3
    }
}
 800bfda:	bf00      	nop
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	20000955 	.word	0x20000955
 800bfe4:	200008ec 	.word	0x200008ec
 800bfe8:	2000066c 	.word	0x2000066c
 800bfec:	200007ac 	.word	0x200007ac
 800bff0:	200008ee 	.word	0x200008ee
 800bff4:	2000008e 	.word	0x2000008e
 800bff8:	20000648 	.word	0x20000648

0800bffc <working>:

static void working(void)
{
 800bffc:	b480      	push	{r7}
 800bffe:	af00      	add	r7, sp, #0
    zeroReset = 0;
 800c000:	4b07      	ldr	r3, [pc, #28]	@ (800c020 <working+0x24>)
 800c002:	2200      	movs	r2, #0
 800c004:	701a      	strb	r2, [r3, #0]
    if (flashCnt < 5)
 800c006:	4b07      	ldr	r3, [pc, #28]	@ (800c024 <working+0x28>)
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	2b04      	cmp	r3, #4
 800c00c:	d802      	bhi.n	800c014 <working+0x18>
        ledOn = 1;
 800c00e:	4b06      	ldr	r3, [pc, #24]	@ (800c028 <working+0x2c>)
 800c010:	2201      	movs	r2, #1
 800c012:	701a      	strb	r2, [r3, #0]
    //        //     {
    //        //         bldcMotor.focTarget = 23;
    //        //     }
    //        // }
    //    }
}
 800c014:	bf00      	nop
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr
 800c01e:	bf00      	nop
 800c020:	200008ec 	.word	0x200008ec
 800c024:	20000648 	.word	0x20000648
 800c028:	20000955 	.word	0x20000955

0800c02c <HAL_ADCEx_InjectedConvCpltCallback>:
    // sprintf(txBuffer, "target:%.2f,velocity:%.2f,Uq%.2f,Ud%.2f,Iq:%.2f,Id:%.2f\n", motor1.target, motor1.magEncoder.velocity, motor1.Uq, motor1.Ud, motor1.Iq, motor1.Id);
    // sprintf(txBuffer, "offset_ia:%f offset_ib:%f, Ia:%f, Ib:%f\n", motor1.offset_ia, motor1.offset_ib, motor1.Ia, motor1.Ib);
}

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800c02c:	b5b0      	push	{r4, r5, r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_SET);
 800c034:	2201      	movs	r2, #1
 800c036:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800c03a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c03e:	f7f9 ff07 	bl	8005e50 <HAL_GPIO_WritePin>
    if (hadc == &hadc1)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	4a31      	ldr	r2, [pc, #196]	@ (800c10c <HAL_ADCEx_InjectedConvCpltCallback+0xe0>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d155      	bne.n	800c0f6 <HAL_ADCEx_InjectedConvCpltCallback+0xca>
    {
        static bool shift;
        shift = !shift;
 800c04a:	4b31      	ldr	r3, [pc, #196]	@ (800c110 <HAL_ADCEx_InjectedConvCpltCallback+0xe4>)
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	bf0c      	ite	eq
 800c052:	2301      	moveq	r3, #1
 800c054:	2300      	movne	r3, #0
 800c056:	b2db      	uxtb	r3, r3
 800c058:	461a      	mov	r2, r3
 800c05a:	4b2d      	ldr	r3, [pc, #180]	@ (800c110 <HAL_ADCEx_InjectedConvCpltCallback+0xe4>)
 800c05c:	701a      	strb	r2, [r3, #0]
        if (shift)
 800c05e:	4b2c      	ldr	r3, [pc, #176]	@ (800c110 <HAL_ADCEx_InjectedConvCpltCallback+0xe4>)
 800c060:	781b      	ldrb	r3, [r3, #0]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d00c      	beq.n	800c080 <HAL_ADCEx_InjectedConvCpltCallback+0x54>
        {
            foc(&motor1, hadc1.Instance->JDR1, hadc2.Instance->JDR1);
 800c066:	4b29      	ldr	r3, [pc, #164]	@ (800c10c <HAL_ADCEx_InjectedConvCpltCallback+0xe0>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 800c06e:	4b29      	ldr	r3, [pc, #164]	@ (800c114 <HAL_ADCEx_InjectedConvCpltCallback+0xe8>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c076:	461a      	mov	r2, r3
 800c078:	4827      	ldr	r0, [pc, #156]	@ (800c118 <HAL_ADCEx_InjectedConvCpltCallback+0xec>)
 800c07a:	f7fe fc45 	bl	800a908 <foc>
 800c07e:	e00b      	b.n	800c098 <HAL_ADCEx_InjectedConvCpltCallback+0x6c>
        }
        else
        {
            foc(&motor2, hadc1.Instance->JDR2, hadc2.Instance->JDR2);
 800c080:	4b22      	ldr	r3, [pc, #136]	@ (800c10c <HAL_ADCEx_InjectedConvCpltCallback+0xe0>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 800c088:	4b22      	ldr	r3, [pc, #136]	@ (800c114 <HAL_ADCEx_InjectedConvCpltCallback+0xe8>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c090:	461a      	mov	r2, r3
 800c092:	4822      	ldr	r0, [pc, #136]	@ (800c11c <HAL_ADCEx_InjectedConvCpltCallback+0xf0>)
 800c094:	f7fe fc38 	bl	800a908 <foc>
        }

        dealPer100us();
 800c098:	f000 faba 	bl	800c610 <dealPer100us>

#if SHOW_WAVE
        // #if SHOW_SVPWM
        load_data[0] = motor1.Ta;
 800c09c:	4b1e      	ldr	r3, [pc, #120]	@ (800c118 <HAL_ADCEx_InjectedConvCpltCallback+0xec>)
 800c09e:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 800c0a2:	4a1f      	ldr	r2, [pc, #124]	@ (800c120 <HAL_ADCEx_InjectedConvCpltCallback+0xf4>)
 800c0a4:	6013      	str	r3, [r2, #0]
        load_data[1] = motor1.Tb;
 800c0a6:	4b1c      	ldr	r3, [pc, #112]	@ (800c118 <HAL_ADCEx_InjectedConvCpltCallback+0xec>)
 800c0a8:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800c0ac:	4a1c      	ldr	r2, [pc, #112]	@ (800c120 <HAL_ADCEx_InjectedConvCpltCallback+0xf4>)
 800c0ae:	6053      	str	r3, [r2, #4]
        load_data[2] = motor1.Tc;
 800c0b0:	4b19      	ldr	r3, [pc, #100]	@ (800c118 <HAL_ADCEx_InjectedConvCpltCallback+0xec>)
 800c0b2:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800c0b6:	4a1a      	ldr	r2, [pc, #104]	@ (800c120 <HAL_ADCEx_InjectedConvCpltCallback+0xf4>)
 800c0b8:	6093      	str	r3, [r2, #8]
        load_data[3] = motor2.Ta;
 800c0ba:	4b18      	ldr	r3, [pc, #96]	@ (800c11c <HAL_ADCEx_InjectedConvCpltCallback+0xf0>)
 800c0bc:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 800c0c0:	4a17      	ldr	r2, [pc, #92]	@ (800c120 <HAL_ADCEx_InjectedConvCpltCallback+0xf4>)
 800c0c2:	60d3      	str	r3, [r2, #12]
        load_data[4] = motor2.Tb;
 800c0c4:	4b15      	ldr	r3, [pc, #84]	@ (800c11c <HAL_ADCEx_InjectedConvCpltCallback+0xf0>)
 800c0c6:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800c0ca:	4a15      	ldr	r2, [pc, #84]	@ (800c120 <HAL_ADCEx_InjectedConvCpltCallback+0xf4>)
 800c0cc:	6113      	str	r3, [r2, #16]
        load_data[5] = motor2.Tc;
 800c0ce:	4b13      	ldr	r3, [pc, #76]	@ (800c11c <HAL_ADCEx_InjectedConvCpltCallback+0xf0>)
 800c0d0:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800c0d4:	4a12      	ldr	r2, [pc, #72]	@ (800c120 <HAL_ADCEx_InjectedConvCpltCallback+0xf4>)
 800c0d6:	6153      	str	r3, [r2, #20]
        // load_data[4] = motor1.Ibeta;

        // load_data[5] = motor1.Id;
        // load_data[6] = motor1.Iq;

        memcpy(tempData, (uint8_t *)&load_data, sizeof(load_data));
 800c0d8:	4a12      	ldr	r2, [pc, #72]	@ (800c124 <HAL_ADCEx_InjectedConvCpltCallback+0xf8>)
 800c0da:	4b11      	ldr	r3, [pc, #68]	@ (800c120 <HAL_ADCEx_InjectedConvCpltCallback+0xf4>)
 800c0dc:	4614      	mov	r4, r2
 800c0de:	461d      	mov	r5, r3
 800c0e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c0e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c0e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c0e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        HAL_UART_Transmit_DMA(&huart3, (uint8_t *)tempData, sizeof(tempData));
 800c0ec:	2224      	movs	r2, #36	@ 0x24
 800c0ee:	490d      	ldr	r1, [pc, #52]	@ (800c124 <HAL_ADCEx_InjectedConvCpltCallback+0xf8>)
 800c0f0:	480d      	ldr	r0, [pc, #52]	@ (800c128 <HAL_ADCEx_InjectedConvCpltCallback+0xfc>)
 800c0f2:	f7fc fdd7 	bl	8008ca4 <HAL_UART_Transmit_DMA>
#endif
    }
    HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800c0fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c100:	f7f9 fea6 	bl	8005e50 <HAL_GPIO_WritePin>
}
 800c104:	bf00      	nop
 800c106:	3708      	adds	r7, #8
 800c108:	46bd      	mov	sp, r7
 800c10a:	bdb0      	pop	{r4, r5, r7, pc}
 800c10c:	20000298 	.word	0x20000298
 800c110:	200008ef 	.word	0x200008ef
 800c114:	20000304 	.word	0x20000304
 800c118:	2000066c 	.word	0x2000066c
 800c11c:	200007ac 	.word	0x200007ac
 800c120:	2000064c 	.word	0x2000064c
 800c124:	20000090 	.word	0x20000090
 800c128:	200004ec 	.word	0x200004ec

0800c12c <HAL_UARTEx_RxEventCallback>:
bool toProcessData;
uint8_t aRxBuffer;
float comm1, comm2, comm3, comm4, comm5, comm6, comm7, comm8, comm9, comm10, comm11;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	460b      	mov	r3, r1
 800c136:	807b      	strh	r3, [r7, #2]
  if (huart == &huart3)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	4a07      	ldr	r2, [pc, #28]	@ (800c158 <HAL_UARTEx_RxEventCallback+0x2c>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d107      	bne.n	800c150 <HAL_UARTEx_RxEventCallback+0x24>
  {
    // HAL_UART_Transmit_DMA(&huart3, rxBuffer, Size);
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 800c140:	2264      	movs	r2, #100	@ 0x64
 800c142:	4906      	ldr	r1, [pc, #24]	@ (800c15c <HAL_UARTEx_RxEventCallback+0x30>)
 800c144:	4804      	ldr	r0, [pc, #16]	@ (800c158 <HAL_UARTEx_RxEventCallback+0x2c>)
 800c146:	f7fe f9d0 	bl	800a4ea <HAL_UARTEx_ReceiveToIdle_DMA>
    toProcessData = 1;
 800c14a:	4b05      	ldr	r3, [pc, #20]	@ (800c160 <HAL_UARTEx_RxEventCallback+0x34>)
 800c14c:	2201      	movs	r2, #1
 800c14e:	701a      	strb	r2, [r3, #0]
  }
}
 800c150:	bf00      	nop
 800c152:	3708      	adds	r7, #8
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}
 800c158:	200004ec 	.word	0x200004ec
 800c15c:	200008f0 	.word	0x200008f0
 800c160:	20000954 	.word	0x20000954

0800c164 <printLog>:

// DMA模式
void printLog(const char *format, ...)
{
 800c164:	b40f      	push	{r0, r1, r2, r3}
 800c166:	b580      	push	{r7, lr}
 800c168:	b0c2      	sub	sp, #264	@ 0x108
 800c16a:	af00      	add	r7, sp, #0
  // length = vsnprintf((char *)txBuffer, sizeof(txBuffer), (char *)format, args);
  // va_end(args);
  // HAL_UART_Transmit_DMA(&huart3, (const char *)txBuffer, length);

  va_list args;           // 定义参数列表变量
  va_start(args, format); // 从format位置开始接收参数表，放在arg里面
 800c16c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800c170:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

  char strBuf[256];               // 定义输出的字符串
  vsprintf(strBuf, format, args); // 使用vsprintf将格式化的数据写入缓冲区
 800c174:	1d3b      	adds	r3, r7, #4
 800c176:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800c17a:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 800c17e:	4618      	mov	r0, r3
 800c180:	f002 f8e4 	bl	800e34c <vsiprintf>
  va_end(args);                   // 结束可变参数的使用

  // 等待上次的数据发送完成，避免新的数据覆盖正在传输的数据，导致混乱
  while (HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX)
 800c184:	bf00      	nop
 800c186:	480d      	ldr	r0, [pc, #52]	@ (800c1bc <printLog+0x58>)
 800c188:	f7fd f962 	bl	8009450 <HAL_UART_GetState>
 800c18c:	4603      	mov	r3, r0
 800c18e:	2b21      	cmp	r3, #33	@ 0x21
 800c190:	d0f9      	beq.n	800c186 <printLog+0x22>
  {
    // Wait for DMA transfer to complete
  }
  HAL_UART_Transmit(&huart3, (uint8_t *)strBuf, strlen(strBuf), 1000);
 800c192:	1d3b      	adds	r3, r7, #4
 800c194:	4618      	mov	r0, r3
 800c196:	f7f4 f893 	bl	80002c0 <strlen>
 800c19a:	4603      	mov	r3, r0
 800c19c:	b29a      	uxth	r2, r3
 800c19e:	1d39      	adds	r1, r7, #4
 800c1a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c1a4:	4805      	ldr	r0, [pc, #20]	@ (800c1bc <printLog+0x58>)
 800c1a6:	f7fc fcef 	bl	8008b88 <HAL_UART_Transmit>
}
 800c1aa:	bf00      	nop
 800c1ac:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c1b6:	b004      	add	sp, #16
 800c1b8:	4770      	bx	lr
 800c1ba:	bf00      	nop
 800c1bc:	200004ec 	.word	0x200004ec

0800c1c0 <LED_drive>:
#include "led.h"

bool ledOn;

void LED_drive()
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	af00      	add	r7, sp, #0
    if (ledOn)
 800c1c4:	4b08      	ldr	r3, [pc, #32]	@ (800c1e8 <LED_drive+0x28>)
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d005      	beq.n	800c1d8 <LED_drive+0x18>
        LED_ON;
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	2101      	movs	r1, #1
 800c1d0:	4806      	ldr	r0, [pc, #24]	@ (800c1ec <LED_drive+0x2c>)
 800c1d2:	f7f9 fe3d 	bl	8005e50 <HAL_GPIO_WritePin>
    else
        LED_OFF;
}
 800c1d6:	e004      	b.n	800c1e2 <LED_drive+0x22>
        LED_OFF;
 800c1d8:	2201      	movs	r2, #1
 800c1da:	2101      	movs	r1, #1
 800c1dc:	4803      	ldr	r0, [pc, #12]	@ (800c1ec <LED_drive+0x2c>)
 800c1de:	f7f9 fe37 	bl	8005e50 <HAL_GPIO_WritePin>
}
 800c1e2:	bf00      	nop
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	20000955 	.word	0x20000955
 800c1ec:	48000400 	.word	0x48000400

0800c1f0 <_1_MT6701_GetRawData>:
#include "focLib.h"
#include "time_utils.h"
// static unsigned int rotationCount, rotationCount_Last;

uint16_t _1_MT6701_GetRawData(void)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af02      	add	r7, sp, #8
    uint16_t rawData;
    uint16_t txData = 0xFFFF;
 800c1f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c1fa:	803b      	strh	r3, [r7, #0]
    uint16_t timeOut = 200;
 800c1fc:	23c8      	movs	r3, #200	@ 0xc8
 800c1fe:	80fb      	strh	r3, [r7, #6]

    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800c200:	e009      	b.n	800c216 <_1_MT6701_GetRawData+0x26>
    {
        if (timeOut-- == 0)
 800c202:	88fb      	ldrh	r3, [r7, #6]
 800c204:	1e5a      	subs	r2, r3, #1
 800c206:	80fa      	strh	r2, [r7, #6]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d104      	bne.n	800c216 <_1_MT6701_GetRawData+0x26>
        {
            printLog("SPI state error!\r\n");
 800c20c:	4819      	ldr	r0, [pc, #100]	@ (800c274 <_1_MT6701_GetRawData+0x84>)
 800c20e:	f7ff ffa9 	bl	800c164 <printLog>
            return 0; // 在超时时直接返回，避免继续执行后续代码
 800c212:	2300      	movs	r3, #0
 800c214:	e02a      	b.n	800c26c <_1_MT6701_GetRawData+0x7c>
    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800c216:	4818      	ldr	r0, [pc, #96]	@ (800c278 <_1_MT6701_GetRawData+0x88>)
 800c218:	f7fb f8d1 	bl	80073be <HAL_SPI_GetState>
 800c21c:	4603      	mov	r3, r0
 800c21e:	2b01      	cmp	r3, #1
 800c220:	d1ef      	bne.n	800c202 <_1_MT6701_GetRawData+0x12>
        }
    }

    _1_MT6701_CS_Enable;
 800c222:	2200      	movs	r2, #0
 800c224:	2108      	movs	r1, #8
 800c226:	4815      	ldr	r0, [pc, #84]	@ (800c27c <_1_MT6701_GetRawData+0x8c>)
 800c228:	f7f9 fe12 	bl	8005e50 <HAL_GPIO_WritePin>

    HAL_StatusTypeDef spiStatus = HAL_SPI_TransmitReceive(&hspi3, (uint8_t *)&txData, (uint8_t *)&rawData, 1, HAL_MAX_DELAY);
 800c22c:	1cba      	adds	r2, r7, #2
 800c22e:	4639      	mov	r1, r7
 800c230:	f04f 33ff 	mov.w	r3, #4294967295
 800c234:	9300      	str	r3, [sp, #0]
 800c236:	2301      	movs	r3, #1
 800c238:	480f      	ldr	r0, [pc, #60]	@ (800c278 <_1_MT6701_GetRawData+0x88>)
 800c23a:	f7fa fe9e 	bl	8006f7a <HAL_SPI_TransmitReceive>
 800c23e:	4603      	mov	r3, r0
 800c240:	717b      	strb	r3, [r7, #5]
    if (spiStatus != HAL_OK)
 800c242:	797b      	ldrb	r3, [r7, #5]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d009      	beq.n	800c25c <_1_MT6701_GetRawData+0x6c>
    {
        _1_MT6701_CS_Disable;
 800c248:	2201      	movs	r2, #1
 800c24a:	2108      	movs	r1, #8
 800c24c:	480b      	ldr	r0, [pc, #44]	@ (800c27c <_1_MT6701_GetRawData+0x8c>)
 800c24e:	f7f9 fdff 	bl	8005e50 <HAL_GPIO_WritePin>
        printLog("MT6701 read data error!\r\n");
 800c252:	480b      	ldr	r0, [pc, #44]	@ (800c280 <_1_MT6701_GetRawData+0x90>)
 800c254:	f7ff ff86 	bl	800c164 <printLog>
        return 0; // 在SPI传输错误时直接返回，避免继续执行后续代码
 800c258:	2300      	movs	r3, #0
 800c25a:	e007      	b.n	800c26c <_1_MT6701_GetRawData+0x7c>
    }

    _1_MT6701_CS_Disable;
 800c25c:	2201      	movs	r2, #1
 800c25e:	2108      	movs	r1, #8
 800c260:	4806      	ldr	r0, [pc, #24]	@ (800c27c <_1_MT6701_GetRawData+0x8c>)
 800c262:	f7f9 fdf5 	bl	8005e50 <HAL_GPIO_WritePin>

    return rawData >> 2; // 取高14位的角度数据
 800c266:	887b      	ldrh	r3, [r7, #2]
 800c268:	089b      	lsrs	r3, r3, #2
 800c26a:	b29b      	uxth	r3, r3
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3708      	adds	r7, #8
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}
 800c274:	08011284 	.word	0x08011284
 800c278:	200003ec 	.word	0x200003ec
 800c27c:	48000400 	.word	0x48000400
 800c280:	08011298 	.word	0x08011298

0800c284 <_1_MT6701_GetRawAngle>:

// 将传感器原始数据转化为弧度
float _1_MT6701_GetRawAngle(void)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af00      	add	r7, sp, #0
    uint16_t rawData = _1_MT6701_GetRawData();
 800c28a:	f7ff ffb1 	bl	800c1f0 <_1_MT6701_GetRawData>
 800c28e:	4603      	mov	r3, r0
 800c290:	80fb      	strh	r3, [r7, #6]
    return (float)rawData / 16384.0f * _2PI;
 800c292:	88fb      	ldrh	r3, [r7, #6]
 800c294:	ee07 3a90 	vmov	s15, r3
 800c298:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c29c:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800c2b8 <_1_MT6701_GetRawAngle+0x34>
 800c2a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c2a4:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800c2bc <_1_MT6701_GetRawAngle+0x38>
 800c2a8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800c2ac:	eeb0 0a67 	vmov.f32	s0, s15
 800c2b0:	3708      	adds	r7, #8
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	46800000 	.word	0x46800000
 800c2bc:	40c90fdb 	.word	0x40c90fdb

0800c2c0 <_2_MT6701_GetRawData>:

uint16_t _2_MT6701_GetRawData(void)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b084      	sub	sp, #16
 800c2c4:	af02      	add	r7, sp, #8
    uint16_t rawData;
    uint16_t txData = 0xFFFF;
 800c2c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c2ca:	803b      	strh	r3, [r7, #0]
    uint16_t timeOut = 200;
 800c2cc:	23c8      	movs	r3, #200	@ 0xc8
 800c2ce:	80fb      	strh	r3, [r7, #6]

    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800c2d0:	e009      	b.n	800c2e6 <_2_MT6701_GetRawData+0x26>
    {
        if (timeOut-- == 0)
 800c2d2:	88fb      	ldrh	r3, [r7, #6]
 800c2d4:	1e5a      	subs	r2, r3, #1
 800c2d6:	80fa      	strh	r2, [r7, #6]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d104      	bne.n	800c2e6 <_2_MT6701_GetRawData+0x26>
        {
            printLog("SPI state error!\r\n");
 800c2dc:	4819      	ldr	r0, [pc, #100]	@ (800c344 <_2_MT6701_GetRawData+0x84>)
 800c2de:	f7ff ff41 	bl	800c164 <printLog>
            return 0; // 在超时时直接返回，避免继续执行后续代码
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	e02a      	b.n	800c33c <_2_MT6701_GetRawData+0x7c>
    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800c2e6:	4818      	ldr	r0, [pc, #96]	@ (800c348 <_2_MT6701_GetRawData+0x88>)
 800c2e8:	f7fb f869 	bl	80073be <HAL_SPI_GetState>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	d1ef      	bne.n	800c2d2 <_2_MT6701_GetRawData+0x12>
        }
    }

    _2_MT6701_CS_Enable;
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	2110      	movs	r1, #16
 800c2f6:	4815      	ldr	r0, [pc, #84]	@ (800c34c <_2_MT6701_GetRawData+0x8c>)
 800c2f8:	f7f9 fdaa 	bl	8005e50 <HAL_GPIO_WritePin>

    HAL_StatusTypeDef spiStatus = HAL_SPI_TransmitReceive(&hspi3, (uint8_t *)&txData, (uint8_t *)&rawData, 1, HAL_MAX_DELAY);
 800c2fc:	1cba      	adds	r2, r7, #2
 800c2fe:	4639      	mov	r1, r7
 800c300:	f04f 33ff 	mov.w	r3, #4294967295
 800c304:	9300      	str	r3, [sp, #0]
 800c306:	2301      	movs	r3, #1
 800c308:	480f      	ldr	r0, [pc, #60]	@ (800c348 <_2_MT6701_GetRawData+0x88>)
 800c30a:	f7fa fe36 	bl	8006f7a <HAL_SPI_TransmitReceive>
 800c30e:	4603      	mov	r3, r0
 800c310:	717b      	strb	r3, [r7, #5]
    if (spiStatus != HAL_OK)
 800c312:	797b      	ldrb	r3, [r7, #5]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d009      	beq.n	800c32c <_2_MT6701_GetRawData+0x6c>
    {
        _2_MT6701_CS_Disable;
 800c318:	2201      	movs	r2, #1
 800c31a:	2110      	movs	r1, #16
 800c31c:	480b      	ldr	r0, [pc, #44]	@ (800c34c <_2_MT6701_GetRawData+0x8c>)
 800c31e:	f7f9 fd97 	bl	8005e50 <HAL_GPIO_WritePin>
        printLog("MT6701 read data error!\r\n");
 800c322:	480b      	ldr	r0, [pc, #44]	@ (800c350 <_2_MT6701_GetRawData+0x90>)
 800c324:	f7ff ff1e 	bl	800c164 <printLog>
        return 0; // 在SPI传输错误时直接返回，避免继续执行后续代码
 800c328:	2300      	movs	r3, #0
 800c32a:	e007      	b.n	800c33c <_2_MT6701_GetRawData+0x7c>
    }

    _2_MT6701_CS_Disable;
 800c32c:	2201      	movs	r2, #1
 800c32e:	2110      	movs	r1, #16
 800c330:	4806      	ldr	r0, [pc, #24]	@ (800c34c <_2_MT6701_GetRawData+0x8c>)
 800c332:	f7f9 fd8d 	bl	8005e50 <HAL_GPIO_WritePin>

    return rawData >> 2; // 取高14位的角度数据
 800c336:	887b      	ldrh	r3, [r7, #2]
 800c338:	089b      	lsrs	r3, r3, #2
 800c33a:	b29b      	uxth	r3, r3
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3708      	adds	r7, #8
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}
 800c344:	08011284 	.word	0x08011284
 800c348:	200003ec 	.word	0x200003ec
 800c34c:	48000800 	.word	0x48000800
 800c350:	08011298 	.word	0x08011298

0800c354 <_2_MT6701_GetRawAngle>:

// 将传感器原始数据转化为弧度
float _2_MT6701_GetRawAngle(void)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b082      	sub	sp, #8
 800c358:	af00      	add	r7, sp, #0
    uint16_t rawData = _2_MT6701_GetRawData();
 800c35a:	f7ff ffb1 	bl	800c2c0 <_2_MT6701_GetRawData>
 800c35e:	4603      	mov	r3, r0
 800c360:	80fb      	strh	r3, [r7, #6]
    return (float)rawData / 16384.0f * _2PI;
 800c362:	88fb      	ldrh	r3, [r7, #6]
 800c364:	ee07 3a90 	vmov	s15, r3
 800c368:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c36c:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800c388 <_2_MT6701_GetRawAngle+0x34>
 800c370:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c374:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800c38c <_2_MT6701_GetRawAngle+0x38>
 800c378:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800c37c:	eeb0 0a67 	vmov.f32	s0, s15
 800c380:	3708      	adds	r7, #8
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	46800000 	.word	0x46800000
 800c38c:	40c90fdb 	.word	0x40c90fdb

0800c390 <startPwm1>:
#include "pwm.h"

 void startPwm1()
{
 800c390:	b580      	push	{r7, lr}
 800c392:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800c394:	2100      	movs	r1, #0
 800c396:	4806      	ldr	r0, [pc, #24]	@ (800c3b0 <startPwm1+0x20>)
 800c398:	f7fb faa0 	bl	80078dc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800c39c:	2104      	movs	r1, #4
 800c39e:	4804      	ldr	r0, [pc, #16]	@ (800c3b0 <startPwm1+0x20>)
 800c3a0:	f7fb fa9c 	bl	80078dc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800c3a4:	2108      	movs	r1, #8
 800c3a6:	4802      	ldr	r0, [pc, #8]	@ (800c3b0 <startPwm1+0x20>)
 800c3a8:	f7fb fa98 	bl	80078dc <HAL_TIM_PWM_Start>

}
 800c3ac:	bf00      	nop
 800c3ae:	bd80      	pop	{r7, pc}
 800c3b0:	200004a0 	.word	0x200004a0

0800c3b4 <stopPwm1>:
 void stopPwm1()
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 800c3b8:	2100      	movs	r1, #0
 800c3ba:	4806      	ldr	r0, [pc, #24]	@ (800c3d4 <stopPwm1+0x20>)
 800c3bc:	f7fb fb8e 	bl	8007adc <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 800c3c0:	2104      	movs	r1, #4
 800c3c2:	4804      	ldr	r0, [pc, #16]	@ (800c3d4 <stopPwm1+0x20>)
 800c3c4:	f7fb fb8a 	bl	8007adc <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 800c3c8:	2108      	movs	r1, #8
 800c3ca:	4802      	ldr	r0, [pc, #8]	@ (800c3d4 <stopPwm1+0x20>)
 800c3cc:	f7fb fb86 	bl	8007adc <HAL_TIM_PWM_Stop>

}
 800c3d0:	bf00      	nop
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	200004a0 	.word	0x200004a0

0800c3d8 <updatePwm1>:
 void updatePwm1(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b083      	sub	sp, #12
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	4603      	mov	r3, r0
 800c3e0:	80fb      	strh	r3, [r7, #6]
 800c3e2:	460b      	mov	r3, r1
 800c3e4:	80bb      	strh	r3, [r7, #4]
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	807b      	strh	r3, [r7, #2]
    TIM8->CCR1 = a;
 800c3ea:	4a07      	ldr	r2, [pc, #28]	@ (800c408 <updatePwm1+0x30>)
 800c3ec:	88fb      	ldrh	r3, [r7, #6]
 800c3ee:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM8->CCR2 = b;
 800c3f0:	4a05      	ldr	r2, [pc, #20]	@ (800c408 <updatePwm1+0x30>)
 800c3f2:	88bb      	ldrh	r3, [r7, #4]
 800c3f4:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM8->CCR3 = c;
 800c3f6:	4a04      	ldr	r2, [pc, #16]	@ (800c408 <updatePwm1+0x30>)
 800c3f8:	887b      	ldrh	r3, [r7, #2]
 800c3fa:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800c3fc:	bf00      	nop
 800c3fe:	370c      	adds	r7, #12
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr
 800c408:	40013400 	.word	0x40013400

0800c40c <startPwm2>:

 void startPwm2()
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800c410:	2100      	movs	r1, #0
 800c412:	4806      	ldr	r0, [pc, #24]	@ (800c42c <startPwm2+0x20>)
 800c414:	f7fb fa62 	bl	80078dc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800c418:	2104      	movs	r1, #4
 800c41a:	4804      	ldr	r0, [pc, #16]	@ (800c42c <startPwm2+0x20>)
 800c41c:	f7fb fa5e 	bl	80078dc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800c420:	2108      	movs	r1, #8
 800c422:	4802      	ldr	r0, [pc, #8]	@ (800c42c <startPwm2+0x20>)
 800c424:	f7fb fa5a 	bl	80078dc <HAL_TIM_PWM_Start>
 
}
 800c428:	bf00      	nop
 800c42a:	bd80      	pop	{r7, pc}
 800c42c:	20000454 	.word	0x20000454

0800c430 <stopPwm2>:
 void stopPwm2()
{
 800c430:	b580      	push	{r7, lr}
 800c432:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800c434:	2100      	movs	r1, #0
 800c436:	4806      	ldr	r0, [pc, #24]	@ (800c450 <stopPwm2+0x20>)
 800c438:	f7fb fb50 	bl	8007adc <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800c43c:	2104      	movs	r1, #4
 800c43e:	4804      	ldr	r0, [pc, #16]	@ (800c450 <stopPwm2+0x20>)
 800c440:	f7fb fb4c 	bl	8007adc <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800c444:	2108      	movs	r1, #8
 800c446:	4802      	ldr	r0, [pc, #8]	@ (800c450 <stopPwm2+0x20>)
 800c448:	f7fb fb48 	bl	8007adc <HAL_TIM_PWM_Stop>
 
}
 800c44c:	bf00      	nop
 800c44e:	bd80      	pop	{r7, pc}
 800c450:	20000454 	.word	0x20000454

0800c454 <updatePwm2>:

 void updatePwm2(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800c454:	b480      	push	{r7}
 800c456:	b083      	sub	sp, #12
 800c458:	af00      	add	r7, sp, #0
 800c45a:	4603      	mov	r3, r0
 800c45c:	80fb      	strh	r3, [r7, #6]
 800c45e:	460b      	mov	r3, r1
 800c460:	80bb      	strh	r3, [r7, #4]
 800c462:	4613      	mov	r3, r2
 800c464:	807b      	strh	r3, [r7, #2]
    TIM1->CCR1 = a;
 800c466:	4a07      	ldr	r2, [pc, #28]	@ (800c484 <updatePwm2+0x30>)
 800c468:	88fb      	ldrh	r3, [r7, #6]
 800c46a:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = b;
 800c46c:	4a05      	ldr	r2, [pc, #20]	@ (800c484 <updatePwm2+0x30>)
 800c46e:	88bb      	ldrh	r3, [r7, #4]
 800c470:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM1->CCR3 = c;
 800c472:	4a04      	ldr	r2, [pc, #16]	@ (800c484 <updatePwm2+0x30>)
 800c474:	887b      	ldrh	r3, [r7, #2]
 800c476:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800c478:	bf00      	nop
 800c47a:	370c      	adds	r7, #12
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr
 800c484:	40012c00 	.word	0x40012c00

0800c488 <delay>:
#include "time_utils.h"

__IO uint32_t m, tms, u, t0;

void delay(uint32_t _ms)
{
 800c488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c48c:	b082      	sub	sp, #8
 800c48e:	af00      	add	r7, sp, #0
 800c490:	6078      	str	r0, [r7, #4]
    t0 = micros();
 800c492:	f000 f83b 	bl	800c50c <micros>
 800c496:	4602      	mov	r2, r0
 800c498:	460b      	mov	r3, r1
 800c49a:	4b11      	ldr	r3, [pc, #68]	@ (800c4e0 <delay+0x58>)
 800c49c:	601a      	str	r2, [r3, #0]
    while (micros() - t0 < _ms * 1000)
 800c49e:	e000      	b.n	800c4a2 <delay+0x1a>
        __NOP();
 800c4a0:	bf00      	nop
    while (micros() - t0 < _ms * 1000)
 800c4a2:	f000 f833 	bl	800c50c <micros>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	490d      	ldr	r1, [pc, #52]	@ (800c4e0 <delay+0x58>)
 800c4ac:	6809      	ldr	r1, [r1, #0]
 800c4ae:	2000      	movs	r0, #0
 800c4b0:	468a      	mov	sl, r1
 800c4b2:	4683      	mov	fp, r0
 800c4b4:	ebb2 040a 	subs.w	r4, r2, sl
 800c4b8:	eb63 050b 	sbc.w	r5, r3, fp
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c4c2:	fb02 f303 	mul.w	r3, r2, r3
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	4698      	mov	r8, r3
 800c4ca:	4691      	mov	r9, r2
 800c4cc:	4544      	cmp	r4, r8
 800c4ce:	eb75 0309 	sbcs.w	r3, r5, r9
 800c4d2:	d3e5      	bcc.n	800c4a0 <delay+0x18>
}
 800c4d4:	bf00      	nop
 800c4d6:	bf00      	nop
 800c4d8:	3708      	adds	r7, #8
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c4e0:	20000964 	.word	0x20000964

0800c4e4 <LL_SYSTICK_IsActiveCounterFlag>:
    while (_us--)
        __NOP();
}

__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag()
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	af00      	add	r7, sp, #0
    return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 800c4e8:	4b07      	ldr	r3, [pc, #28]	@ (800c508 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c4f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c4f4:	bf0c      	ite	eq
 800c4f6:	2301      	moveq	r3, #1
 800c4f8:	2300      	movne	r3, #0
 800c4fa:	b2db      	uxtb	r3, r3
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr
 800c506:	bf00      	nop
 800c508:	e000e010 	.word	0xe000e010

0800c50c <micros>:

uint64_t micros()
{
 800c50c:	b5b0      	push	{r4, r5, r7, lr}
 800c50e:	af00      	add	r7, sp, #0
    /* Ensure COUNTFLAG is reset by reading SysTick control and status register */
    LL_SYSTICK_IsActiveCounterFlag();
 800c510:	f7ff ffe8 	bl	800c4e4 <LL_SYSTICK_IsActiveCounterFlag>
    m = HAL_GetTick();
 800c514:	f7f5 ffe8 	bl	80024e8 <HAL_GetTick>
 800c518:	4603      	mov	r3, r0
 800c51a:	4a1c      	ldr	r2, [pc, #112]	@ (800c58c <micros+0x80>)
 800c51c:	6013      	str	r3, [r2, #0]
    tms = SysTick->LOAD + 1;
 800c51e:	4b1c      	ldr	r3, [pc, #112]	@ (800c590 <micros+0x84>)
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	3301      	adds	r3, #1
 800c524:	4a1b      	ldr	r2, [pc, #108]	@ (800c594 <micros+0x88>)
 800c526:	6013      	str	r3, [r2, #0]
    u = tms - SysTick->VAL;
 800c528:	4b1a      	ldr	r3, [pc, #104]	@ (800c594 <micros+0x88>)
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	4b18      	ldr	r3, [pc, #96]	@ (800c590 <micros+0x84>)
 800c52e:	689b      	ldr	r3, [r3, #8]
 800c530:	1ad3      	subs	r3, r2, r3
 800c532:	4a19      	ldr	r2, [pc, #100]	@ (800c598 <micros+0x8c>)
 800c534:	6013      	str	r3, [r2, #0]
    if (LL_SYSTICK_IsActiveCounterFlag())
 800c536:	f7ff ffd5 	bl	800c4e4 <LL_SYSTICK_IsActiveCounterFlag>
 800c53a:	4603      	mov	r3, r0
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00b      	beq.n	800c558 <micros+0x4c>
    {
        m = HAL_GetTick();
 800c540:	f7f5 ffd2 	bl	80024e8 <HAL_GetTick>
 800c544:	4603      	mov	r3, r0
 800c546:	4a11      	ldr	r2, [pc, #68]	@ (800c58c <micros+0x80>)
 800c548:	6013      	str	r3, [r2, #0]
        u = tms - SysTick->VAL;
 800c54a:	4b12      	ldr	r3, [pc, #72]	@ (800c594 <micros+0x88>)
 800c54c:	681a      	ldr	r2, [r3, #0]
 800c54e:	4b10      	ldr	r3, [pc, #64]	@ (800c590 <micros+0x84>)
 800c550:	689b      	ldr	r3, [r3, #8]
 800c552:	1ad3      	subs	r3, r2, r3
 800c554:	4a10      	ldr	r2, [pc, #64]	@ (800c598 <micros+0x8c>)
 800c556:	6013      	str	r3, [r2, #0]
    }
    return (m * 1000 + (u * 1000) / tms);
 800c558:	4b0c      	ldr	r3, [pc, #48]	@ (800c58c <micros+0x80>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c560:	fb03 f202 	mul.w	r2, r3, r2
 800c564:	4b0c      	ldr	r3, [pc, #48]	@ (800c598 <micros+0x8c>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800c56c:	fb03 f101 	mul.w	r1, r3, r1
 800c570:	4b08      	ldr	r3, [pc, #32]	@ (800c594 <micros+0x88>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	fbb1 f3f3 	udiv	r3, r1, r3
 800c578:	4413      	add	r3, r2
 800c57a:	2200      	movs	r2, #0
 800c57c:	461c      	mov	r4, r3
 800c57e:	4615      	mov	r5, r2
 800c580:	4622      	mov	r2, r4
 800c582:	462b      	mov	r3, r5
}
 800c584:	4610      	mov	r0, r2
 800c586:	4619      	mov	r1, r3
 800c588:	bdb0      	pop	{r4, r5, r7, pc}
 800c58a:	bf00      	nop
 800c58c:	20000958 	.word	0x20000958
 800c590:	e000e010 	.word	0xe000e010
 800c594:	2000095c 	.word	0x2000095c
 800c598:	20000960 	.word	0x20000960

0800c59c <userMain>:
float HallTheta = 0;
float HallSpeed = 0;
uint8_t HallReadTemp = 0;
// static bool powerLost;
void userMain(void)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	af00      	add	r7, sp, #0
	// 	imu_ahrs_update();
	// 	imu_attitude_update();
	
	// }

	if (get100MsFlag())
 800c5a0:	f000 f910 	bl	800c7c4 <get100MsFlag>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d001      	beq.n	800c5ae <userMain+0x12>
	{
		appRunning();
 800c5aa:	f7ff fbf9 	bl	800bda0 <appRunning>
	if (get500MsFlag())
	{
		uartTx();
	}
#endif
}
 800c5ae:	bf00      	nop
 800c5b0:	bd80      	pop	{r7, pc}

0800c5b2 <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max)
{
 800c5b2:	b480      	push	{r7}
 800c5b4:	b087      	sub	sp, #28
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	ed87 0a05 	vstr	s0, [r7, #20]
 800c5bc:	edc7 0a04 	vstr	s1, [r7, #16]
 800c5c0:	ed87 1a03 	vstr	s2, [r7, #12]
 800c5c4:	edc7 1a02 	vstr	s3, [r7, #8]
 800c5c8:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800c5cc:	ed97 7a05 	vldr	s14, [r7, #20]
 800c5d0:	edd7 7a04 	vldr	s15, [r7, #16]
 800c5d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c5d8:	edd7 6a01 	vldr	s13, [r7, #4]
 800c5dc:	edd7 7a02 	vldr	s15, [r7, #8]
 800c5e0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c5e4:	ee67 6a27 	vmul.f32	s13, s14, s15
 800c5e8:	ed97 7a03 	vldr	s14, [r7, #12]
 800c5ec:	edd7 7a04 	vldr	s15, [r7, #16]
 800c5f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5f8:	edd7 7a02 	vldr	s15, [r7, #8]
 800c5fc:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800c600:	eeb0 0a67 	vmov.f32	s0, s15
 800c604:	371c      	adds	r7, #28
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr
	...

0800c610 <dealPer100us>:


static bool _5msFlag, _10msFlag, _20msFlag, _30msFlag, _100msFlag, _500msFlag, _1s;
static void dealPerMs();
void dealPer100us()
{
 800c610:	b580      	push	{r7, lr}
 800c612:	af00      	add	r7, sp, #0
    static unsigned char cnt;
    if (++cnt >= 10)
 800c614:	4b08      	ldr	r3, [pc, #32]	@ (800c638 <dealPer100us+0x28>)
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	3301      	adds	r3, #1
 800c61a:	b2da      	uxtb	r2, r3
 800c61c:	4b06      	ldr	r3, [pc, #24]	@ (800c638 <dealPer100us+0x28>)
 800c61e:	701a      	strb	r2, [r3, #0]
 800c620:	4b05      	ldr	r3, [pc, #20]	@ (800c638 <dealPer100us+0x28>)
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	2b09      	cmp	r3, #9
 800c626:	d904      	bls.n	800c632 <dealPer100us+0x22>
    {
        cnt = 0;
 800c628:	4b03      	ldr	r3, [pc, #12]	@ (800c638 <dealPer100us+0x28>)
 800c62a:	2200      	movs	r2, #0
 800c62c:	701a      	strb	r2, [r3, #0]
        dealPerMs();
 800c62e:	f000 f805 	bl	800c63c <dealPerMs>
    }

}
 800c632:	bf00      	nop
 800c634:	bd80      	pop	{r7, pc}
 800c636:	bf00      	nop
 800c638:	20000977 	.word	0x20000977

0800c63c <dealPerMs>:

static void dealPerMs()
{
 800c63c:	b480      	push	{r7}
 800c63e:	af00      	add	r7, sp, #0
    static unsigned char _5msCnt, _30msCnt, _20msCnt, _100msCnt, _10msCnt;
    static uint _500msCnt, _1000msCnt;
    if (++_5msCnt >= 5)
 800c640:	4b45      	ldr	r3, [pc, #276]	@ (800c758 <dealPerMs+0x11c>)
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	3301      	adds	r3, #1
 800c646:	b2da      	uxtb	r2, r3
 800c648:	4b43      	ldr	r3, [pc, #268]	@ (800c758 <dealPerMs+0x11c>)
 800c64a:	701a      	strb	r2, [r3, #0]
 800c64c:	4b42      	ldr	r3, [pc, #264]	@ (800c758 <dealPerMs+0x11c>)
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	2b04      	cmp	r3, #4
 800c652:	d905      	bls.n	800c660 <dealPerMs+0x24>
    {
        _5msCnt = 0;
 800c654:	4b40      	ldr	r3, [pc, #256]	@ (800c758 <dealPerMs+0x11c>)
 800c656:	2200      	movs	r2, #0
 800c658:	701a      	strb	r2, [r3, #0]
        _5msFlag = 1;
 800c65a:	4b40      	ldr	r3, [pc, #256]	@ (800c75c <dealPerMs+0x120>)
 800c65c:	2201      	movs	r2, #1
 800c65e:	701a      	strb	r2, [r3, #0]
    }

    if (++_10msCnt >= 10)
 800c660:	4b3f      	ldr	r3, [pc, #252]	@ (800c760 <dealPerMs+0x124>)
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	3301      	adds	r3, #1
 800c666:	b2da      	uxtb	r2, r3
 800c668:	4b3d      	ldr	r3, [pc, #244]	@ (800c760 <dealPerMs+0x124>)
 800c66a:	701a      	strb	r2, [r3, #0]
 800c66c:	4b3c      	ldr	r3, [pc, #240]	@ (800c760 <dealPerMs+0x124>)
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	2b09      	cmp	r3, #9
 800c672:	d905      	bls.n	800c680 <dealPerMs+0x44>
    {
        _10msCnt = 0;
 800c674:	4b3a      	ldr	r3, [pc, #232]	@ (800c760 <dealPerMs+0x124>)
 800c676:	2200      	movs	r2, #0
 800c678:	701a      	strb	r2, [r3, #0]
        _10msFlag = 1;
 800c67a:	4b3a      	ldr	r3, [pc, #232]	@ (800c764 <dealPerMs+0x128>)
 800c67c:	2201      	movs	r2, #1
 800c67e:	701a      	strb	r2, [r3, #0]
    }

    if (++_20msCnt >= 20)
 800c680:	4b39      	ldr	r3, [pc, #228]	@ (800c768 <dealPerMs+0x12c>)
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	3301      	adds	r3, #1
 800c686:	b2da      	uxtb	r2, r3
 800c688:	4b37      	ldr	r3, [pc, #220]	@ (800c768 <dealPerMs+0x12c>)
 800c68a:	701a      	strb	r2, [r3, #0]
 800c68c:	4b36      	ldr	r3, [pc, #216]	@ (800c768 <dealPerMs+0x12c>)
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	2b13      	cmp	r3, #19
 800c692:	d905      	bls.n	800c6a0 <dealPerMs+0x64>
    {
        _20msCnt = 0;
 800c694:	4b34      	ldr	r3, [pc, #208]	@ (800c768 <dealPerMs+0x12c>)
 800c696:	2200      	movs	r2, #0
 800c698:	701a      	strb	r2, [r3, #0]
        _20msFlag = 1;
 800c69a:	4b34      	ldr	r3, [pc, #208]	@ (800c76c <dealPerMs+0x130>)
 800c69c:	2201      	movs	r2, #1
 800c69e:	701a      	strb	r2, [r3, #0]
    }

    if (++_30msCnt >= 30)
 800c6a0:	4b33      	ldr	r3, [pc, #204]	@ (800c770 <dealPerMs+0x134>)
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	3301      	adds	r3, #1
 800c6a6:	b2da      	uxtb	r2, r3
 800c6a8:	4b31      	ldr	r3, [pc, #196]	@ (800c770 <dealPerMs+0x134>)
 800c6aa:	701a      	strb	r2, [r3, #0]
 800c6ac:	4b30      	ldr	r3, [pc, #192]	@ (800c770 <dealPerMs+0x134>)
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	2b1d      	cmp	r3, #29
 800c6b2:	d905      	bls.n	800c6c0 <dealPerMs+0x84>
    {
        _30msCnt = 0;
 800c6b4:	4b2e      	ldr	r3, [pc, #184]	@ (800c770 <dealPerMs+0x134>)
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	701a      	strb	r2, [r3, #0]
        _30msFlag = 1;
 800c6ba:	4b2e      	ldr	r3, [pc, #184]	@ (800c774 <dealPerMs+0x138>)
 800c6bc:	2201      	movs	r2, #1
 800c6be:	701a      	strb	r2, [r3, #0]
    }

    if (++_100msCnt >= 100)
 800c6c0:	4b2d      	ldr	r3, [pc, #180]	@ (800c778 <dealPerMs+0x13c>)
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	b2da      	uxtb	r2, r3
 800c6c8:	4b2b      	ldr	r3, [pc, #172]	@ (800c778 <dealPerMs+0x13c>)
 800c6ca:	701a      	strb	r2, [r3, #0]
 800c6cc:	4b2a      	ldr	r3, [pc, #168]	@ (800c778 <dealPerMs+0x13c>)
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	2b63      	cmp	r3, #99	@ 0x63
 800c6d2:	d905      	bls.n	800c6e0 <dealPerMs+0xa4>
    {
        _100msCnt = 0;
 800c6d4:	4b28      	ldr	r3, [pc, #160]	@ (800c778 <dealPerMs+0x13c>)
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	701a      	strb	r2, [r3, #0]
        _100msFlag = 1;
 800c6da:	4b28      	ldr	r3, [pc, #160]	@ (800c77c <dealPerMs+0x140>)
 800c6dc:	2201      	movs	r2, #1
 800c6de:	701a      	strb	r2, [r3, #0]
    }

    if (++_500msCnt >= 500)
 800c6e0:	4b27      	ldr	r3, [pc, #156]	@ (800c780 <dealPerMs+0x144>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	4a26      	ldr	r2, [pc, #152]	@ (800c780 <dealPerMs+0x144>)
 800c6e8:	6013      	str	r3, [r2, #0]
 800c6ea:	4b25      	ldr	r3, [pc, #148]	@ (800c780 <dealPerMs+0x144>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800c6f2:	d305      	bcc.n	800c700 <dealPerMs+0xc4>
    {
        _500msCnt = 0;
 800c6f4:	4b22      	ldr	r3, [pc, #136]	@ (800c780 <dealPerMs+0x144>)
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	601a      	str	r2, [r3, #0]
        _500msFlag = 1;
 800c6fa:	4b22      	ldr	r3, [pc, #136]	@ (800c784 <dealPerMs+0x148>)
 800c6fc:	2201      	movs	r2, #1
 800c6fe:	701a      	strb	r2, [r3, #0]
    }
    if (++_1000msCnt >= 1000)
 800c700:	4b21      	ldr	r3, [pc, #132]	@ (800c788 <dealPerMs+0x14c>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	3301      	adds	r3, #1
 800c706:	4a20      	ldr	r2, [pc, #128]	@ (800c788 <dealPerMs+0x14c>)
 800c708:	6013      	str	r3, [r2, #0]
 800c70a:	4b1f      	ldr	r3, [pc, #124]	@ (800c788 <dealPerMs+0x14c>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c712:	d305      	bcc.n	800c720 <dealPerMs+0xe4>
    {
        _1000msCnt = 0;
 800c714:	4b1c      	ldr	r3, [pc, #112]	@ (800c788 <dealPerMs+0x14c>)
 800c716:	2200      	movs	r2, #0
 800c718:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800c71a:	4b1c      	ldr	r3, [pc, #112]	@ (800c78c <dealPerMs+0x150>)
 800c71c:	2201      	movs	r2, #1
 800c71e:	701a      	strb	r2, [r3, #0]

        cnt = 0;
    }

#else
    frequence = 50;
 800c720:	4b1b      	ldr	r3, [pc, #108]	@ (800c790 <dealPerMs+0x154>)
 800c722:	2232      	movs	r2, #50	@ 0x32
 800c724:	701a      	strb	r2, [r3, #0]
            _1s = 1;
        }
    }
#else

    if (++_1msCnt >= 1000)
 800c726:	4b1b      	ldr	r3, [pc, #108]	@ (800c794 <dealPerMs+0x158>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	3301      	adds	r3, #1
 800c72c:	4a19      	ldr	r2, [pc, #100]	@ (800c794 <dealPerMs+0x158>)
 800c72e:	6013      	str	r3, [r2, #0]
 800c730:	4b18      	ldr	r3, [pc, #96]	@ (800c794 <dealPerMs+0x158>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c738:	d305      	bcc.n	800c746 <dealPerMs+0x10a>
    {
        _1msCnt = 0;
 800c73a:	4b16      	ldr	r3, [pc, #88]	@ (800c794 <dealPerMs+0x158>)
 800c73c:	2200      	movs	r2, #0
 800c73e:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800c740:	4b12      	ldr	r3, [pc, #72]	@ (800c78c <dealPerMs+0x150>)
 800c742:	2201      	movs	r2, #1
 800c744:	701a      	strb	r2, [r3, #0]
    }
#endif
#if SPEED_UP
    _1s = 1;
#endif
    _1ms = 1;
 800c746:	4b14      	ldr	r3, [pc, #80]	@ (800c798 <dealPerMs+0x15c>)
 800c748:	2201      	movs	r2, #1
 800c74a:	701a      	strb	r2, [r3, #0]




}
 800c74c:	bf00      	nop
 800c74e:	46bd      	mov	sp, r7
 800c750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c754:	4770      	bx	lr
 800c756:	bf00      	nop
 800c758:	20000978 	.word	0x20000978
 800c75c:	20000971 	.word	0x20000971
 800c760:	20000979 	.word	0x20000979
 800c764:	20000972 	.word	0x20000972
 800c768:	2000097a 	.word	0x2000097a
 800c76c:	20000973 	.word	0x20000973
 800c770:	2000097b 	.word	0x2000097b
 800c774:	20000974 	.word	0x20000974
 800c778:	2000097c 	.word	0x2000097c
 800c77c:	20000975 	.word	0x20000975
 800c780:	20000980 	.word	0x20000980
 800c784:	20000976 	.word	0x20000976
 800c788:	20000984 	.word	0x20000984
 800c78c:	20000968 	.word	0x20000968
 800c790:	20000970 	.word	0x20000970
 800c794:	2000096c 	.word	0x2000096c
 800c798:	20000969 	.word	0x20000969

0800c79c <getOneSecFlag>:
}



bool getOneSecFlag()
{
 800c79c:	b480      	push	{r7}
 800c79e:	af00      	add	r7, sp, #0
    if (_1s)
 800c7a0:	4b07      	ldr	r3, [pc, #28]	@ (800c7c0 <getOneSecFlag+0x24>)
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d004      	beq.n	800c7b2 <getOneSecFlag+0x16>
    {
        _1s = 0;
 800c7a8:	4b05      	ldr	r3, [pc, #20]	@ (800c7c0 <getOneSecFlag+0x24>)
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	701a      	strb	r2, [r3, #0]
        return 1;
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	e000      	b.n	800c7b4 <getOneSecFlag+0x18>
    }
    else
        return 0;
 800c7b2:	2300      	movs	r3, #0
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7bc:	4770      	bx	lr
 800c7be:	bf00      	nop
 800c7c0:	20000968 	.word	0x20000968

0800c7c4 <get100MsFlag>:
        return 0;
    }
}

bool get100MsFlag()
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	af00      	add	r7, sp, #0
    if (_100msFlag)
 800c7c8:	4b07      	ldr	r3, [pc, #28]	@ (800c7e8 <get100MsFlag+0x24>)
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d004      	beq.n	800c7da <get100MsFlag+0x16>
    {
        _100msFlag = 0;
 800c7d0:	4b05      	ldr	r3, [pc, #20]	@ (800c7e8 <get100MsFlag+0x24>)
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	701a      	strb	r2, [r3, #0]
        return 1;
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	e000      	b.n	800c7dc <get100MsFlag+0x18>
    }
    else
    {
        return 0;
 800c7da:	2300      	movs	r3, #0
    }
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e4:	4770      	bx	lr
 800c7e6:	bf00      	nop
 800c7e8:	20000975 	.word	0x20000975

0800c7ec <sulp>:
 800c7ec:	b570      	push	{r4, r5, r6, lr}
 800c7ee:	4604      	mov	r4, r0
 800c7f0:	460d      	mov	r5, r1
 800c7f2:	ec45 4b10 	vmov	d0, r4, r5
 800c7f6:	4616      	mov	r6, r2
 800c7f8:	f003 fc6e 	bl	80100d8 <__ulp>
 800c7fc:	ec51 0b10 	vmov	r0, r1, d0
 800c800:	b17e      	cbz	r6, 800c822 <sulp+0x36>
 800c802:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c806:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	dd09      	ble.n	800c822 <sulp+0x36>
 800c80e:	051b      	lsls	r3, r3, #20
 800c810:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c814:	2400      	movs	r4, #0
 800c816:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c81a:	4622      	mov	r2, r4
 800c81c:	462b      	mov	r3, r5
 800c81e:	f7f3 ff13 	bl	8000648 <__aeabi_dmul>
 800c822:	ec41 0b10 	vmov	d0, r0, r1
 800c826:	bd70      	pop	{r4, r5, r6, pc}

0800c828 <_strtod_l>:
 800c828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c82c:	b09f      	sub	sp, #124	@ 0x7c
 800c82e:	460c      	mov	r4, r1
 800c830:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c832:	2200      	movs	r2, #0
 800c834:	921a      	str	r2, [sp, #104]	@ 0x68
 800c836:	9005      	str	r0, [sp, #20]
 800c838:	f04f 0a00 	mov.w	sl, #0
 800c83c:	f04f 0b00 	mov.w	fp, #0
 800c840:	460a      	mov	r2, r1
 800c842:	9219      	str	r2, [sp, #100]	@ 0x64
 800c844:	7811      	ldrb	r1, [r2, #0]
 800c846:	292b      	cmp	r1, #43	@ 0x2b
 800c848:	d04a      	beq.n	800c8e0 <_strtod_l+0xb8>
 800c84a:	d838      	bhi.n	800c8be <_strtod_l+0x96>
 800c84c:	290d      	cmp	r1, #13
 800c84e:	d832      	bhi.n	800c8b6 <_strtod_l+0x8e>
 800c850:	2908      	cmp	r1, #8
 800c852:	d832      	bhi.n	800c8ba <_strtod_l+0x92>
 800c854:	2900      	cmp	r1, #0
 800c856:	d03b      	beq.n	800c8d0 <_strtod_l+0xa8>
 800c858:	2200      	movs	r2, #0
 800c85a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c85c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c85e:	782a      	ldrb	r2, [r5, #0]
 800c860:	2a30      	cmp	r2, #48	@ 0x30
 800c862:	f040 80b3 	bne.w	800c9cc <_strtod_l+0x1a4>
 800c866:	786a      	ldrb	r2, [r5, #1]
 800c868:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c86c:	2a58      	cmp	r2, #88	@ 0x58
 800c86e:	d16e      	bne.n	800c94e <_strtod_l+0x126>
 800c870:	9302      	str	r3, [sp, #8]
 800c872:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c874:	9301      	str	r3, [sp, #4]
 800c876:	ab1a      	add	r3, sp, #104	@ 0x68
 800c878:	9300      	str	r3, [sp, #0]
 800c87a:	4a8e      	ldr	r2, [pc, #568]	@ (800cab4 <_strtod_l+0x28c>)
 800c87c:	9805      	ldr	r0, [sp, #20]
 800c87e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c880:	a919      	add	r1, sp, #100	@ 0x64
 800c882:	f002 fd1b 	bl	800f2bc <__gethex>
 800c886:	f010 060f 	ands.w	r6, r0, #15
 800c88a:	4604      	mov	r4, r0
 800c88c:	d005      	beq.n	800c89a <_strtod_l+0x72>
 800c88e:	2e06      	cmp	r6, #6
 800c890:	d128      	bne.n	800c8e4 <_strtod_l+0xbc>
 800c892:	3501      	adds	r5, #1
 800c894:	2300      	movs	r3, #0
 800c896:	9519      	str	r5, [sp, #100]	@ 0x64
 800c898:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c89a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	f040 858e 	bne.w	800d3be <_strtod_l+0xb96>
 800c8a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8a4:	b1cb      	cbz	r3, 800c8da <_strtod_l+0xb2>
 800c8a6:	4652      	mov	r2, sl
 800c8a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c8ac:	ec43 2b10 	vmov	d0, r2, r3
 800c8b0:	b01f      	add	sp, #124	@ 0x7c
 800c8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b6:	2920      	cmp	r1, #32
 800c8b8:	d1ce      	bne.n	800c858 <_strtod_l+0x30>
 800c8ba:	3201      	adds	r2, #1
 800c8bc:	e7c1      	b.n	800c842 <_strtod_l+0x1a>
 800c8be:	292d      	cmp	r1, #45	@ 0x2d
 800c8c0:	d1ca      	bne.n	800c858 <_strtod_l+0x30>
 800c8c2:	2101      	movs	r1, #1
 800c8c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c8c6:	1c51      	adds	r1, r2, #1
 800c8c8:	9119      	str	r1, [sp, #100]	@ 0x64
 800c8ca:	7852      	ldrb	r2, [r2, #1]
 800c8cc:	2a00      	cmp	r2, #0
 800c8ce:	d1c5      	bne.n	800c85c <_strtod_l+0x34>
 800c8d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c8d2:	9419      	str	r4, [sp, #100]	@ 0x64
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	f040 8570 	bne.w	800d3ba <_strtod_l+0xb92>
 800c8da:	4652      	mov	r2, sl
 800c8dc:	465b      	mov	r3, fp
 800c8de:	e7e5      	b.n	800c8ac <_strtod_l+0x84>
 800c8e0:	2100      	movs	r1, #0
 800c8e2:	e7ef      	b.n	800c8c4 <_strtod_l+0x9c>
 800c8e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c8e6:	b13a      	cbz	r2, 800c8f8 <_strtod_l+0xd0>
 800c8e8:	2135      	movs	r1, #53	@ 0x35
 800c8ea:	a81c      	add	r0, sp, #112	@ 0x70
 800c8ec:	f003 fcee 	bl	80102cc <__copybits>
 800c8f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c8f2:	9805      	ldr	r0, [sp, #20]
 800c8f4:	f003 f8bc 	bl	800fa70 <_Bfree>
 800c8f8:	3e01      	subs	r6, #1
 800c8fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c8fc:	2e04      	cmp	r6, #4
 800c8fe:	d806      	bhi.n	800c90e <_strtod_l+0xe6>
 800c900:	e8df f006 	tbb	[pc, r6]
 800c904:	201d0314 	.word	0x201d0314
 800c908:	14          	.byte	0x14
 800c909:	00          	.byte	0x00
 800c90a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c90e:	05e1      	lsls	r1, r4, #23
 800c910:	bf48      	it	mi
 800c912:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c916:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c91a:	0d1b      	lsrs	r3, r3, #20
 800c91c:	051b      	lsls	r3, r3, #20
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d1bb      	bne.n	800c89a <_strtod_l+0x72>
 800c922:	f001 fd81 	bl	800e428 <__errno>
 800c926:	2322      	movs	r3, #34	@ 0x22
 800c928:	6003      	str	r3, [r0, #0]
 800c92a:	e7b6      	b.n	800c89a <_strtod_l+0x72>
 800c92c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c930:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c934:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c938:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c93c:	e7e7      	b.n	800c90e <_strtod_l+0xe6>
 800c93e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800cabc <_strtod_l+0x294>
 800c942:	e7e4      	b.n	800c90e <_strtod_l+0xe6>
 800c944:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c948:	f04f 3aff 	mov.w	sl, #4294967295
 800c94c:	e7df      	b.n	800c90e <_strtod_l+0xe6>
 800c94e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c950:	1c5a      	adds	r2, r3, #1
 800c952:	9219      	str	r2, [sp, #100]	@ 0x64
 800c954:	785b      	ldrb	r3, [r3, #1]
 800c956:	2b30      	cmp	r3, #48	@ 0x30
 800c958:	d0f9      	beq.n	800c94e <_strtod_l+0x126>
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d09d      	beq.n	800c89a <_strtod_l+0x72>
 800c95e:	2301      	movs	r3, #1
 800c960:	9309      	str	r3, [sp, #36]	@ 0x24
 800c962:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c964:	930c      	str	r3, [sp, #48]	@ 0x30
 800c966:	2300      	movs	r3, #0
 800c968:	9308      	str	r3, [sp, #32]
 800c96a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c96c:	461f      	mov	r7, r3
 800c96e:	220a      	movs	r2, #10
 800c970:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c972:	7805      	ldrb	r5, [r0, #0]
 800c974:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c978:	b2d9      	uxtb	r1, r3
 800c97a:	2909      	cmp	r1, #9
 800c97c:	d928      	bls.n	800c9d0 <_strtod_l+0x1a8>
 800c97e:	494e      	ldr	r1, [pc, #312]	@ (800cab8 <_strtod_l+0x290>)
 800c980:	2201      	movs	r2, #1
 800c982:	f001 fcf5 	bl	800e370 <strncmp>
 800c986:	2800      	cmp	r0, #0
 800c988:	d032      	beq.n	800c9f0 <_strtod_l+0x1c8>
 800c98a:	2000      	movs	r0, #0
 800c98c:	462a      	mov	r2, r5
 800c98e:	4681      	mov	r9, r0
 800c990:	463d      	mov	r5, r7
 800c992:	4603      	mov	r3, r0
 800c994:	2a65      	cmp	r2, #101	@ 0x65
 800c996:	d001      	beq.n	800c99c <_strtod_l+0x174>
 800c998:	2a45      	cmp	r2, #69	@ 0x45
 800c99a:	d114      	bne.n	800c9c6 <_strtod_l+0x19e>
 800c99c:	b91d      	cbnz	r5, 800c9a6 <_strtod_l+0x17e>
 800c99e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9a0:	4302      	orrs	r2, r0
 800c9a2:	d095      	beq.n	800c8d0 <_strtod_l+0xa8>
 800c9a4:	2500      	movs	r5, #0
 800c9a6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c9a8:	1c62      	adds	r2, r4, #1
 800c9aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800c9ac:	7862      	ldrb	r2, [r4, #1]
 800c9ae:	2a2b      	cmp	r2, #43	@ 0x2b
 800c9b0:	d077      	beq.n	800caa2 <_strtod_l+0x27a>
 800c9b2:	2a2d      	cmp	r2, #45	@ 0x2d
 800c9b4:	d07b      	beq.n	800caae <_strtod_l+0x286>
 800c9b6:	f04f 0c00 	mov.w	ip, #0
 800c9ba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c9be:	2909      	cmp	r1, #9
 800c9c0:	f240 8082 	bls.w	800cac8 <_strtod_l+0x2a0>
 800c9c4:	9419      	str	r4, [sp, #100]	@ 0x64
 800c9c6:	f04f 0800 	mov.w	r8, #0
 800c9ca:	e0a2      	b.n	800cb12 <_strtod_l+0x2ea>
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	e7c7      	b.n	800c960 <_strtod_l+0x138>
 800c9d0:	2f08      	cmp	r7, #8
 800c9d2:	bfd5      	itete	le
 800c9d4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c9d6:	9908      	ldrgt	r1, [sp, #32]
 800c9d8:	fb02 3301 	mlale	r3, r2, r1, r3
 800c9dc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c9e0:	f100 0001 	add.w	r0, r0, #1
 800c9e4:	bfd4      	ite	le
 800c9e6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c9e8:	9308      	strgt	r3, [sp, #32]
 800c9ea:	3701      	adds	r7, #1
 800c9ec:	9019      	str	r0, [sp, #100]	@ 0x64
 800c9ee:	e7bf      	b.n	800c970 <_strtod_l+0x148>
 800c9f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9f2:	1c5a      	adds	r2, r3, #1
 800c9f4:	9219      	str	r2, [sp, #100]	@ 0x64
 800c9f6:	785a      	ldrb	r2, [r3, #1]
 800c9f8:	b37f      	cbz	r7, 800ca5a <_strtod_l+0x232>
 800c9fa:	4681      	mov	r9, r0
 800c9fc:	463d      	mov	r5, r7
 800c9fe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ca02:	2b09      	cmp	r3, #9
 800ca04:	d912      	bls.n	800ca2c <_strtod_l+0x204>
 800ca06:	2301      	movs	r3, #1
 800ca08:	e7c4      	b.n	800c994 <_strtod_l+0x16c>
 800ca0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca0c:	1c5a      	adds	r2, r3, #1
 800ca0e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca10:	785a      	ldrb	r2, [r3, #1]
 800ca12:	3001      	adds	r0, #1
 800ca14:	2a30      	cmp	r2, #48	@ 0x30
 800ca16:	d0f8      	beq.n	800ca0a <_strtod_l+0x1e2>
 800ca18:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ca1c:	2b08      	cmp	r3, #8
 800ca1e:	f200 84d3 	bhi.w	800d3c8 <_strtod_l+0xba0>
 800ca22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca24:	930c      	str	r3, [sp, #48]	@ 0x30
 800ca26:	4681      	mov	r9, r0
 800ca28:	2000      	movs	r0, #0
 800ca2a:	4605      	mov	r5, r0
 800ca2c:	3a30      	subs	r2, #48	@ 0x30
 800ca2e:	f100 0301 	add.w	r3, r0, #1
 800ca32:	d02a      	beq.n	800ca8a <_strtod_l+0x262>
 800ca34:	4499      	add	r9, r3
 800ca36:	eb00 0c05 	add.w	ip, r0, r5
 800ca3a:	462b      	mov	r3, r5
 800ca3c:	210a      	movs	r1, #10
 800ca3e:	4563      	cmp	r3, ip
 800ca40:	d10d      	bne.n	800ca5e <_strtod_l+0x236>
 800ca42:	1c69      	adds	r1, r5, #1
 800ca44:	4401      	add	r1, r0
 800ca46:	4428      	add	r0, r5
 800ca48:	2808      	cmp	r0, #8
 800ca4a:	dc16      	bgt.n	800ca7a <_strtod_l+0x252>
 800ca4c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ca4e:	230a      	movs	r3, #10
 800ca50:	fb03 2300 	mla	r3, r3, r0, r2
 800ca54:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca56:	2300      	movs	r3, #0
 800ca58:	e018      	b.n	800ca8c <_strtod_l+0x264>
 800ca5a:	4638      	mov	r0, r7
 800ca5c:	e7da      	b.n	800ca14 <_strtod_l+0x1ec>
 800ca5e:	2b08      	cmp	r3, #8
 800ca60:	f103 0301 	add.w	r3, r3, #1
 800ca64:	dc03      	bgt.n	800ca6e <_strtod_l+0x246>
 800ca66:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ca68:	434e      	muls	r6, r1
 800ca6a:	960a      	str	r6, [sp, #40]	@ 0x28
 800ca6c:	e7e7      	b.n	800ca3e <_strtod_l+0x216>
 800ca6e:	2b10      	cmp	r3, #16
 800ca70:	bfde      	ittt	le
 800ca72:	9e08      	ldrle	r6, [sp, #32]
 800ca74:	434e      	mulle	r6, r1
 800ca76:	9608      	strle	r6, [sp, #32]
 800ca78:	e7e1      	b.n	800ca3e <_strtod_l+0x216>
 800ca7a:	280f      	cmp	r0, #15
 800ca7c:	dceb      	bgt.n	800ca56 <_strtod_l+0x22e>
 800ca7e:	9808      	ldr	r0, [sp, #32]
 800ca80:	230a      	movs	r3, #10
 800ca82:	fb03 2300 	mla	r3, r3, r0, r2
 800ca86:	9308      	str	r3, [sp, #32]
 800ca88:	e7e5      	b.n	800ca56 <_strtod_l+0x22e>
 800ca8a:	4629      	mov	r1, r5
 800ca8c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ca8e:	1c50      	adds	r0, r2, #1
 800ca90:	9019      	str	r0, [sp, #100]	@ 0x64
 800ca92:	7852      	ldrb	r2, [r2, #1]
 800ca94:	4618      	mov	r0, r3
 800ca96:	460d      	mov	r5, r1
 800ca98:	e7b1      	b.n	800c9fe <_strtod_l+0x1d6>
 800ca9a:	f04f 0900 	mov.w	r9, #0
 800ca9e:	2301      	movs	r3, #1
 800caa0:	e77d      	b.n	800c99e <_strtod_l+0x176>
 800caa2:	f04f 0c00 	mov.w	ip, #0
 800caa6:	1ca2      	adds	r2, r4, #2
 800caa8:	9219      	str	r2, [sp, #100]	@ 0x64
 800caaa:	78a2      	ldrb	r2, [r4, #2]
 800caac:	e785      	b.n	800c9ba <_strtod_l+0x192>
 800caae:	f04f 0c01 	mov.w	ip, #1
 800cab2:	e7f8      	b.n	800caa6 <_strtod_l+0x27e>
 800cab4:	0801130c 	.word	0x0801130c
 800cab8:	080112f4 	.word	0x080112f4
 800cabc:	7ff00000 	.word	0x7ff00000
 800cac0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cac2:	1c51      	adds	r1, r2, #1
 800cac4:	9119      	str	r1, [sp, #100]	@ 0x64
 800cac6:	7852      	ldrb	r2, [r2, #1]
 800cac8:	2a30      	cmp	r2, #48	@ 0x30
 800caca:	d0f9      	beq.n	800cac0 <_strtod_l+0x298>
 800cacc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cad0:	2908      	cmp	r1, #8
 800cad2:	f63f af78 	bhi.w	800c9c6 <_strtod_l+0x19e>
 800cad6:	3a30      	subs	r2, #48	@ 0x30
 800cad8:	920e      	str	r2, [sp, #56]	@ 0x38
 800cada:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cadc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cade:	f04f 080a 	mov.w	r8, #10
 800cae2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cae4:	1c56      	adds	r6, r2, #1
 800cae6:	9619      	str	r6, [sp, #100]	@ 0x64
 800cae8:	7852      	ldrb	r2, [r2, #1]
 800caea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800caee:	f1be 0f09 	cmp.w	lr, #9
 800caf2:	d939      	bls.n	800cb68 <_strtod_l+0x340>
 800caf4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800caf6:	1a76      	subs	r6, r6, r1
 800caf8:	2e08      	cmp	r6, #8
 800cafa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cafe:	dc03      	bgt.n	800cb08 <_strtod_l+0x2e0>
 800cb00:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cb02:	4588      	cmp	r8, r1
 800cb04:	bfa8      	it	ge
 800cb06:	4688      	movge	r8, r1
 800cb08:	f1bc 0f00 	cmp.w	ip, #0
 800cb0c:	d001      	beq.n	800cb12 <_strtod_l+0x2ea>
 800cb0e:	f1c8 0800 	rsb	r8, r8, #0
 800cb12:	2d00      	cmp	r5, #0
 800cb14:	d14e      	bne.n	800cbb4 <_strtod_l+0x38c>
 800cb16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cb18:	4308      	orrs	r0, r1
 800cb1a:	f47f aebe 	bne.w	800c89a <_strtod_l+0x72>
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	f47f aed6 	bne.w	800c8d0 <_strtod_l+0xa8>
 800cb24:	2a69      	cmp	r2, #105	@ 0x69
 800cb26:	d028      	beq.n	800cb7a <_strtod_l+0x352>
 800cb28:	dc25      	bgt.n	800cb76 <_strtod_l+0x34e>
 800cb2a:	2a49      	cmp	r2, #73	@ 0x49
 800cb2c:	d025      	beq.n	800cb7a <_strtod_l+0x352>
 800cb2e:	2a4e      	cmp	r2, #78	@ 0x4e
 800cb30:	f47f aece 	bne.w	800c8d0 <_strtod_l+0xa8>
 800cb34:	499b      	ldr	r1, [pc, #620]	@ (800cda4 <_strtod_l+0x57c>)
 800cb36:	a819      	add	r0, sp, #100	@ 0x64
 800cb38:	f002 fde2 	bl	800f700 <__match>
 800cb3c:	2800      	cmp	r0, #0
 800cb3e:	f43f aec7 	beq.w	800c8d0 <_strtod_l+0xa8>
 800cb42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	2b28      	cmp	r3, #40	@ 0x28
 800cb48:	d12e      	bne.n	800cba8 <_strtod_l+0x380>
 800cb4a:	4997      	ldr	r1, [pc, #604]	@ (800cda8 <_strtod_l+0x580>)
 800cb4c:	aa1c      	add	r2, sp, #112	@ 0x70
 800cb4e:	a819      	add	r0, sp, #100	@ 0x64
 800cb50:	f002 fdea 	bl	800f728 <__hexnan>
 800cb54:	2805      	cmp	r0, #5
 800cb56:	d127      	bne.n	800cba8 <_strtod_l+0x380>
 800cb58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cb5a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cb5e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cb62:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cb66:	e698      	b.n	800c89a <_strtod_l+0x72>
 800cb68:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cb6a:	fb08 2101 	mla	r1, r8, r1, r2
 800cb6e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cb72:	920e      	str	r2, [sp, #56]	@ 0x38
 800cb74:	e7b5      	b.n	800cae2 <_strtod_l+0x2ba>
 800cb76:	2a6e      	cmp	r2, #110	@ 0x6e
 800cb78:	e7da      	b.n	800cb30 <_strtod_l+0x308>
 800cb7a:	498c      	ldr	r1, [pc, #560]	@ (800cdac <_strtod_l+0x584>)
 800cb7c:	a819      	add	r0, sp, #100	@ 0x64
 800cb7e:	f002 fdbf 	bl	800f700 <__match>
 800cb82:	2800      	cmp	r0, #0
 800cb84:	f43f aea4 	beq.w	800c8d0 <_strtod_l+0xa8>
 800cb88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb8a:	4989      	ldr	r1, [pc, #548]	@ (800cdb0 <_strtod_l+0x588>)
 800cb8c:	3b01      	subs	r3, #1
 800cb8e:	a819      	add	r0, sp, #100	@ 0x64
 800cb90:	9319      	str	r3, [sp, #100]	@ 0x64
 800cb92:	f002 fdb5 	bl	800f700 <__match>
 800cb96:	b910      	cbnz	r0, 800cb9e <_strtod_l+0x376>
 800cb98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	9319      	str	r3, [sp, #100]	@ 0x64
 800cb9e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800cdc0 <_strtod_l+0x598>
 800cba2:	f04f 0a00 	mov.w	sl, #0
 800cba6:	e678      	b.n	800c89a <_strtod_l+0x72>
 800cba8:	4882      	ldr	r0, [pc, #520]	@ (800cdb4 <_strtod_l+0x58c>)
 800cbaa:	f001 fc79 	bl	800e4a0 <nan>
 800cbae:	ec5b ab10 	vmov	sl, fp, d0
 800cbb2:	e672      	b.n	800c89a <_strtod_l+0x72>
 800cbb4:	eba8 0309 	sub.w	r3, r8, r9
 800cbb8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cbba:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbbc:	2f00      	cmp	r7, #0
 800cbbe:	bf08      	it	eq
 800cbc0:	462f      	moveq	r7, r5
 800cbc2:	2d10      	cmp	r5, #16
 800cbc4:	462c      	mov	r4, r5
 800cbc6:	bfa8      	it	ge
 800cbc8:	2410      	movge	r4, #16
 800cbca:	f7f3 fcc3 	bl	8000554 <__aeabi_ui2d>
 800cbce:	2d09      	cmp	r5, #9
 800cbd0:	4682      	mov	sl, r0
 800cbd2:	468b      	mov	fp, r1
 800cbd4:	dc13      	bgt.n	800cbfe <_strtod_l+0x3d6>
 800cbd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	f43f ae5e 	beq.w	800c89a <_strtod_l+0x72>
 800cbde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbe0:	dd78      	ble.n	800ccd4 <_strtod_l+0x4ac>
 800cbe2:	2b16      	cmp	r3, #22
 800cbe4:	dc5f      	bgt.n	800cca6 <_strtod_l+0x47e>
 800cbe6:	4974      	ldr	r1, [pc, #464]	@ (800cdb8 <_strtod_l+0x590>)
 800cbe8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cbec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbf0:	4652      	mov	r2, sl
 800cbf2:	465b      	mov	r3, fp
 800cbf4:	f7f3 fd28 	bl	8000648 <__aeabi_dmul>
 800cbf8:	4682      	mov	sl, r0
 800cbfa:	468b      	mov	fp, r1
 800cbfc:	e64d      	b.n	800c89a <_strtod_l+0x72>
 800cbfe:	4b6e      	ldr	r3, [pc, #440]	@ (800cdb8 <_strtod_l+0x590>)
 800cc00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cc04:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cc08:	f7f3 fd1e 	bl	8000648 <__aeabi_dmul>
 800cc0c:	4682      	mov	sl, r0
 800cc0e:	9808      	ldr	r0, [sp, #32]
 800cc10:	468b      	mov	fp, r1
 800cc12:	f7f3 fc9f 	bl	8000554 <__aeabi_ui2d>
 800cc16:	4602      	mov	r2, r0
 800cc18:	460b      	mov	r3, r1
 800cc1a:	4650      	mov	r0, sl
 800cc1c:	4659      	mov	r1, fp
 800cc1e:	f7f3 fb5d 	bl	80002dc <__adddf3>
 800cc22:	2d0f      	cmp	r5, #15
 800cc24:	4682      	mov	sl, r0
 800cc26:	468b      	mov	fp, r1
 800cc28:	ddd5      	ble.n	800cbd6 <_strtod_l+0x3ae>
 800cc2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc2c:	1b2c      	subs	r4, r5, r4
 800cc2e:	441c      	add	r4, r3
 800cc30:	2c00      	cmp	r4, #0
 800cc32:	f340 8096 	ble.w	800cd62 <_strtod_l+0x53a>
 800cc36:	f014 030f 	ands.w	r3, r4, #15
 800cc3a:	d00a      	beq.n	800cc52 <_strtod_l+0x42a>
 800cc3c:	495e      	ldr	r1, [pc, #376]	@ (800cdb8 <_strtod_l+0x590>)
 800cc3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cc42:	4652      	mov	r2, sl
 800cc44:	465b      	mov	r3, fp
 800cc46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc4a:	f7f3 fcfd 	bl	8000648 <__aeabi_dmul>
 800cc4e:	4682      	mov	sl, r0
 800cc50:	468b      	mov	fp, r1
 800cc52:	f034 040f 	bics.w	r4, r4, #15
 800cc56:	d073      	beq.n	800cd40 <_strtod_l+0x518>
 800cc58:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cc5c:	dd48      	ble.n	800ccf0 <_strtod_l+0x4c8>
 800cc5e:	2400      	movs	r4, #0
 800cc60:	46a0      	mov	r8, r4
 800cc62:	940a      	str	r4, [sp, #40]	@ 0x28
 800cc64:	46a1      	mov	r9, r4
 800cc66:	9a05      	ldr	r2, [sp, #20]
 800cc68:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800cdc0 <_strtod_l+0x598>
 800cc6c:	2322      	movs	r3, #34	@ 0x22
 800cc6e:	6013      	str	r3, [r2, #0]
 800cc70:	f04f 0a00 	mov.w	sl, #0
 800cc74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	f43f ae0f 	beq.w	800c89a <_strtod_l+0x72>
 800cc7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc7e:	9805      	ldr	r0, [sp, #20]
 800cc80:	f002 fef6 	bl	800fa70 <_Bfree>
 800cc84:	9805      	ldr	r0, [sp, #20]
 800cc86:	4649      	mov	r1, r9
 800cc88:	f002 fef2 	bl	800fa70 <_Bfree>
 800cc8c:	9805      	ldr	r0, [sp, #20]
 800cc8e:	4641      	mov	r1, r8
 800cc90:	f002 feee 	bl	800fa70 <_Bfree>
 800cc94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cc96:	9805      	ldr	r0, [sp, #20]
 800cc98:	f002 feea 	bl	800fa70 <_Bfree>
 800cc9c:	9805      	ldr	r0, [sp, #20]
 800cc9e:	4621      	mov	r1, r4
 800cca0:	f002 fee6 	bl	800fa70 <_Bfree>
 800cca4:	e5f9      	b.n	800c89a <_strtod_l+0x72>
 800cca6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cca8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ccac:	4293      	cmp	r3, r2
 800ccae:	dbbc      	blt.n	800cc2a <_strtod_l+0x402>
 800ccb0:	4c41      	ldr	r4, [pc, #260]	@ (800cdb8 <_strtod_l+0x590>)
 800ccb2:	f1c5 050f 	rsb	r5, r5, #15
 800ccb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ccba:	4652      	mov	r2, sl
 800ccbc:	465b      	mov	r3, fp
 800ccbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccc2:	f7f3 fcc1 	bl	8000648 <__aeabi_dmul>
 800ccc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccc8:	1b5d      	subs	r5, r3, r5
 800ccca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ccce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ccd2:	e78f      	b.n	800cbf4 <_strtod_l+0x3cc>
 800ccd4:	3316      	adds	r3, #22
 800ccd6:	dba8      	blt.n	800cc2a <_strtod_l+0x402>
 800ccd8:	4b37      	ldr	r3, [pc, #220]	@ (800cdb8 <_strtod_l+0x590>)
 800ccda:	eba9 0808 	sub.w	r8, r9, r8
 800ccde:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cce2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cce6:	4650      	mov	r0, sl
 800cce8:	4659      	mov	r1, fp
 800ccea:	f7f3 fdd7 	bl	800089c <__aeabi_ddiv>
 800ccee:	e783      	b.n	800cbf8 <_strtod_l+0x3d0>
 800ccf0:	4b32      	ldr	r3, [pc, #200]	@ (800cdbc <_strtod_l+0x594>)
 800ccf2:	9308      	str	r3, [sp, #32]
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	1124      	asrs	r4, r4, #4
 800ccf8:	4650      	mov	r0, sl
 800ccfa:	4659      	mov	r1, fp
 800ccfc:	461e      	mov	r6, r3
 800ccfe:	2c01      	cmp	r4, #1
 800cd00:	dc21      	bgt.n	800cd46 <_strtod_l+0x51e>
 800cd02:	b10b      	cbz	r3, 800cd08 <_strtod_l+0x4e0>
 800cd04:	4682      	mov	sl, r0
 800cd06:	468b      	mov	fp, r1
 800cd08:	492c      	ldr	r1, [pc, #176]	@ (800cdbc <_strtod_l+0x594>)
 800cd0a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cd0e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cd12:	4652      	mov	r2, sl
 800cd14:	465b      	mov	r3, fp
 800cd16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd1a:	f7f3 fc95 	bl	8000648 <__aeabi_dmul>
 800cd1e:	4b28      	ldr	r3, [pc, #160]	@ (800cdc0 <_strtod_l+0x598>)
 800cd20:	460a      	mov	r2, r1
 800cd22:	400b      	ands	r3, r1
 800cd24:	4927      	ldr	r1, [pc, #156]	@ (800cdc4 <_strtod_l+0x59c>)
 800cd26:	428b      	cmp	r3, r1
 800cd28:	4682      	mov	sl, r0
 800cd2a:	d898      	bhi.n	800cc5e <_strtod_l+0x436>
 800cd2c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cd30:	428b      	cmp	r3, r1
 800cd32:	bf86      	itte	hi
 800cd34:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800cdc8 <_strtod_l+0x5a0>
 800cd38:	f04f 3aff 	movhi.w	sl, #4294967295
 800cd3c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cd40:	2300      	movs	r3, #0
 800cd42:	9308      	str	r3, [sp, #32]
 800cd44:	e07a      	b.n	800ce3c <_strtod_l+0x614>
 800cd46:	07e2      	lsls	r2, r4, #31
 800cd48:	d505      	bpl.n	800cd56 <_strtod_l+0x52e>
 800cd4a:	9b08      	ldr	r3, [sp, #32]
 800cd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd50:	f7f3 fc7a 	bl	8000648 <__aeabi_dmul>
 800cd54:	2301      	movs	r3, #1
 800cd56:	9a08      	ldr	r2, [sp, #32]
 800cd58:	3208      	adds	r2, #8
 800cd5a:	3601      	adds	r6, #1
 800cd5c:	1064      	asrs	r4, r4, #1
 800cd5e:	9208      	str	r2, [sp, #32]
 800cd60:	e7cd      	b.n	800ccfe <_strtod_l+0x4d6>
 800cd62:	d0ed      	beq.n	800cd40 <_strtod_l+0x518>
 800cd64:	4264      	negs	r4, r4
 800cd66:	f014 020f 	ands.w	r2, r4, #15
 800cd6a:	d00a      	beq.n	800cd82 <_strtod_l+0x55a>
 800cd6c:	4b12      	ldr	r3, [pc, #72]	@ (800cdb8 <_strtod_l+0x590>)
 800cd6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd72:	4650      	mov	r0, sl
 800cd74:	4659      	mov	r1, fp
 800cd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7a:	f7f3 fd8f 	bl	800089c <__aeabi_ddiv>
 800cd7e:	4682      	mov	sl, r0
 800cd80:	468b      	mov	fp, r1
 800cd82:	1124      	asrs	r4, r4, #4
 800cd84:	d0dc      	beq.n	800cd40 <_strtod_l+0x518>
 800cd86:	2c1f      	cmp	r4, #31
 800cd88:	dd20      	ble.n	800cdcc <_strtod_l+0x5a4>
 800cd8a:	2400      	movs	r4, #0
 800cd8c:	46a0      	mov	r8, r4
 800cd8e:	940a      	str	r4, [sp, #40]	@ 0x28
 800cd90:	46a1      	mov	r9, r4
 800cd92:	9a05      	ldr	r2, [sp, #20]
 800cd94:	2322      	movs	r3, #34	@ 0x22
 800cd96:	f04f 0a00 	mov.w	sl, #0
 800cd9a:	f04f 0b00 	mov.w	fp, #0
 800cd9e:	6013      	str	r3, [r2, #0]
 800cda0:	e768      	b.n	800cc74 <_strtod_l+0x44c>
 800cda2:	bf00      	nop
 800cda4:	08011355 	.word	0x08011355
 800cda8:	080112f8 	.word	0x080112f8
 800cdac:	0801134d 	.word	0x0801134d
 800cdb0:	0801138c 	.word	0x0801138c
 800cdb4:	0801171d 	.word	0x0801171d
 800cdb8:	08011508 	.word	0x08011508
 800cdbc:	080114e0 	.word	0x080114e0
 800cdc0:	7ff00000 	.word	0x7ff00000
 800cdc4:	7ca00000 	.word	0x7ca00000
 800cdc8:	7fefffff 	.word	0x7fefffff
 800cdcc:	f014 0310 	ands.w	r3, r4, #16
 800cdd0:	bf18      	it	ne
 800cdd2:	236a      	movne	r3, #106	@ 0x6a
 800cdd4:	4ea9      	ldr	r6, [pc, #676]	@ (800d07c <_strtod_l+0x854>)
 800cdd6:	9308      	str	r3, [sp, #32]
 800cdd8:	4650      	mov	r0, sl
 800cdda:	4659      	mov	r1, fp
 800cddc:	2300      	movs	r3, #0
 800cdde:	07e2      	lsls	r2, r4, #31
 800cde0:	d504      	bpl.n	800cdec <_strtod_l+0x5c4>
 800cde2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cde6:	f7f3 fc2f 	bl	8000648 <__aeabi_dmul>
 800cdea:	2301      	movs	r3, #1
 800cdec:	1064      	asrs	r4, r4, #1
 800cdee:	f106 0608 	add.w	r6, r6, #8
 800cdf2:	d1f4      	bne.n	800cdde <_strtod_l+0x5b6>
 800cdf4:	b10b      	cbz	r3, 800cdfa <_strtod_l+0x5d2>
 800cdf6:	4682      	mov	sl, r0
 800cdf8:	468b      	mov	fp, r1
 800cdfa:	9b08      	ldr	r3, [sp, #32]
 800cdfc:	b1b3      	cbz	r3, 800ce2c <_strtod_l+0x604>
 800cdfe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ce02:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	4659      	mov	r1, fp
 800ce0a:	dd0f      	ble.n	800ce2c <_strtod_l+0x604>
 800ce0c:	2b1f      	cmp	r3, #31
 800ce0e:	dd55      	ble.n	800cebc <_strtod_l+0x694>
 800ce10:	2b34      	cmp	r3, #52	@ 0x34
 800ce12:	bfde      	ittt	le
 800ce14:	f04f 33ff 	movle.w	r3, #4294967295
 800ce18:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ce1c:	4093      	lslle	r3, r2
 800ce1e:	f04f 0a00 	mov.w	sl, #0
 800ce22:	bfcc      	ite	gt
 800ce24:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ce28:	ea03 0b01 	andle.w	fp, r3, r1
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	2300      	movs	r3, #0
 800ce30:	4650      	mov	r0, sl
 800ce32:	4659      	mov	r1, fp
 800ce34:	f7f3 fe70 	bl	8000b18 <__aeabi_dcmpeq>
 800ce38:	2800      	cmp	r0, #0
 800ce3a:	d1a6      	bne.n	800cd8a <_strtod_l+0x562>
 800ce3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce3e:	9300      	str	r3, [sp, #0]
 800ce40:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ce42:	9805      	ldr	r0, [sp, #20]
 800ce44:	462b      	mov	r3, r5
 800ce46:	463a      	mov	r2, r7
 800ce48:	f002 fe7a 	bl	800fb40 <__s2b>
 800ce4c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ce4e:	2800      	cmp	r0, #0
 800ce50:	f43f af05 	beq.w	800cc5e <_strtod_l+0x436>
 800ce54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce56:	2a00      	cmp	r2, #0
 800ce58:	eba9 0308 	sub.w	r3, r9, r8
 800ce5c:	bfa8      	it	ge
 800ce5e:	2300      	movge	r3, #0
 800ce60:	9312      	str	r3, [sp, #72]	@ 0x48
 800ce62:	2400      	movs	r4, #0
 800ce64:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ce68:	9316      	str	r3, [sp, #88]	@ 0x58
 800ce6a:	46a0      	mov	r8, r4
 800ce6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce6e:	9805      	ldr	r0, [sp, #20]
 800ce70:	6859      	ldr	r1, [r3, #4]
 800ce72:	f002 fdbd 	bl	800f9f0 <_Balloc>
 800ce76:	4681      	mov	r9, r0
 800ce78:	2800      	cmp	r0, #0
 800ce7a:	f43f aef4 	beq.w	800cc66 <_strtod_l+0x43e>
 800ce7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce80:	691a      	ldr	r2, [r3, #16]
 800ce82:	3202      	adds	r2, #2
 800ce84:	f103 010c 	add.w	r1, r3, #12
 800ce88:	0092      	lsls	r2, r2, #2
 800ce8a:	300c      	adds	r0, #12
 800ce8c:	f001 faf9 	bl	800e482 <memcpy>
 800ce90:	ec4b ab10 	vmov	d0, sl, fp
 800ce94:	9805      	ldr	r0, [sp, #20]
 800ce96:	aa1c      	add	r2, sp, #112	@ 0x70
 800ce98:	a91b      	add	r1, sp, #108	@ 0x6c
 800ce9a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ce9e:	f003 f98b 	bl	80101b8 <__d2b>
 800cea2:	901a      	str	r0, [sp, #104]	@ 0x68
 800cea4:	2800      	cmp	r0, #0
 800cea6:	f43f aede 	beq.w	800cc66 <_strtod_l+0x43e>
 800ceaa:	9805      	ldr	r0, [sp, #20]
 800ceac:	2101      	movs	r1, #1
 800ceae:	f002 fedd 	bl	800fc6c <__i2b>
 800ceb2:	4680      	mov	r8, r0
 800ceb4:	b948      	cbnz	r0, 800ceca <_strtod_l+0x6a2>
 800ceb6:	f04f 0800 	mov.w	r8, #0
 800ceba:	e6d4      	b.n	800cc66 <_strtod_l+0x43e>
 800cebc:	f04f 32ff 	mov.w	r2, #4294967295
 800cec0:	fa02 f303 	lsl.w	r3, r2, r3
 800cec4:	ea03 0a0a 	and.w	sl, r3, sl
 800cec8:	e7b0      	b.n	800ce2c <_strtod_l+0x604>
 800ceca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cecc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cece:	2d00      	cmp	r5, #0
 800ced0:	bfab      	itete	ge
 800ced2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ced4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ced6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ced8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ceda:	bfac      	ite	ge
 800cedc:	18ef      	addge	r7, r5, r3
 800cede:	1b5e      	sublt	r6, r3, r5
 800cee0:	9b08      	ldr	r3, [sp, #32]
 800cee2:	1aed      	subs	r5, r5, r3
 800cee4:	4415      	add	r5, r2
 800cee6:	4b66      	ldr	r3, [pc, #408]	@ (800d080 <_strtod_l+0x858>)
 800cee8:	3d01      	subs	r5, #1
 800ceea:	429d      	cmp	r5, r3
 800ceec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cef0:	da50      	bge.n	800cf94 <_strtod_l+0x76c>
 800cef2:	1b5b      	subs	r3, r3, r5
 800cef4:	2b1f      	cmp	r3, #31
 800cef6:	eba2 0203 	sub.w	r2, r2, r3
 800cefa:	f04f 0101 	mov.w	r1, #1
 800cefe:	dc3d      	bgt.n	800cf7c <_strtod_l+0x754>
 800cf00:	fa01 f303 	lsl.w	r3, r1, r3
 800cf04:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cf06:	2300      	movs	r3, #0
 800cf08:	9310      	str	r3, [sp, #64]	@ 0x40
 800cf0a:	18bd      	adds	r5, r7, r2
 800cf0c:	9b08      	ldr	r3, [sp, #32]
 800cf0e:	42af      	cmp	r7, r5
 800cf10:	4416      	add	r6, r2
 800cf12:	441e      	add	r6, r3
 800cf14:	463b      	mov	r3, r7
 800cf16:	bfa8      	it	ge
 800cf18:	462b      	movge	r3, r5
 800cf1a:	42b3      	cmp	r3, r6
 800cf1c:	bfa8      	it	ge
 800cf1e:	4633      	movge	r3, r6
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	bfc2      	ittt	gt
 800cf24:	1aed      	subgt	r5, r5, r3
 800cf26:	1af6      	subgt	r6, r6, r3
 800cf28:	1aff      	subgt	r7, r7, r3
 800cf2a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	dd16      	ble.n	800cf5e <_strtod_l+0x736>
 800cf30:	4641      	mov	r1, r8
 800cf32:	9805      	ldr	r0, [sp, #20]
 800cf34:	461a      	mov	r2, r3
 800cf36:	f002 ff59 	bl	800fdec <__pow5mult>
 800cf3a:	4680      	mov	r8, r0
 800cf3c:	2800      	cmp	r0, #0
 800cf3e:	d0ba      	beq.n	800ceb6 <_strtod_l+0x68e>
 800cf40:	4601      	mov	r1, r0
 800cf42:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cf44:	9805      	ldr	r0, [sp, #20]
 800cf46:	f002 fea7 	bl	800fc98 <__multiply>
 800cf4a:	900e      	str	r0, [sp, #56]	@ 0x38
 800cf4c:	2800      	cmp	r0, #0
 800cf4e:	f43f ae8a 	beq.w	800cc66 <_strtod_l+0x43e>
 800cf52:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf54:	9805      	ldr	r0, [sp, #20]
 800cf56:	f002 fd8b 	bl	800fa70 <_Bfree>
 800cf5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf5c:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf5e:	2d00      	cmp	r5, #0
 800cf60:	dc1d      	bgt.n	800cf9e <_strtod_l+0x776>
 800cf62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	dd23      	ble.n	800cfb0 <_strtod_l+0x788>
 800cf68:	4649      	mov	r1, r9
 800cf6a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cf6c:	9805      	ldr	r0, [sp, #20]
 800cf6e:	f002 ff3d 	bl	800fdec <__pow5mult>
 800cf72:	4681      	mov	r9, r0
 800cf74:	b9e0      	cbnz	r0, 800cfb0 <_strtod_l+0x788>
 800cf76:	f04f 0900 	mov.w	r9, #0
 800cf7a:	e674      	b.n	800cc66 <_strtod_l+0x43e>
 800cf7c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cf80:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cf84:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cf88:	35e2      	adds	r5, #226	@ 0xe2
 800cf8a:	fa01 f305 	lsl.w	r3, r1, r5
 800cf8e:	9310      	str	r3, [sp, #64]	@ 0x40
 800cf90:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cf92:	e7ba      	b.n	800cf0a <_strtod_l+0x6e2>
 800cf94:	2300      	movs	r3, #0
 800cf96:	9310      	str	r3, [sp, #64]	@ 0x40
 800cf98:	2301      	movs	r3, #1
 800cf9a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cf9c:	e7b5      	b.n	800cf0a <_strtod_l+0x6e2>
 800cf9e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cfa0:	9805      	ldr	r0, [sp, #20]
 800cfa2:	462a      	mov	r2, r5
 800cfa4:	f002 ff7c 	bl	800fea0 <__lshift>
 800cfa8:	901a      	str	r0, [sp, #104]	@ 0x68
 800cfaa:	2800      	cmp	r0, #0
 800cfac:	d1d9      	bne.n	800cf62 <_strtod_l+0x73a>
 800cfae:	e65a      	b.n	800cc66 <_strtod_l+0x43e>
 800cfb0:	2e00      	cmp	r6, #0
 800cfb2:	dd07      	ble.n	800cfc4 <_strtod_l+0x79c>
 800cfb4:	4649      	mov	r1, r9
 800cfb6:	9805      	ldr	r0, [sp, #20]
 800cfb8:	4632      	mov	r2, r6
 800cfba:	f002 ff71 	bl	800fea0 <__lshift>
 800cfbe:	4681      	mov	r9, r0
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	d0d8      	beq.n	800cf76 <_strtod_l+0x74e>
 800cfc4:	2f00      	cmp	r7, #0
 800cfc6:	dd08      	ble.n	800cfda <_strtod_l+0x7b2>
 800cfc8:	4641      	mov	r1, r8
 800cfca:	9805      	ldr	r0, [sp, #20]
 800cfcc:	463a      	mov	r2, r7
 800cfce:	f002 ff67 	bl	800fea0 <__lshift>
 800cfd2:	4680      	mov	r8, r0
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	f43f ae46 	beq.w	800cc66 <_strtod_l+0x43e>
 800cfda:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cfdc:	9805      	ldr	r0, [sp, #20]
 800cfde:	464a      	mov	r2, r9
 800cfe0:	f002 ffe6 	bl	800ffb0 <__mdiff>
 800cfe4:	4604      	mov	r4, r0
 800cfe6:	2800      	cmp	r0, #0
 800cfe8:	f43f ae3d 	beq.w	800cc66 <_strtod_l+0x43e>
 800cfec:	68c3      	ldr	r3, [r0, #12]
 800cfee:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cff0:	2300      	movs	r3, #0
 800cff2:	60c3      	str	r3, [r0, #12]
 800cff4:	4641      	mov	r1, r8
 800cff6:	f002 ffbf 	bl	800ff78 <__mcmp>
 800cffa:	2800      	cmp	r0, #0
 800cffc:	da46      	bge.n	800d08c <_strtod_l+0x864>
 800cffe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d000:	ea53 030a 	orrs.w	r3, r3, sl
 800d004:	d16c      	bne.n	800d0e0 <_strtod_l+0x8b8>
 800d006:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d168      	bne.n	800d0e0 <_strtod_l+0x8b8>
 800d00e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d012:	0d1b      	lsrs	r3, r3, #20
 800d014:	051b      	lsls	r3, r3, #20
 800d016:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d01a:	d961      	bls.n	800d0e0 <_strtod_l+0x8b8>
 800d01c:	6963      	ldr	r3, [r4, #20]
 800d01e:	b913      	cbnz	r3, 800d026 <_strtod_l+0x7fe>
 800d020:	6923      	ldr	r3, [r4, #16]
 800d022:	2b01      	cmp	r3, #1
 800d024:	dd5c      	ble.n	800d0e0 <_strtod_l+0x8b8>
 800d026:	4621      	mov	r1, r4
 800d028:	2201      	movs	r2, #1
 800d02a:	9805      	ldr	r0, [sp, #20]
 800d02c:	f002 ff38 	bl	800fea0 <__lshift>
 800d030:	4641      	mov	r1, r8
 800d032:	4604      	mov	r4, r0
 800d034:	f002 ffa0 	bl	800ff78 <__mcmp>
 800d038:	2800      	cmp	r0, #0
 800d03a:	dd51      	ble.n	800d0e0 <_strtod_l+0x8b8>
 800d03c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d040:	9a08      	ldr	r2, [sp, #32]
 800d042:	0d1b      	lsrs	r3, r3, #20
 800d044:	051b      	lsls	r3, r3, #20
 800d046:	2a00      	cmp	r2, #0
 800d048:	d06b      	beq.n	800d122 <_strtod_l+0x8fa>
 800d04a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d04e:	d868      	bhi.n	800d122 <_strtod_l+0x8fa>
 800d050:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d054:	f67f ae9d 	bls.w	800cd92 <_strtod_l+0x56a>
 800d058:	4b0a      	ldr	r3, [pc, #40]	@ (800d084 <_strtod_l+0x85c>)
 800d05a:	4650      	mov	r0, sl
 800d05c:	4659      	mov	r1, fp
 800d05e:	2200      	movs	r2, #0
 800d060:	f7f3 faf2 	bl	8000648 <__aeabi_dmul>
 800d064:	4b08      	ldr	r3, [pc, #32]	@ (800d088 <_strtod_l+0x860>)
 800d066:	400b      	ands	r3, r1
 800d068:	4682      	mov	sl, r0
 800d06a:	468b      	mov	fp, r1
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	f47f ae05 	bne.w	800cc7c <_strtod_l+0x454>
 800d072:	9a05      	ldr	r2, [sp, #20]
 800d074:	2322      	movs	r3, #34	@ 0x22
 800d076:	6013      	str	r3, [r2, #0]
 800d078:	e600      	b.n	800cc7c <_strtod_l+0x454>
 800d07a:	bf00      	nop
 800d07c:	08011320 	.word	0x08011320
 800d080:	fffffc02 	.word	0xfffffc02
 800d084:	39500000 	.word	0x39500000
 800d088:	7ff00000 	.word	0x7ff00000
 800d08c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d090:	d165      	bne.n	800d15e <_strtod_l+0x936>
 800d092:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d094:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d098:	b35a      	cbz	r2, 800d0f2 <_strtod_l+0x8ca>
 800d09a:	4a9f      	ldr	r2, [pc, #636]	@ (800d318 <_strtod_l+0xaf0>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d12b      	bne.n	800d0f8 <_strtod_l+0x8d0>
 800d0a0:	9b08      	ldr	r3, [sp, #32]
 800d0a2:	4651      	mov	r1, sl
 800d0a4:	b303      	cbz	r3, 800d0e8 <_strtod_l+0x8c0>
 800d0a6:	4b9d      	ldr	r3, [pc, #628]	@ (800d31c <_strtod_l+0xaf4>)
 800d0a8:	465a      	mov	r2, fp
 800d0aa:	4013      	ands	r3, r2
 800d0ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d0b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d0b4:	d81b      	bhi.n	800d0ee <_strtod_l+0x8c6>
 800d0b6:	0d1b      	lsrs	r3, r3, #20
 800d0b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d0bc:	fa02 f303 	lsl.w	r3, r2, r3
 800d0c0:	4299      	cmp	r1, r3
 800d0c2:	d119      	bne.n	800d0f8 <_strtod_l+0x8d0>
 800d0c4:	4b96      	ldr	r3, [pc, #600]	@ (800d320 <_strtod_l+0xaf8>)
 800d0c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d102      	bne.n	800d0d2 <_strtod_l+0x8aa>
 800d0cc:	3101      	adds	r1, #1
 800d0ce:	f43f adca 	beq.w	800cc66 <_strtod_l+0x43e>
 800d0d2:	4b92      	ldr	r3, [pc, #584]	@ (800d31c <_strtod_l+0xaf4>)
 800d0d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0d6:	401a      	ands	r2, r3
 800d0d8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d0dc:	f04f 0a00 	mov.w	sl, #0
 800d0e0:	9b08      	ldr	r3, [sp, #32]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d1b8      	bne.n	800d058 <_strtod_l+0x830>
 800d0e6:	e5c9      	b.n	800cc7c <_strtod_l+0x454>
 800d0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d0ec:	e7e8      	b.n	800d0c0 <_strtod_l+0x898>
 800d0ee:	4613      	mov	r3, r2
 800d0f0:	e7e6      	b.n	800d0c0 <_strtod_l+0x898>
 800d0f2:	ea53 030a 	orrs.w	r3, r3, sl
 800d0f6:	d0a1      	beq.n	800d03c <_strtod_l+0x814>
 800d0f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d0fa:	b1db      	cbz	r3, 800d134 <_strtod_l+0x90c>
 800d0fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0fe:	4213      	tst	r3, r2
 800d100:	d0ee      	beq.n	800d0e0 <_strtod_l+0x8b8>
 800d102:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d104:	9a08      	ldr	r2, [sp, #32]
 800d106:	4650      	mov	r0, sl
 800d108:	4659      	mov	r1, fp
 800d10a:	b1bb      	cbz	r3, 800d13c <_strtod_l+0x914>
 800d10c:	f7ff fb6e 	bl	800c7ec <sulp>
 800d110:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d114:	ec53 2b10 	vmov	r2, r3, d0
 800d118:	f7f3 f8e0 	bl	80002dc <__adddf3>
 800d11c:	4682      	mov	sl, r0
 800d11e:	468b      	mov	fp, r1
 800d120:	e7de      	b.n	800d0e0 <_strtod_l+0x8b8>
 800d122:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d126:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d12a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d12e:	f04f 3aff 	mov.w	sl, #4294967295
 800d132:	e7d5      	b.n	800d0e0 <_strtod_l+0x8b8>
 800d134:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d136:	ea13 0f0a 	tst.w	r3, sl
 800d13a:	e7e1      	b.n	800d100 <_strtod_l+0x8d8>
 800d13c:	f7ff fb56 	bl	800c7ec <sulp>
 800d140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d144:	ec53 2b10 	vmov	r2, r3, d0
 800d148:	f7f3 f8c6 	bl	80002d8 <__aeabi_dsub>
 800d14c:	2200      	movs	r2, #0
 800d14e:	2300      	movs	r3, #0
 800d150:	4682      	mov	sl, r0
 800d152:	468b      	mov	fp, r1
 800d154:	f7f3 fce0 	bl	8000b18 <__aeabi_dcmpeq>
 800d158:	2800      	cmp	r0, #0
 800d15a:	d0c1      	beq.n	800d0e0 <_strtod_l+0x8b8>
 800d15c:	e619      	b.n	800cd92 <_strtod_l+0x56a>
 800d15e:	4641      	mov	r1, r8
 800d160:	4620      	mov	r0, r4
 800d162:	f003 f881 	bl	8010268 <__ratio>
 800d166:	ec57 6b10 	vmov	r6, r7, d0
 800d16a:	2200      	movs	r2, #0
 800d16c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d170:	4630      	mov	r0, r6
 800d172:	4639      	mov	r1, r7
 800d174:	f7f3 fce4 	bl	8000b40 <__aeabi_dcmple>
 800d178:	2800      	cmp	r0, #0
 800d17a:	d06f      	beq.n	800d25c <_strtod_l+0xa34>
 800d17c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d17a      	bne.n	800d278 <_strtod_l+0xa50>
 800d182:	f1ba 0f00 	cmp.w	sl, #0
 800d186:	d158      	bne.n	800d23a <_strtod_l+0xa12>
 800d188:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d18a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d15a      	bne.n	800d248 <_strtod_l+0xa20>
 800d192:	4b64      	ldr	r3, [pc, #400]	@ (800d324 <_strtod_l+0xafc>)
 800d194:	2200      	movs	r2, #0
 800d196:	4630      	mov	r0, r6
 800d198:	4639      	mov	r1, r7
 800d19a:	f7f3 fcc7 	bl	8000b2c <__aeabi_dcmplt>
 800d19e:	2800      	cmp	r0, #0
 800d1a0:	d159      	bne.n	800d256 <_strtod_l+0xa2e>
 800d1a2:	4630      	mov	r0, r6
 800d1a4:	4639      	mov	r1, r7
 800d1a6:	4b60      	ldr	r3, [pc, #384]	@ (800d328 <_strtod_l+0xb00>)
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	f7f3 fa4d 	bl	8000648 <__aeabi_dmul>
 800d1ae:	4606      	mov	r6, r0
 800d1b0:	460f      	mov	r7, r1
 800d1b2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d1b6:	9606      	str	r6, [sp, #24]
 800d1b8:	9307      	str	r3, [sp, #28]
 800d1ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d1be:	4d57      	ldr	r5, [pc, #348]	@ (800d31c <_strtod_l+0xaf4>)
 800d1c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d1c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1c6:	401d      	ands	r5, r3
 800d1c8:	4b58      	ldr	r3, [pc, #352]	@ (800d32c <_strtod_l+0xb04>)
 800d1ca:	429d      	cmp	r5, r3
 800d1cc:	f040 80b2 	bne.w	800d334 <_strtod_l+0xb0c>
 800d1d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1d2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d1d6:	ec4b ab10 	vmov	d0, sl, fp
 800d1da:	f002 ff7d 	bl	80100d8 <__ulp>
 800d1de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d1e2:	ec51 0b10 	vmov	r0, r1, d0
 800d1e6:	f7f3 fa2f 	bl	8000648 <__aeabi_dmul>
 800d1ea:	4652      	mov	r2, sl
 800d1ec:	465b      	mov	r3, fp
 800d1ee:	f7f3 f875 	bl	80002dc <__adddf3>
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	4949      	ldr	r1, [pc, #292]	@ (800d31c <_strtod_l+0xaf4>)
 800d1f6:	4a4e      	ldr	r2, [pc, #312]	@ (800d330 <_strtod_l+0xb08>)
 800d1f8:	4019      	ands	r1, r3
 800d1fa:	4291      	cmp	r1, r2
 800d1fc:	4682      	mov	sl, r0
 800d1fe:	d942      	bls.n	800d286 <_strtod_l+0xa5e>
 800d200:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d202:	4b47      	ldr	r3, [pc, #284]	@ (800d320 <_strtod_l+0xaf8>)
 800d204:	429a      	cmp	r2, r3
 800d206:	d103      	bne.n	800d210 <_strtod_l+0x9e8>
 800d208:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d20a:	3301      	adds	r3, #1
 800d20c:	f43f ad2b 	beq.w	800cc66 <_strtod_l+0x43e>
 800d210:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d320 <_strtod_l+0xaf8>
 800d214:	f04f 3aff 	mov.w	sl, #4294967295
 800d218:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d21a:	9805      	ldr	r0, [sp, #20]
 800d21c:	f002 fc28 	bl	800fa70 <_Bfree>
 800d220:	9805      	ldr	r0, [sp, #20]
 800d222:	4649      	mov	r1, r9
 800d224:	f002 fc24 	bl	800fa70 <_Bfree>
 800d228:	9805      	ldr	r0, [sp, #20]
 800d22a:	4641      	mov	r1, r8
 800d22c:	f002 fc20 	bl	800fa70 <_Bfree>
 800d230:	9805      	ldr	r0, [sp, #20]
 800d232:	4621      	mov	r1, r4
 800d234:	f002 fc1c 	bl	800fa70 <_Bfree>
 800d238:	e618      	b.n	800ce6c <_strtod_l+0x644>
 800d23a:	f1ba 0f01 	cmp.w	sl, #1
 800d23e:	d103      	bne.n	800d248 <_strtod_l+0xa20>
 800d240:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d242:	2b00      	cmp	r3, #0
 800d244:	f43f ada5 	beq.w	800cd92 <_strtod_l+0x56a>
 800d248:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d2f8 <_strtod_l+0xad0>
 800d24c:	4f35      	ldr	r7, [pc, #212]	@ (800d324 <_strtod_l+0xafc>)
 800d24e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d252:	2600      	movs	r6, #0
 800d254:	e7b1      	b.n	800d1ba <_strtod_l+0x992>
 800d256:	4f34      	ldr	r7, [pc, #208]	@ (800d328 <_strtod_l+0xb00>)
 800d258:	2600      	movs	r6, #0
 800d25a:	e7aa      	b.n	800d1b2 <_strtod_l+0x98a>
 800d25c:	4b32      	ldr	r3, [pc, #200]	@ (800d328 <_strtod_l+0xb00>)
 800d25e:	4630      	mov	r0, r6
 800d260:	4639      	mov	r1, r7
 800d262:	2200      	movs	r2, #0
 800d264:	f7f3 f9f0 	bl	8000648 <__aeabi_dmul>
 800d268:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d26a:	4606      	mov	r6, r0
 800d26c:	460f      	mov	r7, r1
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d09f      	beq.n	800d1b2 <_strtod_l+0x98a>
 800d272:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d276:	e7a0      	b.n	800d1ba <_strtod_l+0x992>
 800d278:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d300 <_strtod_l+0xad8>
 800d27c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d280:	ec57 6b17 	vmov	r6, r7, d7
 800d284:	e799      	b.n	800d1ba <_strtod_l+0x992>
 800d286:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d28a:	9b08      	ldr	r3, [sp, #32]
 800d28c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d290:	2b00      	cmp	r3, #0
 800d292:	d1c1      	bne.n	800d218 <_strtod_l+0x9f0>
 800d294:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d298:	0d1b      	lsrs	r3, r3, #20
 800d29a:	051b      	lsls	r3, r3, #20
 800d29c:	429d      	cmp	r5, r3
 800d29e:	d1bb      	bne.n	800d218 <_strtod_l+0x9f0>
 800d2a0:	4630      	mov	r0, r6
 800d2a2:	4639      	mov	r1, r7
 800d2a4:	f7f3 fd30 	bl	8000d08 <__aeabi_d2lz>
 800d2a8:	f7f3 f9a0 	bl	80005ec <__aeabi_l2d>
 800d2ac:	4602      	mov	r2, r0
 800d2ae:	460b      	mov	r3, r1
 800d2b0:	4630      	mov	r0, r6
 800d2b2:	4639      	mov	r1, r7
 800d2b4:	f7f3 f810 	bl	80002d8 <__aeabi_dsub>
 800d2b8:	460b      	mov	r3, r1
 800d2ba:	4602      	mov	r2, r0
 800d2bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d2c0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d2c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2c6:	ea46 060a 	orr.w	r6, r6, sl
 800d2ca:	431e      	orrs	r6, r3
 800d2cc:	d06f      	beq.n	800d3ae <_strtod_l+0xb86>
 800d2ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800d308 <_strtod_l+0xae0>)
 800d2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d4:	f7f3 fc2a 	bl	8000b2c <__aeabi_dcmplt>
 800d2d8:	2800      	cmp	r0, #0
 800d2da:	f47f accf 	bne.w	800cc7c <_strtod_l+0x454>
 800d2de:	a30c      	add	r3, pc, #48	@ (adr r3, 800d310 <_strtod_l+0xae8>)
 800d2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d2e8:	f7f3 fc3e 	bl	8000b68 <__aeabi_dcmpgt>
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	d093      	beq.n	800d218 <_strtod_l+0x9f0>
 800d2f0:	e4c4      	b.n	800cc7c <_strtod_l+0x454>
 800d2f2:	bf00      	nop
 800d2f4:	f3af 8000 	nop.w
 800d2f8:	00000000 	.word	0x00000000
 800d2fc:	bff00000 	.word	0xbff00000
 800d300:	00000000 	.word	0x00000000
 800d304:	3ff00000 	.word	0x3ff00000
 800d308:	94a03595 	.word	0x94a03595
 800d30c:	3fdfffff 	.word	0x3fdfffff
 800d310:	35afe535 	.word	0x35afe535
 800d314:	3fe00000 	.word	0x3fe00000
 800d318:	000fffff 	.word	0x000fffff
 800d31c:	7ff00000 	.word	0x7ff00000
 800d320:	7fefffff 	.word	0x7fefffff
 800d324:	3ff00000 	.word	0x3ff00000
 800d328:	3fe00000 	.word	0x3fe00000
 800d32c:	7fe00000 	.word	0x7fe00000
 800d330:	7c9fffff 	.word	0x7c9fffff
 800d334:	9b08      	ldr	r3, [sp, #32]
 800d336:	b323      	cbz	r3, 800d382 <_strtod_l+0xb5a>
 800d338:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d33c:	d821      	bhi.n	800d382 <_strtod_l+0xb5a>
 800d33e:	a328      	add	r3, pc, #160	@ (adr r3, 800d3e0 <_strtod_l+0xbb8>)
 800d340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d344:	4630      	mov	r0, r6
 800d346:	4639      	mov	r1, r7
 800d348:	f7f3 fbfa 	bl	8000b40 <__aeabi_dcmple>
 800d34c:	b1a0      	cbz	r0, 800d378 <_strtod_l+0xb50>
 800d34e:	4639      	mov	r1, r7
 800d350:	4630      	mov	r0, r6
 800d352:	f7f3 fc51 	bl	8000bf8 <__aeabi_d2uiz>
 800d356:	2801      	cmp	r0, #1
 800d358:	bf38      	it	cc
 800d35a:	2001      	movcc	r0, #1
 800d35c:	f7f3 f8fa 	bl	8000554 <__aeabi_ui2d>
 800d360:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d362:	4606      	mov	r6, r0
 800d364:	460f      	mov	r7, r1
 800d366:	b9fb      	cbnz	r3, 800d3a8 <_strtod_l+0xb80>
 800d368:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d36c:	9014      	str	r0, [sp, #80]	@ 0x50
 800d36e:	9315      	str	r3, [sp, #84]	@ 0x54
 800d370:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d374:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d378:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d37a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d37e:	1b5b      	subs	r3, r3, r5
 800d380:	9311      	str	r3, [sp, #68]	@ 0x44
 800d382:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d386:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d38a:	f002 fea5 	bl	80100d8 <__ulp>
 800d38e:	4650      	mov	r0, sl
 800d390:	ec53 2b10 	vmov	r2, r3, d0
 800d394:	4659      	mov	r1, fp
 800d396:	f7f3 f957 	bl	8000648 <__aeabi_dmul>
 800d39a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d39e:	f7f2 ff9d 	bl	80002dc <__adddf3>
 800d3a2:	4682      	mov	sl, r0
 800d3a4:	468b      	mov	fp, r1
 800d3a6:	e770      	b.n	800d28a <_strtod_l+0xa62>
 800d3a8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d3ac:	e7e0      	b.n	800d370 <_strtod_l+0xb48>
 800d3ae:	a30e      	add	r3, pc, #56	@ (adr r3, 800d3e8 <_strtod_l+0xbc0>)
 800d3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b4:	f7f3 fbba 	bl	8000b2c <__aeabi_dcmplt>
 800d3b8:	e798      	b.n	800d2ec <_strtod_l+0xac4>
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d3be:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d3c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d3c2:	6013      	str	r3, [r2, #0]
 800d3c4:	f7ff ba6d 	b.w	800c8a2 <_strtod_l+0x7a>
 800d3c8:	2a65      	cmp	r2, #101	@ 0x65
 800d3ca:	f43f ab66 	beq.w	800ca9a <_strtod_l+0x272>
 800d3ce:	2a45      	cmp	r2, #69	@ 0x45
 800d3d0:	f43f ab63 	beq.w	800ca9a <_strtod_l+0x272>
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	f7ff bb9e 	b.w	800cb16 <_strtod_l+0x2ee>
 800d3da:	bf00      	nop
 800d3dc:	f3af 8000 	nop.w
 800d3e0:	ffc00000 	.word	0xffc00000
 800d3e4:	41dfffff 	.word	0x41dfffff
 800d3e8:	94a03595 	.word	0x94a03595
 800d3ec:	3fcfffff 	.word	0x3fcfffff

0800d3f0 <_strtod_r>:
 800d3f0:	4b01      	ldr	r3, [pc, #4]	@ (800d3f8 <_strtod_r+0x8>)
 800d3f2:	f7ff ba19 	b.w	800c828 <_strtod_l>
 800d3f6:	bf00      	nop
 800d3f8:	200000c0 	.word	0x200000c0

0800d3fc <__cvt>:
 800d3fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d400:	ec57 6b10 	vmov	r6, r7, d0
 800d404:	2f00      	cmp	r7, #0
 800d406:	460c      	mov	r4, r1
 800d408:	4619      	mov	r1, r3
 800d40a:	463b      	mov	r3, r7
 800d40c:	bfbb      	ittet	lt
 800d40e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d412:	461f      	movlt	r7, r3
 800d414:	2300      	movge	r3, #0
 800d416:	232d      	movlt	r3, #45	@ 0x2d
 800d418:	700b      	strb	r3, [r1, #0]
 800d41a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d41c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d420:	4691      	mov	r9, r2
 800d422:	f023 0820 	bic.w	r8, r3, #32
 800d426:	bfbc      	itt	lt
 800d428:	4632      	movlt	r2, r6
 800d42a:	4616      	movlt	r6, r2
 800d42c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d430:	d005      	beq.n	800d43e <__cvt+0x42>
 800d432:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d436:	d100      	bne.n	800d43a <__cvt+0x3e>
 800d438:	3401      	adds	r4, #1
 800d43a:	2102      	movs	r1, #2
 800d43c:	e000      	b.n	800d440 <__cvt+0x44>
 800d43e:	2103      	movs	r1, #3
 800d440:	ab03      	add	r3, sp, #12
 800d442:	9301      	str	r3, [sp, #4]
 800d444:	ab02      	add	r3, sp, #8
 800d446:	9300      	str	r3, [sp, #0]
 800d448:	ec47 6b10 	vmov	d0, r6, r7
 800d44c:	4653      	mov	r3, sl
 800d44e:	4622      	mov	r2, r4
 800d450:	f001 f8be 	bl	800e5d0 <_dtoa_r>
 800d454:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d458:	4605      	mov	r5, r0
 800d45a:	d119      	bne.n	800d490 <__cvt+0x94>
 800d45c:	f019 0f01 	tst.w	r9, #1
 800d460:	d00e      	beq.n	800d480 <__cvt+0x84>
 800d462:	eb00 0904 	add.w	r9, r0, r4
 800d466:	2200      	movs	r2, #0
 800d468:	2300      	movs	r3, #0
 800d46a:	4630      	mov	r0, r6
 800d46c:	4639      	mov	r1, r7
 800d46e:	f7f3 fb53 	bl	8000b18 <__aeabi_dcmpeq>
 800d472:	b108      	cbz	r0, 800d478 <__cvt+0x7c>
 800d474:	f8cd 900c 	str.w	r9, [sp, #12]
 800d478:	2230      	movs	r2, #48	@ 0x30
 800d47a:	9b03      	ldr	r3, [sp, #12]
 800d47c:	454b      	cmp	r3, r9
 800d47e:	d31e      	bcc.n	800d4be <__cvt+0xc2>
 800d480:	9b03      	ldr	r3, [sp, #12]
 800d482:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d484:	1b5b      	subs	r3, r3, r5
 800d486:	4628      	mov	r0, r5
 800d488:	6013      	str	r3, [r2, #0]
 800d48a:	b004      	add	sp, #16
 800d48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d490:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d494:	eb00 0904 	add.w	r9, r0, r4
 800d498:	d1e5      	bne.n	800d466 <__cvt+0x6a>
 800d49a:	7803      	ldrb	r3, [r0, #0]
 800d49c:	2b30      	cmp	r3, #48	@ 0x30
 800d49e:	d10a      	bne.n	800d4b6 <__cvt+0xba>
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	4630      	mov	r0, r6
 800d4a6:	4639      	mov	r1, r7
 800d4a8:	f7f3 fb36 	bl	8000b18 <__aeabi_dcmpeq>
 800d4ac:	b918      	cbnz	r0, 800d4b6 <__cvt+0xba>
 800d4ae:	f1c4 0401 	rsb	r4, r4, #1
 800d4b2:	f8ca 4000 	str.w	r4, [sl]
 800d4b6:	f8da 3000 	ldr.w	r3, [sl]
 800d4ba:	4499      	add	r9, r3
 800d4bc:	e7d3      	b.n	800d466 <__cvt+0x6a>
 800d4be:	1c59      	adds	r1, r3, #1
 800d4c0:	9103      	str	r1, [sp, #12]
 800d4c2:	701a      	strb	r2, [r3, #0]
 800d4c4:	e7d9      	b.n	800d47a <__cvt+0x7e>

0800d4c6 <__exponent>:
 800d4c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4c8:	2900      	cmp	r1, #0
 800d4ca:	bfba      	itte	lt
 800d4cc:	4249      	neglt	r1, r1
 800d4ce:	232d      	movlt	r3, #45	@ 0x2d
 800d4d0:	232b      	movge	r3, #43	@ 0x2b
 800d4d2:	2909      	cmp	r1, #9
 800d4d4:	7002      	strb	r2, [r0, #0]
 800d4d6:	7043      	strb	r3, [r0, #1]
 800d4d8:	dd29      	ble.n	800d52e <__exponent+0x68>
 800d4da:	f10d 0307 	add.w	r3, sp, #7
 800d4de:	461d      	mov	r5, r3
 800d4e0:	270a      	movs	r7, #10
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	fbb1 f6f7 	udiv	r6, r1, r7
 800d4e8:	fb07 1416 	mls	r4, r7, r6, r1
 800d4ec:	3430      	adds	r4, #48	@ 0x30
 800d4ee:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d4f2:	460c      	mov	r4, r1
 800d4f4:	2c63      	cmp	r4, #99	@ 0x63
 800d4f6:	f103 33ff 	add.w	r3, r3, #4294967295
 800d4fa:	4631      	mov	r1, r6
 800d4fc:	dcf1      	bgt.n	800d4e2 <__exponent+0x1c>
 800d4fe:	3130      	adds	r1, #48	@ 0x30
 800d500:	1e94      	subs	r4, r2, #2
 800d502:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d506:	1c41      	adds	r1, r0, #1
 800d508:	4623      	mov	r3, r4
 800d50a:	42ab      	cmp	r3, r5
 800d50c:	d30a      	bcc.n	800d524 <__exponent+0x5e>
 800d50e:	f10d 0309 	add.w	r3, sp, #9
 800d512:	1a9b      	subs	r3, r3, r2
 800d514:	42ac      	cmp	r4, r5
 800d516:	bf88      	it	hi
 800d518:	2300      	movhi	r3, #0
 800d51a:	3302      	adds	r3, #2
 800d51c:	4403      	add	r3, r0
 800d51e:	1a18      	subs	r0, r3, r0
 800d520:	b003      	add	sp, #12
 800d522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d524:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d528:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d52c:	e7ed      	b.n	800d50a <__exponent+0x44>
 800d52e:	2330      	movs	r3, #48	@ 0x30
 800d530:	3130      	adds	r1, #48	@ 0x30
 800d532:	7083      	strb	r3, [r0, #2]
 800d534:	70c1      	strb	r1, [r0, #3]
 800d536:	1d03      	adds	r3, r0, #4
 800d538:	e7f1      	b.n	800d51e <__exponent+0x58>
	...

0800d53c <_printf_float>:
 800d53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d540:	b08d      	sub	sp, #52	@ 0x34
 800d542:	460c      	mov	r4, r1
 800d544:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d548:	4616      	mov	r6, r2
 800d54a:	461f      	mov	r7, r3
 800d54c:	4605      	mov	r5, r0
 800d54e:	f000 ff21 	bl	800e394 <_localeconv_r>
 800d552:	6803      	ldr	r3, [r0, #0]
 800d554:	9304      	str	r3, [sp, #16]
 800d556:	4618      	mov	r0, r3
 800d558:	f7f2 feb2 	bl	80002c0 <strlen>
 800d55c:	2300      	movs	r3, #0
 800d55e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d560:	f8d8 3000 	ldr.w	r3, [r8]
 800d564:	9005      	str	r0, [sp, #20]
 800d566:	3307      	adds	r3, #7
 800d568:	f023 0307 	bic.w	r3, r3, #7
 800d56c:	f103 0208 	add.w	r2, r3, #8
 800d570:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d574:	f8d4 b000 	ldr.w	fp, [r4]
 800d578:	f8c8 2000 	str.w	r2, [r8]
 800d57c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d580:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d584:	9307      	str	r3, [sp, #28]
 800d586:	f8cd 8018 	str.w	r8, [sp, #24]
 800d58a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d58e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d592:	4b9c      	ldr	r3, [pc, #624]	@ (800d804 <_printf_float+0x2c8>)
 800d594:	f04f 32ff 	mov.w	r2, #4294967295
 800d598:	f7f3 faf0 	bl	8000b7c <__aeabi_dcmpun>
 800d59c:	bb70      	cbnz	r0, 800d5fc <_printf_float+0xc0>
 800d59e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d5a2:	4b98      	ldr	r3, [pc, #608]	@ (800d804 <_printf_float+0x2c8>)
 800d5a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d5a8:	f7f3 faca 	bl	8000b40 <__aeabi_dcmple>
 800d5ac:	bb30      	cbnz	r0, 800d5fc <_printf_float+0xc0>
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	4640      	mov	r0, r8
 800d5b4:	4649      	mov	r1, r9
 800d5b6:	f7f3 fab9 	bl	8000b2c <__aeabi_dcmplt>
 800d5ba:	b110      	cbz	r0, 800d5c2 <_printf_float+0x86>
 800d5bc:	232d      	movs	r3, #45	@ 0x2d
 800d5be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d5c2:	4a91      	ldr	r2, [pc, #580]	@ (800d808 <_printf_float+0x2cc>)
 800d5c4:	4b91      	ldr	r3, [pc, #580]	@ (800d80c <_printf_float+0x2d0>)
 800d5c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d5ca:	bf94      	ite	ls
 800d5cc:	4690      	movls	r8, r2
 800d5ce:	4698      	movhi	r8, r3
 800d5d0:	2303      	movs	r3, #3
 800d5d2:	6123      	str	r3, [r4, #16]
 800d5d4:	f02b 0304 	bic.w	r3, fp, #4
 800d5d8:	6023      	str	r3, [r4, #0]
 800d5da:	f04f 0900 	mov.w	r9, #0
 800d5de:	9700      	str	r7, [sp, #0]
 800d5e0:	4633      	mov	r3, r6
 800d5e2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d5e4:	4621      	mov	r1, r4
 800d5e6:	4628      	mov	r0, r5
 800d5e8:	f000 f9d2 	bl	800d990 <_printf_common>
 800d5ec:	3001      	adds	r0, #1
 800d5ee:	f040 808d 	bne.w	800d70c <_printf_float+0x1d0>
 800d5f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5f6:	b00d      	add	sp, #52	@ 0x34
 800d5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5fc:	4642      	mov	r2, r8
 800d5fe:	464b      	mov	r3, r9
 800d600:	4640      	mov	r0, r8
 800d602:	4649      	mov	r1, r9
 800d604:	f7f3 faba 	bl	8000b7c <__aeabi_dcmpun>
 800d608:	b140      	cbz	r0, 800d61c <_printf_float+0xe0>
 800d60a:	464b      	mov	r3, r9
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	bfbc      	itt	lt
 800d610:	232d      	movlt	r3, #45	@ 0x2d
 800d612:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d616:	4a7e      	ldr	r2, [pc, #504]	@ (800d810 <_printf_float+0x2d4>)
 800d618:	4b7e      	ldr	r3, [pc, #504]	@ (800d814 <_printf_float+0x2d8>)
 800d61a:	e7d4      	b.n	800d5c6 <_printf_float+0x8a>
 800d61c:	6863      	ldr	r3, [r4, #4]
 800d61e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d622:	9206      	str	r2, [sp, #24]
 800d624:	1c5a      	adds	r2, r3, #1
 800d626:	d13b      	bne.n	800d6a0 <_printf_float+0x164>
 800d628:	2306      	movs	r3, #6
 800d62a:	6063      	str	r3, [r4, #4]
 800d62c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d630:	2300      	movs	r3, #0
 800d632:	6022      	str	r2, [r4, #0]
 800d634:	9303      	str	r3, [sp, #12]
 800d636:	ab0a      	add	r3, sp, #40	@ 0x28
 800d638:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d63c:	ab09      	add	r3, sp, #36	@ 0x24
 800d63e:	9300      	str	r3, [sp, #0]
 800d640:	6861      	ldr	r1, [r4, #4]
 800d642:	ec49 8b10 	vmov	d0, r8, r9
 800d646:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d64a:	4628      	mov	r0, r5
 800d64c:	f7ff fed6 	bl	800d3fc <__cvt>
 800d650:	9b06      	ldr	r3, [sp, #24]
 800d652:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d654:	2b47      	cmp	r3, #71	@ 0x47
 800d656:	4680      	mov	r8, r0
 800d658:	d129      	bne.n	800d6ae <_printf_float+0x172>
 800d65a:	1cc8      	adds	r0, r1, #3
 800d65c:	db02      	blt.n	800d664 <_printf_float+0x128>
 800d65e:	6863      	ldr	r3, [r4, #4]
 800d660:	4299      	cmp	r1, r3
 800d662:	dd41      	ble.n	800d6e8 <_printf_float+0x1ac>
 800d664:	f1aa 0a02 	sub.w	sl, sl, #2
 800d668:	fa5f fa8a 	uxtb.w	sl, sl
 800d66c:	3901      	subs	r1, #1
 800d66e:	4652      	mov	r2, sl
 800d670:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d674:	9109      	str	r1, [sp, #36]	@ 0x24
 800d676:	f7ff ff26 	bl	800d4c6 <__exponent>
 800d67a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d67c:	1813      	adds	r3, r2, r0
 800d67e:	2a01      	cmp	r2, #1
 800d680:	4681      	mov	r9, r0
 800d682:	6123      	str	r3, [r4, #16]
 800d684:	dc02      	bgt.n	800d68c <_printf_float+0x150>
 800d686:	6822      	ldr	r2, [r4, #0]
 800d688:	07d2      	lsls	r2, r2, #31
 800d68a:	d501      	bpl.n	800d690 <_printf_float+0x154>
 800d68c:	3301      	adds	r3, #1
 800d68e:	6123      	str	r3, [r4, #16]
 800d690:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d694:	2b00      	cmp	r3, #0
 800d696:	d0a2      	beq.n	800d5de <_printf_float+0xa2>
 800d698:	232d      	movs	r3, #45	@ 0x2d
 800d69a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d69e:	e79e      	b.n	800d5de <_printf_float+0xa2>
 800d6a0:	9a06      	ldr	r2, [sp, #24]
 800d6a2:	2a47      	cmp	r2, #71	@ 0x47
 800d6a4:	d1c2      	bne.n	800d62c <_printf_float+0xf0>
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d1c0      	bne.n	800d62c <_printf_float+0xf0>
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	e7bd      	b.n	800d62a <_printf_float+0xee>
 800d6ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d6b2:	d9db      	bls.n	800d66c <_printf_float+0x130>
 800d6b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d6b8:	d118      	bne.n	800d6ec <_printf_float+0x1b0>
 800d6ba:	2900      	cmp	r1, #0
 800d6bc:	6863      	ldr	r3, [r4, #4]
 800d6be:	dd0b      	ble.n	800d6d8 <_printf_float+0x19c>
 800d6c0:	6121      	str	r1, [r4, #16]
 800d6c2:	b913      	cbnz	r3, 800d6ca <_printf_float+0x18e>
 800d6c4:	6822      	ldr	r2, [r4, #0]
 800d6c6:	07d0      	lsls	r0, r2, #31
 800d6c8:	d502      	bpl.n	800d6d0 <_printf_float+0x194>
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	440b      	add	r3, r1
 800d6ce:	6123      	str	r3, [r4, #16]
 800d6d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d6d2:	f04f 0900 	mov.w	r9, #0
 800d6d6:	e7db      	b.n	800d690 <_printf_float+0x154>
 800d6d8:	b913      	cbnz	r3, 800d6e0 <_printf_float+0x1a4>
 800d6da:	6822      	ldr	r2, [r4, #0]
 800d6dc:	07d2      	lsls	r2, r2, #31
 800d6de:	d501      	bpl.n	800d6e4 <_printf_float+0x1a8>
 800d6e0:	3302      	adds	r3, #2
 800d6e2:	e7f4      	b.n	800d6ce <_printf_float+0x192>
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	e7f2      	b.n	800d6ce <_printf_float+0x192>
 800d6e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d6ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d6ee:	4299      	cmp	r1, r3
 800d6f0:	db05      	blt.n	800d6fe <_printf_float+0x1c2>
 800d6f2:	6823      	ldr	r3, [r4, #0]
 800d6f4:	6121      	str	r1, [r4, #16]
 800d6f6:	07d8      	lsls	r0, r3, #31
 800d6f8:	d5ea      	bpl.n	800d6d0 <_printf_float+0x194>
 800d6fa:	1c4b      	adds	r3, r1, #1
 800d6fc:	e7e7      	b.n	800d6ce <_printf_float+0x192>
 800d6fe:	2900      	cmp	r1, #0
 800d700:	bfd4      	ite	le
 800d702:	f1c1 0202 	rsble	r2, r1, #2
 800d706:	2201      	movgt	r2, #1
 800d708:	4413      	add	r3, r2
 800d70a:	e7e0      	b.n	800d6ce <_printf_float+0x192>
 800d70c:	6823      	ldr	r3, [r4, #0]
 800d70e:	055a      	lsls	r2, r3, #21
 800d710:	d407      	bmi.n	800d722 <_printf_float+0x1e6>
 800d712:	6923      	ldr	r3, [r4, #16]
 800d714:	4642      	mov	r2, r8
 800d716:	4631      	mov	r1, r6
 800d718:	4628      	mov	r0, r5
 800d71a:	47b8      	blx	r7
 800d71c:	3001      	adds	r0, #1
 800d71e:	d12b      	bne.n	800d778 <_printf_float+0x23c>
 800d720:	e767      	b.n	800d5f2 <_printf_float+0xb6>
 800d722:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d726:	f240 80dd 	bls.w	800d8e4 <_printf_float+0x3a8>
 800d72a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d72e:	2200      	movs	r2, #0
 800d730:	2300      	movs	r3, #0
 800d732:	f7f3 f9f1 	bl	8000b18 <__aeabi_dcmpeq>
 800d736:	2800      	cmp	r0, #0
 800d738:	d033      	beq.n	800d7a2 <_printf_float+0x266>
 800d73a:	4a37      	ldr	r2, [pc, #220]	@ (800d818 <_printf_float+0x2dc>)
 800d73c:	2301      	movs	r3, #1
 800d73e:	4631      	mov	r1, r6
 800d740:	4628      	mov	r0, r5
 800d742:	47b8      	blx	r7
 800d744:	3001      	adds	r0, #1
 800d746:	f43f af54 	beq.w	800d5f2 <_printf_float+0xb6>
 800d74a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d74e:	4543      	cmp	r3, r8
 800d750:	db02      	blt.n	800d758 <_printf_float+0x21c>
 800d752:	6823      	ldr	r3, [r4, #0]
 800d754:	07d8      	lsls	r0, r3, #31
 800d756:	d50f      	bpl.n	800d778 <_printf_float+0x23c>
 800d758:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d75c:	4631      	mov	r1, r6
 800d75e:	4628      	mov	r0, r5
 800d760:	47b8      	blx	r7
 800d762:	3001      	adds	r0, #1
 800d764:	f43f af45 	beq.w	800d5f2 <_printf_float+0xb6>
 800d768:	f04f 0900 	mov.w	r9, #0
 800d76c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d770:	f104 0a1a 	add.w	sl, r4, #26
 800d774:	45c8      	cmp	r8, r9
 800d776:	dc09      	bgt.n	800d78c <_printf_float+0x250>
 800d778:	6823      	ldr	r3, [r4, #0]
 800d77a:	079b      	lsls	r3, r3, #30
 800d77c:	f100 8103 	bmi.w	800d986 <_printf_float+0x44a>
 800d780:	68e0      	ldr	r0, [r4, #12]
 800d782:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d784:	4298      	cmp	r0, r3
 800d786:	bfb8      	it	lt
 800d788:	4618      	movlt	r0, r3
 800d78a:	e734      	b.n	800d5f6 <_printf_float+0xba>
 800d78c:	2301      	movs	r3, #1
 800d78e:	4652      	mov	r2, sl
 800d790:	4631      	mov	r1, r6
 800d792:	4628      	mov	r0, r5
 800d794:	47b8      	blx	r7
 800d796:	3001      	adds	r0, #1
 800d798:	f43f af2b 	beq.w	800d5f2 <_printf_float+0xb6>
 800d79c:	f109 0901 	add.w	r9, r9, #1
 800d7a0:	e7e8      	b.n	800d774 <_printf_float+0x238>
 800d7a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	dc39      	bgt.n	800d81c <_printf_float+0x2e0>
 800d7a8:	4a1b      	ldr	r2, [pc, #108]	@ (800d818 <_printf_float+0x2dc>)
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	4631      	mov	r1, r6
 800d7ae:	4628      	mov	r0, r5
 800d7b0:	47b8      	blx	r7
 800d7b2:	3001      	adds	r0, #1
 800d7b4:	f43f af1d 	beq.w	800d5f2 <_printf_float+0xb6>
 800d7b8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d7bc:	ea59 0303 	orrs.w	r3, r9, r3
 800d7c0:	d102      	bne.n	800d7c8 <_printf_float+0x28c>
 800d7c2:	6823      	ldr	r3, [r4, #0]
 800d7c4:	07d9      	lsls	r1, r3, #31
 800d7c6:	d5d7      	bpl.n	800d778 <_printf_float+0x23c>
 800d7c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7cc:	4631      	mov	r1, r6
 800d7ce:	4628      	mov	r0, r5
 800d7d0:	47b8      	blx	r7
 800d7d2:	3001      	adds	r0, #1
 800d7d4:	f43f af0d 	beq.w	800d5f2 <_printf_float+0xb6>
 800d7d8:	f04f 0a00 	mov.w	sl, #0
 800d7dc:	f104 0b1a 	add.w	fp, r4, #26
 800d7e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7e2:	425b      	negs	r3, r3
 800d7e4:	4553      	cmp	r3, sl
 800d7e6:	dc01      	bgt.n	800d7ec <_printf_float+0x2b0>
 800d7e8:	464b      	mov	r3, r9
 800d7ea:	e793      	b.n	800d714 <_printf_float+0x1d8>
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	465a      	mov	r2, fp
 800d7f0:	4631      	mov	r1, r6
 800d7f2:	4628      	mov	r0, r5
 800d7f4:	47b8      	blx	r7
 800d7f6:	3001      	adds	r0, #1
 800d7f8:	f43f aefb 	beq.w	800d5f2 <_printf_float+0xb6>
 800d7fc:	f10a 0a01 	add.w	sl, sl, #1
 800d800:	e7ee      	b.n	800d7e0 <_printf_float+0x2a4>
 800d802:	bf00      	nop
 800d804:	7fefffff 	.word	0x7fefffff
 800d808:	08011348 	.word	0x08011348
 800d80c:	0801134c 	.word	0x0801134c
 800d810:	08011350 	.word	0x08011350
 800d814:	08011354 	.word	0x08011354
 800d818:	08011358 	.word	0x08011358
 800d81c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d81e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d822:	4553      	cmp	r3, sl
 800d824:	bfa8      	it	ge
 800d826:	4653      	movge	r3, sl
 800d828:	2b00      	cmp	r3, #0
 800d82a:	4699      	mov	r9, r3
 800d82c:	dc36      	bgt.n	800d89c <_printf_float+0x360>
 800d82e:	f04f 0b00 	mov.w	fp, #0
 800d832:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d836:	f104 021a 	add.w	r2, r4, #26
 800d83a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d83c:	9306      	str	r3, [sp, #24]
 800d83e:	eba3 0309 	sub.w	r3, r3, r9
 800d842:	455b      	cmp	r3, fp
 800d844:	dc31      	bgt.n	800d8aa <_printf_float+0x36e>
 800d846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d848:	459a      	cmp	sl, r3
 800d84a:	dc3a      	bgt.n	800d8c2 <_printf_float+0x386>
 800d84c:	6823      	ldr	r3, [r4, #0]
 800d84e:	07da      	lsls	r2, r3, #31
 800d850:	d437      	bmi.n	800d8c2 <_printf_float+0x386>
 800d852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d854:	ebaa 0903 	sub.w	r9, sl, r3
 800d858:	9b06      	ldr	r3, [sp, #24]
 800d85a:	ebaa 0303 	sub.w	r3, sl, r3
 800d85e:	4599      	cmp	r9, r3
 800d860:	bfa8      	it	ge
 800d862:	4699      	movge	r9, r3
 800d864:	f1b9 0f00 	cmp.w	r9, #0
 800d868:	dc33      	bgt.n	800d8d2 <_printf_float+0x396>
 800d86a:	f04f 0800 	mov.w	r8, #0
 800d86e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d872:	f104 0b1a 	add.w	fp, r4, #26
 800d876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d878:	ebaa 0303 	sub.w	r3, sl, r3
 800d87c:	eba3 0309 	sub.w	r3, r3, r9
 800d880:	4543      	cmp	r3, r8
 800d882:	f77f af79 	ble.w	800d778 <_printf_float+0x23c>
 800d886:	2301      	movs	r3, #1
 800d888:	465a      	mov	r2, fp
 800d88a:	4631      	mov	r1, r6
 800d88c:	4628      	mov	r0, r5
 800d88e:	47b8      	blx	r7
 800d890:	3001      	adds	r0, #1
 800d892:	f43f aeae 	beq.w	800d5f2 <_printf_float+0xb6>
 800d896:	f108 0801 	add.w	r8, r8, #1
 800d89a:	e7ec      	b.n	800d876 <_printf_float+0x33a>
 800d89c:	4642      	mov	r2, r8
 800d89e:	4631      	mov	r1, r6
 800d8a0:	4628      	mov	r0, r5
 800d8a2:	47b8      	blx	r7
 800d8a4:	3001      	adds	r0, #1
 800d8a6:	d1c2      	bne.n	800d82e <_printf_float+0x2f2>
 800d8a8:	e6a3      	b.n	800d5f2 <_printf_float+0xb6>
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	4631      	mov	r1, r6
 800d8ae:	4628      	mov	r0, r5
 800d8b0:	9206      	str	r2, [sp, #24]
 800d8b2:	47b8      	blx	r7
 800d8b4:	3001      	adds	r0, #1
 800d8b6:	f43f ae9c 	beq.w	800d5f2 <_printf_float+0xb6>
 800d8ba:	9a06      	ldr	r2, [sp, #24]
 800d8bc:	f10b 0b01 	add.w	fp, fp, #1
 800d8c0:	e7bb      	b.n	800d83a <_printf_float+0x2fe>
 800d8c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8c6:	4631      	mov	r1, r6
 800d8c8:	4628      	mov	r0, r5
 800d8ca:	47b8      	blx	r7
 800d8cc:	3001      	adds	r0, #1
 800d8ce:	d1c0      	bne.n	800d852 <_printf_float+0x316>
 800d8d0:	e68f      	b.n	800d5f2 <_printf_float+0xb6>
 800d8d2:	9a06      	ldr	r2, [sp, #24]
 800d8d4:	464b      	mov	r3, r9
 800d8d6:	4442      	add	r2, r8
 800d8d8:	4631      	mov	r1, r6
 800d8da:	4628      	mov	r0, r5
 800d8dc:	47b8      	blx	r7
 800d8de:	3001      	adds	r0, #1
 800d8e0:	d1c3      	bne.n	800d86a <_printf_float+0x32e>
 800d8e2:	e686      	b.n	800d5f2 <_printf_float+0xb6>
 800d8e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d8e8:	f1ba 0f01 	cmp.w	sl, #1
 800d8ec:	dc01      	bgt.n	800d8f2 <_printf_float+0x3b6>
 800d8ee:	07db      	lsls	r3, r3, #31
 800d8f0:	d536      	bpl.n	800d960 <_printf_float+0x424>
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	4642      	mov	r2, r8
 800d8f6:	4631      	mov	r1, r6
 800d8f8:	4628      	mov	r0, r5
 800d8fa:	47b8      	blx	r7
 800d8fc:	3001      	adds	r0, #1
 800d8fe:	f43f ae78 	beq.w	800d5f2 <_printf_float+0xb6>
 800d902:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d906:	4631      	mov	r1, r6
 800d908:	4628      	mov	r0, r5
 800d90a:	47b8      	blx	r7
 800d90c:	3001      	adds	r0, #1
 800d90e:	f43f ae70 	beq.w	800d5f2 <_printf_float+0xb6>
 800d912:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d916:	2200      	movs	r2, #0
 800d918:	2300      	movs	r3, #0
 800d91a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d91e:	f7f3 f8fb 	bl	8000b18 <__aeabi_dcmpeq>
 800d922:	b9c0      	cbnz	r0, 800d956 <_printf_float+0x41a>
 800d924:	4653      	mov	r3, sl
 800d926:	f108 0201 	add.w	r2, r8, #1
 800d92a:	4631      	mov	r1, r6
 800d92c:	4628      	mov	r0, r5
 800d92e:	47b8      	blx	r7
 800d930:	3001      	adds	r0, #1
 800d932:	d10c      	bne.n	800d94e <_printf_float+0x412>
 800d934:	e65d      	b.n	800d5f2 <_printf_float+0xb6>
 800d936:	2301      	movs	r3, #1
 800d938:	465a      	mov	r2, fp
 800d93a:	4631      	mov	r1, r6
 800d93c:	4628      	mov	r0, r5
 800d93e:	47b8      	blx	r7
 800d940:	3001      	adds	r0, #1
 800d942:	f43f ae56 	beq.w	800d5f2 <_printf_float+0xb6>
 800d946:	f108 0801 	add.w	r8, r8, #1
 800d94a:	45d0      	cmp	r8, sl
 800d94c:	dbf3      	blt.n	800d936 <_printf_float+0x3fa>
 800d94e:	464b      	mov	r3, r9
 800d950:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d954:	e6df      	b.n	800d716 <_printf_float+0x1da>
 800d956:	f04f 0800 	mov.w	r8, #0
 800d95a:	f104 0b1a 	add.w	fp, r4, #26
 800d95e:	e7f4      	b.n	800d94a <_printf_float+0x40e>
 800d960:	2301      	movs	r3, #1
 800d962:	4642      	mov	r2, r8
 800d964:	e7e1      	b.n	800d92a <_printf_float+0x3ee>
 800d966:	2301      	movs	r3, #1
 800d968:	464a      	mov	r2, r9
 800d96a:	4631      	mov	r1, r6
 800d96c:	4628      	mov	r0, r5
 800d96e:	47b8      	blx	r7
 800d970:	3001      	adds	r0, #1
 800d972:	f43f ae3e 	beq.w	800d5f2 <_printf_float+0xb6>
 800d976:	f108 0801 	add.w	r8, r8, #1
 800d97a:	68e3      	ldr	r3, [r4, #12]
 800d97c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d97e:	1a5b      	subs	r3, r3, r1
 800d980:	4543      	cmp	r3, r8
 800d982:	dcf0      	bgt.n	800d966 <_printf_float+0x42a>
 800d984:	e6fc      	b.n	800d780 <_printf_float+0x244>
 800d986:	f04f 0800 	mov.w	r8, #0
 800d98a:	f104 0919 	add.w	r9, r4, #25
 800d98e:	e7f4      	b.n	800d97a <_printf_float+0x43e>

0800d990 <_printf_common>:
 800d990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d994:	4616      	mov	r6, r2
 800d996:	4698      	mov	r8, r3
 800d998:	688a      	ldr	r2, [r1, #8]
 800d99a:	690b      	ldr	r3, [r1, #16]
 800d99c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	bfb8      	it	lt
 800d9a4:	4613      	movlt	r3, r2
 800d9a6:	6033      	str	r3, [r6, #0]
 800d9a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d9ac:	4607      	mov	r7, r0
 800d9ae:	460c      	mov	r4, r1
 800d9b0:	b10a      	cbz	r2, 800d9b6 <_printf_common+0x26>
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	6033      	str	r3, [r6, #0]
 800d9b6:	6823      	ldr	r3, [r4, #0]
 800d9b8:	0699      	lsls	r1, r3, #26
 800d9ba:	bf42      	ittt	mi
 800d9bc:	6833      	ldrmi	r3, [r6, #0]
 800d9be:	3302      	addmi	r3, #2
 800d9c0:	6033      	strmi	r3, [r6, #0]
 800d9c2:	6825      	ldr	r5, [r4, #0]
 800d9c4:	f015 0506 	ands.w	r5, r5, #6
 800d9c8:	d106      	bne.n	800d9d8 <_printf_common+0x48>
 800d9ca:	f104 0a19 	add.w	sl, r4, #25
 800d9ce:	68e3      	ldr	r3, [r4, #12]
 800d9d0:	6832      	ldr	r2, [r6, #0]
 800d9d2:	1a9b      	subs	r3, r3, r2
 800d9d4:	42ab      	cmp	r3, r5
 800d9d6:	dc26      	bgt.n	800da26 <_printf_common+0x96>
 800d9d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d9dc:	6822      	ldr	r2, [r4, #0]
 800d9de:	3b00      	subs	r3, #0
 800d9e0:	bf18      	it	ne
 800d9e2:	2301      	movne	r3, #1
 800d9e4:	0692      	lsls	r2, r2, #26
 800d9e6:	d42b      	bmi.n	800da40 <_printf_common+0xb0>
 800d9e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d9ec:	4641      	mov	r1, r8
 800d9ee:	4638      	mov	r0, r7
 800d9f0:	47c8      	blx	r9
 800d9f2:	3001      	adds	r0, #1
 800d9f4:	d01e      	beq.n	800da34 <_printf_common+0xa4>
 800d9f6:	6823      	ldr	r3, [r4, #0]
 800d9f8:	6922      	ldr	r2, [r4, #16]
 800d9fa:	f003 0306 	and.w	r3, r3, #6
 800d9fe:	2b04      	cmp	r3, #4
 800da00:	bf02      	ittt	eq
 800da02:	68e5      	ldreq	r5, [r4, #12]
 800da04:	6833      	ldreq	r3, [r6, #0]
 800da06:	1aed      	subeq	r5, r5, r3
 800da08:	68a3      	ldr	r3, [r4, #8]
 800da0a:	bf0c      	ite	eq
 800da0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da10:	2500      	movne	r5, #0
 800da12:	4293      	cmp	r3, r2
 800da14:	bfc4      	itt	gt
 800da16:	1a9b      	subgt	r3, r3, r2
 800da18:	18ed      	addgt	r5, r5, r3
 800da1a:	2600      	movs	r6, #0
 800da1c:	341a      	adds	r4, #26
 800da1e:	42b5      	cmp	r5, r6
 800da20:	d11a      	bne.n	800da58 <_printf_common+0xc8>
 800da22:	2000      	movs	r0, #0
 800da24:	e008      	b.n	800da38 <_printf_common+0xa8>
 800da26:	2301      	movs	r3, #1
 800da28:	4652      	mov	r2, sl
 800da2a:	4641      	mov	r1, r8
 800da2c:	4638      	mov	r0, r7
 800da2e:	47c8      	blx	r9
 800da30:	3001      	adds	r0, #1
 800da32:	d103      	bne.n	800da3c <_printf_common+0xac>
 800da34:	f04f 30ff 	mov.w	r0, #4294967295
 800da38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da3c:	3501      	adds	r5, #1
 800da3e:	e7c6      	b.n	800d9ce <_printf_common+0x3e>
 800da40:	18e1      	adds	r1, r4, r3
 800da42:	1c5a      	adds	r2, r3, #1
 800da44:	2030      	movs	r0, #48	@ 0x30
 800da46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800da4a:	4422      	add	r2, r4
 800da4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800da50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800da54:	3302      	adds	r3, #2
 800da56:	e7c7      	b.n	800d9e8 <_printf_common+0x58>
 800da58:	2301      	movs	r3, #1
 800da5a:	4622      	mov	r2, r4
 800da5c:	4641      	mov	r1, r8
 800da5e:	4638      	mov	r0, r7
 800da60:	47c8      	blx	r9
 800da62:	3001      	adds	r0, #1
 800da64:	d0e6      	beq.n	800da34 <_printf_common+0xa4>
 800da66:	3601      	adds	r6, #1
 800da68:	e7d9      	b.n	800da1e <_printf_common+0x8e>
	...

0800da6c <_printf_i>:
 800da6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da70:	7e0f      	ldrb	r7, [r1, #24]
 800da72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800da74:	2f78      	cmp	r7, #120	@ 0x78
 800da76:	4691      	mov	r9, r2
 800da78:	4680      	mov	r8, r0
 800da7a:	460c      	mov	r4, r1
 800da7c:	469a      	mov	sl, r3
 800da7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800da82:	d807      	bhi.n	800da94 <_printf_i+0x28>
 800da84:	2f62      	cmp	r7, #98	@ 0x62
 800da86:	d80a      	bhi.n	800da9e <_printf_i+0x32>
 800da88:	2f00      	cmp	r7, #0
 800da8a:	f000 80d2 	beq.w	800dc32 <_printf_i+0x1c6>
 800da8e:	2f58      	cmp	r7, #88	@ 0x58
 800da90:	f000 80b9 	beq.w	800dc06 <_printf_i+0x19a>
 800da94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800da9c:	e03a      	b.n	800db14 <_printf_i+0xa8>
 800da9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800daa2:	2b15      	cmp	r3, #21
 800daa4:	d8f6      	bhi.n	800da94 <_printf_i+0x28>
 800daa6:	a101      	add	r1, pc, #4	@ (adr r1, 800daac <_printf_i+0x40>)
 800daa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800daac:	0800db05 	.word	0x0800db05
 800dab0:	0800db19 	.word	0x0800db19
 800dab4:	0800da95 	.word	0x0800da95
 800dab8:	0800da95 	.word	0x0800da95
 800dabc:	0800da95 	.word	0x0800da95
 800dac0:	0800da95 	.word	0x0800da95
 800dac4:	0800db19 	.word	0x0800db19
 800dac8:	0800da95 	.word	0x0800da95
 800dacc:	0800da95 	.word	0x0800da95
 800dad0:	0800da95 	.word	0x0800da95
 800dad4:	0800da95 	.word	0x0800da95
 800dad8:	0800dc19 	.word	0x0800dc19
 800dadc:	0800db43 	.word	0x0800db43
 800dae0:	0800dbd3 	.word	0x0800dbd3
 800dae4:	0800da95 	.word	0x0800da95
 800dae8:	0800da95 	.word	0x0800da95
 800daec:	0800dc3b 	.word	0x0800dc3b
 800daf0:	0800da95 	.word	0x0800da95
 800daf4:	0800db43 	.word	0x0800db43
 800daf8:	0800da95 	.word	0x0800da95
 800dafc:	0800da95 	.word	0x0800da95
 800db00:	0800dbdb 	.word	0x0800dbdb
 800db04:	6833      	ldr	r3, [r6, #0]
 800db06:	1d1a      	adds	r2, r3, #4
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	6032      	str	r2, [r6, #0]
 800db0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800db14:	2301      	movs	r3, #1
 800db16:	e09d      	b.n	800dc54 <_printf_i+0x1e8>
 800db18:	6833      	ldr	r3, [r6, #0]
 800db1a:	6820      	ldr	r0, [r4, #0]
 800db1c:	1d19      	adds	r1, r3, #4
 800db1e:	6031      	str	r1, [r6, #0]
 800db20:	0606      	lsls	r6, r0, #24
 800db22:	d501      	bpl.n	800db28 <_printf_i+0xbc>
 800db24:	681d      	ldr	r5, [r3, #0]
 800db26:	e003      	b.n	800db30 <_printf_i+0xc4>
 800db28:	0645      	lsls	r5, r0, #25
 800db2a:	d5fb      	bpl.n	800db24 <_printf_i+0xb8>
 800db2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800db30:	2d00      	cmp	r5, #0
 800db32:	da03      	bge.n	800db3c <_printf_i+0xd0>
 800db34:	232d      	movs	r3, #45	@ 0x2d
 800db36:	426d      	negs	r5, r5
 800db38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db3c:	4859      	ldr	r0, [pc, #356]	@ (800dca4 <_printf_i+0x238>)
 800db3e:	230a      	movs	r3, #10
 800db40:	e011      	b.n	800db66 <_printf_i+0xfa>
 800db42:	6821      	ldr	r1, [r4, #0]
 800db44:	6833      	ldr	r3, [r6, #0]
 800db46:	0608      	lsls	r0, r1, #24
 800db48:	f853 5b04 	ldr.w	r5, [r3], #4
 800db4c:	d402      	bmi.n	800db54 <_printf_i+0xe8>
 800db4e:	0649      	lsls	r1, r1, #25
 800db50:	bf48      	it	mi
 800db52:	b2ad      	uxthmi	r5, r5
 800db54:	2f6f      	cmp	r7, #111	@ 0x6f
 800db56:	4853      	ldr	r0, [pc, #332]	@ (800dca4 <_printf_i+0x238>)
 800db58:	6033      	str	r3, [r6, #0]
 800db5a:	bf14      	ite	ne
 800db5c:	230a      	movne	r3, #10
 800db5e:	2308      	moveq	r3, #8
 800db60:	2100      	movs	r1, #0
 800db62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800db66:	6866      	ldr	r6, [r4, #4]
 800db68:	60a6      	str	r6, [r4, #8]
 800db6a:	2e00      	cmp	r6, #0
 800db6c:	bfa2      	ittt	ge
 800db6e:	6821      	ldrge	r1, [r4, #0]
 800db70:	f021 0104 	bicge.w	r1, r1, #4
 800db74:	6021      	strge	r1, [r4, #0]
 800db76:	b90d      	cbnz	r5, 800db7c <_printf_i+0x110>
 800db78:	2e00      	cmp	r6, #0
 800db7a:	d04b      	beq.n	800dc14 <_printf_i+0x1a8>
 800db7c:	4616      	mov	r6, r2
 800db7e:	fbb5 f1f3 	udiv	r1, r5, r3
 800db82:	fb03 5711 	mls	r7, r3, r1, r5
 800db86:	5dc7      	ldrb	r7, [r0, r7]
 800db88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800db8c:	462f      	mov	r7, r5
 800db8e:	42bb      	cmp	r3, r7
 800db90:	460d      	mov	r5, r1
 800db92:	d9f4      	bls.n	800db7e <_printf_i+0x112>
 800db94:	2b08      	cmp	r3, #8
 800db96:	d10b      	bne.n	800dbb0 <_printf_i+0x144>
 800db98:	6823      	ldr	r3, [r4, #0]
 800db9a:	07df      	lsls	r7, r3, #31
 800db9c:	d508      	bpl.n	800dbb0 <_printf_i+0x144>
 800db9e:	6923      	ldr	r3, [r4, #16]
 800dba0:	6861      	ldr	r1, [r4, #4]
 800dba2:	4299      	cmp	r1, r3
 800dba4:	bfde      	ittt	le
 800dba6:	2330      	movle	r3, #48	@ 0x30
 800dba8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dbac:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dbb0:	1b92      	subs	r2, r2, r6
 800dbb2:	6122      	str	r2, [r4, #16]
 800dbb4:	f8cd a000 	str.w	sl, [sp]
 800dbb8:	464b      	mov	r3, r9
 800dbba:	aa03      	add	r2, sp, #12
 800dbbc:	4621      	mov	r1, r4
 800dbbe:	4640      	mov	r0, r8
 800dbc0:	f7ff fee6 	bl	800d990 <_printf_common>
 800dbc4:	3001      	adds	r0, #1
 800dbc6:	d14a      	bne.n	800dc5e <_printf_i+0x1f2>
 800dbc8:	f04f 30ff 	mov.w	r0, #4294967295
 800dbcc:	b004      	add	sp, #16
 800dbce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbd2:	6823      	ldr	r3, [r4, #0]
 800dbd4:	f043 0320 	orr.w	r3, r3, #32
 800dbd8:	6023      	str	r3, [r4, #0]
 800dbda:	4833      	ldr	r0, [pc, #204]	@ (800dca8 <_printf_i+0x23c>)
 800dbdc:	2778      	movs	r7, #120	@ 0x78
 800dbde:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dbe2:	6823      	ldr	r3, [r4, #0]
 800dbe4:	6831      	ldr	r1, [r6, #0]
 800dbe6:	061f      	lsls	r7, r3, #24
 800dbe8:	f851 5b04 	ldr.w	r5, [r1], #4
 800dbec:	d402      	bmi.n	800dbf4 <_printf_i+0x188>
 800dbee:	065f      	lsls	r7, r3, #25
 800dbf0:	bf48      	it	mi
 800dbf2:	b2ad      	uxthmi	r5, r5
 800dbf4:	6031      	str	r1, [r6, #0]
 800dbf6:	07d9      	lsls	r1, r3, #31
 800dbf8:	bf44      	itt	mi
 800dbfa:	f043 0320 	orrmi.w	r3, r3, #32
 800dbfe:	6023      	strmi	r3, [r4, #0]
 800dc00:	b11d      	cbz	r5, 800dc0a <_printf_i+0x19e>
 800dc02:	2310      	movs	r3, #16
 800dc04:	e7ac      	b.n	800db60 <_printf_i+0xf4>
 800dc06:	4827      	ldr	r0, [pc, #156]	@ (800dca4 <_printf_i+0x238>)
 800dc08:	e7e9      	b.n	800dbde <_printf_i+0x172>
 800dc0a:	6823      	ldr	r3, [r4, #0]
 800dc0c:	f023 0320 	bic.w	r3, r3, #32
 800dc10:	6023      	str	r3, [r4, #0]
 800dc12:	e7f6      	b.n	800dc02 <_printf_i+0x196>
 800dc14:	4616      	mov	r6, r2
 800dc16:	e7bd      	b.n	800db94 <_printf_i+0x128>
 800dc18:	6833      	ldr	r3, [r6, #0]
 800dc1a:	6825      	ldr	r5, [r4, #0]
 800dc1c:	6961      	ldr	r1, [r4, #20]
 800dc1e:	1d18      	adds	r0, r3, #4
 800dc20:	6030      	str	r0, [r6, #0]
 800dc22:	062e      	lsls	r6, r5, #24
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	d501      	bpl.n	800dc2c <_printf_i+0x1c0>
 800dc28:	6019      	str	r1, [r3, #0]
 800dc2a:	e002      	b.n	800dc32 <_printf_i+0x1c6>
 800dc2c:	0668      	lsls	r0, r5, #25
 800dc2e:	d5fb      	bpl.n	800dc28 <_printf_i+0x1bc>
 800dc30:	8019      	strh	r1, [r3, #0]
 800dc32:	2300      	movs	r3, #0
 800dc34:	6123      	str	r3, [r4, #16]
 800dc36:	4616      	mov	r6, r2
 800dc38:	e7bc      	b.n	800dbb4 <_printf_i+0x148>
 800dc3a:	6833      	ldr	r3, [r6, #0]
 800dc3c:	1d1a      	adds	r2, r3, #4
 800dc3e:	6032      	str	r2, [r6, #0]
 800dc40:	681e      	ldr	r6, [r3, #0]
 800dc42:	6862      	ldr	r2, [r4, #4]
 800dc44:	2100      	movs	r1, #0
 800dc46:	4630      	mov	r0, r6
 800dc48:	f7f2 faea 	bl	8000220 <memchr>
 800dc4c:	b108      	cbz	r0, 800dc52 <_printf_i+0x1e6>
 800dc4e:	1b80      	subs	r0, r0, r6
 800dc50:	6060      	str	r0, [r4, #4]
 800dc52:	6863      	ldr	r3, [r4, #4]
 800dc54:	6123      	str	r3, [r4, #16]
 800dc56:	2300      	movs	r3, #0
 800dc58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc5c:	e7aa      	b.n	800dbb4 <_printf_i+0x148>
 800dc5e:	6923      	ldr	r3, [r4, #16]
 800dc60:	4632      	mov	r2, r6
 800dc62:	4649      	mov	r1, r9
 800dc64:	4640      	mov	r0, r8
 800dc66:	47d0      	blx	sl
 800dc68:	3001      	adds	r0, #1
 800dc6a:	d0ad      	beq.n	800dbc8 <_printf_i+0x15c>
 800dc6c:	6823      	ldr	r3, [r4, #0]
 800dc6e:	079b      	lsls	r3, r3, #30
 800dc70:	d413      	bmi.n	800dc9a <_printf_i+0x22e>
 800dc72:	68e0      	ldr	r0, [r4, #12]
 800dc74:	9b03      	ldr	r3, [sp, #12]
 800dc76:	4298      	cmp	r0, r3
 800dc78:	bfb8      	it	lt
 800dc7a:	4618      	movlt	r0, r3
 800dc7c:	e7a6      	b.n	800dbcc <_printf_i+0x160>
 800dc7e:	2301      	movs	r3, #1
 800dc80:	4632      	mov	r2, r6
 800dc82:	4649      	mov	r1, r9
 800dc84:	4640      	mov	r0, r8
 800dc86:	47d0      	blx	sl
 800dc88:	3001      	adds	r0, #1
 800dc8a:	d09d      	beq.n	800dbc8 <_printf_i+0x15c>
 800dc8c:	3501      	adds	r5, #1
 800dc8e:	68e3      	ldr	r3, [r4, #12]
 800dc90:	9903      	ldr	r1, [sp, #12]
 800dc92:	1a5b      	subs	r3, r3, r1
 800dc94:	42ab      	cmp	r3, r5
 800dc96:	dcf2      	bgt.n	800dc7e <_printf_i+0x212>
 800dc98:	e7eb      	b.n	800dc72 <_printf_i+0x206>
 800dc9a:	2500      	movs	r5, #0
 800dc9c:	f104 0619 	add.w	r6, r4, #25
 800dca0:	e7f5      	b.n	800dc8e <_printf_i+0x222>
 800dca2:	bf00      	nop
 800dca4:	0801135a 	.word	0x0801135a
 800dca8:	0801136b 	.word	0x0801136b

0800dcac <_scanf_float>:
 800dcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcb0:	b087      	sub	sp, #28
 800dcb2:	4617      	mov	r7, r2
 800dcb4:	9303      	str	r3, [sp, #12]
 800dcb6:	688b      	ldr	r3, [r1, #8]
 800dcb8:	1e5a      	subs	r2, r3, #1
 800dcba:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800dcbe:	bf81      	itttt	hi
 800dcc0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800dcc4:	eb03 0b05 	addhi.w	fp, r3, r5
 800dcc8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800dccc:	608b      	strhi	r3, [r1, #8]
 800dcce:	680b      	ldr	r3, [r1, #0]
 800dcd0:	460a      	mov	r2, r1
 800dcd2:	f04f 0500 	mov.w	r5, #0
 800dcd6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800dcda:	f842 3b1c 	str.w	r3, [r2], #28
 800dcde:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800dce2:	4680      	mov	r8, r0
 800dce4:	460c      	mov	r4, r1
 800dce6:	bf98      	it	ls
 800dce8:	f04f 0b00 	movls.w	fp, #0
 800dcec:	9201      	str	r2, [sp, #4]
 800dcee:	4616      	mov	r6, r2
 800dcf0:	46aa      	mov	sl, r5
 800dcf2:	46a9      	mov	r9, r5
 800dcf4:	9502      	str	r5, [sp, #8]
 800dcf6:	68a2      	ldr	r2, [r4, #8]
 800dcf8:	b152      	cbz	r2, 800dd10 <_scanf_float+0x64>
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	2b4e      	cmp	r3, #78	@ 0x4e
 800dd00:	d864      	bhi.n	800ddcc <_scanf_float+0x120>
 800dd02:	2b40      	cmp	r3, #64	@ 0x40
 800dd04:	d83c      	bhi.n	800dd80 <_scanf_float+0xd4>
 800dd06:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800dd0a:	b2c8      	uxtb	r0, r1
 800dd0c:	280e      	cmp	r0, #14
 800dd0e:	d93a      	bls.n	800dd86 <_scanf_float+0xda>
 800dd10:	f1b9 0f00 	cmp.w	r9, #0
 800dd14:	d003      	beq.n	800dd1e <_scanf_float+0x72>
 800dd16:	6823      	ldr	r3, [r4, #0]
 800dd18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dd1c:	6023      	str	r3, [r4, #0]
 800dd1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd22:	f1ba 0f01 	cmp.w	sl, #1
 800dd26:	f200 8117 	bhi.w	800df58 <_scanf_float+0x2ac>
 800dd2a:	9b01      	ldr	r3, [sp, #4]
 800dd2c:	429e      	cmp	r6, r3
 800dd2e:	f200 8108 	bhi.w	800df42 <_scanf_float+0x296>
 800dd32:	2001      	movs	r0, #1
 800dd34:	b007      	add	sp, #28
 800dd36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd3a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800dd3e:	2a0d      	cmp	r2, #13
 800dd40:	d8e6      	bhi.n	800dd10 <_scanf_float+0x64>
 800dd42:	a101      	add	r1, pc, #4	@ (adr r1, 800dd48 <_scanf_float+0x9c>)
 800dd44:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dd48:	0800de8f 	.word	0x0800de8f
 800dd4c:	0800dd11 	.word	0x0800dd11
 800dd50:	0800dd11 	.word	0x0800dd11
 800dd54:	0800dd11 	.word	0x0800dd11
 800dd58:	0800deef 	.word	0x0800deef
 800dd5c:	0800dec7 	.word	0x0800dec7
 800dd60:	0800dd11 	.word	0x0800dd11
 800dd64:	0800dd11 	.word	0x0800dd11
 800dd68:	0800de9d 	.word	0x0800de9d
 800dd6c:	0800dd11 	.word	0x0800dd11
 800dd70:	0800dd11 	.word	0x0800dd11
 800dd74:	0800dd11 	.word	0x0800dd11
 800dd78:	0800dd11 	.word	0x0800dd11
 800dd7c:	0800de55 	.word	0x0800de55
 800dd80:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800dd84:	e7db      	b.n	800dd3e <_scanf_float+0x92>
 800dd86:	290e      	cmp	r1, #14
 800dd88:	d8c2      	bhi.n	800dd10 <_scanf_float+0x64>
 800dd8a:	a001      	add	r0, pc, #4	@ (adr r0, 800dd90 <_scanf_float+0xe4>)
 800dd8c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800dd90:	0800de45 	.word	0x0800de45
 800dd94:	0800dd11 	.word	0x0800dd11
 800dd98:	0800de45 	.word	0x0800de45
 800dd9c:	0800dedb 	.word	0x0800dedb
 800dda0:	0800dd11 	.word	0x0800dd11
 800dda4:	0800dded 	.word	0x0800dded
 800dda8:	0800de2b 	.word	0x0800de2b
 800ddac:	0800de2b 	.word	0x0800de2b
 800ddb0:	0800de2b 	.word	0x0800de2b
 800ddb4:	0800de2b 	.word	0x0800de2b
 800ddb8:	0800de2b 	.word	0x0800de2b
 800ddbc:	0800de2b 	.word	0x0800de2b
 800ddc0:	0800de2b 	.word	0x0800de2b
 800ddc4:	0800de2b 	.word	0x0800de2b
 800ddc8:	0800de2b 	.word	0x0800de2b
 800ddcc:	2b6e      	cmp	r3, #110	@ 0x6e
 800ddce:	d809      	bhi.n	800dde4 <_scanf_float+0x138>
 800ddd0:	2b60      	cmp	r3, #96	@ 0x60
 800ddd2:	d8b2      	bhi.n	800dd3a <_scanf_float+0x8e>
 800ddd4:	2b54      	cmp	r3, #84	@ 0x54
 800ddd6:	d07b      	beq.n	800ded0 <_scanf_float+0x224>
 800ddd8:	2b59      	cmp	r3, #89	@ 0x59
 800ddda:	d199      	bne.n	800dd10 <_scanf_float+0x64>
 800dddc:	2d07      	cmp	r5, #7
 800ddde:	d197      	bne.n	800dd10 <_scanf_float+0x64>
 800dde0:	2508      	movs	r5, #8
 800dde2:	e02c      	b.n	800de3e <_scanf_float+0x192>
 800dde4:	2b74      	cmp	r3, #116	@ 0x74
 800dde6:	d073      	beq.n	800ded0 <_scanf_float+0x224>
 800dde8:	2b79      	cmp	r3, #121	@ 0x79
 800ddea:	e7f6      	b.n	800ddda <_scanf_float+0x12e>
 800ddec:	6821      	ldr	r1, [r4, #0]
 800ddee:	05c8      	lsls	r0, r1, #23
 800ddf0:	d51b      	bpl.n	800de2a <_scanf_float+0x17e>
 800ddf2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ddf6:	6021      	str	r1, [r4, #0]
 800ddf8:	f109 0901 	add.w	r9, r9, #1
 800ddfc:	f1bb 0f00 	cmp.w	fp, #0
 800de00:	d003      	beq.n	800de0a <_scanf_float+0x15e>
 800de02:	3201      	adds	r2, #1
 800de04:	f10b 3bff 	add.w	fp, fp, #4294967295
 800de08:	60a2      	str	r2, [r4, #8]
 800de0a:	68a3      	ldr	r3, [r4, #8]
 800de0c:	3b01      	subs	r3, #1
 800de0e:	60a3      	str	r3, [r4, #8]
 800de10:	6923      	ldr	r3, [r4, #16]
 800de12:	3301      	adds	r3, #1
 800de14:	6123      	str	r3, [r4, #16]
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	3b01      	subs	r3, #1
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	607b      	str	r3, [r7, #4]
 800de1e:	f340 8087 	ble.w	800df30 <_scanf_float+0x284>
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	3301      	adds	r3, #1
 800de26:	603b      	str	r3, [r7, #0]
 800de28:	e765      	b.n	800dcf6 <_scanf_float+0x4a>
 800de2a:	eb1a 0105 	adds.w	r1, sl, r5
 800de2e:	f47f af6f 	bne.w	800dd10 <_scanf_float+0x64>
 800de32:	6822      	ldr	r2, [r4, #0]
 800de34:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800de38:	6022      	str	r2, [r4, #0]
 800de3a:	460d      	mov	r5, r1
 800de3c:	468a      	mov	sl, r1
 800de3e:	f806 3b01 	strb.w	r3, [r6], #1
 800de42:	e7e2      	b.n	800de0a <_scanf_float+0x15e>
 800de44:	6822      	ldr	r2, [r4, #0]
 800de46:	0610      	lsls	r0, r2, #24
 800de48:	f57f af62 	bpl.w	800dd10 <_scanf_float+0x64>
 800de4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800de50:	6022      	str	r2, [r4, #0]
 800de52:	e7f4      	b.n	800de3e <_scanf_float+0x192>
 800de54:	f1ba 0f00 	cmp.w	sl, #0
 800de58:	d10e      	bne.n	800de78 <_scanf_float+0x1cc>
 800de5a:	f1b9 0f00 	cmp.w	r9, #0
 800de5e:	d10e      	bne.n	800de7e <_scanf_float+0x1d2>
 800de60:	6822      	ldr	r2, [r4, #0]
 800de62:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800de66:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800de6a:	d108      	bne.n	800de7e <_scanf_float+0x1d2>
 800de6c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800de70:	6022      	str	r2, [r4, #0]
 800de72:	f04f 0a01 	mov.w	sl, #1
 800de76:	e7e2      	b.n	800de3e <_scanf_float+0x192>
 800de78:	f1ba 0f02 	cmp.w	sl, #2
 800de7c:	d055      	beq.n	800df2a <_scanf_float+0x27e>
 800de7e:	2d01      	cmp	r5, #1
 800de80:	d002      	beq.n	800de88 <_scanf_float+0x1dc>
 800de82:	2d04      	cmp	r5, #4
 800de84:	f47f af44 	bne.w	800dd10 <_scanf_float+0x64>
 800de88:	3501      	adds	r5, #1
 800de8a:	b2ed      	uxtb	r5, r5
 800de8c:	e7d7      	b.n	800de3e <_scanf_float+0x192>
 800de8e:	f1ba 0f01 	cmp.w	sl, #1
 800de92:	f47f af3d 	bne.w	800dd10 <_scanf_float+0x64>
 800de96:	f04f 0a02 	mov.w	sl, #2
 800de9a:	e7d0      	b.n	800de3e <_scanf_float+0x192>
 800de9c:	b97d      	cbnz	r5, 800debe <_scanf_float+0x212>
 800de9e:	f1b9 0f00 	cmp.w	r9, #0
 800dea2:	f47f af38 	bne.w	800dd16 <_scanf_float+0x6a>
 800dea6:	6822      	ldr	r2, [r4, #0]
 800dea8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800deac:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800deb0:	f040 8108 	bne.w	800e0c4 <_scanf_float+0x418>
 800deb4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800deb8:	6022      	str	r2, [r4, #0]
 800deba:	2501      	movs	r5, #1
 800debc:	e7bf      	b.n	800de3e <_scanf_float+0x192>
 800debe:	2d03      	cmp	r5, #3
 800dec0:	d0e2      	beq.n	800de88 <_scanf_float+0x1dc>
 800dec2:	2d05      	cmp	r5, #5
 800dec4:	e7de      	b.n	800de84 <_scanf_float+0x1d8>
 800dec6:	2d02      	cmp	r5, #2
 800dec8:	f47f af22 	bne.w	800dd10 <_scanf_float+0x64>
 800decc:	2503      	movs	r5, #3
 800dece:	e7b6      	b.n	800de3e <_scanf_float+0x192>
 800ded0:	2d06      	cmp	r5, #6
 800ded2:	f47f af1d 	bne.w	800dd10 <_scanf_float+0x64>
 800ded6:	2507      	movs	r5, #7
 800ded8:	e7b1      	b.n	800de3e <_scanf_float+0x192>
 800deda:	6822      	ldr	r2, [r4, #0]
 800dedc:	0591      	lsls	r1, r2, #22
 800dede:	f57f af17 	bpl.w	800dd10 <_scanf_float+0x64>
 800dee2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800dee6:	6022      	str	r2, [r4, #0]
 800dee8:	f8cd 9008 	str.w	r9, [sp, #8]
 800deec:	e7a7      	b.n	800de3e <_scanf_float+0x192>
 800deee:	6822      	ldr	r2, [r4, #0]
 800def0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800def4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800def8:	d006      	beq.n	800df08 <_scanf_float+0x25c>
 800defa:	0550      	lsls	r0, r2, #21
 800defc:	f57f af08 	bpl.w	800dd10 <_scanf_float+0x64>
 800df00:	f1b9 0f00 	cmp.w	r9, #0
 800df04:	f000 80de 	beq.w	800e0c4 <_scanf_float+0x418>
 800df08:	0591      	lsls	r1, r2, #22
 800df0a:	bf58      	it	pl
 800df0c:	9902      	ldrpl	r1, [sp, #8]
 800df0e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800df12:	bf58      	it	pl
 800df14:	eba9 0101 	subpl.w	r1, r9, r1
 800df18:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800df1c:	bf58      	it	pl
 800df1e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800df22:	6022      	str	r2, [r4, #0]
 800df24:	f04f 0900 	mov.w	r9, #0
 800df28:	e789      	b.n	800de3e <_scanf_float+0x192>
 800df2a:	f04f 0a03 	mov.w	sl, #3
 800df2e:	e786      	b.n	800de3e <_scanf_float+0x192>
 800df30:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800df34:	4639      	mov	r1, r7
 800df36:	4640      	mov	r0, r8
 800df38:	4798      	blx	r3
 800df3a:	2800      	cmp	r0, #0
 800df3c:	f43f aedb 	beq.w	800dcf6 <_scanf_float+0x4a>
 800df40:	e6e6      	b.n	800dd10 <_scanf_float+0x64>
 800df42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800df46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800df4a:	463a      	mov	r2, r7
 800df4c:	4640      	mov	r0, r8
 800df4e:	4798      	blx	r3
 800df50:	6923      	ldr	r3, [r4, #16]
 800df52:	3b01      	subs	r3, #1
 800df54:	6123      	str	r3, [r4, #16]
 800df56:	e6e8      	b.n	800dd2a <_scanf_float+0x7e>
 800df58:	1e6b      	subs	r3, r5, #1
 800df5a:	2b06      	cmp	r3, #6
 800df5c:	d824      	bhi.n	800dfa8 <_scanf_float+0x2fc>
 800df5e:	2d02      	cmp	r5, #2
 800df60:	d836      	bhi.n	800dfd0 <_scanf_float+0x324>
 800df62:	9b01      	ldr	r3, [sp, #4]
 800df64:	429e      	cmp	r6, r3
 800df66:	f67f aee4 	bls.w	800dd32 <_scanf_float+0x86>
 800df6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800df6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800df72:	463a      	mov	r2, r7
 800df74:	4640      	mov	r0, r8
 800df76:	4798      	blx	r3
 800df78:	6923      	ldr	r3, [r4, #16]
 800df7a:	3b01      	subs	r3, #1
 800df7c:	6123      	str	r3, [r4, #16]
 800df7e:	e7f0      	b.n	800df62 <_scanf_float+0x2b6>
 800df80:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800df84:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800df88:	463a      	mov	r2, r7
 800df8a:	4640      	mov	r0, r8
 800df8c:	4798      	blx	r3
 800df8e:	6923      	ldr	r3, [r4, #16]
 800df90:	3b01      	subs	r3, #1
 800df92:	6123      	str	r3, [r4, #16]
 800df94:	f10a 3aff 	add.w	sl, sl, #4294967295
 800df98:	fa5f fa8a 	uxtb.w	sl, sl
 800df9c:	f1ba 0f02 	cmp.w	sl, #2
 800dfa0:	d1ee      	bne.n	800df80 <_scanf_float+0x2d4>
 800dfa2:	3d03      	subs	r5, #3
 800dfa4:	b2ed      	uxtb	r5, r5
 800dfa6:	1b76      	subs	r6, r6, r5
 800dfa8:	6823      	ldr	r3, [r4, #0]
 800dfaa:	05da      	lsls	r2, r3, #23
 800dfac:	d530      	bpl.n	800e010 <_scanf_float+0x364>
 800dfae:	055b      	lsls	r3, r3, #21
 800dfb0:	d511      	bpl.n	800dfd6 <_scanf_float+0x32a>
 800dfb2:	9b01      	ldr	r3, [sp, #4]
 800dfb4:	429e      	cmp	r6, r3
 800dfb6:	f67f aebc 	bls.w	800dd32 <_scanf_float+0x86>
 800dfba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dfbe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dfc2:	463a      	mov	r2, r7
 800dfc4:	4640      	mov	r0, r8
 800dfc6:	4798      	blx	r3
 800dfc8:	6923      	ldr	r3, [r4, #16]
 800dfca:	3b01      	subs	r3, #1
 800dfcc:	6123      	str	r3, [r4, #16]
 800dfce:	e7f0      	b.n	800dfb2 <_scanf_float+0x306>
 800dfd0:	46aa      	mov	sl, r5
 800dfd2:	46b3      	mov	fp, r6
 800dfd4:	e7de      	b.n	800df94 <_scanf_float+0x2e8>
 800dfd6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dfda:	6923      	ldr	r3, [r4, #16]
 800dfdc:	2965      	cmp	r1, #101	@ 0x65
 800dfde:	f103 33ff 	add.w	r3, r3, #4294967295
 800dfe2:	f106 35ff 	add.w	r5, r6, #4294967295
 800dfe6:	6123      	str	r3, [r4, #16]
 800dfe8:	d00c      	beq.n	800e004 <_scanf_float+0x358>
 800dfea:	2945      	cmp	r1, #69	@ 0x45
 800dfec:	d00a      	beq.n	800e004 <_scanf_float+0x358>
 800dfee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dff2:	463a      	mov	r2, r7
 800dff4:	4640      	mov	r0, r8
 800dff6:	4798      	blx	r3
 800dff8:	6923      	ldr	r3, [r4, #16]
 800dffa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800dffe:	3b01      	subs	r3, #1
 800e000:	1eb5      	subs	r5, r6, #2
 800e002:	6123      	str	r3, [r4, #16]
 800e004:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e008:	463a      	mov	r2, r7
 800e00a:	4640      	mov	r0, r8
 800e00c:	4798      	blx	r3
 800e00e:	462e      	mov	r6, r5
 800e010:	6822      	ldr	r2, [r4, #0]
 800e012:	f012 0210 	ands.w	r2, r2, #16
 800e016:	d001      	beq.n	800e01c <_scanf_float+0x370>
 800e018:	2000      	movs	r0, #0
 800e01a:	e68b      	b.n	800dd34 <_scanf_float+0x88>
 800e01c:	7032      	strb	r2, [r6, #0]
 800e01e:	6823      	ldr	r3, [r4, #0]
 800e020:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e024:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e028:	d11c      	bne.n	800e064 <_scanf_float+0x3b8>
 800e02a:	9b02      	ldr	r3, [sp, #8]
 800e02c:	454b      	cmp	r3, r9
 800e02e:	eba3 0209 	sub.w	r2, r3, r9
 800e032:	d123      	bne.n	800e07c <_scanf_float+0x3d0>
 800e034:	9901      	ldr	r1, [sp, #4]
 800e036:	2200      	movs	r2, #0
 800e038:	4640      	mov	r0, r8
 800e03a:	f7ff f9d9 	bl	800d3f0 <_strtod_r>
 800e03e:	9b03      	ldr	r3, [sp, #12]
 800e040:	6821      	ldr	r1, [r4, #0]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f011 0f02 	tst.w	r1, #2
 800e048:	ec57 6b10 	vmov	r6, r7, d0
 800e04c:	f103 0204 	add.w	r2, r3, #4
 800e050:	d01f      	beq.n	800e092 <_scanf_float+0x3e6>
 800e052:	9903      	ldr	r1, [sp, #12]
 800e054:	600a      	str	r2, [r1, #0]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	e9c3 6700 	strd	r6, r7, [r3]
 800e05c:	68e3      	ldr	r3, [r4, #12]
 800e05e:	3301      	adds	r3, #1
 800e060:	60e3      	str	r3, [r4, #12]
 800e062:	e7d9      	b.n	800e018 <_scanf_float+0x36c>
 800e064:	9b04      	ldr	r3, [sp, #16]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d0e4      	beq.n	800e034 <_scanf_float+0x388>
 800e06a:	9905      	ldr	r1, [sp, #20]
 800e06c:	230a      	movs	r3, #10
 800e06e:	3101      	adds	r1, #1
 800e070:	4640      	mov	r0, r8
 800e072:	f002 f9e9 	bl	8010448 <_strtol_r>
 800e076:	9b04      	ldr	r3, [sp, #16]
 800e078:	9e05      	ldr	r6, [sp, #20]
 800e07a:	1ac2      	subs	r2, r0, r3
 800e07c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e080:	429e      	cmp	r6, r3
 800e082:	bf28      	it	cs
 800e084:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e088:	4910      	ldr	r1, [pc, #64]	@ (800e0cc <_scanf_float+0x420>)
 800e08a:	4630      	mov	r0, r6
 800e08c:	f000 f8e4 	bl	800e258 <siprintf>
 800e090:	e7d0      	b.n	800e034 <_scanf_float+0x388>
 800e092:	f011 0f04 	tst.w	r1, #4
 800e096:	9903      	ldr	r1, [sp, #12]
 800e098:	600a      	str	r2, [r1, #0]
 800e09a:	d1dc      	bne.n	800e056 <_scanf_float+0x3aa>
 800e09c:	681d      	ldr	r5, [r3, #0]
 800e09e:	4632      	mov	r2, r6
 800e0a0:	463b      	mov	r3, r7
 800e0a2:	4630      	mov	r0, r6
 800e0a4:	4639      	mov	r1, r7
 800e0a6:	f7f2 fd69 	bl	8000b7c <__aeabi_dcmpun>
 800e0aa:	b128      	cbz	r0, 800e0b8 <_scanf_float+0x40c>
 800e0ac:	4808      	ldr	r0, [pc, #32]	@ (800e0d0 <_scanf_float+0x424>)
 800e0ae:	f000 f9ff 	bl	800e4b0 <nanf>
 800e0b2:	ed85 0a00 	vstr	s0, [r5]
 800e0b6:	e7d1      	b.n	800e05c <_scanf_float+0x3b0>
 800e0b8:	4630      	mov	r0, r6
 800e0ba:	4639      	mov	r1, r7
 800e0bc:	f7f2 fdbc 	bl	8000c38 <__aeabi_d2f>
 800e0c0:	6028      	str	r0, [r5, #0]
 800e0c2:	e7cb      	b.n	800e05c <_scanf_float+0x3b0>
 800e0c4:	f04f 0900 	mov.w	r9, #0
 800e0c8:	e629      	b.n	800dd1e <_scanf_float+0x72>
 800e0ca:	bf00      	nop
 800e0cc:	0801137c 	.word	0x0801137c
 800e0d0:	0801171d 	.word	0x0801171d

0800e0d4 <std>:
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	b510      	push	{r4, lr}
 800e0d8:	4604      	mov	r4, r0
 800e0da:	e9c0 3300 	strd	r3, r3, [r0]
 800e0de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e0e2:	6083      	str	r3, [r0, #8]
 800e0e4:	8181      	strh	r1, [r0, #12]
 800e0e6:	6643      	str	r3, [r0, #100]	@ 0x64
 800e0e8:	81c2      	strh	r2, [r0, #14]
 800e0ea:	6183      	str	r3, [r0, #24]
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	2208      	movs	r2, #8
 800e0f0:	305c      	adds	r0, #92	@ 0x5c
 800e0f2:	f000 f935 	bl	800e360 <memset>
 800e0f6:	4b0d      	ldr	r3, [pc, #52]	@ (800e12c <std+0x58>)
 800e0f8:	6263      	str	r3, [r4, #36]	@ 0x24
 800e0fa:	4b0d      	ldr	r3, [pc, #52]	@ (800e130 <std+0x5c>)
 800e0fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e0fe:	4b0d      	ldr	r3, [pc, #52]	@ (800e134 <std+0x60>)
 800e100:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e102:	4b0d      	ldr	r3, [pc, #52]	@ (800e138 <std+0x64>)
 800e104:	6323      	str	r3, [r4, #48]	@ 0x30
 800e106:	4b0d      	ldr	r3, [pc, #52]	@ (800e13c <std+0x68>)
 800e108:	6224      	str	r4, [r4, #32]
 800e10a:	429c      	cmp	r4, r3
 800e10c:	d006      	beq.n	800e11c <std+0x48>
 800e10e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e112:	4294      	cmp	r4, r2
 800e114:	d002      	beq.n	800e11c <std+0x48>
 800e116:	33d0      	adds	r3, #208	@ 0xd0
 800e118:	429c      	cmp	r4, r3
 800e11a:	d105      	bne.n	800e128 <std+0x54>
 800e11c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e124:	f000 b9aa 	b.w	800e47c <__retarget_lock_init_recursive>
 800e128:	bd10      	pop	{r4, pc}
 800e12a:	bf00      	nop
 800e12c:	0800e299 	.word	0x0800e299
 800e130:	0800e2bb 	.word	0x0800e2bb
 800e134:	0800e2f3 	.word	0x0800e2f3
 800e138:	0800e317 	.word	0x0800e317
 800e13c:	20000988 	.word	0x20000988

0800e140 <stdio_exit_handler>:
 800e140:	4a02      	ldr	r2, [pc, #8]	@ (800e14c <stdio_exit_handler+0xc>)
 800e142:	4903      	ldr	r1, [pc, #12]	@ (800e150 <stdio_exit_handler+0x10>)
 800e144:	4803      	ldr	r0, [pc, #12]	@ (800e154 <stdio_exit_handler+0x14>)
 800e146:	f000 b869 	b.w	800e21c <_fwalk_sglue>
 800e14a:	bf00      	nop
 800e14c:	200000b4 	.word	0x200000b4
 800e150:	0801081d 	.word	0x0801081d
 800e154:	20000230 	.word	0x20000230

0800e158 <cleanup_stdio>:
 800e158:	6841      	ldr	r1, [r0, #4]
 800e15a:	4b0c      	ldr	r3, [pc, #48]	@ (800e18c <cleanup_stdio+0x34>)
 800e15c:	4299      	cmp	r1, r3
 800e15e:	b510      	push	{r4, lr}
 800e160:	4604      	mov	r4, r0
 800e162:	d001      	beq.n	800e168 <cleanup_stdio+0x10>
 800e164:	f002 fb5a 	bl	801081c <_fflush_r>
 800e168:	68a1      	ldr	r1, [r4, #8]
 800e16a:	4b09      	ldr	r3, [pc, #36]	@ (800e190 <cleanup_stdio+0x38>)
 800e16c:	4299      	cmp	r1, r3
 800e16e:	d002      	beq.n	800e176 <cleanup_stdio+0x1e>
 800e170:	4620      	mov	r0, r4
 800e172:	f002 fb53 	bl	801081c <_fflush_r>
 800e176:	68e1      	ldr	r1, [r4, #12]
 800e178:	4b06      	ldr	r3, [pc, #24]	@ (800e194 <cleanup_stdio+0x3c>)
 800e17a:	4299      	cmp	r1, r3
 800e17c:	d004      	beq.n	800e188 <cleanup_stdio+0x30>
 800e17e:	4620      	mov	r0, r4
 800e180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e184:	f002 bb4a 	b.w	801081c <_fflush_r>
 800e188:	bd10      	pop	{r4, pc}
 800e18a:	bf00      	nop
 800e18c:	20000988 	.word	0x20000988
 800e190:	200009f0 	.word	0x200009f0
 800e194:	20000a58 	.word	0x20000a58

0800e198 <global_stdio_init.part.0>:
 800e198:	b510      	push	{r4, lr}
 800e19a:	4b0b      	ldr	r3, [pc, #44]	@ (800e1c8 <global_stdio_init.part.0+0x30>)
 800e19c:	4c0b      	ldr	r4, [pc, #44]	@ (800e1cc <global_stdio_init.part.0+0x34>)
 800e19e:	4a0c      	ldr	r2, [pc, #48]	@ (800e1d0 <global_stdio_init.part.0+0x38>)
 800e1a0:	601a      	str	r2, [r3, #0]
 800e1a2:	4620      	mov	r0, r4
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	2104      	movs	r1, #4
 800e1a8:	f7ff ff94 	bl	800e0d4 <std>
 800e1ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e1b0:	2201      	movs	r2, #1
 800e1b2:	2109      	movs	r1, #9
 800e1b4:	f7ff ff8e 	bl	800e0d4 <std>
 800e1b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e1bc:	2202      	movs	r2, #2
 800e1be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1c2:	2112      	movs	r1, #18
 800e1c4:	f7ff bf86 	b.w	800e0d4 <std>
 800e1c8:	20000ac0 	.word	0x20000ac0
 800e1cc:	20000988 	.word	0x20000988
 800e1d0:	0800e141 	.word	0x0800e141

0800e1d4 <__sfp_lock_acquire>:
 800e1d4:	4801      	ldr	r0, [pc, #4]	@ (800e1dc <__sfp_lock_acquire+0x8>)
 800e1d6:	f000 b952 	b.w	800e47e <__retarget_lock_acquire_recursive>
 800e1da:	bf00      	nop
 800e1dc:	20000ac9 	.word	0x20000ac9

0800e1e0 <__sfp_lock_release>:
 800e1e0:	4801      	ldr	r0, [pc, #4]	@ (800e1e8 <__sfp_lock_release+0x8>)
 800e1e2:	f000 b94d 	b.w	800e480 <__retarget_lock_release_recursive>
 800e1e6:	bf00      	nop
 800e1e8:	20000ac9 	.word	0x20000ac9

0800e1ec <__sinit>:
 800e1ec:	b510      	push	{r4, lr}
 800e1ee:	4604      	mov	r4, r0
 800e1f0:	f7ff fff0 	bl	800e1d4 <__sfp_lock_acquire>
 800e1f4:	6a23      	ldr	r3, [r4, #32]
 800e1f6:	b11b      	cbz	r3, 800e200 <__sinit+0x14>
 800e1f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1fc:	f7ff bff0 	b.w	800e1e0 <__sfp_lock_release>
 800e200:	4b04      	ldr	r3, [pc, #16]	@ (800e214 <__sinit+0x28>)
 800e202:	6223      	str	r3, [r4, #32]
 800e204:	4b04      	ldr	r3, [pc, #16]	@ (800e218 <__sinit+0x2c>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d1f5      	bne.n	800e1f8 <__sinit+0xc>
 800e20c:	f7ff ffc4 	bl	800e198 <global_stdio_init.part.0>
 800e210:	e7f2      	b.n	800e1f8 <__sinit+0xc>
 800e212:	bf00      	nop
 800e214:	0800e159 	.word	0x0800e159
 800e218:	20000ac0 	.word	0x20000ac0

0800e21c <_fwalk_sglue>:
 800e21c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e220:	4607      	mov	r7, r0
 800e222:	4688      	mov	r8, r1
 800e224:	4614      	mov	r4, r2
 800e226:	2600      	movs	r6, #0
 800e228:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e22c:	f1b9 0901 	subs.w	r9, r9, #1
 800e230:	d505      	bpl.n	800e23e <_fwalk_sglue+0x22>
 800e232:	6824      	ldr	r4, [r4, #0]
 800e234:	2c00      	cmp	r4, #0
 800e236:	d1f7      	bne.n	800e228 <_fwalk_sglue+0xc>
 800e238:	4630      	mov	r0, r6
 800e23a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e23e:	89ab      	ldrh	r3, [r5, #12]
 800e240:	2b01      	cmp	r3, #1
 800e242:	d907      	bls.n	800e254 <_fwalk_sglue+0x38>
 800e244:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e248:	3301      	adds	r3, #1
 800e24a:	d003      	beq.n	800e254 <_fwalk_sglue+0x38>
 800e24c:	4629      	mov	r1, r5
 800e24e:	4638      	mov	r0, r7
 800e250:	47c0      	blx	r8
 800e252:	4306      	orrs	r6, r0
 800e254:	3568      	adds	r5, #104	@ 0x68
 800e256:	e7e9      	b.n	800e22c <_fwalk_sglue+0x10>

0800e258 <siprintf>:
 800e258:	b40e      	push	{r1, r2, r3}
 800e25a:	b500      	push	{lr}
 800e25c:	b09c      	sub	sp, #112	@ 0x70
 800e25e:	ab1d      	add	r3, sp, #116	@ 0x74
 800e260:	9002      	str	r0, [sp, #8]
 800e262:	9006      	str	r0, [sp, #24]
 800e264:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e268:	4809      	ldr	r0, [pc, #36]	@ (800e290 <siprintf+0x38>)
 800e26a:	9107      	str	r1, [sp, #28]
 800e26c:	9104      	str	r1, [sp, #16]
 800e26e:	4909      	ldr	r1, [pc, #36]	@ (800e294 <siprintf+0x3c>)
 800e270:	f853 2b04 	ldr.w	r2, [r3], #4
 800e274:	9105      	str	r1, [sp, #20]
 800e276:	6800      	ldr	r0, [r0, #0]
 800e278:	9301      	str	r3, [sp, #4]
 800e27a:	a902      	add	r1, sp, #8
 800e27c:	f002 f94e 	bl	801051c <_svfiprintf_r>
 800e280:	9b02      	ldr	r3, [sp, #8]
 800e282:	2200      	movs	r2, #0
 800e284:	701a      	strb	r2, [r3, #0]
 800e286:	b01c      	add	sp, #112	@ 0x70
 800e288:	f85d eb04 	ldr.w	lr, [sp], #4
 800e28c:	b003      	add	sp, #12
 800e28e:	4770      	bx	lr
 800e290:	2000022c 	.word	0x2000022c
 800e294:	ffff0208 	.word	0xffff0208

0800e298 <__sread>:
 800e298:	b510      	push	{r4, lr}
 800e29a:	460c      	mov	r4, r1
 800e29c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2a0:	f000 f89e 	bl	800e3e0 <_read_r>
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	bfab      	itete	ge
 800e2a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e2aa:	89a3      	ldrhlt	r3, [r4, #12]
 800e2ac:	181b      	addge	r3, r3, r0
 800e2ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e2b2:	bfac      	ite	ge
 800e2b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e2b6:	81a3      	strhlt	r3, [r4, #12]
 800e2b8:	bd10      	pop	{r4, pc}

0800e2ba <__swrite>:
 800e2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2be:	461f      	mov	r7, r3
 800e2c0:	898b      	ldrh	r3, [r1, #12]
 800e2c2:	05db      	lsls	r3, r3, #23
 800e2c4:	4605      	mov	r5, r0
 800e2c6:	460c      	mov	r4, r1
 800e2c8:	4616      	mov	r6, r2
 800e2ca:	d505      	bpl.n	800e2d8 <__swrite+0x1e>
 800e2cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2d0:	2302      	movs	r3, #2
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	f000 f872 	bl	800e3bc <_lseek_r>
 800e2d8:	89a3      	ldrh	r3, [r4, #12]
 800e2da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e2e2:	81a3      	strh	r3, [r4, #12]
 800e2e4:	4632      	mov	r2, r6
 800e2e6:	463b      	mov	r3, r7
 800e2e8:	4628      	mov	r0, r5
 800e2ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ee:	f000 b889 	b.w	800e404 <_write_r>

0800e2f2 <__sseek>:
 800e2f2:	b510      	push	{r4, lr}
 800e2f4:	460c      	mov	r4, r1
 800e2f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2fa:	f000 f85f 	bl	800e3bc <_lseek_r>
 800e2fe:	1c43      	adds	r3, r0, #1
 800e300:	89a3      	ldrh	r3, [r4, #12]
 800e302:	bf15      	itete	ne
 800e304:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e306:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e30a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e30e:	81a3      	strheq	r3, [r4, #12]
 800e310:	bf18      	it	ne
 800e312:	81a3      	strhne	r3, [r4, #12]
 800e314:	bd10      	pop	{r4, pc}

0800e316 <__sclose>:
 800e316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e31a:	f000 b83f 	b.w	800e39c <_close_r>
	...

0800e320 <_vsiprintf_r>:
 800e320:	b500      	push	{lr}
 800e322:	b09b      	sub	sp, #108	@ 0x6c
 800e324:	9100      	str	r1, [sp, #0]
 800e326:	9104      	str	r1, [sp, #16]
 800e328:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e32c:	9105      	str	r1, [sp, #20]
 800e32e:	9102      	str	r1, [sp, #8]
 800e330:	4905      	ldr	r1, [pc, #20]	@ (800e348 <_vsiprintf_r+0x28>)
 800e332:	9103      	str	r1, [sp, #12]
 800e334:	4669      	mov	r1, sp
 800e336:	f002 f8f1 	bl	801051c <_svfiprintf_r>
 800e33a:	9b00      	ldr	r3, [sp, #0]
 800e33c:	2200      	movs	r2, #0
 800e33e:	701a      	strb	r2, [r3, #0]
 800e340:	b01b      	add	sp, #108	@ 0x6c
 800e342:	f85d fb04 	ldr.w	pc, [sp], #4
 800e346:	bf00      	nop
 800e348:	ffff0208 	.word	0xffff0208

0800e34c <vsiprintf>:
 800e34c:	4613      	mov	r3, r2
 800e34e:	460a      	mov	r2, r1
 800e350:	4601      	mov	r1, r0
 800e352:	4802      	ldr	r0, [pc, #8]	@ (800e35c <vsiprintf+0x10>)
 800e354:	6800      	ldr	r0, [r0, #0]
 800e356:	f7ff bfe3 	b.w	800e320 <_vsiprintf_r>
 800e35a:	bf00      	nop
 800e35c:	2000022c 	.word	0x2000022c

0800e360 <memset>:
 800e360:	4402      	add	r2, r0
 800e362:	4603      	mov	r3, r0
 800e364:	4293      	cmp	r3, r2
 800e366:	d100      	bne.n	800e36a <memset+0xa>
 800e368:	4770      	bx	lr
 800e36a:	f803 1b01 	strb.w	r1, [r3], #1
 800e36e:	e7f9      	b.n	800e364 <memset+0x4>

0800e370 <strncmp>:
 800e370:	b510      	push	{r4, lr}
 800e372:	b16a      	cbz	r2, 800e390 <strncmp+0x20>
 800e374:	3901      	subs	r1, #1
 800e376:	1884      	adds	r4, r0, r2
 800e378:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e37c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e380:	429a      	cmp	r2, r3
 800e382:	d103      	bne.n	800e38c <strncmp+0x1c>
 800e384:	42a0      	cmp	r0, r4
 800e386:	d001      	beq.n	800e38c <strncmp+0x1c>
 800e388:	2a00      	cmp	r2, #0
 800e38a:	d1f5      	bne.n	800e378 <strncmp+0x8>
 800e38c:	1ad0      	subs	r0, r2, r3
 800e38e:	bd10      	pop	{r4, pc}
 800e390:	4610      	mov	r0, r2
 800e392:	e7fc      	b.n	800e38e <strncmp+0x1e>

0800e394 <_localeconv_r>:
 800e394:	4800      	ldr	r0, [pc, #0]	@ (800e398 <_localeconv_r+0x4>)
 800e396:	4770      	bx	lr
 800e398:	200001b0 	.word	0x200001b0

0800e39c <_close_r>:
 800e39c:	b538      	push	{r3, r4, r5, lr}
 800e39e:	4d06      	ldr	r5, [pc, #24]	@ (800e3b8 <_close_r+0x1c>)
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	4604      	mov	r4, r0
 800e3a4:	4608      	mov	r0, r1
 800e3a6:	602b      	str	r3, [r5, #0]
 800e3a8:	f7f3 fc32 	bl	8001c10 <_close>
 800e3ac:	1c43      	adds	r3, r0, #1
 800e3ae:	d102      	bne.n	800e3b6 <_close_r+0x1a>
 800e3b0:	682b      	ldr	r3, [r5, #0]
 800e3b2:	b103      	cbz	r3, 800e3b6 <_close_r+0x1a>
 800e3b4:	6023      	str	r3, [r4, #0]
 800e3b6:	bd38      	pop	{r3, r4, r5, pc}
 800e3b8:	20000ac4 	.word	0x20000ac4

0800e3bc <_lseek_r>:
 800e3bc:	b538      	push	{r3, r4, r5, lr}
 800e3be:	4d07      	ldr	r5, [pc, #28]	@ (800e3dc <_lseek_r+0x20>)
 800e3c0:	4604      	mov	r4, r0
 800e3c2:	4608      	mov	r0, r1
 800e3c4:	4611      	mov	r1, r2
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	602a      	str	r2, [r5, #0]
 800e3ca:	461a      	mov	r2, r3
 800e3cc:	f7f3 fc47 	bl	8001c5e <_lseek>
 800e3d0:	1c43      	adds	r3, r0, #1
 800e3d2:	d102      	bne.n	800e3da <_lseek_r+0x1e>
 800e3d4:	682b      	ldr	r3, [r5, #0]
 800e3d6:	b103      	cbz	r3, 800e3da <_lseek_r+0x1e>
 800e3d8:	6023      	str	r3, [r4, #0]
 800e3da:	bd38      	pop	{r3, r4, r5, pc}
 800e3dc:	20000ac4 	.word	0x20000ac4

0800e3e0 <_read_r>:
 800e3e0:	b538      	push	{r3, r4, r5, lr}
 800e3e2:	4d07      	ldr	r5, [pc, #28]	@ (800e400 <_read_r+0x20>)
 800e3e4:	4604      	mov	r4, r0
 800e3e6:	4608      	mov	r0, r1
 800e3e8:	4611      	mov	r1, r2
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	602a      	str	r2, [r5, #0]
 800e3ee:	461a      	mov	r2, r3
 800e3f0:	f7f3 fbd5 	bl	8001b9e <_read>
 800e3f4:	1c43      	adds	r3, r0, #1
 800e3f6:	d102      	bne.n	800e3fe <_read_r+0x1e>
 800e3f8:	682b      	ldr	r3, [r5, #0]
 800e3fa:	b103      	cbz	r3, 800e3fe <_read_r+0x1e>
 800e3fc:	6023      	str	r3, [r4, #0]
 800e3fe:	bd38      	pop	{r3, r4, r5, pc}
 800e400:	20000ac4 	.word	0x20000ac4

0800e404 <_write_r>:
 800e404:	b538      	push	{r3, r4, r5, lr}
 800e406:	4d07      	ldr	r5, [pc, #28]	@ (800e424 <_write_r+0x20>)
 800e408:	4604      	mov	r4, r0
 800e40a:	4608      	mov	r0, r1
 800e40c:	4611      	mov	r1, r2
 800e40e:	2200      	movs	r2, #0
 800e410:	602a      	str	r2, [r5, #0]
 800e412:	461a      	mov	r2, r3
 800e414:	f7f3 fbe0 	bl	8001bd8 <_write>
 800e418:	1c43      	adds	r3, r0, #1
 800e41a:	d102      	bne.n	800e422 <_write_r+0x1e>
 800e41c:	682b      	ldr	r3, [r5, #0]
 800e41e:	b103      	cbz	r3, 800e422 <_write_r+0x1e>
 800e420:	6023      	str	r3, [r4, #0]
 800e422:	bd38      	pop	{r3, r4, r5, pc}
 800e424:	20000ac4 	.word	0x20000ac4

0800e428 <__errno>:
 800e428:	4b01      	ldr	r3, [pc, #4]	@ (800e430 <__errno+0x8>)
 800e42a:	6818      	ldr	r0, [r3, #0]
 800e42c:	4770      	bx	lr
 800e42e:	bf00      	nop
 800e430:	2000022c 	.word	0x2000022c

0800e434 <__libc_init_array>:
 800e434:	b570      	push	{r4, r5, r6, lr}
 800e436:	4d0d      	ldr	r5, [pc, #52]	@ (800e46c <__libc_init_array+0x38>)
 800e438:	4c0d      	ldr	r4, [pc, #52]	@ (800e470 <__libc_init_array+0x3c>)
 800e43a:	1b64      	subs	r4, r4, r5
 800e43c:	10a4      	asrs	r4, r4, #2
 800e43e:	2600      	movs	r6, #0
 800e440:	42a6      	cmp	r6, r4
 800e442:	d109      	bne.n	800e458 <__libc_init_array+0x24>
 800e444:	4d0b      	ldr	r5, [pc, #44]	@ (800e474 <__libc_init_array+0x40>)
 800e446:	4c0c      	ldr	r4, [pc, #48]	@ (800e478 <__libc_init_array+0x44>)
 800e448:	f002 fe90 	bl	801116c <_init>
 800e44c:	1b64      	subs	r4, r4, r5
 800e44e:	10a4      	asrs	r4, r4, #2
 800e450:	2600      	movs	r6, #0
 800e452:	42a6      	cmp	r6, r4
 800e454:	d105      	bne.n	800e462 <__libc_init_array+0x2e>
 800e456:	bd70      	pop	{r4, r5, r6, pc}
 800e458:	f855 3b04 	ldr.w	r3, [r5], #4
 800e45c:	4798      	blx	r3
 800e45e:	3601      	adds	r6, #1
 800e460:	e7ee      	b.n	800e440 <__libc_init_array+0xc>
 800e462:	f855 3b04 	ldr.w	r3, [r5], #4
 800e466:	4798      	blx	r3
 800e468:	3601      	adds	r6, #1
 800e46a:	e7f2      	b.n	800e452 <__libc_init_array+0x1e>
 800e46c:	08011738 	.word	0x08011738
 800e470:	08011738 	.word	0x08011738
 800e474:	08011738 	.word	0x08011738
 800e478:	0801173c 	.word	0x0801173c

0800e47c <__retarget_lock_init_recursive>:
 800e47c:	4770      	bx	lr

0800e47e <__retarget_lock_acquire_recursive>:
 800e47e:	4770      	bx	lr

0800e480 <__retarget_lock_release_recursive>:
 800e480:	4770      	bx	lr

0800e482 <memcpy>:
 800e482:	440a      	add	r2, r1
 800e484:	4291      	cmp	r1, r2
 800e486:	f100 33ff 	add.w	r3, r0, #4294967295
 800e48a:	d100      	bne.n	800e48e <memcpy+0xc>
 800e48c:	4770      	bx	lr
 800e48e:	b510      	push	{r4, lr}
 800e490:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e494:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e498:	4291      	cmp	r1, r2
 800e49a:	d1f9      	bne.n	800e490 <memcpy+0xe>
 800e49c:	bd10      	pop	{r4, pc}
	...

0800e4a0 <nan>:
 800e4a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e4a8 <nan+0x8>
 800e4a4:	4770      	bx	lr
 800e4a6:	bf00      	nop
 800e4a8:	00000000 	.word	0x00000000
 800e4ac:	7ff80000 	.word	0x7ff80000

0800e4b0 <nanf>:
 800e4b0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e4b8 <nanf+0x8>
 800e4b4:	4770      	bx	lr
 800e4b6:	bf00      	nop
 800e4b8:	7fc00000 	.word	0x7fc00000

0800e4bc <quorem>:
 800e4bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4c0:	6903      	ldr	r3, [r0, #16]
 800e4c2:	690c      	ldr	r4, [r1, #16]
 800e4c4:	42a3      	cmp	r3, r4
 800e4c6:	4607      	mov	r7, r0
 800e4c8:	db7e      	blt.n	800e5c8 <quorem+0x10c>
 800e4ca:	3c01      	subs	r4, #1
 800e4cc:	f101 0814 	add.w	r8, r1, #20
 800e4d0:	00a3      	lsls	r3, r4, #2
 800e4d2:	f100 0514 	add.w	r5, r0, #20
 800e4d6:	9300      	str	r3, [sp, #0]
 800e4d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e4dc:	9301      	str	r3, [sp, #4]
 800e4de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e4e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e4e6:	3301      	adds	r3, #1
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e4ee:	fbb2 f6f3 	udiv	r6, r2, r3
 800e4f2:	d32e      	bcc.n	800e552 <quorem+0x96>
 800e4f4:	f04f 0a00 	mov.w	sl, #0
 800e4f8:	46c4      	mov	ip, r8
 800e4fa:	46ae      	mov	lr, r5
 800e4fc:	46d3      	mov	fp, sl
 800e4fe:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e502:	b298      	uxth	r0, r3
 800e504:	fb06 a000 	mla	r0, r6, r0, sl
 800e508:	0c02      	lsrs	r2, r0, #16
 800e50a:	0c1b      	lsrs	r3, r3, #16
 800e50c:	fb06 2303 	mla	r3, r6, r3, r2
 800e510:	f8de 2000 	ldr.w	r2, [lr]
 800e514:	b280      	uxth	r0, r0
 800e516:	b292      	uxth	r2, r2
 800e518:	1a12      	subs	r2, r2, r0
 800e51a:	445a      	add	r2, fp
 800e51c:	f8de 0000 	ldr.w	r0, [lr]
 800e520:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e524:	b29b      	uxth	r3, r3
 800e526:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e52a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e52e:	b292      	uxth	r2, r2
 800e530:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e534:	45e1      	cmp	r9, ip
 800e536:	f84e 2b04 	str.w	r2, [lr], #4
 800e53a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e53e:	d2de      	bcs.n	800e4fe <quorem+0x42>
 800e540:	9b00      	ldr	r3, [sp, #0]
 800e542:	58eb      	ldr	r3, [r5, r3]
 800e544:	b92b      	cbnz	r3, 800e552 <quorem+0x96>
 800e546:	9b01      	ldr	r3, [sp, #4]
 800e548:	3b04      	subs	r3, #4
 800e54a:	429d      	cmp	r5, r3
 800e54c:	461a      	mov	r2, r3
 800e54e:	d32f      	bcc.n	800e5b0 <quorem+0xf4>
 800e550:	613c      	str	r4, [r7, #16]
 800e552:	4638      	mov	r0, r7
 800e554:	f001 fd10 	bl	800ff78 <__mcmp>
 800e558:	2800      	cmp	r0, #0
 800e55a:	db25      	blt.n	800e5a8 <quorem+0xec>
 800e55c:	4629      	mov	r1, r5
 800e55e:	2000      	movs	r0, #0
 800e560:	f858 2b04 	ldr.w	r2, [r8], #4
 800e564:	f8d1 c000 	ldr.w	ip, [r1]
 800e568:	fa1f fe82 	uxth.w	lr, r2
 800e56c:	fa1f f38c 	uxth.w	r3, ip
 800e570:	eba3 030e 	sub.w	r3, r3, lr
 800e574:	4403      	add	r3, r0
 800e576:	0c12      	lsrs	r2, r2, #16
 800e578:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e57c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e580:	b29b      	uxth	r3, r3
 800e582:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e586:	45c1      	cmp	r9, r8
 800e588:	f841 3b04 	str.w	r3, [r1], #4
 800e58c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e590:	d2e6      	bcs.n	800e560 <quorem+0xa4>
 800e592:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e596:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e59a:	b922      	cbnz	r2, 800e5a6 <quorem+0xea>
 800e59c:	3b04      	subs	r3, #4
 800e59e:	429d      	cmp	r5, r3
 800e5a0:	461a      	mov	r2, r3
 800e5a2:	d30b      	bcc.n	800e5bc <quorem+0x100>
 800e5a4:	613c      	str	r4, [r7, #16]
 800e5a6:	3601      	adds	r6, #1
 800e5a8:	4630      	mov	r0, r6
 800e5aa:	b003      	add	sp, #12
 800e5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5b0:	6812      	ldr	r2, [r2, #0]
 800e5b2:	3b04      	subs	r3, #4
 800e5b4:	2a00      	cmp	r2, #0
 800e5b6:	d1cb      	bne.n	800e550 <quorem+0x94>
 800e5b8:	3c01      	subs	r4, #1
 800e5ba:	e7c6      	b.n	800e54a <quorem+0x8e>
 800e5bc:	6812      	ldr	r2, [r2, #0]
 800e5be:	3b04      	subs	r3, #4
 800e5c0:	2a00      	cmp	r2, #0
 800e5c2:	d1ef      	bne.n	800e5a4 <quorem+0xe8>
 800e5c4:	3c01      	subs	r4, #1
 800e5c6:	e7ea      	b.n	800e59e <quorem+0xe2>
 800e5c8:	2000      	movs	r0, #0
 800e5ca:	e7ee      	b.n	800e5aa <quorem+0xee>
 800e5cc:	0000      	movs	r0, r0
	...

0800e5d0 <_dtoa_r>:
 800e5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5d4:	69c7      	ldr	r7, [r0, #28]
 800e5d6:	b099      	sub	sp, #100	@ 0x64
 800e5d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e5dc:	ec55 4b10 	vmov	r4, r5, d0
 800e5e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e5e2:	9109      	str	r1, [sp, #36]	@ 0x24
 800e5e4:	4683      	mov	fp, r0
 800e5e6:	920e      	str	r2, [sp, #56]	@ 0x38
 800e5e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e5ea:	b97f      	cbnz	r7, 800e60c <_dtoa_r+0x3c>
 800e5ec:	2010      	movs	r0, #16
 800e5ee:	f001 f937 	bl	800f860 <malloc>
 800e5f2:	4602      	mov	r2, r0
 800e5f4:	f8cb 001c 	str.w	r0, [fp, #28]
 800e5f8:	b920      	cbnz	r0, 800e604 <_dtoa_r+0x34>
 800e5fa:	4ba7      	ldr	r3, [pc, #668]	@ (800e898 <_dtoa_r+0x2c8>)
 800e5fc:	21ef      	movs	r1, #239	@ 0xef
 800e5fe:	48a7      	ldr	r0, [pc, #668]	@ (800e89c <_dtoa_r+0x2cc>)
 800e600:	f002 f95e 	bl	80108c0 <__assert_func>
 800e604:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e608:	6007      	str	r7, [r0, #0]
 800e60a:	60c7      	str	r7, [r0, #12]
 800e60c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e610:	6819      	ldr	r1, [r3, #0]
 800e612:	b159      	cbz	r1, 800e62c <_dtoa_r+0x5c>
 800e614:	685a      	ldr	r2, [r3, #4]
 800e616:	604a      	str	r2, [r1, #4]
 800e618:	2301      	movs	r3, #1
 800e61a:	4093      	lsls	r3, r2
 800e61c:	608b      	str	r3, [r1, #8]
 800e61e:	4658      	mov	r0, fp
 800e620:	f001 fa26 	bl	800fa70 <_Bfree>
 800e624:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e628:	2200      	movs	r2, #0
 800e62a:	601a      	str	r2, [r3, #0]
 800e62c:	1e2b      	subs	r3, r5, #0
 800e62e:	bfb9      	ittee	lt
 800e630:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e634:	9303      	strlt	r3, [sp, #12]
 800e636:	2300      	movge	r3, #0
 800e638:	6033      	strge	r3, [r6, #0]
 800e63a:	9f03      	ldr	r7, [sp, #12]
 800e63c:	4b98      	ldr	r3, [pc, #608]	@ (800e8a0 <_dtoa_r+0x2d0>)
 800e63e:	bfbc      	itt	lt
 800e640:	2201      	movlt	r2, #1
 800e642:	6032      	strlt	r2, [r6, #0]
 800e644:	43bb      	bics	r3, r7
 800e646:	d112      	bne.n	800e66e <_dtoa_r+0x9e>
 800e648:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e64a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e64e:	6013      	str	r3, [r2, #0]
 800e650:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e654:	4323      	orrs	r3, r4
 800e656:	f000 854d 	beq.w	800f0f4 <_dtoa_r+0xb24>
 800e65a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e65c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e8b4 <_dtoa_r+0x2e4>
 800e660:	2b00      	cmp	r3, #0
 800e662:	f000 854f 	beq.w	800f104 <_dtoa_r+0xb34>
 800e666:	f10a 0303 	add.w	r3, sl, #3
 800e66a:	f000 bd49 	b.w	800f100 <_dtoa_r+0xb30>
 800e66e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e672:	2200      	movs	r2, #0
 800e674:	ec51 0b17 	vmov	r0, r1, d7
 800e678:	2300      	movs	r3, #0
 800e67a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e67e:	f7f2 fa4b 	bl	8000b18 <__aeabi_dcmpeq>
 800e682:	4680      	mov	r8, r0
 800e684:	b158      	cbz	r0, 800e69e <_dtoa_r+0xce>
 800e686:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e688:	2301      	movs	r3, #1
 800e68a:	6013      	str	r3, [r2, #0]
 800e68c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e68e:	b113      	cbz	r3, 800e696 <_dtoa_r+0xc6>
 800e690:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e692:	4b84      	ldr	r3, [pc, #528]	@ (800e8a4 <_dtoa_r+0x2d4>)
 800e694:	6013      	str	r3, [r2, #0]
 800e696:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e8b8 <_dtoa_r+0x2e8>
 800e69a:	f000 bd33 	b.w	800f104 <_dtoa_r+0xb34>
 800e69e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e6a2:	aa16      	add	r2, sp, #88	@ 0x58
 800e6a4:	a917      	add	r1, sp, #92	@ 0x5c
 800e6a6:	4658      	mov	r0, fp
 800e6a8:	f001 fd86 	bl	80101b8 <__d2b>
 800e6ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e6b0:	4681      	mov	r9, r0
 800e6b2:	2e00      	cmp	r6, #0
 800e6b4:	d077      	beq.n	800e7a6 <_dtoa_r+0x1d6>
 800e6b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e6b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e6bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e6c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e6c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e6cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e6d0:	4619      	mov	r1, r3
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	4b74      	ldr	r3, [pc, #464]	@ (800e8a8 <_dtoa_r+0x2d8>)
 800e6d6:	f7f1 fdff 	bl	80002d8 <__aeabi_dsub>
 800e6da:	a369      	add	r3, pc, #420	@ (adr r3, 800e880 <_dtoa_r+0x2b0>)
 800e6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e0:	f7f1 ffb2 	bl	8000648 <__aeabi_dmul>
 800e6e4:	a368      	add	r3, pc, #416	@ (adr r3, 800e888 <_dtoa_r+0x2b8>)
 800e6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ea:	f7f1 fdf7 	bl	80002dc <__adddf3>
 800e6ee:	4604      	mov	r4, r0
 800e6f0:	4630      	mov	r0, r6
 800e6f2:	460d      	mov	r5, r1
 800e6f4:	f7f1 ff3e 	bl	8000574 <__aeabi_i2d>
 800e6f8:	a365      	add	r3, pc, #404	@ (adr r3, 800e890 <_dtoa_r+0x2c0>)
 800e6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6fe:	f7f1 ffa3 	bl	8000648 <__aeabi_dmul>
 800e702:	4602      	mov	r2, r0
 800e704:	460b      	mov	r3, r1
 800e706:	4620      	mov	r0, r4
 800e708:	4629      	mov	r1, r5
 800e70a:	f7f1 fde7 	bl	80002dc <__adddf3>
 800e70e:	4604      	mov	r4, r0
 800e710:	460d      	mov	r5, r1
 800e712:	f7f2 fa49 	bl	8000ba8 <__aeabi_d2iz>
 800e716:	2200      	movs	r2, #0
 800e718:	4607      	mov	r7, r0
 800e71a:	2300      	movs	r3, #0
 800e71c:	4620      	mov	r0, r4
 800e71e:	4629      	mov	r1, r5
 800e720:	f7f2 fa04 	bl	8000b2c <__aeabi_dcmplt>
 800e724:	b140      	cbz	r0, 800e738 <_dtoa_r+0x168>
 800e726:	4638      	mov	r0, r7
 800e728:	f7f1 ff24 	bl	8000574 <__aeabi_i2d>
 800e72c:	4622      	mov	r2, r4
 800e72e:	462b      	mov	r3, r5
 800e730:	f7f2 f9f2 	bl	8000b18 <__aeabi_dcmpeq>
 800e734:	b900      	cbnz	r0, 800e738 <_dtoa_r+0x168>
 800e736:	3f01      	subs	r7, #1
 800e738:	2f16      	cmp	r7, #22
 800e73a:	d851      	bhi.n	800e7e0 <_dtoa_r+0x210>
 800e73c:	4b5b      	ldr	r3, [pc, #364]	@ (800e8ac <_dtoa_r+0x2dc>)
 800e73e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e746:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e74a:	f7f2 f9ef 	bl	8000b2c <__aeabi_dcmplt>
 800e74e:	2800      	cmp	r0, #0
 800e750:	d048      	beq.n	800e7e4 <_dtoa_r+0x214>
 800e752:	3f01      	subs	r7, #1
 800e754:	2300      	movs	r3, #0
 800e756:	9312      	str	r3, [sp, #72]	@ 0x48
 800e758:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e75a:	1b9b      	subs	r3, r3, r6
 800e75c:	1e5a      	subs	r2, r3, #1
 800e75e:	bf44      	itt	mi
 800e760:	f1c3 0801 	rsbmi	r8, r3, #1
 800e764:	2300      	movmi	r3, #0
 800e766:	9208      	str	r2, [sp, #32]
 800e768:	bf54      	ite	pl
 800e76a:	f04f 0800 	movpl.w	r8, #0
 800e76e:	9308      	strmi	r3, [sp, #32]
 800e770:	2f00      	cmp	r7, #0
 800e772:	db39      	blt.n	800e7e8 <_dtoa_r+0x218>
 800e774:	9b08      	ldr	r3, [sp, #32]
 800e776:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e778:	443b      	add	r3, r7
 800e77a:	9308      	str	r3, [sp, #32]
 800e77c:	2300      	movs	r3, #0
 800e77e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e782:	2b09      	cmp	r3, #9
 800e784:	d864      	bhi.n	800e850 <_dtoa_r+0x280>
 800e786:	2b05      	cmp	r3, #5
 800e788:	bfc4      	itt	gt
 800e78a:	3b04      	subgt	r3, #4
 800e78c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e78e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e790:	f1a3 0302 	sub.w	r3, r3, #2
 800e794:	bfcc      	ite	gt
 800e796:	2400      	movgt	r4, #0
 800e798:	2401      	movle	r4, #1
 800e79a:	2b03      	cmp	r3, #3
 800e79c:	d863      	bhi.n	800e866 <_dtoa_r+0x296>
 800e79e:	e8df f003 	tbb	[pc, r3]
 800e7a2:	372a      	.short	0x372a
 800e7a4:	5535      	.short	0x5535
 800e7a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e7aa:	441e      	add	r6, r3
 800e7ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e7b0:	2b20      	cmp	r3, #32
 800e7b2:	bfc1      	itttt	gt
 800e7b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e7b8:	409f      	lslgt	r7, r3
 800e7ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e7be:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e7c2:	bfd6      	itet	le
 800e7c4:	f1c3 0320 	rsble	r3, r3, #32
 800e7c8:	ea47 0003 	orrgt.w	r0, r7, r3
 800e7cc:	fa04 f003 	lslle.w	r0, r4, r3
 800e7d0:	f7f1 fec0 	bl	8000554 <__aeabi_ui2d>
 800e7d4:	2201      	movs	r2, #1
 800e7d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e7da:	3e01      	subs	r6, #1
 800e7dc:	9214      	str	r2, [sp, #80]	@ 0x50
 800e7de:	e777      	b.n	800e6d0 <_dtoa_r+0x100>
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	e7b8      	b.n	800e756 <_dtoa_r+0x186>
 800e7e4:	9012      	str	r0, [sp, #72]	@ 0x48
 800e7e6:	e7b7      	b.n	800e758 <_dtoa_r+0x188>
 800e7e8:	427b      	negs	r3, r7
 800e7ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	eba8 0807 	sub.w	r8, r8, r7
 800e7f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e7f4:	e7c4      	b.n	800e780 <_dtoa_r+0x1b0>
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e7fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	dc35      	bgt.n	800e86c <_dtoa_r+0x29c>
 800e800:	2301      	movs	r3, #1
 800e802:	9300      	str	r3, [sp, #0]
 800e804:	9307      	str	r3, [sp, #28]
 800e806:	461a      	mov	r2, r3
 800e808:	920e      	str	r2, [sp, #56]	@ 0x38
 800e80a:	e00b      	b.n	800e824 <_dtoa_r+0x254>
 800e80c:	2301      	movs	r3, #1
 800e80e:	e7f3      	b.n	800e7f8 <_dtoa_r+0x228>
 800e810:	2300      	movs	r3, #0
 800e812:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e814:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e816:	18fb      	adds	r3, r7, r3
 800e818:	9300      	str	r3, [sp, #0]
 800e81a:	3301      	adds	r3, #1
 800e81c:	2b01      	cmp	r3, #1
 800e81e:	9307      	str	r3, [sp, #28]
 800e820:	bfb8      	it	lt
 800e822:	2301      	movlt	r3, #1
 800e824:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e828:	2100      	movs	r1, #0
 800e82a:	2204      	movs	r2, #4
 800e82c:	f102 0514 	add.w	r5, r2, #20
 800e830:	429d      	cmp	r5, r3
 800e832:	d91f      	bls.n	800e874 <_dtoa_r+0x2a4>
 800e834:	6041      	str	r1, [r0, #4]
 800e836:	4658      	mov	r0, fp
 800e838:	f001 f8da 	bl	800f9f0 <_Balloc>
 800e83c:	4682      	mov	sl, r0
 800e83e:	2800      	cmp	r0, #0
 800e840:	d13c      	bne.n	800e8bc <_dtoa_r+0x2ec>
 800e842:	4b1b      	ldr	r3, [pc, #108]	@ (800e8b0 <_dtoa_r+0x2e0>)
 800e844:	4602      	mov	r2, r0
 800e846:	f240 11af 	movw	r1, #431	@ 0x1af
 800e84a:	e6d8      	b.n	800e5fe <_dtoa_r+0x2e>
 800e84c:	2301      	movs	r3, #1
 800e84e:	e7e0      	b.n	800e812 <_dtoa_r+0x242>
 800e850:	2401      	movs	r4, #1
 800e852:	2300      	movs	r3, #0
 800e854:	9309      	str	r3, [sp, #36]	@ 0x24
 800e856:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e858:	f04f 33ff 	mov.w	r3, #4294967295
 800e85c:	9300      	str	r3, [sp, #0]
 800e85e:	9307      	str	r3, [sp, #28]
 800e860:	2200      	movs	r2, #0
 800e862:	2312      	movs	r3, #18
 800e864:	e7d0      	b.n	800e808 <_dtoa_r+0x238>
 800e866:	2301      	movs	r3, #1
 800e868:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e86a:	e7f5      	b.n	800e858 <_dtoa_r+0x288>
 800e86c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e86e:	9300      	str	r3, [sp, #0]
 800e870:	9307      	str	r3, [sp, #28]
 800e872:	e7d7      	b.n	800e824 <_dtoa_r+0x254>
 800e874:	3101      	adds	r1, #1
 800e876:	0052      	lsls	r2, r2, #1
 800e878:	e7d8      	b.n	800e82c <_dtoa_r+0x25c>
 800e87a:	bf00      	nop
 800e87c:	f3af 8000 	nop.w
 800e880:	636f4361 	.word	0x636f4361
 800e884:	3fd287a7 	.word	0x3fd287a7
 800e888:	8b60c8b3 	.word	0x8b60c8b3
 800e88c:	3fc68a28 	.word	0x3fc68a28
 800e890:	509f79fb 	.word	0x509f79fb
 800e894:	3fd34413 	.word	0x3fd34413
 800e898:	08011396 	.word	0x08011396
 800e89c:	080113ad 	.word	0x080113ad
 800e8a0:	7ff00000 	.word	0x7ff00000
 800e8a4:	08011359 	.word	0x08011359
 800e8a8:	3ff80000 	.word	0x3ff80000
 800e8ac:	08011508 	.word	0x08011508
 800e8b0:	08011405 	.word	0x08011405
 800e8b4:	08011392 	.word	0x08011392
 800e8b8:	08011358 	.word	0x08011358
 800e8bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e8c0:	6018      	str	r0, [r3, #0]
 800e8c2:	9b07      	ldr	r3, [sp, #28]
 800e8c4:	2b0e      	cmp	r3, #14
 800e8c6:	f200 80a4 	bhi.w	800ea12 <_dtoa_r+0x442>
 800e8ca:	2c00      	cmp	r4, #0
 800e8cc:	f000 80a1 	beq.w	800ea12 <_dtoa_r+0x442>
 800e8d0:	2f00      	cmp	r7, #0
 800e8d2:	dd33      	ble.n	800e93c <_dtoa_r+0x36c>
 800e8d4:	4bad      	ldr	r3, [pc, #692]	@ (800eb8c <_dtoa_r+0x5bc>)
 800e8d6:	f007 020f 	and.w	r2, r7, #15
 800e8da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e8de:	ed93 7b00 	vldr	d7, [r3]
 800e8e2:	05f8      	lsls	r0, r7, #23
 800e8e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e8e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e8ec:	d516      	bpl.n	800e91c <_dtoa_r+0x34c>
 800e8ee:	4ba8      	ldr	r3, [pc, #672]	@ (800eb90 <_dtoa_r+0x5c0>)
 800e8f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e8f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e8f8:	f7f1 ffd0 	bl	800089c <__aeabi_ddiv>
 800e8fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e900:	f004 040f 	and.w	r4, r4, #15
 800e904:	2603      	movs	r6, #3
 800e906:	4da2      	ldr	r5, [pc, #648]	@ (800eb90 <_dtoa_r+0x5c0>)
 800e908:	b954      	cbnz	r4, 800e920 <_dtoa_r+0x350>
 800e90a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e90e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e912:	f7f1 ffc3 	bl	800089c <__aeabi_ddiv>
 800e916:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e91a:	e028      	b.n	800e96e <_dtoa_r+0x39e>
 800e91c:	2602      	movs	r6, #2
 800e91e:	e7f2      	b.n	800e906 <_dtoa_r+0x336>
 800e920:	07e1      	lsls	r1, r4, #31
 800e922:	d508      	bpl.n	800e936 <_dtoa_r+0x366>
 800e924:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e928:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e92c:	f7f1 fe8c 	bl	8000648 <__aeabi_dmul>
 800e930:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e934:	3601      	adds	r6, #1
 800e936:	1064      	asrs	r4, r4, #1
 800e938:	3508      	adds	r5, #8
 800e93a:	e7e5      	b.n	800e908 <_dtoa_r+0x338>
 800e93c:	f000 80d2 	beq.w	800eae4 <_dtoa_r+0x514>
 800e940:	427c      	negs	r4, r7
 800e942:	4b92      	ldr	r3, [pc, #584]	@ (800eb8c <_dtoa_r+0x5bc>)
 800e944:	4d92      	ldr	r5, [pc, #584]	@ (800eb90 <_dtoa_r+0x5c0>)
 800e946:	f004 020f 	and.w	r2, r4, #15
 800e94a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e952:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e956:	f7f1 fe77 	bl	8000648 <__aeabi_dmul>
 800e95a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e95e:	1124      	asrs	r4, r4, #4
 800e960:	2300      	movs	r3, #0
 800e962:	2602      	movs	r6, #2
 800e964:	2c00      	cmp	r4, #0
 800e966:	f040 80b2 	bne.w	800eace <_dtoa_r+0x4fe>
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d1d3      	bne.n	800e916 <_dtoa_r+0x346>
 800e96e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e970:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e974:	2b00      	cmp	r3, #0
 800e976:	f000 80b7 	beq.w	800eae8 <_dtoa_r+0x518>
 800e97a:	4b86      	ldr	r3, [pc, #536]	@ (800eb94 <_dtoa_r+0x5c4>)
 800e97c:	2200      	movs	r2, #0
 800e97e:	4620      	mov	r0, r4
 800e980:	4629      	mov	r1, r5
 800e982:	f7f2 f8d3 	bl	8000b2c <__aeabi_dcmplt>
 800e986:	2800      	cmp	r0, #0
 800e988:	f000 80ae 	beq.w	800eae8 <_dtoa_r+0x518>
 800e98c:	9b07      	ldr	r3, [sp, #28]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	f000 80aa 	beq.w	800eae8 <_dtoa_r+0x518>
 800e994:	9b00      	ldr	r3, [sp, #0]
 800e996:	2b00      	cmp	r3, #0
 800e998:	dd37      	ble.n	800ea0a <_dtoa_r+0x43a>
 800e99a:	1e7b      	subs	r3, r7, #1
 800e99c:	9304      	str	r3, [sp, #16]
 800e99e:	4620      	mov	r0, r4
 800e9a0:	4b7d      	ldr	r3, [pc, #500]	@ (800eb98 <_dtoa_r+0x5c8>)
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	4629      	mov	r1, r5
 800e9a6:	f7f1 fe4f 	bl	8000648 <__aeabi_dmul>
 800e9aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9ae:	9c00      	ldr	r4, [sp, #0]
 800e9b0:	3601      	adds	r6, #1
 800e9b2:	4630      	mov	r0, r6
 800e9b4:	f7f1 fdde 	bl	8000574 <__aeabi_i2d>
 800e9b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e9bc:	f7f1 fe44 	bl	8000648 <__aeabi_dmul>
 800e9c0:	4b76      	ldr	r3, [pc, #472]	@ (800eb9c <_dtoa_r+0x5cc>)
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	f7f1 fc8a 	bl	80002dc <__adddf3>
 800e9c8:	4605      	mov	r5, r0
 800e9ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e9ce:	2c00      	cmp	r4, #0
 800e9d0:	f040 808d 	bne.w	800eaee <_dtoa_r+0x51e>
 800e9d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9d8:	4b71      	ldr	r3, [pc, #452]	@ (800eba0 <_dtoa_r+0x5d0>)
 800e9da:	2200      	movs	r2, #0
 800e9dc:	f7f1 fc7c 	bl	80002d8 <__aeabi_dsub>
 800e9e0:	4602      	mov	r2, r0
 800e9e2:	460b      	mov	r3, r1
 800e9e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e9e8:	462a      	mov	r2, r5
 800e9ea:	4633      	mov	r3, r6
 800e9ec:	f7f2 f8bc 	bl	8000b68 <__aeabi_dcmpgt>
 800e9f0:	2800      	cmp	r0, #0
 800e9f2:	f040 828b 	bne.w	800ef0c <_dtoa_r+0x93c>
 800e9f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9fa:	462a      	mov	r2, r5
 800e9fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ea00:	f7f2 f894 	bl	8000b2c <__aeabi_dcmplt>
 800ea04:	2800      	cmp	r0, #0
 800ea06:	f040 8128 	bne.w	800ec5a <_dtoa_r+0x68a>
 800ea0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ea0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ea12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	f2c0 815a 	blt.w	800ecce <_dtoa_r+0x6fe>
 800ea1a:	2f0e      	cmp	r7, #14
 800ea1c:	f300 8157 	bgt.w	800ecce <_dtoa_r+0x6fe>
 800ea20:	4b5a      	ldr	r3, [pc, #360]	@ (800eb8c <_dtoa_r+0x5bc>)
 800ea22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ea26:	ed93 7b00 	vldr	d7, [r3]
 800ea2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	ed8d 7b00 	vstr	d7, [sp]
 800ea32:	da03      	bge.n	800ea3c <_dtoa_r+0x46c>
 800ea34:	9b07      	ldr	r3, [sp, #28]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	f340 8101 	ble.w	800ec3e <_dtoa_r+0x66e>
 800ea3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ea40:	4656      	mov	r6, sl
 800ea42:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea46:	4620      	mov	r0, r4
 800ea48:	4629      	mov	r1, r5
 800ea4a:	f7f1 ff27 	bl	800089c <__aeabi_ddiv>
 800ea4e:	f7f2 f8ab 	bl	8000ba8 <__aeabi_d2iz>
 800ea52:	4680      	mov	r8, r0
 800ea54:	f7f1 fd8e 	bl	8000574 <__aeabi_i2d>
 800ea58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea5c:	f7f1 fdf4 	bl	8000648 <__aeabi_dmul>
 800ea60:	4602      	mov	r2, r0
 800ea62:	460b      	mov	r3, r1
 800ea64:	4620      	mov	r0, r4
 800ea66:	4629      	mov	r1, r5
 800ea68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ea6c:	f7f1 fc34 	bl	80002d8 <__aeabi_dsub>
 800ea70:	f806 4b01 	strb.w	r4, [r6], #1
 800ea74:	9d07      	ldr	r5, [sp, #28]
 800ea76:	eba6 040a 	sub.w	r4, r6, sl
 800ea7a:	42a5      	cmp	r5, r4
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	460b      	mov	r3, r1
 800ea80:	f040 8117 	bne.w	800ecb2 <_dtoa_r+0x6e2>
 800ea84:	f7f1 fc2a 	bl	80002dc <__adddf3>
 800ea88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea8c:	4604      	mov	r4, r0
 800ea8e:	460d      	mov	r5, r1
 800ea90:	f7f2 f86a 	bl	8000b68 <__aeabi_dcmpgt>
 800ea94:	2800      	cmp	r0, #0
 800ea96:	f040 80f9 	bne.w	800ec8c <_dtoa_r+0x6bc>
 800ea9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea9e:	4620      	mov	r0, r4
 800eaa0:	4629      	mov	r1, r5
 800eaa2:	f7f2 f839 	bl	8000b18 <__aeabi_dcmpeq>
 800eaa6:	b118      	cbz	r0, 800eab0 <_dtoa_r+0x4e0>
 800eaa8:	f018 0f01 	tst.w	r8, #1
 800eaac:	f040 80ee 	bne.w	800ec8c <_dtoa_r+0x6bc>
 800eab0:	4649      	mov	r1, r9
 800eab2:	4658      	mov	r0, fp
 800eab4:	f000 ffdc 	bl	800fa70 <_Bfree>
 800eab8:	2300      	movs	r3, #0
 800eaba:	7033      	strb	r3, [r6, #0]
 800eabc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eabe:	3701      	adds	r7, #1
 800eac0:	601f      	str	r7, [r3, #0]
 800eac2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	f000 831d 	beq.w	800f104 <_dtoa_r+0xb34>
 800eaca:	601e      	str	r6, [r3, #0]
 800eacc:	e31a      	b.n	800f104 <_dtoa_r+0xb34>
 800eace:	07e2      	lsls	r2, r4, #31
 800ead0:	d505      	bpl.n	800eade <_dtoa_r+0x50e>
 800ead2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ead6:	f7f1 fdb7 	bl	8000648 <__aeabi_dmul>
 800eada:	3601      	adds	r6, #1
 800eadc:	2301      	movs	r3, #1
 800eade:	1064      	asrs	r4, r4, #1
 800eae0:	3508      	adds	r5, #8
 800eae2:	e73f      	b.n	800e964 <_dtoa_r+0x394>
 800eae4:	2602      	movs	r6, #2
 800eae6:	e742      	b.n	800e96e <_dtoa_r+0x39e>
 800eae8:	9c07      	ldr	r4, [sp, #28]
 800eaea:	9704      	str	r7, [sp, #16]
 800eaec:	e761      	b.n	800e9b2 <_dtoa_r+0x3e2>
 800eaee:	4b27      	ldr	r3, [pc, #156]	@ (800eb8c <_dtoa_r+0x5bc>)
 800eaf0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eaf2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eaf6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eafa:	4454      	add	r4, sl
 800eafc:	2900      	cmp	r1, #0
 800eafe:	d053      	beq.n	800eba8 <_dtoa_r+0x5d8>
 800eb00:	4928      	ldr	r1, [pc, #160]	@ (800eba4 <_dtoa_r+0x5d4>)
 800eb02:	2000      	movs	r0, #0
 800eb04:	f7f1 feca 	bl	800089c <__aeabi_ddiv>
 800eb08:	4633      	mov	r3, r6
 800eb0a:	462a      	mov	r2, r5
 800eb0c:	f7f1 fbe4 	bl	80002d8 <__aeabi_dsub>
 800eb10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eb14:	4656      	mov	r6, sl
 800eb16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb1a:	f7f2 f845 	bl	8000ba8 <__aeabi_d2iz>
 800eb1e:	4605      	mov	r5, r0
 800eb20:	f7f1 fd28 	bl	8000574 <__aeabi_i2d>
 800eb24:	4602      	mov	r2, r0
 800eb26:	460b      	mov	r3, r1
 800eb28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb2c:	f7f1 fbd4 	bl	80002d8 <__aeabi_dsub>
 800eb30:	3530      	adds	r5, #48	@ 0x30
 800eb32:	4602      	mov	r2, r0
 800eb34:	460b      	mov	r3, r1
 800eb36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eb3a:	f806 5b01 	strb.w	r5, [r6], #1
 800eb3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eb42:	f7f1 fff3 	bl	8000b2c <__aeabi_dcmplt>
 800eb46:	2800      	cmp	r0, #0
 800eb48:	d171      	bne.n	800ec2e <_dtoa_r+0x65e>
 800eb4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb4e:	4911      	ldr	r1, [pc, #68]	@ (800eb94 <_dtoa_r+0x5c4>)
 800eb50:	2000      	movs	r0, #0
 800eb52:	f7f1 fbc1 	bl	80002d8 <__aeabi_dsub>
 800eb56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eb5a:	f7f1 ffe7 	bl	8000b2c <__aeabi_dcmplt>
 800eb5e:	2800      	cmp	r0, #0
 800eb60:	f040 8095 	bne.w	800ec8e <_dtoa_r+0x6be>
 800eb64:	42a6      	cmp	r6, r4
 800eb66:	f43f af50 	beq.w	800ea0a <_dtoa_r+0x43a>
 800eb6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800eb6e:	4b0a      	ldr	r3, [pc, #40]	@ (800eb98 <_dtoa_r+0x5c8>)
 800eb70:	2200      	movs	r2, #0
 800eb72:	f7f1 fd69 	bl	8000648 <__aeabi_dmul>
 800eb76:	4b08      	ldr	r3, [pc, #32]	@ (800eb98 <_dtoa_r+0x5c8>)
 800eb78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb82:	f7f1 fd61 	bl	8000648 <__aeabi_dmul>
 800eb86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb8a:	e7c4      	b.n	800eb16 <_dtoa_r+0x546>
 800eb8c:	08011508 	.word	0x08011508
 800eb90:	080114e0 	.word	0x080114e0
 800eb94:	3ff00000 	.word	0x3ff00000
 800eb98:	40240000 	.word	0x40240000
 800eb9c:	401c0000 	.word	0x401c0000
 800eba0:	40140000 	.word	0x40140000
 800eba4:	3fe00000 	.word	0x3fe00000
 800eba8:	4631      	mov	r1, r6
 800ebaa:	4628      	mov	r0, r5
 800ebac:	f7f1 fd4c 	bl	8000648 <__aeabi_dmul>
 800ebb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ebb4:	9415      	str	r4, [sp, #84]	@ 0x54
 800ebb6:	4656      	mov	r6, sl
 800ebb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebbc:	f7f1 fff4 	bl	8000ba8 <__aeabi_d2iz>
 800ebc0:	4605      	mov	r5, r0
 800ebc2:	f7f1 fcd7 	bl	8000574 <__aeabi_i2d>
 800ebc6:	4602      	mov	r2, r0
 800ebc8:	460b      	mov	r3, r1
 800ebca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebce:	f7f1 fb83 	bl	80002d8 <__aeabi_dsub>
 800ebd2:	3530      	adds	r5, #48	@ 0x30
 800ebd4:	f806 5b01 	strb.w	r5, [r6], #1
 800ebd8:	4602      	mov	r2, r0
 800ebda:	460b      	mov	r3, r1
 800ebdc:	42a6      	cmp	r6, r4
 800ebde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ebe2:	f04f 0200 	mov.w	r2, #0
 800ebe6:	d124      	bne.n	800ec32 <_dtoa_r+0x662>
 800ebe8:	4bac      	ldr	r3, [pc, #688]	@ (800ee9c <_dtoa_r+0x8cc>)
 800ebea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ebee:	f7f1 fb75 	bl	80002dc <__adddf3>
 800ebf2:	4602      	mov	r2, r0
 800ebf4:	460b      	mov	r3, r1
 800ebf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebfa:	f7f1 ffb5 	bl	8000b68 <__aeabi_dcmpgt>
 800ebfe:	2800      	cmp	r0, #0
 800ec00:	d145      	bne.n	800ec8e <_dtoa_r+0x6be>
 800ec02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ec06:	49a5      	ldr	r1, [pc, #660]	@ (800ee9c <_dtoa_r+0x8cc>)
 800ec08:	2000      	movs	r0, #0
 800ec0a:	f7f1 fb65 	bl	80002d8 <__aeabi_dsub>
 800ec0e:	4602      	mov	r2, r0
 800ec10:	460b      	mov	r3, r1
 800ec12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec16:	f7f1 ff89 	bl	8000b2c <__aeabi_dcmplt>
 800ec1a:	2800      	cmp	r0, #0
 800ec1c:	f43f aef5 	beq.w	800ea0a <_dtoa_r+0x43a>
 800ec20:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ec22:	1e73      	subs	r3, r6, #1
 800ec24:	9315      	str	r3, [sp, #84]	@ 0x54
 800ec26:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ec2a:	2b30      	cmp	r3, #48	@ 0x30
 800ec2c:	d0f8      	beq.n	800ec20 <_dtoa_r+0x650>
 800ec2e:	9f04      	ldr	r7, [sp, #16]
 800ec30:	e73e      	b.n	800eab0 <_dtoa_r+0x4e0>
 800ec32:	4b9b      	ldr	r3, [pc, #620]	@ (800eea0 <_dtoa_r+0x8d0>)
 800ec34:	f7f1 fd08 	bl	8000648 <__aeabi_dmul>
 800ec38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec3c:	e7bc      	b.n	800ebb8 <_dtoa_r+0x5e8>
 800ec3e:	d10c      	bne.n	800ec5a <_dtoa_r+0x68a>
 800ec40:	4b98      	ldr	r3, [pc, #608]	@ (800eea4 <_dtoa_r+0x8d4>)
 800ec42:	2200      	movs	r2, #0
 800ec44:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec48:	f7f1 fcfe 	bl	8000648 <__aeabi_dmul>
 800ec4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec50:	f7f1 ff80 	bl	8000b54 <__aeabi_dcmpge>
 800ec54:	2800      	cmp	r0, #0
 800ec56:	f000 8157 	beq.w	800ef08 <_dtoa_r+0x938>
 800ec5a:	2400      	movs	r4, #0
 800ec5c:	4625      	mov	r5, r4
 800ec5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec60:	43db      	mvns	r3, r3
 800ec62:	9304      	str	r3, [sp, #16]
 800ec64:	4656      	mov	r6, sl
 800ec66:	2700      	movs	r7, #0
 800ec68:	4621      	mov	r1, r4
 800ec6a:	4658      	mov	r0, fp
 800ec6c:	f000 ff00 	bl	800fa70 <_Bfree>
 800ec70:	2d00      	cmp	r5, #0
 800ec72:	d0dc      	beq.n	800ec2e <_dtoa_r+0x65e>
 800ec74:	b12f      	cbz	r7, 800ec82 <_dtoa_r+0x6b2>
 800ec76:	42af      	cmp	r7, r5
 800ec78:	d003      	beq.n	800ec82 <_dtoa_r+0x6b2>
 800ec7a:	4639      	mov	r1, r7
 800ec7c:	4658      	mov	r0, fp
 800ec7e:	f000 fef7 	bl	800fa70 <_Bfree>
 800ec82:	4629      	mov	r1, r5
 800ec84:	4658      	mov	r0, fp
 800ec86:	f000 fef3 	bl	800fa70 <_Bfree>
 800ec8a:	e7d0      	b.n	800ec2e <_dtoa_r+0x65e>
 800ec8c:	9704      	str	r7, [sp, #16]
 800ec8e:	4633      	mov	r3, r6
 800ec90:	461e      	mov	r6, r3
 800ec92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec96:	2a39      	cmp	r2, #57	@ 0x39
 800ec98:	d107      	bne.n	800ecaa <_dtoa_r+0x6da>
 800ec9a:	459a      	cmp	sl, r3
 800ec9c:	d1f8      	bne.n	800ec90 <_dtoa_r+0x6c0>
 800ec9e:	9a04      	ldr	r2, [sp, #16]
 800eca0:	3201      	adds	r2, #1
 800eca2:	9204      	str	r2, [sp, #16]
 800eca4:	2230      	movs	r2, #48	@ 0x30
 800eca6:	f88a 2000 	strb.w	r2, [sl]
 800ecaa:	781a      	ldrb	r2, [r3, #0]
 800ecac:	3201      	adds	r2, #1
 800ecae:	701a      	strb	r2, [r3, #0]
 800ecb0:	e7bd      	b.n	800ec2e <_dtoa_r+0x65e>
 800ecb2:	4b7b      	ldr	r3, [pc, #492]	@ (800eea0 <_dtoa_r+0x8d0>)
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	f7f1 fcc7 	bl	8000648 <__aeabi_dmul>
 800ecba:	2200      	movs	r2, #0
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	4604      	mov	r4, r0
 800ecc0:	460d      	mov	r5, r1
 800ecc2:	f7f1 ff29 	bl	8000b18 <__aeabi_dcmpeq>
 800ecc6:	2800      	cmp	r0, #0
 800ecc8:	f43f aebb 	beq.w	800ea42 <_dtoa_r+0x472>
 800eccc:	e6f0      	b.n	800eab0 <_dtoa_r+0x4e0>
 800ecce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ecd0:	2a00      	cmp	r2, #0
 800ecd2:	f000 80db 	beq.w	800ee8c <_dtoa_r+0x8bc>
 800ecd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ecd8:	2a01      	cmp	r2, #1
 800ecda:	f300 80bf 	bgt.w	800ee5c <_dtoa_r+0x88c>
 800ecde:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ece0:	2a00      	cmp	r2, #0
 800ece2:	f000 80b7 	beq.w	800ee54 <_dtoa_r+0x884>
 800ece6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ecea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ecec:	4646      	mov	r6, r8
 800ecee:	9a08      	ldr	r2, [sp, #32]
 800ecf0:	2101      	movs	r1, #1
 800ecf2:	441a      	add	r2, r3
 800ecf4:	4658      	mov	r0, fp
 800ecf6:	4498      	add	r8, r3
 800ecf8:	9208      	str	r2, [sp, #32]
 800ecfa:	f000 ffb7 	bl	800fc6c <__i2b>
 800ecfe:	4605      	mov	r5, r0
 800ed00:	b15e      	cbz	r6, 800ed1a <_dtoa_r+0x74a>
 800ed02:	9b08      	ldr	r3, [sp, #32]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	dd08      	ble.n	800ed1a <_dtoa_r+0x74a>
 800ed08:	42b3      	cmp	r3, r6
 800ed0a:	9a08      	ldr	r2, [sp, #32]
 800ed0c:	bfa8      	it	ge
 800ed0e:	4633      	movge	r3, r6
 800ed10:	eba8 0803 	sub.w	r8, r8, r3
 800ed14:	1af6      	subs	r6, r6, r3
 800ed16:	1ad3      	subs	r3, r2, r3
 800ed18:	9308      	str	r3, [sp, #32]
 800ed1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed1c:	b1f3      	cbz	r3, 800ed5c <_dtoa_r+0x78c>
 800ed1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	f000 80b7 	beq.w	800ee94 <_dtoa_r+0x8c4>
 800ed26:	b18c      	cbz	r4, 800ed4c <_dtoa_r+0x77c>
 800ed28:	4629      	mov	r1, r5
 800ed2a:	4622      	mov	r2, r4
 800ed2c:	4658      	mov	r0, fp
 800ed2e:	f001 f85d 	bl	800fdec <__pow5mult>
 800ed32:	464a      	mov	r2, r9
 800ed34:	4601      	mov	r1, r0
 800ed36:	4605      	mov	r5, r0
 800ed38:	4658      	mov	r0, fp
 800ed3a:	f000 ffad 	bl	800fc98 <__multiply>
 800ed3e:	4649      	mov	r1, r9
 800ed40:	9004      	str	r0, [sp, #16]
 800ed42:	4658      	mov	r0, fp
 800ed44:	f000 fe94 	bl	800fa70 <_Bfree>
 800ed48:	9b04      	ldr	r3, [sp, #16]
 800ed4a:	4699      	mov	r9, r3
 800ed4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed4e:	1b1a      	subs	r2, r3, r4
 800ed50:	d004      	beq.n	800ed5c <_dtoa_r+0x78c>
 800ed52:	4649      	mov	r1, r9
 800ed54:	4658      	mov	r0, fp
 800ed56:	f001 f849 	bl	800fdec <__pow5mult>
 800ed5a:	4681      	mov	r9, r0
 800ed5c:	2101      	movs	r1, #1
 800ed5e:	4658      	mov	r0, fp
 800ed60:	f000 ff84 	bl	800fc6c <__i2b>
 800ed64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed66:	4604      	mov	r4, r0
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	f000 81cf 	beq.w	800f10c <_dtoa_r+0xb3c>
 800ed6e:	461a      	mov	r2, r3
 800ed70:	4601      	mov	r1, r0
 800ed72:	4658      	mov	r0, fp
 800ed74:	f001 f83a 	bl	800fdec <__pow5mult>
 800ed78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed7a:	2b01      	cmp	r3, #1
 800ed7c:	4604      	mov	r4, r0
 800ed7e:	f300 8095 	bgt.w	800eeac <_dtoa_r+0x8dc>
 800ed82:	9b02      	ldr	r3, [sp, #8]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	f040 8087 	bne.w	800ee98 <_dtoa_r+0x8c8>
 800ed8a:	9b03      	ldr	r3, [sp, #12]
 800ed8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	f040 8089 	bne.w	800eea8 <_dtoa_r+0x8d8>
 800ed96:	9b03      	ldr	r3, [sp, #12]
 800ed98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ed9c:	0d1b      	lsrs	r3, r3, #20
 800ed9e:	051b      	lsls	r3, r3, #20
 800eda0:	b12b      	cbz	r3, 800edae <_dtoa_r+0x7de>
 800eda2:	9b08      	ldr	r3, [sp, #32]
 800eda4:	3301      	adds	r3, #1
 800eda6:	9308      	str	r3, [sp, #32]
 800eda8:	f108 0801 	add.w	r8, r8, #1
 800edac:	2301      	movs	r3, #1
 800edae:	930a      	str	r3, [sp, #40]	@ 0x28
 800edb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	f000 81b0 	beq.w	800f118 <_dtoa_r+0xb48>
 800edb8:	6923      	ldr	r3, [r4, #16]
 800edba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800edbe:	6918      	ldr	r0, [r3, #16]
 800edc0:	f000 ff08 	bl	800fbd4 <__hi0bits>
 800edc4:	f1c0 0020 	rsb	r0, r0, #32
 800edc8:	9b08      	ldr	r3, [sp, #32]
 800edca:	4418      	add	r0, r3
 800edcc:	f010 001f 	ands.w	r0, r0, #31
 800edd0:	d077      	beq.n	800eec2 <_dtoa_r+0x8f2>
 800edd2:	f1c0 0320 	rsb	r3, r0, #32
 800edd6:	2b04      	cmp	r3, #4
 800edd8:	dd6b      	ble.n	800eeb2 <_dtoa_r+0x8e2>
 800edda:	9b08      	ldr	r3, [sp, #32]
 800eddc:	f1c0 001c 	rsb	r0, r0, #28
 800ede0:	4403      	add	r3, r0
 800ede2:	4480      	add	r8, r0
 800ede4:	4406      	add	r6, r0
 800ede6:	9308      	str	r3, [sp, #32]
 800ede8:	f1b8 0f00 	cmp.w	r8, #0
 800edec:	dd05      	ble.n	800edfa <_dtoa_r+0x82a>
 800edee:	4649      	mov	r1, r9
 800edf0:	4642      	mov	r2, r8
 800edf2:	4658      	mov	r0, fp
 800edf4:	f001 f854 	bl	800fea0 <__lshift>
 800edf8:	4681      	mov	r9, r0
 800edfa:	9b08      	ldr	r3, [sp, #32]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	dd05      	ble.n	800ee0c <_dtoa_r+0x83c>
 800ee00:	4621      	mov	r1, r4
 800ee02:	461a      	mov	r2, r3
 800ee04:	4658      	mov	r0, fp
 800ee06:	f001 f84b 	bl	800fea0 <__lshift>
 800ee0a:	4604      	mov	r4, r0
 800ee0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d059      	beq.n	800eec6 <_dtoa_r+0x8f6>
 800ee12:	4621      	mov	r1, r4
 800ee14:	4648      	mov	r0, r9
 800ee16:	f001 f8af 	bl	800ff78 <__mcmp>
 800ee1a:	2800      	cmp	r0, #0
 800ee1c:	da53      	bge.n	800eec6 <_dtoa_r+0x8f6>
 800ee1e:	1e7b      	subs	r3, r7, #1
 800ee20:	9304      	str	r3, [sp, #16]
 800ee22:	4649      	mov	r1, r9
 800ee24:	2300      	movs	r3, #0
 800ee26:	220a      	movs	r2, #10
 800ee28:	4658      	mov	r0, fp
 800ee2a:	f000 fe43 	bl	800fab4 <__multadd>
 800ee2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee30:	4681      	mov	r9, r0
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	f000 8172 	beq.w	800f11c <_dtoa_r+0xb4c>
 800ee38:	2300      	movs	r3, #0
 800ee3a:	4629      	mov	r1, r5
 800ee3c:	220a      	movs	r2, #10
 800ee3e:	4658      	mov	r0, fp
 800ee40:	f000 fe38 	bl	800fab4 <__multadd>
 800ee44:	9b00      	ldr	r3, [sp, #0]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	4605      	mov	r5, r0
 800ee4a:	dc67      	bgt.n	800ef1c <_dtoa_r+0x94c>
 800ee4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee4e:	2b02      	cmp	r3, #2
 800ee50:	dc41      	bgt.n	800eed6 <_dtoa_r+0x906>
 800ee52:	e063      	b.n	800ef1c <_dtoa_r+0x94c>
 800ee54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ee56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ee5a:	e746      	b.n	800ecea <_dtoa_r+0x71a>
 800ee5c:	9b07      	ldr	r3, [sp, #28]
 800ee5e:	1e5c      	subs	r4, r3, #1
 800ee60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee62:	42a3      	cmp	r3, r4
 800ee64:	bfbf      	itttt	lt
 800ee66:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ee68:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ee6a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ee6c:	1ae3      	sublt	r3, r4, r3
 800ee6e:	bfb4      	ite	lt
 800ee70:	18d2      	addlt	r2, r2, r3
 800ee72:	1b1c      	subge	r4, r3, r4
 800ee74:	9b07      	ldr	r3, [sp, #28]
 800ee76:	bfbc      	itt	lt
 800ee78:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ee7a:	2400      	movlt	r4, #0
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	bfb5      	itete	lt
 800ee80:	eba8 0603 	sublt.w	r6, r8, r3
 800ee84:	9b07      	ldrge	r3, [sp, #28]
 800ee86:	2300      	movlt	r3, #0
 800ee88:	4646      	movge	r6, r8
 800ee8a:	e730      	b.n	800ecee <_dtoa_r+0x71e>
 800ee8c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ee8e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ee90:	4646      	mov	r6, r8
 800ee92:	e735      	b.n	800ed00 <_dtoa_r+0x730>
 800ee94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ee96:	e75c      	b.n	800ed52 <_dtoa_r+0x782>
 800ee98:	2300      	movs	r3, #0
 800ee9a:	e788      	b.n	800edae <_dtoa_r+0x7de>
 800ee9c:	3fe00000 	.word	0x3fe00000
 800eea0:	40240000 	.word	0x40240000
 800eea4:	40140000 	.word	0x40140000
 800eea8:	9b02      	ldr	r3, [sp, #8]
 800eeaa:	e780      	b.n	800edae <_dtoa_r+0x7de>
 800eeac:	2300      	movs	r3, #0
 800eeae:	930a      	str	r3, [sp, #40]	@ 0x28
 800eeb0:	e782      	b.n	800edb8 <_dtoa_r+0x7e8>
 800eeb2:	d099      	beq.n	800ede8 <_dtoa_r+0x818>
 800eeb4:	9a08      	ldr	r2, [sp, #32]
 800eeb6:	331c      	adds	r3, #28
 800eeb8:	441a      	add	r2, r3
 800eeba:	4498      	add	r8, r3
 800eebc:	441e      	add	r6, r3
 800eebe:	9208      	str	r2, [sp, #32]
 800eec0:	e792      	b.n	800ede8 <_dtoa_r+0x818>
 800eec2:	4603      	mov	r3, r0
 800eec4:	e7f6      	b.n	800eeb4 <_dtoa_r+0x8e4>
 800eec6:	9b07      	ldr	r3, [sp, #28]
 800eec8:	9704      	str	r7, [sp, #16]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	dc20      	bgt.n	800ef10 <_dtoa_r+0x940>
 800eece:	9300      	str	r3, [sp, #0]
 800eed0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eed2:	2b02      	cmp	r3, #2
 800eed4:	dd1e      	ble.n	800ef14 <_dtoa_r+0x944>
 800eed6:	9b00      	ldr	r3, [sp, #0]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	f47f aec0 	bne.w	800ec5e <_dtoa_r+0x68e>
 800eede:	4621      	mov	r1, r4
 800eee0:	2205      	movs	r2, #5
 800eee2:	4658      	mov	r0, fp
 800eee4:	f000 fde6 	bl	800fab4 <__multadd>
 800eee8:	4601      	mov	r1, r0
 800eeea:	4604      	mov	r4, r0
 800eeec:	4648      	mov	r0, r9
 800eeee:	f001 f843 	bl	800ff78 <__mcmp>
 800eef2:	2800      	cmp	r0, #0
 800eef4:	f77f aeb3 	ble.w	800ec5e <_dtoa_r+0x68e>
 800eef8:	4656      	mov	r6, sl
 800eefa:	2331      	movs	r3, #49	@ 0x31
 800eefc:	f806 3b01 	strb.w	r3, [r6], #1
 800ef00:	9b04      	ldr	r3, [sp, #16]
 800ef02:	3301      	adds	r3, #1
 800ef04:	9304      	str	r3, [sp, #16]
 800ef06:	e6ae      	b.n	800ec66 <_dtoa_r+0x696>
 800ef08:	9c07      	ldr	r4, [sp, #28]
 800ef0a:	9704      	str	r7, [sp, #16]
 800ef0c:	4625      	mov	r5, r4
 800ef0e:	e7f3      	b.n	800eef8 <_dtoa_r+0x928>
 800ef10:	9b07      	ldr	r3, [sp, #28]
 800ef12:	9300      	str	r3, [sp, #0]
 800ef14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	f000 8104 	beq.w	800f124 <_dtoa_r+0xb54>
 800ef1c:	2e00      	cmp	r6, #0
 800ef1e:	dd05      	ble.n	800ef2c <_dtoa_r+0x95c>
 800ef20:	4629      	mov	r1, r5
 800ef22:	4632      	mov	r2, r6
 800ef24:	4658      	mov	r0, fp
 800ef26:	f000 ffbb 	bl	800fea0 <__lshift>
 800ef2a:	4605      	mov	r5, r0
 800ef2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d05a      	beq.n	800efe8 <_dtoa_r+0xa18>
 800ef32:	6869      	ldr	r1, [r5, #4]
 800ef34:	4658      	mov	r0, fp
 800ef36:	f000 fd5b 	bl	800f9f0 <_Balloc>
 800ef3a:	4606      	mov	r6, r0
 800ef3c:	b928      	cbnz	r0, 800ef4a <_dtoa_r+0x97a>
 800ef3e:	4b84      	ldr	r3, [pc, #528]	@ (800f150 <_dtoa_r+0xb80>)
 800ef40:	4602      	mov	r2, r0
 800ef42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ef46:	f7ff bb5a 	b.w	800e5fe <_dtoa_r+0x2e>
 800ef4a:	692a      	ldr	r2, [r5, #16]
 800ef4c:	3202      	adds	r2, #2
 800ef4e:	0092      	lsls	r2, r2, #2
 800ef50:	f105 010c 	add.w	r1, r5, #12
 800ef54:	300c      	adds	r0, #12
 800ef56:	f7ff fa94 	bl	800e482 <memcpy>
 800ef5a:	2201      	movs	r2, #1
 800ef5c:	4631      	mov	r1, r6
 800ef5e:	4658      	mov	r0, fp
 800ef60:	f000 ff9e 	bl	800fea0 <__lshift>
 800ef64:	f10a 0301 	add.w	r3, sl, #1
 800ef68:	9307      	str	r3, [sp, #28]
 800ef6a:	9b00      	ldr	r3, [sp, #0]
 800ef6c:	4453      	add	r3, sl
 800ef6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ef70:	9b02      	ldr	r3, [sp, #8]
 800ef72:	f003 0301 	and.w	r3, r3, #1
 800ef76:	462f      	mov	r7, r5
 800ef78:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef7a:	4605      	mov	r5, r0
 800ef7c:	9b07      	ldr	r3, [sp, #28]
 800ef7e:	4621      	mov	r1, r4
 800ef80:	3b01      	subs	r3, #1
 800ef82:	4648      	mov	r0, r9
 800ef84:	9300      	str	r3, [sp, #0]
 800ef86:	f7ff fa99 	bl	800e4bc <quorem>
 800ef8a:	4639      	mov	r1, r7
 800ef8c:	9002      	str	r0, [sp, #8]
 800ef8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ef92:	4648      	mov	r0, r9
 800ef94:	f000 fff0 	bl	800ff78 <__mcmp>
 800ef98:	462a      	mov	r2, r5
 800ef9a:	9008      	str	r0, [sp, #32]
 800ef9c:	4621      	mov	r1, r4
 800ef9e:	4658      	mov	r0, fp
 800efa0:	f001 f806 	bl	800ffb0 <__mdiff>
 800efa4:	68c2      	ldr	r2, [r0, #12]
 800efa6:	4606      	mov	r6, r0
 800efa8:	bb02      	cbnz	r2, 800efec <_dtoa_r+0xa1c>
 800efaa:	4601      	mov	r1, r0
 800efac:	4648      	mov	r0, r9
 800efae:	f000 ffe3 	bl	800ff78 <__mcmp>
 800efb2:	4602      	mov	r2, r0
 800efb4:	4631      	mov	r1, r6
 800efb6:	4658      	mov	r0, fp
 800efb8:	920e      	str	r2, [sp, #56]	@ 0x38
 800efba:	f000 fd59 	bl	800fa70 <_Bfree>
 800efbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efc0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800efc2:	9e07      	ldr	r6, [sp, #28]
 800efc4:	ea43 0102 	orr.w	r1, r3, r2
 800efc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800efca:	4319      	orrs	r1, r3
 800efcc:	d110      	bne.n	800eff0 <_dtoa_r+0xa20>
 800efce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800efd2:	d029      	beq.n	800f028 <_dtoa_r+0xa58>
 800efd4:	9b08      	ldr	r3, [sp, #32]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	dd02      	ble.n	800efe0 <_dtoa_r+0xa10>
 800efda:	9b02      	ldr	r3, [sp, #8]
 800efdc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800efe0:	9b00      	ldr	r3, [sp, #0]
 800efe2:	f883 8000 	strb.w	r8, [r3]
 800efe6:	e63f      	b.n	800ec68 <_dtoa_r+0x698>
 800efe8:	4628      	mov	r0, r5
 800efea:	e7bb      	b.n	800ef64 <_dtoa_r+0x994>
 800efec:	2201      	movs	r2, #1
 800efee:	e7e1      	b.n	800efb4 <_dtoa_r+0x9e4>
 800eff0:	9b08      	ldr	r3, [sp, #32]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	db04      	blt.n	800f000 <_dtoa_r+0xa30>
 800eff6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eff8:	430b      	orrs	r3, r1
 800effa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800effc:	430b      	orrs	r3, r1
 800effe:	d120      	bne.n	800f042 <_dtoa_r+0xa72>
 800f000:	2a00      	cmp	r2, #0
 800f002:	dded      	ble.n	800efe0 <_dtoa_r+0xa10>
 800f004:	4649      	mov	r1, r9
 800f006:	2201      	movs	r2, #1
 800f008:	4658      	mov	r0, fp
 800f00a:	f000 ff49 	bl	800fea0 <__lshift>
 800f00e:	4621      	mov	r1, r4
 800f010:	4681      	mov	r9, r0
 800f012:	f000 ffb1 	bl	800ff78 <__mcmp>
 800f016:	2800      	cmp	r0, #0
 800f018:	dc03      	bgt.n	800f022 <_dtoa_r+0xa52>
 800f01a:	d1e1      	bne.n	800efe0 <_dtoa_r+0xa10>
 800f01c:	f018 0f01 	tst.w	r8, #1
 800f020:	d0de      	beq.n	800efe0 <_dtoa_r+0xa10>
 800f022:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f026:	d1d8      	bne.n	800efda <_dtoa_r+0xa0a>
 800f028:	9a00      	ldr	r2, [sp, #0]
 800f02a:	2339      	movs	r3, #57	@ 0x39
 800f02c:	7013      	strb	r3, [r2, #0]
 800f02e:	4633      	mov	r3, r6
 800f030:	461e      	mov	r6, r3
 800f032:	3b01      	subs	r3, #1
 800f034:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f038:	2a39      	cmp	r2, #57	@ 0x39
 800f03a:	d052      	beq.n	800f0e2 <_dtoa_r+0xb12>
 800f03c:	3201      	adds	r2, #1
 800f03e:	701a      	strb	r2, [r3, #0]
 800f040:	e612      	b.n	800ec68 <_dtoa_r+0x698>
 800f042:	2a00      	cmp	r2, #0
 800f044:	dd07      	ble.n	800f056 <_dtoa_r+0xa86>
 800f046:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f04a:	d0ed      	beq.n	800f028 <_dtoa_r+0xa58>
 800f04c:	9a00      	ldr	r2, [sp, #0]
 800f04e:	f108 0301 	add.w	r3, r8, #1
 800f052:	7013      	strb	r3, [r2, #0]
 800f054:	e608      	b.n	800ec68 <_dtoa_r+0x698>
 800f056:	9b07      	ldr	r3, [sp, #28]
 800f058:	9a07      	ldr	r2, [sp, #28]
 800f05a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f05e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f060:	4293      	cmp	r3, r2
 800f062:	d028      	beq.n	800f0b6 <_dtoa_r+0xae6>
 800f064:	4649      	mov	r1, r9
 800f066:	2300      	movs	r3, #0
 800f068:	220a      	movs	r2, #10
 800f06a:	4658      	mov	r0, fp
 800f06c:	f000 fd22 	bl	800fab4 <__multadd>
 800f070:	42af      	cmp	r7, r5
 800f072:	4681      	mov	r9, r0
 800f074:	f04f 0300 	mov.w	r3, #0
 800f078:	f04f 020a 	mov.w	r2, #10
 800f07c:	4639      	mov	r1, r7
 800f07e:	4658      	mov	r0, fp
 800f080:	d107      	bne.n	800f092 <_dtoa_r+0xac2>
 800f082:	f000 fd17 	bl	800fab4 <__multadd>
 800f086:	4607      	mov	r7, r0
 800f088:	4605      	mov	r5, r0
 800f08a:	9b07      	ldr	r3, [sp, #28]
 800f08c:	3301      	adds	r3, #1
 800f08e:	9307      	str	r3, [sp, #28]
 800f090:	e774      	b.n	800ef7c <_dtoa_r+0x9ac>
 800f092:	f000 fd0f 	bl	800fab4 <__multadd>
 800f096:	4629      	mov	r1, r5
 800f098:	4607      	mov	r7, r0
 800f09a:	2300      	movs	r3, #0
 800f09c:	220a      	movs	r2, #10
 800f09e:	4658      	mov	r0, fp
 800f0a0:	f000 fd08 	bl	800fab4 <__multadd>
 800f0a4:	4605      	mov	r5, r0
 800f0a6:	e7f0      	b.n	800f08a <_dtoa_r+0xaba>
 800f0a8:	9b00      	ldr	r3, [sp, #0]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	bfcc      	ite	gt
 800f0ae:	461e      	movgt	r6, r3
 800f0b0:	2601      	movle	r6, #1
 800f0b2:	4456      	add	r6, sl
 800f0b4:	2700      	movs	r7, #0
 800f0b6:	4649      	mov	r1, r9
 800f0b8:	2201      	movs	r2, #1
 800f0ba:	4658      	mov	r0, fp
 800f0bc:	f000 fef0 	bl	800fea0 <__lshift>
 800f0c0:	4621      	mov	r1, r4
 800f0c2:	4681      	mov	r9, r0
 800f0c4:	f000 ff58 	bl	800ff78 <__mcmp>
 800f0c8:	2800      	cmp	r0, #0
 800f0ca:	dcb0      	bgt.n	800f02e <_dtoa_r+0xa5e>
 800f0cc:	d102      	bne.n	800f0d4 <_dtoa_r+0xb04>
 800f0ce:	f018 0f01 	tst.w	r8, #1
 800f0d2:	d1ac      	bne.n	800f02e <_dtoa_r+0xa5e>
 800f0d4:	4633      	mov	r3, r6
 800f0d6:	461e      	mov	r6, r3
 800f0d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f0dc:	2a30      	cmp	r2, #48	@ 0x30
 800f0de:	d0fa      	beq.n	800f0d6 <_dtoa_r+0xb06>
 800f0e0:	e5c2      	b.n	800ec68 <_dtoa_r+0x698>
 800f0e2:	459a      	cmp	sl, r3
 800f0e4:	d1a4      	bne.n	800f030 <_dtoa_r+0xa60>
 800f0e6:	9b04      	ldr	r3, [sp, #16]
 800f0e8:	3301      	adds	r3, #1
 800f0ea:	9304      	str	r3, [sp, #16]
 800f0ec:	2331      	movs	r3, #49	@ 0x31
 800f0ee:	f88a 3000 	strb.w	r3, [sl]
 800f0f2:	e5b9      	b.n	800ec68 <_dtoa_r+0x698>
 800f0f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f0f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f154 <_dtoa_r+0xb84>
 800f0fa:	b11b      	cbz	r3, 800f104 <_dtoa_r+0xb34>
 800f0fc:	f10a 0308 	add.w	r3, sl, #8
 800f100:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f102:	6013      	str	r3, [r2, #0]
 800f104:	4650      	mov	r0, sl
 800f106:	b019      	add	sp, #100	@ 0x64
 800f108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f10c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f10e:	2b01      	cmp	r3, #1
 800f110:	f77f ae37 	ble.w	800ed82 <_dtoa_r+0x7b2>
 800f114:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f116:	930a      	str	r3, [sp, #40]	@ 0x28
 800f118:	2001      	movs	r0, #1
 800f11a:	e655      	b.n	800edc8 <_dtoa_r+0x7f8>
 800f11c:	9b00      	ldr	r3, [sp, #0]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	f77f aed6 	ble.w	800eed0 <_dtoa_r+0x900>
 800f124:	4656      	mov	r6, sl
 800f126:	4621      	mov	r1, r4
 800f128:	4648      	mov	r0, r9
 800f12a:	f7ff f9c7 	bl	800e4bc <quorem>
 800f12e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f132:	f806 8b01 	strb.w	r8, [r6], #1
 800f136:	9b00      	ldr	r3, [sp, #0]
 800f138:	eba6 020a 	sub.w	r2, r6, sl
 800f13c:	4293      	cmp	r3, r2
 800f13e:	ddb3      	ble.n	800f0a8 <_dtoa_r+0xad8>
 800f140:	4649      	mov	r1, r9
 800f142:	2300      	movs	r3, #0
 800f144:	220a      	movs	r2, #10
 800f146:	4658      	mov	r0, fp
 800f148:	f000 fcb4 	bl	800fab4 <__multadd>
 800f14c:	4681      	mov	r9, r0
 800f14e:	e7ea      	b.n	800f126 <_dtoa_r+0xb56>
 800f150:	08011405 	.word	0x08011405
 800f154:	08011389 	.word	0x08011389

0800f158 <_free_r>:
 800f158:	b538      	push	{r3, r4, r5, lr}
 800f15a:	4605      	mov	r5, r0
 800f15c:	2900      	cmp	r1, #0
 800f15e:	d041      	beq.n	800f1e4 <_free_r+0x8c>
 800f160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f164:	1f0c      	subs	r4, r1, #4
 800f166:	2b00      	cmp	r3, #0
 800f168:	bfb8      	it	lt
 800f16a:	18e4      	addlt	r4, r4, r3
 800f16c:	f000 fc34 	bl	800f9d8 <__malloc_lock>
 800f170:	4a1d      	ldr	r2, [pc, #116]	@ (800f1e8 <_free_r+0x90>)
 800f172:	6813      	ldr	r3, [r2, #0]
 800f174:	b933      	cbnz	r3, 800f184 <_free_r+0x2c>
 800f176:	6063      	str	r3, [r4, #4]
 800f178:	6014      	str	r4, [r2, #0]
 800f17a:	4628      	mov	r0, r5
 800f17c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f180:	f000 bc30 	b.w	800f9e4 <__malloc_unlock>
 800f184:	42a3      	cmp	r3, r4
 800f186:	d908      	bls.n	800f19a <_free_r+0x42>
 800f188:	6820      	ldr	r0, [r4, #0]
 800f18a:	1821      	adds	r1, r4, r0
 800f18c:	428b      	cmp	r3, r1
 800f18e:	bf01      	itttt	eq
 800f190:	6819      	ldreq	r1, [r3, #0]
 800f192:	685b      	ldreq	r3, [r3, #4]
 800f194:	1809      	addeq	r1, r1, r0
 800f196:	6021      	streq	r1, [r4, #0]
 800f198:	e7ed      	b.n	800f176 <_free_r+0x1e>
 800f19a:	461a      	mov	r2, r3
 800f19c:	685b      	ldr	r3, [r3, #4]
 800f19e:	b10b      	cbz	r3, 800f1a4 <_free_r+0x4c>
 800f1a0:	42a3      	cmp	r3, r4
 800f1a2:	d9fa      	bls.n	800f19a <_free_r+0x42>
 800f1a4:	6811      	ldr	r1, [r2, #0]
 800f1a6:	1850      	adds	r0, r2, r1
 800f1a8:	42a0      	cmp	r0, r4
 800f1aa:	d10b      	bne.n	800f1c4 <_free_r+0x6c>
 800f1ac:	6820      	ldr	r0, [r4, #0]
 800f1ae:	4401      	add	r1, r0
 800f1b0:	1850      	adds	r0, r2, r1
 800f1b2:	4283      	cmp	r3, r0
 800f1b4:	6011      	str	r1, [r2, #0]
 800f1b6:	d1e0      	bne.n	800f17a <_free_r+0x22>
 800f1b8:	6818      	ldr	r0, [r3, #0]
 800f1ba:	685b      	ldr	r3, [r3, #4]
 800f1bc:	6053      	str	r3, [r2, #4]
 800f1be:	4408      	add	r0, r1
 800f1c0:	6010      	str	r0, [r2, #0]
 800f1c2:	e7da      	b.n	800f17a <_free_r+0x22>
 800f1c4:	d902      	bls.n	800f1cc <_free_r+0x74>
 800f1c6:	230c      	movs	r3, #12
 800f1c8:	602b      	str	r3, [r5, #0]
 800f1ca:	e7d6      	b.n	800f17a <_free_r+0x22>
 800f1cc:	6820      	ldr	r0, [r4, #0]
 800f1ce:	1821      	adds	r1, r4, r0
 800f1d0:	428b      	cmp	r3, r1
 800f1d2:	bf04      	itt	eq
 800f1d4:	6819      	ldreq	r1, [r3, #0]
 800f1d6:	685b      	ldreq	r3, [r3, #4]
 800f1d8:	6063      	str	r3, [r4, #4]
 800f1da:	bf04      	itt	eq
 800f1dc:	1809      	addeq	r1, r1, r0
 800f1de:	6021      	streq	r1, [r4, #0]
 800f1e0:	6054      	str	r4, [r2, #4]
 800f1e2:	e7ca      	b.n	800f17a <_free_r+0x22>
 800f1e4:	bd38      	pop	{r3, r4, r5, pc}
 800f1e6:	bf00      	nop
 800f1e8:	20000ad0 	.word	0x20000ad0

0800f1ec <rshift>:
 800f1ec:	6903      	ldr	r3, [r0, #16]
 800f1ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f1f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f1f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f1fa:	f100 0414 	add.w	r4, r0, #20
 800f1fe:	dd45      	ble.n	800f28c <rshift+0xa0>
 800f200:	f011 011f 	ands.w	r1, r1, #31
 800f204:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f208:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f20c:	d10c      	bne.n	800f228 <rshift+0x3c>
 800f20e:	f100 0710 	add.w	r7, r0, #16
 800f212:	4629      	mov	r1, r5
 800f214:	42b1      	cmp	r1, r6
 800f216:	d334      	bcc.n	800f282 <rshift+0x96>
 800f218:	1a9b      	subs	r3, r3, r2
 800f21a:	009b      	lsls	r3, r3, #2
 800f21c:	1eea      	subs	r2, r5, #3
 800f21e:	4296      	cmp	r6, r2
 800f220:	bf38      	it	cc
 800f222:	2300      	movcc	r3, #0
 800f224:	4423      	add	r3, r4
 800f226:	e015      	b.n	800f254 <rshift+0x68>
 800f228:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f22c:	f1c1 0820 	rsb	r8, r1, #32
 800f230:	40cf      	lsrs	r7, r1
 800f232:	f105 0e04 	add.w	lr, r5, #4
 800f236:	46a1      	mov	r9, r4
 800f238:	4576      	cmp	r6, lr
 800f23a:	46f4      	mov	ip, lr
 800f23c:	d815      	bhi.n	800f26a <rshift+0x7e>
 800f23e:	1a9a      	subs	r2, r3, r2
 800f240:	0092      	lsls	r2, r2, #2
 800f242:	3a04      	subs	r2, #4
 800f244:	3501      	adds	r5, #1
 800f246:	42ae      	cmp	r6, r5
 800f248:	bf38      	it	cc
 800f24a:	2200      	movcc	r2, #0
 800f24c:	18a3      	adds	r3, r4, r2
 800f24e:	50a7      	str	r7, [r4, r2]
 800f250:	b107      	cbz	r7, 800f254 <rshift+0x68>
 800f252:	3304      	adds	r3, #4
 800f254:	1b1a      	subs	r2, r3, r4
 800f256:	42a3      	cmp	r3, r4
 800f258:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f25c:	bf08      	it	eq
 800f25e:	2300      	moveq	r3, #0
 800f260:	6102      	str	r2, [r0, #16]
 800f262:	bf08      	it	eq
 800f264:	6143      	streq	r3, [r0, #20]
 800f266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f26a:	f8dc c000 	ldr.w	ip, [ip]
 800f26e:	fa0c fc08 	lsl.w	ip, ip, r8
 800f272:	ea4c 0707 	orr.w	r7, ip, r7
 800f276:	f849 7b04 	str.w	r7, [r9], #4
 800f27a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f27e:	40cf      	lsrs	r7, r1
 800f280:	e7da      	b.n	800f238 <rshift+0x4c>
 800f282:	f851 cb04 	ldr.w	ip, [r1], #4
 800f286:	f847 cf04 	str.w	ip, [r7, #4]!
 800f28a:	e7c3      	b.n	800f214 <rshift+0x28>
 800f28c:	4623      	mov	r3, r4
 800f28e:	e7e1      	b.n	800f254 <rshift+0x68>

0800f290 <__hexdig_fun>:
 800f290:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f294:	2b09      	cmp	r3, #9
 800f296:	d802      	bhi.n	800f29e <__hexdig_fun+0xe>
 800f298:	3820      	subs	r0, #32
 800f29a:	b2c0      	uxtb	r0, r0
 800f29c:	4770      	bx	lr
 800f29e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f2a2:	2b05      	cmp	r3, #5
 800f2a4:	d801      	bhi.n	800f2aa <__hexdig_fun+0x1a>
 800f2a6:	3847      	subs	r0, #71	@ 0x47
 800f2a8:	e7f7      	b.n	800f29a <__hexdig_fun+0xa>
 800f2aa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f2ae:	2b05      	cmp	r3, #5
 800f2b0:	d801      	bhi.n	800f2b6 <__hexdig_fun+0x26>
 800f2b2:	3827      	subs	r0, #39	@ 0x27
 800f2b4:	e7f1      	b.n	800f29a <__hexdig_fun+0xa>
 800f2b6:	2000      	movs	r0, #0
 800f2b8:	4770      	bx	lr
	...

0800f2bc <__gethex>:
 800f2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2c0:	b085      	sub	sp, #20
 800f2c2:	468a      	mov	sl, r1
 800f2c4:	9302      	str	r3, [sp, #8]
 800f2c6:	680b      	ldr	r3, [r1, #0]
 800f2c8:	9001      	str	r0, [sp, #4]
 800f2ca:	4690      	mov	r8, r2
 800f2cc:	1c9c      	adds	r4, r3, #2
 800f2ce:	46a1      	mov	r9, r4
 800f2d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f2d4:	2830      	cmp	r0, #48	@ 0x30
 800f2d6:	d0fa      	beq.n	800f2ce <__gethex+0x12>
 800f2d8:	eba9 0303 	sub.w	r3, r9, r3
 800f2dc:	f1a3 0b02 	sub.w	fp, r3, #2
 800f2e0:	f7ff ffd6 	bl	800f290 <__hexdig_fun>
 800f2e4:	4605      	mov	r5, r0
 800f2e6:	2800      	cmp	r0, #0
 800f2e8:	d168      	bne.n	800f3bc <__gethex+0x100>
 800f2ea:	49a0      	ldr	r1, [pc, #640]	@ (800f56c <__gethex+0x2b0>)
 800f2ec:	2201      	movs	r2, #1
 800f2ee:	4648      	mov	r0, r9
 800f2f0:	f7ff f83e 	bl	800e370 <strncmp>
 800f2f4:	4607      	mov	r7, r0
 800f2f6:	2800      	cmp	r0, #0
 800f2f8:	d167      	bne.n	800f3ca <__gethex+0x10e>
 800f2fa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f2fe:	4626      	mov	r6, r4
 800f300:	f7ff ffc6 	bl	800f290 <__hexdig_fun>
 800f304:	2800      	cmp	r0, #0
 800f306:	d062      	beq.n	800f3ce <__gethex+0x112>
 800f308:	4623      	mov	r3, r4
 800f30a:	7818      	ldrb	r0, [r3, #0]
 800f30c:	2830      	cmp	r0, #48	@ 0x30
 800f30e:	4699      	mov	r9, r3
 800f310:	f103 0301 	add.w	r3, r3, #1
 800f314:	d0f9      	beq.n	800f30a <__gethex+0x4e>
 800f316:	f7ff ffbb 	bl	800f290 <__hexdig_fun>
 800f31a:	fab0 f580 	clz	r5, r0
 800f31e:	096d      	lsrs	r5, r5, #5
 800f320:	f04f 0b01 	mov.w	fp, #1
 800f324:	464a      	mov	r2, r9
 800f326:	4616      	mov	r6, r2
 800f328:	3201      	adds	r2, #1
 800f32a:	7830      	ldrb	r0, [r6, #0]
 800f32c:	f7ff ffb0 	bl	800f290 <__hexdig_fun>
 800f330:	2800      	cmp	r0, #0
 800f332:	d1f8      	bne.n	800f326 <__gethex+0x6a>
 800f334:	498d      	ldr	r1, [pc, #564]	@ (800f56c <__gethex+0x2b0>)
 800f336:	2201      	movs	r2, #1
 800f338:	4630      	mov	r0, r6
 800f33a:	f7ff f819 	bl	800e370 <strncmp>
 800f33e:	2800      	cmp	r0, #0
 800f340:	d13f      	bne.n	800f3c2 <__gethex+0x106>
 800f342:	b944      	cbnz	r4, 800f356 <__gethex+0x9a>
 800f344:	1c74      	adds	r4, r6, #1
 800f346:	4622      	mov	r2, r4
 800f348:	4616      	mov	r6, r2
 800f34a:	3201      	adds	r2, #1
 800f34c:	7830      	ldrb	r0, [r6, #0]
 800f34e:	f7ff ff9f 	bl	800f290 <__hexdig_fun>
 800f352:	2800      	cmp	r0, #0
 800f354:	d1f8      	bne.n	800f348 <__gethex+0x8c>
 800f356:	1ba4      	subs	r4, r4, r6
 800f358:	00a7      	lsls	r7, r4, #2
 800f35a:	7833      	ldrb	r3, [r6, #0]
 800f35c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f360:	2b50      	cmp	r3, #80	@ 0x50
 800f362:	d13e      	bne.n	800f3e2 <__gethex+0x126>
 800f364:	7873      	ldrb	r3, [r6, #1]
 800f366:	2b2b      	cmp	r3, #43	@ 0x2b
 800f368:	d033      	beq.n	800f3d2 <__gethex+0x116>
 800f36a:	2b2d      	cmp	r3, #45	@ 0x2d
 800f36c:	d034      	beq.n	800f3d8 <__gethex+0x11c>
 800f36e:	1c71      	adds	r1, r6, #1
 800f370:	2400      	movs	r4, #0
 800f372:	7808      	ldrb	r0, [r1, #0]
 800f374:	f7ff ff8c 	bl	800f290 <__hexdig_fun>
 800f378:	1e43      	subs	r3, r0, #1
 800f37a:	b2db      	uxtb	r3, r3
 800f37c:	2b18      	cmp	r3, #24
 800f37e:	d830      	bhi.n	800f3e2 <__gethex+0x126>
 800f380:	f1a0 0210 	sub.w	r2, r0, #16
 800f384:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f388:	f7ff ff82 	bl	800f290 <__hexdig_fun>
 800f38c:	f100 3cff 	add.w	ip, r0, #4294967295
 800f390:	fa5f fc8c 	uxtb.w	ip, ip
 800f394:	f1bc 0f18 	cmp.w	ip, #24
 800f398:	f04f 030a 	mov.w	r3, #10
 800f39c:	d91e      	bls.n	800f3dc <__gethex+0x120>
 800f39e:	b104      	cbz	r4, 800f3a2 <__gethex+0xe6>
 800f3a0:	4252      	negs	r2, r2
 800f3a2:	4417      	add	r7, r2
 800f3a4:	f8ca 1000 	str.w	r1, [sl]
 800f3a8:	b1ed      	cbz	r5, 800f3e6 <__gethex+0x12a>
 800f3aa:	f1bb 0f00 	cmp.w	fp, #0
 800f3ae:	bf0c      	ite	eq
 800f3b0:	2506      	moveq	r5, #6
 800f3b2:	2500      	movne	r5, #0
 800f3b4:	4628      	mov	r0, r5
 800f3b6:	b005      	add	sp, #20
 800f3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3bc:	2500      	movs	r5, #0
 800f3be:	462c      	mov	r4, r5
 800f3c0:	e7b0      	b.n	800f324 <__gethex+0x68>
 800f3c2:	2c00      	cmp	r4, #0
 800f3c4:	d1c7      	bne.n	800f356 <__gethex+0x9a>
 800f3c6:	4627      	mov	r7, r4
 800f3c8:	e7c7      	b.n	800f35a <__gethex+0x9e>
 800f3ca:	464e      	mov	r6, r9
 800f3cc:	462f      	mov	r7, r5
 800f3ce:	2501      	movs	r5, #1
 800f3d0:	e7c3      	b.n	800f35a <__gethex+0x9e>
 800f3d2:	2400      	movs	r4, #0
 800f3d4:	1cb1      	adds	r1, r6, #2
 800f3d6:	e7cc      	b.n	800f372 <__gethex+0xb6>
 800f3d8:	2401      	movs	r4, #1
 800f3da:	e7fb      	b.n	800f3d4 <__gethex+0x118>
 800f3dc:	fb03 0002 	mla	r0, r3, r2, r0
 800f3e0:	e7ce      	b.n	800f380 <__gethex+0xc4>
 800f3e2:	4631      	mov	r1, r6
 800f3e4:	e7de      	b.n	800f3a4 <__gethex+0xe8>
 800f3e6:	eba6 0309 	sub.w	r3, r6, r9
 800f3ea:	3b01      	subs	r3, #1
 800f3ec:	4629      	mov	r1, r5
 800f3ee:	2b07      	cmp	r3, #7
 800f3f0:	dc0a      	bgt.n	800f408 <__gethex+0x14c>
 800f3f2:	9801      	ldr	r0, [sp, #4]
 800f3f4:	f000 fafc 	bl	800f9f0 <_Balloc>
 800f3f8:	4604      	mov	r4, r0
 800f3fa:	b940      	cbnz	r0, 800f40e <__gethex+0x152>
 800f3fc:	4b5c      	ldr	r3, [pc, #368]	@ (800f570 <__gethex+0x2b4>)
 800f3fe:	4602      	mov	r2, r0
 800f400:	21e4      	movs	r1, #228	@ 0xe4
 800f402:	485c      	ldr	r0, [pc, #368]	@ (800f574 <__gethex+0x2b8>)
 800f404:	f001 fa5c 	bl	80108c0 <__assert_func>
 800f408:	3101      	adds	r1, #1
 800f40a:	105b      	asrs	r3, r3, #1
 800f40c:	e7ef      	b.n	800f3ee <__gethex+0x132>
 800f40e:	f100 0a14 	add.w	sl, r0, #20
 800f412:	2300      	movs	r3, #0
 800f414:	4655      	mov	r5, sl
 800f416:	469b      	mov	fp, r3
 800f418:	45b1      	cmp	r9, r6
 800f41a:	d337      	bcc.n	800f48c <__gethex+0x1d0>
 800f41c:	f845 bb04 	str.w	fp, [r5], #4
 800f420:	eba5 050a 	sub.w	r5, r5, sl
 800f424:	10ad      	asrs	r5, r5, #2
 800f426:	6125      	str	r5, [r4, #16]
 800f428:	4658      	mov	r0, fp
 800f42a:	f000 fbd3 	bl	800fbd4 <__hi0bits>
 800f42e:	016d      	lsls	r5, r5, #5
 800f430:	f8d8 6000 	ldr.w	r6, [r8]
 800f434:	1a2d      	subs	r5, r5, r0
 800f436:	42b5      	cmp	r5, r6
 800f438:	dd54      	ble.n	800f4e4 <__gethex+0x228>
 800f43a:	1bad      	subs	r5, r5, r6
 800f43c:	4629      	mov	r1, r5
 800f43e:	4620      	mov	r0, r4
 800f440:	f000 ff67 	bl	8010312 <__any_on>
 800f444:	4681      	mov	r9, r0
 800f446:	b178      	cbz	r0, 800f468 <__gethex+0x1ac>
 800f448:	1e6b      	subs	r3, r5, #1
 800f44a:	1159      	asrs	r1, r3, #5
 800f44c:	f003 021f 	and.w	r2, r3, #31
 800f450:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f454:	f04f 0901 	mov.w	r9, #1
 800f458:	fa09 f202 	lsl.w	r2, r9, r2
 800f45c:	420a      	tst	r2, r1
 800f45e:	d003      	beq.n	800f468 <__gethex+0x1ac>
 800f460:	454b      	cmp	r3, r9
 800f462:	dc36      	bgt.n	800f4d2 <__gethex+0x216>
 800f464:	f04f 0902 	mov.w	r9, #2
 800f468:	4629      	mov	r1, r5
 800f46a:	4620      	mov	r0, r4
 800f46c:	f7ff febe 	bl	800f1ec <rshift>
 800f470:	442f      	add	r7, r5
 800f472:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f476:	42bb      	cmp	r3, r7
 800f478:	da42      	bge.n	800f500 <__gethex+0x244>
 800f47a:	9801      	ldr	r0, [sp, #4]
 800f47c:	4621      	mov	r1, r4
 800f47e:	f000 faf7 	bl	800fa70 <_Bfree>
 800f482:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f484:	2300      	movs	r3, #0
 800f486:	6013      	str	r3, [r2, #0]
 800f488:	25a3      	movs	r5, #163	@ 0xa3
 800f48a:	e793      	b.n	800f3b4 <__gethex+0xf8>
 800f48c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f490:	2a2e      	cmp	r2, #46	@ 0x2e
 800f492:	d012      	beq.n	800f4ba <__gethex+0x1fe>
 800f494:	2b20      	cmp	r3, #32
 800f496:	d104      	bne.n	800f4a2 <__gethex+0x1e6>
 800f498:	f845 bb04 	str.w	fp, [r5], #4
 800f49c:	f04f 0b00 	mov.w	fp, #0
 800f4a0:	465b      	mov	r3, fp
 800f4a2:	7830      	ldrb	r0, [r6, #0]
 800f4a4:	9303      	str	r3, [sp, #12]
 800f4a6:	f7ff fef3 	bl	800f290 <__hexdig_fun>
 800f4aa:	9b03      	ldr	r3, [sp, #12]
 800f4ac:	f000 000f 	and.w	r0, r0, #15
 800f4b0:	4098      	lsls	r0, r3
 800f4b2:	ea4b 0b00 	orr.w	fp, fp, r0
 800f4b6:	3304      	adds	r3, #4
 800f4b8:	e7ae      	b.n	800f418 <__gethex+0x15c>
 800f4ba:	45b1      	cmp	r9, r6
 800f4bc:	d8ea      	bhi.n	800f494 <__gethex+0x1d8>
 800f4be:	492b      	ldr	r1, [pc, #172]	@ (800f56c <__gethex+0x2b0>)
 800f4c0:	9303      	str	r3, [sp, #12]
 800f4c2:	2201      	movs	r2, #1
 800f4c4:	4630      	mov	r0, r6
 800f4c6:	f7fe ff53 	bl	800e370 <strncmp>
 800f4ca:	9b03      	ldr	r3, [sp, #12]
 800f4cc:	2800      	cmp	r0, #0
 800f4ce:	d1e1      	bne.n	800f494 <__gethex+0x1d8>
 800f4d0:	e7a2      	b.n	800f418 <__gethex+0x15c>
 800f4d2:	1ea9      	subs	r1, r5, #2
 800f4d4:	4620      	mov	r0, r4
 800f4d6:	f000 ff1c 	bl	8010312 <__any_on>
 800f4da:	2800      	cmp	r0, #0
 800f4dc:	d0c2      	beq.n	800f464 <__gethex+0x1a8>
 800f4de:	f04f 0903 	mov.w	r9, #3
 800f4e2:	e7c1      	b.n	800f468 <__gethex+0x1ac>
 800f4e4:	da09      	bge.n	800f4fa <__gethex+0x23e>
 800f4e6:	1b75      	subs	r5, r6, r5
 800f4e8:	4621      	mov	r1, r4
 800f4ea:	9801      	ldr	r0, [sp, #4]
 800f4ec:	462a      	mov	r2, r5
 800f4ee:	f000 fcd7 	bl	800fea0 <__lshift>
 800f4f2:	1b7f      	subs	r7, r7, r5
 800f4f4:	4604      	mov	r4, r0
 800f4f6:	f100 0a14 	add.w	sl, r0, #20
 800f4fa:	f04f 0900 	mov.w	r9, #0
 800f4fe:	e7b8      	b.n	800f472 <__gethex+0x1b6>
 800f500:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f504:	42bd      	cmp	r5, r7
 800f506:	dd6f      	ble.n	800f5e8 <__gethex+0x32c>
 800f508:	1bed      	subs	r5, r5, r7
 800f50a:	42ae      	cmp	r6, r5
 800f50c:	dc34      	bgt.n	800f578 <__gethex+0x2bc>
 800f50e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f512:	2b02      	cmp	r3, #2
 800f514:	d022      	beq.n	800f55c <__gethex+0x2a0>
 800f516:	2b03      	cmp	r3, #3
 800f518:	d024      	beq.n	800f564 <__gethex+0x2a8>
 800f51a:	2b01      	cmp	r3, #1
 800f51c:	d115      	bne.n	800f54a <__gethex+0x28e>
 800f51e:	42ae      	cmp	r6, r5
 800f520:	d113      	bne.n	800f54a <__gethex+0x28e>
 800f522:	2e01      	cmp	r6, #1
 800f524:	d10b      	bne.n	800f53e <__gethex+0x282>
 800f526:	9a02      	ldr	r2, [sp, #8]
 800f528:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f52c:	6013      	str	r3, [r2, #0]
 800f52e:	2301      	movs	r3, #1
 800f530:	6123      	str	r3, [r4, #16]
 800f532:	f8ca 3000 	str.w	r3, [sl]
 800f536:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f538:	2562      	movs	r5, #98	@ 0x62
 800f53a:	601c      	str	r4, [r3, #0]
 800f53c:	e73a      	b.n	800f3b4 <__gethex+0xf8>
 800f53e:	1e71      	subs	r1, r6, #1
 800f540:	4620      	mov	r0, r4
 800f542:	f000 fee6 	bl	8010312 <__any_on>
 800f546:	2800      	cmp	r0, #0
 800f548:	d1ed      	bne.n	800f526 <__gethex+0x26a>
 800f54a:	9801      	ldr	r0, [sp, #4]
 800f54c:	4621      	mov	r1, r4
 800f54e:	f000 fa8f 	bl	800fa70 <_Bfree>
 800f552:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f554:	2300      	movs	r3, #0
 800f556:	6013      	str	r3, [r2, #0]
 800f558:	2550      	movs	r5, #80	@ 0x50
 800f55a:	e72b      	b.n	800f3b4 <__gethex+0xf8>
 800f55c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d1f3      	bne.n	800f54a <__gethex+0x28e>
 800f562:	e7e0      	b.n	800f526 <__gethex+0x26a>
 800f564:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f566:	2b00      	cmp	r3, #0
 800f568:	d1dd      	bne.n	800f526 <__gethex+0x26a>
 800f56a:	e7ee      	b.n	800f54a <__gethex+0x28e>
 800f56c:	080112f4 	.word	0x080112f4
 800f570:	08011405 	.word	0x08011405
 800f574:	08011416 	.word	0x08011416
 800f578:	1e6f      	subs	r7, r5, #1
 800f57a:	f1b9 0f00 	cmp.w	r9, #0
 800f57e:	d130      	bne.n	800f5e2 <__gethex+0x326>
 800f580:	b127      	cbz	r7, 800f58c <__gethex+0x2d0>
 800f582:	4639      	mov	r1, r7
 800f584:	4620      	mov	r0, r4
 800f586:	f000 fec4 	bl	8010312 <__any_on>
 800f58a:	4681      	mov	r9, r0
 800f58c:	117a      	asrs	r2, r7, #5
 800f58e:	2301      	movs	r3, #1
 800f590:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f594:	f007 071f 	and.w	r7, r7, #31
 800f598:	40bb      	lsls	r3, r7
 800f59a:	4213      	tst	r3, r2
 800f59c:	4629      	mov	r1, r5
 800f59e:	4620      	mov	r0, r4
 800f5a0:	bf18      	it	ne
 800f5a2:	f049 0902 	orrne.w	r9, r9, #2
 800f5a6:	f7ff fe21 	bl	800f1ec <rshift>
 800f5aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f5ae:	1b76      	subs	r6, r6, r5
 800f5b0:	2502      	movs	r5, #2
 800f5b2:	f1b9 0f00 	cmp.w	r9, #0
 800f5b6:	d047      	beq.n	800f648 <__gethex+0x38c>
 800f5b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f5bc:	2b02      	cmp	r3, #2
 800f5be:	d015      	beq.n	800f5ec <__gethex+0x330>
 800f5c0:	2b03      	cmp	r3, #3
 800f5c2:	d017      	beq.n	800f5f4 <__gethex+0x338>
 800f5c4:	2b01      	cmp	r3, #1
 800f5c6:	d109      	bne.n	800f5dc <__gethex+0x320>
 800f5c8:	f019 0f02 	tst.w	r9, #2
 800f5cc:	d006      	beq.n	800f5dc <__gethex+0x320>
 800f5ce:	f8da 3000 	ldr.w	r3, [sl]
 800f5d2:	ea49 0903 	orr.w	r9, r9, r3
 800f5d6:	f019 0f01 	tst.w	r9, #1
 800f5da:	d10e      	bne.n	800f5fa <__gethex+0x33e>
 800f5dc:	f045 0510 	orr.w	r5, r5, #16
 800f5e0:	e032      	b.n	800f648 <__gethex+0x38c>
 800f5e2:	f04f 0901 	mov.w	r9, #1
 800f5e6:	e7d1      	b.n	800f58c <__gethex+0x2d0>
 800f5e8:	2501      	movs	r5, #1
 800f5ea:	e7e2      	b.n	800f5b2 <__gethex+0x2f6>
 800f5ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5ee:	f1c3 0301 	rsb	r3, r3, #1
 800f5f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f5f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d0f0      	beq.n	800f5dc <__gethex+0x320>
 800f5fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f5fe:	f104 0314 	add.w	r3, r4, #20
 800f602:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f606:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f60a:	f04f 0c00 	mov.w	ip, #0
 800f60e:	4618      	mov	r0, r3
 800f610:	f853 2b04 	ldr.w	r2, [r3], #4
 800f614:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f618:	d01b      	beq.n	800f652 <__gethex+0x396>
 800f61a:	3201      	adds	r2, #1
 800f61c:	6002      	str	r2, [r0, #0]
 800f61e:	2d02      	cmp	r5, #2
 800f620:	f104 0314 	add.w	r3, r4, #20
 800f624:	d13c      	bne.n	800f6a0 <__gethex+0x3e4>
 800f626:	f8d8 2000 	ldr.w	r2, [r8]
 800f62a:	3a01      	subs	r2, #1
 800f62c:	42b2      	cmp	r2, r6
 800f62e:	d109      	bne.n	800f644 <__gethex+0x388>
 800f630:	1171      	asrs	r1, r6, #5
 800f632:	2201      	movs	r2, #1
 800f634:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f638:	f006 061f 	and.w	r6, r6, #31
 800f63c:	fa02 f606 	lsl.w	r6, r2, r6
 800f640:	421e      	tst	r6, r3
 800f642:	d13a      	bne.n	800f6ba <__gethex+0x3fe>
 800f644:	f045 0520 	orr.w	r5, r5, #32
 800f648:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f64a:	601c      	str	r4, [r3, #0]
 800f64c:	9b02      	ldr	r3, [sp, #8]
 800f64e:	601f      	str	r7, [r3, #0]
 800f650:	e6b0      	b.n	800f3b4 <__gethex+0xf8>
 800f652:	4299      	cmp	r1, r3
 800f654:	f843 cc04 	str.w	ip, [r3, #-4]
 800f658:	d8d9      	bhi.n	800f60e <__gethex+0x352>
 800f65a:	68a3      	ldr	r3, [r4, #8]
 800f65c:	459b      	cmp	fp, r3
 800f65e:	db17      	blt.n	800f690 <__gethex+0x3d4>
 800f660:	6861      	ldr	r1, [r4, #4]
 800f662:	9801      	ldr	r0, [sp, #4]
 800f664:	3101      	adds	r1, #1
 800f666:	f000 f9c3 	bl	800f9f0 <_Balloc>
 800f66a:	4681      	mov	r9, r0
 800f66c:	b918      	cbnz	r0, 800f676 <__gethex+0x3ba>
 800f66e:	4b1a      	ldr	r3, [pc, #104]	@ (800f6d8 <__gethex+0x41c>)
 800f670:	4602      	mov	r2, r0
 800f672:	2184      	movs	r1, #132	@ 0x84
 800f674:	e6c5      	b.n	800f402 <__gethex+0x146>
 800f676:	6922      	ldr	r2, [r4, #16]
 800f678:	3202      	adds	r2, #2
 800f67a:	f104 010c 	add.w	r1, r4, #12
 800f67e:	0092      	lsls	r2, r2, #2
 800f680:	300c      	adds	r0, #12
 800f682:	f7fe fefe 	bl	800e482 <memcpy>
 800f686:	4621      	mov	r1, r4
 800f688:	9801      	ldr	r0, [sp, #4]
 800f68a:	f000 f9f1 	bl	800fa70 <_Bfree>
 800f68e:	464c      	mov	r4, r9
 800f690:	6923      	ldr	r3, [r4, #16]
 800f692:	1c5a      	adds	r2, r3, #1
 800f694:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f698:	6122      	str	r2, [r4, #16]
 800f69a:	2201      	movs	r2, #1
 800f69c:	615a      	str	r2, [r3, #20]
 800f69e:	e7be      	b.n	800f61e <__gethex+0x362>
 800f6a0:	6922      	ldr	r2, [r4, #16]
 800f6a2:	455a      	cmp	r2, fp
 800f6a4:	dd0b      	ble.n	800f6be <__gethex+0x402>
 800f6a6:	2101      	movs	r1, #1
 800f6a8:	4620      	mov	r0, r4
 800f6aa:	f7ff fd9f 	bl	800f1ec <rshift>
 800f6ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f6b2:	3701      	adds	r7, #1
 800f6b4:	42bb      	cmp	r3, r7
 800f6b6:	f6ff aee0 	blt.w	800f47a <__gethex+0x1be>
 800f6ba:	2501      	movs	r5, #1
 800f6bc:	e7c2      	b.n	800f644 <__gethex+0x388>
 800f6be:	f016 061f 	ands.w	r6, r6, #31
 800f6c2:	d0fa      	beq.n	800f6ba <__gethex+0x3fe>
 800f6c4:	4453      	add	r3, sl
 800f6c6:	f1c6 0620 	rsb	r6, r6, #32
 800f6ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f6ce:	f000 fa81 	bl	800fbd4 <__hi0bits>
 800f6d2:	42b0      	cmp	r0, r6
 800f6d4:	dbe7      	blt.n	800f6a6 <__gethex+0x3ea>
 800f6d6:	e7f0      	b.n	800f6ba <__gethex+0x3fe>
 800f6d8:	08011405 	.word	0x08011405

0800f6dc <L_shift>:
 800f6dc:	f1c2 0208 	rsb	r2, r2, #8
 800f6e0:	0092      	lsls	r2, r2, #2
 800f6e2:	b570      	push	{r4, r5, r6, lr}
 800f6e4:	f1c2 0620 	rsb	r6, r2, #32
 800f6e8:	6843      	ldr	r3, [r0, #4]
 800f6ea:	6804      	ldr	r4, [r0, #0]
 800f6ec:	fa03 f506 	lsl.w	r5, r3, r6
 800f6f0:	432c      	orrs	r4, r5
 800f6f2:	40d3      	lsrs	r3, r2
 800f6f4:	6004      	str	r4, [r0, #0]
 800f6f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800f6fa:	4288      	cmp	r0, r1
 800f6fc:	d3f4      	bcc.n	800f6e8 <L_shift+0xc>
 800f6fe:	bd70      	pop	{r4, r5, r6, pc}

0800f700 <__match>:
 800f700:	b530      	push	{r4, r5, lr}
 800f702:	6803      	ldr	r3, [r0, #0]
 800f704:	3301      	adds	r3, #1
 800f706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f70a:	b914      	cbnz	r4, 800f712 <__match+0x12>
 800f70c:	6003      	str	r3, [r0, #0]
 800f70e:	2001      	movs	r0, #1
 800f710:	bd30      	pop	{r4, r5, pc}
 800f712:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f716:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f71a:	2d19      	cmp	r5, #25
 800f71c:	bf98      	it	ls
 800f71e:	3220      	addls	r2, #32
 800f720:	42a2      	cmp	r2, r4
 800f722:	d0f0      	beq.n	800f706 <__match+0x6>
 800f724:	2000      	movs	r0, #0
 800f726:	e7f3      	b.n	800f710 <__match+0x10>

0800f728 <__hexnan>:
 800f728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f72c:	680b      	ldr	r3, [r1, #0]
 800f72e:	6801      	ldr	r1, [r0, #0]
 800f730:	115e      	asrs	r6, r3, #5
 800f732:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f736:	f013 031f 	ands.w	r3, r3, #31
 800f73a:	b087      	sub	sp, #28
 800f73c:	bf18      	it	ne
 800f73e:	3604      	addne	r6, #4
 800f740:	2500      	movs	r5, #0
 800f742:	1f37      	subs	r7, r6, #4
 800f744:	4682      	mov	sl, r0
 800f746:	4690      	mov	r8, r2
 800f748:	9301      	str	r3, [sp, #4]
 800f74a:	f846 5c04 	str.w	r5, [r6, #-4]
 800f74e:	46b9      	mov	r9, r7
 800f750:	463c      	mov	r4, r7
 800f752:	9502      	str	r5, [sp, #8]
 800f754:	46ab      	mov	fp, r5
 800f756:	784a      	ldrb	r2, [r1, #1]
 800f758:	1c4b      	adds	r3, r1, #1
 800f75a:	9303      	str	r3, [sp, #12]
 800f75c:	b342      	cbz	r2, 800f7b0 <__hexnan+0x88>
 800f75e:	4610      	mov	r0, r2
 800f760:	9105      	str	r1, [sp, #20]
 800f762:	9204      	str	r2, [sp, #16]
 800f764:	f7ff fd94 	bl	800f290 <__hexdig_fun>
 800f768:	2800      	cmp	r0, #0
 800f76a:	d151      	bne.n	800f810 <__hexnan+0xe8>
 800f76c:	9a04      	ldr	r2, [sp, #16]
 800f76e:	9905      	ldr	r1, [sp, #20]
 800f770:	2a20      	cmp	r2, #32
 800f772:	d818      	bhi.n	800f7a6 <__hexnan+0x7e>
 800f774:	9b02      	ldr	r3, [sp, #8]
 800f776:	459b      	cmp	fp, r3
 800f778:	dd13      	ble.n	800f7a2 <__hexnan+0x7a>
 800f77a:	454c      	cmp	r4, r9
 800f77c:	d206      	bcs.n	800f78c <__hexnan+0x64>
 800f77e:	2d07      	cmp	r5, #7
 800f780:	dc04      	bgt.n	800f78c <__hexnan+0x64>
 800f782:	462a      	mov	r2, r5
 800f784:	4649      	mov	r1, r9
 800f786:	4620      	mov	r0, r4
 800f788:	f7ff ffa8 	bl	800f6dc <L_shift>
 800f78c:	4544      	cmp	r4, r8
 800f78e:	d952      	bls.n	800f836 <__hexnan+0x10e>
 800f790:	2300      	movs	r3, #0
 800f792:	f1a4 0904 	sub.w	r9, r4, #4
 800f796:	f844 3c04 	str.w	r3, [r4, #-4]
 800f79a:	f8cd b008 	str.w	fp, [sp, #8]
 800f79e:	464c      	mov	r4, r9
 800f7a0:	461d      	mov	r5, r3
 800f7a2:	9903      	ldr	r1, [sp, #12]
 800f7a4:	e7d7      	b.n	800f756 <__hexnan+0x2e>
 800f7a6:	2a29      	cmp	r2, #41	@ 0x29
 800f7a8:	d157      	bne.n	800f85a <__hexnan+0x132>
 800f7aa:	3102      	adds	r1, #2
 800f7ac:	f8ca 1000 	str.w	r1, [sl]
 800f7b0:	f1bb 0f00 	cmp.w	fp, #0
 800f7b4:	d051      	beq.n	800f85a <__hexnan+0x132>
 800f7b6:	454c      	cmp	r4, r9
 800f7b8:	d206      	bcs.n	800f7c8 <__hexnan+0xa0>
 800f7ba:	2d07      	cmp	r5, #7
 800f7bc:	dc04      	bgt.n	800f7c8 <__hexnan+0xa0>
 800f7be:	462a      	mov	r2, r5
 800f7c0:	4649      	mov	r1, r9
 800f7c2:	4620      	mov	r0, r4
 800f7c4:	f7ff ff8a 	bl	800f6dc <L_shift>
 800f7c8:	4544      	cmp	r4, r8
 800f7ca:	d936      	bls.n	800f83a <__hexnan+0x112>
 800f7cc:	f1a8 0204 	sub.w	r2, r8, #4
 800f7d0:	4623      	mov	r3, r4
 800f7d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800f7d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800f7da:	429f      	cmp	r7, r3
 800f7dc:	d2f9      	bcs.n	800f7d2 <__hexnan+0xaa>
 800f7de:	1b3b      	subs	r3, r7, r4
 800f7e0:	f023 0303 	bic.w	r3, r3, #3
 800f7e4:	3304      	adds	r3, #4
 800f7e6:	3401      	adds	r4, #1
 800f7e8:	3e03      	subs	r6, #3
 800f7ea:	42b4      	cmp	r4, r6
 800f7ec:	bf88      	it	hi
 800f7ee:	2304      	movhi	r3, #4
 800f7f0:	4443      	add	r3, r8
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	f843 2b04 	str.w	r2, [r3], #4
 800f7f8:	429f      	cmp	r7, r3
 800f7fa:	d2fb      	bcs.n	800f7f4 <__hexnan+0xcc>
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	b91b      	cbnz	r3, 800f808 <__hexnan+0xe0>
 800f800:	4547      	cmp	r7, r8
 800f802:	d128      	bne.n	800f856 <__hexnan+0x12e>
 800f804:	2301      	movs	r3, #1
 800f806:	603b      	str	r3, [r7, #0]
 800f808:	2005      	movs	r0, #5
 800f80a:	b007      	add	sp, #28
 800f80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f810:	3501      	adds	r5, #1
 800f812:	2d08      	cmp	r5, #8
 800f814:	f10b 0b01 	add.w	fp, fp, #1
 800f818:	dd06      	ble.n	800f828 <__hexnan+0x100>
 800f81a:	4544      	cmp	r4, r8
 800f81c:	d9c1      	bls.n	800f7a2 <__hexnan+0x7a>
 800f81e:	2300      	movs	r3, #0
 800f820:	f844 3c04 	str.w	r3, [r4, #-4]
 800f824:	2501      	movs	r5, #1
 800f826:	3c04      	subs	r4, #4
 800f828:	6822      	ldr	r2, [r4, #0]
 800f82a:	f000 000f 	and.w	r0, r0, #15
 800f82e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f832:	6020      	str	r0, [r4, #0]
 800f834:	e7b5      	b.n	800f7a2 <__hexnan+0x7a>
 800f836:	2508      	movs	r5, #8
 800f838:	e7b3      	b.n	800f7a2 <__hexnan+0x7a>
 800f83a:	9b01      	ldr	r3, [sp, #4]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d0dd      	beq.n	800f7fc <__hexnan+0xd4>
 800f840:	f1c3 0320 	rsb	r3, r3, #32
 800f844:	f04f 32ff 	mov.w	r2, #4294967295
 800f848:	40da      	lsrs	r2, r3
 800f84a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f84e:	4013      	ands	r3, r2
 800f850:	f846 3c04 	str.w	r3, [r6, #-4]
 800f854:	e7d2      	b.n	800f7fc <__hexnan+0xd4>
 800f856:	3f04      	subs	r7, #4
 800f858:	e7d0      	b.n	800f7fc <__hexnan+0xd4>
 800f85a:	2004      	movs	r0, #4
 800f85c:	e7d5      	b.n	800f80a <__hexnan+0xe2>
	...

0800f860 <malloc>:
 800f860:	4b02      	ldr	r3, [pc, #8]	@ (800f86c <malloc+0xc>)
 800f862:	4601      	mov	r1, r0
 800f864:	6818      	ldr	r0, [r3, #0]
 800f866:	f000 b825 	b.w	800f8b4 <_malloc_r>
 800f86a:	bf00      	nop
 800f86c:	2000022c 	.word	0x2000022c

0800f870 <sbrk_aligned>:
 800f870:	b570      	push	{r4, r5, r6, lr}
 800f872:	4e0f      	ldr	r6, [pc, #60]	@ (800f8b0 <sbrk_aligned+0x40>)
 800f874:	460c      	mov	r4, r1
 800f876:	6831      	ldr	r1, [r6, #0]
 800f878:	4605      	mov	r5, r0
 800f87a:	b911      	cbnz	r1, 800f882 <sbrk_aligned+0x12>
 800f87c:	f001 f810 	bl	80108a0 <_sbrk_r>
 800f880:	6030      	str	r0, [r6, #0]
 800f882:	4621      	mov	r1, r4
 800f884:	4628      	mov	r0, r5
 800f886:	f001 f80b 	bl	80108a0 <_sbrk_r>
 800f88a:	1c43      	adds	r3, r0, #1
 800f88c:	d103      	bne.n	800f896 <sbrk_aligned+0x26>
 800f88e:	f04f 34ff 	mov.w	r4, #4294967295
 800f892:	4620      	mov	r0, r4
 800f894:	bd70      	pop	{r4, r5, r6, pc}
 800f896:	1cc4      	adds	r4, r0, #3
 800f898:	f024 0403 	bic.w	r4, r4, #3
 800f89c:	42a0      	cmp	r0, r4
 800f89e:	d0f8      	beq.n	800f892 <sbrk_aligned+0x22>
 800f8a0:	1a21      	subs	r1, r4, r0
 800f8a2:	4628      	mov	r0, r5
 800f8a4:	f000 fffc 	bl	80108a0 <_sbrk_r>
 800f8a8:	3001      	adds	r0, #1
 800f8aa:	d1f2      	bne.n	800f892 <sbrk_aligned+0x22>
 800f8ac:	e7ef      	b.n	800f88e <sbrk_aligned+0x1e>
 800f8ae:	bf00      	nop
 800f8b0:	20000acc 	.word	0x20000acc

0800f8b4 <_malloc_r>:
 800f8b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8b8:	1ccd      	adds	r5, r1, #3
 800f8ba:	f025 0503 	bic.w	r5, r5, #3
 800f8be:	3508      	adds	r5, #8
 800f8c0:	2d0c      	cmp	r5, #12
 800f8c2:	bf38      	it	cc
 800f8c4:	250c      	movcc	r5, #12
 800f8c6:	2d00      	cmp	r5, #0
 800f8c8:	4606      	mov	r6, r0
 800f8ca:	db01      	blt.n	800f8d0 <_malloc_r+0x1c>
 800f8cc:	42a9      	cmp	r1, r5
 800f8ce:	d904      	bls.n	800f8da <_malloc_r+0x26>
 800f8d0:	230c      	movs	r3, #12
 800f8d2:	6033      	str	r3, [r6, #0]
 800f8d4:	2000      	movs	r0, #0
 800f8d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f9b0 <_malloc_r+0xfc>
 800f8de:	f000 f87b 	bl	800f9d8 <__malloc_lock>
 800f8e2:	f8d8 3000 	ldr.w	r3, [r8]
 800f8e6:	461c      	mov	r4, r3
 800f8e8:	bb44      	cbnz	r4, 800f93c <_malloc_r+0x88>
 800f8ea:	4629      	mov	r1, r5
 800f8ec:	4630      	mov	r0, r6
 800f8ee:	f7ff ffbf 	bl	800f870 <sbrk_aligned>
 800f8f2:	1c43      	adds	r3, r0, #1
 800f8f4:	4604      	mov	r4, r0
 800f8f6:	d158      	bne.n	800f9aa <_malloc_r+0xf6>
 800f8f8:	f8d8 4000 	ldr.w	r4, [r8]
 800f8fc:	4627      	mov	r7, r4
 800f8fe:	2f00      	cmp	r7, #0
 800f900:	d143      	bne.n	800f98a <_malloc_r+0xd6>
 800f902:	2c00      	cmp	r4, #0
 800f904:	d04b      	beq.n	800f99e <_malloc_r+0xea>
 800f906:	6823      	ldr	r3, [r4, #0]
 800f908:	4639      	mov	r1, r7
 800f90a:	4630      	mov	r0, r6
 800f90c:	eb04 0903 	add.w	r9, r4, r3
 800f910:	f000 ffc6 	bl	80108a0 <_sbrk_r>
 800f914:	4581      	cmp	r9, r0
 800f916:	d142      	bne.n	800f99e <_malloc_r+0xea>
 800f918:	6821      	ldr	r1, [r4, #0]
 800f91a:	1a6d      	subs	r5, r5, r1
 800f91c:	4629      	mov	r1, r5
 800f91e:	4630      	mov	r0, r6
 800f920:	f7ff ffa6 	bl	800f870 <sbrk_aligned>
 800f924:	3001      	adds	r0, #1
 800f926:	d03a      	beq.n	800f99e <_malloc_r+0xea>
 800f928:	6823      	ldr	r3, [r4, #0]
 800f92a:	442b      	add	r3, r5
 800f92c:	6023      	str	r3, [r4, #0]
 800f92e:	f8d8 3000 	ldr.w	r3, [r8]
 800f932:	685a      	ldr	r2, [r3, #4]
 800f934:	bb62      	cbnz	r2, 800f990 <_malloc_r+0xdc>
 800f936:	f8c8 7000 	str.w	r7, [r8]
 800f93a:	e00f      	b.n	800f95c <_malloc_r+0xa8>
 800f93c:	6822      	ldr	r2, [r4, #0]
 800f93e:	1b52      	subs	r2, r2, r5
 800f940:	d420      	bmi.n	800f984 <_malloc_r+0xd0>
 800f942:	2a0b      	cmp	r2, #11
 800f944:	d917      	bls.n	800f976 <_malloc_r+0xc2>
 800f946:	1961      	adds	r1, r4, r5
 800f948:	42a3      	cmp	r3, r4
 800f94a:	6025      	str	r5, [r4, #0]
 800f94c:	bf18      	it	ne
 800f94e:	6059      	strne	r1, [r3, #4]
 800f950:	6863      	ldr	r3, [r4, #4]
 800f952:	bf08      	it	eq
 800f954:	f8c8 1000 	streq.w	r1, [r8]
 800f958:	5162      	str	r2, [r4, r5]
 800f95a:	604b      	str	r3, [r1, #4]
 800f95c:	4630      	mov	r0, r6
 800f95e:	f000 f841 	bl	800f9e4 <__malloc_unlock>
 800f962:	f104 000b 	add.w	r0, r4, #11
 800f966:	1d23      	adds	r3, r4, #4
 800f968:	f020 0007 	bic.w	r0, r0, #7
 800f96c:	1ac2      	subs	r2, r0, r3
 800f96e:	bf1c      	itt	ne
 800f970:	1a1b      	subne	r3, r3, r0
 800f972:	50a3      	strne	r3, [r4, r2]
 800f974:	e7af      	b.n	800f8d6 <_malloc_r+0x22>
 800f976:	6862      	ldr	r2, [r4, #4]
 800f978:	42a3      	cmp	r3, r4
 800f97a:	bf0c      	ite	eq
 800f97c:	f8c8 2000 	streq.w	r2, [r8]
 800f980:	605a      	strne	r2, [r3, #4]
 800f982:	e7eb      	b.n	800f95c <_malloc_r+0xa8>
 800f984:	4623      	mov	r3, r4
 800f986:	6864      	ldr	r4, [r4, #4]
 800f988:	e7ae      	b.n	800f8e8 <_malloc_r+0x34>
 800f98a:	463c      	mov	r4, r7
 800f98c:	687f      	ldr	r7, [r7, #4]
 800f98e:	e7b6      	b.n	800f8fe <_malloc_r+0x4a>
 800f990:	461a      	mov	r2, r3
 800f992:	685b      	ldr	r3, [r3, #4]
 800f994:	42a3      	cmp	r3, r4
 800f996:	d1fb      	bne.n	800f990 <_malloc_r+0xdc>
 800f998:	2300      	movs	r3, #0
 800f99a:	6053      	str	r3, [r2, #4]
 800f99c:	e7de      	b.n	800f95c <_malloc_r+0xa8>
 800f99e:	230c      	movs	r3, #12
 800f9a0:	6033      	str	r3, [r6, #0]
 800f9a2:	4630      	mov	r0, r6
 800f9a4:	f000 f81e 	bl	800f9e4 <__malloc_unlock>
 800f9a8:	e794      	b.n	800f8d4 <_malloc_r+0x20>
 800f9aa:	6005      	str	r5, [r0, #0]
 800f9ac:	e7d6      	b.n	800f95c <_malloc_r+0xa8>
 800f9ae:	bf00      	nop
 800f9b0:	20000ad0 	.word	0x20000ad0

0800f9b4 <__ascii_mbtowc>:
 800f9b4:	b082      	sub	sp, #8
 800f9b6:	b901      	cbnz	r1, 800f9ba <__ascii_mbtowc+0x6>
 800f9b8:	a901      	add	r1, sp, #4
 800f9ba:	b142      	cbz	r2, 800f9ce <__ascii_mbtowc+0x1a>
 800f9bc:	b14b      	cbz	r3, 800f9d2 <__ascii_mbtowc+0x1e>
 800f9be:	7813      	ldrb	r3, [r2, #0]
 800f9c0:	600b      	str	r3, [r1, #0]
 800f9c2:	7812      	ldrb	r2, [r2, #0]
 800f9c4:	1e10      	subs	r0, r2, #0
 800f9c6:	bf18      	it	ne
 800f9c8:	2001      	movne	r0, #1
 800f9ca:	b002      	add	sp, #8
 800f9cc:	4770      	bx	lr
 800f9ce:	4610      	mov	r0, r2
 800f9d0:	e7fb      	b.n	800f9ca <__ascii_mbtowc+0x16>
 800f9d2:	f06f 0001 	mvn.w	r0, #1
 800f9d6:	e7f8      	b.n	800f9ca <__ascii_mbtowc+0x16>

0800f9d8 <__malloc_lock>:
 800f9d8:	4801      	ldr	r0, [pc, #4]	@ (800f9e0 <__malloc_lock+0x8>)
 800f9da:	f7fe bd50 	b.w	800e47e <__retarget_lock_acquire_recursive>
 800f9de:	bf00      	nop
 800f9e0:	20000ac8 	.word	0x20000ac8

0800f9e4 <__malloc_unlock>:
 800f9e4:	4801      	ldr	r0, [pc, #4]	@ (800f9ec <__malloc_unlock+0x8>)
 800f9e6:	f7fe bd4b 	b.w	800e480 <__retarget_lock_release_recursive>
 800f9ea:	bf00      	nop
 800f9ec:	20000ac8 	.word	0x20000ac8

0800f9f0 <_Balloc>:
 800f9f0:	b570      	push	{r4, r5, r6, lr}
 800f9f2:	69c6      	ldr	r6, [r0, #28]
 800f9f4:	4604      	mov	r4, r0
 800f9f6:	460d      	mov	r5, r1
 800f9f8:	b976      	cbnz	r6, 800fa18 <_Balloc+0x28>
 800f9fa:	2010      	movs	r0, #16
 800f9fc:	f7ff ff30 	bl	800f860 <malloc>
 800fa00:	4602      	mov	r2, r0
 800fa02:	61e0      	str	r0, [r4, #28]
 800fa04:	b920      	cbnz	r0, 800fa10 <_Balloc+0x20>
 800fa06:	4b18      	ldr	r3, [pc, #96]	@ (800fa68 <_Balloc+0x78>)
 800fa08:	4818      	ldr	r0, [pc, #96]	@ (800fa6c <_Balloc+0x7c>)
 800fa0a:	216b      	movs	r1, #107	@ 0x6b
 800fa0c:	f000 ff58 	bl	80108c0 <__assert_func>
 800fa10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fa14:	6006      	str	r6, [r0, #0]
 800fa16:	60c6      	str	r6, [r0, #12]
 800fa18:	69e6      	ldr	r6, [r4, #28]
 800fa1a:	68f3      	ldr	r3, [r6, #12]
 800fa1c:	b183      	cbz	r3, 800fa40 <_Balloc+0x50>
 800fa1e:	69e3      	ldr	r3, [r4, #28]
 800fa20:	68db      	ldr	r3, [r3, #12]
 800fa22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fa26:	b9b8      	cbnz	r0, 800fa58 <_Balloc+0x68>
 800fa28:	2101      	movs	r1, #1
 800fa2a:	fa01 f605 	lsl.w	r6, r1, r5
 800fa2e:	1d72      	adds	r2, r6, #5
 800fa30:	0092      	lsls	r2, r2, #2
 800fa32:	4620      	mov	r0, r4
 800fa34:	f000 ff62 	bl	80108fc <_calloc_r>
 800fa38:	b160      	cbz	r0, 800fa54 <_Balloc+0x64>
 800fa3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fa3e:	e00e      	b.n	800fa5e <_Balloc+0x6e>
 800fa40:	2221      	movs	r2, #33	@ 0x21
 800fa42:	2104      	movs	r1, #4
 800fa44:	4620      	mov	r0, r4
 800fa46:	f000 ff59 	bl	80108fc <_calloc_r>
 800fa4a:	69e3      	ldr	r3, [r4, #28]
 800fa4c:	60f0      	str	r0, [r6, #12]
 800fa4e:	68db      	ldr	r3, [r3, #12]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d1e4      	bne.n	800fa1e <_Balloc+0x2e>
 800fa54:	2000      	movs	r0, #0
 800fa56:	bd70      	pop	{r4, r5, r6, pc}
 800fa58:	6802      	ldr	r2, [r0, #0]
 800fa5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fa5e:	2300      	movs	r3, #0
 800fa60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fa64:	e7f7      	b.n	800fa56 <_Balloc+0x66>
 800fa66:	bf00      	nop
 800fa68:	08011396 	.word	0x08011396
 800fa6c:	08011476 	.word	0x08011476

0800fa70 <_Bfree>:
 800fa70:	b570      	push	{r4, r5, r6, lr}
 800fa72:	69c6      	ldr	r6, [r0, #28]
 800fa74:	4605      	mov	r5, r0
 800fa76:	460c      	mov	r4, r1
 800fa78:	b976      	cbnz	r6, 800fa98 <_Bfree+0x28>
 800fa7a:	2010      	movs	r0, #16
 800fa7c:	f7ff fef0 	bl	800f860 <malloc>
 800fa80:	4602      	mov	r2, r0
 800fa82:	61e8      	str	r0, [r5, #28]
 800fa84:	b920      	cbnz	r0, 800fa90 <_Bfree+0x20>
 800fa86:	4b09      	ldr	r3, [pc, #36]	@ (800faac <_Bfree+0x3c>)
 800fa88:	4809      	ldr	r0, [pc, #36]	@ (800fab0 <_Bfree+0x40>)
 800fa8a:	218f      	movs	r1, #143	@ 0x8f
 800fa8c:	f000 ff18 	bl	80108c0 <__assert_func>
 800fa90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fa94:	6006      	str	r6, [r0, #0]
 800fa96:	60c6      	str	r6, [r0, #12]
 800fa98:	b13c      	cbz	r4, 800faaa <_Bfree+0x3a>
 800fa9a:	69eb      	ldr	r3, [r5, #28]
 800fa9c:	6862      	ldr	r2, [r4, #4]
 800fa9e:	68db      	ldr	r3, [r3, #12]
 800faa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800faa4:	6021      	str	r1, [r4, #0]
 800faa6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800faaa:	bd70      	pop	{r4, r5, r6, pc}
 800faac:	08011396 	.word	0x08011396
 800fab0:	08011476 	.word	0x08011476

0800fab4 <__multadd>:
 800fab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fab8:	690d      	ldr	r5, [r1, #16]
 800faba:	4607      	mov	r7, r0
 800fabc:	460c      	mov	r4, r1
 800fabe:	461e      	mov	r6, r3
 800fac0:	f101 0c14 	add.w	ip, r1, #20
 800fac4:	2000      	movs	r0, #0
 800fac6:	f8dc 3000 	ldr.w	r3, [ip]
 800faca:	b299      	uxth	r1, r3
 800facc:	fb02 6101 	mla	r1, r2, r1, r6
 800fad0:	0c1e      	lsrs	r6, r3, #16
 800fad2:	0c0b      	lsrs	r3, r1, #16
 800fad4:	fb02 3306 	mla	r3, r2, r6, r3
 800fad8:	b289      	uxth	r1, r1
 800fada:	3001      	adds	r0, #1
 800fadc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fae0:	4285      	cmp	r5, r0
 800fae2:	f84c 1b04 	str.w	r1, [ip], #4
 800fae6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800faea:	dcec      	bgt.n	800fac6 <__multadd+0x12>
 800faec:	b30e      	cbz	r6, 800fb32 <__multadd+0x7e>
 800faee:	68a3      	ldr	r3, [r4, #8]
 800faf0:	42ab      	cmp	r3, r5
 800faf2:	dc19      	bgt.n	800fb28 <__multadd+0x74>
 800faf4:	6861      	ldr	r1, [r4, #4]
 800faf6:	4638      	mov	r0, r7
 800faf8:	3101      	adds	r1, #1
 800fafa:	f7ff ff79 	bl	800f9f0 <_Balloc>
 800fafe:	4680      	mov	r8, r0
 800fb00:	b928      	cbnz	r0, 800fb0e <__multadd+0x5a>
 800fb02:	4602      	mov	r2, r0
 800fb04:	4b0c      	ldr	r3, [pc, #48]	@ (800fb38 <__multadd+0x84>)
 800fb06:	480d      	ldr	r0, [pc, #52]	@ (800fb3c <__multadd+0x88>)
 800fb08:	21ba      	movs	r1, #186	@ 0xba
 800fb0a:	f000 fed9 	bl	80108c0 <__assert_func>
 800fb0e:	6922      	ldr	r2, [r4, #16]
 800fb10:	3202      	adds	r2, #2
 800fb12:	f104 010c 	add.w	r1, r4, #12
 800fb16:	0092      	lsls	r2, r2, #2
 800fb18:	300c      	adds	r0, #12
 800fb1a:	f7fe fcb2 	bl	800e482 <memcpy>
 800fb1e:	4621      	mov	r1, r4
 800fb20:	4638      	mov	r0, r7
 800fb22:	f7ff ffa5 	bl	800fa70 <_Bfree>
 800fb26:	4644      	mov	r4, r8
 800fb28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fb2c:	3501      	adds	r5, #1
 800fb2e:	615e      	str	r6, [r3, #20]
 800fb30:	6125      	str	r5, [r4, #16]
 800fb32:	4620      	mov	r0, r4
 800fb34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb38:	08011405 	.word	0x08011405
 800fb3c:	08011476 	.word	0x08011476

0800fb40 <__s2b>:
 800fb40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb44:	460c      	mov	r4, r1
 800fb46:	4615      	mov	r5, r2
 800fb48:	461f      	mov	r7, r3
 800fb4a:	2209      	movs	r2, #9
 800fb4c:	3308      	adds	r3, #8
 800fb4e:	4606      	mov	r6, r0
 800fb50:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb54:	2100      	movs	r1, #0
 800fb56:	2201      	movs	r2, #1
 800fb58:	429a      	cmp	r2, r3
 800fb5a:	db09      	blt.n	800fb70 <__s2b+0x30>
 800fb5c:	4630      	mov	r0, r6
 800fb5e:	f7ff ff47 	bl	800f9f0 <_Balloc>
 800fb62:	b940      	cbnz	r0, 800fb76 <__s2b+0x36>
 800fb64:	4602      	mov	r2, r0
 800fb66:	4b19      	ldr	r3, [pc, #100]	@ (800fbcc <__s2b+0x8c>)
 800fb68:	4819      	ldr	r0, [pc, #100]	@ (800fbd0 <__s2b+0x90>)
 800fb6a:	21d3      	movs	r1, #211	@ 0xd3
 800fb6c:	f000 fea8 	bl	80108c0 <__assert_func>
 800fb70:	0052      	lsls	r2, r2, #1
 800fb72:	3101      	adds	r1, #1
 800fb74:	e7f0      	b.n	800fb58 <__s2b+0x18>
 800fb76:	9b08      	ldr	r3, [sp, #32]
 800fb78:	6143      	str	r3, [r0, #20]
 800fb7a:	2d09      	cmp	r5, #9
 800fb7c:	f04f 0301 	mov.w	r3, #1
 800fb80:	6103      	str	r3, [r0, #16]
 800fb82:	dd16      	ble.n	800fbb2 <__s2b+0x72>
 800fb84:	f104 0909 	add.w	r9, r4, #9
 800fb88:	46c8      	mov	r8, r9
 800fb8a:	442c      	add	r4, r5
 800fb8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fb90:	4601      	mov	r1, r0
 800fb92:	3b30      	subs	r3, #48	@ 0x30
 800fb94:	220a      	movs	r2, #10
 800fb96:	4630      	mov	r0, r6
 800fb98:	f7ff ff8c 	bl	800fab4 <__multadd>
 800fb9c:	45a0      	cmp	r8, r4
 800fb9e:	d1f5      	bne.n	800fb8c <__s2b+0x4c>
 800fba0:	f1a5 0408 	sub.w	r4, r5, #8
 800fba4:	444c      	add	r4, r9
 800fba6:	1b2d      	subs	r5, r5, r4
 800fba8:	1963      	adds	r3, r4, r5
 800fbaa:	42bb      	cmp	r3, r7
 800fbac:	db04      	blt.n	800fbb8 <__s2b+0x78>
 800fbae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbb2:	340a      	adds	r4, #10
 800fbb4:	2509      	movs	r5, #9
 800fbb6:	e7f6      	b.n	800fba6 <__s2b+0x66>
 800fbb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fbbc:	4601      	mov	r1, r0
 800fbbe:	3b30      	subs	r3, #48	@ 0x30
 800fbc0:	220a      	movs	r2, #10
 800fbc2:	4630      	mov	r0, r6
 800fbc4:	f7ff ff76 	bl	800fab4 <__multadd>
 800fbc8:	e7ee      	b.n	800fba8 <__s2b+0x68>
 800fbca:	bf00      	nop
 800fbcc:	08011405 	.word	0x08011405
 800fbd0:	08011476 	.word	0x08011476

0800fbd4 <__hi0bits>:
 800fbd4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fbd8:	4603      	mov	r3, r0
 800fbda:	bf36      	itet	cc
 800fbdc:	0403      	lslcc	r3, r0, #16
 800fbde:	2000      	movcs	r0, #0
 800fbe0:	2010      	movcc	r0, #16
 800fbe2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fbe6:	bf3c      	itt	cc
 800fbe8:	021b      	lslcc	r3, r3, #8
 800fbea:	3008      	addcc	r0, #8
 800fbec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fbf0:	bf3c      	itt	cc
 800fbf2:	011b      	lslcc	r3, r3, #4
 800fbf4:	3004      	addcc	r0, #4
 800fbf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fbfa:	bf3c      	itt	cc
 800fbfc:	009b      	lslcc	r3, r3, #2
 800fbfe:	3002      	addcc	r0, #2
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	db05      	blt.n	800fc10 <__hi0bits+0x3c>
 800fc04:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fc08:	f100 0001 	add.w	r0, r0, #1
 800fc0c:	bf08      	it	eq
 800fc0e:	2020      	moveq	r0, #32
 800fc10:	4770      	bx	lr

0800fc12 <__lo0bits>:
 800fc12:	6803      	ldr	r3, [r0, #0]
 800fc14:	4602      	mov	r2, r0
 800fc16:	f013 0007 	ands.w	r0, r3, #7
 800fc1a:	d00b      	beq.n	800fc34 <__lo0bits+0x22>
 800fc1c:	07d9      	lsls	r1, r3, #31
 800fc1e:	d421      	bmi.n	800fc64 <__lo0bits+0x52>
 800fc20:	0798      	lsls	r0, r3, #30
 800fc22:	bf49      	itett	mi
 800fc24:	085b      	lsrmi	r3, r3, #1
 800fc26:	089b      	lsrpl	r3, r3, #2
 800fc28:	2001      	movmi	r0, #1
 800fc2a:	6013      	strmi	r3, [r2, #0]
 800fc2c:	bf5c      	itt	pl
 800fc2e:	6013      	strpl	r3, [r2, #0]
 800fc30:	2002      	movpl	r0, #2
 800fc32:	4770      	bx	lr
 800fc34:	b299      	uxth	r1, r3
 800fc36:	b909      	cbnz	r1, 800fc3c <__lo0bits+0x2a>
 800fc38:	0c1b      	lsrs	r3, r3, #16
 800fc3a:	2010      	movs	r0, #16
 800fc3c:	b2d9      	uxtb	r1, r3
 800fc3e:	b909      	cbnz	r1, 800fc44 <__lo0bits+0x32>
 800fc40:	3008      	adds	r0, #8
 800fc42:	0a1b      	lsrs	r3, r3, #8
 800fc44:	0719      	lsls	r1, r3, #28
 800fc46:	bf04      	itt	eq
 800fc48:	091b      	lsreq	r3, r3, #4
 800fc4a:	3004      	addeq	r0, #4
 800fc4c:	0799      	lsls	r1, r3, #30
 800fc4e:	bf04      	itt	eq
 800fc50:	089b      	lsreq	r3, r3, #2
 800fc52:	3002      	addeq	r0, #2
 800fc54:	07d9      	lsls	r1, r3, #31
 800fc56:	d403      	bmi.n	800fc60 <__lo0bits+0x4e>
 800fc58:	085b      	lsrs	r3, r3, #1
 800fc5a:	f100 0001 	add.w	r0, r0, #1
 800fc5e:	d003      	beq.n	800fc68 <__lo0bits+0x56>
 800fc60:	6013      	str	r3, [r2, #0]
 800fc62:	4770      	bx	lr
 800fc64:	2000      	movs	r0, #0
 800fc66:	4770      	bx	lr
 800fc68:	2020      	movs	r0, #32
 800fc6a:	4770      	bx	lr

0800fc6c <__i2b>:
 800fc6c:	b510      	push	{r4, lr}
 800fc6e:	460c      	mov	r4, r1
 800fc70:	2101      	movs	r1, #1
 800fc72:	f7ff febd 	bl	800f9f0 <_Balloc>
 800fc76:	4602      	mov	r2, r0
 800fc78:	b928      	cbnz	r0, 800fc86 <__i2b+0x1a>
 800fc7a:	4b05      	ldr	r3, [pc, #20]	@ (800fc90 <__i2b+0x24>)
 800fc7c:	4805      	ldr	r0, [pc, #20]	@ (800fc94 <__i2b+0x28>)
 800fc7e:	f240 1145 	movw	r1, #325	@ 0x145
 800fc82:	f000 fe1d 	bl	80108c0 <__assert_func>
 800fc86:	2301      	movs	r3, #1
 800fc88:	6144      	str	r4, [r0, #20]
 800fc8a:	6103      	str	r3, [r0, #16]
 800fc8c:	bd10      	pop	{r4, pc}
 800fc8e:	bf00      	nop
 800fc90:	08011405 	.word	0x08011405
 800fc94:	08011476 	.word	0x08011476

0800fc98 <__multiply>:
 800fc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc9c:	4614      	mov	r4, r2
 800fc9e:	690a      	ldr	r2, [r1, #16]
 800fca0:	6923      	ldr	r3, [r4, #16]
 800fca2:	429a      	cmp	r2, r3
 800fca4:	bfa8      	it	ge
 800fca6:	4623      	movge	r3, r4
 800fca8:	460f      	mov	r7, r1
 800fcaa:	bfa4      	itt	ge
 800fcac:	460c      	movge	r4, r1
 800fcae:	461f      	movge	r7, r3
 800fcb0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fcb4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fcb8:	68a3      	ldr	r3, [r4, #8]
 800fcba:	6861      	ldr	r1, [r4, #4]
 800fcbc:	eb0a 0609 	add.w	r6, sl, r9
 800fcc0:	42b3      	cmp	r3, r6
 800fcc2:	b085      	sub	sp, #20
 800fcc4:	bfb8      	it	lt
 800fcc6:	3101      	addlt	r1, #1
 800fcc8:	f7ff fe92 	bl	800f9f0 <_Balloc>
 800fccc:	b930      	cbnz	r0, 800fcdc <__multiply+0x44>
 800fcce:	4602      	mov	r2, r0
 800fcd0:	4b44      	ldr	r3, [pc, #272]	@ (800fde4 <__multiply+0x14c>)
 800fcd2:	4845      	ldr	r0, [pc, #276]	@ (800fde8 <__multiply+0x150>)
 800fcd4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fcd8:	f000 fdf2 	bl	80108c0 <__assert_func>
 800fcdc:	f100 0514 	add.w	r5, r0, #20
 800fce0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fce4:	462b      	mov	r3, r5
 800fce6:	2200      	movs	r2, #0
 800fce8:	4543      	cmp	r3, r8
 800fcea:	d321      	bcc.n	800fd30 <__multiply+0x98>
 800fcec:	f107 0114 	add.w	r1, r7, #20
 800fcf0:	f104 0214 	add.w	r2, r4, #20
 800fcf4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fcf8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fcfc:	9302      	str	r3, [sp, #8]
 800fcfe:	1b13      	subs	r3, r2, r4
 800fd00:	3b15      	subs	r3, #21
 800fd02:	f023 0303 	bic.w	r3, r3, #3
 800fd06:	3304      	adds	r3, #4
 800fd08:	f104 0715 	add.w	r7, r4, #21
 800fd0c:	42ba      	cmp	r2, r7
 800fd0e:	bf38      	it	cc
 800fd10:	2304      	movcc	r3, #4
 800fd12:	9301      	str	r3, [sp, #4]
 800fd14:	9b02      	ldr	r3, [sp, #8]
 800fd16:	9103      	str	r1, [sp, #12]
 800fd18:	428b      	cmp	r3, r1
 800fd1a:	d80c      	bhi.n	800fd36 <__multiply+0x9e>
 800fd1c:	2e00      	cmp	r6, #0
 800fd1e:	dd03      	ble.n	800fd28 <__multiply+0x90>
 800fd20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d05b      	beq.n	800fde0 <__multiply+0x148>
 800fd28:	6106      	str	r6, [r0, #16]
 800fd2a:	b005      	add	sp, #20
 800fd2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd30:	f843 2b04 	str.w	r2, [r3], #4
 800fd34:	e7d8      	b.n	800fce8 <__multiply+0x50>
 800fd36:	f8b1 a000 	ldrh.w	sl, [r1]
 800fd3a:	f1ba 0f00 	cmp.w	sl, #0
 800fd3e:	d024      	beq.n	800fd8a <__multiply+0xf2>
 800fd40:	f104 0e14 	add.w	lr, r4, #20
 800fd44:	46a9      	mov	r9, r5
 800fd46:	f04f 0c00 	mov.w	ip, #0
 800fd4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fd4e:	f8d9 3000 	ldr.w	r3, [r9]
 800fd52:	fa1f fb87 	uxth.w	fp, r7
 800fd56:	b29b      	uxth	r3, r3
 800fd58:	fb0a 330b 	mla	r3, sl, fp, r3
 800fd5c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fd60:	f8d9 7000 	ldr.w	r7, [r9]
 800fd64:	4463      	add	r3, ip
 800fd66:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fd6a:	fb0a c70b 	mla	r7, sl, fp, ip
 800fd6e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fd72:	b29b      	uxth	r3, r3
 800fd74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fd78:	4572      	cmp	r2, lr
 800fd7a:	f849 3b04 	str.w	r3, [r9], #4
 800fd7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fd82:	d8e2      	bhi.n	800fd4a <__multiply+0xb2>
 800fd84:	9b01      	ldr	r3, [sp, #4]
 800fd86:	f845 c003 	str.w	ip, [r5, r3]
 800fd8a:	9b03      	ldr	r3, [sp, #12]
 800fd8c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fd90:	3104      	adds	r1, #4
 800fd92:	f1b9 0f00 	cmp.w	r9, #0
 800fd96:	d021      	beq.n	800fddc <__multiply+0x144>
 800fd98:	682b      	ldr	r3, [r5, #0]
 800fd9a:	f104 0c14 	add.w	ip, r4, #20
 800fd9e:	46ae      	mov	lr, r5
 800fda0:	f04f 0a00 	mov.w	sl, #0
 800fda4:	f8bc b000 	ldrh.w	fp, [ip]
 800fda8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fdac:	fb09 770b 	mla	r7, r9, fp, r7
 800fdb0:	4457      	add	r7, sl
 800fdb2:	b29b      	uxth	r3, r3
 800fdb4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fdb8:	f84e 3b04 	str.w	r3, [lr], #4
 800fdbc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fdc0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fdc4:	f8be 3000 	ldrh.w	r3, [lr]
 800fdc8:	fb09 330a 	mla	r3, r9, sl, r3
 800fdcc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fdd0:	4562      	cmp	r2, ip
 800fdd2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fdd6:	d8e5      	bhi.n	800fda4 <__multiply+0x10c>
 800fdd8:	9f01      	ldr	r7, [sp, #4]
 800fdda:	51eb      	str	r3, [r5, r7]
 800fddc:	3504      	adds	r5, #4
 800fdde:	e799      	b.n	800fd14 <__multiply+0x7c>
 800fde0:	3e01      	subs	r6, #1
 800fde2:	e79b      	b.n	800fd1c <__multiply+0x84>
 800fde4:	08011405 	.word	0x08011405
 800fde8:	08011476 	.word	0x08011476

0800fdec <__pow5mult>:
 800fdec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdf0:	4615      	mov	r5, r2
 800fdf2:	f012 0203 	ands.w	r2, r2, #3
 800fdf6:	4607      	mov	r7, r0
 800fdf8:	460e      	mov	r6, r1
 800fdfa:	d007      	beq.n	800fe0c <__pow5mult+0x20>
 800fdfc:	4c25      	ldr	r4, [pc, #148]	@ (800fe94 <__pow5mult+0xa8>)
 800fdfe:	3a01      	subs	r2, #1
 800fe00:	2300      	movs	r3, #0
 800fe02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fe06:	f7ff fe55 	bl	800fab4 <__multadd>
 800fe0a:	4606      	mov	r6, r0
 800fe0c:	10ad      	asrs	r5, r5, #2
 800fe0e:	d03d      	beq.n	800fe8c <__pow5mult+0xa0>
 800fe10:	69fc      	ldr	r4, [r7, #28]
 800fe12:	b97c      	cbnz	r4, 800fe34 <__pow5mult+0x48>
 800fe14:	2010      	movs	r0, #16
 800fe16:	f7ff fd23 	bl	800f860 <malloc>
 800fe1a:	4602      	mov	r2, r0
 800fe1c:	61f8      	str	r0, [r7, #28]
 800fe1e:	b928      	cbnz	r0, 800fe2c <__pow5mult+0x40>
 800fe20:	4b1d      	ldr	r3, [pc, #116]	@ (800fe98 <__pow5mult+0xac>)
 800fe22:	481e      	ldr	r0, [pc, #120]	@ (800fe9c <__pow5mult+0xb0>)
 800fe24:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fe28:	f000 fd4a 	bl	80108c0 <__assert_func>
 800fe2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fe30:	6004      	str	r4, [r0, #0]
 800fe32:	60c4      	str	r4, [r0, #12]
 800fe34:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fe38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fe3c:	b94c      	cbnz	r4, 800fe52 <__pow5mult+0x66>
 800fe3e:	f240 2171 	movw	r1, #625	@ 0x271
 800fe42:	4638      	mov	r0, r7
 800fe44:	f7ff ff12 	bl	800fc6c <__i2b>
 800fe48:	2300      	movs	r3, #0
 800fe4a:	f8c8 0008 	str.w	r0, [r8, #8]
 800fe4e:	4604      	mov	r4, r0
 800fe50:	6003      	str	r3, [r0, #0]
 800fe52:	f04f 0900 	mov.w	r9, #0
 800fe56:	07eb      	lsls	r3, r5, #31
 800fe58:	d50a      	bpl.n	800fe70 <__pow5mult+0x84>
 800fe5a:	4631      	mov	r1, r6
 800fe5c:	4622      	mov	r2, r4
 800fe5e:	4638      	mov	r0, r7
 800fe60:	f7ff ff1a 	bl	800fc98 <__multiply>
 800fe64:	4631      	mov	r1, r6
 800fe66:	4680      	mov	r8, r0
 800fe68:	4638      	mov	r0, r7
 800fe6a:	f7ff fe01 	bl	800fa70 <_Bfree>
 800fe6e:	4646      	mov	r6, r8
 800fe70:	106d      	asrs	r5, r5, #1
 800fe72:	d00b      	beq.n	800fe8c <__pow5mult+0xa0>
 800fe74:	6820      	ldr	r0, [r4, #0]
 800fe76:	b938      	cbnz	r0, 800fe88 <__pow5mult+0x9c>
 800fe78:	4622      	mov	r2, r4
 800fe7a:	4621      	mov	r1, r4
 800fe7c:	4638      	mov	r0, r7
 800fe7e:	f7ff ff0b 	bl	800fc98 <__multiply>
 800fe82:	6020      	str	r0, [r4, #0]
 800fe84:	f8c0 9000 	str.w	r9, [r0]
 800fe88:	4604      	mov	r4, r0
 800fe8a:	e7e4      	b.n	800fe56 <__pow5mult+0x6a>
 800fe8c:	4630      	mov	r0, r6
 800fe8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe92:	bf00      	nop
 800fe94:	080114d0 	.word	0x080114d0
 800fe98:	08011396 	.word	0x08011396
 800fe9c:	08011476 	.word	0x08011476

0800fea0 <__lshift>:
 800fea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fea4:	460c      	mov	r4, r1
 800fea6:	6849      	ldr	r1, [r1, #4]
 800fea8:	6923      	ldr	r3, [r4, #16]
 800feaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800feae:	68a3      	ldr	r3, [r4, #8]
 800feb0:	4607      	mov	r7, r0
 800feb2:	4691      	mov	r9, r2
 800feb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800feb8:	f108 0601 	add.w	r6, r8, #1
 800febc:	42b3      	cmp	r3, r6
 800febe:	db0b      	blt.n	800fed8 <__lshift+0x38>
 800fec0:	4638      	mov	r0, r7
 800fec2:	f7ff fd95 	bl	800f9f0 <_Balloc>
 800fec6:	4605      	mov	r5, r0
 800fec8:	b948      	cbnz	r0, 800fede <__lshift+0x3e>
 800feca:	4602      	mov	r2, r0
 800fecc:	4b28      	ldr	r3, [pc, #160]	@ (800ff70 <__lshift+0xd0>)
 800fece:	4829      	ldr	r0, [pc, #164]	@ (800ff74 <__lshift+0xd4>)
 800fed0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fed4:	f000 fcf4 	bl	80108c0 <__assert_func>
 800fed8:	3101      	adds	r1, #1
 800feda:	005b      	lsls	r3, r3, #1
 800fedc:	e7ee      	b.n	800febc <__lshift+0x1c>
 800fede:	2300      	movs	r3, #0
 800fee0:	f100 0114 	add.w	r1, r0, #20
 800fee4:	f100 0210 	add.w	r2, r0, #16
 800fee8:	4618      	mov	r0, r3
 800feea:	4553      	cmp	r3, sl
 800feec:	db33      	blt.n	800ff56 <__lshift+0xb6>
 800feee:	6920      	ldr	r0, [r4, #16]
 800fef0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fef4:	f104 0314 	add.w	r3, r4, #20
 800fef8:	f019 091f 	ands.w	r9, r9, #31
 800fefc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ff00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ff04:	d02b      	beq.n	800ff5e <__lshift+0xbe>
 800ff06:	f1c9 0e20 	rsb	lr, r9, #32
 800ff0a:	468a      	mov	sl, r1
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	6818      	ldr	r0, [r3, #0]
 800ff10:	fa00 f009 	lsl.w	r0, r0, r9
 800ff14:	4310      	orrs	r0, r2
 800ff16:	f84a 0b04 	str.w	r0, [sl], #4
 800ff1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff1e:	459c      	cmp	ip, r3
 800ff20:	fa22 f20e 	lsr.w	r2, r2, lr
 800ff24:	d8f3      	bhi.n	800ff0e <__lshift+0x6e>
 800ff26:	ebac 0304 	sub.w	r3, ip, r4
 800ff2a:	3b15      	subs	r3, #21
 800ff2c:	f023 0303 	bic.w	r3, r3, #3
 800ff30:	3304      	adds	r3, #4
 800ff32:	f104 0015 	add.w	r0, r4, #21
 800ff36:	4584      	cmp	ip, r0
 800ff38:	bf38      	it	cc
 800ff3a:	2304      	movcc	r3, #4
 800ff3c:	50ca      	str	r2, [r1, r3]
 800ff3e:	b10a      	cbz	r2, 800ff44 <__lshift+0xa4>
 800ff40:	f108 0602 	add.w	r6, r8, #2
 800ff44:	3e01      	subs	r6, #1
 800ff46:	4638      	mov	r0, r7
 800ff48:	612e      	str	r6, [r5, #16]
 800ff4a:	4621      	mov	r1, r4
 800ff4c:	f7ff fd90 	bl	800fa70 <_Bfree>
 800ff50:	4628      	mov	r0, r5
 800ff52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff56:	f842 0f04 	str.w	r0, [r2, #4]!
 800ff5a:	3301      	adds	r3, #1
 800ff5c:	e7c5      	b.n	800feea <__lshift+0x4a>
 800ff5e:	3904      	subs	r1, #4
 800ff60:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff64:	f841 2f04 	str.w	r2, [r1, #4]!
 800ff68:	459c      	cmp	ip, r3
 800ff6a:	d8f9      	bhi.n	800ff60 <__lshift+0xc0>
 800ff6c:	e7ea      	b.n	800ff44 <__lshift+0xa4>
 800ff6e:	bf00      	nop
 800ff70:	08011405 	.word	0x08011405
 800ff74:	08011476 	.word	0x08011476

0800ff78 <__mcmp>:
 800ff78:	690a      	ldr	r2, [r1, #16]
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	6900      	ldr	r0, [r0, #16]
 800ff7e:	1a80      	subs	r0, r0, r2
 800ff80:	b530      	push	{r4, r5, lr}
 800ff82:	d10e      	bne.n	800ffa2 <__mcmp+0x2a>
 800ff84:	3314      	adds	r3, #20
 800ff86:	3114      	adds	r1, #20
 800ff88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ff8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ff90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ff94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ff98:	4295      	cmp	r5, r2
 800ff9a:	d003      	beq.n	800ffa4 <__mcmp+0x2c>
 800ff9c:	d205      	bcs.n	800ffaa <__mcmp+0x32>
 800ff9e:	f04f 30ff 	mov.w	r0, #4294967295
 800ffa2:	bd30      	pop	{r4, r5, pc}
 800ffa4:	42a3      	cmp	r3, r4
 800ffa6:	d3f3      	bcc.n	800ff90 <__mcmp+0x18>
 800ffa8:	e7fb      	b.n	800ffa2 <__mcmp+0x2a>
 800ffaa:	2001      	movs	r0, #1
 800ffac:	e7f9      	b.n	800ffa2 <__mcmp+0x2a>
	...

0800ffb0 <__mdiff>:
 800ffb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffb4:	4689      	mov	r9, r1
 800ffb6:	4606      	mov	r6, r0
 800ffb8:	4611      	mov	r1, r2
 800ffba:	4648      	mov	r0, r9
 800ffbc:	4614      	mov	r4, r2
 800ffbe:	f7ff ffdb 	bl	800ff78 <__mcmp>
 800ffc2:	1e05      	subs	r5, r0, #0
 800ffc4:	d112      	bne.n	800ffec <__mdiff+0x3c>
 800ffc6:	4629      	mov	r1, r5
 800ffc8:	4630      	mov	r0, r6
 800ffca:	f7ff fd11 	bl	800f9f0 <_Balloc>
 800ffce:	4602      	mov	r2, r0
 800ffd0:	b928      	cbnz	r0, 800ffde <__mdiff+0x2e>
 800ffd2:	4b3f      	ldr	r3, [pc, #252]	@ (80100d0 <__mdiff+0x120>)
 800ffd4:	f240 2137 	movw	r1, #567	@ 0x237
 800ffd8:	483e      	ldr	r0, [pc, #248]	@ (80100d4 <__mdiff+0x124>)
 800ffda:	f000 fc71 	bl	80108c0 <__assert_func>
 800ffde:	2301      	movs	r3, #1
 800ffe0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ffe4:	4610      	mov	r0, r2
 800ffe6:	b003      	add	sp, #12
 800ffe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffec:	bfbc      	itt	lt
 800ffee:	464b      	movlt	r3, r9
 800fff0:	46a1      	movlt	r9, r4
 800fff2:	4630      	mov	r0, r6
 800fff4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fff8:	bfba      	itte	lt
 800fffa:	461c      	movlt	r4, r3
 800fffc:	2501      	movlt	r5, #1
 800fffe:	2500      	movge	r5, #0
 8010000:	f7ff fcf6 	bl	800f9f0 <_Balloc>
 8010004:	4602      	mov	r2, r0
 8010006:	b918      	cbnz	r0, 8010010 <__mdiff+0x60>
 8010008:	4b31      	ldr	r3, [pc, #196]	@ (80100d0 <__mdiff+0x120>)
 801000a:	f240 2145 	movw	r1, #581	@ 0x245
 801000e:	e7e3      	b.n	800ffd8 <__mdiff+0x28>
 8010010:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010014:	6926      	ldr	r6, [r4, #16]
 8010016:	60c5      	str	r5, [r0, #12]
 8010018:	f109 0310 	add.w	r3, r9, #16
 801001c:	f109 0514 	add.w	r5, r9, #20
 8010020:	f104 0e14 	add.w	lr, r4, #20
 8010024:	f100 0b14 	add.w	fp, r0, #20
 8010028:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801002c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010030:	9301      	str	r3, [sp, #4]
 8010032:	46d9      	mov	r9, fp
 8010034:	f04f 0c00 	mov.w	ip, #0
 8010038:	9b01      	ldr	r3, [sp, #4]
 801003a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801003e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010042:	9301      	str	r3, [sp, #4]
 8010044:	fa1f f38a 	uxth.w	r3, sl
 8010048:	4619      	mov	r1, r3
 801004a:	b283      	uxth	r3, r0
 801004c:	1acb      	subs	r3, r1, r3
 801004e:	0c00      	lsrs	r0, r0, #16
 8010050:	4463      	add	r3, ip
 8010052:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010056:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801005a:	b29b      	uxth	r3, r3
 801005c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010060:	4576      	cmp	r6, lr
 8010062:	f849 3b04 	str.w	r3, [r9], #4
 8010066:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801006a:	d8e5      	bhi.n	8010038 <__mdiff+0x88>
 801006c:	1b33      	subs	r3, r6, r4
 801006e:	3b15      	subs	r3, #21
 8010070:	f023 0303 	bic.w	r3, r3, #3
 8010074:	3415      	adds	r4, #21
 8010076:	3304      	adds	r3, #4
 8010078:	42a6      	cmp	r6, r4
 801007a:	bf38      	it	cc
 801007c:	2304      	movcc	r3, #4
 801007e:	441d      	add	r5, r3
 8010080:	445b      	add	r3, fp
 8010082:	461e      	mov	r6, r3
 8010084:	462c      	mov	r4, r5
 8010086:	4544      	cmp	r4, r8
 8010088:	d30e      	bcc.n	80100a8 <__mdiff+0xf8>
 801008a:	f108 0103 	add.w	r1, r8, #3
 801008e:	1b49      	subs	r1, r1, r5
 8010090:	f021 0103 	bic.w	r1, r1, #3
 8010094:	3d03      	subs	r5, #3
 8010096:	45a8      	cmp	r8, r5
 8010098:	bf38      	it	cc
 801009a:	2100      	movcc	r1, #0
 801009c:	440b      	add	r3, r1
 801009e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80100a2:	b191      	cbz	r1, 80100ca <__mdiff+0x11a>
 80100a4:	6117      	str	r7, [r2, #16]
 80100a6:	e79d      	b.n	800ffe4 <__mdiff+0x34>
 80100a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80100ac:	46e6      	mov	lr, ip
 80100ae:	0c08      	lsrs	r0, r1, #16
 80100b0:	fa1c fc81 	uxtah	ip, ip, r1
 80100b4:	4471      	add	r1, lr
 80100b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80100ba:	b289      	uxth	r1, r1
 80100bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80100c0:	f846 1b04 	str.w	r1, [r6], #4
 80100c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80100c8:	e7dd      	b.n	8010086 <__mdiff+0xd6>
 80100ca:	3f01      	subs	r7, #1
 80100cc:	e7e7      	b.n	801009e <__mdiff+0xee>
 80100ce:	bf00      	nop
 80100d0:	08011405 	.word	0x08011405
 80100d4:	08011476 	.word	0x08011476

080100d8 <__ulp>:
 80100d8:	b082      	sub	sp, #8
 80100da:	ed8d 0b00 	vstr	d0, [sp]
 80100de:	9a01      	ldr	r2, [sp, #4]
 80100e0:	4b0f      	ldr	r3, [pc, #60]	@ (8010120 <__ulp+0x48>)
 80100e2:	4013      	ands	r3, r2
 80100e4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	dc08      	bgt.n	80100fe <__ulp+0x26>
 80100ec:	425b      	negs	r3, r3
 80100ee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80100f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80100f6:	da04      	bge.n	8010102 <__ulp+0x2a>
 80100f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80100fc:	4113      	asrs	r3, r2
 80100fe:	2200      	movs	r2, #0
 8010100:	e008      	b.n	8010114 <__ulp+0x3c>
 8010102:	f1a2 0314 	sub.w	r3, r2, #20
 8010106:	2b1e      	cmp	r3, #30
 8010108:	bfda      	itte	le
 801010a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801010e:	40da      	lsrle	r2, r3
 8010110:	2201      	movgt	r2, #1
 8010112:	2300      	movs	r3, #0
 8010114:	4619      	mov	r1, r3
 8010116:	4610      	mov	r0, r2
 8010118:	ec41 0b10 	vmov	d0, r0, r1
 801011c:	b002      	add	sp, #8
 801011e:	4770      	bx	lr
 8010120:	7ff00000 	.word	0x7ff00000

08010124 <__b2d>:
 8010124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010128:	6906      	ldr	r6, [r0, #16]
 801012a:	f100 0814 	add.w	r8, r0, #20
 801012e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010132:	1f37      	subs	r7, r6, #4
 8010134:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010138:	4610      	mov	r0, r2
 801013a:	f7ff fd4b 	bl	800fbd4 <__hi0bits>
 801013e:	f1c0 0320 	rsb	r3, r0, #32
 8010142:	280a      	cmp	r0, #10
 8010144:	600b      	str	r3, [r1, #0]
 8010146:	491b      	ldr	r1, [pc, #108]	@ (80101b4 <__b2d+0x90>)
 8010148:	dc15      	bgt.n	8010176 <__b2d+0x52>
 801014a:	f1c0 0c0b 	rsb	ip, r0, #11
 801014e:	fa22 f30c 	lsr.w	r3, r2, ip
 8010152:	45b8      	cmp	r8, r7
 8010154:	ea43 0501 	orr.w	r5, r3, r1
 8010158:	bf34      	ite	cc
 801015a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801015e:	2300      	movcs	r3, #0
 8010160:	3015      	adds	r0, #21
 8010162:	fa02 f000 	lsl.w	r0, r2, r0
 8010166:	fa23 f30c 	lsr.w	r3, r3, ip
 801016a:	4303      	orrs	r3, r0
 801016c:	461c      	mov	r4, r3
 801016e:	ec45 4b10 	vmov	d0, r4, r5
 8010172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010176:	45b8      	cmp	r8, r7
 8010178:	bf3a      	itte	cc
 801017a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801017e:	f1a6 0708 	subcc.w	r7, r6, #8
 8010182:	2300      	movcs	r3, #0
 8010184:	380b      	subs	r0, #11
 8010186:	d012      	beq.n	80101ae <__b2d+0x8a>
 8010188:	f1c0 0120 	rsb	r1, r0, #32
 801018c:	fa23 f401 	lsr.w	r4, r3, r1
 8010190:	4082      	lsls	r2, r0
 8010192:	4322      	orrs	r2, r4
 8010194:	4547      	cmp	r7, r8
 8010196:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801019a:	bf8c      	ite	hi
 801019c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80101a0:	2200      	movls	r2, #0
 80101a2:	4083      	lsls	r3, r0
 80101a4:	40ca      	lsrs	r2, r1
 80101a6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80101aa:	4313      	orrs	r3, r2
 80101ac:	e7de      	b.n	801016c <__b2d+0x48>
 80101ae:	ea42 0501 	orr.w	r5, r2, r1
 80101b2:	e7db      	b.n	801016c <__b2d+0x48>
 80101b4:	3ff00000 	.word	0x3ff00000

080101b8 <__d2b>:
 80101b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80101bc:	460f      	mov	r7, r1
 80101be:	2101      	movs	r1, #1
 80101c0:	ec59 8b10 	vmov	r8, r9, d0
 80101c4:	4616      	mov	r6, r2
 80101c6:	f7ff fc13 	bl	800f9f0 <_Balloc>
 80101ca:	4604      	mov	r4, r0
 80101cc:	b930      	cbnz	r0, 80101dc <__d2b+0x24>
 80101ce:	4602      	mov	r2, r0
 80101d0:	4b23      	ldr	r3, [pc, #140]	@ (8010260 <__d2b+0xa8>)
 80101d2:	4824      	ldr	r0, [pc, #144]	@ (8010264 <__d2b+0xac>)
 80101d4:	f240 310f 	movw	r1, #783	@ 0x30f
 80101d8:	f000 fb72 	bl	80108c0 <__assert_func>
 80101dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80101e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80101e4:	b10d      	cbz	r5, 80101ea <__d2b+0x32>
 80101e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80101ea:	9301      	str	r3, [sp, #4]
 80101ec:	f1b8 0300 	subs.w	r3, r8, #0
 80101f0:	d023      	beq.n	801023a <__d2b+0x82>
 80101f2:	4668      	mov	r0, sp
 80101f4:	9300      	str	r3, [sp, #0]
 80101f6:	f7ff fd0c 	bl	800fc12 <__lo0bits>
 80101fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80101fe:	b1d0      	cbz	r0, 8010236 <__d2b+0x7e>
 8010200:	f1c0 0320 	rsb	r3, r0, #32
 8010204:	fa02 f303 	lsl.w	r3, r2, r3
 8010208:	430b      	orrs	r3, r1
 801020a:	40c2      	lsrs	r2, r0
 801020c:	6163      	str	r3, [r4, #20]
 801020e:	9201      	str	r2, [sp, #4]
 8010210:	9b01      	ldr	r3, [sp, #4]
 8010212:	61a3      	str	r3, [r4, #24]
 8010214:	2b00      	cmp	r3, #0
 8010216:	bf0c      	ite	eq
 8010218:	2201      	moveq	r2, #1
 801021a:	2202      	movne	r2, #2
 801021c:	6122      	str	r2, [r4, #16]
 801021e:	b1a5      	cbz	r5, 801024a <__d2b+0x92>
 8010220:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010224:	4405      	add	r5, r0
 8010226:	603d      	str	r5, [r7, #0]
 8010228:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801022c:	6030      	str	r0, [r6, #0]
 801022e:	4620      	mov	r0, r4
 8010230:	b003      	add	sp, #12
 8010232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010236:	6161      	str	r1, [r4, #20]
 8010238:	e7ea      	b.n	8010210 <__d2b+0x58>
 801023a:	a801      	add	r0, sp, #4
 801023c:	f7ff fce9 	bl	800fc12 <__lo0bits>
 8010240:	9b01      	ldr	r3, [sp, #4]
 8010242:	6163      	str	r3, [r4, #20]
 8010244:	3020      	adds	r0, #32
 8010246:	2201      	movs	r2, #1
 8010248:	e7e8      	b.n	801021c <__d2b+0x64>
 801024a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801024e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010252:	6038      	str	r0, [r7, #0]
 8010254:	6918      	ldr	r0, [r3, #16]
 8010256:	f7ff fcbd 	bl	800fbd4 <__hi0bits>
 801025a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801025e:	e7e5      	b.n	801022c <__d2b+0x74>
 8010260:	08011405 	.word	0x08011405
 8010264:	08011476 	.word	0x08011476

08010268 <__ratio>:
 8010268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801026c:	b085      	sub	sp, #20
 801026e:	e9cd 1000 	strd	r1, r0, [sp]
 8010272:	a902      	add	r1, sp, #8
 8010274:	f7ff ff56 	bl	8010124 <__b2d>
 8010278:	9800      	ldr	r0, [sp, #0]
 801027a:	a903      	add	r1, sp, #12
 801027c:	ec55 4b10 	vmov	r4, r5, d0
 8010280:	f7ff ff50 	bl	8010124 <__b2d>
 8010284:	9b01      	ldr	r3, [sp, #4]
 8010286:	6919      	ldr	r1, [r3, #16]
 8010288:	9b00      	ldr	r3, [sp, #0]
 801028a:	691b      	ldr	r3, [r3, #16]
 801028c:	1ac9      	subs	r1, r1, r3
 801028e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010292:	1a9b      	subs	r3, r3, r2
 8010294:	ec5b ab10 	vmov	sl, fp, d0
 8010298:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801029c:	2b00      	cmp	r3, #0
 801029e:	bfce      	itee	gt
 80102a0:	462a      	movgt	r2, r5
 80102a2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80102a6:	465a      	movle	r2, fp
 80102a8:	462f      	mov	r7, r5
 80102aa:	46d9      	mov	r9, fp
 80102ac:	bfcc      	ite	gt
 80102ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80102b2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80102b6:	464b      	mov	r3, r9
 80102b8:	4652      	mov	r2, sl
 80102ba:	4620      	mov	r0, r4
 80102bc:	4639      	mov	r1, r7
 80102be:	f7f0 faed 	bl	800089c <__aeabi_ddiv>
 80102c2:	ec41 0b10 	vmov	d0, r0, r1
 80102c6:	b005      	add	sp, #20
 80102c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080102cc <__copybits>:
 80102cc:	3901      	subs	r1, #1
 80102ce:	b570      	push	{r4, r5, r6, lr}
 80102d0:	1149      	asrs	r1, r1, #5
 80102d2:	6914      	ldr	r4, [r2, #16]
 80102d4:	3101      	adds	r1, #1
 80102d6:	f102 0314 	add.w	r3, r2, #20
 80102da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80102de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80102e2:	1f05      	subs	r5, r0, #4
 80102e4:	42a3      	cmp	r3, r4
 80102e6:	d30c      	bcc.n	8010302 <__copybits+0x36>
 80102e8:	1aa3      	subs	r3, r4, r2
 80102ea:	3b11      	subs	r3, #17
 80102ec:	f023 0303 	bic.w	r3, r3, #3
 80102f0:	3211      	adds	r2, #17
 80102f2:	42a2      	cmp	r2, r4
 80102f4:	bf88      	it	hi
 80102f6:	2300      	movhi	r3, #0
 80102f8:	4418      	add	r0, r3
 80102fa:	2300      	movs	r3, #0
 80102fc:	4288      	cmp	r0, r1
 80102fe:	d305      	bcc.n	801030c <__copybits+0x40>
 8010300:	bd70      	pop	{r4, r5, r6, pc}
 8010302:	f853 6b04 	ldr.w	r6, [r3], #4
 8010306:	f845 6f04 	str.w	r6, [r5, #4]!
 801030a:	e7eb      	b.n	80102e4 <__copybits+0x18>
 801030c:	f840 3b04 	str.w	r3, [r0], #4
 8010310:	e7f4      	b.n	80102fc <__copybits+0x30>

08010312 <__any_on>:
 8010312:	f100 0214 	add.w	r2, r0, #20
 8010316:	6900      	ldr	r0, [r0, #16]
 8010318:	114b      	asrs	r3, r1, #5
 801031a:	4298      	cmp	r0, r3
 801031c:	b510      	push	{r4, lr}
 801031e:	db11      	blt.n	8010344 <__any_on+0x32>
 8010320:	dd0a      	ble.n	8010338 <__any_on+0x26>
 8010322:	f011 011f 	ands.w	r1, r1, #31
 8010326:	d007      	beq.n	8010338 <__any_on+0x26>
 8010328:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801032c:	fa24 f001 	lsr.w	r0, r4, r1
 8010330:	fa00 f101 	lsl.w	r1, r0, r1
 8010334:	428c      	cmp	r4, r1
 8010336:	d10b      	bne.n	8010350 <__any_on+0x3e>
 8010338:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801033c:	4293      	cmp	r3, r2
 801033e:	d803      	bhi.n	8010348 <__any_on+0x36>
 8010340:	2000      	movs	r0, #0
 8010342:	bd10      	pop	{r4, pc}
 8010344:	4603      	mov	r3, r0
 8010346:	e7f7      	b.n	8010338 <__any_on+0x26>
 8010348:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801034c:	2900      	cmp	r1, #0
 801034e:	d0f5      	beq.n	801033c <__any_on+0x2a>
 8010350:	2001      	movs	r0, #1
 8010352:	e7f6      	b.n	8010342 <__any_on+0x30>

08010354 <_strtol_l.constprop.0>:
 8010354:	2b24      	cmp	r3, #36	@ 0x24
 8010356:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801035a:	4686      	mov	lr, r0
 801035c:	4690      	mov	r8, r2
 801035e:	d801      	bhi.n	8010364 <_strtol_l.constprop.0+0x10>
 8010360:	2b01      	cmp	r3, #1
 8010362:	d106      	bne.n	8010372 <_strtol_l.constprop.0+0x1e>
 8010364:	f7fe f860 	bl	800e428 <__errno>
 8010368:	2316      	movs	r3, #22
 801036a:	6003      	str	r3, [r0, #0]
 801036c:	2000      	movs	r0, #0
 801036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010372:	4834      	ldr	r0, [pc, #208]	@ (8010444 <_strtol_l.constprop.0+0xf0>)
 8010374:	460d      	mov	r5, r1
 8010376:	462a      	mov	r2, r5
 8010378:	f815 4b01 	ldrb.w	r4, [r5], #1
 801037c:	5d06      	ldrb	r6, [r0, r4]
 801037e:	f016 0608 	ands.w	r6, r6, #8
 8010382:	d1f8      	bne.n	8010376 <_strtol_l.constprop.0+0x22>
 8010384:	2c2d      	cmp	r4, #45	@ 0x2d
 8010386:	d12d      	bne.n	80103e4 <_strtol_l.constprop.0+0x90>
 8010388:	782c      	ldrb	r4, [r5, #0]
 801038a:	2601      	movs	r6, #1
 801038c:	1c95      	adds	r5, r2, #2
 801038e:	f033 0210 	bics.w	r2, r3, #16
 8010392:	d109      	bne.n	80103a8 <_strtol_l.constprop.0+0x54>
 8010394:	2c30      	cmp	r4, #48	@ 0x30
 8010396:	d12a      	bne.n	80103ee <_strtol_l.constprop.0+0x9a>
 8010398:	782a      	ldrb	r2, [r5, #0]
 801039a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801039e:	2a58      	cmp	r2, #88	@ 0x58
 80103a0:	d125      	bne.n	80103ee <_strtol_l.constprop.0+0x9a>
 80103a2:	786c      	ldrb	r4, [r5, #1]
 80103a4:	2310      	movs	r3, #16
 80103a6:	3502      	adds	r5, #2
 80103a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80103ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 80103b0:	2200      	movs	r2, #0
 80103b2:	fbbc f9f3 	udiv	r9, ip, r3
 80103b6:	4610      	mov	r0, r2
 80103b8:	fb03 ca19 	mls	sl, r3, r9, ip
 80103bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80103c0:	2f09      	cmp	r7, #9
 80103c2:	d81b      	bhi.n	80103fc <_strtol_l.constprop.0+0xa8>
 80103c4:	463c      	mov	r4, r7
 80103c6:	42a3      	cmp	r3, r4
 80103c8:	dd27      	ble.n	801041a <_strtol_l.constprop.0+0xc6>
 80103ca:	1c57      	adds	r7, r2, #1
 80103cc:	d007      	beq.n	80103de <_strtol_l.constprop.0+0x8a>
 80103ce:	4581      	cmp	r9, r0
 80103d0:	d320      	bcc.n	8010414 <_strtol_l.constprop.0+0xc0>
 80103d2:	d101      	bne.n	80103d8 <_strtol_l.constprop.0+0x84>
 80103d4:	45a2      	cmp	sl, r4
 80103d6:	db1d      	blt.n	8010414 <_strtol_l.constprop.0+0xc0>
 80103d8:	fb00 4003 	mla	r0, r0, r3, r4
 80103dc:	2201      	movs	r2, #1
 80103de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80103e2:	e7eb      	b.n	80103bc <_strtol_l.constprop.0+0x68>
 80103e4:	2c2b      	cmp	r4, #43	@ 0x2b
 80103e6:	bf04      	itt	eq
 80103e8:	782c      	ldrbeq	r4, [r5, #0]
 80103ea:	1c95      	addeq	r5, r2, #2
 80103ec:	e7cf      	b.n	801038e <_strtol_l.constprop.0+0x3a>
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d1da      	bne.n	80103a8 <_strtol_l.constprop.0+0x54>
 80103f2:	2c30      	cmp	r4, #48	@ 0x30
 80103f4:	bf0c      	ite	eq
 80103f6:	2308      	moveq	r3, #8
 80103f8:	230a      	movne	r3, #10
 80103fa:	e7d5      	b.n	80103a8 <_strtol_l.constprop.0+0x54>
 80103fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010400:	2f19      	cmp	r7, #25
 8010402:	d801      	bhi.n	8010408 <_strtol_l.constprop.0+0xb4>
 8010404:	3c37      	subs	r4, #55	@ 0x37
 8010406:	e7de      	b.n	80103c6 <_strtol_l.constprop.0+0x72>
 8010408:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801040c:	2f19      	cmp	r7, #25
 801040e:	d804      	bhi.n	801041a <_strtol_l.constprop.0+0xc6>
 8010410:	3c57      	subs	r4, #87	@ 0x57
 8010412:	e7d8      	b.n	80103c6 <_strtol_l.constprop.0+0x72>
 8010414:	f04f 32ff 	mov.w	r2, #4294967295
 8010418:	e7e1      	b.n	80103de <_strtol_l.constprop.0+0x8a>
 801041a:	1c53      	adds	r3, r2, #1
 801041c:	d108      	bne.n	8010430 <_strtol_l.constprop.0+0xdc>
 801041e:	2322      	movs	r3, #34	@ 0x22
 8010420:	f8ce 3000 	str.w	r3, [lr]
 8010424:	4660      	mov	r0, ip
 8010426:	f1b8 0f00 	cmp.w	r8, #0
 801042a:	d0a0      	beq.n	801036e <_strtol_l.constprop.0+0x1a>
 801042c:	1e69      	subs	r1, r5, #1
 801042e:	e006      	b.n	801043e <_strtol_l.constprop.0+0xea>
 8010430:	b106      	cbz	r6, 8010434 <_strtol_l.constprop.0+0xe0>
 8010432:	4240      	negs	r0, r0
 8010434:	f1b8 0f00 	cmp.w	r8, #0
 8010438:	d099      	beq.n	801036e <_strtol_l.constprop.0+0x1a>
 801043a:	2a00      	cmp	r2, #0
 801043c:	d1f6      	bne.n	801042c <_strtol_l.constprop.0+0xd8>
 801043e:	f8c8 1000 	str.w	r1, [r8]
 8010442:	e794      	b.n	801036e <_strtol_l.constprop.0+0x1a>
 8010444:	080115d1 	.word	0x080115d1

08010448 <_strtol_r>:
 8010448:	f7ff bf84 	b.w	8010354 <_strtol_l.constprop.0>

0801044c <__ascii_wctomb>:
 801044c:	4603      	mov	r3, r0
 801044e:	4608      	mov	r0, r1
 8010450:	b141      	cbz	r1, 8010464 <__ascii_wctomb+0x18>
 8010452:	2aff      	cmp	r2, #255	@ 0xff
 8010454:	d904      	bls.n	8010460 <__ascii_wctomb+0x14>
 8010456:	228a      	movs	r2, #138	@ 0x8a
 8010458:	601a      	str	r2, [r3, #0]
 801045a:	f04f 30ff 	mov.w	r0, #4294967295
 801045e:	4770      	bx	lr
 8010460:	700a      	strb	r2, [r1, #0]
 8010462:	2001      	movs	r0, #1
 8010464:	4770      	bx	lr

08010466 <__ssputs_r>:
 8010466:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801046a:	688e      	ldr	r6, [r1, #8]
 801046c:	461f      	mov	r7, r3
 801046e:	42be      	cmp	r6, r7
 8010470:	680b      	ldr	r3, [r1, #0]
 8010472:	4682      	mov	sl, r0
 8010474:	460c      	mov	r4, r1
 8010476:	4690      	mov	r8, r2
 8010478:	d82d      	bhi.n	80104d6 <__ssputs_r+0x70>
 801047a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801047e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010482:	d026      	beq.n	80104d2 <__ssputs_r+0x6c>
 8010484:	6965      	ldr	r5, [r4, #20]
 8010486:	6909      	ldr	r1, [r1, #16]
 8010488:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801048c:	eba3 0901 	sub.w	r9, r3, r1
 8010490:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010494:	1c7b      	adds	r3, r7, #1
 8010496:	444b      	add	r3, r9
 8010498:	106d      	asrs	r5, r5, #1
 801049a:	429d      	cmp	r5, r3
 801049c:	bf38      	it	cc
 801049e:	461d      	movcc	r5, r3
 80104a0:	0553      	lsls	r3, r2, #21
 80104a2:	d527      	bpl.n	80104f4 <__ssputs_r+0x8e>
 80104a4:	4629      	mov	r1, r5
 80104a6:	f7ff fa05 	bl	800f8b4 <_malloc_r>
 80104aa:	4606      	mov	r6, r0
 80104ac:	b360      	cbz	r0, 8010508 <__ssputs_r+0xa2>
 80104ae:	6921      	ldr	r1, [r4, #16]
 80104b0:	464a      	mov	r2, r9
 80104b2:	f7fd ffe6 	bl	800e482 <memcpy>
 80104b6:	89a3      	ldrh	r3, [r4, #12]
 80104b8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80104bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80104c0:	81a3      	strh	r3, [r4, #12]
 80104c2:	6126      	str	r6, [r4, #16]
 80104c4:	6165      	str	r5, [r4, #20]
 80104c6:	444e      	add	r6, r9
 80104c8:	eba5 0509 	sub.w	r5, r5, r9
 80104cc:	6026      	str	r6, [r4, #0]
 80104ce:	60a5      	str	r5, [r4, #8]
 80104d0:	463e      	mov	r6, r7
 80104d2:	42be      	cmp	r6, r7
 80104d4:	d900      	bls.n	80104d8 <__ssputs_r+0x72>
 80104d6:	463e      	mov	r6, r7
 80104d8:	6820      	ldr	r0, [r4, #0]
 80104da:	4632      	mov	r2, r6
 80104dc:	4641      	mov	r1, r8
 80104de:	f000 f9c5 	bl	801086c <memmove>
 80104e2:	68a3      	ldr	r3, [r4, #8]
 80104e4:	1b9b      	subs	r3, r3, r6
 80104e6:	60a3      	str	r3, [r4, #8]
 80104e8:	6823      	ldr	r3, [r4, #0]
 80104ea:	4433      	add	r3, r6
 80104ec:	6023      	str	r3, [r4, #0]
 80104ee:	2000      	movs	r0, #0
 80104f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104f4:	462a      	mov	r2, r5
 80104f6:	f000 fa15 	bl	8010924 <_realloc_r>
 80104fa:	4606      	mov	r6, r0
 80104fc:	2800      	cmp	r0, #0
 80104fe:	d1e0      	bne.n	80104c2 <__ssputs_r+0x5c>
 8010500:	6921      	ldr	r1, [r4, #16]
 8010502:	4650      	mov	r0, sl
 8010504:	f7fe fe28 	bl	800f158 <_free_r>
 8010508:	230c      	movs	r3, #12
 801050a:	f8ca 3000 	str.w	r3, [sl]
 801050e:	89a3      	ldrh	r3, [r4, #12]
 8010510:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010514:	81a3      	strh	r3, [r4, #12]
 8010516:	f04f 30ff 	mov.w	r0, #4294967295
 801051a:	e7e9      	b.n	80104f0 <__ssputs_r+0x8a>

0801051c <_svfiprintf_r>:
 801051c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010520:	4698      	mov	r8, r3
 8010522:	898b      	ldrh	r3, [r1, #12]
 8010524:	061b      	lsls	r3, r3, #24
 8010526:	b09d      	sub	sp, #116	@ 0x74
 8010528:	4607      	mov	r7, r0
 801052a:	460d      	mov	r5, r1
 801052c:	4614      	mov	r4, r2
 801052e:	d510      	bpl.n	8010552 <_svfiprintf_r+0x36>
 8010530:	690b      	ldr	r3, [r1, #16]
 8010532:	b973      	cbnz	r3, 8010552 <_svfiprintf_r+0x36>
 8010534:	2140      	movs	r1, #64	@ 0x40
 8010536:	f7ff f9bd 	bl	800f8b4 <_malloc_r>
 801053a:	6028      	str	r0, [r5, #0]
 801053c:	6128      	str	r0, [r5, #16]
 801053e:	b930      	cbnz	r0, 801054e <_svfiprintf_r+0x32>
 8010540:	230c      	movs	r3, #12
 8010542:	603b      	str	r3, [r7, #0]
 8010544:	f04f 30ff 	mov.w	r0, #4294967295
 8010548:	b01d      	add	sp, #116	@ 0x74
 801054a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801054e:	2340      	movs	r3, #64	@ 0x40
 8010550:	616b      	str	r3, [r5, #20]
 8010552:	2300      	movs	r3, #0
 8010554:	9309      	str	r3, [sp, #36]	@ 0x24
 8010556:	2320      	movs	r3, #32
 8010558:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801055c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010560:	2330      	movs	r3, #48	@ 0x30
 8010562:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010700 <_svfiprintf_r+0x1e4>
 8010566:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801056a:	f04f 0901 	mov.w	r9, #1
 801056e:	4623      	mov	r3, r4
 8010570:	469a      	mov	sl, r3
 8010572:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010576:	b10a      	cbz	r2, 801057c <_svfiprintf_r+0x60>
 8010578:	2a25      	cmp	r2, #37	@ 0x25
 801057a:	d1f9      	bne.n	8010570 <_svfiprintf_r+0x54>
 801057c:	ebba 0b04 	subs.w	fp, sl, r4
 8010580:	d00b      	beq.n	801059a <_svfiprintf_r+0x7e>
 8010582:	465b      	mov	r3, fp
 8010584:	4622      	mov	r2, r4
 8010586:	4629      	mov	r1, r5
 8010588:	4638      	mov	r0, r7
 801058a:	f7ff ff6c 	bl	8010466 <__ssputs_r>
 801058e:	3001      	adds	r0, #1
 8010590:	f000 80a7 	beq.w	80106e2 <_svfiprintf_r+0x1c6>
 8010594:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010596:	445a      	add	r2, fp
 8010598:	9209      	str	r2, [sp, #36]	@ 0x24
 801059a:	f89a 3000 	ldrb.w	r3, [sl]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	f000 809f 	beq.w	80106e2 <_svfiprintf_r+0x1c6>
 80105a4:	2300      	movs	r3, #0
 80105a6:	f04f 32ff 	mov.w	r2, #4294967295
 80105aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105ae:	f10a 0a01 	add.w	sl, sl, #1
 80105b2:	9304      	str	r3, [sp, #16]
 80105b4:	9307      	str	r3, [sp, #28]
 80105b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80105ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80105bc:	4654      	mov	r4, sl
 80105be:	2205      	movs	r2, #5
 80105c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105c4:	484e      	ldr	r0, [pc, #312]	@ (8010700 <_svfiprintf_r+0x1e4>)
 80105c6:	f7ef fe2b 	bl	8000220 <memchr>
 80105ca:	9a04      	ldr	r2, [sp, #16]
 80105cc:	b9d8      	cbnz	r0, 8010606 <_svfiprintf_r+0xea>
 80105ce:	06d0      	lsls	r0, r2, #27
 80105d0:	bf44      	itt	mi
 80105d2:	2320      	movmi	r3, #32
 80105d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105d8:	0711      	lsls	r1, r2, #28
 80105da:	bf44      	itt	mi
 80105dc:	232b      	movmi	r3, #43	@ 0x2b
 80105de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105e2:	f89a 3000 	ldrb.w	r3, [sl]
 80105e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80105e8:	d015      	beq.n	8010616 <_svfiprintf_r+0xfa>
 80105ea:	9a07      	ldr	r2, [sp, #28]
 80105ec:	4654      	mov	r4, sl
 80105ee:	2000      	movs	r0, #0
 80105f0:	f04f 0c0a 	mov.w	ip, #10
 80105f4:	4621      	mov	r1, r4
 80105f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105fa:	3b30      	subs	r3, #48	@ 0x30
 80105fc:	2b09      	cmp	r3, #9
 80105fe:	d94b      	bls.n	8010698 <_svfiprintf_r+0x17c>
 8010600:	b1b0      	cbz	r0, 8010630 <_svfiprintf_r+0x114>
 8010602:	9207      	str	r2, [sp, #28]
 8010604:	e014      	b.n	8010630 <_svfiprintf_r+0x114>
 8010606:	eba0 0308 	sub.w	r3, r0, r8
 801060a:	fa09 f303 	lsl.w	r3, r9, r3
 801060e:	4313      	orrs	r3, r2
 8010610:	9304      	str	r3, [sp, #16]
 8010612:	46a2      	mov	sl, r4
 8010614:	e7d2      	b.n	80105bc <_svfiprintf_r+0xa0>
 8010616:	9b03      	ldr	r3, [sp, #12]
 8010618:	1d19      	adds	r1, r3, #4
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	9103      	str	r1, [sp, #12]
 801061e:	2b00      	cmp	r3, #0
 8010620:	bfbb      	ittet	lt
 8010622:	425b      	neglt	r3, r3
 8010624:	f042 0202 	orrlt.w	r2, r2, #2
 8010628:	9307      	strge	r3, [sp, #28]
 801062a:	9307      	strlt	r3, [sp, #28]
 801062c:	bfb8      	it	lt
 801062e:	9204      	strlt	r2, [sp, #16]
 8010630:	7823      	ldrb	r3, [r4, #0]
 8010632:	2b2e      	cmp	r3, #46	@ 0x2e
 8010634:	d10a      	bne.n	801064c <_svfiprintf_r+0x130>
 8010636:	7863      	ldrb	r3, [r4, #1]
 8010638:	2b2a      	cmp	r3, #42	@ 0x2a
 801063a:	d132      	bne.n	80106a2 <_svfiprintf_r+0x186>
 801063c:	9b03      	ldr	r3, [sp, #12]
 801063e:	1d1a      	adds	r2, r3, #4
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	9203      	str	r2, [sp, #12]
 8010644:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010648:	3402      	adds	r4, #2
 801064a:	9305      	str	r3, [sp, #20]
 801064c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010710 <_svfiprintf_r+0x1f4>
 8010650:	7821      	ldrb	r1, [r4, #0]
 8010652:	2203      	movs	r2, #3
 8010654:	4650      	mov	r0, sl
 8010656:	f7ef fde3 	bl	8000220 <memchr>
 801065a:	b138      	cbz	r0, 801066c <_svfiprintf_r+0x150>
 801065c:	9b04      	ldr	r3, [sp, #16]
 801065e:	eba0 000a 	sub.w	r0, r0, sl
 8010662:	2240      	movs	r2, #64	@ 0x40
 8010664:	4082      	lsls	r2, r0
 8010666:	4313      	orrs	r3, r2
 8010668:	3401      	adds	r4, #1
 801066a:	9304      	str	r3, [sp, #16]
 801066c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010670:	4824      	ldr	r0, [pc, #144]	@ (8010704 <_svfiprintf_r+0x1e8>)
 8010672:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010676:	2206      	movs	r2, #6
 8010678:	f7ef fdd2 	bl	8000220 <memchr>
 801067c:	2800      	cmp	r0, #0
 801067e:	d036      	beq.n	80106ee <_svfiprintf_r+0x1d2>
 8010680:	4b21      	ldr	r3, [pc, #132]	@ (8010708 <_svfiprintf_r+0x1ec>)
 8010682:	bb1b      	cbnz	r3, 80106cc <_svfiprintf_r+0x1b0>
 8010684:	9b03      	ldr	r3, [sp, #12]
 8010686:	3307      	adds	r3, #7
 8010688:	f023 0307 	bic.w	r3, r3, #7
 801068c:	3308      	adds	r3, #8
 801068e:	9303      	str	r3, [sp, #12]
 8010690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010692:	4433      	add	r3, r6
 8010694:	9309      	str	r3, [sp, #36]	@ 0x24
 8010696:	e76a      	b.n	801056e <_svfiprintf_r+0x52>
 8010698:	fb0c 3202 	mla	r2, ip, r2, r3
 801069c:	460c      	mov	r4, r1
 801069e:	2001      	movs	r0, #1
 80106a0:	e7a8      	b.n	80105f4 <_svfiprintf_r+0xd8>
 80106a2:	2300      	movs	r3, #0
 80106a4:	3401      	adds	r4, #1
 80106a6:	9305      	str	r3, [sp, #20]
 80106a8:	4619      	mov	r1, r3
 80106aa:	f04f 0c0a 	mov.w	ip, #10
 80106ae:	4620      	mov	r0, r4
 80106b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106b4:	3a30      	subs	r2, #48	@ 0x30
 80106b6:	2a09      	cmp	r2, #9
 80106b8:	d903      	bls.n	80106c2 <_svfiprintf_r+0x1a6>
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d0c6      	beq.n	801064c <_svfiprintf_r+0x130>
 80106be:	9105      	str	r1, [sp, #20]
 80106c0:	e7c4      	b.n	801064c <_svfiprintf_r+0x130>
 80106c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80106c6:	4604      	mov	r4, r0
 80106c8:	2301      	movs	r3, #1
 80106ca:	e7f0      	b.n	80106ae <_svfiprintf_r+0x192>
 80106cc:	ab03      	add	r3, sp, #12
 80106ce:	9300      	str	r3, [sp, #0]
 80106d0:	462a      	mov	r2, r5
 80106d2:	4b0e      	ldr	r3, [pc, #56]	@ (801070c <_svfiprintf_r+0x1f0>)
 80106d4:	a904      	add	r1, sp, #16
 80106d6:	4638      	mov	r0, r7
 80106d8:	f7fc ff30 	bl	800d53c <_printf_float>
 80106dc:	1c42      	adds	r2, r0, #1
 80106de:	4606      	mov	r6, r0
 80106e0:	d1d6      	bne.n	8010690 <_svfiprintf_r+0x174>
 80106e2:	89ab      	ldrh	r3, [r5, #12]
 80106e4:	065b      	lsls	r3, r3, #25
 80106e6:	f53f af2d 	bmi.w	8010544 <_svfiprintf_r+0x28>
 80106ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80106ec:	e72c      	b.n	8010548 <_svfiprintf_r+0x2c>
 80106ee:	ab03      	add	r3, sp, #12
 80106f0:	9300      	str	r3, [sp, #0]
 80106f2:	462a      	mov	r2, r5
 80106f4:	4b05      	ldr	r3, [pc, #20]	@ (801070c <_svfiprintf_r+0x1f0>)
 80106f6:	a904      	add	r1, sp, #16
 80106f8:	4638      	mov	r0, r7
 80106fa:	f7fd f9b7 	bl	800da6c <_printf_i>
 80106fe:	e7ed      	b.n	80106dc <_svfiprintf_r+0x1c0>
 8010700:	080116d1 	.word	0x080116d1
 8010704:	080116db 	.word	0x080116db
 8010708:	0800d53d 	.word	0x0800d53d
 801070c:	08010467 	.word	0x08010467
 8010710:	080116d7 	.word	0x080116d7

08010714 <__sflush_r>:
 8010714:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801071c:	0716      	lsls	r6, r2, #28
 801071e:	4605      	mov	r5, r0
 8010720:	460c      	mov	r4, r1
 8010722:	d454      	bmi.n	80107ce <__sflush_r+0xba>
 8010724:	684b      	ldr	r3, [r1, #4]
 8010726:	2b00      	cmp	r3, #0
 8010728:	dc02      	bgt.n	8010730 <__sflush_r+0x1c>
 801072a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801072c:	2b00      	cmp	r3, #0
 801072e:	dd48      	ble.n	80107c2 <__sflush_r+0xae>
 8010730:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010732:	2e00      	cmp	r6, #0
 8010734:	d045      	beq.n	80107c2 <__sflush_r+0xae>
 8010736:	2300      	movs	r3, #0
 8010738:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801073c:	682f      	ldr	r7, [r5, #0]
 801073e:	6a21      	ldr	r1, [r4, #32]
 8010740:	602b      	str	r3, [r5, #0]
 8010742:	d030      	beq.n	80107a6 <__sflush_r+0x92>
 8010744:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010746:	89a3      	ldrh	r3, [r4, #12]
 8010748:	0759      	lsls	r1, r3, #29
 801074a:	d505      	bpl.n	8010758 <__sflush_r+0x44>
 801074c:	6863      	ldr	r3, [r4, #4]
 801074e:	1ad2      	subs	r2, r2, r3
 8010750:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010752:	b10b      	cbz	r3, 8010758 <__sflush_r+0x44>
 8010754:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010756:	1ad2      	subs	r2, r2, r3
 8010758:	2300      	movs	r3, #0
 801075a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801075c:	6a21      	ldr	r1, [r4, #32]
 801075e:	4628      	mov	r0, r5
 8010760:	47b0      	blx	r6
 8010762:	1c43      	adds	r3, r0, #1
 8010764:	89a3      	ldrh	r3, [r4, #12]
 8010766:	d106      	bne.n	8010776 <__sflush_r+0x62>
 8010768:	6829      	ldr	r1, [r5, #0]
 801076a:	291d      	cmp	r1, #29
 801076c:	d82b      	bhi.n	80107c6 <__sflush_r+0xb2>
 801076e:	4a2a      	ldr	r2, [pc, #168]	@ (8010818 <__sflush_r+0x104>)
 8010770:	410a      	asrs	r2, r1
 8010772:	07d6      	lsls	r6, r2, #31
 8010774:	d427      	bmi.n	80107c6 <__sflush_r+0xb2>
 8010776:	2200      	movs	r2, #0
 8010778:	6062      	str	r2, [r4, #4]
 801077a:	04d9      	lsls	r1, r3, #19
 801077c:	6922      	ldr	r2, [r4, #16]
 801077e:	6022      	str	r2, [r4, #0]
 8010780:	d504      	bpl.n	801078c <__sflush_r+0x78>
 8010782:	1c42      	adds	r2, r0, #1
 8010784:	d101      	bne.n	801078a <__sflush_r+0x76>
 8010786:	682b      	ldr	r3, [r5, #0]
 8010788:	b903      	cbnz	r3, 801078c <__sflush_r+0x78>
 801078a:	6560      	str	r0, [r4, #84]	@ 0x54
 801078c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801078e:	602f      	str	r7, [r5, #0]
 8010790:	b1b9      	cbz	r1, 80107c2 <__sflush_r+0xae>
 8010792:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010796:	4299      	cmp	r1, r3
 8010798:	d002      	beq.n	80107a0 <__sflush_r+0x8c>
 801079a:	4628      	mov	r0, r5
 801079c:	f7fe fcdc 	bl	800f158 <_free_r>
 80107a0:	2300      	movs	r3, #0
 80107a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80107a4:	e00d      	b.n	80107c2 <__sflush_r+0xae>
 80107a6:	2301      	movs	r3, #1
 80107a8:	4628      	mov	r0, r5
 80107aa:	47b0      	blx	r6
 80107ac:	4602      	mov	r2, r0
 80107ae:	1c50      	adds	r0, r2, #1
 80107b0:	d1c9      	bne.n	8010746 <__sflush_r+0x32>
 80107b2:	682b      	ldr	r3, [r5, #0]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d0c6      	beq.n	8010746 <__sflush_r+0x32>
 80107b8:	2b1d      	cmp	r3, #29
 80107ba:	d001      	beq.n	80107c0 <__sflush_r+0xac>
 80107bc:	2b16      	cmp	r3, #22
 80107be:	d11e      	bne.n	80107fe <__sflush_r+0xea>
 80107c0:	602f      	str	r7, [r5, #0]
 80107c2:	2000      	movs	r0, #0
 80107c4:	e022      	b.n	801080c <__sflush_r+0xf8>
 80107c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80107ca:	b21b      	sxth	r3, r3
 80107cc:	e01b      	b.n	8010806 <__sflush_r+0xf2>
 80107ce:	690f      	ldr	r7, [r1, #16]
 80107d0:	2f00      	cmp	r7, #0
 80107d2:	d0f6      	beq.n	80107c2 <__sflush_r+0xae>
 80107d4:	0793      	lsls	r3, r2, #30
 80107d6:	680e      	ldr	r6, [r1, #0]
 80107d8:	bf08      	it	eq
 80107da:	694b      	ldreq	r3, [r1, #20]
 80107dc:	600f      	str	r7, [r1, #0]
 80107de:	bf18      	it	ne
 80107e0:	2300      	movne	r3, #0
 80107e2:	eba6 0807 	sub.w	r8, r6, r7
 80107e6:	608b      	str	r3, [r1, #8]
 80107e8:	f1b8 0f00 	cmp.w	r8, #0
 80107ec:	dde9      	ble.n	80107c2 <__sflush_r+0xae>
 80107ee:	6a21      	ldr	r1, [r4, #32]
 80107f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80107f2:	4643      	mov	r3, r8
 80107f4:	463a      	mov	r2, r7
 80107f6:	4628      	mov	r0, r5
 80107f8:	47b0      	blx	r6
 80107fa:	2800      	cmp	r0, #0
 80107fc:	dc08      	bgt.n	8010810 <__sflush_r+0xfc>
 80107fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010806:	81a3      	strh	r3, [r4, #12]
 8010808:	f04f 30ff 	mov.w	r0, #4294967295
 801080c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010810:	4407      	add	r7, r0
 8010812:	eba8 0800 	sub.w	r8, r8, r0
 8010816:	e7e7      	b.n	80107e8 <__sflush_r+0xd4>
 8010818:	dfbffffe 	.word	0xdfbffffe

0801081c <_fflush_r>:
 801081c:	b538      	push	{r3, r4, r5, lr}
 801081e:	690b      	ldr	r3, [r1, #16]
 8010820:	4605      	mov	r5, r0
 8010822:	460c      	mov	r4, r1
 8010824:	b913      	cbnz	r3, 801082c <_fflush_r+0x10>
 8010826:	2500      	movs	r5, #0
 8010828:	4628      	mov	r0, r5
 801082a:	bd38      	pop	{r3, r4, r5, pc}
 801082c:	b118      	cbz	r0, 8010836 <_fflush_r+0x1a>
 801082e:	6a03      	ldr	r3, [r0, #32]
 8010830:	b90b      	cbnz	r3, 8010836 <_fflush_r+0x1a>
 8010832:	f7fd fcdb 	bl	800e1ec <__sinit>
 8010836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d0f3      	beq.n	8010826 <_fflush_r+0xa>
 801083e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010840:	07d0      	lsls	r0, r2, #31
 8010842:	d404      	bmi.n	801084e <_fflush_r+0x32>
 8010844:	0599      	lsls	r1, r3, #22
 8010846:	d402      	bmi.n	801084e <_fflush_r+0x32>
 8010848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801084a:	f7fd fe18 	bl	800e47e <__retarget_lock_acquire_recursive>
 801084e:	4628      	mov	r0, r5
 8010850:	4621      	mov	r1, r4
 8010852:	f7ff ff5f 	bl	8010714 <__sflush_r>
 8010856:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010858:	07da      	lsls	r2, r3, #31
 801085a:	4605      	mov	r5, r0
 801085c:	d4e4      	bmi.n	8010828 <_fflush_r+0xc>
 801085e:	89a3      	ldrh	r3, [r4, #12]
 8010860:	059b      	lsls	r3, r3, #22
 8010862:	d4e1      	bmi.n	8010828 <_fflush_r+0xc>
 8010864:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010866:	f7fd fe0b 	bl	800e480 <__retarget_lock_release_recursive>
 801086a:	e7dd      	b.n	8010828 <_fflush_r+0xc>

0801086c <memmove>:
 801086c:	4288      	cmp	r0, r1
 801086e:	b510      	push	{r4, lr}
 8010870:	eb01 0402 	add.w	r4, r1, r2
 8010874:	d902      	bls.n	801087c <memmove+0x10>
 8010876:	4284      	cmp	r4, r0
 8010878:	4623      	mov	r3, r4
 801087a:	d807      	bhi.n	801088c <memmove+0x20>
 801087c:	1e43      	subs	r3, r0, #1
 801087e:	42a1      	cmp	r1, r4
 8010880:	d008      	beq.n	8010894 <memmove+0x28>
 8010882:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010886:	f803 2f01 	strb.w	r2, [r3, #1]!
 801088a:	e7f8      	b.n	801087e <memmove+0x12>
 801088c:	4402      	add	r2, r0
 801088e:	4601      	mov	r1, r0
 8010890:	428a      	cmp	r2, r1
 8010892:	d100      	bne.n	8010896 <memmove+0x2a>
 8010894:	bd10      	pop	{r4, pc}
 8010896:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801089a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801089e:	e7f7      	b.n	8010890 <memmove+0x24>

080108a0 <_sbrk_r>:
 80108a0:	b538      	push	{r3, r4, r5, lr}
 80108a2:	4d06      	ldr	r5, [pc, #24]	@ (80108bc <_sbrk_r+0x1c>)
 80108a4:	2300      	movs	r3, #0
 80108a6:	4604      	mov	r4, r0
 80108a8:	4608      	mov	r0, r1
 80108aa:	602b      	str	r3, [r5, #0]
 80108ac:	f7f1 f9e4 	bl	8001c78 <_sbrk>
 80108b0:	1c43      	adds	r3, r0, #1
 80108b2:	d102      	bne.n	80108ba <_sbrk_r+0x1a>
 80108b4:	682b      	ldr	r3, [r5, #0]
 80108b6:	b103      	cbz	r3, 80108ba <_sbrk_r+0x1a>
 80108b8:	6023      	str	r3, [r4, #0]
 80108ba:	bd38      	pop	{r3, r4, r5, pc}
 80108bc:	20000ac4 	.word	0x20000ac4

080108c0 <__assert_func>:
 80108c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80108c2:	4614      	mov	r4, r2
 80108c4:	461a      	mov	r2, r3
 80108c6:	4b09      	ldr	r3, [pc, #36]	@ (80108ec <__assert_func+0x2c>)
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	4605      	mov	r5, r0
 80108cc:	68d8      	ldr	r0, [r3, #12]
 80108ce:	b954      	cbnz	r4, 80108e6 <__assert_func+0x26>
 80108d0:	4b07      	ldr	r3, [pc, #28]	@ (80108f0 <__assert_func+0x30>)
 80108d2:	461c      	mov	r4, r3
 80108d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80108d8:	9100      	str	r1, [sp, #0]
 80108da:	462b      	mov	r3, r5
 80108dc:	4905      	ldr	r1, [pc, #20]	@ (80108f4 <__assert_func+0x34>)
 80108de:	f000 f84f 	bl	8010980 <fiprintf>
 80108e2:	f000 f85f 	bl	80109a4 <abort>
 80108e6:	4b04      	ldr	r3, [pc, #16]	@ (80108f8 <__assert_func+0x38>)
 80108e8:	e7f4      	b.n	80108d4 <__assert_func+0x14>
 80108ea:	bf00      	nop
 80108ec:	2000022c 	.word	0x2000022c
 80108f0:	0801171d 	.word	0x0801171d
 80108f4:	080116ef 	.word	0x080116ef
 80108f8:	080116e2 	.word	0x080116e2

080108fc <_calloc_r>:
 80108fc:	b570      	push	{r4, r5, r6, lr}
 80108fe:	fba1 5402 	umull	r5, r4, r1, r2
 8010902:	b93c      	cbnz	r4, 8010914 <_calloc_r+0x18>
 8010904:	4629      	mov	r1, r5
 8010906:	f7fe ffd5 	bl	800f8b4 <_malloc_r>
 801090a:	4606      	mov	r6, r0
 801090c:	b928      	cbnz	r0, 801091a <_calloc_r+0x1e>
 801090e:	2600      	movs	r6, #0
 8010910:	4630      	mov	r0, r6
 8010912:	bd70      	pop	{r4, r5, r6, pc}
 8010914:	220c      	movs	r2, #12
 8010916:	6002      	str	r2, [r0, #0]
 8010918:	e7f9      	b.n	801090e <_calloc_r+0x12>
 801091a:	462a      	mov	r2, r5
 801091c:	4621      	mov	r1, r4
 801091e:	f7fd fd1f 	bl	800e360 <memset>
 8010922:	e7f5      	b.n	8010910 <_calloc_r+0x14>

08010924 <_realloc_r>:
 8010924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010928:	4680      	mov	r8, r0
 801092a:	4615      	mov	r5, r2
 801092c:	460c      	mov	r4, r1
 801092e:	b921      	cbnz	r1, 801093a <_realloc_r+0x16>
 8010930:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010934:	4611      	mov	r1, r2
 8010936:	f7fe bfbd 	b.w	800f8b4 <_malloc_r>
 801093a:	b92a      	cbnz	r2, 8010948 <_realloc_r+0x24>
 801093c:	f7fe fc0c 	bl	800f158 <_free_r>
 8010940:	2400      	movs	r4, #0
 8010942:	4620      	mov	r0, r4
 8010944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010948:	f000 f833 	bl	80109b2 <_malloc_usable_size_r>
 801094c:	4285      	cmp	r5, r0
 801094e:	4606      	mov	r6, r0
 8010950:	d802      	bhi.n	8010958 <_realloc_r+0x34>
 8010952:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010956:	d8f4      	bhi.n	8010942 <_realloc_r+0x1e>
 8010958:	4629      	mov	r1, r5
 801095a:	4640      	mov	r0, r8
 801095c:	f7fe ffaa 	bl	800f8b4 <_malloc_r>
 8010960:	4607      	mov	r7, r0
 8010962:	2800      	cmp	r0, #0
 8010964:	d0ec      	beq.n	8010940 <_realloc_r+0x1c>
 8010966:	42b5      	cmp	r5, r6
 8010968:	462a      	mov	r2, r5
 801096a:	4621      	mov	r1, r4
 801096c:	bf28      	it	cs
 801096e:	4632      	movcs	r2, r6
 8010970:	f7fd fd87 	bl	800e482 <memcpy>
 8010974:	4621      	mov	r1, r4
 8010976:	4640      	mov	r0, r8
 8010978:	f7fe fbee 	bl	800f158 <_free_r>
 801097c:	463c      	mov	r4, r7
 801097e:	e7e0      	b.n	8010942 <_realloc_r+0x1e>

08010980 <fiprintf>:
 8010980:	b40e      	push	{r1, r2, r3}
 8010982:	b503      	push	{r0, r1, lr}
 8010984:	4601      	mov	r1, r0
 8010986:	ab03      	add	r3, sp, #12
 8010988:	4805      	ldr	r0, [pc, #20]	@ (80109a0 <fiprintf+0x20>)
 801098a:	f853 2b04 	ldr.w	r2, [r3], #4
 801098e:	6800      	ldr	r0, [r0, #0]
 8010990:	9301      	str	r3, [sp, #4]
 8010992:	f000 f83f 	bl	8010a14 <_vfiprintf_r>
 8010996:	b002      	add	sp, #8
 8010998:	f85d eb04 	ldr.w	lr, [sp], #4
 801099c:	b003      	add	sp, #12
 801099e:	4770      	bx	lr
 80109a0:	2000022c 	.word	0x2000022c

080109a4 <abort>:
 80109a4:	b508      	push	{r3, lr}
 80109a6:	2006      	movs	r0, #6
 80109a8:	f000 fa08 	bl	8010dbc <raise>
 80109ac:	2001      	movs	r0, #1
 80109ae:	f7f1 f8eb 	bl	8001b88 <_exit>

080109b2 <_malloc_usable_size_r>:
 80109b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109b6:	1f18      	subs	r0, r3, #4
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	bfbc      	itt	lt
 80109bc:	580b      	ldrlt	r3, [r1, r0]
 80109be:	18c0      	addlt	r0, r0, r3
 80109c0:	4770      	bx	lr

080109c2 <__sfputc_r>:
 80109c2:	6893      	ldr	r3, [r2, #8]
 80109c4:	3b01      	subs	r3, #1
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	b410      	push	{r4}
 80109ca:	6093      	str	r3, [r2, #8]
 80109cc:	da08      	bge.n	80109e0 <__sfputc_r+0x1e>
 80109ce:	6994      	ldr	r4, [r2, #24]
 80109d0:	42a3      	cmp	r3, r4
 80109d2:	db01      	blt.n	80109d8 <__sfputc_r+0x16>
 80109d4:	290a      	cmp	r1, #10
 80109d6:	d103      	bne.n	80109e0 <__sfputc_r+0x1e>
 80109d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109dc:	f000 b932 	b.w	8010c44 <__swbuf_r>
 80109e0:	6813      	ldr	r3, [r2, #0]
 80109e2:	1c58      	adds	r0, r3, #1
 80109e4:	6010      	str	r0, [r2, #0]
 80109e6:	7019      	strb	r1, [r3, #0]
 80109e8:	4608      	mov	r0, r1
 80109ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109ee:	4770      	bx	lr

080109f0 <__sfputs_r>:
 80109f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109f2:	4606      	mov	r6, r0
 80109f4:	460f      	mov	r7, r1
 80109f6:	4614      	mov	r4, r2
 80109f8:	18d5      	adds	r5, r2, r3
 80109fa:	42ac      	cmp	r4, r5
 80109fc:	d101      	bne.n	8010a02 <__sfputs_r+0x12>
 80109fe:	2000      	movs	r0, #0
 8010a00:	e007      	b.n	8010a12 <__sfputs_r+0x22>
 8010a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a06:	463a      	mov	r2, r7
 8010a08:	4630      	mov	r0, r6
 8010a0a:	f7ff ffda 	bl	80109c2 <__sfputc_r>
 8010a0e:	1c43      	adds	r3, r0, #1
 8010a10:	d1f3      	bne.n	80109fa <__sfputs_r+0xa>
 8010a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010a14 <_vfiprintf_r>:
 8010a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a18:	460d      	mov	r5, r1
 8010a1a:	b09d      	sub	sp, #116	@ 0x74
 8010a1c:	4614      	mov	r4, r2
 8010a1e:	4698      	mov	r8, r3
 8010a20:	4606      	mov	r6, r0
 8010a22:	b118      	cbz	r0, 8010a2c <_vfiprintf_r+0x18>
 8010a24:	6a03      	ldr	r3, [r0, #32]
 8010a26:	b90b      	cbnz	r3, 8010a2c <_vfiprintf_r+0x18>
 8010a28:	f7fd fbe0 	bl	800e1ec <__sinit>
 8010a2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010a2e:	07d9      	lsls	r1, r3, #31
 8010a30:	d405      	bmi.n	8010a3e <_vfiprintf_r+0x2a>
 8010a32:	89ab      	ldrh	r3, [r5, #12]
 8010a34:	059a      	lsls	r2, r3, #22
 8010a36:	d402      	bmi.n	8010a3e <_vfiprintf_r+0x2a>
 8010a38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010a3a:	f7fd fd20 	bl	800e47e <__retarget_lock_acquire_recursive>
 8010a3e:	89ab      	ldrh	r3, [r5, #12]
 8010a40:	071b      	lsls	r3, r3, #28
 8010a42:	d501      	bpl.n	8010a48 <_vfiprintf_r+0x34>
 8010a44:	692b      	ldr	r3, [r5, #16]
 8010a46:	b99b      	cbnz	r3, 8010a70 <_vfiprintf_r+0x5c>
 8010a48:	4629      	mov	r1, r5
 8010a4a:	4630      	mov	r0, r6
 8010a4c:	f000 f938 	bl	8010cc0 <__swsetup_r>
 8010a50:	b170      	cbz	r0, 8010a70 <_vfiprintf_r+0x5c>
 8010a52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010a54:	07dc      	lsls	r4, r3, #31
 8010a56:	d504      	bpl.n	8010a62 <_vfiprintf_r+0x4e>
 8010a58:	f04f 30ff 	mov.w	r0, #4294967295
 8010a5c:	b01d      	add	sp, #116	@ 0x74
 8010a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a62:	89ab      	ldrh	r3, [r5, #12]
 8010a64:	0598      	lsls	r0, r3, #22
 8010a66:	d4f7      	bmi.n	8010a58 <_vfiprintf_r+0x44>
 8010a68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010a6a:	f7fd fd09 	bl	800e480 <__retarget_lock_release_recursive>
 8010a6e:	e7f3      	b.n	8010a58 <_vfiprintf_r+0x44>
 8010a70:	2300      	movs	r3, #0
 8010a72:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a74:	2320      	movs	r3, #32
 8010a76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010a7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a7e:	2330      	movs	r3, #48	@ 0x30
 8010a80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010c30 <_vfiprintf_r+0x21c>
 8010a84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010a88:	f04f 0901 	mov.w	r9, #1
 8010a8c:	4623      	mov	r3, r4
 8010a8e:	469a      	mov	sl, r3
 8010a90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a94:	b10a      	cbz	r2, 8010a9a <_vfiprintf_r+0x86>
 8010a96:	2a25      	cmp	r2, #37	@ 0x25
 8010a98:	d1f9      	bne.n	8010a8e <_vfiprintf_r+0x7a>
 8010a9a:	ebba 0b04 	subs.w	fp, sl, r4
 8010a9e:	d00b      	beq.n	8010ab8 <_vfiprintf_r+0xa4>
 8010aa0:	465b      	mov	r3, fp
 8010aa2:	4622      	mov	r2, r4
 8010aa4:	4629      	mov	r1, r5
 8010aa6:	4630      	mov	r0, r6
 8010aa8:	f7ff ffa2 	bl	80109f0 <__sfputs_r>
 8010aac:	3001      	adds	r0, #1
 8010aae:	f000 80a7 	beq.w	8010c00 <_vfiprintf_r+0x1ec>
 8010ab2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010ab4:	445a      	add	r2, fp
 8010ab6:	9209      	str	r2, [sp, #36]	@ 0x24
 8010ab8:	f89a 3000 	ldrb.w	r3, [sl]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	f000 809f 	beq.w	8010c00 <_vfiprintf_r+0x1ec>
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8010ac8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010acc:	f10a 0a01 	add.w	sl, sl, #1
 8010ad0:	9304      	str	r3, [sp, #16]
 8010ad2:	9307      	str	r3, [sp, #28]
 8010ad4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010ad8:	931a      	str	r3, [sp, #104]	@ 0x68
 8010ada:	4654      	mov	r4, sl
 8010adc:	2205      	movs	r2, #5
 8010ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ae2:	4853      	ldr	r0, [pc, #332]	@ (8010c30 <_vfiprintf_r+0x21c>)
 8010ae4:	f7ef fb9c 	bl	8000220 <memchr>
 8010ae8:	9a04      	ldr	r2, [sp, #16]
 8010aea:	b9d8      	cbnz	r0, 8010b24 <_vfiprintf_r+0x110>
 8010aec:	06d1      	lsls	r1, r2, #27
 8010aee:	bf44      	itt	mi
 8010af0:	2320      	movmi	r3, #32
 8010af2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010af6:	0713      	lsls	r3, r2, #28
 8010af8:	bf44      	itt	mi
 8010afa:	232b      	movmi	r3, #43	@ 0x2b
 8010afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b00:	f89a 3000 	ldrb.w	r3, [sl]
 8010b04:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b06:	d015      	beq.n	8010b34 <_vfiprintf_r+0x120>
 8010b08:	9a07      	ldr	r2, [sp, #28]
 8010b0a:	4654      	mov	r4, sl
 8010b0c:	2000      	movs	r0, #0
 8010b0e:	f04f 0c0a 	mov.w	ip, #10
 8010b12:	4621      	mov	r1, r4
 8010b14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b18:	3b30      	subs	r3, #48	@ 0x30
 8010b1a:	2b09      	cmp	r3, #9
 8010b1c:	d94b      	bls.n	8010bb6 <_vfiprintf_r+0x1a2>
 8010b1e:	b1b0      	cbz	r0, 8010b4e <_vfiprintf_r+0x13a>
 8010b20:	9207      	str	r2, [sp, #28]
 8010b22:	e014      	b.n	8010b4e <_vfiprintf_r+0x13a>
 8010b24:	eba0 0308 	sub.w	r3, r0, r8
 8010b28:	fa09 f303 	lsl.w	r3, r9, r3
 8010b2c:	4313      	orrs	r3, r2
 8010b2e:	9304      	str	r3, [sp, #16]
 8010b30:	46a2      	mov	sl, r4
 8010b32:	e7d2      	b.n	8010ada <_vfiprintf_r+0xc6>
 8010b34:	9b03      	ldr	r3, [sp, #12]
 8010b36:	1d19      	adds	r1, r3, #4
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	9103      	str	r1, [sp, #12]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	bfbb      	ittet	lt
 8010b40:	425b      	neglt	r3, r3
 8010b42:	f042 0202 	orrlt.w	r2, r2, #2
 8010b46:	9307      	strge	r3, [sp, #28]
 8010b48:	9307      	strlt	r3, [sp, #28]
 8010b4a:	bfb8      	it	lt
 8010b4c:	9204      	strlt	r2, [sp, #16]
 8010b4e:	7823      	ldrb	r3, [r4, #0]
 8010b50:	2b2e      	cmp	r3, #46	@ 0x2e
 8010b52:	d10a      	bne.n	8010b6a <_vfiprintf_r+0x156>
 8010b54:	7863      	ldrb	r3, [r4, #1]
 8010b56:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b58:	d132      	bne.n	8010bc0 <_vfiprintf_r+0x1ac>
 8010b5a:	9b03      	ldr	r3, [sp, #12]
 8010b5c:	1d1a      	adds	r2, r3, #4
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	9203      	str	r2, [sp, #12]
 8010b62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010b66:	3402      	adds	r4, #2
 8010b68:	9305      	str	r3, [sp, #20]
 8010b6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010c40 <_vfiprintf_r+0x22c>
 8010b6e:	7821      	ldrb	r1, [r4, #0]
 8010b70:	2203      	movs	r2, #3
 8010b72:	4650      	mov	r0, sl
 8010b74:	f7ef fb54 	bl	8000220 <memchr>
 8010b78:	b138      	cbz	r0, 8010b8a <_vfiprintf_r+0x176>
 8010b7a:	9b04      	ldr	r3, [sp, #16]
 8010b7c:	eba0 000a 	sub.w	r0, r0, sl
 8010b80:	2240      	movs	r2, #64	@ 0x40
 8010b82:	4082      	lsls	r2, r0
 8010b84:	4313      	orrs	r3, r2
 8010b86:	3401      	adds	r4, #1
 8010b88:	9304      	str	r3, [sp, #16]
 8010b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b8e:	4829      	ldr	r0, [pc, #164]	@ (8010c34 <_vfiprintf_r+0x220>)
 8010b90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010b94:	2206      	movs	r2, #6
 8010b96:	f7ef fb43 	bl	8000220 <memchr>
 8010b9a:	2800      	cmp	r0, #0
 8010b9c:	d03f      	beq.n	8010c1e <_vfiprintf_r+0x20a>
 8010b9e:	4b26      	ldr	r3, [pc, #152]	@ (8010c38 <_vfiprintf_r+0x224>)
 8010ba0:	bb1b      	cbnz	r3, 8010bea <_vfiprintf_r+0x1d6>
 8010ba2:	9b03      	ldr	r3, [sp, #12]
 8010ba4:	3307      	adds	r3, #7
 8010ba6:	f023 0307 	bic.w	r3, r3, #7
 8010baa:	3308      	adds	r3, #8
 8010bac:	9303      	str	r3, [sp, #12]
 8010bae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bb0:	443b      	add	r3, r7
 8010bb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8010bb4:	e76a      	b.n	8010a8c <_vfiprintf_r+0x78>
 8010bb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8010bba:	460c      	mov	r4, r1
 8010bbc:	2001      	movs	r0, #1
 8010bbe:	e7a8      	b.n	8010b12 <_vfiprintf_r+0xfe>
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	3401      	adds	r4, #1
 8010bc4:	9305      	str	r3, [sp, #20]
 8010bc6:	4619      	mov	r1, r3
 8010bc8:	f04f 0c0a 	mov.w	ip, #10
 8010bcc:	4620      	mov	r0, r4
 8010bce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010bd2:	3a30      	subs	r2, #48	@ 0x30
 8010bd4:	2a09      	cmp	r2, #9
 8010bd6:	d903      	bls.n	8010be0 <_vfiprintf_r+0x1cc>
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d0c6      	beq.n	8010b6a <_vfiprintf_r+0x156>
 8010bdc:	9105      	str	r1, [sp, #20]
 8010bde:	e7c4      	b.n	8010b6a <_vfiprintf_r+0x156>
 8010be0:	fb0c 2101 	mla	r1, ip, r1, r2
 8010be4:	4604      	mov	r4, r0
 8010be6:	2301      	movs	r3, #1
 8010be8:	e7f0      	b.n	8010bcc <_vfiprintf_r+0x1b8>
 8010bea:	ab03      	add	r3, sp, #12
 8010bec:	9300      	str	r3, [sp, #0]
 8010bee:	462a      	mov	r2, r5
 8010bf0:	4b12      	ldr	r3, [pc, #72]	@ (8010c3c <_vfiprintf_r+0x228>)
 8010bf2:	a904      	add	r1, sp, #16
 8010bf4:	4630      	mov	r0, r6
 8010bf6:	f7fc fca1 	bl	800d53c <_printf_float>
 8010bfa:	4607      	mov	r7, r0
 8010bfc:	1c78      	adds	r0, r7, #1
 8010bfe:	d1d6      	bne.n	8010bae <_vfiprintf_r+0x19a>
 8010c00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010c02:	07d9      	lsls	r1, r3, #31
 8010c04:	d405      	bmi.n	8010c12 <_vfiprintf_r+0x1fe>
 8010c06:	89ab      	ldrh	r3, [r5, #12]
 8010c08:	059a      	lsls	r2, r3, #22
 8010c0a:	d402      	bmi.n	8010c12 <_vfiprintf_r+0x1fe>
 8010c0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010c0e:	f7fd fc37 	bl	800e480 <__retarget_lock_release_recursive>
 8010c12:	89ab      	ldrh	r3, [r5, #12]
 8010c14:	065b      	lsls	r3, r3, #25
 8010c16:	f53f af1f 	bmi.w	8010a58 <_vfiprintf_r+0x44>
 8010c1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010c1c:	e71e      	b.n	8010a5c <_vfiprintf_r+0x48>
 8010c1e:	ab03      	add	r3, sp, #12
 8010c20:	9300      	str	r3, [sp, #0]
 8010c22:	462a      	mov	r2, r5
 8010c24:	4b05      	ldr	r3, [pc, #20]	@ (8010c3c <_vfiprintf_r+0x228>)
 8010c26:	a904      	add	r1, sp, #16
 8010c28:	4630      	mov	r0, r6
 8010c2a:	f7fc ff1f 	bl	800da6c <_printf_i>
 8010c2e:	e7e4      	b.n	8010bfa <_vfiprintf_r+0x1e6>
 8010c30:	080116d1 	.word	0x080116d1
 8010c34:	080116db 	.word	0x080116db
 8010c38:	0800d53d 	.word	0x0800d53d
 8010c3c:	080109f1 	.word	0x080109f1
 8010c40:	080116d7 	.word	0x080116d7

08010c44 <__swbuf_r>:
 8010c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c46:	460e      	mov	r6, r1
 8010c48:	4614      	mov	r4, r2
 8010c4a:	4605      	mov	r5, r0
 8010c4c:	b118      	cbz	r0, 8010c56 <__swbuf_r+0x12>
 8010c4e:	6a03      	ldr	r3, [r0, #32]
 8010c50:	b90b      	cbnz	r3, 8010c56 <__swbuf_r+0x12>
 8010c52:	f7fd facb 	bl	800e1ec <__sinit>
 8010c56:	69a3      	ldr	r3, [r4, #24]
 8010c58:	60a3      	str	r3, [r4, #8]
 8010c5a:	89a3      	ldrh	r3, [r4, #12]
 8010c5c:	071a      	lsls	r2, r3, #28
 8010c5e:	d501      	bpl.n	8010c64 <__swbuf_r+0x20>
 8010c60:	6923      	ldr	r3, [r4, #16]
 8010c62:	b943      	cbnz	r3, 8010c76 <__swbuf_r+0x32>
 8010c64:	4621      	mov	r1, r4
 8010c66:	4628      	mov	r0, r5
 8010c68:	f000 f82a 	bl	8010cc0 <__swsetup_r>
 8010c6c:	b118      	cbz	r0, 8010c76 <__swbuf_r+0x32>
 8010c6e:	f04f 37ff 	mov.w	r7, #4294967295
 8010c72:	4638      	mov	r0, r7
 8010c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c76:	6823      	ldr	r3, [r4, #0]
 8010c78:	6922      	ldr	r2, [r4, #16]
 8010c7a:	1a98      	subs	r0, r3, r2
 8010c7c:	6963      	ldr	r3, [r4, #20]
 8010c7e:	b2f6      	uxtb	r6, r6
 8010c80:	4283      	cmp	r3, r0
 8010c82:	4637      	mov	r7, r6
 8010c84:	dc05      	bgt.n	8010c92 <__swbuf_r+0x4e>
 8010c86:	4621      	mov	r1, r4
 8010c88:	4628      	mov	r0, r5
 8010c8a:	f7ff fdc7 	bl	801081c <_fflush_r>
 8010c8e:	2800      	cmp	r0, #0
 8010c90:	d1ed      	bne.n	8010c6e <__swbuf_r+0x2a>
 8010c92:	68a3      	ldr	r3, [r4, #8]
 8010c94:	3b01      	subs	r3, #1
 8010c96:	60a3      	str	r3, [r4, #8]
 8010c98:	6823      	ldr	r3, [r4, #0]
 8010c9a:	1c5a      	adds	r2, r3, #1
 8010c9c:	6022      	str	r2, [r4, #0]
 8010c9e:	701e      	strb	r6, [r3, #0]
 8010ca0:	6962      	ldr	r2, [r4, #20]
 8010ca2:	1c43      	adds	r3, r0, #1
 8010ca4:	429a      	cmp	r2, r3
 8010ca6:	d004      	beq.n	8010cb2 <__swbuf_r+0x6e>
 8010ca8:	89a3      	ldrh	r3, [r4, #12]
 8010caa:	07db      	lsls	r3, r3, #31
 8010cac:	d5e1      	bpl.n	8010c72 <__swbuf_r+0x2e>
 8010cae:	2e0a      	cmp	r6, #10
 8010cb0:	d1df      	bne.n	8010c72 <__swbuf_r+0x2e>
 8010cb2:	4621      	mov	r1, r4
 8010cb4:	4628      	mov	r0, r5
 8010cb6:	f7ff fdb1 	bl	801081c <_fflush_r>
 8010cba:	2800      	cmp	r0, #0
 8010cbc:	d0d9      	beq.n	8010c72 <__swbuf_r+0x2e>
 8010cbe:	e7d6      	b.n	8010c6e <__swbuf_r+0x2a>

08010cc0 <__swsetup_r>:
 8010cc0:	b538      	push	{r3, r4, r5, lr}
 8010cc2:	4b29      	ldr	r3, [pc, #164]	@ (8010d68 <__swsetup_r+0xa8>)
 8010cc4:	4605      	mov	r5, r0
 8010cc6:	6818      	ldr	r0, [r3, #0]
 8010cc8:	460c      	mov	r4, r1
 8010cca:	b118      	cbz	r0, 8010cd4 <__swsetup_r+0x14>
 8010ccc:	6a03      	ldr	r3, [r0, #32]
 8010cce:	b90b      	cbnz	r3, 8010cd4 <__swsetup_r+0x14>
 8010cd0:	f7fd fa8c 	bl	800e1ec <__sinit>
 8010cd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cd8:	0719      	lsls	r1, r3, #28
 8010cda:	d422      	bmi.n	8010d22 <__swsetup_r+0x62>
 8010cdc:	06da      	lsls	r2, r3, #27
 8010cde:	d407      	bmi.n	8010cf0 <__swsetup_r+0x30>
 8010ce0:	2209      	movs	r2, #9
 8010ce2:	602a      	str	r2, [r5, #0]
 8010ce4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ce8:	81a3      	strh	r3, [r4, #12]
 8010cea:	f04f 30ff 	mov.w	r0, #4294967295
 8010cee:	e033      	b.n	8010d58 <__swsetup_r+0x98>
 8010cf0:	0758      	lsls	r0, r3, #29
 8010cf2:	d512      	bpl.n	8010d1a <__swsetup_r+0x5a>
 8010cf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010cf6:	b141      	cbz	r1, 8010d0a <__swsetup_r+0x4a>
 8010cf8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010cfc:	4299      	cmp	r1, r3
 8010cfe:	d002      	beq.n	8010d06 <__swsetup_r+0x46>
 8010d00:	4628      	mov	r0, r5
 8010d02:	f7fe fa29 	bl	800f158 <_free_r>
 8010d06:	2300      	movs	r3, #0
 8010d08:	6363      	str	r3, [r4, #52]	@ 0x34
 8010d0a:	89a3      	ldrh	r3, [r4, #12]
 8010d0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010d10:	81a3      	strh	r3, [r4, #12]
 8010d12:	2300      	movs	r3, #0
 8010d14:	6063      	str	r3, [r4, #4]
 8010d16:	6923      	ldr	r3, [r4, #16]
 8010d18:	6023      	str	r3, [r4, #0]
 8010d1a:	89a3      	ldrh	r3, [r4, #12]
 8010d1c:	f043 0308 	orr.w	r3, r3, #8
 8010d20:	81a3      	strh	r3, [r4, #12]
 8010d22:	6923      	ldr	r3, [r4, #16]
 8010d24:	b94b      	cbnz	r3, 8010d3a <__swsetup_r+0x7a>
 8010d26:	89a3      	ldrh	r3, [r4, #12]
 8010d28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010d30:	d003      	beq.n	8010d3a <__swsetup_r+0x7a>
 8010d32:	4621      	mov	r1, r4
 8010d34:	4628      	mov	r0, r5
 8010d36:	f000 f883 	bl	8010e40 <__smakebuf_r>
 8010d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d3e:	f013 0201 	ands.w	r2, r3, #1
 8010d42:	d00a      	beq.n	8010d5a <__swsetup_r+0x9a>
 8010d44:	2200      	movs	r2, #0
 8010d46:	60a2      	str	r2, [r4, #8]
 8010d48:	6962      	ldr	r2, [r4, #20]
 8010d4a:	4252      	negs	r2, r2
 8010d4c:	61a2      	str	r2, [r4, #24]
 8010d4e:	6922      	ldr	r2, [r4, #16]
 8010d50:	b942      	cbnz	r2, 8010d64 <__swsetup_r+0xa4>
 8010d52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010d56:	d1c5      	bne.n	8010ce4 <__swsetup_r+0x24>
 8010d58:	bd38      	pop	{r3, r4, r5, pc}
 8010d5a:	0799      	lsls	r1, r3, #30
 8010d5c:	bf58      	it	pl
 8010d5e:	6962      	ldrpl	r2, [r4, #20]
 8010d60:	60a2      	str	r2, [r4, #8]
 8010d62:	e7f4      	b.n	8010d4e <__swsetup_r+0x8e>
 8010d64:	2000      	movs	r0, #0
 8010d66:	e7f7      	b.n	8010d58 <__swsetup_r+0x98>
 8010d68:	2000022c 	.word	0x2000022c

08010d6c <_raise_r>:
 8010d6c:	291f      	cmp	r1, #31
 8010d6e:	b538      	push	{r3, r4, r5, lr}
 8010d70:	4605      	mov	r5, r0
 8010d72:	460c      	mov	r4, r1
 8010d74:	d904      	bls.n	8010d80 <_raise_r+0x14>
 8010d76:	2316      	movs	r3, #22
 8010d78:	6003      	str	r3, [r0, #0]
 8010d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8010d7e:	bd38      	pop	{r3, r4, r5, pc}
 8010d80:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010d82:	b112      	cbz	r2, 8010d8a <_raise_r+0x1e>
 8010d84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d88:	b94b      	cbnz	r3, 8010d9e <_raise_r+0x32>
 8010d8a:	4628      	mov	r0, r5
 8010d8c:	f000 f830 	bl	8010df0 <_getpid_r>
 8010d90:	4622      	mov	r2, r4
 8010d92:	4601      	mov	r1, r0
 8010d94:	4628      	mov	r0, r5
 8010d96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d9a:	f000 b817 	b.w	8010dcc <_kill_r>
 8010d9e:	2b01      	cmp	r3, #1
 8010da0:	d00a      	beq.n	8010db8 <_raise_r+0x4c>
 8010da2:	1c59      	adds	r1, r3, #1
 8010da4:	d103      	bne.n	8010dae <_raise_r+0x42>
 8010da6:	2316      	movs	r3, #22
 8010da8:	6003      	str	r3, [r0, #0]
 8010daa:	2001      	movs	r0, #1
 8010dac:	e7e7      	b.n	8010d7e <_raise_r+0x12>
 8010dae:	2100      	movs	r1, #0
 8010db0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010db4:	4620      	mov	r0, r4
 8010db6:	4798      	blx	r3
 8010db8:	2000      	movs	r0, #0
 8010dba:	e7e0      	b.n	8010d7e <_raise_r+0x12>

08010dbc <raise>:
 8010dbc:	4b02      	ldr	r3, [pc, #8]	@ (8010dc8 <raise+0xc>)
 8010dbe:	4601      	mov	r1, r0
 8010dc0:	6818      	ldr	r0, [r3, #0]
 8010dc2:	f7ff bfd3 	b.w	8010d6c <_raise_r>
 8010dc6:	bf00      	nop
 8010dc8:	2000022c 	.word	0x2000022c

08010dcc <_kill_r>:
 8010dcc:	b538      	push	{r3, r4, r5, lr}
 8010dce:	4d07      	ldr	r5, [pc, #28]	@ (8010dec <_kill_r+0x20>)
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	4604      	mov	r4, r0
 8010dd4:	4608      	mov	r0, r1
 8010dd6:	4611      	mov	r1, r2
 8010dd8:	602b      	str	r3, [r5, #0]
 8010dda:	f7f0 fec5 	bl	8001b68 <_kill>
 8010dde:	1c43      	adds	r3, r0, #1
 8010de0:	d102      	bne.n	8010de8 <_kill_r+0x1c>
 8010de2:	682b      	ldr	r3, [r5, #0]
 8010de4:	b103      	cbz	r3, 8010de8 <_kill_r+0x1c>
 8010de6:	6023      	str	r3, [r4, #0]
 8010de8:	bd38      	pop	{r3, r4, r5, pc}
 8010dea:	bf00      	nop
 8010dec:	20000ac4 	.word	0x20000ac4

08010df0 <_getpid_r>:
 8010df0:	f7f0 beb2 	b.w	8001b58 <_getpid>

08010df4 <__swhatbuf_r>:
 8010df4:	b570      	push	{r4, r5, r6, lr}
 8010df6:	460c      	mov	r4, r1
 8010df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dfc:	2900      	cmp	r1, #0
 8010dfe:	b096      	sub	sp, #88	@ 0x58
 8010e00:	4615      	mov	r5, r2
 8010e02:	461e      	mov	r6, r3
 8010e04:	da0d      	bge.n	8010e22 <__swhatbuf_r+0x2e>
 8010e06:	89a3      	ldrh	r3, [r4, #12]
 8010e08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010e0c:	f04f 0100 	mov.w	r1, #0
 8010e10:	bf14      	ite	ne
 8010e12:	2340      	movne	r3, #64	@ 0x40
 8010e14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010e18:	2000      	movs	r0, #0
 8010e1a:	6031      	str	r1, [r6, #0]
 8010e1c:	602b      	str	r3, [r5, #0]
 8010e1e:	b016      	add	sp, #88	@ 0x58
 8010e20:	bd70      	pop	{r4, r5, r6, pc}
 8010e22:	466a      	mov	r2, sp
 8010e24:	f000 f848 	bl	8010eb8 <_fstat_r>
 8010e28:	2800      	cmp	r0, #0
 8010e2a:	dbec      	blt.n	8010e06 <__swhatbuf_r+0x12>
 8010e2c:	9901      	ldr	r1, [sp, #4]
 8010e2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010e32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010e36:	4259      	negs	r1, r3
 8010e38:	4159      	adcs	r1, r3
 8010e3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e3e:	e7eb      	b.n	8010e18 <__swhatbuf_r+0x24>

08010e40 <__smakebuf_r>:
 8010e40:	898b      	ldrh	r3, [r1, #12]
 8010e42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e44:	079d      	lsls	r5, r3, #30
 8010e46:	4606      	mov	r6, r0
 8010e48:	460c      	mov	r4, r1
 8010e4a:	d507      	bpl.n	8010e5c <__smakebuf_r+0x1c>
 8010e4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010e50:	6023      	str	r3, [r4, #0]
 8010e52:	6123      	str	r3, [r4, #16]
 8010e54:	2301      	movs	r3, #1
 8010e56:	6163      	str	r3, [r4, #20]
 8010e58:	b003      	add	sp, #12
 8010e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e5c:	ab01      	add	r3, sp, #4
 8010e5e:	466a      	mov	r2, sp
 8010e60:	f7ff ffc8 	bl	8010df4 <__swhatbuf_r>
 8010e64:	9f00      	ldr	r7, [sp, #0]
 8010e66:	4605      	mov	r5, r0
 8010e68:	4639      	mov	r1, r7
 8010e6a:	4630      	mov	r0, r6
 8010e6c:	f7fe fd22 	bl	800f8b4 <_malloc_r>
 8010e70:	b948      	cbnz	r0, 8010e86 <__smakebuf_r+0x46>
 8010e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e76:	059a      	lsls	r2, r3, #22
 8010e78:	d4ee      	bmi.n	8010e58 <__smakebuf_r+0x18>
 8010e7a:	f023 0303 	bic.w	r3, r3, #3
 8010e7e:	f043 0302 	orr.w	r3, r3, #2
 8010e82:	81a3      	strh	r3, [r4, #12]
 8010e84:	e7e2      	b.n	8010e4c <__smakebuf_r+0xc>
 8010e86:	89a3      	ldrh	r3, [r4, #12]
 8010e88:	6020      	str	r0, [r4, #0]
 8010e8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e8e:	81a3      	strh	r3, [r4, #12]
 8010e90:	9b01      	ldr	r3, [sp, #4]
 8010e92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010e96:	b15b      	cbz	r3, 8010eb0 <__smakebuf_r+0x70>
 8010e98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e9c:	4630      	mov	r0, r6
 8010e9e:	f000 f81d 	bl	8010edc <_isatty_r>
 8010ea2:	b128      	cbz	r0, 8010eb0 <__smakebuf_r+0x70>
 8010ea4:	89a3      	ldrh	r3, [r4, #12]
 8010ea6:	f023 0303 	bic.w	r3, r3, #3
 8010eaa:	f043 0301 	orr.w	r3, r3, #1
 8010eae:	81a3      	strh	r3, [r4, #12]
 8010eb0:	89a3      	ldrh	r3, [r4, #12]
 8010eb2:	431d      	orrs	r5, r3
 8010eb4:	81a5      	strh	r5, [r4, #12]
 8010eb6:	e7cf      	b.n	8010e58 <__smakebuf_r+0x18>

08010eb8 <_fstat_r>:
 8010eb8:	b538      	push	{r3, r4, r5, lr}
 8010eba:	4d07      	ldr	r5, [pc, #28]	@ (8010ed8 <_fstat_r+0x20>)
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	4604      	mov	r4, r0
 8010ec0:	4608      	mov	r0, r1
 8010ec2:	4611      	mov	r1, r2
 8010ec4:	602b      	str	r3, [r5, #0]
 8010ec6:	f7f0 feaf 	bl	8001c28 <_fstat>
 8010eca:	1c43      	adds	r3, r0, #1
 8010ecc:	d102      	bne.n	8010ed4 <_fstat_r+0x1c>
 8010ece:	682b      	ldr	r3, [r5, #0]
 8010ed0:	b103      	cbz	r3, 8010ed4 <_fstat_r+0x1c>
 8010ed2:	6023      	str	r3, [r4, #0]
 8010ed4:	bd38      	pop	{r3, r4, r5, pc}
 8010ed6:	bf00      	nop
 8010ed8:	20000ac4 	.word	0x20000ac4

08010edc <_isatty_r>:
 8010edc:	b538      	push	{r3, r4, r5, lr}
 8010ede:	4d06      	ldr	r5, [pc, #24]	@ (8010ef8 <_isatty_r+0x1c>)
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	4604      	mov	r4, r0
 8010ee4:	4608      	mov	r0, r1
 8010ee6:	602b      	str	r3, [r5, #0]
 8010ee8:	f7f0 feae 	bl	8001c48 <_isatty>
 8010eec:	1c43      	adds	r3, r0, #1
 8010eee:	d102      	bne.n	8010ef6 <_isatty_r+0x1a>
 8010ef0:	682b      	ldr	r3, [r5, #0]
 8010ef2:	b103      	cbz	r3, 8010ef6 <_isatty_r+0x1a>
 8010ef4:	6023      	str	r3, [r4, #0]
 8010ef6:	bd38      	pop	{r3, r4, r5, pc}
 8010ef8:	20000ac4 	.word	0x20000ac4

08010efc <fmod>:
 8010efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010efe:	ed2d 8b02 	vpush	{d8}
 8010f02:	ec57 6b10 	vmov	r6, r7, d0
 8010f06:	ec55 4b11 	vmov	r4, r5, d1
 8010f0a:	f000 f825 	bl	8010f58 <__ieee754_fmod>
 8010f0e:	4622      	mov	r2, r4
 8010f10:	462b      	mov	r3, r5
 8010f12:	4630      	mov	r0, r6
 8010f14:	4639      	mov	r1, r7
 8010f16:	eeb0 8a40 	vmov.f32	s16, s0
 8010f1a:	eef0 8a60 	vmov.f32	s17, s1
 8010f1e:	f7ef fe2d 	bl	8000b7c <__aeabi_dcmpun>
 8010f22:	b990      	cbnz	r0, 8010f4a <fmod+0x4e>
 8010f24:	2200      	movs	r2, #0
 8010f26:	2300      	movs	r3, #0
 8010f28:	4620      	mov	r0, r4
 8010f2a:	4629      	mov	r1, r5
 8010f2c:	f7ef fdf4 	bl	8000b18 <__aeabi_dcmpeq>
 8010f30:	b158      	cbz	r0, 8010f4a <fmod+0x4e>
 8010f32:	f7fd fa79 	bl	800e428 <__errno>
 8010f36:	2321      	movs	r3, #33	@ 0x21
 8010f38:	6003      	str	r3, [r0, #0]
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	4610      	mov	r0, r2
 8010f40:	4619      	mov	r1, r3
 8010f42:	f7ef fcab 	bl	800089c <__aeabi_ddiv>
 8010f46:	ec41 0b18 	vmov	d8, r0, r1
 8010f4a:	eeb0 0a48 	vmov.f32	s0, s16
 8010f4e:	eef0 0a68 	vmov.f32	s1, s17
 8010f52:	ecbd 8b02 	vpop	{d8}
 8010f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010f58 <__ieee754_fmod>:
 8010f58:	ec53 2b11 	vmov	r2, r3, d1
 8010f5c:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 8010f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f64:	ea52 040c 	orrs.w	r4, r2, ip
 8010f68:	ec51 0b10 	vmov	r0, r1, d0
 8010f6c:	461e      	mov	r6, r3
 8010f6e:	4617      	mov	r7, r2
 8010f70:	4696      	mov	lr, r2
 8010f72:	d00c      	beq.n	8010f8e <__ieee754_fmod+0x36>
 8010f74:	4c77      	ldr	r4, [pc, #476]	@ (8011154 <__ieee754_fmod+0x1fc>)
 8010f76:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8010f7a:	45a0      	cmp	r8, r4
 8010f7c:	4689      	mov	r9, r1
 8010f7e:	d806      	bhi.n	8010f8e <__ieee754_fmod+0x36>
 8010f80:	4254      	negs	r4, r2
 8010f82:	4d75      	ldr	r5, [pc, #468]	@ (8011158 <__ieee754_fmod+0x200>)
 8010f84:	4314      	orrs	r4, r2
 8010f86:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8010f8a:	42ac      	cmp	r4, r5
 8010f8c:	d909      	bls.n	8010fa2 <__ieee754_fmod+0x4a>
 8010f8e:	f7ef fb5b 	bl	8000648 <__aeabi_dmul>
 8010f92:	4602      	mov	r2, r0
 8010f94:	460b      	mov	r3, r1
 8010f96:	f7ef fc81 	bl	800089c <__aeabi_ddiv>
 8010f9a:	ec41 0b10 	vmov	d0, r0, r1
 8010f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fa2:	45e0      	cmp	r8, ip
 8010fa4:	4682      	mov	sl, r0
 8010fa6:	4604      	mov	r4, r0
 8010fa8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8010fac:	dc09      	bgt.n	8010fc2 <__ieee754_fmod+0x6a>
 8010fae:	dbf4      	blt.n	8010f9a <__ieee754_fmod+0x42>
 8010fb0:	4282      	cmp	r2, r0
 8010fb2:	d8f2      	bhi.n	8010f9a <__ieee754_fmod+0x42>
 8010fb4:	d105      	bne.n	8010fc2 <__ieee754_fmod+0x6a>
 8010fb6:	4b69      	ldr	r3, [pc, #420]	@ (801115c <__ieee754_fmod+0x204>)
 8010fb8:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8010fbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010fc0:	e7eb      	b.n	8010f9a <__ieee754_fmod+0x42>
 8010fc2:	4a65      	ldr	r2, [pc, #404]	@ (8011158 <__ieee754_fmod+0x200>)
 8010fc4:	ea19 0f02 	tst.w	r9, r2
 8010fc8:	d148      	bne.n	801105c <__ieee754_fmod+0x104>
 8010fca:	f1b8 0f00 	cmp.w	r8, #0
 8010fce:	d13d      	bne.n	801104c <__ieee754_fmod+0xf4>
 8010fd0:	4963      	ldr	r1, [pc, #396]	@ (8011160 <__ieee754_fmod+0x208>)
 8010fd2:	4653      	mov	r3, sl
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	dc36      	bgt.n	8011046 <__ieee754_fmod+0xee>
 8010fd8:	4216      	tst	r6, r2
 8010fda:	d14f      	bne.n	801107c <__ieee754_fmod+0x124>
 8010fdc:	f1bc 0f00 	cmp.w	ip, #0
 8010fe0:	d144      	bne.n	801106c <__ieee754_fmod+0x114>
 8010fe2:	4a5f      	ldr	r2, [pc, #380]	@ (8011160 <__ieee754_fmod+0x208>)
 8010fe4:	463b      	mov	r3, r7
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	dc3d      	bgt.n	8011066 <__ieee754_fmod+0x10e>
 8010fea:	485e      	ldr	r0, [pc, #376]	@ (8011164 <__ieee754_fmod+0x20c>)
 8010fec:	4281      	cmp	r1, r0
 8010fee:	db4a      	blt.n	8011086 <__ieee754_fmod+0x12e>
 8010ff0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010ff4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010ff8:	485a      	ldr	r0, [pc, #360]	@ (8011164 <__ieee754_fmod+0x20c>)
 8010ffa:	4282      	cmp	r2, r0
 8010ffc:	db57      	blt.n	80110ae <__ieee754_fmod+0x156>
 8010ffe:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8011002:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8011006:	1a89      	subs	r1, r1, r2
 8011008:	1b98      	subs	r0, r3, r6
 801100a:	eba4 070e 	sub.w	r7, r4, lr
 801100e:	2900      	cmp	r1, #0
 8011010:	d162      	bne.n	80110d8 <__ieee754_fmod+0x180>
 8011012:	4574      	cmp	r4, lr
 8011014:	bf38      	it	cc
 8011016:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801101a:	2800      	cmp	r0, #0
 801101c:	bfa4      	itt	ge
 801101e:	463c      	movge	r4, r7
 8011020:	4603      	movge	r3, r0
 8011022:	ea53 0104 	orrs.w	r1, r3, r4
 8011026:	d0c6      	beq.n	8010fb6 <__ieee754_fmod+0x5e>
 8011028:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801102c:	db69      	blt.n	8011102 <__ieee754_fmod+0x1aa>
 801102e:	494d      	ldr	r1, [pc, #308]	@ (8011164 <__ieee754_fmod+0x20c>)
 8011030:	428a      	cmp	r2, r1
 8011032:	db6c      	blt.n	801110e <__ieee754_fmod+0x1b6>
 8011034:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011038:	432b      	orrs	r3, r5
 801103a:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 801103e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011042:	4620      	mov	r0, r4
 8011044:	e7a9      	b.n	8010f9a <__ieee754_fmod+0x42>
 8011046:	3901      	subs	r1, #1
 8011048:	005b      	lsls	r3, r3, #1
 801104a:	e7c3      	b.n	8010fd4 <__ieee754_fmod+0x7c>
 801104c:	4945      	ldr	r1, [pc, #276]	@ (8011164 <__ieee754_fmod+0x20c>)
 801104e:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8011052:	2b00      	cmp	r3, #0
 8011054:	ddc0      	ble.n	8010fd8 <__ieee754_fmod+0x80>
 8011056:	3901      	subs	r1, #1
 8011058:	005b      	lsls	r3, r3, #1
 801105a:	e7fa      	b.n	8011052 <__ieee754_fmod+0xfa>
 801105c:	ea4f 5128 	mov.w	r1, r8, asr #20
 8011060:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8011064:	e7b8      	b.n	8010fd8 <__ieee754_fmod+0x80>
 8011066:	3a01      	subs	r2, #1
 8011068:	005b      	lsls	r3, r3, #1
 801106a:	e7bc      	b.n	8010fe6 <__ieee754_fmod+0x8e>
 801106c:	4a3d      	ldr	r2, [pc, #244]	@ (8011164 <__ieee754_fmod+0x20c>)
 801106e:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8011072:	2b00      	cmp	r3, #0
 8011074:	ddb9      	ble.n	8010fea <__ieee754_fmod+0x92>
 8011076:	3a01      	subs	r2, #1
 8011078:	005b      	lsls	r3, r3, #1
 801107a:	e7fa      	b.n	8011072 <__ieee754_fmod+0x11a>
 801107c:	ea4f 522c 	mov.w	r2, ip, asr #20
 8011080:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8011084:	e7b1      	b.n	8010fea <__ieee754_fmod+0x92>
 8011086:	1a40      	subs	r0, r0, r1
 8011088:	281f      	cmp	r0, #31
 801108a:	dc0a      	bgt.n	80110a2 <__ieee754_fmod+0x14a>
 801108c:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 8011090:	fa08 f800 	lsl.w	r8, r8, r0
 8011094:	fa2a f303 	lsr.w	r3, sl, r3
 8011098:	ea43 0308 	orr.w	r3, r3, r8
 801109c:	fa0a f400 	lsl.w	r4, sl, r0
 80110a0:	e7aa      	b.n	8010ff8 <__ieee754_fmod+0xa0>
 80110a2:	4b31      	ldr	r3, [pc, #196]	@ (8011168 <__ieee754_fmod+0x210>)
 80110a4:	1a5b      	subs	r3, r3, r1
 80110a6:	fa0a f303 	lsl.w	r3, sl, r3
 80110aa:	2400      	movs	r4, #0
 80110ac:	e7a4      	b.n	8010ff8 <__ieee754_fmod+0xa0>
 80110ae:	1a80      	subs	r0, r0, r2
 80110b0:	281f      	cmp	r0, #31
 80110b2:	dc0a      	bgt.n	80110ca <__ieee754_fmod+0x172>
 80110b4:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 80110b8:	fa0c fc00 	lsl.w	ip, ip, r0
 80110bc:	fa27 f606 	lsr.w	r6, r7, r6
 80110c0:	ea46 060c 	orr.w	r6, r6, ip
 80110c4:	fa07 fe00 	lsl.w	lr, r7, r0
 80110c8:	e79d      	b.n	8011006 <__ieee754_fmod+0xae>
 80110ca:	4e27      	ldr	r6, [pc, #156]	@ (8011168 <__ieee754_fmod+0x210>)
 80110cc:	1ab6      	subs	r6, r6, r2
 80110ce:	fa07 f606 	lsl.w	r6, r7, r6
 80110d2:	f04f 0e00 	mov.w	lr, #0
 80110d6:	e796      	b.n	8011006 <__ieee754_fmod+0xae>
 80110d8:	4574      	cmp	r4, lr
 80110da:	bf38      	it	cc
 80110dc:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80110e0:	2800      	cmp	r0, #0
 80110e2:	da05      	bge.n	80110f0 <__ieee754_fmod+0x198>
 80110e4:	0fe0      	lsrs	r0, r4, #31
 80110e6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80110ea:	0064      	lsls	r4, r4, #1
 80110ec:	3901      	subs	r1, #1
 80110ee:	e78b      	b.n	8011008 <__ieee754_fmod+0xb0>
 80110f0:	ea50 0307 	orrs.w	r3, r0, r7
 80110f4:	f43f af5f 	beq.w	8010fb6 <__ieee754_fmod+0x5e>
 80110f8:	0ffb      	lsrs	r3, r7, #31
 80110fa:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80110fe:	007c      	lsls	r4, r7, #1
 8011100:	e7f4      	b.n	80110ec <__ieee754_fmod+0x194>
 8011102:	0fe1      	lsrs	r1, r4, #31
 8011104:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8011108:	0064      	lsls	r4, r4, #1
 801110a:	3a01      	subs	r2, #1
 801110c:	e78c      	b.n	8011028 <__ieee754_fmod+0xd0>
 801110e:	1a89      	subs	r1, r1, r2
 8011110:	2914      	cmp	r1, #20
 8011112:	dc0a      	bgt.n	801112a <__ieee754_fmod+0x1d2>
 8011114:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8011118:	fa03 f202 	lsl.w	r2, r3, r2
 801111c:	40cc      	lsrs	r4, r1
 801111e:	4322      	orrs	r2, r4
 8011120:	410b      	asrs	r3, r1
 8011122:	ea43 0105 	orr.w	r1, r3, r5
 8011126:	4610      	mov	r0, r2
 8011128:	e737      	b.n	8010f9a <__ieee754_fmod+0x42>
 801112a:	291f      	cmp	r1, #31
 801112c:	dc07      	bgt.n	801113e <__ieee754_fmod+0x1e6>
 801112e:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8011132:	40cc      	lsrs	r4, r1
 8011134:	fa03 f202 	lsl.w	r2, r3, r2
 8011138:	4322      	orrs	r2, r4
 801113a:	462b      	mov	r3, r5
 801113c:	e7f1      	b.n	8011122 <__ieee754_fmod+0x1ca>
 801113e:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8011142:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8011146:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 801114a:	32e2      	adds	r2, #226	@ 0xe2
 801114c:	fa43 f202 	asr.w	r2, r3, r2
 8011150:	e7f3      	b.n	801113a <__ieee754_fmod+0x1e2>
 8011152:	bf00      	nop
 8011154:	7fefffff 	.word	0x7fefffff
 8011158:	7ff00000 	.word	0x7ff00000
 801115c:	08011720 	.word	0x08011720
 8011160:	fffffbed 	.word	0xfffffbed
 8011164:	fffffc02 	.word	0xfffffc02
 8011168:	fffffbe2 	.word	0xfffffbe2

0801116c <_init>:
 801116c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801116e:	bf00      	nop
 8011170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011172:	bc08      	pop	{r3}
 8011174:	469e      	mov	lr, r3
 8011176:	4770      	bx	lr

08011178 <_fini>:
 8011178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801117a:	bf00      	nop
 801117c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801117e:	bc08      	pop	{r3}
 8011180:	469e      	mov	lr, r3
 8011182:	4770      	bx	lr
